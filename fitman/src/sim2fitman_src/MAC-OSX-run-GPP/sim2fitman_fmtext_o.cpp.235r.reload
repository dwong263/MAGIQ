
;; Function int read_data(int*, Preprocess*, IOFiles*, Data_file_header*, Data_block_header*, Precision2*, FILE**, Precision1*, float**, float**, int, InFile_struct*) (_Z9read_dataPiP10PreprocessP7IOFilesP16Data_file_headerP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSG_iP13InFile_struct, funcdef_no=2, decl_uid=5430, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 42:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=637 from oldreg=93, assigning class GENERAL_REGS to r637
   42: {r637:DI=r637:DI<<0x6;clobber flags:CC;}
      REG_DEAD r92:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  848: r637:DI=r92:DI
    Inserting insn reload after:
  849: r93:DI=r637:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 55:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 62:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 88:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 101:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 114:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 125
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 131:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 132:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 140:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 144:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 145:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 146:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 154:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 157:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=638 from oldreg=141, assigning class GENERAL_REGS to r638
  157: {r638:DI=r638:DI<<0x6;clobber flags:CC;}
      REG_DEAD r140:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  850: r638:DI=r140:DI
    Inserting insn reload after:
  851: r141:DI=r638:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 159
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 163:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=639 from oldreg=145, assigning class GENERAL_REGS to r639
  163: {r639:DI=r639:DI<<0x6;clobber flags:CC;}
      REG_DEAD r144:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  852: r639:DI=r144:DI
    Inserting insn reload after:
  853: r145:DI=r639:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 165
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 167:  (0) r  (1) 0  (2) mr {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 170:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=640 from oldreg=150, assigning class GENERAL_REGS to r640
  170: {r640:DI=r640:DI<<0x5;clobber flags:CC;}
      REG_DEAD r149:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  854: r640:DI=r149:DI
    Inserting insn reload after:
  855: r150:DI=r640:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 175
	 Choosing alt 2 in insn 175:  (0) r  (1) 0  (2) mr {*muldi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 176:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 182:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 196:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=641 from oldreg=159, assigning class GENERAL_REGS to r641
  196: {r641:DI=r641:DI<<0x5;clobber flags:CC;}
      REG_DEAD r158:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  856: r641:DI=r158:DI
    Inserting insn reload after:
  857: r159:DI=r641:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 202:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=642 from oldreg=163, assigning class GENERAL_REGS to r642
  202: {r642:DI=r642:DI<<0x5;clobber flags:CC;}
      REG_DEAD r162:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  858: r642:DI=r162:DI
    Inserting insn reload after:
  859: r163:DI=r642:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 204
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 206:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=643 from oldreg=500, assigning class GENERAL_REGS to r643
  206: {r643:SI=r643:SI-r165:SI;clobber flags:CC;}
      REG_DEAD r165:SI
      REG_DEAD r161:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  860: r643:SI=r161:SI
    Inserting insn reload after:
  861: r500:SI=r643:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 215:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 229:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=644 from oldreg=172, assigning class GENERAL_REGS to r644
  229: {r644:DI=r644:DI<<0x5;clobber flags:CC;}
      REG_DEAD r171:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  862: r644:DI=r171:DI
    Inserting insn reload after:
  863: r172:DI=r644:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 0 in insn 231:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 244:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=645 from oldreg=175, assigning class GENERAL_REGS to r645
  244: {r645:DI=r645:DI<<0x6;clobber flags:CC;}
      REG_DEAD r174:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  864: r645:DI=r174:DI
    Inserting insn reload after:
  865: r175:DI=r645:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 258:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 260
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 264:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=646 from oldreg=185, assigning class GENERAL_REGS to r646
  264: {r646:DI=r646:DI<<0x6;clobber flags:CC;}
      REG_DEAD r184:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  866: r646:DI=r184:DI
    Inserting insn reload after:
  867: r185:DI=r646:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 272:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=647 from oldreg=191, assigning class GENERAL_REGS to r647
  272: {r647:DI=r647:DI<<0x6;clobber flags:CC;}
      REG_DEAD r190:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  868: r647:DI=r190:DI
    Inserting insn reload after:
  869: r191:DI=r647:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 274
	 Choosing alt 0 in insn 274:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 276:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=648 from oldreg=518, assigning class GENERAL_REGS to r648
  276: {r648:DI=r648:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  870: r648:DI=r193:DI
    Inserting insn reload after:
  871: r518:DI=r648:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 281:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 288:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 298:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 299:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 300
	 Choosing alt 0 in insn 300:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 304:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=649 from oldreg=202, assigning class GENERAL_REGS to r649
  304: {r649:DI=r649:DI<<0x6;clobber flags:CC;}
      REG_DEAD r201:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  872: r649:DI=r201:DI
    Inserting insn reload after:
  873: r202:DI=r649:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 305:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 306
	 Choosing alt 0 in insn 306:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 312:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=650 from oldreg=208, assigning class GENERAL_REGS to r650
  312: {r650:DI=r650:DI<<0x6;clobber flags:CC;}
      REG_DEAD r207:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  874: r650:DI=r207:DI
    Inserting insn reload after:
  875: r208:DI=r650:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 313:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 314
	 Choosing alt 0 in insn 314:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 315:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 316:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=651 from oldreg=528, assigning class GENERAL_REGS to r651
  316: {r651:DI=r651:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  876: r651:DI=r210:DI
    Inserting insn reload after:
  877: r528:DI=r651:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 317
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 321:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 328:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 334:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 335:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=652 from oldreg=216, assigning class GENERAL_REGS to r652
  335: {r652:DI=r652:DI<<0x6;clobber flags:CC;}
      REG_DEAD r215:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  878: r652:DI=r215:DI
    Inserting insn reload after:
  879: r216:DI=r652:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 337
	 Choosing alt 0 in insn 337:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 345:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=653 from oldreg=537, assigning class GENERAL_REGS to r653
  345: {r653:DI=r653:DI<<0x8;clobber flags:CC;}
      REG_DEAD r535:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  880: r653:DI=r535:DI
    Inserting insn reload after:
  881: r537:DI=r653:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 347
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 355:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 360:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 361:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=654 from oldreg=222, assigning class GENERAL_REGS to r654
  361: {r654:DI=r654:DI<<0x6;clobber flags:CC;}
      REG_DEAD r221:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  882: r654:DI=r221:DI
    Inserting insn reload after:
  883: r222:DI=r654:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 363
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 364:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 374:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 375:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 376
	 Choosing alt 0 in insn 376:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 377:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 379:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 383:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 384:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 386
	 Choosing alt 0 in insn 386:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 387:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 389:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 397:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 398:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 399
	 Choosing alt 0 in insn 399:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 400:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 402:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 407:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 409
	 Choosing alt 0 in insn 409:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 410:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 412:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 415:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 423:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 425
	 Choosing alt 0 in insn 425:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 426:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 429:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=655 from oldreg=256, assigning class GENERAL_REGS to r655
  429: {r655:DI=r655:DI<<0x6;clobber flags:CC;}
      REG_DEAD r255:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  884: r655:DI=r255:DI
    Inserting insn reload after:
  885: r256:DI=r655:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 431
	 Choosing alt 0 in insn 431:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 432:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 437:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=656 from oldreg=262, assigning class GENERAL_REGS to r656
  437: {r656:DI=r656:DI<<0x6;clobber flags:CC;}
      REG_DEAD r261:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  886: r656:DI=r261:DI
    Inserting insn reload after:
  887: r262:DI=r656:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 439
	 Choosing alt 0 in insn 439:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 440:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 441:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=657 from oldreg=558, assigning class GENERAL_REGS to r657
  441: {r657:DI=r657:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  888: r657:DI=r264:DI
    Inserting insn reload after:
  889: r558:DI=r657:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 442
	 Choosing alt 0 in insn 442:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 448:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 449:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 450
	 Choosing alt 0 in insn 450:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 451:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 460:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=658 from oldreg=273, assigning class GENERAL_REGS to r658
  460: {r658:DI=r658:DI<<0x6;clobber flags:CC;}
      REG_DEAD r272:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  890: r658:DI=r272:DI
    Inserting insn reload after:
  891: r273:DI=r658:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 461:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 462
	 Choosing alt 0 in insn 462:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 463:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 473:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=659 from oldreg=567, assigning class GENERAL_REGS to r659
  473: {r659:DI=r659:DI<<0x8;clobber flags:CC;}
      REG_DEAD r565:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  892: r659:DI=r565:DI
    Inserting insn reload after:
  893: r567:DI=r659:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 475
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 477:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 481:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 484:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 489:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 490:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=660 from oldreg=282, assigning class GENERAL_REGS to r660
  490: {r660:DI=r660:DI<<0x6;clobber flags:CC;}
      REG_DEAD r281:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  894: r660:DI=r281:DI
    Inserting insn reload after:
  895: r282:DI=r660:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 492
	 Choosing alt 0 in insn 492:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 493:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 500:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=661 from oldreg=287, assigning class GENERAL_REGS to r661
  500: {r661:DI=r661:DI<<0x6;clobber flags:CC;}
      REG_DEAD r286:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  896: r661:DI=r286:DI
    Inserting insn reload after:
  897: r287:DI=r661:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 502
	 Choosing alt 0 in insn 502:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 505:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 512:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 513:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 514
	 Choosing alt 0 in insn 514:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 529:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=662 from oldreg=301, assigning class GENERAL_REGS to r662
  529: {r662:DI=r662:DI<<0x6;clobber flags:CC;}
      REG_DEAD r300:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  898: r662:DI=r300:DI
    Inserting insn reload after:
  899: r301:DI=r662:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 531
	 Choosing alt 0 in insn 531:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 532:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 534:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 541:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 542:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 543
	 Choosing alt 0 in insn 543:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 549:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 550:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 551
	 Choosing alt 0 in insn 551:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 552:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 554:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 557:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 558:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 559:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 560:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 561
	 Choosing alt 0 in insn 561:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 562:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 564:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 572:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 573:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 574
	 Choosing alt 0 in insn 574:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 575:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 577:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 585:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 593:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=663 from oldreg=331, assigning class GENERAL_REGS to r663
  593: {r663:DI=r663:DI<<0x6;clobber flags:CC;}
      REG_DEAD r330:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  900: r663:DI=r330:DI
    Inserting insn reload after:
  901: r331:DI=r663:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 595
	 Choosing alt 0 in insn 595:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 598:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 604:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=664 from oldreg=337, assigning class GENERAL_REGS to r664
  604: {r664:DI=r664:DI<<0x6;clobber flags:CC;}
      REG_DEAD r336:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  902: r664:DI=r336:DI
    Inserting insn reload after:
  903: r337:DI=r664:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 605:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 606
	 Choosing alt 0 in insn 606:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 607:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 610:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 611:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 613:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 617:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 618:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 619:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 620
	 Choosing alt 0 in insn 620:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 621:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 623:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 625:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 627:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 628:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 629:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 630
	 Choosing alt 0 in insn 630:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 631:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 633:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 636:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 637:  (0) r  (1) rm {extendhisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 638:  (0) x  (1) r {*floatsisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 639:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 640:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 646:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 648:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=665 from oldreg=360, assigning class GENERAL_REGS to r665
  648: {r665:DI=r665:DI<<0x6;clobber flags:CC;}
      REG_DEAD r359:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  904: r665:DI=r359:DI
    Inserting insn reload after:
  905: r360:DI=r665:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 649:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 650
	 Choosing alt 0 in insn 650:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 651:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 653:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 657:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 659:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 661:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 662:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 663:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=666 from oldreg=367, assigning class GENERAL_REGS to r666
  663: {r666:DI=r666:DI<<0x6;clobber flags:CC;}
      REG_DEAD r366:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  906: r666:DI=r366:DI
    Inserting insn reload after:
  907: r367:DI=r666:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 664:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 665
	 Choosing alt 0 in insn 665:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 666:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 667:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 673:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 674:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 675
	 Choosing alt 0 in insn 675:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 676:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 678:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 681:  (0) r  (1) rem {*movdi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 682:  (0) x  (1) r {*floatdisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 683:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 684:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 685:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 686:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 687:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 688
	 Choosing alt 0 in insn 688:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 689:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 690:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 691:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 693:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 694:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 695:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 696:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 702:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 704:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 705:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 707:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 708:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=667 from oldreg=388, assigning class GENERAL_REGS to r667
  708: {r667:DI=r667:DI<<0x6;clobber flags:CC;}
      REG_DEAD r387:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  908: r667:DI=r387:DI
    Inserting insn reload after:
  909: r388:DI=r667:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 709:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 710
	 Choosing alt 0 in insn 710:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 711:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 716:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 718:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 719:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 720
	 Choosing alt 0 in insn 720:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 721:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 723:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 725:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 727:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 729:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 730
	 Choosing alt 0 in insn 730:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 731:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 732:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 733:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 734:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 736:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 737:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 738:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 739:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 740:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 741
	 Choosing alt 0 in insn 741:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 742:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 743:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 744:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 745:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 746:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 747:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 748
	 Choosing alt 0 in insn 748:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 749:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 750:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 752:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 753:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 754
	 Choosing alt 0 in insn 754:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 755:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 756:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 757:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 758:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 760:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 761:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 762:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 763:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 764:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 765
	 Choosing alt 0 in insn 765:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 766:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 767:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 768:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 769:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 770:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 771:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 772:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 774:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 775:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 776:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 777
	 Choosing alt 0 in insn 777:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 778:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 779:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 780:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 781:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 782:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 783:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 784:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 785
	 Choosing alt 0 in insn 785:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 786:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 787:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 793:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 799:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 805:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 807:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 808:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 810:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 811:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51

********** Pseudo live ranges #1: **********

  BB 51
   Insn 819: point = 0
   Insn 818: point = 0
   Insn 814: point = 1
   Insn 811: point = 3
   Insn 810: point = 4
   Insn 809: point = 4
   Insn 808: point = 5
   Insn 807: point = 6
   Insn 806: point = 6
   Insn 805: point = 7
  BB 3
   Insn 22: point = 8
   Insn 21: point = 8
   Insn 20: point = 9
   Insn 19: point = 11
  BB 50
   Insn 845: point = 12
   Insn 799: point = 12
  BB 12
   Insn 240: point = 12
   Insn 239: point = 12
   Insn 238: point = 13
  BB 49
   Insn 843: point = 14
   Insn 793: point = 14
  BB 47
   Insn 714: point = 14
   Insn 713: point = 14
   Insn 712: point = 15
   Insn 711: point = 17
   Insn 710: point = 19
   Insn 709: point = 21
   Insn 909: point = 22
	Hard reg 2 is preferable by r667 with profit 1
   Insn 708: point = 24
   Insn 908: point = 24
	Hard reg 2 is preferable by r667 with profit 1
	Hard reg 1 is preferable by r667 with profit 1
   Insn 707: point = 26
   Insn 706: point = 28
   Insn 705: point = 29
   Insn 704: point = 31
  BB 48
   Insn 841: point = 32
   Insn 787: point = 32
   Insn 786: point = 32
   Insn 785: point = 33
   Insn 784: point = 35
   Insn 783: point = 37
   Insn 782: point = 39
   Insn 781: point = 41
   Insn 780: point = 43
   Insn 779: point = 45
   Insn 778: point = 46
   Insn 777: point = 48
   Insn 776: point = 50
   Insn 775: point = 51
   Insn 774: point = 53
   Insn 773: point = 55
   Insn 772: point = 56
   Insn 771: point = 58
   Insn 770: point = 60
   Insn 769: point = 62
   Insn 768: point = 64
   Insn 767: point = 66
   Insn 766: point = 67
   Insn 765: point = 69
   Insn 764: point = 71
   Insn 763: point = 72
   Insn 762: point = 74
   Insn 761: point = 76
   Insn 760: point = 77
   Insn 759: point = 79
   Insn 758: point = 81
   Insn 757: point = 83
   Insn 756: point = 85
   Insn 755: point = 86
   Insn 754: point = 88
   Insn 753: point = 90
   Insn 752: point = 91
   Insn 751: point = 93
   Insn 750: point = 95
   Insn 749: point = 96
   Insn 748: point = 97
   Insn 747: point = 99
   Insn 746: point = 101
   Insn 745: point = 103
   Insn 744: point = 105
   Insn 743: point = 107
   Insn 742: point = 108
   Insn 741: point = 110
   Insn 740: point = 112
   Insn 739: point = 113
   Insn 738: point = 115
   Insn 737: point = 117
   Insn 736: point = 118
   Insn 735: point = 120
   Insn 734: point = 122
   Insn 733: point = 124
   Insn 732: point = 126
   Insn 731: point = 127
   Insn 730: point = 129
   Insn 729: point = 131
   Insn 728: point = 132
   Insn 727: point = 134
   Insn 726: point = 136
   Insn 725: point = 137
   Insn 724: point = 139
   Insn 723: point = 141
   Insn 722: point = 143
   Insn 721: point = 144
   Insn 720: point = 146
   Insn 719: point = 148
   Insn 718: point = 149
   Insn 717: point = 151
   Insn 716: point = 153
  BB 46
   Insn 702: point = 154
  BB 44
   Insn 669: point = 154
   Insn 668: point = 154
   Insn 667: point = 155
   Insn 666: point = 157
   Insn 665: point = 159
   Insn 664: point = 161
   Insn 907: point = 162
	Hard reg 2 is preferable by r666 with profit 1
   Insn 663: point = 164
   Insn 906: point = 164
	Hard reg 2 is preferable by r666 with profit 1
	Hard reg 1 is preferable by r666 with profit 1
   Insn 662: point = 166
   Insn 661: point = 168
   Insn 660: point = 169
   Insn 659: point = 171
  BB 45
   Insn 839: point = 172
   Insn 696: point = 172
   Insn 695: point = 172
   Insn 694: point = 173
   Insn 693: point = 174
   Insn 692: point = 176
   Insn 691: point = 178
   Insn 690: point = 180
   Insn 689: point = 181
   Insn 688: point = 183
   Insn 687: point = 185
   Insn 686: point = 186
   Insn 685: point = 188
   Insn 684: point = 190
   Insn 683: point = 191
   Insn 682: point = 192
   Insn 681: point = 194
   Insn 680: point = 196
   Insn 679: point = 198
   Insn 678: point = 200
   Insn 677: point = 202
   Insn 676: point = 203
   Insn 675: point = 205
   Insn 674: point = 207
   Insn 673: point = 208
   Insn 672: point = 210
   Insn 671: point = 212
  BB 43
   Insn 657: point = 213
  BB 42
   Insn 655: point = 213
   Insn 654: point = 213
   Insn 653: point = 214
   Insn 652: point = 216
   Insn 651: point = 218
   Insn 650: point = 220
   Insn 649: point = 222
   Insn 905: point = 223
	Hard reg 1 is preferable by r665 with profit 1
   Insn 648: point = 225
   Insn 904: point = 225
	Hard reg 1 is preferable by r665 with profit 1
	Hard reg 0 is preferable by r665 with profit 1
   Insn 647: point = 227
   Insn 646: point = 229
  BB 40
   Insn 614: point = 230
   Insn 613: point = 230
  BB 41
   Insn 837: point = 230
   Insn 640: point = 230
   Insn 639: point = 230
   Insn 638: point = 231
   Insn 637: point = 233
   Insn 636: point = 235
   Insn 635: point = 237
   Insn 634: point = 239
   Insn 633: point = 241
   Insn 632: point = 243
   Insn 631: point = 244
   Insn 630: point = 246
   Insn 629: point = 248
   Insn 628: point = 249
   Insn 627: point = 251
   Insn 626: point = 253
   Insn 625: point = 254
   Insn 624: point = 256
   Insn 623: point = 258
   Insn 622: point = 260
   Insn 621: point = 261
   Insn 620: point = 263
   Insn 619: point = 265
   Insn 618: point = 266
   Insn 617: point = 268
   Insn 616: point = 270
  BB 39
   Insn 611: point = 271
   Insn 610: point = 272
   Insn 609: point = 274
   Insn 608: point = 276
   Insn 607: point = 278
   Insn 606: point = 280
   Insn 605: point = 282
   Insn 903: point = 283
	Hard reg 1 is preferable by r664 with profit 1
   Insn 604: point = 285
   Insn 902: point = 285
	Hard reg 1 is preferable by r664 with profit 1
	Hard reg 0 is preferable by r664 with profit 1
   Insn 603: point = 287
   Insn 602: point = 289
  BB 38
   Insn 600: point = 290
   Insn 599: point = 290
   Insn 598: point = 291
   Insn 597: point = 293
   Insn 596: point = 295
   Insn 595: point = 297
   Insn 594: point = 299
   Insn 901: point = 300
	Hard reg 1 is preferable by r663 with profit 1
   Insn 593: point = 302
   Insn 900: point = 302
	Hard reg 1 is preferable by r663 with profit 1
	Hard reg 0 is preferable by r663 with profit 1
   Insn 592: point = 304
   Insn 591: point = 306
  BB 31
   Insn 496: point = 307
   Insn 495: point = 307
   Insn 494: point = 308
   Insn 493: point = 310
   Insn 492: point = 312
   Insn 491: point = 314
   Insn 895: point = 315
	Hard reg 2 is preferable by r660 with profit 1
   Insn 490: point = 317
   Insn 894: point = 317
	Hard reg 2 is preferable by r660 with profit 1
	Hard reg 1 is preferable by r660 with profit 1
   Insn 489: point = 319
   Insn 488: point = 321
   Insn 487: point = 322
   Insn 486: point = 324
  BB 37
   Insn 835: point = 325
   Insn 585: point = 325
  BB 35
   Insn 833: point = 325
   Insn 564: point = 325
   Insn 563: point = 326
   Insn 562: point = 328
   Insn 561: point = 330
   Insn 560: point = 332
   Insn 559: point = 333
   Insn 558: point = 335
   Insn 557: point = 337
   Insn 556: point = 338
   Insn 555: point = 340
   Insn 554: point = 342
   Insn 553: point = 344
   Insn 552: point = 345
   Insn 551: point = 347
   Insn 550: point = 349
   Insn 549: point = 350
   Insn 548: point = 352
   Insn 547: point = 354
   Insn 546: point = 355
   Insn 545: point = 355
   Insn 544: point = 356
   Insn 543: point = 357
   Insn 542: point = 359
   Insn 541: point = 360
   Insn 540: point = 362
   Insn 539: point = 364
   Insn 538: point = 365
  BB 33
   Insn 831: point = 366
   Insn 522: point = 366
   Insn 521: point = 366
   Insn 520: point = 367
   Insn 519: point = 368
   Insn 518: point = 370
   Insn 517: point = 372
   Insn 516: point = 374
   Insn 515: point = 375
   Insn 514: point = 377
   Insn 513: point = 379
   Insn 512: point = 380
   Insn 511: point = 382
   Insn 510: point = 384
   Insn 509: point = 385
  BB 36
   Insn 582: point = 386
   Insn 581: point = 386
   Insn 580: point = 387
   Insn 579: point = 388
   Insn 578: point = 390
   Insn 577: point = 392
   Insn 576: point = 394
   Insn 575: point = 395
   Insn 574: point = 397
   Insn 573: point = 399
   Insn 572: point = 400
   Insn 571: point = 402
   Insn 570: point = 404
   Insn 569: point = 405
  BB 34
   Insn 536: point = 406
   Insn 535: point = 406
   Insn 534: point = 407
   Insn 533: point = 409
   Insn 532: point = 411
   Insn 531: point = 413
   Insn 530: point = 415
   Insn 899: point = 416
	Hard reg 1 is preferable by r662 with profit 1
   Insn 529: point = 418
   Insn 898: point = 418
	Hard reg 1 is preferable by r662 with profit 1
	Hard reg 0 is preferable by r662 with profit 1
   Insn 528: point = 420
   Insn 527: point = 422
  BB 32
   Insn 507: point = 423
   Insn 506: point = 423
   Insn 505: point = 424
   Insn 504: point = 426
   Insn 503: point = 428
   Insn 502: point = 430
   Insn 501: point = 432
   Insn 897: point = 433
	Hard reg 1 is preferable by r661 with profit 1
   Insn 500: point = 435
   Insn 896: point = 435
	Hard reg 1 is preferable by r661 with profit 1
	Hard reg 0 is preferable by r661 with profit 1
   Insn 499: point = 437
   Insn 498: point = 439
  BB 30
   Insn 484: point = 440
  BB 29
   Insn 482: point = 440
   Insn 481: point = 440
  BB 19
   Insn 827: point = 440
   Insn 350: point = 440
   Insn 349: point = 440
   Insn 348: point = 440
   Insn 347: point = 441
   Insn 346: point = 443
   Insn 881: point = 444
	Hard reg 1 is preferable by r653 with profit 1
   Insn 345: point = 446
   Insn 880: point = 446
	Hard reg 1 is preferable by r653 with profit 1
	Hard reg 0 is preferable by r653 with profit 1
   Insn 344: point = 448
   Insn 343: point = 450
  BB 28
   Insn 478: point = 451
   Insn 477: point = 451
   Insn 476: point = 451
   Insn 475: point = 452
   Insn 474: point = 454
   Insn 893: point = 455
	Hard reg 1 is preferable by r659 with profit 1
   Insn 473: point = 457
   Insn 892: point = 457
	Hard reg 1 is preferable by r659 with profit 1
	Hard reg 0 is preferable by r659 with profit 1
   Insn 472: point = 459
   Insn 471: point = 461
  BB 27
   Insn 469: point = 462
   Insn 468: point = 462
   Insn 467: point = 463
   Insn 466: point = 464
   Insn 465: point = 465
   Insn 464: point = 467
   Insn 463: point = 469
   Insn 462: point = 471
   Insn 461: point = 473
   Insn 891: point = 474
	Hard reg 1 is preferable by r658 with profit 1
   Insn 460: point = 476
   Insn 890: point = 476
	Hard reg 1 is preferable by r658 with profit 1
	Hard reg 0 is preferable by r658 with profit 1
   Insn 459: point = 478
   Insn 458: point = 480
   Insn 457: point = 481
   Insn 456: point = 482
   Insn 455: point = 482
   Insn 454: point = 483
   Insn 453: point = 484
   Insn 452: point = 485
   Insn 451: point = 486
   Insn 450: point = 488
   Insn 449: point = 490
   Insn 448: point = 491
   Insn 447: point = 493
   Insn 446: point = 495
   Insn 445: point = 496
   Insn 444: point = 498
   Insn 443: point = 500
   Insn 442: point = 502
   Insn 889: point = 504
	Hard reg 2 is preferable by r657 with profit 1
   Insn 441: point = 506
   Insn 888: point = 506
   Insn 440: point = 507
   Insn 439: point = 509
   Insn 438: point = 511
   Insn 887: point = 512
	Hard reg 2 is preferable by r656 with profit 1
   Insn 437: point = 514
   Insn 886: point = 514
	Hard reg 2 is preferable by r656 with profit 1
	Hard reg 0 is preferable by r656 with profit 1
   Insn 436: point = 516
   Insn 435: point = 518
   Insn 434: point = 519
   Insn 433: point = 521
   Insn 432: point = 523
   Insn 431: point = 525
   Insn 430: point = 527
   Insn 885: point = 528
	Hard reg 2 is preferable by r655 with profit 1
   Insn 429: point = 530
   Insn 884: point = 530
	Hard reg 2 is preferable by r655 with profit 1
	Hard reg 0 is preferable by r655 with profit 1
   Insn 428: point = 532
   Insn 427: point = 534
   Insn 426: point = 535
   Insn 425: point = 537
   Insn 424: point = 539
   Insn 423: point = 540
   Insn 422: point = 542
   Insn 421: point = 544
  BB 21
   Insn 367: point = 545
   Insn 366: point = 545
   Insn 365: point = 546
   Insn 364: point = 548
   Insn 363: point = 550
   Insn 362: point = 552
   Insn 883: point = 553
	Hard reg 2 is preferable by r654 with profit 1
   Insn 361: point = 555
   Insn 882: point = 555
	Hard reg 2 is preferable by r654 with profit 1
	Hard reg 1 is preferable by r654 with profit 1
   Insn 360: point = 557
   Insn 359: point = 559
   Insn 358: point = 560
   Insn 357: point = 562
  BB 26
   Insn 829: point = 563
   Insn 415: point = 563
  BB 25
   Insn 412: point = 563
   Insn 411: point = 564
   Insn 410: point = 566
   Insn 409: point = 568
   Insn 408: point = 570
   Insn 407: point = 571
   Insn 406: point = 573
   Insn 405: point = 575
   Insn 404: point = 576
   Insn 403: point = 578
   Insn 402: point = 580
   Insn 401: point = 582
   Insn 400: point = 583
   Insn 399: point = 585
   Insn 398: point = 587
   Insn 397: point = 588
   Insn 396: point = 590
   Insn 395: point = 592
  BB 24
   Insn 393: point = 593
   Insn 392: point = 593
  BB 23
   Insn 389: point = 593
   Insn 388: point = 594
   Insn 387: point = 596
   Insn 386: point = 598
   Insn 385: point = 600
   Insn 384: point = 601
   Insn 383: point = 603
   Insn 382: point = 605
   Insn 381: point = 606
   Insn 380: point = 608
   Insn 379: point = 610
   Insn 378: point = 612
   Insn 377: point = 613
   Insn 376: point = 615
   Insn 375: point = 617
   Insn 374: point = 618
   Insn 373: point = 620
   Insn 372: point = 622
  BB 22
   Insn 370: point = 623
   Insn 369: point = 623
  BB 20
   Insn 355: point = 623
  BB 18
   Insn 341: point = 623
   Insn 340: point = 623
   Insn 339: point = 624
   Insn 338: point = 626
   Insn 337: point = 628
   Insn 336: point = 630
   Insn 879: point = 631
	Hard reg 2 is preferable by r652 with profit 1
   Insn 335: point = 633
   Insn 878: point = 633
	Hard reg 2 is preferable by r652 with profit 1
	Hard reg 1 is preferable by r652 with profit 1
   Insn 334: point = 635
   Insn 333: point = 637
   Insn 332: point = 638
   Insn 331: point = 640
  BB 15
   Insn 825: point = 641
   Insn 288: point = 641
   Insn 287: point = 642
   Insn 286: point = 643
   Insn 285: point = 643
   Insn 284: point = 644
   Insn 283: point = 645
   Insn 282: point = 646
   Insn 281: point = 647
   Insn 280: point = 648
   Insn 279: point = 650
   Insn 278: point = 652
   Insn 277: point = 654
   Insn 871: point = 656
	Hard reg 2 is preferable by r648 with profit 1
   Insn 276: point = 658
   Insn 870: point = 658
   Insn 275: point = 659
   Insn 274: point = 661
   Insn 273: point = 663
   Insn 869: point = 664
	Hard reg 2 is preferable by r647 with profit 1
   Insn 272: point = 666
   Insn 868: point = 666
	Hard reg 2 is preferable by r647 with profit 1
	Hard reg 0 is preferable by r647 with profit 1
   Insn 271: point = 668
   Insn 270: point = 670
   Insn 269: point = 671
   Insn 268: point = 673
   Insn 267: point = 675
   Insn 266: point = 677
   Insn 265: point = 679
   Insn 867: point = 680
	Hard reg 2 is preferable by r646 with profit 1
   Insn 264: point = 682
   Insn 866: point = 682
	Hard reg 2 is preferable by r646 with profit 1
	Hard reg 0 is preferable by r646 with profit 1
   Insn 263: point = 684
   Insn 262: point = 686
   Insn 261: point = 687
   Insn 260: point = 689
   Insn 259: point = 691
   Insn 258: point = 692
   Insn 257: point = 694
   Insn 256: point = 696
  BB 17
   Insn 328: point = 697
   Insn 327: point = 698
   Insn 326: point = 699
   Insn 325: point = 699
   Insn 324: point = 700
   Insn 323: point = 701
   Insn 322: point = 702
   Insn 321: point = 703
   Insn 320: point = 704
   Insn 319: point = 706
   Insn 318: point = 708
   Insn 317: point = 710
   Insn 877: point = 712
	Hard reg 2 is preferable by r651 with profit 1
   Insn 316: point = 714
   Insn 876: point = 714
   Insn 315: point = 715
   Insn 314: point = 717
   Insn 313: point = 719
   Insn 875: point = 720
	Hard reg 2 is preferable by r650 with profit 1
   Insn 312: point = 722
   Insn 874: point = 722
	Hard reg 2 is preferable by r650 with profit 1
	Hard reg 0 is preferable by r650 with profit 1
   Insn 311: point = 724
   Insn 310: point = 726
   Insn 309: point = 727
   Insn 308: point = 729
   Insn 307: point = 731
   Insn 306: point = 733
   Insn 305: point = 735
   Insn 873: point = 736
	Hard reg 2 is preferable by r649 with profit 1
   Insn 304: point = 738
   Insn 872: point = 738
	Hard reg 2 is preferable by r649 with profit 1
	Hard reg 0 is preferable by r649 with profit 1
   Insn 303: point = 740
   Insn 302: point = 742
   Insn 301: point = 743
   Insn 300: point = 745
   Insn 299: point = 747
   Insn 298: point = 748
   Insn 297: point = 750
   Insn 296: point = 752
  BB 16
   Insn 294: point = 753
   Insn 293: point = 753
  BB 14
   Insn 254: point = 753
   Insn 253: point = 753
  BB 13
   Insn 251: point = 753
   Insn 250: point = 753
   Insn 249: point = 754
   Insn 248: point = 756
   Insn 247: point = 758
   Insn 246: point = 760
   Insn 245: point = 762
   Insn 865: point = 763
	Hard reg 1 is preferable by r645 with profit 1
   Insn 244: point = 765
   Insn 864: point = 765
	Hard reg 1 is preferable by r645 with profit 1
	Hard reg 0 is preferable by r645 with profit 1
   Insn 243: point = 767
   Insn 242: point = 769
  BB 11
   Insn 236: point = 770
  BB 9
   Insn 823: point = 770
   Insn 207: point = 770
   Insn 861: point = 771
	Hard reg 0 is preferable by r643 with profit 1
   Insn 206: point = 773
   Insn 860: point = 774
	Hard reg 0 is preferable by r643 with profit 1
	Hard reg 1 is preferable by r643 with profit 1
   Insn 205: point = 776
   Insn 204: point = 778
   Insn 203: point = 780
   Insn 859: point = 781
	Hard reg 2 is preferable by r642 with profit 1
   Insn 202: point = 783
   Insn 858: point = 783
	Hard reg 2 is preferable by r642 with profit 1
	Hard reg 0 is preferable by r642 with profit 1
   Insn 201: point = 785
   Insn 200: point = 787
   Insn 199: point = 788
   Insn 198: point = 790
   Insn 197: point = 792
   Insn 857: point = 793
	Hard reg 1 is preferable by r641 with profit 1
   Insn 196: point = 795
   Insn 856: point = 795
	Hard reg 1 is preferable by r641 with profit 1
	Hard reg 0 is preferable by r641 with profit 1
   Insn 195: point = 797
   Insn 194: point = 799
   Insn 193: point = 800
   Insn 192: point = 800
   Insn 191: point = 801
   Insn 190: point = 802
   Insn 189: point = 802
   Insn 188: point = 803
   Insn 187: point = 805
   Insn 186: point = 807
   Insn 185: point = 808
   Insn 184: point = 810
   Insn 183: point = 812
   Insn 182: point = 813
   Insn 181: point = 814
   Insn 180: point = 816
  BB 10
   Insn 233: point = 817
   Insn 232: point = 818
   Insn 231: point = 820
   Insn 230: point = 822
   Insn 863: point = 823
	Hard reg 1 is preferable by r644 with profit 1
   Insn 229: point = 825
   Insn 862: point = 825
	Hard reg 1 is preferable by r644 with profit 1
	Hard reg 0 is preferable by r644 with profit 1
   Insn 228: point = 827
   Insn 227: point = 829
   Insn 226: point = 830
   Insn 225: point = 830
   Insn 224: point = 831
   Insn 223: point = 832
   Insn 222: point = 832
   Insn 221: point = 833
   Insn 220: point = 835
   Insn 219: point = 837
   Insn 218: point = 838
   Insn 217: point = 840
   Insn 216: point = 842
   Insn 215: point = 843
   Insn 214: point = 844
   Insn 213: point = 846
   Insn 212: point = 848
  BB 8
   Insn 178: point = 849
   Insn 177: point = 849
   Insn 176: point = 849
   Insn 175: point = 850
   Insn 174: point = 852
   Insn 173: point = 854
   Insn 172: point = 856
   Insn 171: point = 858
   Insn 855: point = 859
	Hard reg 2 is preferable by r640 with profit 1
   Insn 170: point = 861
   Insn 854: point = 861
	Hard reg 2 is preferable by r640 with profit 1
	Hard reg 0 is preferable by r640 with profit 1
   Insn 169: point = 863
   Insn 168: point = 865
   Insn 167: point = 866
   Insn 166: point = 868
   Insn 165: point = 870
   Insn 164: point = 872
   Insn 853: point = 873
	Hard reg 2 is preferable by r639 with profit 1
   Insn 163: point = 875
   Insn 852: point = 875
	Hard reg 2 is preferable by r639 with profit 1
	Hard reg 0 is preferable by r639 with profit 1
   Insn 162: point = 877
   Insn 161: point = 879
   Insn 160: point = 880
   Insn 159: point = 882
   Insn 158: point = 884
   Insn 851: point = 885
	Hard reg 1 is preferable by r638 with profit 1
   Insn 157: point = 887
   Insn 850: point = 887
	Hard reg 1 is preferable by r638 with profit 1
	Hard reg 0 is preferable by r638 with profit 1
   Insn 156: point = 889
   Insn 155: point = 891
   Insn 154: point = 892
   Insn 153: point = 893
   Insn 152: point = 895
  BB 6
   Insn 119: point = 896
   Insn 118: point = 896
   Insn 117: point = 897
  BB 7
   Insn 821: point = 898
   Insn 146: point = 898
   Insn 145: point = 898
   Insn 144: point = 899
   Insn 143: point = 900
   Insn 142: point = 902
   Insn 141: point = 904
   Insn 140: point = 906
   Insn 139: point = 908
   Insn 138: point = 909
   Insn 137: point = 911
   Insn 136: point = 913
   Insn 135: point = 914
   Insn 134: point = 916
   Insn 133: point = 918
   Insn 132: point = 919
   Insn 131: point = 920
   Insn 130: point = 921
   Insn 129: point = 923
   Insn 128: point = 925
   Insn 127: point = 927
   Insn 126: point = 928
   Insn 125: point = 930
   Insn 124: point = 932
   Insn 123: point = 933
   Insn 122: point = 935
   Insn 121: point = 937
  BB 5
   Insn 115: point = 938
   Insn 114: point = 938
   Insn 113: point = 939
   Insn 112: point = 941
   Insn 111: point = 942
   Insn 110: point = 942
   Insn 109: point = 943
   Insn 108: point = 945
   Insn 107: point = 947
   Insn 106: point = 948
   Insn 105: point = 950
   Insn 104: point = 951
   Insn 103: point = 953
   Insn 102: point = 955
   Insn 101: point = 956
   Insn 100: point = 957
   Insn 99: point = 959
   Insn 98: point = 960
   Insn 97: point = 960
   Insn 96: point = 961
   Insn 95: point = 963
   Insn 94: point = 965
   Insn 93: point = 966
   Insn 92: point = 968
   Insn 91: point = 969
   Insn 90: point = 971
   Insn 89: point = 973
   Insn 88: point = 974
   Insn 87: point = 975
   Insn 86: point = 977
   Insn 85: point = 978
   Insn 84: point = 978
   Insn 83: point = 979
   Insn 82: point = 981
   Insn 81: point = 983
   Insn 80: point = 984
   Insn 79: point = 986
   Insn 78: point = 987
   Insn 77: point = 989
   Insn 76: point = 991
   Insn 75: point = 992
   Insn 74: point = 993
   Insn 73: point = 995
   Insn 72: point = 996
   Insn 71: point = 996
   Insn 70: point = 997
   Insn 69: point = 999
   Insn 68: point = 1001
   Insn 67: point = 1002
   Insn 66: point = 1004
   Insn 65: point = 1005
   Insn 64: point = 1007
   Insn 63: point = 1009
   Insn 62: point = 1010
   Insn 61: point = 1011
   Insn 60: point = 1012
   Insn 59: point = 1012
   Insn 58: point = 1013
   Insn 57: point = 1015
   Insn 56: point = 1017
   Insn 55: point = 1018
   Insn 54: point = 1019
   Insn 53: point = 1020
   Insn 52: point = 1020
   Insn 51: point = 1021
   Insn 50: point = 1023
   Insn 49: point = 1025
   Insn 48: point = 1026
   Insn 47: point = 1027
   Insn 46: point = 1029
   Insn 45: point = 1031
   Insn 44: point = 1033
   Insn 43: point = 1035
   Insn 849: point = 1036
	Hard reg 1 is preferable by r637 with profit 1
   Insn 42: point = 1038
   Insn 848: point = 1038
	Hard reg 1 is preferable by r637 with profit 1
	Hard reg 0 is preferable by r637 with profit 1
   Insn 41: point = 1040
   Insn 40: point = 1042
  BB 4
   Insn 38: point = 1043
   Insn 37: point = 1043
   Insn 36: point = 1044
   Insn 35: point = 1046
   Insn 34: point = 1048
   Insn 33: point = 1049
   Insn 32: point = 1051
   Insn 31: point = 1053
   Insn 30: point = 1055
   Insn 29: point = 1056
   Insn 28: point = 1056
   Insn 27: point = 1056
   Insn 26: point = 1056
   Insn 25: point = 1057
   Insn 24: point = 1059
  BB 2
   Insn 17: point = 1060
   Insn 16: point = 1060
   Insn 15: point = 1060
   Insn 14: point = 1060
   Insn 13: point = 1060
   Insn 12: point = 1060
   Insn 11: point = 1060
   Insn 7: point = 1060
   Insn 6: point = 1060
   Insn 5: point = 1060
   Insn 4: point = 1060
   Insn 3: point = 1060
   Insn 2: point = 1060
 r87: [8..9]
 r88: [1055..1057]
 r89: [1047..1049]
 r90: [1045..1046]
 r91: [1043..1044]
 r92: [1039..1040]
 r93: [1034..1036]
 r94: [1032..1033]
 r95: [1030..1031]
 r96: [1028..1029]
 r97: [1022..1023]
 r98: [1020..1021]
 r99: [1014..1015]
 r100: [1012..1013]
 r101: [1006..1007]
 r102: [1003..1005]
 r103: [992..1002]
 r104: [998..999]
 r105: [996..997]
 r106: [992..993]
 r107: [988..989]
 r108: [985..987]
 r109: [974..984]
 r110: [980..981]
 r111: [978..979]
 r112: [974..975]
 r113: [970..971]
 r114: [967..969]
 r115: [956..966]
 r116: [962..963]
 r117: [960..961]
 r118: [956..957]
 r119: [952..953]
 r120: [949..951]
 r121: [938..948]
 r122: [944..945]
 r123: [942..943]
 r124: [938..939]
 r125: [934..935]
 r126: [931..933]
 r127: [929..930]
 r128: [922..928]
 r129: [924..925]
 r130: [922..923]
 r131: [919..921]
 r132: [915..916]
 r133: [912..914]
 r134: [910..911]
 r135: [901..909]
 r136: [905..906]
 r137: [903..904]
 r138: [901..902]
 r139: [898..900]
 r140: [888..889]
 r141: [883..885]
 r142: [881..882]
 r143: [867..880]
 r144: [876..877]
 r145: [871..873]
 r146: [869..870]
 r147: [867..868]
 r148: [851..866]
 r149: [862..863]
 r150: [857..859]
 r151: [855..856]
 r152: [853..854]
 r153: [851..852]
 r154: [809..810]
 r155: [806..808]
 r156: [804..805]
 r157: [800..803]
 r158: [796..797]
 r159: [791..793]
 r160: [789..790]
 r161: [775..788]
 r162: [784..785]
 r163: [779..781]
 r164: [777..778]
 r165: [773..776]
 r166: [845..846]
 r167: [839..840]
 r168: [836..838]
 r169: [834..835]
 r170: [830..833]
 r171: [826..827]
 r172: [821..823]
 r173: [819..820]
 r174: [766..767]
 r175: [761..763]
 r176: [759..760]
 r177: [757..758]
 r178: [755..756]
 r179: [753..754]
 r180: [693..694]
 r181: [690..692]
 r182: [688..689]
 r183: [646..687]
 r184: [683..684]
 r185: [678..680]
 r186: [676..677]
 r187: [674..675]
 r188: [672..673]
 r189: [645..671]
 r190: [667..668]
 r191: [662..664]
 r192: [660..661]
 r193: [655..659]
 r194: [649..650]
 r195: [644..648]
 r196: [641..642]
 r197: [749..750]
 r198: [746..748]
 r199: [744..745]
 r200: [702..743]
 r201: [739..740]
 r202: [734..736]
 r203: [732..733]
 r204: [730..731]
 r205: [728..729]
 r206: [701..727]
 r207: [723..724]
 r208: [718..720]
 r209: [716..717]
 r210: [711..715]
 r211: [705..706]
 r212: [700..704]
 r213: [697..698]
 r214: [623..638]
 r215: [634..635]
 r216: [629..631]
 r217: [627..628]
 r218: [625..626]
 r219: [623..624]
 r220: [545..560]
 r221: [556..557]
 r222: [551..553]
 r223: [549..550]
 r224: [547..548]
 r225: [545..546]
 r226: [619..620]
 r227: [616..618]
 r228: [614..615]
 r229: [607..613]
 r230: [609..610]
 r231: [607..608]
 r232: [593..606]
 r233: [602..603]
 r234: [599..601]
 r235: [597..598]
 r236: [595..596]
 r237: [593..594]
 r238: [589..590]
 r239: [586..588]
 r240: [584..585]
 r241: [577..583]
 r242: [579..580]
 r243: [577..578]
 r244: [563..576]
 r245: [572..573]
 r246: [569..571]
 r247: [567..568]
 r248: [565..566]
 r249: [563..564]
 r250: [440..441]
 r251: [541..542]
 r252: [538..540]
 r253: [536..537]
 r254: [485..535]
 r255: [531..532]
 r256: [526..528]
 r257: [524..525]
 r258: [522..523]
 r259: [520..521]
 r260: [484..519]
 r261: [515..516]
 r262: [510..512]
 r263: [508..509]
 r264: [503..507]
 r265: [497..498]
 r266: [483..496]
 r267: [492..493]
 r268: [489..491]
 r269: [487..488]
 r270: [482..486]
 r271: [464..481]
 r272: [477..478]
 r273: [472..474]
 r274: [470..471]
 r275: [468..469]
 r276: [466..467]
 r277: [464..465]
 r278: [462..463]
 r279: [451..452]
 r280: [307..322]
 r281: [318..319]
 r282: [313..315]
 r283: [311..312]
 r284: [309..310]
 r285: [307..308]
 r286: [436..437]
 r287: [431..433]
 r288: [429..430]
 r289: [427..428]
 r290: [425..426]
 r291: [423..424]
 r292: [367..385]
 r293: [381..382]
 r294: [378..380]
 r295: [376..377]
 r296: [369..375]
 r297: [371..372]
 r298: [369..370]
 r299: [366..368]
 r300: [419..420]
 r301: [414..416]
 r302: [412..413]
 r303: [410..411]
 r304: [408..409]
 r305: [406..407]
 r306: [356..365]
 r307: [361..362]
 r308: [358..360]
 r309: [355..357]
 r310: [351..352]
 r311: [348..350]
 r312: [346..347]
 r313: [339..345]
 r314: [341..342]
 r315: [339..340]
 r316: [325..338]
 r317: [334..335]
 r318: [331..333]
 r319: [329..330]
 r320: [327..328]
 r321: [325..326]
 r322: [387..405]
 r323: [401..402]
 r324: [398..400]
 r325: [396..397]
 r326: [389..395]
 r327: [391..392]
 r328: [389..390]
 r329: [386..388]
 r330: [303..304]
 r331: [298..300]
 r332: [296..297]
 r333: [294..295]
 r334: [292..293]
 r335: [290..291]
 r336: [286..287]
 r337: [281..283]
 r338: [279..280]
 r339: [277..278]
 r340: [275..276]
 r341: [273..274]
 r342: [271..272]
 r343: [267..268]
 r344: [264..266]
 r345: [262..263]
 r346: [255..261]
 r347: [257..258]
 r348: [255..256]
 r349: [230..254]
 r350: [250..251]
 r351: [247..249]
 r352: [245..246]
 r353: [238..244]
 r354: [240..241]
 r355: [238..239]
 r356: [236..237]
 r357: [234..235]
 r358: [230..231]
 r359: [226..227]
 r360: [221..223]
 r361: [219..220]
 r362: [217..218]
 r363: [215..216]
 r364: [213..214]
 r365: [154..169]
 r366: [165..166]
 r367: [160..162]
 r368: [158..159]
 r369: [156..157]
 r370: [154..155]
 r371: [209..210]
 r372: [206..208]
 r373: [204..205]
 r374: [197..203]
 r375: [199..200]
 r376: [197..198]
 r377: [195..196]
 r378: [193..194]
 r379: [187..188]
 r380: [184..186]
 r381: [182..183]
 r382: [175..181]
 r383: [177..178]
 r384: [175..176]
 r385: [172..174]
 r386: [14..29]
 r387: [25..26]
 r388: [20..22]
 r389: [18..19]
 r390: [16..17]
 r391: [14..15]
 r392: [150..151]
 r393: [147..149]
 r394: [145..146]
 r395: [138..144]
 r396: [140..141]
 r397: [138..139]
 r398: [96..137]
 r399: [133..134]
 r400: [130..132]
 r401: [128..129]
 r402: [121..127]
 r403: [123..124]
 r404: [121..122]
 r405: [119..120]
 r406: [98..118]
 r407: [114..115]
 r408: [111..113]
 r409: [109..110]
 r410: [102..108]
 r411: [104..105]
 r412: [102..103]
 r413: [100..101]
 r414: [98..99]
 r415: [96..97]
 r416: [92..93]
 r417: [89..91]
 r418: [87..88]
 r419: [78..86]
 r420: [82..83]
 r421: [80..81]
 r422: [78..79]
 r423: [32..77]
 r424: [73..74]
 r425: [70..72]
 r426: [68..69]
 r427: [59..67]
 r428: [63..64]
 r429: [61..62]
 r430: [59..60]
 r431: [57..58]
 r432: [34..56]
 r433: [52..53]
 r434: [49..51]
 r435: [47..48]
 r436: [38..46]
 r437: [42..43]
 r438: [40..41]
 r439: [38..39]
 r440: [36..37]
 r441: [34..35]
 r442: [32..33]
 r443: [2..3]
 r444: [0..1]
 r445: [10..11]
 r446: [1058..1059]
 r447: [1054..1056] [1050..1051]
 r448: [1052..1053]
 r449: [1047..1048]
 r450: [1041..1042]
 r451: [1034..1035]
 r452: [1026..1027]
 r453: [1024..1025]
 r454: [1018..1019]
 r455: [1016..1017]
 r456: [1010..1011]
 r457: [1008..1009]
 r458: [1003..1004]
 r459: [1000..1001]
 r460: [994..995]
 r461: [990..991]
 r462: [985..986]
 r463: [982..983]
 r464: [976..977]
 r465: [972..973]
 r466: [967..968]
 r467: [964..965]
 r468: [958..959]
 r469: [954..955]
 r470: [949..950]
 r471: [946..947]
 r472: [940..941]
 r473: [896..897]
 r474: [936..937]
 r475: [931..932]
 r476: [926..927]
 r477: [919..920]
 r478: [917..918]
 r479: [912..913]
 r480: [907..908]
 r481: [898..899]
 r482: [894..895]
 r483: [892..893]
 r484: [890..891]
 r485: [883..884]
 r486: [878..879]
 r487: [871..872]
 r488: [864..865]
 r489: [857..858]
 r490: [849..850]
 r491: [815..816]
 r492: [813..814]
 r493: [811..812]
 r494: [806..807]
 r495: [801..802]
 r496: [798..799]
 r497: [791..792]
 r498: [786..787]
 r499: [779..780]
 r500: [770..771]
 r501: [847..848]
 r502: [843..844]
 r503: [841..842]
 r504: [836..837]
 r505: [831..832]
 r506: [828..829]
 r507: [821..822]
 r508: [817..818]
 r509: [12..13]
 r510: [768..769]
 r511: [761..762]
 r512: [695..696]
 r513: [690..691]
 r514: [685..686]
 r515: [678..679]
 r516: [669..670]
 r517: [662..663]
 r518: [655..656]
 r519: [653..654]
 r520: [651..652]
 r521: [643..647]
 r522: [751..752]
 r523: [746..747]
 r524: [741..742]
 r525: [734..735]
 r526: [725..726]
 r527: [718..719]
 r528: [711..712]
 r529: [709..710]
 r530: [707..708]
 r531: [699..703]
 r532: [639..640]
 r533: [636..637]
 r534: [629..630]
 r535: [447..448]
 r536: [449..450]
 r537: [442..444]
 r538: [442..443]
 r539: [561..562]
 r540: [558..559]
 r541: [551..552]
 r542: [621..622]
 r543: [616..617]
 r544: [611..612]
 r545: [604..605]
 r546: [599..600]
 r547: [591..592]
 r548: [586..587]
 r549: [581..582]
 r550: [574..575]
 r551: [569..570]
 r552: [543..544]
 r553: [538..539]
 r554: [533..534]
 r555: [526..527]
 r556: [517..518]
 r557: [510..511]
 r558: [503..504]
 r559: [501..502]
 r560: [499..500]
 r561: [494..495]
 r562: [489..490]
 r563: [479..480]
 r564: [472..473]
 r565: [458..459]
 r566: [460..461]
 r567: [453..455]
 r568: [453..454]
 r569: [323..324]
 r570: [320..321]
 r571: [313..314]
 r572: [438..439]
 r573: [431..432]
 r574: [383..384]
 r575: [378..379]
 r576: [373..374]
 r577: [421..422]
 r578: [414..415]
 r579: [363..364]
 r580: [358..359]
 r581: [353..354]
 r582: [348..349]
 r583: [343..344]
 r584: [336..337]
 r585: [331..332]
 r586: [403..404]
 r587: [398..399]
 r588: [393..394]
 r589: [305..306]
 r590: [298..299]
 r591: [288..289]
 r592: [281..282]
 r593: [269..270]
 r594: [264..265]
 r595: [259..260]
 r596: [252..253]
 r597: [247..248]
 r598: [242..243]
 r599: [232..233]
 r600: [228..229]
 r601: [221..222]
 r602: [170..171]
 r603: [167..168]
 r604: [160..161]
 r605: [211..212]
 r606: [206..207]
 r607: [201..202]
 r608: [191..192]
 r609: [189..190]
 r610: [184..185]
 r611: [179..180]
 r612: [172..173]
 r613: [30..31]
 r614: [27..28]
 r615: [20..21]
 r616: [152..153]
 r617: [147..148]
 r618: [142..143]
 r619: [135..136]
 r620: [130..131]
 r621: [125..126]
 r622: [116..117]
 r623: [111..112]
 r624: [106..107]
 r625: [94..95]
 r626: [89..90]
 r627: [84..85]
 r628: [75..76]
 r629: [70..71]
 r630: [65..66]
 r631: [54..55]
 r632: [49..50]
 r633: [44..45]
 r634: [6..7]
 r635: [4..5]
 r637: [1037..1038]
 r638: [886..887]
 r639: [874..875]
 r640: [860..861]
 r641: [794..795]
 r642: [782..783]
 r643: [772..774]
 r644: [824..825]
 r645: [764..765]
 r646: [681..682]
 r647: [665..666]
 r648: [657..658]
 r649: [737..738]
 r650: [721..722]
 r651: [713..714]
 r652: [632..633]
 r653: [445..446]
 r654: [554..555]
 r655: [529..530]
 r656: [513..514]
 r657: [505..506]
 r658: [475..476]
 r659: [456..457]
 r660: [316..317]
 r661: [434..435]
 r662: [417..418]
 r663: [301..302]
 r664: [284..285]
 r665: [224..225]
 r666: [163..164]
 r667: [23..24]
Compressing live ranges: from 1060 to 926 - 87%
Ranges after the compression:
 r87: [8..9]
 r88: [922..923]
 r89: [916..917]
 r90: [914..915]
 r91: [912..913]
 r92: [908..909]
 r93: [904..905]
 r94: [902..903]
 r95: [900..901]
 r96: [898..899]
 r97: [892..893]
 r98: [890..891]
 r99: [884..885]
 r100: [882..883]
 r101: [876..877]
 r102: [874..875]
 r103: [864..873]
 r104: [870..871]
 r105: [868..869]
 r106: [864..865]
 r107: [860..861]
 r108: [858..859]
 r109: [848..857]
 r110: [854..855]
 r111: [852..853]
 r112: [848..849]
 r113: [844..845]
 r114: [842..843]
 r115: [832..841]
 r116: [838..839]
 r117: [836..837]
 r118: [832..833]
 r119: [828..829]
 r120: [826..827]
 r121: [816..825]
 r122: [822..823]
 r123: [820..821]
 r124: [816..817]
 r125: [812..813]
 r126: [810..811]
 r127: [808..809]
 r128: [802..807]
 r129: [804..805]
 r130: [802..803]
 r131: [800..801]
 r132: [796..797]
 r133: [794..795]
 r134: [792..793]
 r135: [784..791]
 r136: [788..789]
 r137: [786..787]
 r138: [784..785]
 r139: [782..783]
 r140: [772..773]
 r141: [768..769]
 r142: [766..767]
 r143: [754..765]
 r144: [762..763]
 r145: [758..759]
 r146: [756..757]
 r147: [754..755]
 r148: [740..753]
 r149: [750..751]
 r150: [746..747]
 r151: [744..745]
 r152: [742..743]
 r153: [740..741]
 r154: [702..703]
 r155: [700..701]
 r156: [698..699]
 r157: [696..697]
 r158: [692..693]
 r159: [688..689]
 r160: [686..687]
 r161: [674..685]
 r162: [682..683]
 r163: [678..679]
 r164: [676..677]
 r165: [672..675]
 r166: [734..735]
 r167: [728..729]
 r168: [726..727]
 r169: [724..725]
 r170: [722..723]
 r171: [718..719]
 r172: [714..715]
 r173: [712..713]
 r174: [666..667]
 r175: [662..663]
 r176: [660..661]
 r177: [658..659]
 r178: [656..657]
 r179: [654..655]
 r180: [604..605]
 r181: [602..603]
 r182: [600..601]
 r183: [564..599]
 r184: [596..597]
 r185: [592..593]
 r186: [590..591]
 r187: [588..589]
 r188: [586..587]
 r189: [564..585]
 r190: [582..583]
 r191: [578..579]
 r192: [576..577]
 r193: [572..575]
 r194: [566..567]
 r195: [564..565]
 r196: [562..563]
 r197: [650..651]
 r198: [648..649]
 r199: [646..647]
 r200: [610..645]
 r201: [642..643]
 r202: [638..639]
 r203: [636..637]
 r204: [634..635]
 r205: [632..633]
 r206: [610..631]
 r207: [628..629]
 r208: [624..625]
 r209: [622..623]
 r210: [618..621]
 r211: [612..613]
 r212: [610..611]
 r213: [608..609]
 r214: [546..559]
 r215: [556..557]
 r216: [552..553]
 r217: [550..551]
 r218: [548..549]
 r219: [546..547]
 r220: [478..491]
 r221: [488..489]
 r222: [484..485]
 r223: [482..483]
 r224: [480..481]
 r225: [478..479]
 r226: [542..543]
 r227: [540..541]
 r228: [538..539]
 r229: [532..537]
 r230: [534..535]
 r231: [532..533]
 r232: [520..531]
 r233: [528..529]
 r234: [526..527]
 r235: [524..525]
 r236: [522..523]
 r237: [520..521]
 r238: [516..517]
 r239: [514..515]
 r240: [512..513]
 r241: [506..511]
 r242: [508..509]
 r243: [506..507]
 r244: [494..505]
 r245: [502..503]
 r246: [500..501]
 r247: [498..499]
 r248: [496..497]
 r249: [494..495]
 r250: [388..389]
 r251: [474..475]
 r252: [472..473]
 r253: [470..471]
 r254: [426..469]
 r255: [466..467]
 r256: [462..463]
 r257: [460..461]
 r258: [458..459]
 r259: [456..457]
 r260: [426..455]
 r261: [452..453]
 r262: [448..449]
 r263: [446..447]
 r264: [442..445]
 r265: [436..437]
 r266: [426..435]
 r267: [432..433]
 r268: [430..431]
 r269: [428..429]
 r270: [426..427]
 r271: [410..425]
 r272: [422..423]
 r273: [418..419]
 r274: [416..417]
 r275: [414..415]
 r276: [412..413]
 r277: [410..411]
 r278: [408..409]
 r279: [398..399]
 r280: [274..287]
 r281: [284..285]
 r282: [280..281]
 r283: [278..279]
 r284: [276..277]
 r285: [274..275]
 r286: [384..385]
 r287: [380..381]
 r288: [378..379]
 r289: [376..377]
 r290: [374..375]
 r291: [372..373]
 r292: [324..339]
 r293: [336..337]
 r294: [334..335]
 r295: [332..333]
 r296: [326..331]
 r297: [328..329]
 r298: [326..327]
 r299: [324..325]
 r300: [368..369]
 r301: [364..365]
 r302: [362..363]
 r303: [360..361]
 r304: [358..359]
 r305: [356..357]
 r306: [316..323]
 r307: [320..321]
 r308: [318..319]
 r309: [316..317]
 r310: [312..313]
 r311: [310..311]
 r312: [308..309]
 r313: [302..307]
 r314: [304..305]
 r315: [302..303]
 r316: [290..301]
 r317: [298..299]
 r318: [296..297]
 r319: [294..295]
 r320: [292..293]
 r321: [290..291]
 r322: [340..355]
 r323: [352..353]
 r324: [350..351]
 r325: [348..349]
 r326: [342..347]
 r327: [344..345]
 r328: [342..343]
 r329: [340..341]
 r330: [270..271]
 r331: [266..267]
 r332: [264..265]
 r333: [262..263]
 r334: [260..261]
 r335: [258..259]
 r336: [254..255]
 r337: [250..251]
 r338: [248..249]
 r339: [246..247]
 r340: [244..245]
 r341: [242..243]
 r342: [240..241]
 r343: [236..237]
 r344: [234..235]
 r345: [232..233]
 r346: [226..231]
 r347: [228..229]
 r348: [226..227]
 r349: [204..225]
 r350: [222..223]
 r351: [220..221]
 r352: [218..219]
 r353: [212..217]
 r354: [214..215]
 r355: [212..213]
 r356: [210..211]
 r357: [208..209]
 r358: [204..205]
 r359: [200..201]
 r360: [196..197]
 r361: [194..195]
 r362: [192..193]
 r363: [190..191]
 r364: [188..189]
 r365: [136..149]
 r366: [146..147]
 r367: [142..143]
 r368: [140..141]
 r369: [138..139]
 r370: [136..137]
 r371: [184..185]
 r372: [182..183]
 r373: [180..181]
 r374: [174..179]
 r375: [176..177]
 r376: [174..175]
 r377: [172..173]
 r378: [170..171]
 r379: [164..165]
 r380: [162..163]
 r381: [160..161]
 r382: [154..159]
 r383: [156..157]
 r384: [154..155]
 r385: [152..153]
 r386: [14..27]
 r387: [24..25]
 r388: [20..21]
 r389: [18..19]
 r390: [16..17]
 r391: [14..15]
 r392: [132..133]
 r393: [130..131]
 r394: [128..129]
 r395: [122..127]
 r396: [124..125]
 r397: [122..123]
 r398: [86..121]
 r399: [118..119]
 r400: [116..117]
 r401: [114..115]
 r402: [108..113]
 r403: [110..111]
 r404: [108..109]
 r405: [106..107]
 r406: [88..105]
 r407: [102..103]
 r408: [100..101]
 r409: [98..99]
 r410: [92..97]
 r411: [94..95]
 r412: [92..93]
 r413: [90..91]
 r414: [88..89]
 r415: [86..87]
 r416: [82..83]
 r417: [80..81]
 r418: [78..79]
 r419: [70..77]
 r420: [74..75]
 r421: [72..73]
 r422: [70..71]
 r423: [30..69]
 r424: [66..67]
 r425: [64..65]
 r426: [62..63]
 r427: [54..61]
 r428: [58..59]
 r429: [56..57]
 r430: [54..55]
 r431: [52..53]
 r432: [32..51]
 r433: [48..49]
 r434: [46..47]
 r435: [44..45]
 r436: [36..43]
 r437: [40..41]
 r438: [38..39]
 r439: [36..37]
 r440: [34..35]
 r441: [32..33]
 r442: [30..31]
 r443: [2..3]
 r444: [0..1]
 r445: [10..11]
 r446: [924..925]
 r447: [922..923] [918..919]
 r448: [920..921]
 r449: [916..917]
 r450: [910..911]
 r451: [904..905]
 r452: [896..897]
 r453: [894..895]
 r454: [888..889]
 r455: [886..887]
 r456: [880..881]
 r457: [878..879]
 r458: [874..875]
 r459: [872..873]
 r460: [866..867]
 r461: [862..863]
 r462: [858..859]
 r463: [856..857]
 r464: [850..851]
 r465: [846..847]
 r466: [842..843]
 r467: [840..841]
 r468: [834..835]
 r469: [830..831]
 r470: [826..827]
 r471: [824..825]
 r472: [818..819]
 r473: [780..781]
 r474: [814..815]
 r475: [810..811]
 r476: [806..807]
 r477: [800..801]
 r478: [798..799]
 r479: [794..795]
 r480: [790..791]
 r481: [782..783]
 r482: [778..779]
 r483: [776..777]
 r484: [774..775]
 r485: [768..769]
 r486: [764..765]
 r487: [758..759]
 r488: [752..753]
 r489: [746..747]
 r490: [738..739]
 r491: [708..709]
 r492: [706..707]
 r493: [704..705]
 r494: [700..701]
 r495: [696..697]
 r496: [694..695]
 r497: [688..689]
 r498: [684..685]
 r499: [678..679]
 r500: [670..671]
 r501: [736..737]
 r502: [732..733]
 r503: [730..731]
 r504: [726..727]
 r505: [722..723]
 r506: [720..721]
 r507: [714..715]
 r508: [710..711]
 r509: [12..13]
 r510: [668..669]
 r511: [662..663]
 r512: [606..607]
 r513: [602..603]
 r514: [598..599]
 r515: [592..593]
 r516: [584..585]
 r517: [578..579]
 r518: [572..573]
 r519: [570..571]
 r520: [568..569]
 r521: [564..565]
 r522: [652..653]
 r523: [648..649]
 r524: [644..645]
 r525: [638..639]
 r526: [630..631]
 r527: [624..625]
 r528: [618..619]
 r529: [616..617]
 r530: [614..615]
 r531: [610..611]
 r532: [560..561]
 r533: [558..559]
 r534: [552..553]
 r535: [394..395]
 r536: [396..397]
 r537: [390..391]
 r538: [390..391]
 r539: [492..493]
 r540: [490..491]
 r541: [484..485]
 r542: [544..545]
 r543: [540..541]
 r544: [536..537]
 r545: [530..531]
 r546: [526..527]
 r547: [518..519]
 r548: [514..515]
 r549: [510..511]
 r550: [504..505]
 r551: [500..501]
 r552: [476..477]
 r553: [472..473]
 r554: [468..469]
 r555: [462..463]
 r556: [454..455]
 r557: [448..449]
 r558: [442..443]
 r559: [440..441]
 r560: [438..439]
 r561: [434..435]
 r562: [430..431]
 r563: [424..425]
 r564: [418..419]
 r565: [404..405]
 r566: [406..407]
 r567: [400..401]
 r568: [400..401]
 r569: [288..289]
 r570: [286..287]
 r571: [280..281]
 r572: [386..387]
 r573: [380..381]
 r574: [338..339]
 r575: [334..335]
 r576: [330..331]
 r577: [370..371]
 r578: [364..365]
 r579: [322..323]
 r580: [318..319]
 r581: [314..315]
 r582: [310..311]
 r583: [306..307]
 r584: [300..301]
 r585: [296..297]
 r586: [354..355]
 r587: [350..351]
 r588: [346..347]
 r589: [272..273]
 r590: [266..267]
 r591: [256..257]
 r592: [250..251]
 r593: [238..239]
 r594: [234..235]
 r595: [230..231]
 r596: [224..225]
 r597: [220..221]
 r598: [216..217]
 r599: [206..207]
 r600: [202..203]
 r601: [196..197]
 r602: [150..151]
 r603: [148..149]
 r604: [142..143]
 r605: [186..187]
 r606: [182..183]
 r607: [178..179]
 r608: [168..169]
 r609: [166..167]
 r610: [162..163]
 r611: [158..159]
 r612: [152..153]
 r613: [28..29]
 r614: [26..27]
 r615: [20..21]
 r616: [134..135]
 r617: [130..131]
 r618: [126..127]
 r619: [120..121]
 r620: [116..117]
 r621: [112..113]
 r622: [104..105]
 r623: [100..101]
 r624: [96..97]
 r625: [84..85]
 r626: [80..81]
 r627: [76..77]
 r628: [68..69]
 r629: [64..65]
 r630: [60..61]
 r631: [50..51]
 r632: [46..47]
 r633: [42..43]
 r634: [6..7]
 r635: [4..5]
 r637: [906..907]
 r638: [770..771]
 r639: [760..761]
 r640: [748..749]
 r641: [690..691]
 r642: [680..681]
 r643: [672..673]
 r644: [716..717]
 r645: [664..665]
 r646: [594..595]
 r647: [580..581]
 r648: [574..575]
 r649: [640..641]
 r650: [626..627]
 r651: [620..621]
 r652: [554..555]
 r653: [392..393]
 r654: [486..487]
 r655: [464..465]
 r656: [450..451]
 r657: [444..445]
 r658: [420..421]
 r659: [402..403]
 r660: [282..283]
 r661: [382..383]
 r662: [366..367]
 r663: [268..269]
 r664: [252..253]
 r665: [198..199]
 r666: [144..145]
 r667: [22..23]

********** Assignment #1: **********

	 Assigning to 637 (cl=GENERAL_REGS, orig=93, freq=3, tfirst=637, tfreq=3)...
	   Assign 0 to reload r637 (freq=3)
	 Assigning to 638 (cl=GENERAL_REGS, orig=141, freq=3, tfirst=638, tfreq=3)...
	   Assign 0 to reload r638 (freq=3)
	 Assigning to 639 (cl=GENERAL_REGS, orig=145, freq=3, tfirst=639, tfreq=3)...
	   Assign 0 to reload r639 (freq=3)
	 Assigning to 640 (cl=GENERAL_REGS, orig=150, freq=3, tfirst=640, tfreq=3)...
	   Assign 0 to reload r640 (freq=3)
	 Assigning to 641 (cl=GENERAL_REGS, orig=159, freq=3, tfirst=641, tfreq=3)...
	   Assign 0 to reload r641 (freq=3)
	 Assigning to 642 (cl=GENERAL_REGS, orig=163, freq=3, tfirst=642, tfreq=3)...
	   Assign 0 to reload r642 (freq=3)
	 Assigning to 643 (cl=GENERAL_REGS, orig=500, freq=3, tfirst=643, tfreq=3)...
	   Assign 1 to reload r643 (freq=3)
	 Assigning to 644 (cl=GENERAL_REGS, orig=172, freq=3, tfirst=644, tfreq=3)...
	   Assign 0 to reload r644 (freq=3)
	 Assigning to 645 (cl=GENERAL_REGS, orig=175, freq=3, tfirst=645, tfreq=3)...
	   Assign 0 to reload r645 (freq=3)
	 Assigning to 646 (cl=GENERAL_REGS, orig=185, freq=3, tfirst=646, tfreq=3)...
	   Assign 0 to reload r646 (freq=3)
	 Assigning to 647 (cl=GENERAL_REGS, orig=191, freq=3, tfirst=647, tfreq=3)...
	   Assign 0 to reload r647 (freq=3)
	 Assigning to 648 (cl=GENERAL_REGS, orig=518, freq=3, tfirst=648, tfreq=3)...
	   Assign 2 to reload r648 (freq=3)
	 Assigning to 649 (cl=GENERAL_REGS, orig=202, freq=3, tfirst=649, tfreq=3)...
	   Assign 0 to reload r649 (freq=3)
	 Assigning to 650 (cl=GENERAL_REGS, orig=208, freq=3, tfirst=650, tfreq=3)...
	   Assign 0 to reload r650 (freq=3)
	 Assigning to 651 (cl=GENERAL_REGS, orig=528, freq=3, tfirst=651, tfreq=3)...
	   Assign 2 to reload r651 (freq=3)
	 Assigning to 652 (cl=GENERAL_REGS, orig=216, freq=3, tfirst=652, tfreq=3)...
	   Assign 2 to reload r652 (freq=3)
	 Assigning to 653 (cl=GENERAL_REGS, orig=537, freq=3, tfirst=653, tfreq=3)...
	   Assign 0 to reload r653 (freq=3)
	 Assigning to 654 (cl=GENERAL_REGS, orig=222, freq=3, tfirst=654, tfreq=3)...
	   Assign 2 to reload r654 (freq=3)
	 Assigning to 655 (cl=GENERAL_REGS, orig=256, freq=3, tfirst=655, tfreq=3)...
	   Assign 0 to reload r655 (freq=3)
	 Assigning to 656 (cl=GENERAL_REGS, orig=262, freq=3, tfirst=656, tfreq=3)...
	   Assign 0 to reload r656 (freq=3)
	 Assigning to 657 (cl=GENERAL_REGS, orig=558, freq=3, tfirst=657, tfreq=3)...
	   Assign 2 to reload r657 (freq=3)
	 Assigning to 658 (cl=GENERAL_REGS, orig=273, freq=3, tfirst=658, tfreq=3)...
	   Assign 0 to reload r658 (freq=3)
	 Assigning to 659 (cl=GENERAL_REGS, orig=567, freq=3, tfirst=659, tfreq=3)...
	   Assign 0 to reload r659 (freq=3)
	 Assigning to 660 (cl=GENERAL_REGS, orig=282, freq=3, tfirst=660, tfreq=3)...
	   Assign 2 to reload r660 (freq=3)
	 Assigning to 661 (cl=GENERAL_REGS, orig=287, freq=3, tfirst=661, tfreq=3)...
	   Assign 0 to reload r661 (freq=3)
	 Assigning to 662 (cl=GENERAL_REGS, orig=301, freq=3, tfirst=662, tfreq=3)...
	   Assign 0 to reload r662 (freq=3)
	 Assigning to 663 (cl=GENERAL_REGS, orig=331, freq=3, tfirst=663, tfreq=3)...
	   Assign 0 to reload r663 (freq=3)
	 Assigning to 664 (cl=GENERAL_REGS, orig=337, freq=3, tfirst=664, tfreq=3)...
	   Assign 0 to reload r664 (freq=3)
	 Assigning to 665 (cl=GENERAL_REGS, orig=360, freq=3, tfirst=665, tfreq=3)...
	   Assign 0 to reload r665 (freq=3)
	 Assigning to 666 (cl=GENERAL_REGS, orig=367, freq=3, tfirst=666, tfreq=3)...
	   Assign 2 to reload r666 (freq=3)
	 Assigning to 667 (cl=GENERAL_REGS, orig=388, freq=3, tfirst=667, tfreq=3)...
	   Assign 2 to reload r667 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 30
changing reg in insn 28
changing reg in insn 26
changing reg in insn 30
changing reg in insn 28
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 67
changing reg in insn 75
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 80
changing reg in insn 88
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 93
changing reg in insn 101
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 106
changing reg in insn 106
changing reg in insn 106
changing reg in insn 114
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 113
changing reg in insn 114
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 130
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 143
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 145
changing reg in insn 156
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 167
changing reg in insn 162
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 192
changing reg in insn 195
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 201
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 213
changing reg in insn 214
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 225
changing reg in insn 228
changing reg in insn 231
changing reg in insn 231
changing reg in insn 232
changing reg in insn 243
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 250
changing reg in insn 257
changing reg in insn 258
changing reg in insn 258
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 282
changing reg in insn 263
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 283
changing reg in insn 271
changing reg in insn 274
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 284
changing reg in insn 287
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 300
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 322
changing reg in insn 303
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 323
changing reg in insn 311
changing reg in insn 314
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 324
changing reg in insn 327
changing reg in insn 332
changing reg in insn 340
changing reg in insn 334
changing reg in insn 337
changing reg in insn 337
changing reg in insn 338
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 340
changing reg in insn 358
changing reg in insn 366
changing reg in insn 360
changing reg in insn 363
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 366
changing reg in insn 373
changing reg in insn 374
changing reg in insn 374
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 381
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 381
changing reg in insn 381
changing reg in insn 389
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 386
changing reg in insn 386
changing reg in insn 387
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 396
changing reg in insn 397
changing reg in insn 397
changing reg in insn 399
changing reg in insn 399
changing reg in insn 400
changing reg in insn 400
changing reg in insn 404
changing reg in insn 402
changing reg in insn 403
changing reg in insn 403
changing reg in insn 404
changing reg in insn 404
changing reg in insn 412
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 412
changing reg in insn 347
changing reg in insn 348
changing reg in insn 422
changing reg in insn 423
changing reg in insn 423
changing reg in insn 425
changing reg in insn 425
changing reg in insn 426
changing reg in insn 426
changing reg in insn 452
changing reg in insn 428
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 453
changing reg in insn 436
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 444
changing reg in insn 445
changing reg in insn 445
changing reg in insn 454
changing reg in insn 447
changing reg in insn 448
changing reg in insn 448
changing reg in insn 450
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 455
changing reg in insn 457
changing reg in insn 466
changing reg in insn 459
changing reg in insn 462
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 465
changing reg in insn 465
changing reg in insn 466
changing reg in insn 467
changing reg in insn 468
changing reg in insn 475
changing reg in insn 476
changing reg in insn 487
changing reg in insn 495
changing reg in insn 489
changing reg in insn 492
changing reg in insn 492
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 495
changing reg in insn 499
changing reg in insn 502
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 506
changing reg in insn 509
changing reg in insn 520
changing reg in insn 511
changing reg in insn 512
changing reg in insn 512
changing reg in insn 514
changing reg in insn 514
changing reg in insn 515
changing reg in insn 515
changing reg in insn 519
changing reg in insn 517
changing reg in insn 518
changing reg in insn 518
changing reg in insn 519
changing reg in insn 519
changing reg in insn 521
changing reg in insn 528
changing reg in insn 531
changing reg in insn 531
changing reg in insn 532
changing reg in insn 532
changing reg in insn 533
changing reg in insn 533
changing reg in insn 534
changing reg in insn 534
changing reg in insn 535
changing reg in insn 538
changing reg in insn 544
changing reg in insn 540
changing reg in insn 541
changing reg in insn 541
changing reg in insn 543
changing reg in insn 543
changing reg in insn 545
changing reg in insn 548
changing reg in insn 549
changing reg in insn 549
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 552
changing reg in insn 556
changing reg in insn 554
changing reg in insn 555
changing reg in insn 555
changing reg in insn 556
changing reg in insn 556
changing reg in insn 564
changing reg in insn 558
changing reg in insn 559
changing reg in insn 559
changing reg in insn 561
changing reg in insn 561
changing reg in insn 562
changing reg in insn 562
changing reg in insn 563
changing reg in insn 563
changing reg in insn 564
changing reg in insn 569
changing reg in insn 580
changing reg in insn 571
changing reg in insn 572
changing reg in insn 572
changing reg in insn 574
changing reg in insn 574
changing reg in insn 575
changing reg in insn 575
changing reg in insn 579
changing reg in insn 577
changing reg in insn 578
changing reg in insn 578
changing reg in insn 579
changing reg in insn 579
changing reg in insn 581
changing reg in insn 592
changing reg in insn 595
changing reg in insn 595
changing reg in insn 596
changing reg in insn 596
changing reg in insn 597
changing reg in insn 597
changing reg in insn 598
changing reg in insn 598
changing reg in insn 599
changing reg in insn 603
changing reg in insn 606
changing reg in insn 606
changing reg in insn 607
changing reg in insn 607
changing reg in insn 608
changing reg in insn 609
changing reg in insn 609
changing reg in insn 610
changing reg in insn 610
changing reg in insn 611
changing reg in insn 617
changing reg in insn 618
changing reg in insn 618
changing reg in insn 620
changing reg in insn 620
changing reg in insn 621
changing reg in insn 621
changing reg in insn 625
changing reg in insn 623
changing reg in insn 624
changing reg in insn 624
changing reg in insn 625
changing reg in insn 625
changing reg in insn 639
changing reg in insn 627
changing reg in insn 628
changing reg in insn 628
changing reg in insn 630
changing reg in insn 630
changing reg in insn 631
changing reg in insn 631
changing reg in insn 635
changing reg in insn 633
changing reg in insn 634
changing reg in insn 634
changing reg in insn 635
changing reg in insn 635
changing reg in insn 636
changing reg in insn 636
changing reg in insn 637
changing reg in insn 638
changing reg in insn 639
changing reg in insn 647
changing reg in insn 650
changing reg in insn 650
changing reg in insn 651
changing reg in insn 651
changing reg in insn 652
changing reg in insn 652
changing reg in insn 653
changing reg in insn 653
changing reg in insn 654
changing reg in insn 660
changing reg in insn 668
changing reg in insn 662
changing reg in insn 665
changing reg in insn 665
changing reg in insn 666
changing reg in insn 666
changing reg in insn 667
changing reg in insn 667
changing reg in insn 668
changing reg in insn 672
changing reg in insn 673
changing reg in insn 673
changing reg in insn 675
changing reg in insn 675
changing reg in insn 676
changing reg in insn 676
changing reg in insn 680
changing reg in insn 678
changing reg in insn 679
changing reg in insn 679
changing reg in insn 680
changing reg in insn 680
changing reg in insn 681
changing reg in insn 681
changing reg in insn 682
changing reg in insn 685
changing reg in insn 686
changing reg in insn 686
changing reg in insn 688
changing reg in insn 688
changing reg in insn 689
changing reg in insn 689
changing reg in insn 693
changing reg in insn 691
changing reg in insn 692
changing reg in insn 692
changing reg in insn 693
changing reg in insn 693
changing reg in insn 695
changing reg in insn 705
changing reg in insn 713
changing reg in insn 707
changing reg in insn 710
changing reg in insn 710
changing reg in insn 711
changing reg in insn 711
changing reg in insn 712
changing reg in insn 712
changing reg in insn 713
changing reg in insn 717
changing reg in insn 718
changing reg in insn 718
changing reg in insn 720
changing reg in insn 720
changing reg in insn 721
changing reg in insn 721
changing reg in insn 725
changing reg in insn 723
changing reg in insn 724
changing reg in insn 724
changing reg in insn 725
changing reg in insn 725
changing reg in insn 749
changing reg in insn 727
changing reg in insn 728
changing reg in insn 728
changing reg in insn 730
changing reg in insn 730
changing reg in insn 731
changing reg in insn 731
changing reg in insn 735
changing reg in insn 733
changing reg in insn 734
changing reg in insn 734
changing reg in insn 735
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 738
changing reg in insn 739
changing reg in insn 739
changing reg in insn 741
changing reg in insn 741
changing reg in insn 742
changing reg in insn 742
changing reg in insn 746
changing reg in insn 744
changing reg in insn 745
changing reg in insn 745
changing reg in insn 746
changing reg in insn 746
changing reg in insn 747
changing reg in insn 747
changing reg in insn 748
changing reg in insn 749
changing reg in insn 751
changing reg in insn 752
changing reg in insn 752
changing reg in insn 754
changing reg in insn 754
changing reg in insn 755
changing reg in insn 755
changing reg in insn 760
changing reg in insn 757
changing reg in insn 758
changing reg in insn 758
changing reg in insn 759
changing reg in insn 759
changing reg in insn 760
changing reg in insn 760
changing reg in insn 786
changing reg in insn 762
changing reg in insn 763
changing reg in insn 763
changing reg in insn 765
changing reg in insn 765
changing reg in insn 766
changing reg in insn 766
changing reg in insn 771
changing reg in insn 768
changing reg in insn 769
changing reg in insn 769
changing reg in insn 770
changing reg in insn 770
changing reg in insn 771
changing reg in insn 771
changing reg in insn 772
changing reg in insn 772
changing reg in insn 774
changing reg in insn 775
changing reg in insn 775
changing reg in insn 777
changing reg in insn 777
changing reg in insn 778
changing reg in insn 778
changing reg in insn 783
changing reg in insn 780
changing reg in insn 781
changing reg in insn 781
changing reg in insn 782
changing reg in insn 782
changing reg in insn 783
changing reg in insn 783
changing reg in insn 784
changing reg in insn 784
changing reg in insn 785
changing reg in insn 786
changing reg in insn 811
changing reg in insn 814
changing reg in insn 814
changing reg in insn 818
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 32
changing reg in insn 30
changing reg in insn 29
changing reg in insn 28
changing reg in insn 27
changing reg in insn 26
changing reg in insn 33
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 28
changing reg in insn 27
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 112
changing reg in insn 113
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 139
changing reg in insn 140
changing reg in insn 144
changing reg in insn 145
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 175
changing reg in insn 176
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 189
changing reg in insn 191
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 207
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 219
changing reg in insn 222
changing reg in insn 224
changing reg in insn 227
changing reg in insn 228
changing reg in insn 230
changing reg in insn 232
changing reg in insn 233
changing reg in insn 238
changing reg in insn 239
changing reg in insn 242
changing reg in insn 243
changing reg in insn 245
changing reg in insn 256
changing reg in insn 257
changing reg in insn 259
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 270
changing reg in insn 271
changing reg in insn 273
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 279
changing reg in insn 281
changing reg in insn 285
changing reg in insn 296
changing reg in insn 297
changing reg in insn 299
changing reg in insn 302
changing reg in insn 303
changing reg in insn 305
changing reg in insn 310
changing reg in insn 311
changing reg in insn 313
changing reg in insn 317
changing reg in insn 318
changing reg in insn 318
changing reg in insn 319
changing reg in insn 321
changing reg in insn 325
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 334
changing reg in insn 336
changing reg in insn 344
changing reg in insn 343
changing reg in insn 344
changing reg in insn 347
changing reg in insn 346
changing reg in insn 357
changing reg in insn 358
changing reg in insn 359
changing reg in insn 360
changing reg in insn 362
changing reg in insn 372
changing reg in insn 373
changing reg in insn 375
changing reg in insn 378
changing reg in insn 379
changing reg in insn 382
changing reg in insn 383
changing reg in insn 385
changing reg in insn 395
changing reg in insn 396
changing reg in insn 398
changing reg in insn 401
changing reg in insn 402
changing reg in insn 405
changing reg in insn 406
changing reg in insn 408
changing reg in insn 421
changing reg in insn 422
changing reg in insn 424
changing reg in insn 427
changing reg in insn 428
changing reg in insn 430
changing reg in insn 435
changing reg in insn 436
changing reg in insn 438
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 446
changing reg in insn 447
changing reg in insn 449
changing reg in insn 458
changing reg in insn 459
changing reg in insn 461
changing reg in insn 472
changing reg in insn 471
changing reg in insn 472
changing reg in insn 475
changing reg in insn 474
changing reg in insn 486
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 491
changing reg in insn 498
changing reg in insn 499
changing reg in insn 501
changing reg in insn 510
changing reg in insn 511
changing reg in insn 513
changing reg in insn 516
changing reg in insn 517
changing reg in insn 527
changing reg in insn 528
changing reg in insn 530
changing reg in insn 539
changing reg in insn 540
changing reg in insn 542
changing reg in insn 547
changing reg in insn 548
changing reg in insn 550
changing reg in insn 553
changing reg in insn 554
changing reg in insn 557
changing reg in insn 558
changing reg in insn 560
changing reg in insn 570
changing reg in insn 571
changing reg in insn 573
changing reg in insn 576
changing reg in insn 577
changing reg in insn 591
changing reg in insn 592
changing reg in insn 594
changing reg in insn 602
changing reg in insn 603
changing reg in insn 605
changing reg in insn 616
changing reg in insn 617
changing reg in insn 619
changing reg in insn 622
changing reg in insn 623
changing reg in insn 626
changing reg in insn 627
changing reg in insn 629
changing reg in insn 632
changing reg in insn 633
changing reg in insn 637
changing reg in insn 638
changing reg in insn 646
changing reg in insn 647
changing reg in insn 649
changing reg in insn 659
changing reg in insn 660
changing reg in insn 661
changing reg in insn 662
changing reg in insn 664
changing reg in insn 671
changing reg in insn 672
changing reg in insn 674
changing reg in insn 677
changing reg in insn 678
changing reg in insn 682
changing reg in insn 683
changing reg in insn 684
changing reg in insn 685
changing reg in insn 687
changing reg in insn 690
changing reg in insn 691
changing reg in insn 694
changing reg in insn 695
changing reg in insn 704
changing reg in insn 705
changing reg in insn 706
changing reg in insn 707
changing reg in insn 709
changing reg in insn 716
changing reg in insn 717
changing reg in insn 719
changing reg in insn 722
changing reg in insn 723
changing reg in insn 726
changing reg in insn 727
changing reg in insn 729
changing reg in insn 732
changing reg in insn 733
changing reg in insn 737
changing reg in insn 738
changing reg in insn 740
changing reg in insn 743
changing reg in insn 744
changing reg in insn 750
changing reg in insn 751
changing reg in insn 753
changing reg in insn 756
changing reg in insn 757
changing reg in insn 761
changing reg in insn 762
changing reg in insn 764
changing reg in insn 767
changing reg in insn 768
changing reg in insn 773
changing reg in insn 774
changing reg in insn 776
changing reg in insn 779
changing reg in insn 780
changing reg in insn 805
changing reg in insn 806
changing reg in insn 808
changing reg in insn 809
deleting insn with uid = 860.
deleting insn with uid = 871.
deleting insn with uid = 284.
deleting insn with uid = 877.
deleting insn with uid = 324.
deleting insn with uid = 879.
deleting insn with uid = 883.
deleting insn with uid = 889.
deleting insn with uid = 454.
deleting insn with uid = 895.
deleting insn with uid = 907.
deleting insn with uid = 909.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 226.
verify found no changes in insn with uid = 286.
verify found no changes in insn with uid = 326.
verify found no changes in insn with uid = 350.
verify found no changes in insn with uid = 456.
verify found no changes in insn with uid = 478.
verify found no changes in insn with uid = 522.
verify found no changes in insn with uid = 546.
verify found no changes in insn with uid = 582.
verify found no changes in insn with uid = 807.
verify found no changes in insn with uid = 810.


int read_data(int*, Preprocess*, IOFiles*, Data_file_header*, Data_block_header*, Precision2*, FILE**, Precision1*, float**, float**, int, InFile_struct*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={387d,381u} r1={180d,164u,38e} r2={79d,61u,23e} r3={4d,4u} r4={29d,11u} r5={40d,22u} r6={1d,270u} r7={1d,69u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r16={25e} r17={245d,23u} r18={18d} r19={18d} r20={1d,1u,35e} r21={34d,15u} r22={21d,2u} r23={19d} r24={19d} r25={19d} r26={19d} r27={19d} r28={19d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={19d,1u} r38={19d,1u} r39={18d} r40={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} 
;;    total ref usage 3328{2182d,1025u,121e} in 771{753 regular + 18 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:29 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:30 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 numSets+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:31 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:32 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:33 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:34 89 {*movdi_internal}
     (nil))
(insn 17 16 800 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:50 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              50 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 445
(code_label 800 17 18 3 28 "" [1 uses])
(note 18 800 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg/f:DI 0 ax [445])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 fid+0 S8 A64])) sim2fitman_fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 0 ax [orig:87 D.6130 ] [87])
        (mem:SI (reg/f:DI 0 ax [445]) [0 *fid_47(D)+0 S4 A32])) sim2fitman_fmtext_o.cpp:50 90 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.6130 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32]))) sim2fitman_fmtext_o.cpp:50 7 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 803)
            (pc))) sim2fitman_fmtext_o.cpp:50 612 {*jcc_1}
     (nil)
 -> 803)
;;  succ:       51
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 91 446 447 448 449
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 0 ax [446])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:54 90 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 1 dx [orig:88 D.6131 ] [88])
        (sign_extend:DI (reg:SI 0 ax [446]))) sim2fitman_fmtext_o.cpp:54 142 {*extendsidi2_rex64}
     (nil))
(insn 26 25 27 4 (set (reg:DI 0 ax [447])
        (reg:DI 1 dx [orig:88 D.6131 ] [88])) sim2fitman_fmtext_o.cpp:54 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:DI 0 ax [447])
                (ashift:DI (reg:DI 0 ax [447])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 512 {*ashldi3_1}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg:DI 0 ax [447])
                (plus:DI (reg:DI 0 ax [447])
                    (reg:DI 1 dx [orig:88 D.6131 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.6131 ] [88])
            (const_int 9 [0x9]))
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 0 ax [447])
                (ashift:DI (reg:DI 0 ax [447])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 512 {*ashldi3_1}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 0 ax [447])
                (plus:DI (reg:DI 0 ax [447])
                    (reg:DI 1 dx [orig:88 D.6131 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.6131 ] [88])
            (const_int 19 [0x13]))
        (nil)))
(insn 31 30 32 4 (parallel [
            (set (reg:DI 0 ax [448])
                (ashift:DI (reg:DI 0 ax [447])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 512 {*ashldi3_1}
     (nil))
(insn 32 31 33 4 (set (reg:DI 0 ax [447])
        (reg:DI 0 ax [448])) sim2fitman_fmtext_o.cpp:54 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 1 dx [orig:89 D.6131 ] [89])
        (reg:DI 0 ax [447])) sim2fitman_fmtext_o.cpp:54 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg/f:DI 0 ax [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])) sim2fitman_fmtext_o.cpp:54 89 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.6132 ] [90])
                (plus:DI (reg/f:DI 0 ax [449])
                    (reg:DI 1 dx [orig:89 D.6131 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6131 ] [89]))
        (nil)))
(insn 36 35 37 4 (set (reg:SI 0 ax [orig:91 D.6130 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:90 D.6132 ] [90])
                (const_int 20 [0x14])) [0 _52->file_type+0 S4 A32])) sim2fitman_fmtext_o.cpp:54 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 D.6130 ] [91])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:54 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 38 37 39 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 797)
            (pc))) sim2fitman_fmtext_o.cpp:54 612 {*jcc_1}
     (nil)
 -> 797)
;;  succ:       5 (FALLTHRU)
;;              50
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (set (reg:SI 0 ax [450])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:58 90 {*movsi_internal}
     (nil))
(insn 41 40 848 5 (set (reg:DI 0 ax [orig:92 D.6131 ] [92])
        (sign_extend:DI (reg:SI 0 ax [450]))) sim2fitman_fmtext_o.cpp:58 142 {*extendsidi2_rex64}
     (nil))
(insn 848 41 42 5 (set (reg:DI 0 ax [orig:93 D.6131 ] [93])
        (reg:DI 0 ax [orig:92 D.6131 ] [92])) sim2fitman_fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 42 848 849 5 (parallel [
            (set (reg:DI 0 ax [orig:93 D.6131 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6131 ] [93])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:58 512 {*ashldi3_1}
     (nil))
(insn 849 42 43 5 (set (reg:DI 1 dx [orig:93 D.6131 ] [93])
        (reg:DI 0 ax [orig:93 D.6131 ] [93])) sim2fitman_fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 43 849 44 5 (set (reg/f:DI 0 ax [451])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.6133 ] [94])
                (plus:DI (reg/f:DI 0 ax [451])
                    (reg:DI 1 dx [orig:93 D.6131 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:58 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.6131 ] [93]))
        (nil)))
(insn 45 44 46 5 (set (reg:DI 0 ax [orig:95 D.6134 ] [95])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:94 D.6133 ] [94])
                (const_int 16 [0x10])) [0 _57->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:SI 0 ax [orig:96 D.6130 ] [96])
        (reg:SI 0 ax [orig:95 D.6134 ] [95])) sim2fitman_fmtext_o.cpp:58 90 {*movsi_internal}
     (nil))
(insn 47 46 48 5 (parallel [
            (set (reg:SI 0 ax [452])
                (ashift:SI (reg:SI 0 ax [orig:96 D.6130 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:58 511 {*ashlsi3_1}
     (nil))
(insn 48 47 49 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [452])) sim2fitman_fmtext_o.cpp:58 90 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:60 90 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:DI 0 ax [orig:97 D.6131 ] [97])
        (sign_extend:DI (reg:SI 0 ax [453]))) sim2fitman_fmtext_o.cpp:60 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 5 (parallel [
            (set (reg:DI 0 ax [orig:98 D.6131 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.6131 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:60 512 {*ashldi3_1}
     (nil))
(insn 52 51 53 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:98 D.6131 ] [98])) sim2fitman_fmtext_o.cpp:60 89 {*movdi_internal}
     (nil))
(call_insn 53 52 54 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd2903cda20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:60 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 54 53 55 5 (set (reg/f:DI 0 ax [454])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:60 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [454])
        (nil)))
(insn 55 54 56 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])
        (reg/f:DI 0 ax [454])) sim2fitman_fmtext_o.cpp:60 89 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:SI 0 ax [455])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:63 90 {*movsi_internal}
     (nil))
(insn 57 56 58 5 (set (reg:DI 0 ax [orig:99 D.6131 ] [99])
        (sign_extend:DI (reg:SI 0 ax [455]))) sim2fitman_fmtext_o.cpp:63 142 {*extendsidi2_rex64}
     (nil))
(insn 58 57 59 5 (parallel [
            (set (reg:DI 0 ax [orig:100 D.6131 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 D.6131 ] [99])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:63 512 {*ashldi3_1}
     (nil))
(insn 59 58 60 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:100 D.6131 ] [100])) sim2fitman_fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(call_insn 60 59 61 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd2903cda20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:63 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 60 62 5 (set (reg/f:DI 0 ax [456])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:63 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [456])
        (nil)))
(insn 62 61 63 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 temp_double2+0 S8 A64])
        (reg/f:DI 0 ax [456])) sim2fitman_fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(insn 63 62 64 5 (set (reg:SI 0 ax [457])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:65 90 {*movsi_internal}
     (nil))
(insn 64 63 65 5 (set (reg:DI 0 ax [orig:101 D.6131 ] [101])
        (sign_extend:DI (reg:SI 0 ax [457]))) sim2fitman_fmtext_o.cpp:65 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 5 (parallel [
            (set (reg:DI 1 dx [orig:102 D.6131 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.6131 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:65 512 {*ashldi3_1}
     (nil))
(insn 66 65 67 5 (set (reg/f:DI 0 ax [458])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 out_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 67 66 68 5 (parallel [
            (set (reg/f:DI 3 bx [orig:103 D.6135 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 D.6131 ] [102])
                    (reg/f:DI 0 ax [458])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:65 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.6131 ] [102]))
        (nil)))
(insn 68 67 69 5 (set (reg:SI 0 ax [459])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:65 90 {*movsi_internal}
     (nil))
(insn 69 68 70 5 (set (reg:DI 0 ax [orig:104 D.6131 ] [104])
        (sign_extend:DI (reg:SI 0 ax [459]))) sim2fitman_fmtext_o.cpp:65 142 {*extendsidi2_rex64}
     (nil))
(insn 70 69 71 5 (parallel [
            (set (reg:DI 0 ax [orig:105 D.6131 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 D.6131 ] [104])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:65 512 {*ashldi3_1}
     (nil))
(insn 71 70 72 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:105 D.6131 ] [105])) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(call_insn 72 71 73 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd2903cda20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:65 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 73 72 74 5 (set (reg/f:DI 0 ax [460])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [460])
        (nil)))
(insn 74 73 75 5 (set (reg/f:DI 0 ax [orig:106 D.6136 ] [106])
        (reg/f:DI 0 ax [460])) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 75 74 76 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:103 D.6135 ] [103]) [0 *_72+0 S8 A64])
        (reg/f:DI 0 ax [orig:106 D.6136 ] [106])) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 76 75 77 5 (set (reg:SI 0 ax [461])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:66 90 {*movsi_internal}
     (nil))
(insn 77 76 78 5 (set (reg:DI 0 ax [orig:107 D.6131 ] [107])
        (sign_extend:DI (reg:SI 0 ax [461]))) sim2fitman_fmtext_o.cpp:66 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 5 (parallel [
            (set (reg:DI 1 dx [orig:108 D.6131 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:107 D.6131 ] [107])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:66 512 {*ashldi3_1}
     (nil))
(insn 79 78 80 5 (set (reg/f:DI 0 ax [462])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 scratch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (nil))
(insn 80 79 81 5 (parallel [
            (set (reg/f:DI 3 bx [orig:109 D.6135 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 D.6131 ] [108])
                    (reg/f:DI 0 ax [462])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:66 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.6131 ] [108]))
        (nil)))
(insn 81 80 82 5 (set (reg:SI 0 ax [463])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:66 90 {*movsi_internal}
     (nil))
(insn 82 81 83 5 (set (reg:DI 0 ax [orig:110 D.6131 ] [110])
        (sign_extend:DI (reg:SI 0 ax [463]))) sim2fitman_fmtext_o.cpp:66 142 {*extendsidi2_rex64}
     (nil))
(insn 83 82 84 5 (parallel [
            (set (reg:DI 0 ax [orig:111 D.6131 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 D.6131 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:66 512 {*ashldi3_1}
     (nil))
(insn 84 83 85 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:111 D.6131 ] [111])) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (nil))
(call_insn 85 84 86 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd2903cda20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:66 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 86 85 87 5 (set (reg/f:DI 0 ax [464])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [464])
        (nil)))
(insn 87 86 88 5 (set (reg/f:DI 0 ax [orig:112 D.6136 ] [112])
        (reg/f:DI 0 ax [464])) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (nil))
(insn 88 87 89 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:109 D.6135 ] [109]) [0 *_81+0 S8 A64])
        (reg/f:DI 0 ax [orig:112 D.6136 ] [112])) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (nil))
(insn 89 88 90 5 (set (reg:SI 0 ax [465])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:68 90 {*movsi_internal}
     (nil))
(insn 90 89 91 5 (set (reg:DI 0 ax [orig:113 D.6131 ] [113])
        (sign_extend:DI (reg:SI 0 ax [465]))) sim2fitman_fmtext_o.cpp:68 142 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 5 (parallel [
            (set (reg:DI 1 dx [orig:114 D.6131 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.6131 ] [113])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:68 512 {*ashldi3_1}
     (nil))
(insn 92 91 93 5 (set (reg/f:DI 0 ax [466])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 93 92 94 5 (parallel [
            (set (reg/f:DI 3 bx [orig:115 D.6137 ] [115])
                (plus:DI (reg:DI 1 dx [orig:114 D.6131 ] [114])
                    (reg/f:DI 0 ax [466])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:68 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.6131 ] [114]))
        (nil)))
(insn 94 93 95 5 (set (reg:SI 0 ax [467])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:68 90 {*movsi_internal}
     (nil))
(insn 95 94 96 5 (set (reg:DI 0 ax [orig:116 D.6131 ] [116])
        (sign_extend:DI (reg:SI 0 ax [467]))) sim2fitman_fmtext_o.cpp:68 142 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 5 (parallel [
            (set (reg:DI 0 ax [orig:117 D.6131 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 D.6131 ] [116])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:68 512 {*ashldi3_1}
     (nil))
(insn 97 96 98 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:117 D.6131 ] [117])) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(call_insn 98 97 99 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd2903cda20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:68 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 99 98 100 5 (set (reg/f:DI 0 ax [468])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [468])
        (nil)))
(insn 100 99 101 5 (set (reg/f:DI 0 ax [orig:118 D.6136 ] [118])
        (reg/f:DI 0 ax [468])) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 101 100 102 5 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:115 D.6137 ] [115]) [0 _90->fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:118 D.6136 ] [118])) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 102 101 103 5 (set (reg:SI 0 ax [469])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:69 90 {*movsi_internal}
     (nil))
(insn 103 102 104 5 (set (reg:DI 0 ax [orig:119 D.6131 ] [119])
        (sign_extend:DI (reg:SI 0 ax [469]))) sim2fitman_fmtext_o.cpp:69 142 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 5 (parallel [
            (set (reg:DI 1 dx [orig:120 D.6131 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.6131 ] [119])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:69 512 {*ashldi3_1}
     (nil))
(insn 105 104 106 5 (set (reg/f:DI 0 ax [470])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (nil))
(insn 106 105 107 5 (parallel [
            (set (reg/f:DI 3 bx [orig:121 D.6138 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 D.6131 ] [120])
                    (reg/f:DI 0 ax [470])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:69 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.6131 ] [120]))
        (nil)))
(insn 107 106 108 5 (set (reg:SI 0 ax [471])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:69 90 {*movsi_internal}
     (nil))
(insn 108 107 109 5 (set (reg:DI 0 ax [orig:122 D.6131 ] [122])
        (sign_extend:DI (reg:SI 0 ax [471]))) sim2fitman_fmtext_o.cpp:69 142 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 5 (parallel [
            (set (reg:DI 0 ax [orig:123 D.6131 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:122 D.6131 ] [122])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:69 512 {*ashldi3_1}
     (nil))
(insn 110 109 111 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:123 D.6131 ] [123])) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (nil))
(call_insn 111 110 112 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fd2903cda20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:69 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 112 111 113 5 (set (reg/f:DI 0 ax [472])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [472])
        (nil)))
(insn 113 112 114 5 (set (reg/f:DI 0 ax [orig:124 D.6136 ] [124])
        (reg/f:DI 0 ax [472])) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (nil))
(insn 114 113 115 5 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:121 D.6138 ] [121]) [0 _99->fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:124 D.6136 ] [124])) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (nil))
(insn 115 114 147 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:72 90 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 473
(code_label 147 115 116 6 5 "" [1 uses])
(note 116 147 117 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 6 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:72 90 {*movsi_internal}
     (nil))
(insn 118 117 119 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [473])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32]))) sim2fitman_fmtext_o.cpp:72 7 {*cmpsi_1}
     (nil))
(jump_insn 119 118 120 6 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 150)
            (pc))) sim2fitman_fmtext_o.cpp:72 612 {*jcc_1}
     (nil)
 -> 150)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 474 475 476 477 478 479 480 481
(note 120 119 121 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 7 (set (reg:SI 0 ax [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 122 121 123 7 (set (reg:DI 0 ax [orig:125 D.6131 ] [125])
        (sign_extend:DI (reg:SI 0 ax [474]))) sim2fitman_fmtext_o.cpp:73 142 {*extendsidi2_rex64}
     (nil))
(insn 123 122 124 7 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6131 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.6131 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:73 512 {*ashldi3_1}
     (nil))
(insn 124 123 125 7 (set (reg/f:DI 0 ax [475])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 125 124 126 7 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.6138 ] [127])
                (plus:DI (reg/f:DI 0 ax [475])
                    (reg:DI 1 dx [orig:126 D.6131 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:73 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6131 ] [126]))
        (nil)))
(insn 126 125 127 7 (set (reg/f:DI 0 ax [orig:128 D.6139 ] [128])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:127 D.6138 ] [127]) [0 _108->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 127 126 128 7 (set (reg:SI 1 dx [476])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 128 127 129 7 (set (reg:DI 1 dx [orig:129 D.6131 ] [129])
        (sign_extend:DI (reg:SI 1 dx [476]))) sim2fitman_fmtext_o.cpp:73 142 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 7 (parallel [
            (set (reg:DI 1 dx [orig:130 D.6131 ] [130])
                (ashift:DI (reg:DI 1 dx [orig:129 D.6131 ] [129])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:73 512 {*ashldi3_1}
     (nil))
(insn 130 129 131 7 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.6139 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:128 D.6139 ] [128])
                    (reg:DI 1 dx [orig:130 D.6131 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:73 218 {*adddi_1}
     (nil))
(insn 131 130 132 7 (set (reg:SF 21 xmm0 [477])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_fmtext_o.cpp:73 129 {*movsf_internal}
     (nil))
(insn 132 131 133 7 (set (mem:SF (reg/f:DI 0 ax [orig:131 D.6139 ] [131]) [0 *_112+0 S4 A32])
        (reg:SF 21 xmm0 [477])) sim2fitman_fmtext_o.cpp:73 129 {*movsf_internal}
     (nil))
(insn 133 132 134 7 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:74 90 {*movsi_internal}
     (nil))
(insn 134 133 135 7 (set (reg:DI 0 ax [orig:132 D.6131 ] [132])
        (sign_extend:DI (reg:SI 0 ax [478]))) sim2fitman_fmtext_o.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 7 (parallel [
            (set (reg:DI 1 dx [orig:133 D.6131 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6131 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 136 135 137 7 (set (reg/f:DI 0 ax [479])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:74 89 {*movdi_internal}
     (nil))
(insn 137 136 138 7 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6138 ] [134])
                (plus:DI (reg/f:DI 0 ax [479])
                    (reg:DI 1 dx [orig:133 D.6131 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6131 ] [133]))
        (nil)))
(insn 138 137 139 7 (set (reg/f:DI 0 ax [orig:135 D.6139 ] [135])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:134 D.6138 ] [134]) [0 _116->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:74 89 {*movdi_internal}
     (nil))
(insn 139 138 140 7 (set (reg:SI 1 dx [480])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:74 90 {*movsi_internal}
     (nil))
(insn 140 139 141 7 (set (reg:DI 1 dx [orig:136 D.6140 ] [136])
        (sign_extend:DI (reg:SI 1 dx [480]))) sim2fitman_fmtext_o.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 141 140 142 7 (parallel [
            (set (reg:DI 1 dx [orig:137 D.6140 ] [137])
                (plus:DI (reg:DI 1 dx [orig:136 D.6140 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 218 {*adddi_1}
     (nil))
(insn 142 141 143 7 (parallel [
            (set (reg:DI 1 dx [orig:138 D.6140 ] [138])
                (ashift:DI (reg:DI 1 dx [orig:137 D.6140 ] [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 512 {*ashldi3_1}
     (nil))
(insn 143 142 144 7 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.6139 ] [139])
                (plus:DI (reg/f:DI 0 ax [orig:135 D.6139 ] [135])
                    (reg:DI 1 dx [orig:138 D.6140 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 218 {*adddi_1}
     (nil))
(insn 144 143 145 7 (set (reg:SF 21 xmm0 [481])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_fmtext_o.cpp:74 129 {*movsf_internal}
     (nil))
(insn 145 144 146 7 (set (mem:SF (reg/f:DI 0 ax [orig:139 D.6139 ] [139]) [0 *_121+0 S4 A32])
        (reg:SF 21 xmm0 [481])) sim2fitman_fmtext_o.cpp:74 129 {*movsf_internal}
     (nil))
(insn 146 145 821 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:72 217 {*addsi_1}
     (nil))
(jump_insn 821 146 822 7 (set (pc)
        (label_ref 147)) sim2fitman_fmtext_o.cpp:72 654 {jump}
     (nil)
 -> 147)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 822 821 150)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 141 142 143 144 145 146 147 148 149 150 151 152 153 482 483 484 485 486 487 488 489 490
(code_label 150 822 151 8 4 "" [1 uses])
(note 151 150 152 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 8 (set (reg/f:DI 0 ax [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 153 152 154 8 (set (reg:DI 0 ax [483])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [482])
                (const_int 24 [0x18])) [0 infile_struct_124(D)->hdr_offset+0 S8 A64])) sim2fitman_fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 154 153 155 8 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
        (reg:DI 0 ax [483])) sim2fitman_fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 155 154 156 8 (set (reg:SI 0 ax [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:84 90 {*movsi_internal}
     (nil))
(insn 156 155 850 8 (set (reg:DI 0 ax [orig:140 D.6131 ] [140])
        (sign_extend:DI (reg:SI 0 ax [484]))) sim2fitman_fmtext_o.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 850 156 157 8 (set (reg:DI 0 ax [orig:141 D.6131 ] [141])
        (reg:DI 0 ax [orig:140 D.6131 ] [140])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 157 850 851 8 (parallel [
            (set (reg:DI 0 ax [orig:141 D.6131 ] [141])
                (ashift:DI (reg:DI 0 ax [orig:141 D.6131 ] [141])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 851 157 158 8 (set (reg:DI 1 dx [orig:141 D.6131 ] [141])
        (reg:DI 0 ax [orig:141 D.6131 ] [141])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 158 851 159 8 (set (reg/f:DI 0 ax [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 159 158 160 8 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.6133 ] [142])
                (plus:DI (reg/f:DI 0 ax [485])
                    (reg:DI 1 dx [orig:141 D.6131 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:141 D.6131 ] [141]))
        (nil)))
(insn 160 159 161 8 (set (reg:DI 1 dx [orig:143 D.6134 ] [143])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:142 D.6133 ] [142])
                (const_int 24 [0x18])) [0 _128->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 161 160 162 8 (set (reg:SI 0 ax [486])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:84 90 {*movsi_internal}
     (nil))
(insn 162 161 852 8 (set (reg:DI 0 ax [orig:144 D.6131 ] [144])
        (sign_extend:DI (reg:SI 0 ax [486]))) sim2fitman_fmtext_o.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 852 162 163 8 (set (reg:DI 0 ax [orig:145 D.6131 ] [145])
        (reg:DI 0 ax [orig:144 D.6131 ] [144])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 163 852 853 8 (parallel [
            (set (reg:DI 0 ax [orig:145 D.6131 ] [145])
                (ashift:DI (reg:DI 0 ax [orig:145 D.6131 ] [145])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 853 163 164 8 (set (reg:DI 2 cx [orig:145 D.6131 ] [145])
        (reg:DI 0 ax [orig:145 D.6131 ] [145])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 164 853 165 8 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 165 164 166 8 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.6133 ] [146])
                (plus:DI (reg/f:DI 0 ax [487])
                    (reg:DI 2 cx [orig:145 D.6131 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:145 D.6131 ] [145]))
        (nil)))
(insn 166 165 167 8 (set (reg:DI 0 ax [orig:147 D.6134 ] [147])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:146 D.6133 ] [146])
                (const_int 16 [0x10])) [0 _132->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 167 166 168 8 (parallel [
            (set (reg:DI 1 dx [orig:148 D.6134 ] [148])
                (mult:DI (reg:DI 1 dx [orig:143 D.6134 ] [143])
                    (reg:DI 0 ax [orig:147 D.6134 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 306 {*muldi3_1}
     (nil))
(insn 168 167 169 8 (set (reg:SI 0 ax [488])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:85 90 {*movsi_internal}
     (nil))
(insn 169 168 854 8 (set (reg:DI 0 ax [orig:149 D.6131 ] [149])
        (sign_extend:DI (reg:SI 0 ax [488]))) sim2fitman_fmtext_o.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 854 169 170 8 (set (reg:DI 0 ax [orig:150 D.6131 ] [150])
        (reg:DI 0 ax [orig:149 D.6131 ] [149])) sim2fitman_fmtext_o.cpp:85 89 {*movdi_internal}
     (nil))
(insn 170 854 855 8 (parallel [
            (set (reg:DI 0 ax [orig:150 D.6131 ] [150])
                (ashift:DI (reg:DI 0 ax [orig:150 D.6131 ] [150])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:85 512 {*ashldi3_1}
     (nil))
(insn 855 170 171 8 (set (reg:DI 2 cx [orig:150 D.6131 ] [150])
        (reg:DI 0 ax [orig:150 D.6131 ] [150])) sim2fitman_fmtext_o.cpp:85 89 {*movdi_internal}
     (nil))
(insn 171 855 172 8 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:85 89 {*movdi_internal}
     (nil))
(insn 172 171 173 8 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.6141 ] [151])
                (plus:DI (reg/f:DI 0 ax [489])
                    (reg:DI 2 cx [orig:150 D.6131 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:85 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (reg:DI 2 cx [orig:150 D.6131 ] [150]))
        (nil)))
(insn 173 172 174 8 (set (reg:SI 0 ax [orig:152 D.6130 ] [152])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:151 D.6141 ] [151])
                (const_int 4 [0x4])) [0 _137->num_unsup_sets+0 S4 A32])) sim2fitman_fmtext_o.cpp:85 90 {*movsi_internal}
     (nil))
(insn 174 173 175 8 (set (reg:DI 0 ax [orig:153 D.6134 ] [153])
        (sign_extend:DI (reg:SI 0 ax [orig:152 D.6130 ] [152]))) sim2fitman_fmtext_o.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 8 (parallel [
            (set (reg:DI 0 ax [490])
                (mult:DI (reg:DI 0 ax [orig:153 D.6134 ] [153])
                    (reg:DI 1 dx [orig:148 D.6134 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:85 306 {*muldi3_1}
     (nil))
(insn 176 175 177 8 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])
        (reg:DI 0 ax [490])) sim2fitman_fmtext_o.cpp:85 89 {*movdi_internal}
     (nil))
(insn 177 176 178 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:90 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 178 177 179 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) sim2fitman_fmtext_o.cpp:90 612 {*jcc_1}
     (nil)
 -> 210)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 154 155 156 157 158 159 160 161 162 163 164 165 491 492 493 494 495 496 497 498 499 500
(note 179 178 180 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 9 (set (reg/f:DI 0 ax [491])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 181 180 182 9 (set (reg:DI 0 ax [492])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [491])
                (const_int 24 [0x18])) [0 infile_struct_124(D)->hdr_offset+0 S8 A64])) sim2fitman_fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 182 181 183 9 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
        (reg:DI 0 ax [492])) sim2fitman_fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 183 182 184 9 (set (reg:SI 0 ax [493])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:96 90 {*movsi_internal}
     (nil))
(insn 184 183 185 9 (set (reg:DI 0 ax [orig:154 D.6131 ] [154])
        (sign_extend:DI (reg:SI 0 ax [493]))) sim2fitman_fmtext_o.cpp:96 142 {*extendsidi2_rex64}
     (nil))
(insn 185 184 186 9 (parallel [
            (set (reg:DI 1 dx [orig:155 D.6131 ] [155])
                (ashift:DI (reg:DI 0 ax [orig:154 D.6131 ] [154])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:96 512 {*ashldi3_1}
     (nil))
(insn 186 185 187 9 (set (reg/f:DI 0 ax [494])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(insn 187 186 188 9 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.6142 ] [156])
                (plus:DI (reg/f:DI 0 ax [494])
                    (reg:DI 1 dx [orig:155 D.6131 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:96 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.6131 ] [155]))
        (nil)))
(insn 188 187 189 9 (set (reg/f:DI 0 ax [orig:157 D.6143 ] [157])
        (mem/f:DI (reg/f:DI 0 ax [orig:156 D.6142 ] [156]) [0 *_145+0 S8 A64])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(insn 189 188 190 9 (set (reg:DI 2 cx [495])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(insn 190 189 191 9 (set (reg:SI 1 dx)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:96 90 {*movsi_internal}
     (nil))
(insn 191 190 192 9 (set (reg:DI 4 si)
        (reg:DI 2 cx [495])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(insn 192 191 193 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:157 D.6143 ] [157])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(call_insn 193 192 194 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7fd290173870 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:96 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 194 193 195 9 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:102 90 {*movsi_internal}
     (nil))
(insn 195 194 856 9 (set (reg:DI 0 ax [orig:158 D.6131 ] [158])
        (sign_extend:DI (reg:SI 0 ax [496]))) sim2fitman_fmtext_o.cpp:102 142 {*extendsidi2_rex64}
     (nil))
(insn 856 195 196 9 (set (reg:DI 0 ax [orig:159 D.6131 ] [159])
        (reg:DI 0 ax [orig:158 D.6131 ] [158])) sim2fitman_fmtext_o.cpp:102 89 {*movdi_internal}
     (nil))
(insn 196 856 857 9 (parallel [
            (set (reg:DI 0 ax [orig:159 D.6131 ] [159])
                (ashift:DI (reg:DI 0 ax [orig:159 D.6131 ] [159])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:102 512 {*ashldi3_1}
     (nil))
(insn 857 196 197 9 (set (reg:DI 1 dx [orig:159 D.6131 ] [159])
        (reg:DI 0 ax [orig:159 D.6131 ] [159])) sim2fitman_fmtext_o.cpp:102 89 {*movdi_internal}
     (nil))
(insn 197 857 198 9 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:102 89 {*movdi_internal}
     (nil))
(insn 198 197 199 9 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.6141 ] [160])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:159 D.6131 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:102 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.6131 ] [159]))
        (nil)))
(insn 199 198 200 9 (set (reg:SI 1 dx [orig:161 D.6130 ] [161])
        (mem/j:SI (reg/f:DI 0 ax [orig:160 D.6141 ] [160]) [0 _150->num_datasets+0 S4 A64])) sim2fitman_fmtext_o.cpp:102 90 {*movsi_internal}
     (nil))
(insn 200 199 201 9 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(insn 201 200 858 9 (set (reg:DI 0 ax [orig:162 D.6131 ] [162])
        (sign_extend:DI (reg:SI 0 ax [498]))) sim2fitman_fmtext_o.cpp:103 142 {*extendsidi2_rex64}
     (nil))
(insn 858 201 202 9 (set (reg:DI 0 ax [orig:163 D.6131 ] [163])
        (reg:DI 0 ax [orig:162 D.6131 ] [162])) sim2fitman_fmtext_o.cpp:103 89 {*movdi_internal}
     (nil))
(insn 202 858 859 9 (parallel [
            (set (reg:DI 0 ax [orig:163 D.6131 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:163 D.6131 ] [163])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:103 512 {*ashldi3_1}
     (nil))
(insn 859 202 203 9 (set (reg:DI 2 cx [orig:163 D.6131 ] [163])
        (reg:DI 0 ax [orig:163 D.6131 ] [163])) sim2fitman_fmtext_o.cpp:103 89 {*movdi_internal}
     (nil))
(insn 203 859 204 9 (set (reg/f:DI 0 ax [499])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:103 89 {*movdi_internal}
     (nil))
(insn 204 203 205 9 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.6141 ] [164])
                (plus:DI (reg/f:DI 0 ax [499])
                    (reg:DI 2 cx [orig:163 D.6131 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:103 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (reg:DI 2 cx [orig:163 D.6131 ] [163]))
        (nil)))
(insn 205 204 206 9 (set (reg:SI 0 ax [orig:165 D.6130 ] [165])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:164 D.6141 ] [164])
                (const_int 4 [0x4])) [0 _154->num_unsup_sets+0 S4 A32])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(insn 206 205 861 9 (parallel [
            (set (reg:SI 1 dx [500])
                (minus:SI (reg:SI 1 dx [500])
                    (reg:SI 0 ax [orig:165 D.6130 ] [165])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:103 260 {*subsi_1}
     (nil))
(insn 861 206 207 9 (set (reg:SI 0 ax [500])
        (reg:SI 1 dx [500])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(insn 207 861 823 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [500])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(jump_insn 823 207 824 9 (set (pc)
        (label_ref 234)) 654 {jump}
     (nil)
 -> 234)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 824 823 210)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 166 167 168 169 170 171 172 173 501 502 503 504 505 506 507 508
(code_label 210 824 211 10 6 "" [1 uses])
(note 211 210 212 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 10 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 213 212 214 10 (parallel [
            (set (reg/f:DI 0 ax [orig:166 D.6141 ] [166])
                (plus:DI (reg/f:DI 0 ax [501])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:113 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 214 213 215 10 (set (reg:DI 0 ax [502])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:166 D.6141 ] [166])
                (const_int 24 [0x18])) [0 _157->hdr_offset+0 S8 A64])) sim2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 215 214 216 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
        (reg:DI 0 ax [502])) sim2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 216 215 217 10 (set (reg:SI 0 ax [503])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:119 90 {*movsi_internal}
     (nil))
(insn 217 216 218 10 (set (reg:DI 0 ax [orig:167 D.6131 ] [167])
        (sign_extend:DI (reg:SI 0 ax [503]))) sim2fitman_fmtext_o.cpp:119 142 {*extendsidi2_rex64}
     (nil))
(insn 218 217 219 10 (parallel [
            (set (reg:DI 1 dx [orig:168 D.6131 ] [168])
                (ashift:DI (reg:DI 0 ax [orig:167 D.6131 ] [167])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:119 512 {*ashldi3_1}
     (nil))
(insn 219 218 220 10 (set (reg/f:DI 0 ax [504])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(insn 220 219 221 10 (parallel [
            (set (reg/f:DI 0 ax [orig:169 D.6142 ] [169])
                (plus:DI (reg/f:DI 0 ax [504])
                    (reg:DI 1 dx [orig:168 D.6131 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:119 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:168 D.6131 ] [168]))
        (nil)))
(insn 221 220 222 10 (set (reg/f:DI 0 ax [orig:170 D.6143 ] [170])
        (mem/f:DI (reg/f:DI 0 ax [orig:169 D.6142 ] [169]) [0 *_161+0 S8 A64])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(insn 222 221 223 10 (set (reg:DI 2 cx [505])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(insn 223 222 224 10 (set (reg:SI 1 dx)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:119 90 {*movsi_internal}
     (nil))
(insn 224 223 225 10 (set (reg:DI 4 si)
        (reg:DI 2 cx [505])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(insn 225 224 226 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:170 D.6143 ] [170])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(call_insn 226 225 227 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7fd290173870 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:119 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 227 226 228 10 (set (reg:SI 0 ax [506])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 228 227 862 10 (set (reg:DI 0 ax [orig:171 D.6131 ] [171])
        (sign_extend:DI (reg:SI 0 ax [506]))) sim2fitman_fmtext_o.cpp:124 142 {*extendsidi2_rex64}
     (nil))
(insn 862 228 229 10 (set (reg:DI 0 ax [orig:172 D.6131 ] [172])
        (reg:DI 0 ax [orig:171 D.6131 ] [171])) sim2fitman_fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 229 862 863 10 (parallel [
            (set (reg:DI 0 ax [orig:172 D.6131 ] [172])
                (ashift:DI (reg:DI 0 ax [orig:172 D.6131 ] [172])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:124 512 {*ashldi3_1}
     (nil))
(insn 863 229 230 10 (set (reg:DI 1 dx [orig:172 D.6131 ] [172])
        (reg:DI 0 ax [orig:172 D.6131 ] [172])) sim2fitman_fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 230 863 231 10 (set (reg/f:DI 0 ax [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 231 230 232 10 (parallel [
            (set (reg/f:DI 0 ax [orig:173 D.6141 ] [173])
                (plus:DI (reg/f:DI 0 ax [507])
                    (reg:DI 1 dx [orig:172 D.6131 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:124 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:172 D.6131 ] [172]))
        (nil)))
(insn 232 231 233 10 (set (reg:SI 0 ax [508])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:173 D.6141 ] [173])
                (const_int 4 [0x4])) [0 _166->num_unsup_sets+0 S4 A32])) sim2fitman_fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 233 232 234 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [508])) sim2fitman_fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 234 233 235 11 7 "" [1 uses])
(note 235 234 236 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 794 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:133 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              49 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 509
(code_label 794 236 237 12 27 "" [1 uses])
(note 237 794 238 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 12 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])) sim2fitman_fmtext_o.cpp:133 90 {*movsi_internal}
     (nil))
(insn 239 238 240 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [509])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 numSets+0 S4 A32]))) sim2fitman_fmtext_o.cpp:133 7 {*cmpsi_1}
     (nil))
(jump_insn 240 239 241 12 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 797)
            (pc))) sim2fitman_fmtext_o.cpp:133 612 {*jcc_1}
     (nil)
 -> 797)
;;  succ:       50
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 174 175 176 177 178 179 510 511
(note 241 240 242 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 13 (set (reg:SI 0 ax [510])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:146 90 {*movsi_internal}
     (nil))
(insn 243 242 864 13 (set (reg:DI 0 ax [orig:174 D.6131 ] [174])
        (sign_extend:DI (reg:SI 0 ax [510]))) sim2fitman_fmtext_o.cpp:146 142 {*extendsidi2_rex64}
     (nil))
(insn 864 243 244 13 (set (reg:DI 0 ax [orig:175 D.6131 ] [175])
        (reg:DI 0 ax [orig:174 D.6131 ] [174])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 244 864 865 13 (parallel [
            (set (reg:DI 0 ax [orig:175 D.6131 ] [175])
                (ashift:DI (reg:DI 0 ax [orig:175 D.6131 ] [175])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:146 512 {*ashldi3_1}
     (nil))
(insn 865 244 245 13 (set (reg:DI 1 dx [orig:175 D.6131 ] [175])
        (reg:DI 0 ax [orig:175 D.6131 ] [175])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 245 865 246 13 (set (reg/f:DI 0 ax [511])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 246 245 247 13 (parallel [
            (set (reg/f:DI 0 ax [orig:176 D.6133 ] [176])
                (plus:DI (reg/f:DI 0 ax [511])
                    (reg:DI 1 dx [orig:175 D.6131 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:146 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.6131 ] [175]))
        (nil)))
(insn 247 246 248 13 (set (reg:DI 0 ax [orig:177 D.6134 ] [177])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:176 D.6133 ] [176])
                (const_int 24 [0x18])) [0 _171->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 248 247 249 13 (set (reg:DI 0 ax [orig:178 D.6144 ] [178])
        (reg:DI 0 ax [orig:177 D.6134 ] [177])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 249 248 250 13 (parallel [
            (set (reg:DI 0 ax [orig:179 D.6144 ] [179])
                (plus:DI (reg:DI 0 ax [orig:178 D.6144 ] [178])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:146 218 {*adddi_1}
     (nil))
(insn 250 249 251 13 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:179 D.6144 ] [179])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:146 8 {*cmpdi_1}
     (nil))
(jump_insn 251 250 252 13 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 419)
            (pc))) sim2fitman_fmtext_o.cpp:146 612 {*jcc_1}
     (nil)
 -> 419)
;;  succ:       14 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 252 251 253 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:157 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 254 253 255 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 291)
            (pc))) sim2fitman_fmtext_o.cpp:157 612 {*jcc_1}
     (nil)
 -> 291)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 512 513 514 515 516 517 518 519 520 521
(note 255 254 256 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 15 (set (reg:SI 0 ax [512])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:159 90 {*movsi_internal}
     (nil))
(insn 257 256 258 15 (set (reg:DI 0 ax [orig:180 D.6131 ] [180])
        (sign_extend:DI (reg:SI 0 ax [512]))) sim2fitman_fmtext_o.cpp:159 142 {*extendsidi2_rex64}
     (nil))
(insn 258 257 259 15 (parallel [
            (set (reg:DI 1 dx [orig:181 D.6131 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:180 D.6131 ] [180])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 512 {*ashldi3_1}
     (nil))
(insn 259 258 260 15 (set (reg/f:DI 0 ax [513])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 260 259 261 15 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.6142 ] [182])
                (plus:DI (reg/f:DI 0 ax [513])
                    (reg:DI 1 dx [orig:181 D.6131 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:181 D.6131 ] [181]))
        (nil)))
(insn 261 260 262 15 (set (reg/f:DI 1 dx [orig:183 D.6143 ] [183])
        (mem/f:DI (reg/f:DI 0 ax [orig:182 D.6142 ] [182]) [0 *_177+0 S8 A64])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 262 261 263 15 (set (reg:SI 0 ax [514])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:159 90 {*movsi_internal}
     (nil))
(insn 263 262 866 15 (set (reg:DI 0 ax [orig:184 D.6131 ] [184])
        (sign_extend:DI (reg:SI 0 ax [514]))) sim2fitman_fmtext_o.cpp:159 142 {*extendsidi2_rex64}
     (nil))
(insn 866 263 264 15 (set (reg:DI 0 ax [orig:185 D.6131 ] [185])
        (reg:DI 0 ax [orig:184 D.6131 ] [184])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 264 866 867 15 (parallel [
            (set (reg:DI 0 ax [orig:185 D.6131 ] [185])
                (ashift:DI (reg:DI 0 ax [orig:185 D.6131 ] [185])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 512 {*ashldi3_1}
     (nil))
(insn 867 264 265 15 (set (reg:DI 2 cx [orig:185 D.6131 ] [185])
        (reg:DI 0 ax [orig:185 D.6131 ] [185])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 265 867 266 15 (set (reg/f:DI 0 ax [515])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 266 265 267 15 (parallel [
            (set (reg/f:DI 0 ax [orig:186 D.6133 ] [186])
                (plus:DI (reg/f:DI 0 ax [515])
                    (reg:DI 2 cx [orig:185 D.6131 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:185 D.6131 ] [185]))
        (nil)))
(insn 267 266 268 15 (set (reg:DI 0 ax [orig:187 D.6134 ] [187])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:186 D.6133 ] [186])
                (const_int 16 [0x10])) [0 _181->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 268 267 269 15 (parallel [
            (set (reg:DI 0 ax [orig:188 D.6134 ] [188])
                (ashift:DI (reg:DI 0 ax [orig:187 D.6134 ] [187])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 512 {*ashldi3_1}
     (nil))
(insn 269 268 270 15 (set (reg:DI 5 di [orig:189 D.6131 ] [189])
        (reg:DI 0 ax [orig:188 D.6134 ] [188])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 270 269 271 15 (set (reg:SI 0 ax [516])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:158 90 {*movsi_internal}
     (nil))
(insn 271 270 868 15 (set (reg:DI 0 ax [orig:190 D.6131 ] [190])
        (sign_extend:DI (reg:SI 0 ax [516]))) sim2fitman_fmtext_o.cpp:158 142 {*extendsidi2_rex64}
     (nil))
(insn 868 271 272 15 (set (reg:DI 0 ax [orig:191 D.6131 ] [191])
        (reg:DI 0 ax [orig:190 D.6131 ] [190])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 272 868 869 15 (parallel [
            (set (reg:DI 0 ax [orig:191 D.6131 ] [191])
                (ashift:DI (reg:DI 0 ax [orig:191 D.6131 ] [191])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 512 {*ashldi3_1}
     (nil))
(insn 869 272 273 15 (set (reg:DI 2 cx [orig:191 D.6131 ] [191])
        (reg:DI 0 ax [orig:191 D.6131 ] [191])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 273 869 274 15 (set (reg/f:DI 0 ax [517])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 274 273 275 15 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.6133 ] [192])
                (plus:DI (reg/f:DI 0 ax [517])
                    (reg:DI 2 cx [orig:191 D.6131 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:191 D.6131 ] [191]))
        (nil)))
(insn 275 274 870 15 (set (reg:DI 0 ax [orig:193 D.6134 ] [193])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:192 D.6133 ] [192])
                (const_int 24 [0x18])) [0 _187->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 870 275 276 15 (set (reg:DI 2 cx [518])
        (reg:DI 0 ax [orig:193 D.6134 ] [193])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 276 870 277 15 (parallel [
            (set (reg:DI 2 cx [518])
                (lshiftrt:DI (reg:DI 2 cx [518])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 546 {*lshrdi3_1}
     (nil))
(insn 277 276 278 15 (parallel [
            (set (reg:DI 0 ax [519])
                (plus:DI (reg:DI 0 ax [orig:193 D.6134 ] [193])
                    (reg:DI 2 cx [518])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 218 {*adddi_1}
     (nil))
(insn 278 277 279 15 (parallel [
            (set (reg:DI 0 ax [520])
                (ashiftrt:DI (reg:DI 0 ax [519])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 547 {*ashrdi3_1}
     (nil))
(insn 279 278 280 15 (set (reg:DI 0 ax [orig:194 D.6134 ] [194])
        (reg:DI 0 ax [520])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 280 279 281 15 (set (reg:DI 4 si [orig:195 D.6131 ] [195])
        (reg:DI 0 ax [orig:194 D.6134 ] [194])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 281 280 282 15 (set (reg:DI 0 ax [521])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 282 281 283 15 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:183 D.6143 ] [183])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 283 282 285 15 (set (reg:DI 1 dx)
        (reg:DI 5 di [orig:189 D.6131 ] [189])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 285 283 286 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [521])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(call_insn 286 285 287 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fd290173438 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:158 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 287 286 288 15 (set (reg:DI 0 ax [orig:196 D.6131 ] [196])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 288 287 825 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 k+0 S4 A32])
        (reg:SI 0 ax [orig:196 D.6131 ] [196])) sim2fitman_fmtext_o.cpp:159 90 {*movsi_internal}
     (nil))
(jump_insn 825 288 826 15 (set (pc)
        (label_ref 329)) 654 {jump}
     (nil)
 -> 329)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 826 825 291)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 291 826 292 16 9 "" [1 uses])
(note 292 291 293 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:160 7 {*cmpsi_1}
     (nil))
(jump_insn 294 293 295 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 329)
            (pc))) sim2fitman_fmtext_o.cpp:160 612 {*jcc_1}
     (nil)
 -> 329)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 522 523 524 525 526 527 528 529 530 531
(note 295 294 296 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 296 295 297 17 (set (reg:SI 0 ax [522])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
(insn 297 296 298 17 (set (reg:DI 0 ax [orig:197 D.6131 ] [197])
        (sign_extend:DI (reg:SI 0 ax [522]))) sim2fitman_fmtext_o.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 298 297 299 17 (parallel [
            (set (reg:DI 1 dx [orig:198 D.6131 ] [198])
                (ashift:DI (reg:DI 0 ax [orig:197 D.6131 ] [197])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 512 {*ashldi3_1}
     (nil))
(insn 299 298 300 17 (set (reg/f:DI 0 ax [523])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 300 299 301 17 (parallel [
            (set (reg/f:DI 0 ax [orig:199 D.6142 ] [199])
                (plus:DI (reg/f:DI 0 ax [523])
                    (reg:DI 1 dx [orig:198 D.6131 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:198 D.6131 ] [198]))
        (nil)))
(insn 301 300 302 17 (set (reg/f:DI 1 dx [orig:200 D.6143 ] [200])
        (mem/f:DI (reg/f:DI 0 ax [orig:199 D.6142 ] [199]) [0 *_197+0 S8 A64])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 302 301 303 17 (set (reg:SI 0 ax [524])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
(insn 303 302 872 17 (set (reg:DI 0 ax [orig:201 D.6131 ] [201])
        (sign_extend:DI (reg:SI 0 ax [524]))) sim2fitman_fmtext_o.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 872 303 304 17 (set (reg:DI 0 ax [orig:202 D.6131 ] [202])
        (reg:DI 0 ax [orig:201 D.6131 ] [201])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 304 872 873 17 (parallel [
            (set (reg:DI 0 ax [orig:202 D.6131 ] [202])
                (ashift:DI (reg:DI 0 ax [orig:202 D.6131 ] [202])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 512 {*ashldi3_1}
     (nil))
(insn 873 304 305 17 (set (reg:DI 2 cx [orig:202 D.6131 ] [202])
        (reg:DI 0 ax [orig:202 D.6131 ] [202])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 305 873 306 17 (set (reg/f:DI 0 ax [525])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 306 305 307 17 (parallel [
            (set (reg/f:DI 0 ax [orig:203 D.6133 ] [203])
                (plus:DI (reg/f:DI 0 ax [525])
                    (reg:DI 2 cx [orig:202 D.6131 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:202 D.6131 ] [202]))
        (nil)))
(insn 307 306 308 17 (set (reg:DI 0 ax [orig:204 D.6134 ] [204])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:203 D.6133 ] [203])
                (const_int 16 [0x10])) [0 _201->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 308 307 309 17 (parallel [
            (set (reg:DI 0 ax [orig:205 D.6134 ] [205])
                (ashift:DI (reg:DI 0 ax [orig:204 D.6134 ] [204])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 512 {*ashldi3_1}
     (nil))
(insn 309 308 310 17 (set (reg:DI 5 di [orig:206 D.6131 ] [206])
        (reg:DI 0 ax [orig:205 D.6134 ] [205])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 310 309 311 17 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:161 90 {*movsi_internal}
     (nil))
(insn 311 310 874 17 (set (reg:DI 0 ax [orig:207 D.6131 ] [207])
        (sign_extend:DI (reg:SI 0 ax [526]))) sim2fitman_fmtext_o.cpp:161 142 {*extendsidi2_rex64}
     (nil))
(insn 874 311 312 17 (set (reg:DI 0 ax [orig:208 D.6131 ] [208])
        (reg:DI 0 ax [orig:207 D.6131 ] [207])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 312 874 875 17 (parallel [
            (set (reg:DI 0 ax [orig:208 D.6131 ] [208])
                (ashift:DI (reg:DI 0 ax [orig:208 D.6131 ] [208])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 512 {*ashldi3_1}
     (nil))
(insn 875 312 313 17 (set (reg:DI 2 cx [orig:208 D.6131 ] [208])
        (reg:DI 0 ax [orig:208 D.6131 ] [208])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 313 875 314 17 (set (reg/f:DI 0 ax [527])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 314 313 315 17 (parallel [
            (set (reg/f:DI 0 ax [orig:209 D.6133 ] [209])
                (plus:DI (reg/f:DI 0 ax [527])
                    (reg:DI 2 cx [orig:208 D.6131 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:208 D.6131 ] [208]))
        (nil)))
(insn 315 314 876 17 (set (reg:DI 0 ax [orig:210 D.6134 ] [210])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:209 D.6133 ] [209])
                (const_int 24 [0x18])) [0 _207->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 876 315 316 17 (set (reg:DI 2 cx [528])
        (reg:DI 0 ax [orig:210 D.6134 ] [210])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 316 876 317 17 (parallel [
            (set (reg:DI 2 cx [528])
                (lshiftrt:DI (reg:DI 2 cx [528])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 546 {*lshrdi3_1}
     (nil))
(insn 317 316 318 17 (parallel [
            (set (reg:DI 0 ax [529])
                (plus:DI (reg:DI 0 ax [orig:210 D.6134 ] [210])
                    (reg:DI 2 cx [528])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 218 {*adddi_1}
     (nil))
(insn 318 317 319 17 (parallel [
            (set (reg:DI 0 ax [530])
                (ashiftrt:DI (reg:DI 0 ax [529])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 547 {*ashrdi3_1}
     (nil))
(insn 319 318 320 17 (set (reg:DI 0 ax [orig:211 D.6134 ] [211])
        (reg:DI 0 ax [530])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 320 319 321 17 (set (reg:DI 4 si [orig:212 D.6131 ] [212])
        (reg:DI 0 ax [orig:211 D.6134 ] [211])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 321 320 322 17 (set (reg:DI 0 ax [531])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 temp_double2+0 S8 A64])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 322 321 323 17 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:200 D.6143 ] [200])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 323 322 325 17 (set (reg:DI 1 dx)
        (reg:DI 5 di [orig:206 D.6131 ] [206])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 325 323 326 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [531])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(call_insn 326 325 327 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fd290173438 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:161 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 327 326 328 17 (set (reg:DI 0 ax [orig:213 D.6131 ] [213])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 328 327 329 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 k+0 S4 A32])
        (reg:SI 0 ax [orig:213 D.6131 ] [213])) sim2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              16
;;              15 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 214 215 216 217 218 219 532 533 534
(code_label 329 328 330 18 10 "" [2 uses])
(note 330 329 331 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 331 330 332 18 (set (reg:SI 0 ax [532])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 k+0 S4 A32])) sim2fitman_fmtext_o.cpp:173 90 {*movsi_internal}
     (nil))
(insn 332 331 333 18 (set (reg:DI 0 ax [orig:214 D.6134 ] [214])
        (sign_extend:DI (reg:SI 0 ax [532]))) sim2fitman_fmtext_o.cpp:173 142 {*extendsidi2_rex64}
     (nil))
(insn 333 332 334 18 (set (reg:SI 1 dx [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:173 90 {*movsi_internal}
     (nil))
(insn 334 333 878 18 (set (reg:DI 1 dx [orig:215 D.6131 ] [215])
        (sign_extend:DI (reg:SI 1 dx [533]))) sim2fitman_fmtext_o.cpp:173 142 {*extendsidi2_rex64}
     (nil))
(insn 878 334 335 18 (set (reg:DI 2 cx [orig:216 D.6131 ] [216])
        (reg:DI 1 dx [orig:215 D.6131 ] [215])) sim2fitman_fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 335 878 336 18 (parallel [
            (set (reg:DI 2 cx [orig:216 D.6131 ] [216])
                (ashift:DI (reg:DI 2 cx [orig:216 D.6131 ] [216])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:173 512 {*ashldi3_1}
     (nil))
(insn 336 335 337 18 (set (reg/f:DI 1 dx [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 337 336 338 18 (parallel [
            (set (reg/f:DI 1 dx [orig:217 D.6133 ] [217])
                (plus:DI (reg/f:DI 1 dx [534])
                    (reg:DI 2 cx [orig:216 D.6131 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:173 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:216 D.6131 ] [216]))
        (nil)))
(insn 338 337 339 18 (set (reg:DI 1 dx [orig:218 D.6134 ] [218])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:217 D.6133 ] [217])
                (const_int 16 [0x10])) [0 _218->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 339 338 340 18 (parallel [
            (set (reg:DI 1 dx [orig:219 D.6134 ] [219])
                (ashift:DI (reg:DI 1 dx [orig:218 D.6134 ] [218])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:173 512 {*ashldi3_1}
     (nil))
(insn 340 339 341 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:214 D.6134 ] [214])
            (reg:DI 1 dx [orig:219 D.6134 ] [219]))) sim2fitman_fmtext_o.cpp:173 8 {*cmpdi_1}
     (nil))
(jump_insn 341 340 342 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 353)
            (pc))) sim2fitman_fmtext_o.cpp:173 612 {*jcc_1}
     (nil)
 -> 353)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 250 535 536 537 538
(note 342 341 343 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 343 342 344 19 (set (reg:SI 0 ax [536])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 344 343 880 19 (set (reg:DI 0 ax [535])
        (sign_extend:DI (reg:SI 0 ax [536]))) sim2fitman_fmtext_o.cpp:174 142 {*extendsidi2_rex64}
     (nil))
(insn 880 344 345 19 (set (reg:DI 0 ax [537])
        (reg:DI 0 ax [535])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 345 880 881 19 (parallel [
            (set (reg:DI 0 ax [537])
                (ashift:DI (reg:DI 0 ax [537])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:174 512 {*ashldi3_1}
     (nil))
(insn 881 345 346 19 (set (reg:DI 1 dx [537])
        (reg:DI 0 ax [537])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 346 881 347 19 (set (reg/f:DI 0 ax [538])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 347 346 348 19 (parallel [
            (set (reg/f:DI 0 ax [orig:250 D.6148 ] [250])
                (plus:DI (reg/f:DI 0 ax [538])
                    (reg:DI 1 dx [537])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:174 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 file+0 S8 A64])
            (reg:DI 1 dx [537]))
        (nil)))
(insn 348 347 349 19 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:250 D.6148 ] [250])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 349 348 350 19 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(call_insn 350 349 827 19 (call (mem:QI (symbol_ref:DI ("_Z7exit_06PP8_IO_FILEPc") [flags 0x41]  <function_decl 0x7fd2902a5ca8 exit_06>) [0 exit_06 S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:174 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 827 350 828 19 (set (pc)
        (label_ref 479)) 654 {jump}
     (nil)
 -> 479)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 828 827 353)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 353 828 354 20 11 "" [1 uses])
(note 354 353 355 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 416 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              26 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 220 221 222 223 224 225 539 540 541
(code_label 416 355 356 21 15 "" [1 uses])
(note 356 416 357 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 357 356 358 21 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
(insn 358 357 359 21 (set (reg:DI 0 ax [orig:220 D.6134 ] [220])
        (sign_extend:DI (reg:SI 0 ax [539]))) sim2fitman_fmtext_o.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 359 358 360 21 (set (reg:SI 1 dx [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
(insn 360 359 882 21 (set (reg:DI 1 dx [orig:221 D.6131 ] [221])
        (sign_extend:DI (reg:SI 1 dx [540]))) sim2fitman_fmtext_o.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 882 360 361 21 (set (reg:DI 2 cx [orig:222 D.6131 ] [222])
        (reg:DI 1 dx [orig:221 D.6131 ] [221])) sim2fitman_fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 361 882 362 21 (parallel [
            (set (reg:DI 2 cx [orig:222 D.6131 ] [222])
                (ashift:DI (reg:DI 2 cx [orig:222 D.6131 ] [222])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:185 512 {*ashldi3_1}
     (nil))
(insn 362 361 363 21 (set (reg/f:DI 1 dx [541])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 363 362 364 21 (parallel [
            (set (reg/f:DI 1 dx [orig:223 D.6133 ] [223])
                (plus:DI (reg/f:DI 1 dx [541])
                    (reg:DI 2 cx [orig:222 D.6131 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:185 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:222 D.6131 ] [222]))
        (nil)))
(insn 364 363 365 21 (set (reg:DI 1 dx [orig:224 D.6134 ] [224])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:223 D.6133 ] [223])
                (const_int 16 [0x10])) [0 _225->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 365 364 366 21 (parallel [
            (set (reg:DI 1 dx [orig:225 D.6134 ] [225])
                (ashift:DI (reg:DI 1 dx [orig:224 D.6134 ] [224])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:185 512 {*ashldi3_1}
     (nil))
(insn 366 365 367 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:220 D.6134 ] [220])
            (reg:DI 1 dx [orig:225 D.6134 ] [225]))) sim2fitman_fmtext_o.cpp:185 8 {*cmpdi_1}
     (nil))
(jump_insn 367 366 368 21 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 479)
            (pc))) sim2fitman_fmtext_o.cpp:185 612 {*jcc_1}
     (nil)
 -> 479)
;;  succ:       29
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 368 367 369 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 369 368 370 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:187 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 370 369 371 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 390)
            (pc))) sim2fitman_fmtext_o.cpp:187 612 {*jcc_1}
     (nil)
 -> 390)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 226 227 228 229 230 231 232 233 234 235 236 237 542 543 544 545 546
(note 371 370 372 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 372 371 373 23 (set (reg:SI 0 ax [542])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 373 372 374 23 (set (reg:DI 0 ax [orig:226 D.6131 ] [226])
        (sign_extend:DI (reg:SI 0 ax [542]))) sim2fitman_fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 374 373 375 23 (parallel [
            (set (reg:DI 1 dx [orig:227 D.6131 ] [227])
                (ashift:DI (reg:DI 0 ax [orig:226 D.6131 ] [226])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 375 374 376 23 (set (reg/f:DI 0 ax [543])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 376 375 377 23 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.6137 ] [228])
                (plus:DI (reg/f:DI 0 ax [543])
                    (reg:DI 1 dx [orig:227 D.6131 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:227 D.6131 ] [227]))
        (nil)))
(insn 377 376 378 23 (set (reg/f:DI 0 ax [orig:229 D.6139 ] [229])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:228 D.6137 ] [228]) [0 _230->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 378 377 379 23 (set (reg:SI 1 dx [544])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 379 378 380 23 (set (reg:DI 1 dx [orig:230 D.6131 ] [230])
        (sign_extend:DI (reg:SI 1 dx [544]))) sim2fitman_fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 380 379 381 23 (parallel [
            (set (reg:DI 1 dx [orig:231 D.6131 ] [231])
                (ashift:DI (reg:DI 1 dx [orig:230 D.6131 ] [230])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 381 380 382 23 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.6139 ] [232])
                (plus:DI (reg/f:DI 0 ax [orig:229 D.6139 ] [229])
                    (reg:DI 1 dx [orig:231 D.6131 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 218 {*adddi_1}
     (nil))
(insn 382 381 383 23 (set (reg:SI 1 dx [545])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 383 382 384 23 (set (reg:DI 1 dx [orig:233 D.6131 ] [233])
        (sign_extend:DI (reg:SI 1 dx [545]))) sim2fitman_fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 384 383 385 23 (parallel [
            (set (reg:DI 2 cx [orig:234 D.6131 ] [234])
                (ashift:DI (reg:DI 1 dx [orig:233 D.6131 ] [233])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 512 {*ashldi3_1}
     (nil))
(insn 385 384 386 23 (set (reg/f:DI 1 dx [546])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 386 385 387 23 (parallel [
            (set (reg/f:DI 1 dx [orig:235 D.6145 ] [235])
                (plus:DI (reg/f:DI 1 dx [546])
                    (reg:DI 2 cx [orig:234 D.6131 ] [234])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 temp_double+0 S8 A64])
            (reg:DI 2 cx [orig:234 D.6131 ] [234]))
        (nil)))
(insn 387 386 388 23 (set (reg:DF 21 xmm0 [orig:236 D.6146 ] [236])
        (mem:DF (reg/f:DI 1 dx [orig:235 D.6145 ] [235]) [0 *_237+0 S8 A64])) sim2fitman_fmtext_o.cpp:190 128 {*movdf_internal}
     (nil))
(insn 388 387 389 23 (set (reg:SF 21 xmm0 [orig:237 D.6147 ] [237])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:236 D.6146 ] [236]))) sim2fitman_fmtext_o.cpp:190 157 {*truncdfsf_fast_sse}
     (nil))
(insn 389 388 390 23 (set (mem:SF (reg/f:DI 0 ax [orig:232 D.6139 ] [232]) [0 *_234+0 S4 A32])
        (reg:SF 21 xmm0 [orig:237 D.6147 ] [237])) sim2fitman_fmtext_o.cpp:190 129 {*movsf_internal}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 390 389 391 24 13 "" [1 uses])
(note 391 390 392 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 392 391 393 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:202 7 {*cmpsi_1}
     (nil))
(jump_insn 393 392 394 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 413)
            (pc))) sim2fitman_fmtext_o.cpp:202 612 {*jcc_1}
     (nil)
 -> 413)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 239 240 241 242 243 244 245 246 247 248 249 547 548 549 550 551
(note 394 393 395 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 395 394 396 25 (set (reg:SI 0 ax [547])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:205 90 {*movsi_internal}
     (nil))
(insn 396 395 397 25 (set (reg:DI 0 ax [orig:238 D.6131 ] [238])
        (sign_extend:DI (reg:SI 0 ax [547]))) sim2fitman_fmtext_o.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 397 396 398 25 (parallel [
            (set (reg:DI 1 dx [orig:239 D.6131 ] [239])
                (ashift:DI (reg:DI 0 ax [orig:238 D.6131 ] [238])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 512 {*ashldi3_1}
     (nil))
(insn 398 397 399 25 (set (reg/f:DI 0 ax [548])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:205 89 {*movdi_internal}
     (nil))
(insn 399 398 400 25 (parallel [
            (set (reg/f:DI 0 ax [orig:240 D.6137 ] [240])
                (plus:DI (reg/f:DI 0 ax [548])
                    (reg:DI 1 dx [orig:239 D.6131 ] [239])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:239 D.6131 ] [239]))
        (nil)))
(insn 400 399 401 25 (set (reg/f:DI 0 ax [orig:241 D.6139 ] [241])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:240 D.6137 ] [240]) [0 _243->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:205 89 {*movdi_internal}
     (nil))
(insn 401 400 402 25 (set (reg:SI 1 dx [549])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:205 90 {*movsi_internal}
     (nil))
(insn 402 401 403 25 (set (reg:DI 1 dx [orig:242 D.6131 ] [242])
        (sign_extend:DI (reg:SI 1 dx [549]))) sim2fitman_fmtext_o.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 403 402 404 25 (parallel [
            (set (reg:DI 1 dx [orig:243 D.6131 ] [243])
                (ashift:DI (reg:DI 1 dx [orig:242 D.6131 ] [242])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 512 {*ashldi3_1}
     (nil))
(insn 404 403 405 25 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.6139 ] [244])
                (plus:DI (reg/f:DI 0 ax [orig:241 D.6139 ] [241])
                    (reg:DI 1 dx [orig:243 D.6131 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 218 {*adddi_1}
     (nil))
(insn 405 404 406 25 (set (reg:SI 1 dx [550])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:205 90 {*movsi_internal}
     (nil))
(insn 406 405 407 25 (set (reg:DI 1 dx [orig:245 D.6131 ] [245])
        (sign_extend:DI (reg:SI 1 dx [550]))) sim2fitman_fmtext_o.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 407 406 408 25 (parallel [
            (set (reg:DI 2 cx [orig:246 D.6131 ] [246])
                (ashift:DI (reg:DI 1 dx [orig:245 D.6131 ] [245])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 512 {*ashldi3_1}
     (nil))
(insn 408 407 409 25 (set (reg/f:DI 1 dx [551])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 temp_double2+0 S8 A64])) sim2fitman_fmtext_o.cpp:205 89 {*movdi_internal}
     (nil))
(insn 409 408 410 25 (parallel [
            (set (reg/f:DI 1 dx [orig:247 D.6145 ] [247])
                (plus:DI (reg/f:DI 1 dx [551])
                    (reg:DI 2 cx [orig:246 D.6131 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 temp_double2+0 S8 A64])
            (reg:DI 2 cx [orig:246 D.6131 ] [246]))
        (nil)))
(insn 410 409 411 25 (set (reg:DF 21 xmm0 [orig:248 D.6146 ] [248])
        (mem:DF (reg/f:DI 1 dx [orig:247 D.6145 ] [247]) [0 *_250+0 S8 A64])) sim2fitman_fmtext_o.cpp:205 128 {*movdf_internal}
     (nil))
(insn 411 410 412 25 (set (reg:SF 21 xmm0 [orig:249 D.6147 ] [249])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:248 D.6146 ] [248]))) sim2fitman_fmtext_o.cpp:205 157 {*truncdfsf_fast_sse}
     (nil))
(insn 412 411 413 25 (set (mem:SF (reg/f:DI 0 ax [orig:244 D.6139 ] [244]) [0 *_247+0 S4 A32])
        (reg:SF 21 xmm0 [orig:249 D.6147 ] [249])) sim2fitman_fmtext_o.cpp:205 129 {*movsf_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 413 412 414 26 14 "" [1 uses])
(note 414 413 415 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 415 414 829 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:185 217 {*addsi_1}
     (nil))
(jump_insn 829 415 830 26 (set (pc)
        (label_ref 416)) sim2fitman_fmtext_o.cpp:185 654 {jump}
     (nil)
 -> 416)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 830 829 419)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 552 553 554 555 556 557 558 559 560 561 562 563 564
(code_label 419 830 420 27 8 "" [1 uses])
(note 420 419 421 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 421 420 422 27 (set (reg:SI 0 ax [552])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:233 90 {*movsi_internal}
     (nil))
(insn 422 421 423 27 (set (reg:DI 0 ax [orig:251 D.6131 ] [251])
        (sign_extend:DI (reg:SI 0 ax [552]))) sim2fitman_fmtext_o.cpp:233 142 {*extendsidi2_rex64}
     (nil))
(insn 423 422 424 27 (parallel [
            (set (reg:DI 1 dx [orig:252 D.6131 ] [252])
                (ashift:DI (reg:DI 0 ax [orig:251 D.6131 ] [251])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 512 {*ashldi3_1}
     (nil))
(insn 424 423 425 27 (set (reg/f:DI 0 ax [553])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 425 424 426 27 (parallel [
            (set (reg/f:DI 0 ax [orig:253 D.6142 ] [253])
                (plus:DI (reg/f:DI 0 ax [553])
                    (reg:DI 1 dx [orig:252 D.6131 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:252 D.6131 ] [252]))
        (nil)))
(insn 426 425 427 27 (set (reg/f:DI 1 dx [orig:254 D.6143 ] [254])
        (mem/f:DI (reg/f:DI 0 ax [orig:253 D.6142 ] [253]) [0 *_260+0 S8 A64])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 427 426 428 27 (set (reg:SI 0 ax [554])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:233 90 {*movsi_internal}
     (nil))
(insn 428 427 884 27 (set (reg:DI 0 ax [orig:255 D.6131 ] [255])
        (sign_extend:DI (reg:SI 0 ax [554]))) sim2fitman_fmtext_o.cpp:233 142 {*extendsidi2_rex64}
     (nil))
(insn 884 428 429 27 (set (reg:DI 0 ax [orig:256 D.6131 ] [256])
        (reg:DI 0 ax [orig:255 D.6131 ] [255])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 429 884 885 27 (parallel [
            (set (reg:DI 0 ax [orig:256 D.6131 ] [256])
                (ashift:DI (reg:DI 0 ax [orig:256 D.6131 ] [256])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 512 {*ashldi3_1}
     (nil))
(insn 885 429 430 27 (set (reg:DI 2 cx [orig:256 D.6131 ] [256])
        (reg:DI 0 ax [orig:256 D.6131 ] [256])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 430 885 431 27 (set (reg/f:DI 0 ax [555])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 431 430 432 27 (parallel [
            (set (reg/f:DI 0 ax [orig:257 D.6133 ] [257])
                (plus:DI (reg/f:DI 0 ax [555])
                    (reg:DI 2 cx [orig:256 D.6131 ] [256])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:256 D.6131 ] [256]))
        (nil)))
(insn 432 431 433 27 (set (reg:DI 0 ax [orig:258 D.6134 ] [258])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:257 D.6133 ] [257])
                (const_int 16 [0x10])) [0 _264->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 433 432 434 27 (parallel [
            (set (reg:DI 0 ax [orig:259 D.6134 ] [259])
                (ashift:DI (reg:DI 0 ax [orig:258 D.6134 ] [258])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 512 {*ashldi3_1}
     (nil))
(insn 434 433 435 27 (set (reg:DI 5 di [orig:260 D.6131 ] [260])
        (reg:DI 0 ax [orig:259 D.6134 ] [259])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 435 434 436 27 (set (reg:SI 0 ax [556])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:232 90 {*movsi_internal}
     (nil))
(insn 436 435 886 27 (set (reg:DI 0 ax [orig:261 D.6131 ] [261])
        (sign_extend:DI (reg:SI 0 ax [556]))) sim2fitman_fmtext_o.cpp:232 142 {*extendsidi2_rex64}
     (nil))
(insn 886 436 437 27 (set (reg:DI 0 ax [orig:262 D.6131 ] [262])
        (reg:DI 0 ax [orig:261 D.6131 ] [261])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 437 886 887 27 (parallel [
            (set (reg:DI 0 ax [orig:262 D.6131 ] [262])
                (ashift:DI (reg:DI 0 ax [orig:262 D.6131 ] [262])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 512 {*ashldi3_1}
     (nil))
(insn 887 437 438 27 (set (reg:DI 2 cx [orig:262 D.6131 ] [262])
        (reg:DI 0 ax [orig:262 D.6131 ] [262])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 438 887 439 27 (set (reg/f:DI 0 ax [557])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 439 438 440 27 (parallel [
            (set (reg/f:DI 0 ax [orig:263 D.6133 ] [263])
                (plus:DI (reg/f:DI 0 ax [557])
                    (reg:DI 2 cx [orig:262 D.6131 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:262 D.6131 ] [262]))
        (nil)))
(insn 440 439 888 27 (set (reg:DI 0 ax [orig:264 D.6134 ] [264])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:263 D.6133 ] [263])
                (const_int 24 [0x18])) [0 _270->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 888 440 441 27 (set (reg:DI 2 cx [558])
        (reg:DI 0 ax [orig:264 D.6134 ] [264])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 441 888 442 27 (parallel [
            (set (reg:DI 2 cx [558])
                (lshiftrt:DI (reg:DI 2 cx [558])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 546 {*lshrdi3_1}
     (nil))
(insn 442 441 443 27 (parallel [
            (set (reg:DI 0 ax [559])
                (plus:DI (reg:DI 0 ax [orig:264 D.6134 ] [264])
                    (reg:DI 2 cx [558])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 218 {*adddi_1}
     (nil))
(insn 443 442 444 27 (parallel [
            (set (reg:DI 0 ax [560])
                (ashiftrt:DI (reg:DI 0 ax [559])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 547 {*ashrdi3_1}
     (nil))
(insn 444 443 445 27 (set (reg:DI 0 ax [orig:265 D.6134 ] [265])
        (reg:DI 0 ax [560])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 445 444 446 27 (set (reg:DI 4 si [orig:266 D.6131 ] [266])
        (reg:DI 0 ax [orig:265 D.6134 ] [265])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 446 445 447 27 (set (reg:SI 0 ax [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:232 90 {*movsi_internal}
     (nil))
(insn 447 446 448 27 (set (reg:DI 0 ax [orig:267 D.6131 ] [267])
        (sign_extend:DI (reg:SI 0 ax [561]))) sim2fitman_fmtext_o.cpp:232 142 {*extendsidi2_rex64}
     (nil))
(insn 448 447 449 27 (parallel [
            (set (reg:DI 2 cx [orig:268 D.6131 ] [268])
                (ashift:DI (reg:DI 0 ax [orig:267 D.6131 ] [267])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 512 {*ashldi3_1}
     (nil))
(insn 449 448 450 27 (set (reg/f:DI 0 ax [562])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 450 449 451 27 (parallel [
            (set (reg/f:DI 0 ax [orig:269 D.6137 ] [269])
                (plus:DI (reg/f:DI 0 ax [562])
                    (reg:DI 2 cx [orig:268 D.6131 ] [268])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:268 D.6131 ] [268]))
        (nil)))
(insn 451 450 452 27 (set (reg/f:DI 0 ax [orig:270 D.6139 ] [270])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:269 D.6137 ] [269]) [0 _276->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 452 451 453 27 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:254 D.6143 ] [254])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 453 452 455 27 (set (reg:DI 1 dx)
        (reg:DI 5 di [orig:260 D.6131 ] [260])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 455 453 456 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:270 D.6139 ] [270])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(call_insn 456 455 457 27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7fd290173438 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:232 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 457 456 458 27 (set (reg:DI 2 cx [orig:271 D.6131 ] [271])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 458 457 459 27 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:234 90 {*movsi_internal}
     (nil))
(insn 459 458 890 27 (set (reg:DI 0 ax [orig:272 D.6131 ] [272])
        (sign_extend:DI (reg:SI 0 ax [563]))) sim2fitman_fmtext_o.cpp:234 142 {*extendsidi2_rex64}
     (nil))
(insn 890 459 460 27 (set (reg:DI 0 ax [orig:273 D.6131 ] [273])
        (reg:DI 0 ax [orig:272 D.6131 ] [272])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 460 890 891 27 (parallel [
            (set (reg:DI 0 ax [orig:273 D.6131 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:273 D.6131 ] [273])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:234 512 {*ashldi3_1}
     (nil))
(insn 891 460 461 27 (set (reg:DI 1 dx [orig:273 D.6131 ] [273])
        (reg:DI 0 ax [orig:273 D.6131 ] [273])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 461 891 462 27 (set (reg/f:DI 0 ax [564])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 462 461 463 27 (parallel [
            (set (reg/f:DI 0 ax [orig:274 D.6133 ] [274])
                (plus:DI (reg/f:DI 0 ax [564])
                    (reg:DI 1 dx [orig:273 D.6131 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:234 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:273 D.6131 ] [273]))
        (nil)))
(insn 463 462 464 27 (set (reg:DI 0 ax [orig:275 D.6134 ] [275])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:274 D.6133 ] [274])
                (const_int 16 [0x10])) [0 _283->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 464 463 465 27 (parallel [
            (set (reg:DI 0 ax [orig:276 D.6134 ] [276])
                (ashift:DI (reg:DI 0 ax [orig:275 D.6134 ] [275])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:234 512 {*ashldi3_1}
     (nil))
(insn 465 464 466 27 (set (reg:DI 0 ax [orig:277 D.6131 ] [277])
        (reg:DI 0 ax [orig:276 D.6134 ] [276])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 466 465 467 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 2 cx [orig:271 D.6131 ] [271])
            (reg:DI 0 ax [orig:277 D.6131 ] [277]))) sim2fitman_fmtext_o.cpp:232 8 {*cmpdi_1}
     (nil))
(insn 467 466 468 27 (set (reg:QI 0 ax [orig:278 D.6149 ] [278])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:232 607 {*setcc_qi}
     (nil))
(insn 468 467 469 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:278 D.6149 ] [278])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:232 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 469 468 470 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 479)
            (pc))) sim2fitman_fmtext_o.cpp:232 612 {*jcc_1}
     (nil)
 -> 479)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 279 565 566 567 568
(note 470 469 471 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 471 470 472 28 (set (reg:SI 0 ax [566])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:235 90 {*movsi_internal}
     (nil))
(insn 472 471 892 28 (set (reg:DI 0 ax [565])
        (sign_extend:DI (reg:SI 0 ax [566]))) sim2fitman_fmtext_o.cpp:235 142 {*extendsidi2_rex64}
     (nil))
(insn 892 472 473 28 (set (reg:DI 0 ax [567])
        (reg:DI 0 ax [565])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(insn 473 892 893 28 (parallel [
            (set (reg:DI 0 ax [567])
                (ashift:DI (reg:DI 0 ax [567])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:235 512 {*ashldi3_1}
     (nil))
(insn 893 473 474 28 (set (reg:DI 1 dx [567])
        (reg:DI 0 ax [567])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(insn 474 893 475 28 (set (reg/f:DI 0 ax [568])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(insn 475 474 476 28 (parallel [
            (set (reg/f:DI 0 ax [orig:279 D.6148 ] [279])
                (plus:DI (reg/f:DI 0 ax [568])
                    (reg:DI 1 dx [567])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:235 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 file+0 S8 A64])
            (reg:DI 1 dx [567]))
        (nil)))
(insn 476 475 477 28 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:279 D.6148 ] [279])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(insn 477 476 478 28 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(call_insn 478 477 479 28 (call (mem:QI (symbol_ref:DI ("_Z7exit_06PP8_IO_FILEPc") [flags 0x41]  <function_decl 0x7fd2902a5ca8 exit_06>) [0 exit_06 S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:235 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              27
;;              28 (FALLTHRU)
;;              19 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 479 478 480 29 12 "" [3 uses])
(note 480 479 481 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 481 480 482 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 48 [0x30])) [0 swap_bytes+0 S4 A64])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:240 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 482 481 483 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 589)
            (pc))) sim2fitman_fmtext_o.cpp:240 612 {*jcc_1}
     (nil)
 -> 589)
;;  succ:       30 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 483 482 484 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 484 483 586 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:241 90 {*movsi_internal}
     (nil))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;;              37 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 280 281 282 283 284 285 569 570 571
(code_label 586 484 485 31 20 "" [1 uses])
(note 485 586 486 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 486 485 487 31 (set (reg:SI 0 ax [569])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:241 90 {*movsi_internal}
     (nil))
(insn 487 486 488 31 (set (reg:DI 0 ax [orig:280 D.6134 ] [280])
        (sign_extend:DI (reg:SI 0 ax [569]))) sim2fitman_fmtext_o.cpp:241 142 {*extendsidi2_rex64}
     (nil))
(insn 488 487 489 31 (set (reg:SI 1 dx [570])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:241 90 {*movsi_internal}
     (nil))
(insn 489 488 894 31 (set (reg:DI 1 dx [orig:281 D.6131 ] [281])
        (sign_extend:DI (reg:SI 1 dx [570]))) sim2fitman_fmtext_o.cpp:241 142 {*extendsidi2_rex64}
     (nil))
(insn 894 489 490 31 (set (reg:DI 2 cx [orig:282 D.6131 ] [282])
        (reg:DI 1 dx [orig:281 D.6131 ] [281])) sim2fitman_fmtext_o.cpp:241 89 {*movdi_internal}
     (nil))
(insn 490 894 491 31 (parallel [
            (set (reg:DI 2 cx [orig:282 D.6131 ] [282])
                (ashift:DI (reg:DI 2 cx [orig:282 D.6131 ] [282])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:241 512 {*ashldi3_1}
     (nil))
(insn 491 490 492 31 (set (reg/f:DI 1 dx [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:241 89 {*movdi_internal}
     (nil))
(insn 492 491 493 31 (parallel [
            (set (reg/f:DI 1 dx [orig:283 D.6133 ] [283])
                (plus:DI (reg/f:DI 1 dx [571])
                    (reg:DI 2 cx [orig:282 D.6131 ] [282])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:241 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:282 D.6131 ] [282]))
        (nil)))
(insn 493 492 494 31 (set (reg:DI 1 dx [orig:284 D.6134 ] [284])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:283 D.6133 ] [283])
                (const_int 16 [0x10])) [0 _295->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:241 89 {*movdi_internal}
     (nil))
(insn 494 493 495 31 (parallel [
            (set (reg:DI 1 dx [orig:285 D.6134 ] [285])
                (ashift:DI (reg:DI 1 dx [orig:284 D.6134 ] [284])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:241 512 {*ashldi3_1}
     (nil))
(insn 495 494 496 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:280 D.6134 ] [280])
            (reg:DI 1 dx [orig:285 D.6134 ] [285]))) sim2fitman_fmtext_o.cpp:241 8 {*cmpdi_1}
     (nil))
(jump_insn 496 495 497 31 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 589)
            (pc))) sim2fitman_fmtext_o.cpp:241 612 {*jcc_1}
     (nil)
 -> 589)
;;  succ:       38
;;              32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 286 287 288 289 290 291 572 573
(note 497 496 498 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 498 497 499 32 (set (reg:SI 0 ax [572])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 499 498 896 32 (set (reg:DI 0 ax [orig:286 D.6131 ] [286])
        (sign_extend:DI (reg:SI 0 ax [572]))) sim2fitman_fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 896 499 500 32 (set (reg:DI 0 ax [orig:287 D.6131 ] [287])
        (reg:DI 0 ax [orig:286 D.6131 ] [286])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 500 896 897 32 (parallel [
            (set (reg:DI 0 ax [orig:287 D.6131 ] [287])
                (ashift:DI (reg:DI 0 ax [orig:287 D.6131 ] [287])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:242 512 {*ashldi3_1}
     (nil))
(insn 897 500 501 32 (set (reg:DI 1 dx [orig:287 D.6131 ] [287])
        (reg:DI 0 ax [orig:287 D.6131 ] [287])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 501 897 502 32 (set (reg/f:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 502 501 503 32 (parallel [
            (set (reg/f:DI 0 ax [orig:288 D.6133 ] [288])
                (plus:DI (reg/f:DI 0 ax [573])
                    (reg:DI 1 dx [orig:287 D.6131 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:242 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:287 D.6131 ] [287]))
        (nil)))
(insn 503 502 504 32 (set (reg:DI 0 ax [orig:289 D.6134 ] [289])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:288 D.6133 ] [288])
                (const_int 24 [0x18])) [0 _300->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 504 503 505 32 (set (reg:DI 0 ax [orig:290 D.6144 ] [290])
        (reg:DI 0 ax [orig:289 D.6134 ] [289])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 505 504 506 32 (parallel [
            (set (reg:DI 0 ax [orig:291 D.6144 ] [291])
                (plus:DI (reg:DI 0 ax [orig:290 D.6144 ] [290])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:242 218 {*adddi_1}
     (nil))
(insn 506 505 507 32 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:291 D.6144 ] [291])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:242 8 {*cmpdi_1}
     (nil))
(jump_insn 507 506 508 32 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 525)
            (pc))) sim2fitman_fmtext_o.cpp:242 612 {*jcc_1}
     (nil)
 -> 525)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 292 293 294 295 296 297 298 299 574 575 576
(note 508 507 509 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 509 508 510 33 (set (reg:SI 2 cx [orig:292 D.6130 ] [292])
        (const_int 2 [0x2])) sim2fitman_fmtext_o.cpp:243 90 {*movsi_internal}
     (nil))
(insn 510 509 511 33 (set (reg:SI 0 ax [574])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:243 90 {*movsi_internal}
     (nil))
(insn 511 510 512 33 (set (reg:DI 0 ax [orig:293 D.6131 ] [293])
        (sign_extend:DI (reg:SI 0 ax [574]))) sim2fitman_fmtext_o.cpp:243 142 {*extendsidi2_rex64}
     (nil))
(insn 512 511 513 33 (parallel [
            (set (reg:DI 1 dx [orig:294 D.6131 ] [294])
                (ashift:DI (reg:DI 0 ax [orig:293 D.6131 ] [293])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:243 512 {*ashldi3_1}
     (nil))
(insn 513 512 514 33 (set (reg/f:DI 0 ax [575])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:243 89 {*movdi_internal}
     (nil))
(insn 514 513 515 33 (parallel [
            (set (reg/f:DI 0 ax [orig:295 D.6137 ] [295])
                (plus:DI (reg/f:DI 0 ax [575])
                    (reg:DI 1 dx [orig:294 D.6131 ] [294])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:243 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:294 D.6131 ] [294]))
        (nil)))
(insn 515 514 516 33 (set (reg/f:DI 0 ax [orig:296 D.6150 ] [296])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:295 D.6137 ] [295]) [0 _307->sh+0 S8 A64])) sim2fitman_fmtext_o.cpp:243 89 {*movdi_internal}
     (nil))
(insn 516 515 517 33 (set (reg:SI 1 dx [576])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:243 90 {*movsi_internal}
     (nil))
(insn 517 516 518 33 (set (reg:DI 1 dx [orig:297 D.6131 ] [297])
        (sign_extend:DI (reg:SI 1 dx [576]))) sim2fitman_fmtext_o.cpp:243 142 {*extendsidi2_rex64}
     (nil))
(insn 518 517 519 33 (parallel [
            (set (reg:DI 1 dx [orig:298 D.6131 ] [298])
                (ashift:DI (reg:DI 1 dx [orig:297 D.6131 ] [297])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:243 512 {*ashldi3_1}
     (nil))
(insn 519 518 520 33 (parallel [
            (set (reg/f:DI 0 ax [orig:299 D.6151 ] [299])
                (plus:DI (reg/f:DI 0 ax [orig:296 D.6150 ] [296])
                    (reg:DI 1 dx [orig:298 D.6131 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:243 218 {*adddi_1}
     (nil))
(insn 520 519 521 33 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:292 D.6130 ] [292])) sim2fitman_fmtext_o.cpp:243 90 {*movsi_internal}
     (nil))
(insn 521 520 522 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:299 D.6151 ] [299])) sim2fitman_fmtext_o.cpp:243 89 {*movdi_internal}
     (nil))
(call_insn 522 521 831 33 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7fd29029de58 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:243 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 831 522 832 33 (set (pc)
        (label_ref 583)) 654 {jump}
     (nil)
 -> 583)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 832 831 525)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 300 301 302 303 304 305 577 578
(code_label 525 832 526 34 17 "" [1 uses])
(note 526 525 527 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 528 34 (set (reg:SI 0 ax [577])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:244 90 {*movsi_internal}
     (nil))
(insn 528 527 898 34 (set (reg:DI 0 ax [orig:300 D.6131 ] [300])
        (sign_extend:DI (reg:SI 0 ax [577]))) sim2fitman_fmtext_o.cpp:244 142 {*extendsidi2_rex64}
     (nil))
(insn 898 528 529 34 (set (reg:DI 0 ax [orig:301 D.6131 ] [301])
        (reg:DI 0 ax [orig:300 D.6131 ] [300])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 529 898 899 34 (parallel [
            (set (reg:DI 0 ax [orig:301 D.6131 ] [301])
                (ashift:DI (reg:DI 0 ax [orig:301 D.6131 ] [301])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:244 512 {*ashldi3_1}
     (nil))
(insn 899 529 530 34 (set (reg:DI 1 dx [orig:301 D.6131 ] [301])
        (reg:DI 0 ax [orig:301 D.6131 ] [301])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 530 899 531 34 (set (reg/f:DI 0 ax [578])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 531 530 532 34 (parallel [
            (set (reg/f:DI 0 ax [orig:302 D.6133 ] [302])
                (plus:DI (reg/f:DI 0 ax [578])
                    (reg:DI 1 dx [orig:301 D.6131 ] [301])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:244 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:301 D.6131 ] [301]))
        (nil)))
(insn 532 531 533 34 (set (reg:DI 0 ax [orig:303 D.6134 ] [303])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:302 D.6133 ] [302])
                (const_int 24 [0x18])) [0 _315->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 533 532 534 34 (set (reg:DI 0 ax [orig:304 D.6144 ] [304])
        (reg:DI 0 ax [orig:303 D.6134 ] [303])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 534 533 535 34 (parallel [
            (set (reg:DI 0 ax [orig:305 D.6144 ] [305])
                (plus:DI (reg:DI 0 ax [orig:304 D.6144 ] [304])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:244 218 {*adddi_1}
     (nil))
(insn 535 534 536 34 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:305 D.6144 ] [305])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:244 8 {*cmpdi_1}
     (nil))
(jump_insn 536 535 537 34 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 567)
            (pc))) sim2fitman_fmtext_o.cpp:244 612 {*jcc_1}
     (nil)
 -> 567)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 579 580 581 582 583 584 585
(note 537 536 538 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 538 537 539 35 (set (reg:SI 2 cx [orig:306 D.6130 ] [306])
        (const_int 8 [0x8])) sim2fitman_fmtext_o.cpp:245 90 {*movsi_internal}
     (nil))
(insn 539 538 540 35 (set (reg:SI 0 ax [579])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:245 90 {*movsi_internal}
     (nil))
(insn 540 539 541 35 (set (reg:DI 0 ax [orig:307 D.6131 ] [307])
        (sign_extend:DI (reg:SI 0 ax [579]))) sim2fitman_fmtext_o.cpp:245 142 {*extendsidi2_rex64}
     (nil))
(insn 541 540 542 35 (parallel [
            (set (reg:DI 1 dx [orig:308 D.6131 ] [308])
                (ashift:DI (reg:DI 0 ax [orig:307 D.6131 ] [307])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:245 512 {*ashldi3_1}
     (nil))
(insn 542 541 543 35 (set (reg/f:DI 0 ax [580])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:245 89 {*movdi_internal}
     (nil))
(insn 543 542 544 35 (parallel [
            (set (reg/f:DI 0 ax [orig:309 D.6151 ] [309])
                (plus:DI (reg/f:DI 0 ax [580])
                    (reg:DI 1 dx [orig:308 D.6131 ] [308])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:245 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 temp_double+0 S8 A64])
            (reg:DI 1 dx [orig:308 D.6131 ] [308]))
        (nil)))
(insn 544 543 545 35 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:306 D.6130 ] [306])) sim2fitman_fmtext_o.cpp:245 90 {*movsi_internal}
     (nil))
(insn 545 544 546 35 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:309 D.6151 ] [309])) sim2fitman_fmtext_o.cpp:245 89 {*movdi_internal}
     (nil))
(call_insn 546 545 547 35 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7fd29029de58 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:245 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 547 546 548 35 (set (reg:SI 0 ax [581])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:246 90 {*movsi_internal}
     (nil))
(insn 548 547 549 35 (set (reg:DI 0 ax [orig:310 D.6131 ] [310])
        (sign_extend:DI (reg:SI 0 ax [581]))) sim2fitman_fmtext_o.cpp:246 142 {*extendsidi2_rex64}
     (nil))
(insn 549 548 550 35 (parallel [
            (set (reg:DI 1 dx [orig:311 D.6131 ] [311])
                (ashift:DI (reg:DI 0 ax [orig:310 D.6131 ] [310])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 512 {*ashldi3_1}
     (nil))
(insn 550 549 551 35 (set (reg/f:DI 0 ax [582])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:246 89 {*movdi_internal}
     (nil))
(insn 551 550 552 35 (parallel [
            (set (reg/f:DI 0 ax [orig:312 D.6137 ] [312])
                (plus:DI (reg/f:DI 0 ax [582])
                    (reg:DI 1 dx [orig:311 D.6131 ] [311])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:311 D.6131 ] [311]))
        (nil)))
(insn 552 551 553 35 (set (reg/f:DI 0 ax [orig:313 D.6139 ] [313])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:312 D.6137 ] [312]) [0 _326->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:246 89 {*movdi_internal}
     (nil))
(insn 553 552 554 35 (set (reg:SI 1 dx [583])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:246 90 {*movsi_internal}
     (nil))
(insn 554 553 555 35 (set (reg:DI 1 dx [orig:314 D.6131 ] [314])
        (sign_extend:DI (reg:SI 1 dx [583]))) sim2fitman_fmtext_o.cpp:246 142 {*extendsidi2_rex64}
     (nil))
(insn 555 554 556 35 (parallel [
            (set (reg:DI 1 dx [orig:315 D.6131 ] [315])
                (ashift:DI (reg:DI 1 dx [orig:314 D.6131 ] [314])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 512 {*ashldi3_1}
     (nil))
(insn 556 555 557 35 (parallel [
            (set (reg/f:DI 0 ax [orig:316 D.6139 ] [316])
                (plus:DI (reg/f:DI 0 ax [orig:313 D.6139 ] [313])
                    (reg:DI 1 dx [orig:315 D.6131 ] [315])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 218 {*adddi_1}
     (nil))
(insn 557 556 558 35 (set (reg:SI 1 dx [584])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:246 90 {*movsi_internal}
     (nil))
(insn 558 557 559 35 (set (reg:DI 1 dx [orig:317 D.6131 ] [317])
        (sign_extend:DI (reg:SI 1 dx [584]))) sim2fitman_fmtext_o.cpp:246 142 {*extendsidi2_rex64}
     (nil))
(insn 559 558 560 35 (parallel [
            (set (reg:DI 2 cx [orig:318 D.6131 ] [318])
                (ashift:DI (reg:DI 1 dx [orig:317 D.6131 ] [317])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 512 {*ashldi3_1}
     (nil))
(insn 560 559 561 35 (set (reg/f:DI 1 dx [585])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:246 89 {*movdi_internal}
     (nil))
(insn 561 560 562 35 (parallel [
            (set (reg/f:DI 1 dx [orig:319 D.6145 ] [319])
                (plus:DI (reg/f:DI 1 dx [585])
                    (reg:DI 2 cx [orig:318 D.6131 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 temp_double+0 S8 A64])
            (reg:DI 2 cx [orig:318 D.6131 ] [318]))
        (nil)))
(insn 562 561 563 35 (set (reg:DF 21 xmm0 [orig:320 D.6146 ] [320])
        (mem:DF (reg/f:DI 1 dx [orig:319 D.6145 ] [319]) [0 *_333+0 S8 A64])) sim2fitman_fmtext_o.cpp:246 128 {*movdf_internal}
     (nil))
(insn 563 562 564 35 (set (reg:SF 21 xmm0 [orig:321 D.6147 ] [321])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:320 D.6146 ] [320]))) sim2fitman_fmtext_o.cpp:246 157 {*truncdfsf_fast_sse}
     (nil))
(insn 564 563 833 35 (set (mem:SF (reg/f:DI 0 ax [orig:316 D.6139 ] [316]) [0 *_330+0 S4 A32])
        (reg:SF 21 xmm0 [orig:321 D.6147 ] [321])) sim2fitman_fmtext_o.cpp:246 129 {*movsf_internal}
     (nil))
(jump_insn 833 564 834 35 (set (pc)
        (label_ref 583)) 654 {jump}
     (nil)
 -> 583)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 834 833 567)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 322 323 324 325 326 327 328 329 586 587 588
(code_label 567 834 568 36 19 "" [1 uses])
(note 568 567 569 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 569 568 570 36 (set (reg:SI 2 cx [orig:322 D.6130 ] [322])
        (const_int 8 [0x8])) sim2fitman_fmtext_o.cpp:248 90 {*movsi_internal}
     (nil))
(insn 570 569 571 36 (set (reg:SI 0 ax [586])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:248 90 {*movsi_internal}
     (nil))
(insn 571 570 572 36 (set (reg:DI 0 ax [orig:323 D.6131 ] [323])
        (sign_extend:DI (reg:SI 0 ax [586]))) sim2fitman_fmtext_o.cpp:248 142 {*extendsidi2_rex64}
     (nil))
(insn 572 571 573 36 (parallel [
            (set (reg:DI 1 dx [orig:324 D.6131 ] [324])
                (ashift:DI (reg:DI 0 ax [orig:323 D.6131 ] [323])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:248 512 {*ashldi3_1}
     (nil))
(insn 573 572 574 36 (set (reg/f:DI 0 ax [587])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:248 89 {*movdi_internal}
     (nil))
(insn 574 573 575 36 (parallel [
            (set (reg/f:DI 0 ax [orig:325 D.6137 ] [325])
                (plus:DI (reg/f:DI 0 ax [587])
                    (reg:DI 1 dx [orig:324 D.6131 ] [324])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:248 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:324 D.6131 ] [324]))
        (nil)))
(insn 575 574 576 36 (set (reg/f:DI 0 ax [orig:326 D.6152 ] [326])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:325 D.6137 ] [325]) [0 _340->lo+0 S8 A64])) sim2fitman_fmtext_o.cpp:248 89 {*movdi_internal}
     (nil))
(insn 576 575 577 36 (set (reg:SI 1 dx [588])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:248 90 {*movsi_internal}
     (nil))
(insn 577 576 578 36 (set (reg:DI 1 dx [orig:327 D.6131 ] [327])
        (sign_extend:DI (reg:SI 1 dx [588]))) sim2fitman_fmtext_o.cpp:248 142 {*extendsidi2_rex64}
     (nil))
(insn 578 577 579 36 (parallel [
            (set (reg:DI 1 dx [orig:328 D.6131 ] [328])
                (ashift:DI (reg:DI 1 dx [orig:327 D.6131 ] [327])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:248 512 {*ashldi3_1}
     (nil))
(insn 579 578 580 36 (parallel [
            (set (reg/f:DI 0 ax [orig:329 D.6151 ] [329])
                (plus:DI (reg/f:DI 0 ax [orig:326 D.6152 ] [326])
                    (reg:DI 1 dx [orig:328 D.6131 ] [328])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:248 218 {*adddi_1}
     (nil))
(insn 580 579 581 36 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:322 D.6130 ] [322])) sim2fitman_fmtext_o.cpp:248 90 {*movsi_internal}
     (nil))
(insn 581 580 582 36 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:329 D.6151 ] [329])) sim2fitman_fmtext_o.cpp:248 89 {*movdi_internal}
     (nil))
(call_insn 582 581 583 36 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7fd29029de58 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:248 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;;              33 [100.0%] 
;;              35 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 583 582 584 37 18 "" [2 uses])
(note 584 583 585 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 585 584 835 37 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:241 217 {*addsi_1}
     (nil))
(jump_insn 835 585 836 37 (set (pc)
        (label_ref 586)) sim2fitman_fmtext_o.cpp:241 654 {jump}
     (nil)
 -> 586)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 836 835 589)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29
;;              31
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 330 331 332 333 334 335 589 590
(code_label 589 836 590 38 16 "" [2 uses])
(note 590 589 591 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 591 590 592 38 (set (reg:SI 0 ax [589])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:255 90 {*movsi_internal}
     (nil))
(insn 592 591 900 38 (set (reg:DI 0 ax [orig:330 D.6131 ] [330])
        (sign_extend:DI (reg:SI 0 ax [589]))) sim2fitman_fmtext_o.cpp:255 142 {*extendsidi2_rex64}
     (nil))
(insn 900 592 593 38 (set (reg:DI 0 ax [orig:331 D.6131 ] [331])
        (reg:DI 0 ax [orig:330 D.6131 ] [330])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 593 900 901 38 (parallel [
            (set (reg:DI 0 ax [orig:331 D.6131 ] [331])
                (ashift:DI (reg:DI 0 ax [orig:331 D.6131 ] [331])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:255 512 {*ashldi3_1}
     (nil))
(insn 901 593 594 38 (set (reg:DI 1 dx [orig:331 D.6131 ] [331])
        (reg:DI 0 ax [orig:331 D.6131 ] [331])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 594 901 595 38 (set (reg/f:DI 0 ax [590])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 595 594 596 38 (parallel [
            (set (reg/f:DI 0 ax [orig:332 D.6133 ] [332])
                (plus:DI (reg/f:DI 0 ax [590])
                    (reg:DI 1 dx [orig:331 D.6131 ] [331])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:255 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:331 D.6131 ] [331]))
        (nil)))
(insn 596 595 597 38 (set (reg:DI 0 ax [orig:333 D.6134 ] [333])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:332 D.6133 ] [332])
                (const_int 24 [0x18])) [0 _349->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 597 596 598 38 (set (reg:DI 0 ax [orig:334 D.6144 ] [334])
        (reg:DI 0 ax [orig:333 D.6134 ] [333])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 598 597 599 38 (parallel [
            (set (reg:DI 0 ax [orig:335 D.6144 ] [335])
                (plus:DI (reg:DI 0 ax [orig:334 D.6144 ] [334])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:255 218 {*adddi_1}
     (nil))
(insn 599 598 600 38 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:335 D.6144 ] [335])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:255 8 {*cmpdi_1}
     (nil))
(jump_insn 600 599 601 38 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 644)
            (pc))) sim2fitman_fmtext_o.cpp:255 612 {*jcc_1}
     (nil)
 -> 644)
;;  succ:       39 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 336 337 338 339 340 341 342 591 592
(note 601 600 602 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 602 601 603 39 (set (reg:SI 0 ax [591])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 603 602 902 39 (set (reg:DI 0 ax [orig:336 D.6131 ] [336])
        (sign_extend:DI (reg:SI 0 ax [591]))) sim2fitman_fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 902 603 604 39 (set (reg:DI 0 ax [orig:337 D.6131 ] [337])
        (reg:DI 0 ax [orig:336 D.6131 ] [336])) sim2fitman_fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 604 902 903 39 (parallel [
            (set (reg:DI 0 ax [orig:337 D.6131 ] [337])
                (ashift:DI (reg:DI 0 ax [orig:337 D.6131 ] [337])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 903 604 605 39 (set (reg:DI 1 dx [orig:337 D.6131 ] [337])
        (reg:DI 0 ax [orig:337 D.6131 ] [337])) sim2fitman_fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 605 903 606 39 (set (reg/f:DI 0 ax [592])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 606 605 607 39 (parallel [
            (set (reg/f:DI 0 ax [orig:338 D.6133 ] [338])
                (plus:DI (reg/f:DI 0 ax [592])
                    (reg:DI 1 dx [orig:337 D.6131 ] [337])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:337 D.6131 ] [337]))
        (nil)))
(insn 607 606 608 39 (set (reg:DI 0 ax [orig:339 D.6134 ] [339])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:338 D.6133 ] [338])
                (const_int 16 [0x10])) [0 _355->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 608 607 609 39 (set (reg:SI 0 ax [orig:340 D.6153 ] [340])
        (reg:SI 0 ax [orig:339 D.6134 ] [339])) sim2fitman_fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 609 608 610 39 (parallel [
            (set (reg:SI 0 ax [orig:341 D.6153 ] [341])
                (ashift:SI (reg:SI 0 ax [orig:340 D.6153 ] [340])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 511 {*ashlsi3_1}
     (nil))
(insn 610 609 611 39 (parallel [
            (set (reg:SI 0 ax [orig:342 D.6153 ] [342])
                (plus:SI (reg:SI 0 ax [orig:341 D.6153 ] [341])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 217 {*addsi_1}
     (nil))
(insn 611 610 641 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (reg:SI 0 ax [orig:342 D.6153 ] [342])) sim2fitman_fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
;;  succ:       40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;;              41 [100.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 641 611 612 40 23 "" [1 uses])
(note 612 641 613 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 613 612 614 40 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:256 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 614 613 615 40 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 700)
            (pc))) sim2fitman_fmtext_o.cpp:256 612 {*jcc_1}
     (nil)
 -> 700)
;;  succ:       46
;;              41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 593 594 595 596 597 598 599
(note 615 614 616 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 616 615 617 41 (set (reg:SI 0 ax [593])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 617 616 618 41 (set (reg:DI 0 ax [orig:343 D.6131 ] [343])
        (sign_extend:DI (reg:SI 0 ax [593]))) sim2fitman_fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 618 617 619 41 (parallel [
            (set (reg:DI 1 dx [orig:344 D.6131 ] [344])
                (ashift:DI (reg:DI 0 ax [orig:343 D.6131 ] [343])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 619 618 620 41 (set (reg/f:DI 0 ax [594])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 620 619 621 41 (parallel [
            (set (reg/f:DI 0 ax [orig:345 D.6137 ] [345])
                (plus:DI (reg/f:DI 0 ax [594])
                    (reg:DI 1 dx [orig:344 D.6131 ] [344])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:344 D.6131 ] [344]))
        (nil)))
(insn 621 620 622 41 (set (reg/f:DI 0 ax [orig:346 D.6139 ] [346])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:345 D.6137 ] [345]) [0 _363->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 622 621 623 41 (set (reg:SI 1 dx [595])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 623 622 624 41 (set (reg:DI 1 dx [orig:347 D.6131 ] [347])
        (sign_extend:DI (reg:SI 1 dx [595]))) sim2fitman_fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 624 623 625 41 (parallel [
            (set (reg:DI 1 dx [orig:348 D.6131 ] [348])
                (ashift:DI (reg:DI 1 dx [orig:347 D.6131 ] [347])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 625 624 626 41 (parallel [
            (set (reg/f:DI 0 ax [orig:349 D.6139 ] [349])
                (plus:DI (reg/f:DI 0 ax [orig:346 D.6139 ] [346])
                    (reg:DI 1 dx [orig:348 D.6131 ] [348])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 218 {*adddi_1}
     (nil))
(insn 626 625 627 41 (set (reg:SI 1 dx [596])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 627 626 628 41 (set (reg:DI 1 dx [orig:350 D.6131 ] [350])
        (sign_extend:DI (reg:SI 1 dx [596]))) sim2fitman_fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 628 627 629 41 (parallel [
            (set (reg:DI 2 cx [orig:351 D.6131 ] [351])
                (ashift:DI (reg:DI 1 dx [orig:350 D.6131 ] [350])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 629 628 630 41 (set (reg/f:DI 1 dx [597])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 630 629 631 41 (parallel [
            (set (reg/f:DI 1 dx [orig:352 D.6137 ] [352])
                (plus:DI (reg/f:DI 1 dx [597])
                    (reg:DI 2 cx [orig:351 D.6131 ] [351])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:351 D.6131 ] [351]))
        (nil)))
(insn 631 630 632 41 (set (reg/f:DI 1 dx [orig:353 D.6150 ] [353])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:352 D.6137 ] [352]) [0 _370->sh+0 S8 A64])) sim2fitman_fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 632 631 633 41 (set (reg:SI 2 cx [598])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 633 632 634 41 (set (reg:DI 2 cx [orig:354 D.6131 ] [354])
        (sign_extend:DI (reg:SI 2 cx [598]))) sim2fitman_fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 634 633 635 41 (parallel [
            (set (reg:DI 2 cx [orig:355 D.6131 ] [355])
                (ashift:DI (reg:DI 2 cx [orig:354 D.6131 ] [354])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 512 {*ashldi3_1}
     (nil))
(insn 635 634 636 41 (parallel [
            (set (reg/f:DI 1 dx [orig:356 D.6150 ] [356])
                (plus:DI (reg/f:DI 1 dx [orig:353 D.6150 ] [353])
                    (reg:DI 2 cx [orig:355 D.6131 ] [355])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 218 {*adddi_1}
     (nil))
(insn 636 635 637 41 (set (reg:HI 1 dx [orig:357 D.6154 ] [357])
        (mem:HI (reg/f:DI 1 dx [orig:356 D.6150 ] [356]) [0 *_374+0 S2 A16])) sim2fitman_fmtext_o.cpp:257 92 {*movhi_internal}
     (nil))
(insn 637 636 638 41 (set (reg:SI 1 dx [599])
        (sign_extend:SI (reg:HI 1 dx [orig:357 D.6154 ] [357]))) sim2fitman_fmtext_o.cpp:257 146 {extendhisi2}
     (nil))
(insn 638 637 639 41 (set (reg:SF 21 xmm0 [orig:358 D.6147 ] [358])
        (float:SF (reg:SI 1 dx [599]))) sim2fitman_fmtext_o.cpp:257 199 {*floatsisf2_sse}
     (nil))
(insn 639 638 640 41 (set (mem:SF (reg/f:DI 0 ax [orig:349 D.6139 ] [349]) [0 *_367+0 S4 A32])
        (reg:SF 21 xmm0 [orig:358 D.6147 ] [358])) sim2fitman_fmtext_o.cpp:257 129 {*movsf_internal}
     (nil))
(insn 640 639 837 41 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 217 {*addsi_1}
     (nil))
(jump_insn 837 640 838 41 (set (pc)
        (label_ref 641)) sim2fitman_fmtext_o.cpp:256 654 {jump}
     (nil)
 -> 641)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 838 837 644)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 359 360 361 362 363 364 600 601
(code_label 644 838 645 42 21 "" [1 uses])
(note 645 644 646 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 646 645 647 42 (set (reg:SI 0 ax [600])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:264 90 {*movsi_internal}
     (nil))
(insn 647 646 904 42 (set (reg:DI 0 ax [orig:359 D.6131 ] [359])
        (sign_extend:DI (reg:SI 0 ax [600]))) sim2fitman_fmtext_o.cpp:264 142 {*extendsidi2_rex64}
     (nil))
(insn 904 647 648 42 (set (reg:DI 0 ax [orig:360 D.6131 ] [360])
        (reg:DI 0 ax [orig:359 D.6131 ] [359])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 648 904 905 42 (parallel [
            (set (reg:DI 0 ax [orig:360 D.6131 ] [360])
                (ashift:DI (reg:DI 0 ax [orig:360 D.6131 ] [360])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:264 512 {*ashldi3_1}
     (nil))
(insn 905 648 649 42 (set (reg:DI 1 dx [orig:360 D.6131 ] [360])
        (reg:DI 0 ax [orig:360 D.6131 ] [360])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 649 905 650 42 (set (reg/f:DI 0 ax [601])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 650 649 651 42 (parallel [
            (set (reg/f:DI 0 ax [orig:361 D.6133 ] [361])
                (plus:DI (reg/f:DI 0 ax [601])
                    (reg:DI 1 dx [orig:360 D.6131 ] [360])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:264 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:360 D.6131 ] [360]))
        (nil)))
(insn 651 650 652 42 (set (reg:DI 0 ax [orig:362 D.6134 ] [362])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:361 D.6133 ] [361])
                (const_int 24 [0x18])) [0 _381->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 652 651 653 42 (set (reg:DI 0 ax [orig:363 D.6144 ] [363])
        (reg:DI 0 ax [orig:362 D.6134 ] [362])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 653 652 654 42 (parallel [
            (set (reg:DI 0 ax [orig:364 D.6144 ] [364])
                (plus:DI (reg:DI 0 ax [orig:363 D.6144 ] [363])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:264 218 {*adddi_1}
     (nil))
(insn 654 653 655 42 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:364 D.6144 ] [364])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:264 8 {*cmpdi_1}
     (nil))
(jump_insn 655 654 656 42 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 700)
            (pc))) sim2fitman_fmtext_o.cpp:264 612 {*jcc_1}
     (nil)
 -> 700)
;;  succ:       43 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 656 655 657 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 657 656 697 43 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
;;  succ:       44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;;              45 [100.0%] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 365 366 367 368 369 370 602 603 604
(code_label 697 657 658 44 24 "" [1 uses])
(note 658 697 659 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 659 658 660 44 (set (reg:SI 0 ax [602])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
(insn 660 659 661 44 (set (reg:DI 0 ax [orig:365 D.6134 ] [365])
        (sign_extend:DI (reg:SI 0 ax [602]))) sim2fitman_fmtext_o.cpp:265 142 {*extendsidi2_rex64}
     (nil))
(insn 661 660 662 44 (set (reg:SI 1 dx [603])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
(insn 662 661 906 44 (set (reg:DI 1 dx [orig:366 D.6131 ] [366])
        (sign_extend:DI (reg:SI 1 dx [603]))) sim2fitman_fmtext_o.cpp:265 142 {*extendsidi2_rex64}
     (nil))
(insn 906 662 663 44 (set (reg:DI 2 cx [orig:367 D.6131 ] [367])
        (reg:DI 1 dx [orig:366 D.6131 ] [366])) sim2fitman_fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 663 906 664 44 (parallel [
            (set (reg:DI 2 cx [orig:367 D.6131 ] [367])
                (ashift:DI (reg:DI 2 cx [orig:367 D.6131 ] [367])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:265 512 {*ashldi3_1}
     (nil))
(insn 664 663 665 44 (set (reg/f:DI 1 dx [604])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 665 664 666 44 (parallel [
            (set (reg/f:DI 1 dx [orig:368 D.6133 ] [368])
                (plus:DI (reg/f:DI 1 dx [604])
                    (reg:DI 2 cx [orig:367 D.6131 ] [367])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:265 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:367 D.6131 ] [367]))
        (nil)))
(insn 666 665 667 44 (set (reg:DI 1 dx [orig:369 D.6134 ] [369])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:368 D.6133 ] [368])
                (const_int 16 [0x10])) [0 _389->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 667 666 668 44 (parallel [
            (set (reg:DI 1 dx [orig:370 D.6134 ] [370])
                (ashift:DI (reg:DI 1 dx [orig:369 D.6134 ] [369])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:265 512 {*ashldi3_1}
     (nil))
(insn 668 667 669 44 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:365 D.6134 ] [365])
            (reg:DI 1 dx [orig:370 D.6134 ] [370]))) sim2fitman_fmtext_o.cpp:265 8 {*cmpdi_1}
     (nil))
(jump_insn 669 668 670 44 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 700)
            (pc))) sim2fitman_fmtext_o.cpp:265 612 {*jcc_1}
     (nil)
 -> 700)
;;  succ:       46
;;              45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 605 606 607 608 609 610 611 612
(note 670 669 671 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 671 670 672 45 (set (reg:SI 0 ax [605])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:266 90 {*movsi_internal}
     (nil))
(insn 672 671 673 45 (set (reg:DI 0 ax [orig:371 D.6131 ] [371])
        (sign_extend:DI (reg:SI 0 ax [605]))) sim2fitman_fmtext_o.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 673 672 674 45 (parallel [
            (set (reg:DI 1 dx [orig:372 D.6131 ] [372])
                (ashift:DI (reg:DI 0 ax [orig:371 D.6131 ] [371])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:266 512 {*ashldi3_1}
     (nil))
(insn 674 673 675 45 (set (reg/f:DI 0 ax [606])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 675 674 676 45 (parallel [
            (set (reg/f:DI 0 ax [orig:373 D.6137 ] [373])
                (plus:DI (reg/f:DI 0 ax [606])
                    (reg:DI 1 dx [orig:372 D.6131 ] [372])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:266 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:372 D.6131 ] [372]))
        (nil)))
(insn 676 675 677 45 (set (reg/f:DI 0 ax [orig:374 D.6152 ] [374])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:373 D.6137 ] [373]) [0 _394->lo+0 S8 A64])) sim2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 677 676 678 45 (set (reg:SI 1 dx [607])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:266 90 {*movsi_internal}
     (nil))
(insn 678 677 679 45 (set (reg:DI 1 dx [orig:375 D.6131 ] [375])
        (sign_extend:DI (reg:SI 1 dx [607]))) sim2fitman_fmtext_o.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 679 678 680 45 (parallel [
            (set (reg:DI 1 dx [orig:376 D.6131 ] [376])
                (ashift:DI (reg:DI 1 dx [orig:375 D.6131 ] [375])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:266 512 {*ashldi3_1}
     (nil))
(insn 680 679 681 45 (parallel [
            (set (reg/f:DI 0 ax [orig:377 D.6152 ] [377])
                (plus:DI (reg/f:DI 0 ax [orig:374 D.6152 ] [374])
                    (reg:DI 1 dx [orig:376 D.6131 ] [376])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:266 218 {*adddi_1}
     (nil))
(insn 681 680 682 45 (set (reg:DI 0 ax [orig:378 D.6134 ] [378])
        (mem:DI (reg/f:DI 0 ax [orig:377 D.6152 ] [377]) [0 *_398+0 S8 A64])) sim2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 682 681 683 45 (set (reg:SF 21 xmm0 [608])
        (float:SF (reg:DI 0 ax [orig:378 D.6134 ] [378]))) sim2fitman_fmtext_o.cpp:266 200 {*floatdisf2_sse}
     (nil))
(insn 683 682 684 45 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])
        (reg:SF 21 xmm0 [608])) sim2fitman_fmtext_o.cpp:266 129 {*movsf_internal}
     (nil))
(insn 684 683 685 45 (set (reg:SI 0 ax [609])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
(insn 685 684 686 45 (set (reg:DI 0 ax [orig:379 D.6131 ] [379])
        (sign_extend:DI (reg:SI 0 ax [609]))) sim2fitman_fmtext_o.cpp:267 142 {*extendsidi2_rex64}
     (nil))
(insn 686 685 687 45 (parallel [
            (set (reg:DI 1 dx [orig:380 D.6131 ] [380])
                (ashift:DI (reg:DI 0 ax [orig:379 D.6131 ] [379])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:267 512 {*ashldi3_1}
     (nil))
(insn 687 686 688 45 (set (reg/f:DI 0 ax [610])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:267 89 {*movdi_internal}
     (nil))
(insn 688 687 689 45 (parallel [
            (set (reg/f:DI 0 ax [orig:381 D.6137 ] [381])
                (plus:DI (reg/f:DI 0 ax [610])
                    (reg:DI 1 dx [orig:380 D.6131 ] [380])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:267 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:380 D.6131 ] [380]))
        (nil)))
(insn 689 688 690 45 (set (reg/f:DI 0 ax [orig:382 D.6139 ] [382])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:381 D.6137 ] [381]) [0 _403->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:267 89 {*movdi_internal}
     (nil))
(insn 690 689 691 45 (set (reg:SI 1 dx [611])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
(insn 691 690 692 45 (set (reg:DI 1 dx [orig:383 D.6131 ] [383])
        (sign_extend:DI (reg:SI 1 dx [611]))) sim2fitman_fmtext_o.cpp:267 142 {*extendsidi2_rex64}
     (nil))
(insn 692 691 693 45 (parallel [
            (set (reg:DI 1 dx [orig:384 D.6131 ] [384])
                (ashift:DI (reg:DI 1 dx [orig:383 D.6131 ] [383])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:267 512 {*ashldi3_1}
     (nil))
(insn 693 692 694 45 (parallel [
            (set (reg/f:DI 0 ax [orig:385 D.6139 ] [385])
                (plus:DI (reg/f:DI 0 ax [orig:382 D.6139 ] [382])
                    (reg:DI 1 dx [orig:384 D.6131 ] [384])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:267 218 {*adddi_1}
     (nil))
(insn 694 693 695 45 (set (reg:SF 21 xmm0 [612])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])) sim2fitman_fmtext_o.cpp:267 129 {*movsf_internal}
     (nil))
(insn 695 694 696 45 (set (mem:SF (reg/f:DI 0 ax [orig:385 D.6139 ] [385]) [0 *_407+0 S4 A32])
        (reg:SF 21 xmm0 [612])) sim2fitman_fmtext_o.cpp:267 129 {*movsf_internal}
     (nil))
(insn 696 695 839 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:265 217 {*addsi_1}
     (nil))
(jump_insn 839 696 840 45 (set (pc)
        (label_ref 697)) sim2fitman_fmtext_o.cpp:265 654 {jump}
     (nil)
 -> 697)
;;  succ:       44 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 840 839 700)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;;              42
;;              44
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 700 840 701 46 22 "" [3 uses])
(note 701 700 702 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 702 701 788 46 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:278 90 {*movsi_internal}
     (nil))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;;              48 [100.0%] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 386 387 388 389 390 391 613 614 615
(code_label 788 702 703 47 26 "" [1 uses])
(note 703 788 704 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 704 703 705 47 (set (reg:SI 0 ax [613])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:278 90 {*movsi_internal}
     (nil))
(insn 705 704 706 47 (set (reg:DI 0 ax [orig:386 D.6134 ] [386])
        (sign_extend:DI (reg:SI 0 ax [613]))) sim2fitman_fmtext_o.cpp:278 142 {*extendsidi2_rex64}
     (nil))
(insn 706 705 707 47 (set (reg:SI 1 dx [614])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:278 90 {*movsi_internal}
     (nil))
(insn 707 706 908 47 (set (reg:DI 1 dx [orig:387 D.6131 ] [387])
        (sign_extend:DI (reg:SI 1 dx [614]))) sim2fitman_fmtext_o.cpp:278 142 {*extendsidi2_rex64}
     (nil))
(insn 908 707 708 47 (set (reg:DI 2 cx [orig:388 D.6131 ] [388])
        (reg:DI 1 dx [orig:387 D.6131 ] [387])) sim2fitman_fmtext_o.cpp:278 89 {*movdi_internal}
     (nil))
(insn 708 908 709 47 (parallel [
            (set (reg:DI 2 cx [orig:388 D.6131 ] [388])
                (ashift:DI (reg:DI 2 cx [orig:388 D.6131 ] [388])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:278 512 {*ashldi3_1}
     (nil))
(insn 709 708 710 47 (set (reg/f:DI 1 dx [615])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:278 89 {*movdi_internal}
     (nil))
(insn 710 709 711 47 (parallel [
            (set (reg/f:DI 1 dx [orig:389 D.6133 ] [389])
                (plus:DI (reg/f:DI 1 dx [615])
                    (reg:DI 2 cx [orig:388 D.6131 ] [388])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:278 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:388 D.6131 ] [388]))
        (nil)))
(insn 711 710 712 47 (set (reg:DI 1 dx [orig:390 D.6134 ] [390])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:389 D.6133 ] [389])
                (const_int 16 [0x10])) [0 _414->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:278 89 {*movdi_internal}
     (nil))
(insn 712 711 713 47 (parallel [
            (set (reg:DI 1 dx [orig:391 D.6134 ] [391])
                (ashift:DI (reg:DI 1 dx [orig:390 D.6134 ] [390])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:278 512 {*ashldi3_1}
     (nil))
(insn 713 712 714 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:386 D.6134 ] [386])
            (reg:DI 1 dx [orig:391 D.6134 ] [391]))) sim2fitman_fmtext_o.cpp:278 8 {*cmpdi_1}
     (nil))
(jump_insn 714 713 715 47 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 791)
            (pc))) sim2fitman_fmtext_o.cpp:278 612 {*jcc_1}
     (nil)
 -> 791)
;;  succ:       49
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633
(note 715 714 716 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 716 715 717 48 (set (reg:SI 0 ax [616])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 717 716 718 48 (set (reg:DI 0 ax [orig:392 D.6131 ] [392])
        (sign_extend:DI (reg:SI 0 ax [616]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 718 717 719 48 (parallel [
            (set (reg:DI 1 dx [orig:393 D.6131 ] [393])
                (ashift:DI (reg:DI 0 ax [orig:392 D.6131 ] [392])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 512 {*ashldi3_1}
     (nil))
(insn 719 718 720 48 (set (reg/f:DI 0 ax [617])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 720 719 721 48 (parallel [
            (set (reg/f:DI 0 ax [orig:394 D.6138 ] [394])
                (plus:DI (reg/f:DI 0 ax [617])
                    (reg:DI 1 dx [orig:393 D.6131 ] [393])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:393 D.6131 ] [393]))
        (nil)))
(insn 721 720 722 48 (set (reg/f:DI 0 ax [orig:395 D.6139 ] [395])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:394 D.6138 ] [394]) [0 _419->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 722 721 723 48 (set (reg:SI 1 dx [618])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 723 722 724 48 (set (reg:DI 1 dx [orig:396 D.6131 ] [396])
        (sign_extend:DI (reg:SI 1 dx [618]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 724 723 725 48 (parallel [
            (set (reg:DI 1 dx [orig:397 D.6131 ] [397])
                (ashift:DI (reg:DI 1 dx [orig:396 D.6131 ] [396])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 512 {*ashldi3_1}
     (nil))
(insn 725 724 726 48 (parallel [
            (set (reg/f:DI 0 ax [orig:398 D.6139 ] [398])
                (plus:DI (reg/f:DI 0 ax [orig:395 D.6139 ] [395])
                    (reg:DI 1 dx [orig:397 D.6131 ] [397])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 218 {*adddi_1}
     (nil))
(insn 726 725 727 48 (set (reg:SI 1 dx [619])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 727 726 728 48 (set (reg:DI 1 dx [orig:399 D.6131 ] [399])
        (sign_extend:DI (reg:SI 1 dx [619]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 728 727 729 48 (parallel [
            (set (reg:DI 2 cx [orig:400 D.6131 ] [400])
                (ashift:DI (reg:DI 1 dx [orig:399 D.6131 ] [399])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 512 {*ashldi3_1}
     (nil))
(insn 729 728 730 48 (set (reg/f:DI 1 dx [620])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 730 729 731 48 (parallel [
            (set (reg/f:DI 1 dx [orig:401 D.6138 ] [401])
                (plus:DI (reg/f:DI 1 dx [620])
                    (reg:DI 2 cx [orig:400 D.6131 ] [400])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 2 cx [orig:400 D.6131 ] [400]))
        (nil)))
(insn 731 730 732 48 (set (reg/f:DI 1 dx [orig:402 D.6139 ] [402])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:401 D.6138 ] [401]) [0 _426->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 732 731 733 48 (set (reg:SI 2 cx [621])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 733 732 734 48 (set (reg:DI 2 cx [orig:403 D.6131 ] [403])
        (sign_extend:DI (reg:SI 2 cx [621]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 734 733 735 48 (parallel [
            (set (reg:DI 2 cx [orig:404 D.6131 ] [404])
                (ashift:DI (reg:DI 2 cx [orig:403 D.6131 ] [403])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 512 {*ashldi3_1}
     (nil))
(insn 735 734 736 48 (parallel [
            (set (reg/f:DI 1 dx [orig:405 D.6139 ] [405])
                (plus:DI (reg/f:DI 1 dx [orig:402 D.6139 ] [402])
                    (reg:DI 2 cx [orig:404 D.6131 ] [404])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 218 {*adddi_1}
     (nil))
(insn 736 735 737 48 (set (reg:SF 22 xmm1 [orig:406 D.6147 ] [406])
        (mem:SF (reg/f:DI 1 dx [orig:405 D.6139 ] [405]) [0 *_430+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 129 {*movsf_internal}
     (nil))
(insn 737 736 738 48 (set (reg:SI 1 dx [622])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 738 737 739 48 (set (reg:DI 1 dx [orig:407 D.6131 ] [407])
        (sign_extend:DI (reg:SI 1 dx [622]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 739 738 740 48 (parallel [
            (set (reg:DI 2 cx [orig:408 D.6131 ] [408])
                (ashift:DI (reg:DI 1 dx [orig:407 D.6131 ] [407])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 512 {*ashldi3_1}
     (nil))
(insn 740 739 741 48 (set (reg/f:DI 1 dx [623])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 741 740 742 48 (parallel [
            (set (reg/f:DI 1 dx [orig:409 D.6137 ] [409])
                (plus:DI (reg/f:DI 1 dx [623])
                    (reg:DI 2 cx [orig:408 D.6131 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:408 D.6131 ] [408]))
        (nil)))
(insn 742 741 743 48 (set (reg/f:DI 1 dx [orig:410 D.6139 ] [410])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:409 D.6137 ] [409]) [0 _434->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 743 742 744 48 (set (reg:SI 2 cx [624])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 744 743 745 48 (set (reg:DI 2 cx [orig:411 D.6131 ] [411])
        (sign_extend:DI (reg:SI 2 cx [624]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 745 744 746 48 (parallel [
            (set (reg:DI 2 cx [orig:412 D.6131 ] [412])
                (ashift:DI (reg:DI 2 cx [orig:411 D.6131 ] [411])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 512 {*ashldi3_1}
     (nil))
(insn 746 745 747 48 (parallel [
            (set (reg/f:DI 1 dx [orig:413 D.6139 ] [413])
                (plus:DI (reg/f:DI 1 dx [orig:410 D.6139 ] [410])
                    (reg:DI 2 cx [orig:412 D.6131 ] [412])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 218 {*adddi_1}
     (nil))
(insn 747 746 748 48 (set (reg:SF 21 xmm0 [orig:414 D.6147 ] [414])
        (mem:SF (reg/f:DI 1 dx [orig:413 D.6139 ] [413]) [0 *_438+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 129 {*movsf_internal}
     (nil))
(insn 748 747 749 48 (set (reg:SF 21 xmm0 [orig:415 D.6147 ] [415])
        (plus:SF (reg:SF 21 xmm0 [orig:414 D.6147 ] [414])
            (reg:SF 22 xmm1 [orig:406 D.6147 ] [406]))) sim2fitman_fmtext_o.cpp:279 797 {*fop_sf_comm_sse}
     (nil))
(insn 749 748 750 48 (set (mem:SF (reg/f:DI 0 ax [orig:398 D.6139 ] [398]) [0 *_423+0 S4 A32])
        (reg:SF 21 xmm0 [orig:415 D.6147 ] [415])) sim2fitman_fmtext_o.cpp:279 129 {*movsf_internal}
     (nil))
(insn 750 749 751 48 (set (reg:SI 0 ax [625])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 751 750 752 48 (set (reg:DI 0 ax [orig:416 D.6131 ] [416])
        (sign_extend:DI (reg:SI 0 ax [625]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 752 751 753 48 (parallel [
            (set (reg:DI 1 dx [orig:417 D.6131 ] [417])
                (ashift:DI (reg:DI 0 ax [orig:416 D.6131 ] [416])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 512 {*ashldi3_1}
     (nil))
(insn 753 752 754 48 (set (reg/f:DI 0 ax [626])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 754 753 755 48 (parallel [
            (set (reg/f:DI 0 ax [orig:418 D.6138 ] [418])
                (plus:DI (reg/f:DI 0 ax [626])
                    (reg:DI 1 dx [orig:417 D.6131 ] [417])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:417 D.6131 ] [417]))
        (nil)))
(insn 755 754 756 48 (set (reg/f:DI 0 ax [orig:419 D.6139 ] [419])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:418 D.6138 ] [418]) [0 _444->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 756 755 757 48 (set (reg:SI 1 dx [627])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 757 756 758 48 (set (reg:DI 1 dx [orig:420 D.6140 ] [420])
        (sign_extend:DI (reg:SI 1 dx [627]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 758 757 759 48 (parallel [
            (set (reg:DI 1 dx [orig:421 D.6140 ] [421])
                (plus:DI (reg:DI 1 dx [orig:420 D.6140 ] [420])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (nil))
(insn 759 758 760 48 (parallel [
            (set (reg:DI 1 dx [orig:422 D.6140 ] [422])
                (ashift:DI (reg:DI 1 dx [orig:421 D.6140 ] [421])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 512 {*ashldi3_1}
     (nil))
(insn 760 759 761 48 (parallel [
            (set (reg/f:DI 0 ax [orig:423 D.6139 ] [423])
                (plus:DI (reg/f:DI 0 ax [orig:419 D.6139 ] [419])
                    (reg:DI 1 dx [orig:422 D.6140 ] [422])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (nil))
(insn 761 760 762 48 (set (reg:SI 1 dx [628])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 762 761 763 48 (set (reg:DI 1 dx [orig:424 D.6131 ] [424])
        (sign_extend:DI (reg:SI 1 dx [628]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 763 762 764 48 (parallel [
            (set (reg:DI 2 cx [orig:425 D.6131 ] [425])
                (ashift:DI (reg:DI 1 dx [orig:424 D.6131 ] [424])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 512 {*ashldi3_1}
     (nil))
(insn 764 763 765 48 (set (reg/f:DI 1 dx [629])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 765 764 766 48 (parallel [
            (set (reg/f:DI 1 dx [orig:426 D.6138 ] [426])
                (plus:DI (reg/f:DI 1 dx [629])
                    (reg:DI 2 cx [orig:425 D.6131 ] [425])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 2 cx [orig:425 D.6131 ] [425]))
        (nil)))
(insn 766 765 767 48 (set (reg/f:DI 1 dx [orig:427 D.6139 ] [427])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:426 D.6138 ] [426]) [0 _452->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 767 766 768 48 (set (reg:SI 2 cx [630])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 768 767 769 48 (set (reg:DI 2 cx [orig:428 D.6140 ] [428])
        (sign_extend:DI (reg:SI 2 cx [630]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 769 768 770 48 (parallel [
            (set (reg:DI 2 cx [orig:429 D.6140 ] [429])
                (plus:DI (reg:DI 2 cx [orig:428 D.6140 ] [428])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (nil))
(insn 770 769 771 48 (parallel [
            (set (reg:DI 2 cx [orig:430 D.6140 ] [430])
                (ashift:DI (reg:DI 2 cx [orig:429 D.6140 ] [429])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 512 {*ashldi3_1}
     (nil))
(insn 771 770 772 48 (parallel [
            (set (reg/f:DI 1 dx [orig:431 D.6139 ] [431])
                (plus:DI (reg/f:DI 1 dx [orig:427 D.6139 ] [427])
                    (reg:DI 2 cx [orig:430 D.6140 ] [430])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (nil))
(insn 772 771 773 48 (set (reg:SF 22 xmm1 [orig:432 D.6147 ] [432])
        (mem:SF (reg/f:DI 1 dx [orig:431 D.6139 ] [431]) [0 *_457+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 129 {*movsf_internal}
     (nil))
(insn 773 772 774 48 (set (reg:SI 1 dx [631])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 774 773 775 48 (set (reg:DI 1 dx [orig:433 D.6131 ] [433])
        (sign_extend:DI (reg:SI 1 dx [631]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 775 774 776 48 (parallel [
            (set (reg:DI 2 cx [orig:434 D.6131 ] [434])
                (ashift:DI (reg:DI 1 dx [orig:433 D.6131 ] [433])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 512 {*ashldi3_1}
     (nil))
(insn 776 775 777 48 (set (reg/f:DI 1 dx [632])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 777 776 778 48 (parallel [
            (set (reg/f:DI 1 dx [orig:435 D.6137 ] [435])
                (plus:DI (reg/f:DI 1 dx [632])
                    (reg:DI 2 cx [orig:434 D.6131 ] [434])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:434 D.6131 ] [434]))
        (nil)))
(insn 778 777 779 48 (set (reg/f:DI 1 dx [orig:436 D.6139 ] [436])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:435 D.6137 ] [435]) [0 _461->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 779 778 780 48 (set (reg:SI 2 cx [633])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 780 779 781 48 (set (reg:DI 2 cx [orig:437 D.6140 ] [437])
        (sign_extend:DI (reg:SI 2 cx [633]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 781 780 782 48 (parallel [
            (set (reg:DI 2 cx [orig:438 D.6140 ] [438])
                (plus:DI (reg:DI 2 cx [orig:437 D.6140 ] [437])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (nil))
(insn 782 781 783 48 (parallel [
            (set (reg:DI 2 cx [orig:439 D.6140 ] [439])
                (ashift:DI (reg:DI 2 cx [orig:438 D.6140 ] [438])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 512 {*ashldi3_1}
     (nil))
(insn 783 782 784 48 (parallel [
            (set (reg/f:DI 1 dx [orig:440 D.6139 ] [440])
                (plus:DI (reg/f:DI 1 dx [orig:436 D.6139 ] [436])
                    (reg:DI 2 cx [orig:439 D.6140 ] [439])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 218 {*adddi_1}
     (nil))
(insn 784 783 785 48 (set (reg:SF 21 xmm0 [orig:441 D.6147 ] [441])
        (mem:SF (reg/f:DI 1 dx [orig:440 D.6139 ] [440]) [0 *_466+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 129 {*movsf_internal}
     (nil))
(insn 785 784 786 48 (set (reg:SF 21 xmm0 [orig:442 D.6147 ] [442])
        (plus:SF (reg:SF 21 xmm0 [orig:441 D.6147 ] [441])
            (reg:SF 22 xmm1 [orig:432 D.6147 ] [432]))) sim2fitman_fmtext_o.cpp:280 797 {*fop_sf_comm_sse}
     (nil))
(insn 786 785 787 48 (set (mem:SF (reg/f:DI 0 ax [orig:423 D.6139 ] [423]) [0 *_449+0 S4 A32])
        (reg:SF 21 xmm0 [orig:442 D.6147 ] [442])) sim2fitman_fmtext_o.cpp:280 129 {*movsf_internal}
     (nil))
(insn 787 786 841 48 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:278 217 {*addsi_1}
     (nil))
(jump_insn 841 787 842 48 (set (pc)
        (label_ref 788)) sim2fitman_fmtext_o.cpp:278 654 {jump}
     (nil)
 -> 788)
;;  succ:       47 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 842 841 791)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 791 842 792 49 25 "" [1 uses])
(note 792 791 793 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 793 792 843 49 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:133 217 {*addsi_1}
     (nil))
(jump_insn 843 793 844 49 (set (pc)
        (label_ref 794)) sim2fitman_fmtext_o.cpp:133 654 {jump}
     (nil)
 -> 794)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 844 843 797)
;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              12
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 797 844 798 50 3 "" [2 uses])
(note 798 797 799 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 799 798 845 50 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:50 217 {*addsi_1}
     (nil))
(jump_insn 845 799 846 50 (set (pc)
        (label_ref 800)) sim2fitman_fmtext_o.cpp:50 654 {jump}
     (nil)
 -> 800)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 846 845 803)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 443 444 634 635
(code_label 803 846 804 51 2 "" [1 uses])
(note 804 803 805 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 805 804 806 51 (set (reg:DI 0 ax [634])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:319 89 {*movdi_internal}
     (nil))
(insn 806 805 807 51 (set (reg:DI 5 di)
        (reg:DI 0 ax [634])) sim2fitman_fmtext_o.cpp:319 89 {*movdi_internal}
     (nil))
(call_insn 807 806 808 51 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fd2903c31b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:319 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 808 807 809 51 (set (reg:DI 0 ax [635])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 temp_double2+0 S8 A64])) sim2fitman_fmtext_o.cpp:320 89 {*movdi_internal}
     (nil))
(insn 809 808 810 51 (set (reg:DI 5 di)
        (reg:DI 0 ax [635])) sim2fitman_fmtext_o.cpp:320 89 {*movdi_internal}
     (nil))
(call_insn 810 809 811 51 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fd2903c31b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:320 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 811 810 814 51 (set (reg:SI 0 ax [orig:443 D.6130 ] [443])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:322 90 {*movsi_internal}
     (nil))
(insn 814 811 818 51 (set (reg:SI 0 ax [orig:444 <retval> ] [444])
        (reg:SI 0 ax [orig:443 D.6130 ] [443])) sim2fitman_fmtext_o.cpp:322 90 {*movsi_internal}
     (nil))
(insn 818 814 819 51 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:444 <retval> ] [444])) sim2fitman_fmtext_o.cpp:323 90 {*movsi_internal}
     (nil))
(insn 819 818 847 51 (use (reg/i:SI 0 ax)) sim2fitman_fmtext_o.cpp:323 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 847 819 0 NOTE_INSN_DELETED)

;; Function void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*) (_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess, funcdef_no=3, decl_uid=5438, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 57:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 59:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 78:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 82:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=193 from oldreg=159, assigning class CREG to r193
      Creating newreg=194 from oldreg=161, assigning class DIREG to r194
   82: {r193:DI=unspec[[r194:DI],r163:QI,0x1,r193:DI] 24;clobber r194:DI;clobber flags:CC;}
      REG_DEAD r163:QI
      REG_DEAD r162:DI
      REG_DEAD r161:DI
      REG_UNUSED r161:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  247: r193:DI=r162:DI
  249: r194:DI=r161:DI
    Inserting insn reload after:
  248: r159:DI=r193:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 86
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 88:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 101:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 109:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 112:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 115:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 118:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 121:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) rm {extendhisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 133:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 138:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 141:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 144:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 147:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 153:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 162:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 169:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 170:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 174:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 175:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 176:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 181:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 182:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 199:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 203:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 212
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 213:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 217:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 221:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 227:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 10
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
  BB 10
   Insn 245: point = 0
  BB 8
   Insn 232: point = 0
   Insn 231: point = 0
   Insn 230: point = 1
  BB 3
   Insn 237: point = 2
   Insn 25: point = 2
   Insn 24: point = 2
   Insn 23: point = 3
  BB 7
   Insn 228: point = 4
   Insn 227: point = 4
  BB 5
   Insn 192: point = 4
   Insn 191: point = 4
   Insn 190: point = 5
   Insn 189: point = 7
   Insn 188: point = 9
   Insn 187: point = 10
   Insn 186: point = 12
  BB 6
   Insn 239: point = 13
   Insn 221: point = 13
   Insn 220: point = 13
   Insn 219: point = 13
   Insn 218: point = 13
   Insn 217: point = 14
   Insn 216: point = 14
   Insn 215: point = 15
   Insn 214: point = 16
   Insn 213: point = 18
   Insn 212: point = 20
   Insn 211: point = 22
   Insn 210: point = 23
   Insn 209: point = 25
   Insn 208: point = 27
   Insn 207: point = 29
   Insn 206: point = 30
   Insn 205: point = 30
   Insn 204: point = 30
   Insn 203: point = 31
   Insn 202: point = 31
   Insn 201: point = 32
   Insn 200: point = 33
   Insn 199: point = 35
   Insn 198: point = 37
   Insn 197: point = 39
   Insn 196: point = 40
   Insn 195: point = 42
   Insn 194: point = 44
  BB 4
   Insn 184: point = 45
   Insn 183: point = 45
   Insn 182: point = 45
   Insn 181: point = 45
   Insn 180: point = 45
   Insn 179: point = 45
   Insn 178: point = 46
   Insn 177: point = 47
   Insn 176: point = 47
   Insn 175: point = 47
   Insn 174: point = 47
   Insn 173: point = 47
   Insn 172: point = 48
   Insn 171: point = 49
   Insn 170: point = 49
   Insn 169: point = 49
   Insn 168: point = 49
   Insn 167: point = 49
   Insn 166: point = 50
   Insn 165: point = 51
   Insn 164: point = 51
   Insn 163: point = 51
   Insn 162: point = 52
   Insn 161: point = 52
   Insn 160: point = 53
   Insn 159: point = 54
   Insn 158: point = 55
   Insn 157: point = 56
   Insn 156: point = 57
   Insn 155: point = 58
   Insn 154: point = 59
   Insn 153: point = 61
   Insn 152: point = 63
   Insn 151: point = 64
   Insn 150: point = 66
   Insn 149: point = 68
   Insn 148: point = 69
   Insn 147: point = 71
   Insn 146: point = 73
   Insn 145: point = 74
   Insn 144: point = 76
   Insn 143: point = 78
   Insn 142: point = 79
   Insn 141: point = 81
   Insn 140: point = 83
   Insn 139: point = 84
   Insn 138: point = 86
   Insn 137: point = 88
   Insn 136: point = 89
   Insn 135: point = 89
   Insn 134: point = 89
   Insn 133: point = 90
   Insn 132: point = 90
   Insn 131: point = 91
   Insn 130: point = 92
   Insn 129: point = 93
   Insn 128: point = 94
   Insn 127: point = 95
   Insn 126: point = 96
   Insn 125: point = 97
   Insn 124: point = 99
   Insn 123: point = 101
   Insn 122: point = 102
   Insn 121: point = 104
   Insn 120: point = 106
   Insn 119: point = 107
   Insn 118: point = 109
   Insn 117: point = 111
   Insn 116: point = 112
   Insn 115: point = 114
   Insn 114: point = 116
   Insn 113: point = 117
   Insn 112: point = 119
   Insn 111: point = 121
   Insn 110: point = 122
   Insn 109: point = 124
   Insn 108: point = 126
   Insn 107: point = 127
   Insn 106: point = 127
   Insn 105: point = 127
   Insn 104: point = 128
   Insn 103: point = 128
   Insn 102: point = 129
   Insn 101: point = 130
   Insn 100: point = 132
   Insn 99: point = 133
   Insn 98: point = 133
   Insn 97: point = 133
   Insn 96: point = 134
   Insn 95: point = 134
   Insn 94: point = 135
   Insn 93: point = 136
   Insn 92: point = 137
   Insn 91: point = 137
   Insn 90: point = 138
   Insn 89: point = 139
   Insn 88: point = 141
   Insn 87: point = 142
   Insn 86: point = 142
   Insn 84: point = 144
   Insn 83: point = 146
   Insn 248: point = 148
	Hard reg 0 is preferable by r193 with profit 1
   Insn 82: point = 150
   Insn 249: point = 152
	Hard reg 4 is preferable by r194 with profit 1
   Insn 247: point = 154
	Hard reg 0 is preferable by r193 with profit 1
	Hard reg 2 is preferable by r193 with profit 1
   Insn 81: point = 156
   Insn 80: point = 157
   Insn 79: point = 159
   Insn 85: point = 160
   Insn 78: point = 161
   Insn 77: point = 163
   Insn 76: point = 164
   Insn 75: point = 166
   Insn 74: point = 167
   Insn 73: point = 167
   Insn 72: point = 167
   Insn 71: point = 168
   Insn 70: point = 168
   Insn 69: point = 169
   Insn 68: point = 170
   Insn 67: point = 172
   Insn 66: point = 173
   Insn 65: point = 173
   Insn 64: point = 173
   Insn 63: point = 174
   Insn 62: point = 174
   Insn 61: point = 175
   Insn 60: point = 176
   Insn 59: point = 178
   Insn 58: point = 180
   Insn 57: point = 181
   Insn 56: point = 183
   Insn 55: point = 184
   Insn 54: point = 184
   Insn 53: point = 184
   Insn 52: point = 185
   Insn 51: point = 185
   Insn 50: point = 186
   Insn 49: point = 187
   Insn 48: point = 189
   Insn 47: point = 191
   Insn 46: point = 192
   Insn 45: point = 192
   Insn 44: point = 192
   Insn 43: point = 193
   Insn 42: point = 193
   Insn 41: point = 194
   Insn 40: point = 195
   Insn 39: point = 197
   Insn 38: point = 198
   Insn 37: point = 198
   Insn 36: point = 198
   Insn 35: point = 199
   Insn 34: point = 199
   Insn 33: point = 200
   Insn 32: point = 201
   Insn 31: point = 203
   Insn 30: point = 205
  BB 2
   Insn 21: point = 206
   Insn 20: point = 206
   Insn 19: point = 207
   Insn 18: point = 208
   Insn 17: point = 208
   Insn 16: point = 209
   Insn 15: point = 210
   Insn 14: point = 210
   Insn 13: point = 211
   Insn 12: point = 211
   Insn 11: point = 212
   Insn 7: point = 212
   Insn 6: point = 212
   Insn 5: point = 212
   Insn 4: point = 212
   Insn 3: point = 212
   Insn 2: point = 212
 r87: [208..209]
 r88: [206..207]
 r89: [202..203]
 r90: [199..201]
 r91: [193..195]
 r92: [188..189]
 r93: [185..187]
 r94: [177..181]
 r95: [177..178]
 r96: [174..176]
 r97: [168..170]
 r98: [138..164]
 r99: [140..161]
 r100: [143..144]
 r101: [141..142]
 r102: [137..139]
 r103: [134..136]
 r104: [128..130]
 r105: [123..124]
 r106: [95..122]
 r107: [118..119]
 r108: [94..117]
 r109: [113..114]
 r110: [93..112]
 r111: [108..109]
 r112: [92..107]
 r113: [103..104]
 r114: [91..102]
 r115: [98..99]
 r116: [90..97]
 r117: [85..86]
 r118: [57..84]
 r119: [80..81]
 r120: [56..79]
 r121: [75..76]
 r122: [55..74]
 r123: [70..71]
 r124: [54..69]
 r125: [65..66]
 r126: [53..64]
 r127: [60..61]
 r128: [52..59]
 r129: [4..10]
 r130: [6..7]
 r131: [4..5]
 r132: [41..42]
 r133: [38..40]
 r134: [36..37]
 r135: [34..35]
 r136: [31..33]
 r137: [26..27]
 r138: [24..25]
 r139: [21..23]
 r140: [19..20]
 r141: [17..18]
 r142: [14..16]
 r143: [210..211]
 r144: [2..3]
 r145: [204..205]
 r146: [198..200]
 r147: [196..197]
 r148: [192..194]
 r149: [190..191]
 r150: [184..186]
 r151: [182..183]
 r152: [179..180]
 r153: [173..175]
 r154: [171..172]
 r155: [167..169]
 r156: [165..166]
 r157: [162..163]
 r158: [158..160]
 r159: [147..148]
 r160: [145..146]
 r161: [153..157]
 r162: [155..159]
 r163: [151..156]
 r164: [133..135]
 r165: [131..132]
 r166: [127..129]
 r167: [125..126]
 r168: [120..121]
 r169: [115..116]
 r170: [110..111]
 r171: [105..106]
 r172: [100..101]
 r173: [89..96]
 r174: [87..88]
 r175: [82..83]
 r176: [77..78]
 r177: [72..73]
 r178: [67..68]
 r179: [62..63]
 r180: [51..58]
 r181: [49..50]
 r182: [47..48]
 r183: [45..46]
 r184: [11..12]
 r185: [8..9]
 r186: [43..44]
 r187: [38..39]
 r188: [30..32]
 r189: [28..29]
 r190: [21..22]
 r191: [13..15]
 r192: [0..1]
 r193: [149..154]
 r194: [150..152]
Compressing live ranges: from 212 to 158 - 74%
Ranges after the compression:
 r87: [154..155]
 r88: [152..153]
 r89: [148..149]
 r90: [146..147]
 r91: [142..143]
 r92: [138..139]
 r93: [136..137]
 r94: [130..133]
 r95: [130..131]
 r96: [128..129]
 r97: [124..125]
 r98: [102..121]
 r99: [104..119]
 r100: [106..107]
 r101: [104..105]
 r102: [102..103]
 r103: [100..101]
 r104: [96..97]
 r105: [92..93]
 r106: [70..91]
 r107: [88..89]
 r108: [70..87]
 r109: [84..85]
 r110: [70..83]
 r111: [80..81]
 r112: [70..79]
 r113: [76..77]
 r114: [70..75]
 r115: [72..73]
 r116: [70..71]
 r117: [66..67]
 r118: [44..65]
 r119: [62..63]
 r120: [44..61]
 r121: [58..59]
 r122: [44..57]
 r123: [54..55]
 r124: [44..53]
 r125: [50..51]
 r126: [44..49]
 r127: [46..47]
 r128: [44..45]
 r129: [4..9]
 r130: [6..7]
 r131: [4..5]
 r132: [34..35]
 r133: [32..33]
 r134: [30..31]
 r135: [28..29]
 r136: [26..27]
 r137: [22..23]
 r138: [20..21]
 r139: [18..19]
 r140: [16..17]
 r141: [14..15]
 r142: [12..13]
 r143: [156..157]
 r144: [2..3]
 r145: [150..151]
 r146: [146..147]
 r147: [144..145]
 r148: [142..143]
 r149: [140..141]
 r150: [136..137]
 r151: [134..135]
 r152: [132..133]
 r153: [128..129]
 r154: [126..127]
 r155: [124..125]
 r156: [122..123]
 r157: [120..121]
 r158: [118..119]
 r159: [110..111]
 r160: [108..109]
 r161: [114..117]
 r162: [116..119]
 r163: [112..117]
 r164: [100..101]
 r165: [98..99]
 r166: [96..97]
 r167: [94..95]
 r168: [90..91]
 r169: [86..87]
 r170: [82..83]
 r171: [78..79]
 r172: [74..75]
 r173: [70..71]
 r174: [68..69]
 r175: [64..65]
 r176: [60..61]
 r177: [56..57]
 r178: [52..53]
 r179: [48..49]
 r180: [44..45]
 r181: [42..43]
 r182: [40..41]
 r183: [38..39]
 r184: [10..11]
 r185: [8..9]
 r186: [36..37]
 r187: [32..33]
 r188: [26..27]
 r189: [24..25]
 r190: [18..19]
 r191: [12..13]
 r192: [0..1]
 r193: [112..115]
 r194: [112..113]

********** Assignment #1: **********

	 Assigning to 193 (cl=CREG, orig=159, freq=3, tfirst=193, tfreq=3)...
	   Assign 2 to reload r193 (freq=3)
	 Assigning to 194 (cl=DIREG, orig=161, freq=2, tfirst=194, tfreq=2)...
	   Assign 5 to reload r194 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 40
changing reg in insn 42
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 68
changing reg in insn 70
changing reg in insn 76
changing reg in insn 90
changing reg in insn 78
changing reg in insn 89
changing reg in insn 85
changing reg in insn 84
changing reg in insn 86
changing reg in insn 88
changing reg in insn 87
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 95
changing reg in insn 101
changing reg in insn 103
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 127
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 128
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 129
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 130
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 131
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 132
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 156
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 157
changing reg in insn 144
changing reg in insn 145
changing reg in insn 145
changing reg in insn 158
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 159
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 160
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 161
changing reg in insn 187
changing reg in insn 191
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 212
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 12
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 80
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 80
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 94
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 105
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 144
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 163
changing reg in insn 166
changing reg in insn 167
changing reg in insn 172
changing reg in insn 173
changing reg in insn 178
changing reg in insn 179
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 194
changing reg in insn 195
changing reg in insn 197
changing reg in insn 201
changing reg in insn 204
changing reg in insn 207
changing reg in insn 208
changing reg in insn 211
changing reg in insn 215
changing reg in insn 218
changing reg in insn 230
changing reg in insn 231
deleting insn with uid = 16.
deleting insn with uid = 34.
deleting insn with uid = 42.
deleting insn with uid = 51.
deleting insn with uid = 62.
deleting insn with uid = 70.
deleting insn with uid = 247.
deleting insn with uid = 95.
deleting insn with uid = 103.
deleting insn with uid = 127.
deleting insn with uid = 128.
deleting insn with uid = 129.
deleting insn with uid = 130.
deleting insn with uid = 131.
deleting insn with uid = 132.
deleting insn with uid = 156.
deleting insn with uid = 157.
deleting insn with uid = 158.
deleting insn with uid = 159.
deleting insn with uid = 160.
deleting insn with uid = 161.
deleting insn with uid = 202.
deleting insn with uid = 216.
starting the processing of deferred insns
ending the processing of deferred insns


void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 37[r8] 38[r9]
;;  ref usage 	r0={91d,75u} r1={32d,16u,2e} r2={24d,6u} r4={36d,18u} r5={39d,20u} r6={1d,67u} r7={1d,28u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r17={36d,4u} r18={18d} r19={18d} r20={1d,1u,5e} r21={40d,21u} r22={22d,3u} r23={21d,2u} r24={21d,2u} r25={21d,2u} r26={20d,1u} r27={19d} r28={19d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={20d,2u} r38={19d,1u} r39={18d} r40={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} 
;;    total ref usage 1767{1491d,269u,7e} in 198{180 regular + 18 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 143
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
        (reg:DI 4 si [ data ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 index1+0 S4 A32])
        (reg:SI 37 r8 [ index1 ])) sim2fitman_fmtext_o.cpp:331 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
        (reg:DI 38 r9 [ procpar_info ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:336 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])) sim2fitman_fmtext_o.cpp:338 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd28ff4a240 *.LC1>)) sim2fitman_fmtext_o.cpp:338 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [143])) sim2fitman_fmtext_o.cpp:338 89 {*movdi_internal}
     (nil))
(call_insn 15 14 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7fd2901615e8 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:338 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 15 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 D.6155 ] [87])) sim2fitman_fmtext_o.cpp:338 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:338 4 {*cmpdi_ccno_1}
     (nil))
(insn 19 18 20 2 (set (reg:QI 0 ax [orig:88 D.6156 ] [88])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:338 607 {*setcc_qi}
     (nil))
(insn 20 19 21 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.6156 ] [88])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:338 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) sim2fitman_fmtext_o.cpp:338 612 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])) sim2fitman_fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [144])) sim2fitman_fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(call_insn 25 24 237 3 (call (mem:QI (symbol_ref:DI ("_Z7exit_08Pc") [flags 0x41]  <function_decl 0x7fd2902a5e58 exit_08>) [0 exit_08 S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:339 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 237 25 238 3 (set (pc)
        (label_ref:DI 244)) sim2fitman_fmtext_o.cpp:401 654 {jump}
     (nil)
 -> 244)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 238 237 28)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183
(code_label 28 238 29 4 31 "" [1 uses])
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:342 89 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 0 ax [orig:89 D.6157 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [145])
                (const_int 328 [0x148])) [0 procpar_info_12(D)->num_points+0 S4 A64])) sim2fitman_fmtext_o.cpp:342 90 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 1 dx [orig:90 D.6157 ] [90])
                (ashift:SI (reg:SI 0 ax [orig:89 D.6157 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:342 511 {*ashlsi3_1}
     (nil))
(insn 33 32 35 4 (set (reg:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:342 89 {*movdi_internal}
     (nil))
(insn 35 33 36 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd28ff4a2d0 *.LC2>)) sim2fitman_fmtext_o.cpp:342 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [146])) sim2fitman_fmtext_o.cpp:342 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:342 93 {*movqi_internal}
     (nil))
(call_insn 38 37 39 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:342 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:346 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:SI 1 dx [orig:91 D.6157 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [147])
                (const_int 508 [0x1fc])) [0 procpar_info_12(D)->nex+0 S4 A32])) sim2fitman_fmtext_o.cpp:346 90 {*movsi_internal}
     (nil))
(insn 41 40 43 4 (set (reg:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:346 89 {*movdi_internal}
     (nil))
(insn 43 41 44 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd28ff4a2d0 *.LC2>)) sim2fitman_fmtext_o.cpp:346 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [148])) sim2fitman_fmtext_o.cpp:346 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:346 93 {*movqi_internal}
     (nil))
(call_insn 46 45 47 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:346 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:351 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SF 21 xmm0 [orig:92 D.6158 ] [92])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [149])
                (const_int 4 [0x4])) [0 procpar_info_12(D)->dwell_time+0 S4 A32])) sim2fitman_fmtext_o.cpp:351 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DF 21 xmm0 [orig:93 D.6159 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.6158 ] [92]))) sim2fitman_fmtext_o.cpp:351 152 {*extendsfdf2_sse}
     (nil))
(insn 50 49 52 4 (set (reg:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:351 89 {*movdi_internal}
     (nil))
(insn 52 50 53 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd28ff4a360 *.LC3>)) sim2fitman_fmtext_o.cpp:351 89 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [150])) sim2fitman_fmtext_o.cpp:351 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:351 93 {*movqi_internal}
     (nil))
(call_insn 55 54 56 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:351 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 56 55 57 4 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:355 89 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (set (reg:DF 22 xmm1 [orig:94 D.6159 ] [94])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [151])
                (const_int 336 [0x150])) [0 procpar_info_12(D)->main_frequency+0 S8 A64])) sim2fitman_fmtext_o.cpp:355 128 {*movdf_internal}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DF 21 xmm0 [orig:95 D.6159 ] [95])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [152])
                (const_int 344 [0x158])) [0 procpar_info_12(D)->offset_frequency+0 S8 A64])) sim2fitman_fmtext_o.cpp:356 128 {*movdf_internal}
     (nil))
(insn 60 59 61 4 (set (reg:DF 21 xmm0 [orig:96 D.6159 ] [96])
        (plus:DF (reg:DF 21 xmm0 [orig:95 D.6159 ] [95])
            (reg:DF 22 xmm1 [orig:94 D.6159 ] [94]))) sim2fitman_fmtext_o.cpp:355 798 {*fop_df_comm_sse}
     (nil))
(insn 61 60 63 4 (set (reg:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 63 61 64 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fd28ff4a3f0 *.LC4>)) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [153])) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:356 93 {*movqi_internal}
     (nil))
(call_insn 66 65 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:356 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 67 66 68 4 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:358 89 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:SI 1 dx [orig:97 D.6157 ] [97])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [154])
                (const_int 324 [0x144])) [0 procpar_info_12(D)->num_transients+0 S4 A32])) sim2fitman_fmtext_o.cpp:358 90 {*movsi_internal}
     (nil))
(insn 69 68 71 4 (set (reg:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:358 89 {*movdi_internal}
     (nil))
(insn 71 69 72 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd28ff4a2d0 *.LC2>)) sim2fitman_fmtext_o.cpp:358 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [155])) sim2fitman_fmtext_o.cpp:358 89 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:358 93 {*movqi_internal}
     (nil))
(call_insn 74 73 75 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:358 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 75 74 76 4 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg/f:DI 37 r8 [orig:98 D.6160 ] [98])
                (plus:DI (reg/f:DI 0 ax [156])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 440 [0x1b8]))
        (nil)))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 78 77 85 4 (parallel [
            (set (reg/f:DI 1 dx [orig:99 D.6161 ] [99])
                (plus:DI (reg/f:DI 0 ax [157])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 404 [0x194]))
        (nil)))
(insn 85 78 79 4 (set (reg:DI 0 ax [158])
        (reg/f:DI 1 dx [orig:99 D.6161 ] [99])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 79 85 80 4 (set (reg:DI 2 cx [162])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:DI 4 si [161])
        (reg:DI 0 ax [158])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 81 80 249 4 (set (reg:QI 0 ax [163])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:360 93 {*movqi_internal}
     (nil))
(insn 249 81 82 4 (set (reg:DI 5 di [161])
        (reg:DI 4 si [161])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 82 249 248 4 (parallel [
            (set (reg:DI 2 cx [159])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [161]) [0  A8])
                        (reg:QI 0 ax [163])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [159])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [161]))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:360 945 {*strlenqi_1}
     (nil))
(insn 248 82 83 4 (set (reg:DI 0 ax [159])
        (reg:DI 2 cx [159])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 83 248 84 4 (set (reg:DI 0 ax [160])
        (not:DI (reg:DI 0 ax [159]))) sim2fitman_fmtext_o.cpp:360 494 {*one_cmpldi2_1}
     (nil))
(insn 84 83 86 4 (parallel [
            (set (reg:DI 0 ax [orig:100 D.6162 ] [100])
                (plus:DI (reg:DI 0 ax [160])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:360 218 {*adddi_1}
     (nil))
(insn 86 84 87 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.6161 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 D.6162 ] [100])
                    (reg/f:DI 1 dx [orig:99 D.6161 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:360 218 {*adddi_1}
     (nil))
(insn 87 86 88 4 (set (mem:HI (reg/f:DI 0 ax [orig:101 D.6161 ] [101]) [0 MEM[(void *)_30]+0 S2 A8])
        (const_int 8236 [0x202c])) sim2fitman_fmtext_o.cpp:360 92 {*movhi_internal}
     (nil))
(insn 88 87 89 4 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:101 D.6161 ] [101])
                (const_int 2 [0x2])) [0 MEM[(void *)_30]+2 S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:360 93 {*movqi_internal}
     (nil))
(insn 89 88 90 4 (set (reg/f:DI 0 ax [orig:102 D.6163 ] [102])
        (reg/f:DI 1 dx [orig:99 D.6161 ] [99])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:DI 4 si)
        (reg/f:DI 37 r8 [orig:98 D.6160 ] [98])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 91 90 92 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:102 D.6163 ] [102])) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(call_insn 92 91 93 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7fd290393d80 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:360 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 93 92 94 4 (set (reg/f:DI 1 dx [orig:103 D.6163 ] [103])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 94 93 96 4 (set (reg:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 96 94 97 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fd28ff4a480 *.LC5>)) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [164])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 98 97 99 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:361 93 {*movqi_internal}
     (nil))
(call_insn 99 98 100 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:361 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 100 99 101 4 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg/f:DI 1 dx [orig:104 D.6164 ] [104])
                (plus:DI (reg/f:DI 0 ax [165])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:367 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 102 101 104 4 (set (reg:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 104 102 105 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fd28ff4a510 *.LC6>)) sim2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 105 104 106 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [166])) sim2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 106 105 107 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:367 93 {*movqi_internal}
     (nil))
(call_insn 107 106 108 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:367 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 108 107 109 4 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 109 108 110 4 (set (reg:SF 21 xmm0 [orig:105 D.6158 ] [105])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [167])
                (const_int 400 [0x190])) [0 procpar_info_12(D)->vtheta+0 S4 A64])) sim2fitman_fmtext_o.cpp:373 129 {*movsf_internal}
     (nil))
(insn 110 109 111 4 (set (reg:DF 25 xmm4 [orig:106 D.6159 ] [106])
        (float_extend:DF (reg:SF 21 xmm0 [orig:105 D.6158 ] [105]))) sim2fitman_fmtext_o.cpp:371 152 {*extendsfdf2_sse}
     (nil))
(insn 111 110 112 4 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 112 111 113 4 (set (reg:SF 21 xmm0 [orig:107 D.6158 ] [107])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [168])
                (const_int 384 [0x180])) [0 procpar_info_12(D)->vox3+0 S4 A64])) sim2fitman_fmtext_o.cpp:373 129 {*movsf_internal}
     (nil))
(insn 113 112 114 4 (set (reg:DF 24 xmm3 [orig:108 D.6159 ] [108])
        (float_extend:DF (reg:SF 21 xmm0 [orig:107 D.6158 ] [107]))) sim2fitman_fmtext_o.cpp:371 152 {*extendsfdf2_sse}
     (nil))
(insn 114 113 115 4 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 115 114 116 4 (set (reg:SF 21 xmm0 [orig:109 D.6158 ] [109])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [169])
                (const_int 380 [0x17c])) [0 procpar_info_12(D)->vox2+0 S4 A32])) sim2fitman_fmtext_o.cpp:373 129 {*movsf_internal}
     (nil))
(insn 116 115 117 4 (set (reg:DF 23 xmm2 [orig:110 D.6159 ] [110])
        (float_extend:DF (reg:SF 21 xmm0 [orig:109 D.6158 ] [109]))) sim2fitman_fmtext_o.cpp:371 152 {*extendsfdf2_sse}
     (nil))
(insn 117 116 118 4 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:372 89 {*movdi_internal}
     (nil))
(insn 118 117 119 4 (set (reg:SF 21 xmm0 [orig:111 D.6158 ] [111])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [170])
                (const_int 376 [0x178])) [0 procpar_info_12(D)->vox1+0 S4 A64])) sim2fitman_fmtext_o.cpp:372 129 {*movsf_internal}
     (nil))
(insn 119 118 120 4 (set (reg:DF 22 xmm1 [orig:112 D.6159 ] [112])
        (float_extend:DF (reg:SF 21 xmm0 [orig:111 D.6158 ] [111]))) sim2fitman_fmtext_o.cpp:371 152 {*extendsfdf2_sse}
     (nil))
(insn 120 119 121 4 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) sim2fitman_fmtext_o.cpp:372 89 {*movdi_internal}
     (nil))
(insn 121 120 122 4 (set (reg:SF 21 xmm0 [orig:113 D.6158 ] [113])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [171])
                (const_int 4 [0x4])) [0 preprocess_46(D)->scale_factor+0 S4 A32])) sim2fitman_fmtext_o.cpp:372 129 {*movsf_internal}
     (nil))
(insn 122 121 123 4 (set (reg:DF 21 xmm0 [orig:114 D.6159 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.6158 ] [113]))) sim2fitman_fmtext_o.cpp:371 152 {*extendsfdf2_sse}
     (nil))
(insn 123 122 124 4 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 block_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:372 89 {*movdi_internal}
     (nil))
(insn 124 123 125 4 (set (reg:HI 0 ax [orig:115 D.6165 ] [115])
        (mem/j:HI (reg/f:DI 0 ax [172]) [0 block_header_49(D)->scale.number+0 S2 A64])) sim2fitman_fmtext_o.cpp:372 92 {*movhi_internal}
     (nil))
(insn 125 124 126 4 (set (reg:SI 1 dx [orig:116 D.6157 ] [116])
        (sign_extend:SI (reg:HI 0 ax [orig:115 D.6165 ] [115]))) sim2fitman_fmtext_o.cpp:371 146 {extendhisi2}
     (nil))
(insn 126 125 133 4 (set (reg:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 133 126 134 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fd28ff4a5a0 *.LC7>)) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [173])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 135 134 136 4 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) sim2fitman_fmtext_o.cpp:373 93 {*movqi_internal}
     (nil))
(call_insn 136 135 137 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:373 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 21 xmm0))
                        (expr_list:DF (use (reg:DF 22 xmm1))
                            (expr_list:DF (use (reg:DF 23 xmm2))
                                (expr_list:DF (use (reg:DF 24 xmm3))
                                    (expr_list:DF (use (reg:DF 25 xmm4))
                                        (nil)))))))))))
(insn 137 136 138 4 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 138 137 139 4 (set (reg:SF 21 xmm0 [orig:117 D.6158 ] [117])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [174])
                (const_int 360 [0x168])) [0 procpar_info_12(D)->gain+0 S4 A64])) sim2fitman_fmtext_o.cpp:377 129 {*movsf_internal}
     (nil))
(insn 139 138 140 4 (set (reg:DF 26 xmm5 [orig:118 D.6159 ] [118])
        (float_extend:DF (reg:SF 21 xmm0 [orig:117 D.6158 ] [117]))) sim2fitman_fmtext_o.cpp:375 152 {*extendsfdf2_sse}
     (nil))
(insn 140 139 141 4 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 141 140 142 4 (set (reg:SF 21 xmm0 [orig:119 D.6158 ] [119])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [175])
                (const_int 372 [0x174])) [0 procpar_info_12(D)->pos3+0 S4 A32])) sim2fitman_fmtext_o.cpp:377 129 {*movsf_internal}
     (nil))
(insn 142 141 143 4 (set (reg:DF 25 xmm4 [orig:120 D.6159 ] [120])
        (float_extend:DF (reg:SF 21 xmm0 [orig:119 D.6158 ] [119]))) sim2fitman_fmtext_o.cpp:375 152 {*extendsfdf2_sse}
     (nil))
(insn 143 142 144 4 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:376 89 {*movdi_internal}
     (nil))
(insn 144 143 145 4 (set (reg:SF 21 xmm0 [orig:121 D.6158 ] [121])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [176])
                (const_int 368 [0x170])) [0 procpar_info_12(D)->pos2+0 S4 A64])) sim2fitman_fmtext_o.cpp:376 129 {*movsf_internal}
     (nil))
(insn 145 144 146 4 (set (reg:DF 24 xmm3 [orig:122 D.6159 ] [122])
        (float_extend:DF (reg:SF 21 xmm0 [orig:121 D.6158 ] [121]))) sim2fitman_fmtext_o.cpp:375 152 {*extendsfdf2_sse}
     (nil))
(insn 146 145 147 4 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:376 89 {*movdi_internal}
     (nil))
(insn 147 146 148 4 (set (reg:SF 21 xmm0 [orig:123 D.6158 ] [123])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [177])
                (const_int 364 [0x16c])) [0 procpar_info_12(D)->pos1+0 S4 A32])) sim2fitman_fmtext_o.cpp:376 129 {*movsf_internal}
     (nil))
(insn 148 147 149 4 (set (reg:DF 23 xmm2 [orig:124 D.6159 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.6158 ] [123]))) sim2fitman_fmtext_o.cpp:375 152 {*extendsfdf2_sse}
     (nil))
(insn 149 148 150 4 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:376 89 {*movdi_internal}
     (nil))
(insn 150 149 151 4 (set (reg:SF 21 xmm0 [orig:125 D.6158 ] [125])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [178])
                (const_int 356 [0x164])) [0 procpar_info_12(D)->tr+0 S4 A32])) sim2fitman_fmtext_o.cpp:376 129 {*movsf_internal}
     (nil))
(insn 151 150 152 4 (set (reg:DF 22 xmm1 [orig:126 D.6159 ] [126])
        (float_extend:DF (reg:SF 21 xmm0 [orig:125 D.6158 ] [125]))) sim2fitman_fmtext_o.cpp:375 152 {*extendsfdf2_sse}
     (nil))
(insn 152 151 153 4 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:376 89 {*movdi_internal}
     (nil))
(insn 153 152 154 4 (set (reg:SF 21 xmm0 [orig:127 D.6158 ] [127])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [179])
                (const_int 352 [0x160])) [0 procpar_info_12(D)->te+0 S4 A64])) sim2fitman_fmtext_o.cpp:376 129 {*movsf_internal}
     (nil))
(insn 154 153 155 4 (set (reg:DF 21 xmm0 [orig:128 D.6159 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.6158 ] [127]))) sim2fitman_fmtext_o.cpp:375 152 {*extendsfdf2_sse}
     (nil))
(insn 155 154 162 4 (set (reg:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 162 155 163 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fd28ff4a630 *.LC8>)) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 163 162 164 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [180])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 164 163 165 4 (set (reg:QI 0 ax)
        (const_int 6 [0x6])) sim2fitman_fmtext_o.cpp:377 93 {*movqi_internal}
     (nil))
(call_insn 165 164 166 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:377 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (expr_list:DF (use (reg:DF 24 xmm3))
                                (expr_list:DF (use (reg:DF 25 xmm4))
                                    (expr_list:DF (use (reg:DF 26 xmm5))
                                        (nil)))))))))))
(insn 166 165 167 4 (set (reg:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 167 166 168 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [181])) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 168 167 169 4 (set (reg:DI 1 dx)
        (const_int 13 [0xd])) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 169 168 170 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 170 169 171 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fd28ff4a6c0 *.LC9>)) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(call_insn 171 170 172 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fd2903a2000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:379 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 172 171 173 4 (set (reg:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(insn 173 172 174 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [182])) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(insn 175 174 176 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(insn 176 175 177 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fd28ff4a750 *.LC10>)) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(call_insn 177 176 178 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fd2903a2000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:381 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 178 177 179 4 (set (reg:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 179 178 180 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [183])) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 180 179 181 4 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 181 180 182 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 182 181 183 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fd28ff4a7e0 *.LC11>)) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(call_insn 183 182 184 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7fd2903a2000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:383 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 184 183 222 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131 184 185
(code_label 222 184 185 5 34 "" [1 uses])
(note 185 222 186 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 5 (set (reg:SI 0 ax [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) sim2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 187 186 188 5 (set (reg:DI 1 dx [orig:129 D.6166 ] [129])
        (sign_extend:DI (reg:SI 0 ax [184]))) sim2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 5 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 189 188 190 5 (set (reg:DI 0 ax [orig:130 D.6166 ] [130])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [185])
                (const_int 16 [0x10])) [0 main_header_71(D)->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 190 189 191 5 (parallel [
            (set (reg:DI 0 ax [orig:131 D.6166 ] [131])
                (ashift:DI (reg:DI 0 ax [orig:130 D.6166 ] [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:393 512 {*ashldi3_1}
     (nil))
(insn 191 190 192 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 1 dx [orig:129 D.6166 ] [129])
            (reg:DI 0 ax [orig:131 D.6166 ] [131]))) sim2fitman_fmtext_o.cpp:393 8 {*cmpdi_1}
     (nil))
(jump_insn 192 191 193 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 225)
            (pc))) sim2fitman_fmtext_o.cpp:393 612 {*jcc_1}
     (nil)
 -> 225)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 132 133 134 135 136 137 138 139 140 141 142 186 187 188 189 190 191
(note 193 192 194 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 6 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) sim2fitman_fmtext_o.cpp:394 90 {*movsi_internal}
     (nil))
(insn 195 194 196 6 (set (reg:DI 0 ax [orig:132 D.6162 ] [132])
        (sign_extend:DI (reg:SI 0 ax [186]))) sim2fitman_fmtext_o.cpp:394 142 {*extendsidi2_rex64}
     (nil))
(insn 196 195 197 6 (parallel [
            (set (reg:DI 1 dx [orig:133 D.6162 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6162 ] [132])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:394 512 {*ashldi3_1}
     (nil))
(insn 197 196 198 6 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])) sim2fitman_fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 198 197 199 6 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6167 ] [134])
                (plus:DI (reg/f:DI 0 ax [187])
                    (reg:DI 1 dx [orig:133 D.6162 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:394 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6162 ] [133]))
        (nil)))
(insn 199 198 200 6 (set (reg:SF 21 xmm0 [orig:135 D.6158 ] [135])
        (mem:SF (reg/f:DI 0 ax [orig:134 D.6167 ] [134]) [0 *_77+0 S4 A32])) sim2fitman_fmtext_o.cpp:394 129 {*movsf_internal}
     (nil))
(insn 200 199 201 6 (set (reg:DF 21 xmm0 [orig:136 D.6159 ] [136])
        (float_extend:DF (reg:SF 21 xmm0 [orig:135 D.6158 ] [135]))) sim2fitman_fmtext_o.cpp:394 152 {*extendsfdf2_sse}
     (nil))
(insn 201 200 203 6 (set (reg:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 203 201 204 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fd28ff4a870 *.LC12>)) sim2fitman_fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 204 203 205 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [188])) sim2fitman_fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 205 204 206 6 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:394 93 {*movqi_internal}
     (nil))
(call_insn 206 205 207 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:394 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 207 206 208 6 (set (reg:SI 0 ax [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) sim2fitman_fmtext_o.cpp:395 90 {*movsi_internal}
     (nil))
(insn 208 207 209 6 (set (reg:DI 0 ax [orig:137 D.6168 ] [137])
        (sign_extend:DI (reg:SI 0 ax [189]))) sim2fitman_fmtext_o.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 209 208 210 6 (parallel [
            (set (reg:DI 0 ax [orig:138 D.6168 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 D.6168 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:395 218 {*adddi_1}
     (nil))
(insn 210 209 211 6 (parallel [
            (set (reg:DI 1 dx [orig:139 D.6168 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.6168 ] [138])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:395 512 {*ashldi3_1}
     (nil))
(insn 211 210 212 6 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])) sim2fitman_fmtext_o.cpp:395 89 {*movdi_internal}
     (nil))
(insn 212 211 213 6 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.6167 ] [140])
                (plus:DI (reg/f:DI 0 ax [190])
                    (reg:DI 1 dx [orig:139 D.6168 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:395 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.6168 ] [139]))
        (nil)))
(insn 213 212 214 6 (set (reg:SF 21 xmm0 [orig:141 D.6158 ] [141])
        (mem:SF (reg/f:DI 0 ax [orig:140 D.6167 ] [140]) [0 *_84+0 S4 A32])) sim2fitman_fmtext_o.cpp:395 129 {*movsf_internal}
     (nil))
(insn 214 213 215 6 (set (reg:DF 21 xmm0 [orig:142 D.6159 ] [142])
        (float_extend:DF (reg:SF 21 xmm0 [orig:141 D.6158 ] [141]))) sim2fitman_fmtext_o.cpp:395 152 {*extendsfdf2_sse}
     (nil))
(insn 215 214 217 6 (set (reg:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:395 89 {*movdi_internal}
     (nil))
(insn 217 215 218 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fd28ff4a870 *.LC12>)) sim2fitman_fmtext_o.cpp:395 89 {*movdi_internal}
     (nil))
(insn 218 217 219 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [191])) sim2fitman_fmtext_o.cpp:395 89 {*movdi_internal}
     (nil))
(insn 219 218 220 6 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:395 93 {*movqi_internal}
     (nil))
(call_insn 220 219 221 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7fd29039c870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:395 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 221 220 239 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:393 217 {*addsi_1}
     (nil))
(jump_insn 239 221 240 6 (set (pc)
        (label_ref 222)) sim2fitman_fmtext_o.cpp:393 654 {jump}
     (nil)
 -> 222)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 240 239 225)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 225 240 226 7 33 "" [1 uses])
(note 226 225 227 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:397 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 228 227 229 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 244)
            (pc))) sim2fitman_fmtext_o.cpp:397 612 {*jcc_1}
     (nil)
 -> 244)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 192
(note 229 228 230 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 230 229 231 8 (set (reg:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:398 89 {*movdi_internal}
     (nil))
(insn 231 230 232 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [192])) sim2fitman_fmtext_o.cpp:398 89 {*movdi_internal}
     (nil))
(call_insn 232 231 244 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fd290161288 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:398 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 9, flags: (NEW, RTL, MODIFIED)
;;  pred:       7
;;              3 [100.0%] 
;;              8 [100.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 244 232 243 10 35 "" [2 uses])
(note 243 244 245 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 245 243 235 10 (const_int 0 [0]) sim2fitman_fmtext_o.cpp:401 684 {nop}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 235 245 236 9 30 "" [0 uses])
(note 236 235 246 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 246 236 0 NOTE_INSN_DELETED)
