
;; Function int read_procpar(Procpar_info*, char*, FILE*, bool*, InFile_struct*, Data_file_header*) (_Z12read_procparP12Procpar_infoPcP8_IO_FILEPbP13InFile_structP16Data_file_header, funcdef_no=2, decl_uid=5410, cgraph_uid=2, symbol_order=2)

      Creating newreg=346
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=347
Removing SCRATCH in insn #841 (nop 3)
rescanning insn with uid = 841.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=752, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=736, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r346
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 13:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 14:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 23:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) r {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 50:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) q {*cmpqi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 65:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 66:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 70:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 83:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 85:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 92:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 104:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 112:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 115:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 118:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 123:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 134:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 142:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 145:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 148:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 160:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 167:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 168:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 169:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 170:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 173:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 175:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 179:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=348, assigning class SSE_REGS to r348
  179: r348:SF=float_trunc(r105:DF)
      REG_DEAD r105:DF
    Inserting insn reload after:
  924: [frame:DI-0x2a4]=r348:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 924:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 180:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 181:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 184:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 187:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 193:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 200:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 201:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 204:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 206:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=8,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=18,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 209:  (0) r  (1) Yj {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=6,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 211:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 217:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 224:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 225:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 228:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 230:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 240:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 247:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 248:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 251:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 253:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 263:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 270:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 271:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 274:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 276:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 277:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 286:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 293:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 294:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 297:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 298:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 299:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 308:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 315:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 316:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 319:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 321:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 329:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 330:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 337:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 338:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 341:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 343:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 349:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 351:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 352:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 354:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 355:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 360:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 361:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 368:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 369:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 372:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 374:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 379:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 380:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 381:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 382:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 383:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 386:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 392:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 399:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 400:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 403:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 404:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 405:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 410:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 411:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 416:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 417:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 424:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 425:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 428:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 430:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 435:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 436:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 442:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 449:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 450:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 453:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 455:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 461:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 466:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 467:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 474:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 475:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 478:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 479:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 480:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 486:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 492:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 499:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 500:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 503:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 505:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 510:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 511:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 517:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 524:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 525:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 528:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 529:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 530:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 535:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 536:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 539:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 540:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 545:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 551:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 563:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 564:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 565:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 566:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 567:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 568:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 570:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 574:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 577:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 578:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) rBw {*tablejump_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 586:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 587:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 588:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 593:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 594:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 595:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 600:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 601:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 602:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 607:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 608:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 609:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 614:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 615:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 616:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 621:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 622:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 623:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 628:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 629:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 630:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 635:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 636:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 637:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 642:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 643:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 644:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 649:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 650:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 651:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 656:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 657:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 658:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 663:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 664:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 665:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 670:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 671:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 672:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 675:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 676:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 677:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 678:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 679:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 680:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 681:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 682:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 683:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 684:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 685:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 686:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 687:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 688:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 689:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 690:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 691:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 692:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 693:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 694:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 696:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 697:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 698:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 699:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 700:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 701:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 702:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 703:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 704:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 705:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 706:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 707:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 709:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 710:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 711:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 712:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 713:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 714:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 715:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 716:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 718:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 719:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 720:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 721:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 724:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 725:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) q {*cmpqi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 729:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 730:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 732:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 734:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=349, assigning class SSE_REGS to r349
  734: r349:SF=float_trunc(r174:DF)
      REG_DEAD r174:DF
    Inserting insn reload after:
  925: [frame:DI-0x2a0]=r349:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 925:  (0) m  (1) v {*movsf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 736:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 738:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 740:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (0) q {*cmpqi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 744:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=4,overall=18,losers=1,rld_nregs=0
            alt=5: Bad operand -- refuse
          alt=6,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=8,overall=12,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=9,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=1216,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=1216,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=13,overall=612,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=1215,losers=2 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
      Creating newreg=350, assigning class NO_REGS to secondary r350
  745: r350:SF=r325:SF
      REG_DEAD r325:SF
    Inserting the sec. move after:
  926: xmm0:SF=r350:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=624,losers=2 -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=7,overall=1,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 926:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 746:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) r {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 752:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 757:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 760:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 763:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 764:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 765:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 766:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 769:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 770:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 772:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 774:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=351, assigning class SSE_REGS to r351
  774: r351:SF=float_trunc(r178:DF)
      REG_DEAD r178:DF
    Inserting insn reload after:
  927: [frame:DI-0x2a0]=r351:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 927:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 780:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 781:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 782:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 785:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 786:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 787:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 788:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 789:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 790:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 791:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 793:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 794:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 795:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 796:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 797:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 801:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 802:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 803:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 804:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 805:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 806:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 807:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 808:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 809:  (0) r  (1) 0  (2) mr {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 810:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 811:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 812:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 813:  (0) r  (1) 0  (2) mr {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 817:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 818
	 Choosing alt 0 in insn 818:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 819:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 820:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 821:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 822:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 823:  (0) r  (1) rm {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 826:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 831:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 841:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r347
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 843:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78

********** Pseudo live ranges #1: **********

  BB 77
   Insn 843: point = 0
  BB 78
   Insn 846: point = 0
  BB 76
   Insn 842: point = 0
   Insn 841: point = 0
   Insn 840: point = 1
   Insn 836: point = 2
  BB 74
   Insn 921: point = 5
   Insn 826: point = 5
  BB 3
   Insn 851: point = 6
   Insn 37: point = 6
  BB 47
   Insn 889: point = 7
   Insn 554: point = 7
  BB 75
   Insn 831: point = 8
  BB 73
   Insn 824: point = 9
   Insn 823: point = 9
   Insn 822: point = 10
   Insn 821: point = 12
   Insn 820: point = 14
   Insn 819: point = 15
   Insn 818: point = 16
   Insn 817: point = 18
   Insn 813: point = 19
   Insn 812: point = 21
   Insn 811: point = 23
   Insn 810: point = 25
   Insn 809: point = 26
   Insn 808: point = 28
   Insn 807: point = 30
   Insn 806: point = 32
   Insn 805: point = 33
   Insn 804: point = 35
   Insn 803: point = 36
   Insn 802: point = 37
   Insn 801: point = 38
   Insn 800: point = 40
   Insn 799: point = 41
   Insn 798: point = 41
   Insn 797: point = 42
   Insn 796: point = 43
   Insn 795: point = 44
   Insn 794: point = 46
   Insn 793: point = 47
   Insn 792: point = 47
   Insn 791: point = 48
   Insn 790: point = 48
   Insn 789: point = 48
   Insn 788: point = 49
   Insn 787: point = 50
   Insn 786: point = 51
   Insn 785: point = 52
  BB 72
   Insn 782: point = 53
   Insn 781: point = 54
   Insn 780: point = 55
  BB 70
   Insn 761: point = 56
   Insn 760: point = 56
  BB 68
   Insn 917: point = 58
   Insn 752: point = 58
  BB 69
   Insn 757: point = 59
  BB 67
   Insn 749: point = 60
   Insn 748: point = 60
   Insn 747: point = 61
   Insn 746: point = 62
   Insn 926: point = 62
	Hard reg 21 is preferable by r350 with profit 1
   Insn 745: point = 63
	Hard reg 21 is preferable by r350 with profit 1
	Hard reg 0 is preferable by r350 with profit 1
   Insn 744: point = 65
  BB 66
   Insn 742: point = 66
   Insn 741: point = 66
   Insn 740: point = 67
   Insn 739: point = 69
   Insn 738: point = 70
   Insn 737: point = 70
   Insn 736: point = 71
  BB 71
   Insn 919: point = 72
   Insn 927: point = 72
   Insn 774: point = 73
   Insn 773: point = 75
   Insn 772: point = 76
   Insn 771: point = 76
   Insn 770: point = 77
   Insn 769: point = 77
   Insn 768: point = 78
   Insn 767: point = 78
   Insn 766: point = 79
   Insn 765: point = 80
   Insn 764: point = 80
   Insn 763: point = 80
  BB 65
   Insn 925: point = 80
   Insn 734: point = 81
   Insn 733: point = 83
   Insn 732: point = 84
   Insn 731: point = 84
   Insn 730: point = 85
   Insn 729: point = 85
  BB 64
   Insn 727: point = 86
   Insn 726: point = 86
   Insn 725: point = 87
   Insn 724: point = 89
   Insn 723: point = 90
   Insn 722: point = 90
   Insn 721: point = 91
   Insn 720: point = 92
   Insn 719: point = 92
   Insn 718: point = 92
   Insn 717: point = 92
   Insn 716: point = 92
   Insn 715: point = 92
   Insn 714: point = 93
   Insn 713: point = 94
   Insn 712: point = 95
   Insn 711: point = 96
   Insn 710: point = 97
   Insn 709: point = 99
   Insn 708: point = 101
   Insn 707: point = 103
   Insn 706: point = 104
   Insn 705: point = 105
   Insn 704: point = 106
   Insn 703: point = 107
   Insn 702: point = 108
   Insn 701: point = 109
   Insn 700: point = 110
   Insn 699: point = 111
   Insn 698: point = 112
   Insn 697: point = 113
   Insn 696: point = 114
   Insn 695: point = 115
   Insn 694: point = 116
   Insn 693: point = 117
   Insn 692: point = 118
   Insn 691: point = 119
   Insn 690: point = 120
   Insn 689: point = 121
   Insn 688: point = 122
   Insn 687: point = 123
   Insn 686: point = 124
   Insn 685: point = 125
   Insn 684: point = 126
   Insn 683: point = 127
   Insn 682: point = 128
   Insn 681: point = 129
   Insn 680: point = 130
   Insn 679: point = 131
   Insn 678: point = 132
   Insn 677: point = 133
   Insn 676: point = 134
   Insn 675: point = 135
  BB 62
   Insn 915: point = 136
   Insn 665: point = 136
   Insn 664: point = 137
   Insn 663: point = 139
  BB 61
   Insn 913: point = 140
   Insn 658: point = 140
   Insn 657: point = 141
   Insn 656: point = 143
  BB 60
   Insn 911: point = 144
   Insn 651: point = 144
   Insn 650: point = 145
   Insn 649: point = 147
  BB 59
   Insn 909: point = 148
   Insn 644: point = 148
   Insn 643: point = 149
   Insn 642: point = 151
  BB 58
   Insn 907: point = 152
   Insn 637: point = 152
   Insn 636: point = 153
   Insn 635: point = 155
  BB 57
   Insn 905: point = 156
   Insn 630: point = 156
   Insn 629: point = 157
   Insn 628: point = 159
  BB 56
   Insn 903: point = 160
   Insn 623: point = 160
   Insn 622: point = 161
   Insn 621: point = 163
  BB 55
   Insn 901: point = 164
   Insn 616: point = 164
   Insn 615: point = 165
   Insn 614: point = 167
  BB 54
   Insn 899: point = 168
   Insn 609: point = 168
   Insn 608: point = 169
   Insn 607: point = 171
  BB 53
   Insn 897: point = 172
   Insn 602: point = 172
   Insn 601: point = 173
   Insn 600: point = 175
  BB 52
   Insn 895: point = 176
   Insn 595: point = 176
   Insn 594: point = 177
   Insn 593: point = 179
  BB 51
   Insn 893: point = 180
   Insn 588: point = 180
   Insn 587: point = 181
   Insn 586: point = 183
  BB 63
   Insn 672: point = 184
   Insn 671: point = 185
   Insn 670: point = 187
  BB 50
   Insn 579: point = 188
   Insn 578: point = 189
   Insn 577: point = 191
  BB 49
   Insn 576: point = 192
   Insn 575: point = 192
   Insn 574: point = 192
   Insn 573: point = 193
   Insn 572: point = 194
   Insn 571: point = 194
   Insn 570: point = 195
   Insn 569: point = 195
   Insn 568: point = 195
   Insn 567: point = 196
   Insn 566: point = 196
   Insn 565: point = 197
   Insn 564: point = 198
   Insn 563: point = 199
  BB 8
   Insn 63: point = 200
   Insn 62: point = 200
  BB 6
   Insn 853: point = 202
   Insn 54: point = 202
  BB 7
   Insn 59: point = 203
  BB 5
   Insn 52: point = 204
   Insn 51: point = 204
   Insn 50: point = 205
   Insn 49: point = 207
  BB 4
   Insn 47: point = 208
   Insn 46: point = 208
   Insn 45: point = 209
   Insn 44: point = 210
   Insn 43: point = 210
   Insn 42: point = 211
  BB 48
   Insn 891: point = 212
  BB 46
   Insn 552: point = 212
   Insn 551: point = 212
   Insn 550: point = 213
   Insn 549: point = 214
   Insn 548: point = 215
   Insn 547: point = 216
   Insn 546: point = 216
   Insn 545: point = 217
   Insn 544: point = 218
   Insn 543: point = 218
   Insn 542: point = 219
   Insn 541: point = 219
   Insn 540: point = 220
   Insn 539: point = 221
  BB 43
   Insn 887: point = 222
   Insn 511: point = 222
   Insn 510: point = 223
   Insn 509: point = 224
   Insn 508: point = 226
   Insn 507: point = 227
   Insn 506: point = 227
   Insn 505: point = 228
   Insn 504: point = 228
   Insn 503: point = 229
   Insn 502: point = 230
   Insn 501: point = 231
   Insn 500: point = 231
   Insn 499: point = 231
  BB 45
   Insn 536: point = 231
   Insn 535: point = 232
   Insn 534: point = 233
   Insn 533: point = 235
   Insn 532: point = 236
   Insn 531: point = 236
   Insn 530: point = 237
   Insn 529: point = 237
   Insn 528: point = 238
   Insn 527: point = 239
   Insn 526: point = 240
   Insn 525: point = 240
   Insn 524: point = 240
  BB 44
   Insn 522: point = 240
   Insn 521: point = 240
   Insn 520: point = 241
   Insn 519: point = 242
   Insn 518: point = 242
   Insn 517: point = 243
   Insn 516: point = 243
  BB 42
   Insn 497: point = 244
   Insn 496: point = 244
   Insn 495: point = 245
   Insn 494: point = 246
   Insn 493: point = 246
   Insn 492: point = 247
   Insn 491: point = 247
  BB 41
   Insn 885: point = 248
   Insn 486: point = 248
   Insn 485: point = 249
   Insn 484: point = 250
   Insn 483: point = 252
   Insn 482: point = 253
   Insn 481: point = 253
   Insn 480: point = 254
   Insn 479: point = 254
   Insn 478: point = 255
   Insn 477: point = 256
   Insn 476: point = 257
   Insn 475: point = 257
   Insn 474: point = 257
  BB 40
   Insn 472: point = 257
   Insn 471: point = 257
   Insn 470: point = 258
   Insn 469: point = 259
   Insn 468: point = 259
   Insn 467: point = 260
   Insn 466: point = 260
  BB 39
   Insn 883: point = 261
   Insn 461: point = 261
   Insn 460: point = 262
   Insn 459: point = 263
   Insn 458: point = 265
   Insn 457: point = 266
   Insn 456: point = 266
   Insn 455: point = 267
   Insn 454: point = 267
   Insn 453: point = 268
   Insn 452: point = 269
   Insn 451: point = 270
   Insn 450: point = 270
   Insn 449: point = 270
  BB 38
   Insn 447: point = 270
   Insn 446: point = 270
   Insn 445: point = 271
   Insn 444: point = 272
   Insn 443: point = 272
   Insn 442: point = 273
   Insn 441: point = 273
  BB 37
   Insn 881: point = 274
   Insn 436: point = 274
   Insn 435: point = 275
   Insn 434: point = 276
   Insn 433: point = 278
   Insn 432: point = 279
   Insn 431: point = 279
   Insn 430: point = 280
   Insn 429: point = 280
   Insn 428: point = 281
   Insn 427: point = 282
   Insn 426: point = 283
   Insn 425: point = 283
   Insn 424: point = 283
  BB 36
   Insn 422: point = 283
   Insn 421: point = 283
   Insn 420: point = 284
   Insn 419: point = 285
   Insn 418: point = 285
   Insn 417: point = 286
   Insn 416: point = 286
  BB 35
   Insn 879: point = 287
   Insn 411: point = 287
   Insn 410: point = 288
   Insn 409: point = 289
   Insn 408: point = 291
   Insn 407: point = 292
   Insn 406: point = 292
   Insn 405: point = 293
   Insn 404: point = 293
   Insn 403: point = 294
   Insn 402: point = 295
   Insn 401: point = 296
   Insn 400: point = 296
   Insn 399: point = 296
  BB 34
   Insn 397: point = 296
   Insn 396: point = 296
   Insn 395: point = 297
   Insn 394: point = 298
   Insn 393: point = 298
   Insn 392: point = 299
   Insn 391: point = 299
  BB 33
   Insn 877: point = 300
   Insn 386: point = 300
   Insn 385: point = 301
   Insn 384: point = 302
   Insn 383: point = 304
   Insn 382: point = 305
   Insn 381: point = 307
   Insn 380: point = 308
   Insn 379: point = 309
   Insn 378: point = 310
   Insn 377: point = 312
   Insn 376: point = 313
   Insn 375: point = 313
   Insn 374: point = 314
   Insn 373: point = 314
   Insn 372: point = 315
   Insn 371: point = 316
   Insn 370: point = 317
   Insn 369: point = 317
   Insn 368: point = 317
  BB 32
   Insn 366: point = 317
   Insn 365: point = 317
   Insn 364: point = 318
   Insn 363: point = 319
   Insn 362: point = 319
   Insn 361: point = 320
   Insn 360: point = 320
  BB 31
   Insn 875: point = 321
   Insn 355: point = 321
   Insn 354: point = 322
   Insn 353: point = 323
   Insn 352: point = 325
   Insn 351: point = 326
   Insn 350: point = 328
   Insn 349: point = 329
   Insn 348: point = 330
   Insn 347: point = 331
   Insn 346: point = 333
   Insn 345: point = 334
   Insn 344: point = 334
   Insn 343: point = 335
   Insn 342: point = 335
   Insn 341: point = 336
   Insn 340: point = 337
   Insn 339: point = 338
   Insn 338: point = 338
   Insn 337: point = 338
  BB 30
   Insn 335: point = 338
   Insn 334: point = 338
   Insn 333: point = 339
   Insn 332: point = 340
   Insn 331: point = 340
   Insn 330: point = 341
   Insn 329: point = 341
  BB 29
   Insn 873: point = 342
   Insn 324: point = 342
   Insn 323: point = 342
   Insn 322: point = 343
   Insn 321: point = 344
   Insn 320: point = 345
   Insn 319: point = 346
   Insn 318: point = 347
   Insn 317: point = 348
   Insn 316: point = 348
   Insn 315: point = 348
  BB 28
   Insn 313: point = 348
   Insn 312: point = 348
   Insn 311: point = 349
   Insn 310: point = 350
   Insn 309: point = 350
   Insn 308: point = 351
   Insn 307: point = 351
  BB 27
   Insn 871: point = 352
   Insn 302: point = 352
   Insn 301: point = 352
   Insn 300: point = 353
   Insn 299: point = 354
   Insn 298: point = 355
   Insn 297: point = 356
   Insn 296: point = 357
   Insn 295: point = 358
   Insn 294: point = 358
   Insn 293: point = 358
  BB 26
   Insn 291: point = 358
   Insn 290: point = 358
   Insn 289: point = 359
   Insn 288: point = 360
   Insn 287: point = 360
   Insn 286: point = 361
   Insn 285: point = 361
  BB 25
   Insn 869: point = 362
   Insn 280: point = 362
   Insn 279: point = 362
   Insn 278: point = 363
   Insn 277: point = 364
   Insn 276: point = 365
   Insn 275: point = 367
   Insn 274: point = 368
   Insn 273: point = 369
   Insn 272: point = 370
   Insn 271: point = 370
   Insn 270: point = 370
  BB 24
   Insn 268: point = 370
   Insn 267: point = 370
   Insn 266: point = 371
   Insn 265: point = 372
   Insn 264: point = 372
   Insn 263: point = 373
   Insn 262: point = 373
  BB 23
   Insn 867: point = 374
   Insn 257: point = 374
   Insn 256: point = 374
   Insn 255: point = 375
   Insn 254: point = 376
   Insn 253: point = 377
   Insn 252: point = 379
   Insn 251: point = 380
   Insn 250: point = 381
   Insn 249: point = 382
   Insn 248: point = 382
   Insn 247: point = 382
  BB 22
   Insn 245: point = 382
   Insn 244: point = 382
   Insn 243: point = 383
   Insn 242: point = 384
   Insn 241: point = 384
   Insn 240: point = 385
   Insn 239: point = 385
  BB 21
   Insn 865: point = 386
   Insn 234: point = 386
   Insn 233: point = 386
   Insn 232: point = 387
   Insn 231: point = 388
   Insn 230: point = 389
   Insn 229: point = 391
   Insn 228: point = 392
   Insn 227: point = 393
   Insn 226: point = 394
   Insn 225: point = 394
   Insn 224: point = 394
  BB 20
   Insn 222: point = 394
   Insn 221: point = 394
   Insn 220: point = 395
   Insn 219: point = 396
   Insn 218: point = 396
   Insn 217: point = 397
   Insn 216: point = 397
  BB 19
   Insn 863: point = 398
   Insn 211: point = 398
   Insn 210: point = 399
   Insn 209: point = 400
   Insn 208: point = 401
   Insn 207: point = 401
   Insn 206: point = 402
   Insn 205: point = 402
   Insn 204: point = 403
   Insn 203: point = 404
   Insn 202: point = 405
   Insn 201: point = 405
   Insn 200: point = 405
  BB 18
   Insn 198: point = 405
   Insn 197: point = 405
   Insn 196: point = 406
   Insn 195: point = 407
   Insn 194: point = 407
   Insn 193: point = 408
   Insn 192: point = 408
  BB 17
   Insn 861: point = 409
   Insn 187: point = 409
   Insn 186: point = 410
   Insn 185: point = 412
   Insn 184: point = 413
   Insn 183: point = 414
   Insn 182: point = 415
   Insn 181: point = 417
   Insn 180: point = 418
   Insn 924: point = 419
   Insn 179: point = 420
   Insn 178: point = 422
   Insn 177: point = 423
   Insn 176: point = 423
   Insn 175: point = 424
   Insn 174: point = 424
   Insn 173: point = 425
   Insn 172: point = 426
   Insn 171: point = 427
   Insn 170: point = 427
   Insn 169: point = 427
   Insn 168: point = 427
   Insn 167: point = 428
  BB 16
   Insn 165: point = 429
   Insn 164: point = 429
   Insn 163: point = 430
   Insn 162: point = 431
   Insn 161: point = 431
   Insn 160: point = 432
   Insn 159: point = 432
  BB 15
   Insn 859: point = 433
   Insn 154: point = 433
   Insn 153: point = 434
   Insn 152: point = 435
   Insn 151: point = 437
   Insn 150: point = 438
   Insn 149: point = 438
   Insn 148: point = 439
   Insn 147: point = 439
   Insn 146: point = 439
   Insn 145: point = 440
   Insn 144: point = 441
   Insn 143: point = 442
   Insn 142: point = 442
   Insn 141: point = 442
  BB 14
   Insn 139: point = 442
   Insn 138: point = 442
   Insn 137: point = 443
   Insn 136: point = 444
   Insn 135: point = 444
   Insn 134: point = 445
   Insn 133: point = 445
  BB 13
   Insn 857: point = 446
   Insn 128: point = 446
   Insn 127: point = 447
   Insn 126: point = 448
   Insn 125: point = 450
   Insn 124: point = 452
   Insn 123: point = 453
   Insn 122: point = 454
   Insn 121: point = 455
   Insn 120: point = 456
   Insn 119: point = 456
   Insn 118: point = 457
   Insn 117: point = 457
   Insn 116: point = 457
   Insn 115: point = 458
   Insn 114: point = 459
   Insn 113: point = 460
   Insn 112: point = 460
   Insn 111: point = 460
  BB 12
   Insn 109: point = 460
   Insn 108: point = 460
   Insn 107: point = 461
   Insn 106: point = 462
   Insn 105: point = 462
   Insn 104: point = 463
   Insn 103: point = 463
  BB 11
   Insn 855: point = 464
   Insn 98: point = 464
   Insn 97: point = 465
   Insn 96: point = 466
   Insn 95: point = 467
   Insn 94: point = 467
   Insn 93: point = 468
   Insn 92: point = 469
  BB 10
   Insn 90: point = 469
   Insn 89: point = 469
   Insn 88: point = 470
   Insn 87: point = 471
   Insn 86: point = 471
   Insn 85: point = 472
   Insn 84: point = 472
   Insn 83: point = 473
   Insn 82: point = 474
   Insn 81: point = 475
   Insn 80: point = 475
   Insn 79: point = 475
  BB 9
   Insn 77: point = 475
   Insn 76: point = 475
   Insn 75: point = 476
   Insn 74: point = 477
   Insn 73: point = 477
   Insn 72: point = 478
   Insn 71: point = 478
   Insn 70: point = 479
   Insn 69: point = 480
   Insn 68: point = 481
   Insn 67: point = 481
   Insn 66: point = 482
   Insn 65: point = 482
  BB 2
   Insn 35: point = 483
   Insn 34: point = 483
   Insn 33: point = 484
   Insn 32: point = 485
   Insn 31: point = 486
   Insn 30: point = 487
   Insn 29: point = 487
   Insn 28: point = 488
   Insn 27: point = 489
   Insn 26: point = 489
   Insn 25: point = 490
   Insn 24: point = 490
   Insn 23: point = 491
   Insn 22: point = 492
   Insn 21: point = 493
   Insn 20: point = 493
   Insn 19: point = 493
   Insn 18: point = 493
   Insn 17: point = 493
   Insn 16: point = 493
   Insn 15: point = 493
   Insn 14: point = 493
   Insn 13: point = 494
   Insn 12: point = 495
   Insn 9: point = 495
   Insn 7: point = 497
   Insn 6: point = 497
   Insn 5: point = 497
   Insn 4: point = 497
   Insn 3: point = 497
   Insn 2: point = 497
 r87: [3..8]
 r88: [200..203]
 r89: [56..59]
 r90: [485..486]
 r91: [483..484]
 r92: [208..209]
 r93: [204..205]
 r94: [475..476]
 r95: [469..470]
 r96: [464..466]
 r97: [460..461]
 r98: [453..455]
 r99: [449..450]
 r100: [446..448]
 r101: [442..443]
 r102: [436..437]
 r103: [433..435]
 r104: [429..430]
 r105: [421..422]
 r106: [413..415]
 r107: [405..406]
 r108: [398..400]
 r109: [394..395]
 r110: [386..389]
 r111: [382..383]
 r112: [374..377]
 r113: [370..371]
 r114: [362..365]
 r115: [358..359]
 r116: [348..349]
 r117: [338..339]
 r118: [332..333]
 r119: [329..331]
 r120: [324..326]
 r121: [321..323]
 r122: [317..318]
 r123: [311..312]
 r124: [308..310]
 r125: [303..305]
 r126: [300..302]
 r127: [296..297]
 r128: [290..291]
 r129: [287..289]
 r130: [283..284]
 r131: [277..278]
 r132: [274..276]
 r133: [270..271]
 r134: [264..265]
 r135: [261..263]
 r136: [257..258]
 r137: [251..252]
 r138: [248..250]
 r139: [244..245]
 r140: [225..226]
 r141: [222..224]
 r142: [240..241]
 r143: [234..235]
 r144: [231..233]
 r145: [214..215]
 r146: [212..213]
 r147: [198..199]
 r148: [196..197]
 r149: [192..193]
 r150: [180..181]
 r151: [176..177]
 r152: [172..173]
 r153: [168..169]
 r154: [164..165]
 r155: [160..161]
 r156: [156..157]
 r157: [152..153]
 r158: [148..149]
 r159: [144..145]
 r160: [140..141]
 r161: [136..137]
 r162: [184..185]
 r163: [131..133]
 r164: [128..130]
 r165: [123..125]
 r166: [120..122]
 r167: [117..119]
 r168: [114..116]
 r169: [100..101]
 r170: [98..99]
 r171: [95..97]
 r172: [88..89]
 r173: [86..87]
 r174: [82..83]
 r175: [68..69]
 r176: [66..67]
 r177: [60..61]
 r178: [74..75]
 r179: [39..40]
 r180: [36..38]
 r181: [27..33]
 r182: [29..30]
 r183: [27..28]
 r184: [20..26]
 r185: [22..23]
 r186: [20..21]
 r187: [17..19]
 r188: [11..12]
 r189: [9..10]
 r190: [1..2]
 r191: [493..494]
 r192: [490..492]
 r193: [489..491]
 r194: [487..488]
 r195: [210..211]
 r196: [206..207]
 r197: [481..482]
 r198: [479..480]
 r199: [477..478]
 r200: [473..474]
 r201: [471..472]
 r202: [467..468]
 r203: [464..465]
 r204: [462..463]
 r205: [458..459]
 r206: [456..457]
 r207: [453..454]
 r208: [451..452]
 r209: [446..447]
 r210: [444..445]
 r211: [440..441]
 r212: [438..439]
 r213: [433..434]
 r214: [431..432]
 r215: [427..428]
 r216: [425..426]
 r217: [423..424]
 r218: [416..418]
 r219: [416..417]
 r220: [413..414]
 r221: [409..410]
 r222: [411..412]
 r223: [407..408]
 r224: [403..404]
 r225: [401..402]
 r226: [398..399]
 r227: [396..397]
 r228: [392..393]
 r229: [390..391]
 r230: [387..388]
 r231: [384..385]
 r232: [380..381]
 r233: [378..379]
 r234: [375..376]
 r235: [372..373]
 r236: [368..369]
 r237: [366..367]
 r238: [363..364]
 r239: [360..361]
 r240: [356..357]
 r241: [353..355]
 r242: [352..354]
 r243: [350..351]
 r244: [346..347]
 r245: [343..345]
 r246: [342..344]
 r247: [340..341]
 r248: [336..337]
 r249: [334..335]
 r250: [329..330]
 r251: [327..328]
 r252: [324..325]
 r253: [321..322]
 r254: [319..320]
 r255: [315..316]
 r256: [313..314]
 r257: [308..309]
 r258: [306..307]
 r259: [303..304]
 r260: [300..301]
 r261: [298..299]
 r262: [294..295]
 r263: [292..293]
 r264: [287..288]
 r265: [285..286]
 r266: [281..282]
 r267: [279..280]
 r268: [274..275]
 r269: [272..273]
 r270: [268..269]
 r271: [266..267]
 r272: [261..262]
 r273: [259..260]
 r274: [255..256]
 r275: [253..254]
 r276: [248..249]
 r277: [246..247]
 r278: [229..230]
 r279: [227..228]
 r280: [222..223]
 r281: [242..243]
 r282: [238..239]
 r283: [236..237]
 r284: [231..232]
 r285: [219..221]
 r286: [218..220]
 r287: [216..217]
 r288: [194..195]
 r289: [190..191]
 r290: [188..189]
 r291: [182..183]
 r292: [178..179]
 r293: [174..175]
 r294: [170..171]
 r295: [166..167]
 r296: [162..163]
 r297: [158..159]
 r298: [154..155]
 r299: [150..151]
 r300: [146..147]
 r301: [142..143]
 r302: [138..139]
 r303: [186..187]
 r304: [134..135]
 r305: [131..132]
 r306: [128..129]
 r307: [126..127]
 r308: [123..124]
 r309: [120..121]
 r310: [117..118]
 r311: [114..115]
 r312: [112..113]
 r313: [109..111]
 r314: [109..110]
 r315: [107..108]
 r316: [104..106]
 r317: [104..105]
 r318: [102..103]
 r319: [95..96]
 r320: [92..94]
 r321: [92..93]
 r322: [90..91]
 r323: [84..85]
 r324: [70..71]
 r325: [64..65]
 r326: [78..79]
 r327: [76..77]
 r328: [53..55]
 r329: [53..54]
 r330: [51..52]
 r331: [49..50]
 r332: [47..48]
 r333: [45..46]
 r334: [43..44]
 r335: [41..42]
 r336: [36..37]
 r337: [34..35]
 r338: [31..32]
 r339: [24..25]
 r342: [15..16]
 r343: [17..18]
 r344: [13..14]
 r346: [495..496]
 r347: [0..0]
 r348: [419..420]
 r349: [80..81]
 r350: [62..63]
 r351: [72..73]
Compressing live ranges: from 497 to 441 - 88%
Ranges after the compression:
 r87: [3..4]
 r88: [179..180]
 r89: [47..48]
 r90: [431..432]
 r91: [429..430]
 r92: [185..186]
 r93: [181..182]
 r94: [421..422]
 r95: [415..416]
 r96: [411..412]
 r97: [407..408]
 r98: [401..402]
 r99: [397..398]
 r100: [395..396]
 r101: [391..392]
 r102: [385..386]
 r103: [383..384]
 r104: [379..380]
 r105: [371..372]
 r106: [365..366]
 r107: [357..358]
 r108: [351..352]
 r109: [347..348]
 r110: [341..342]
 r111: [337..338]
 r112: [331..332]
 r113: [327..328]
 r114: [321..322]
 r115: [317..318]
 r116: [309..310]
 r117: [301..302]
 r118: [295..296]
 r119: [293..294]
 r120: [289..290]
 r121: [287..288]
 r122: [283..284]
 r123: [277..278]
 r124: [275..276]
 r125: [271..272]
 r126: [269..270]
 r127: [265..266]
 r128: [259..260]
 r129: [257..258]
 r130: [253..254]
 r131: [247..248]
 r132: [245..246]
 r133: [241..242]
 r134: [235..236]
 r135: [233..234]
 r136: [229..230]
 r137: [223..224]
 r138: [221..222]
 r139: [217..218]
 r140: [199..200]
 r141: [197..198]
 r142: [213..214]
 r143: [207..208]
 r144: [205..206]
 r145: [191..192]
 r146: [189..190]
 r147: [177..178]
 r148: [175..176]
 r149: [171..172]
 r150: [159..160]
 r151: [155..156]
 r152: [151..152]
 r153: [147..148]
 r154: [143..144]
 r155: [139..140]
 r156: [135..136]
 r157: [131..132]
 r158: [127..128]
 r159: [123..124]
 r160: [119..120]
 r161: [115..116]
 r162: [163..164]
 r163: [111..112]
 r164: [109..110]
 r165: [105..106]
 r166: [103..104]
 r167: [101..102]
 r168: [99..100]
 r169: [87..88]
 r170: [85..86]
 r171: [83..84]
 r172: [77..78]
 r173: [75..76]
 r174: [71..72]
 r175: [57..58]
 r176: [55..56]
 r177: [49..50]
 r178: [63..64]
 r179: [31..32]
 r180: [29..30]
 r181: [21..26]
 r182: [23..24]
 r183: [21..22]
 r184: [15..20]
 r185: [17..18]
 r186: [15..16]
 r187: [13..14]
 r188: [7..8]
 r189: [5..6]
 r190: [1..2]
 r191: [437..438]
 r192: [435..436]
 r193: [435..436]
 r194: [433..434]
 r195: [187..188]
 r196: [183..184]
 r197: [427..428]
 r198: [425..426]
 r199: [423..424]
 r200: [419..420]
 r201: [417..418]
 r202: [413..414]
 r203: [411..412]
 r204: [409..410]
 r205: [405..406]
 r206: [403..404]
 r207: [401..402]
 r208: [399..400]
 r209: [395..396]
 r210: [393..394]
 r211: [389..390]
 r212: [387..388]
 r213: [383..384]
 r214: [381..382]
 r215: [377..378]
 r216: [375..376]
 r217: [373..374]
 r218: [367..368]
 r219: [367..368]
 r220: [365..366]
 r221: [361..362]
 r222: [363..364]
 r223: [359..360]
 r224: [355..356]
 r225: [353..354]
 r226: [351..352]
 r227: [349..350]
 r228: [345..346]
 r229: [343..344]
 r230: [341..342]
 r231: [339..340]
 r232: [335..336]
 r233: [333..334]
 r234: [331..332]
 r235: [329..330]
 r236: [325..326]
 r237: [323..324]
 r238: [321..322]
 r239: [319..320]
 r240: [315..316]
 r241: [313..314]
 r242: [313..314]
 r243: [311..312]
 r244: [307..308]
 r245: [305..306]
 r246: [305..306]
 r247: [303..304]
 r248: [299..300]
 r249: [297..298]
 r250: [293..294]
 r251: [291..292]
 r252: [289..290]
 r253: [287..288]
 r254: [285..286]
 r255: [281..282]
 r256: [279..280]
 r257: [275..276]
 r258: [273..274]
 r259: [271..272]
 r260: [269..270]
 r261: [267..268]
 r262: [263..264]
 r263: [261..262]
 r264: [257..258]
 r265: [255..256]
 r266: [251..252]
 r267: [249..250]
 r268: [245..246]
 r269: [243..244]
 r270: [239..240]
 r271: [237..238]
 r272: [233..234]
 r273: [231..232]
 r274: [227..228]
 r275: [225..226]
 r276: [221..222]
 r277: [219..220]
 r278: [203..204]
 r279: [201..202]
 r280: [197..198]
 r281: [215..216]
 r282: [211..212]
 r283: [209..210]
 r284: [205..206]
 r285: [195..196]
 r286: [195..196]
 r287: [193..194]
 r288: [173..174]
 r289: [169..170]
 r290: [167..168]
 r291: [161..162]
 r292: [157..158]
 r293: [153..154]
 r294: [149..150]
 r295: [145..146]
 r296: [141..142]
 r297: [137..138]
 r298: [133..134]
 r299: [129..130]
 r300: [125..126]
 r301: [121..122]
 r302: [117..118]
 r303: [165..166]
 r304: [113..114]
 r305: [111..112]
 r306: [109..110]
 r307: [107..108]
 r308: [105..106]
 r309: [103..104]
 r310: [101..102]
 r311: [99..100]
 r312: [97..98]
 r313: [95..96]
 r314: [95..96]
 r315: [93..94]
 r316: [91..92]
 r317: [91..92]
 r318: [89..90]
 r319: [83..84]
 r320: [81..82]
 r321: [81..82]
 r322: [79..80]
 r323: [73..74]
 r324: [59..60]
 r325: [53..54]
 r326: [67..68]
 r327: [65..66]
 r328: [45..46]
 r329: [45..46]
 r330: [43..44]
 r331: [41..42]
 r332: [39..40]
 r333: [37..38]
 r334: [35..36]
 r335: [33..34]
 r336: [29..30]
 r337: [27..28]
 r338: [25..26]
 r339: [19..20]
 r342: [11..12]
 r343: [13..14]
 r344: [9..10]
 r346: [439..440]
 r347: [0..0]
 r348: [369..370]
 r349: [69..70]
 r350: [51..52]
 r351: [61..62]

********** Assignment #1: **********

	 Assigning to 346 (cl=INDEX_REGS, orig=346, freq=1, tfirst=346, tfreq=1)...
	   Assign 0 to reload r346 (freq=1)
	 Assigning to 347 (cl=INDEX_REGS, orig=347, freq=1, tfirst=347, tfreq=1)...
	   Assign 2 to reload r347 (freq=1)
	 Assigning to 348 (cl=SSE_REGS, orig=348, freq=2, tfirst=348, tfreq=2)...
	   Assign 23 to reload r348 (freq=2)
	 Assigning to 349 (cl=SSE_REGS, orig=349, freq=2, tfirst=349, tfreq=2)...
	   Assign 24 to reload r349 (freq=2)
	 Assigning to 351 (cl=SSE_REGS, orig=351, freq=2, tfirst=351, tfreq=2)...
	   Assign 25 to reload r351 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 4):	 350
Changing spilled pseudos to memory in insn #745
Changing spilled pseudos to memory in insn #926
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 7 for insn #926
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 926:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 745:  (0) ?m  (1) rF {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=768, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=752, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 831
changing reg in insn 826
changing reg in insn 554
changing reg in insn 37
changing reg in insn 836
changing reg in insn 59
changing reg in insn 54
changing reg in insn 62
changing reg in insn 757
changing reg in insn 752
changing reg in insn 760
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
changing reg in insn 75
changing reg in insn 76
changing reg in insn 88
changing reg in insn 89
changing reg in insn 96
changing reg in insn 98
changing reg in insn 107
changing reg in insn 108
changing reg in insn 121
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 137
changing reg in insn 138
changing reg in insn 151
changing reg in insn 152
changing reg in insn 154
changing reg in insn 163
changing reg in insn 164
changing reg in insn 178
changing reg in insn 179
changing reg in insn 182
changing reg in insn 184
changing reg in insn 196
changing reg in insn 197
changing reg in insn 209
changing reg in insn 211
changing reg in insn 220
changing reg in insn 221
changing reg in insn 230
changing reg in insn 233
changing reg in insn 243
changing reg in insn 244
changing reg in insn 253
changing reg in insn 256
changing reg in insn 266
changing reg in insn 267
changing reg in insn 276
changing reg in insn 279
changing reg in insn 289
changing reg in insn 290
changing reg in insn 311
changing reg in insn 312
changing reg in insn 333
changing reg in insn 334
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 349
changing reg in insn 351
changing reg in insn 353
changing reg in insn 353
changing reg in insn 355
changing reg in insn 364
changing reg in insn 365
changing reg in insn 377
changing reg in insn 378
changing reg in insn 378
changing reg in insn 380
changing reg in insn 382
changing reg in insn 384
changing reg in insn 384
changing reg in insn 386
changing reg in insn 395
changing reg in insn 396
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 411
changing reg in insn 420
changing reg in insn 421
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 436
changing reg in insn 445
changing reg in insn 446
changing reg in insn 458
changing reg in insn 459
changing reg in insn 459
changing reg in insn 461
changing reg in insn 470
changing reg in insn 471
changing reg in insn 483
changing reg in insn 484
changing reg in insn 484
changing reg in insn 486
changing reg in insn 495
changing reg in insn 496
changing reg in insn 508
changing reg in insn 509
changing reg in insn 509
changing reg in insn 511
changing reg in insn 520
changing reg in insn 521
changing reg in insn 533
changing reg in insn 534
changing reg in insn 534
changing reg in insn 536
changing reg in insn 548
changing reg in insn 549
changing reg in insn 550
changing reg in insn 551
changing reg in insn 563
changing reg in insn 564
changing reg in insn 565
changing reg in insn 566
changing reg in insn 573
changing reg in insn 587
changing reg in insn 588
changing reg in insn 594
changing reg in insn 595
changing reg in insn 601
changing reg in insn 602
changing reg in insn 608
changing reg in insn 609
changing reg in insn 615
changing reg in insn 616
changing reg in insn 622
changing reg in insn 623
changing reg in insn 629
changing reg in insn 630
changing reg in insn 636
changing reg in insn 637
changing reg in insn 643
changing reg in insn 644
changing reg in insn 650
changing reg in insn 651
changing reg in insn 657
changing reg in insn 658
changing reg in insn 664
changing reg in insn 665
changing reg in insn 671
changing reg in insn 672
changing reg in insn 677
changing reg in insn 679
changing reg in insn 680
changing reg in insn 682
changing reg in insn 685
changing reg in insn 687
changing reg in insn 688
changing reg in insn 690
changing reg in insn 691
changing reg in insn 693
changing reg in insn 694
changing reg in insn 696
changing reg in insn 708
changing reg in insn 709
changing reg in insn 709
changing reg in insn 710
changing reg in insn 710
changing reg in insn 712
changing reg in insn 724
changing reg in insn 725
changing reg in insn 725
changing reg in insn 726
changing reg in insn 733
changing reg in insn 734
changing reg in insn 739
changing reg in insn 740
changing reg in insn 740
changing reg in insn 741
changing reg in insn 747
changing reg in insn 748
changing reg in insn 773
changing reg in insn 774
changing reg in insn 800
changing reg in insn 801
changing reg in insn 803
changing reg in insn 805
changing reg in insn 809
changing reg in insn 807
changing reg in insn 808
changing reg in insn 808
changing reg in insn 809
changing reg in insn 809
changing reg in insn 813
changing reg in insn 811
changing reg in insn 812
changing reg in insn 812
changing reg in insn 813
changing reg in insn 813
changing reg in insn 818
changing reg in insn 821
changing reg in insn 822
changing reg in insn 822
changing reg in insn 823
changing reg in insn 836
changing reg in insn 840
changing reg in insn 13
changing reg in insn 14
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 42
changing reg in insn 43
changing reg in insn 49
changing reg in insn 50
changing reg in insn 65
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 98
changing reg in insn 103
changing reg in insn 105
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 133
changing reg in insn 135
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 149
changing reg in insn 153
changing reg in insn 154
changing reg in insn 159
changing reg in insn 161
changing reg in insn 167
changing reg in insn 168
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 176
changing reg in insn 180
changing reg in insn 182
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 185
changing reg in insn 186
changing reg in insn 192
changing reg in insn 194
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 207
changing reg in insn 210
changing reg in insn 211
changing reg in insn 216
changing reg in insn 218
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 239
changing reg in insn 241
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 262
changing reg in insn 264
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 285
changing reg in insn 287
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 300
changing reg in insn 299
changing reg in insn 301
changing reg in insn 307
changing reg in insn 309
changing reg in insn 318
changing reg in insn 319
changing reg in insn 320
changing reg in insn 322
changing reg in insn 321
changing reg in insn 323
changing reg in insn 329
changing reg in insn 331
changing reg in insn 340
changing reg in insn 341
changing reg in insn 342
changing reg in insn 344
changing reg in insn 348
changing reg in insn 349
changing reg in insn 350
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 354
changing reg in insn 355
changing reg in insn 360
changing reg in insn 362
changing reg in insn 371
changing reg in insn 372
changing reg in insn 373
changing reg in insn 375
changing reg in insn 379
changing reg in insn 380
changing reg in insn 381
changing reg in insn 382
changing reg in insn 383
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 391
changing reg in insn 393
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 406
changing reg in insn 410
changing reg in insn 411
changing reg in insn 416
changing reg in insn 418
changing reg in insn 427
changing reg in insn 428
changing reg in insn 429
changing reg in insn 431
changing reg in insn 435
changing reg in insn 436
changing reg in insn 441
changing reg in insn 443
changing reg in insn 452
changing reg in insn 453
changing reg in insn 454
changing reg in insn 456
changing reg in insn 460
changing reg in insn 461
changing reg in insn 466
changing reg in insn 468
changing reg in insn 477
changing reg in insn 478
changing reg in insn 479
changing reg in insn 481
changing reg in insn 485
changing reg in insn 486
changing reg in insn 491
changing reg in insn 493
changing reg in insn 502
changing reg in insn 503
changing reg in insn 504
changing reg in insn 506
changing reg in insn 510
changing reg in insn 511
changing reg in insn 516
changing reg in insn 518
changing reg in insn 527
changing reg in insn 528
changing reg in insn 529
changing reg in insn 531
changing reg in insn 535
changing reg in insn 536
changing reg in insn 539
changing reg in insn 541
changing reg in insn 540
changing reg in insn 543
changing reg in insn 545
changing reg in insn 546
changing reg in insn 568
changing reg in insn 571
changing reg in insn 577
changing reg in insn 578
changing reg in insn 578
changing reg in insn 579
changing reg in insn 586
changing reg in insn 587
changing reg in insn 593
changing reg in insn 594
changing reg in insn 600
changing reg in insn 601
changing reg in insn 607
changing reg in insn 608
changing reg in insn 614
changing reg in insn 615
changing reg in insn 621
changing reg in insn 622
changing reg in insn 628
changing reg in insn 629
changing reg in insn 635
changing reg in insn 636
changing reg in insn 642
changing reg in insn 643
changing reg in insn 649
changing reg in insn 650
changing reg in insn 656
changing reg in insn 657
changing reg in insn 663
changing reg in insn 664
changing reg in insn 670
changing reg in insn 671
changing reg in insn 675
changing reg in insn 676
changing reg in insn 678
changing reg in insn 679
changing reg in insn 681
changing reg in insn 682
changing reg in insn 683
changing reg in insn 684
changing reg in insn 686
changing reg in insn 687
changing reg in insn 689
changing reg in insn 690
changing reg in insn 692
changing reg in insn 693
changing reg in insn 695
changing reg in insn 696
changing reg in insn 697
changing reg in insn 698
changing reg in insn 699
changing reg in insn 701
changing reg in insn 700
changing reg in insn 701
changing reg in insn 702
changing reg in insn 703
changing reg in insn 704
changing reg in insn 706
changing reg in insn 705
changing reg in insn 706
changing reg in insn 707
changing reg in insn 708
changing reg in insn 711
changing reg in insn 712
changing reg in insn 713
changing reg in insn 715
changing reg in insn 714
changing reg in insn 715
changing reg in insn 721
changing reg in insn 722
changing reg in insn 729
changing reg in insn 731
changing reg in insn 736
changing reg in insn 737
changing reg in insn 744
changing reg in insn 745
changing reg in insn 766
changing reg in insn 767
changing reg in insn 769
changing reg in insn 771
changing reg in insn 780
changing reg in insn 782
changing reg in insn 781
changing reg in insn 782
changing reg in insn 785
changing reg in insn 786
changing reg in insn 787
changing reg in insn 788
changing reg in insn 789
changing reg in insn 792
changing reg in insn 794
changing reg in insn 795
changing reg in insn 795
changing reg in insn 796
changing reg in insn 797
changing reg in insn 798
changing reg in insn 802
changing reg in insn 803
changing reg in insn 804
changing reg in insn 805
changing reg in insn 806
changing reg in insn 807
changing reg in insn 810
changing reg in insn 811
changing reg in insn 818
changing reg in insn 819
changing reg in insn 817
changing reg in insn 820
changing reg in insn 821
changing reg in insn 9
changing reg in insn 841
deleting insn with uid = 24.
deleting insn with uid = 178.
deleting insn with uid = 346.
deleting insn with uid = 377.
deleting insn with uid = 408.
deleting insn with uid = 433.
deleting insn with uid = 458.
deleting insn with uid = 483.
deleting insn with uid = 508.
deleting insn with uid = 533.
deleting insn with uid = 541.
deleting insn with uid = 733.
deleting insn with uid = 773.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 162.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 177.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 202.
verify found no changes in insn with uid = 208.
verify found no changes in insn with uid = 219.
verify found no changes in insn with uid = 226.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 249.
verify found no changes in insn with uid = 257.
verify found no changes in insn with uid = 265.
verify found no changes in insn with uid = 272.
verify found no changes in insn with uid = 280.
verify found no changes in insn with uid = 288.
verify found no changes in insn with uid = 295.
verify found no changes in insn with uid = 302.
verify found no changes in insn with uid = 310.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 324.
verify found no changes in insn with uid = 332.
verify found no changes in insn with uid = 339.
verify found no changes in insn with uid = 345.
verify found no changes in insn with uid = 363.
verify found no changes in insn with uid = 370.
verify found no changes in insn with uid = 376.
verify found no changes in insn with uid = 394.
verify found no changes in insn with uid = 401.
verify found no changes in insn with uid = 407.
verify found no changes in insn with uid = 419.
verify found no changes in insn with uid = 426.
verify found no changes in insn with uid = 432.
verify found no changes in insn with uid = 444.
verify found no changes in insn with uid = 451.
verify found no changes in insn with uid = 457.
verify found no changes in insn with uid = 469.
verify found no changes in insn with uid = 476.
verify found no changes in insn with uid = 482.
verify found no changes in insn with uid = 494.
verify found no changes in insn with uid = 501.
verify found no changes in insn with uid = 507.
verify found no changes in insn with uid = 519.
verify found no changes in insn with uid = 526.
verify found no changes in insn with uid = 532.
verify found no changes in insn with uid = 544.
verify found no changes in insn with uid = 547.
verify found no changes in insn with uid = 572.
verify found no changes in insn with uid = 717.
verify found no changes in insn with uid = 720.
verify found no changes in insn with uid = 723.
verify found no changes in insn with uid = 732.
verify found no changes in insn with uid = 738.
verify found no changes in insn with uid = 746.
verify found no changes in insn with uid = 765.
verify found no changes in insn with uid = 768.
verify found no changes in insn with uid = 772.
verify found no changes in insn with uid = 793.
verify found no changes in insn with uid = 799.
verify found no changes in insn with uid = 843.


int read_procpar(Procpar_info*, char*, FILE*, bool*, InFile_struct*, Data_file_header*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 37[r8] 38[r9]
;;  ref usage 	r0={280d,248u} r1={101d,27u,1e} r2={76d,1u} r4={136d,62u} r5={147d,73u} r6={1d,261u} r7={1d,152u} r8={74d} r9={74d} r10={74d} r11={74d} r12={74d} r13={74d} r14={74d} r15={74d} r17={141d,33u} r18={74d} r19={74d} r20={1d,1u,18e} r21={100d,37u} r22={78d,3u} r23={76d,1u} r24={76d,1u} r25={76d,1u} r26={75d} r27={75d} r28={75d} r29={74d} r30={74d} r31={74d} r32={74d} r33={74d} r34={74d} r35={74d} r36={74d} r37={75d,1u} r38={75d,1u} r39={74d} r40={74d} r45={74d} r46={74d} r47={74d} r48={74d} r49={74d} r50={74d} r51={74d} r52={74d} r53={74d} r54={74d} r55={74d} r56={74d} r57={74d} r58={74d} r59={74d} r60={74d} r61={74d} r62={74d} r63={74d} r64={74d} r65={74d} r66={74d} r67={74d} r68={74d} r69={74d} r70={74d} r71={74d} r72={74d} r73={74d} r74={74d} r75={74d} r76={74d} r77={74d} r78={74d} r79={74d} r80={74d} 
;;    total ref usage 6731{5809d,903u,19e} in 665{591 regular + 74 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 191 192 193 194
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
        (reg:DI 5 di [ procpar_info ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [0 procpar_string+0 S8 A64])
        (reg:DI 4 si [ procpar_string ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])
        (reg:DI 1 dx [ in_file ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -720 [0xfffffffffffffd30])) [0 swap_bytes+0 S8 A64])
        (reg:DI 2 cx [ swap_bytes ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])
        (reg:DI 37 r8 [ infile_struct ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
        (reg:DI 38 r9 [ main_header ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(note 8 7 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 8 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.5860+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [346])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:26 986 {stack_tls_protect_set_di}
     (nil))
(insn 12 9 13 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -664 [0xfffffffffffffd68])) [0 date_stamp+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:28 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SF 21 xmm0 [191])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:29 129 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -676 [0xfffffffffffffd5c])) [0 dwell+0 S4 A32])
        (reg:SF 21 xmm0 [191])) sim2fitman_read_procpar.cpp:29 129 {*movsf_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -656 [0xfffffffffffffd70])) [0 calc_filesize+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:30 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -648 [0xfffffffffffffd78])) [0 te_offset+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:31 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -640 [0xfffffffffffffd80])) [0 tr_offset+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:32 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [0 pulse_name_offset+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:33 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [0 header_size+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:35 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:48 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -677 [0xfffffffffffffd5b])) [0 done_hdr+0 S1 A8])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:49 93 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 1 dx [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:66 89 {*movdi_internal}
     (nil))
(insn 23 22 25 2 (parallel [
            (set (reg:DI 0 ax [193])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:66 218 {*adddi_1}
     (nil))
(insn 25 23 26 2 (set (reg:SI 4 si)
        (const_int 255 [0xff])) sim2fitman_read_procpar.cpp:66 90 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [193])) sim2fitman_read_procpar.cpp:66 89 {*movdi_internal}
     (nil))
(call_insn 27 26 28 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8d0c5aca20 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:66 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 28 27 29 2 (set (reg:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:67 89 {*movdi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [194])) sim2fitman_read_procpar.cpp:67 89 {*movdi_internal}
     (nil))
(call_insn 30 29 31 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f8d0c5b4870 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:67 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 2 (set (reg:SI 0 ax [orig:90 D.5848 ] [90])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:67 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:90 D.5848 ] [90])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:67 3 {*cmpsi_ccno_1}
     (nil))
(insn 33 32 34 2 (set (reg:QI 0 ax [orig:91 D.5849 ] [91])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:67 607 {*setcc_qi}
     (nil))
(insn 34 33 35 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 D.5849 ] [91])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:67 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 35 34 36 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) sim2fitman_read_procpar.cpp:67 612 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 36 35 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 851 3 (set (reg:SI 0 ax [orig:87 D.5848 ] [87])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_read_procpar.cpp:68 90 {*movsi_internal}
     (nil))
(jump_insn 851 37 852 3 (set (pc)
        (label_ref 834)) sim2fitman_read_procpar.cpp:68 654 {jump}
     (nil)
 -> 834)
;;  succ:       76 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 852 851 40)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              48 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 195
(code_label 40 852 41 4 2 "" [2 uses])
(note 41 40 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 4 (set (reg:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:76 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [195])) sim2fitman_read_procpar.cpp:76 89 {*movdi_internal}
     (nil))
(call_insn 44 43 45 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x7f8d0c5b4798 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:76 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 4 (set (reg:SI 0 ax [orig:92 D.5848 ] [92])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:76 90 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.5848 ] [92])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:76 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 47 46 48 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) sim2fitman_read_procpar.cpp:76 612 {*jcc_1}
     (nil)
 -> 57)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 196
(note 48 47 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 5 (set (reg:QI 0 ax [196])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -677 [0xfffffffffffffd5b])) [0 done_hdr+0 S1 A8])) sim2fitman_read_procpar.cpp:76 93 {*movqi_internal}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg:QI 0 ax [orig:93 D.5849 ] [93])
                (xor:QI (reg:QI 0 ax [196])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:76 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -677 [0xfffffffffffffd5b])) [0 done_hdr+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 51 50 52 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 D.5849 ] [93])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:76 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 52 51 53 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) sim2fitman_read_procpar.cpp:76 612 {*jcc_1}
     (nil)
 -> 57)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88
(note 53 52 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 853 6 (set (reg:QI 0 ax [orig:88 D.5849 ] [88])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:76 93 {*movqi_internal}
     (nil))
(jump_insn 853 54 854 6 (set (pc)
        (label_ref 60)) sim2fitman_read_procpar.cpp:76 654 {jump}
     (nil)
 -> 60)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

(barrier 854 853 57)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 88
(code_label 57 854 58 7 4 "" [2 uses])
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 7 (set (reg:QI 0 ax [orig:88 D.5849 ] [88])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:76 93 {*movqi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(code_label 60 59 61 8 5 "" [1 uses])
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.5849 ] [88])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:76 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 63 62 64 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 561)
            (pc))) sim2fitman_read_procpar.cpp:76 612 {*jcc_1}
     (nil)
 -> 561)
;;  succ:       9 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 197 198 199
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (parallel [
            (set (reg:DI 0 ax [197])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:79 218 {*adddi_1}
     (nil))
(insn 66 65 67 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f8d0c33b750 *.LC1>)) sim2fitman_read_procpar.cpp:79 89 {*movdi_internal}
     (nil))
(insn 67 66 68 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [197])) sim2fitman_read_procpar.cpp:79 89 {*movdi_internal}
     (nil))
(call_insn 68 67 69 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:79 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 69 68 70 9 (set (reg:DI 0 ax [198])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:79 89 {*movdi_internal}
     (nil))
(insn 70 69 71 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [198])) sim2fitman_read_procpar.cpp:79 89 {*movdi_internal}
     (nil))
(insn 71 70 72 9 (set (reg:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:82 89 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f8d0c33b7e0 *.LC2>)) sim2fitman_read_procpar.cpp:82 89 {*movdi_internal}
     (nil))
(insn 73 72 74 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [199])) sim2fitman_read_procpar.cpp:82 89 {*movdi_internal}
     (nil))
(call_insn/i 74 73 75 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:82 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 75 74 76 9 (set (reg:SI 0 ax [orig:94 D.5848 ] [94])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:82 90 {*movsi_internal}
     (nil))
(insn 76 75 77 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:94 D.5848 ] [94])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:82 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 77 76 78 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) sim2fitman_read_procpar.cpp:82 612 {*jcc_1}
     (nil)
 -> 101)
;;  succ:       10 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95 200 201
(note 78 77 79 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f8d0c33b870 *.LC3>)) sim2fitman_read_procpar.cpp:83 89 {*movdi_internal}
     (nil))
(insn 80 79 81 10 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:83 89 {*movdi_internal}
     (nil))
(call_insn 81 80 82 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:83 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 82 81 83 10 (set (reg:DI 0 ax [200])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:83 89 {*movdi_internal}
     (nil))
(insn 83 82 84 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [200])) sim2fitman_read_procpar.cpp:83 89 {*movdi_internal}
     (nil))
(insn 84 83 85 10 (set (reg:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:84 89 {*movdi_internal}
     (nil))
(insn 85 84 86 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f8d0c33b900 *.LC4>)) sim2fitman_read_procpar.cpp:84 89 {*movdi_internal}
     (nil))
(insn 86 85 87 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [201])) sim2fitman_read_procpar.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn/i 87 86 88 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:84 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 88 87 89 10 (set (reg:SI 0 ax [orig:95 D.5848 ] [95])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:84 90 {*movsi_internal}
     (nil))
(insn 89 88 90 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:95 D.5848 ] [95])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:84 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 90 89 91 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 537)
            (pc))) sim2fitman_read_procpar.cpp:84 612 {*jcc_1}
     (nil)
 -> 537)
;;  succ:       11 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 202 203
(note 91 90 92 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 11 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -677 [0xfffffffffffffd5b])) [0 done_hdr+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:85 93 {*movqi_internal}
     (nil))
(insn 93 92 94 11 (set (reg:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(insn 94 93 95 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [202])) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(call_insn 95 94 96 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ftell") [flags 0x41]  <function_decl 0x7f8d0c5ac6c0 ftell>) [0 ftell S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:86 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 96 95 97 11 (set (reg:DI 1 dx [orig:96 D.5850 ] [96])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(insn 97 96 98 11 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(insn 98 97 855 11 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [203])
                (const_int 24 [0x18])) [0 infile_struct_50(D)->hdr_offset+0 S8 A64])
        (reg:DI 1 dx [orig:96 D.5850 ] [96])) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(jump_insn 855 98 856 11 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 856 855 101)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 204
(code_label 101 856 102 12 7 "" [1 uses])
(note 102 101 103 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 12 (set (reg:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(insn 104 103 105 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f8d0c33b990 *.LC5>)) sim2fitman_read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(insn 105 104 106 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [204])) sim2fitman_read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn/i 106 105 107 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:92 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 107 106 108 12 (set (reg:SI 0 ax [orig:97 D.5848 ] [97])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:92 90 {*movsi_internal}
     (nil))
(insn 108 107 109 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 D.5848 ] [97])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:92 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 109 108 110 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) sim2fitman_read_procpar.cpp:92 612 {*jcc_1}
     (nil)
 -> 131)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 99 100 205 206 207 208 209
(note 110 109 111 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:94 89 {*movdi_internal}
     (nil))
(insn 112 111 113 13 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:94 89 {*movdi_internal}
     (nil))
(call_insn 113 112 114 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:94 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 114 113 115 13 (set (reg:DI 0 ax [205])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:94 89 {*movdi_internal}
     (nil))
(insn 115 114 116 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [205])) sim2fitman_read_procpar.cpp:94 89 {*movdi_internal}
     (nil))
(insn 116 115 117 13 (set (reg:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 117 116 118 13 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) sim2fitman_read_procpar.cpp:95 90 {*movsi_internal}
     (nil))
(insn 118 117 119 13 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 119 118 120 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [206])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(call_insn 120 119 121 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f8d0c663af8 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:95 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 121 120 122 13 (set (reg:DI 1 dx [orig:98 D.5850 ] [98])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 122 121 123 13 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 123 122 124 13 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [207])
                (const_int 16 [0x10])) [0 main_header_57(D)->np.number+0 S8 A64])
        (reg:DI 1 dx [orig:98 D.5850 ] [98])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 124 123 125 13 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])) sim2fitman_read_procpar.cpp:96 89 {*movdi_internal}
     (nil))
(insn 125 124 126 13 (set (reg:DI 0 ax [orig:99 D.5850 ] [99])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [208])
                (const_int 16 [0x10])) [0 main_header_57(D)->np.number+0 S8 A64])) sim2fitman_read_procpar.cpp:96 89 {*movdi_internal}
     (nil))
(insn 126 125 127 13 (set (reg:SI 1 dx [orig:100 D.5848 ] [100])
        (reg:SI 0 ax [orig:99 D.5850 ] [99])) sim2fitman_read_procpar.cpp:96 90 {*movsi_internal}
     (nil))
(insn 127 126 128 13 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:96 89 {*movdi_internal}
     (nil))
(insn 128 127 857 13 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [209])
                (const_int 328 [0x148])) [0 procpar_info_61(D)->num_points+0 S4 A64])
        (reg:SI 1 dx [orig:100 D.5848 ] [100])) sim2fitman_read_procpar.cpp:96 90 {*movsi_internal}
     (nil))
(jump_insn 857 128 858 13 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 858 857 131)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 210
(code_label 131 858 132 14 9 "" [1 uses])
(note 132 131 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 14 (set (reg:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:100 89 {*movdi_internal}
     (nil))
(insn 134 133 135 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f8d0c33bab0 *.LC7>)) sim2fitman_read_procpar.cpp:100 89 {*movdi_internal}
     (nil))
(insn 135 134 136 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [210])) sim2fitman_read_procpar.cpp:100 89 {*movdi_internal}
     (nil))
(call_insn/i 136 135 137 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:100 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 137 136 138 14 (set (reg:SI 0 ax [orig:101 D.5848 ] [101])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:100 90 {*movsi_internal}
     (nil))
(insn 138 137 139 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:101 D.5848 ] [101])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:100 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 139 138 140 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 157)
            (pc))) sim2fitman_read_procpar.cpp:100 612 {*jcc_1}
     (nil)
 -> 157)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 103 211 212 213
(note 140 139 141 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:102 89 {*movdi_internal}
     (nil))
(insn 142 141 143 15 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:102 89 {*movdi_internal}
     (nil))
(call_insn 143 142 144 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:102 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 144 143 145 15 (set (reg:DI 0 ax [211])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:102 89 {*movdi_internal}
     (nil))
(insn 145 144 146 15 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [211])) sim2fitman_read_procpar.cpp:102 89 {*movdi_internal}
     (nil))
(insn 146 145 147 15 (set (reg:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 147 146 148 15 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) sim2fitman_read_procpar.cpp:106 90 {*movsi_internal}
     (nil))
(insn 148 147 149 15 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 149 148 150 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [212])) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn 150 149 151 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f8d0c663af8 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:106 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 151 150 152 15 (set (reg:DI 0 ax [orig:102 D.5850 ] [102])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 152 151 153 15 (set (reg:SI 1 dx [orig:103 D.5848 ] [103])
        (reg:SI 0 ax [orig:102 D.5850 ] [102])) sim2fitman_read_procpar.cpp:106 90 {*movsi_internal}
     (nil))
(insn 153 152 154 15 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 154 153 859 15 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [213])
                (const_int 508 [0x1fc])) [0 procpar_info_61(D)->nex+0 S4 A32])
        (reg:SI 1 dx [orig:103 D.5848 ] [103])) sim2fitman_read_procpar.cpp:106 90 {*movsi_internal}
     (nil))
(jump_insn 859 154 860 15 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 860 859 157)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104 214
(code_label 157 860 158 16 10 "" [1 uses])
(note 158 157 159 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 16 (set (reg:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:111 89 {*movdi_internal}
     (nil))
(insn 160 159 161 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f8d0c33bb40 *.LC8>)) sim2fitman_read_procpar.cpp:111 89 {*movdi_internal}
     (nil))
(insn 161 160 162 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [214])) sim2fitman_read_procpar.cpp:111 89 {*movdi_internal}
     (nil))
(call_insn/i 162 161 163 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:111 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 163 162 164 16 (set (reg:SI 0 ax [orig:104 D.5848 ] [104])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:111 90 {*movsi_internal}
     (nil))
(insn 164 163 165 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:104 D.5848 ] [104])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:111 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 165 164 166 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 190)
            (pc))) sim2fitman_read_procpar.cpp:111 612 {*jcc_1}
     (nil)
 -> 190)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105 106 215 216 217 218 219 220 221 222
(note 166 165 167 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 17 (set (reg:SF 21 xmm0 [215])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:112 129 {*movsf_internal}
     (nil))
(insn 168 167 169 17 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -676 [0xfffffffffffffd5c])) [0 dwell+0 S4 A32])
        (reg:SF 21 xmm0 [215])) sim2fitman_read_procpar.cpp:112 129 {*movsf_internal}
     (nil))
(insn 169 168 170 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:114 89 {*movdi_internal}
     (nil))
(insn 170 169 171 17 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn 171 170 172 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:114 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 172 171 173 17 (set (reg:DI 0 ax [216])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:114 89 {*movdi_internal}
     (nil))
(insn 173 172 174 17 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [216])) sim2fitman_read_procpar.cpp:114 89 {*movdi_internal}
     (nil))
(insn 174 173 175 17 (set (reg:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 175 174 176 17 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 176 175 177 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [217])) sim2fitman_read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(call_insn 177 176 179 17 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:115 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 179 177 924 17 (set (reg:SF 23 xmm2 [348])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:105 D.5851 ] [105]))) sim2fitman_read_procpar.cpp:115 157 {*truncdfsf_fast_sse}
     (nil))
(insn 924 179 180 17 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -676 [0xfffffffffffffd5c])) [0 dwell+0 S4 A32])
        (reg:SF 23 xmm2 [348])) sim2fitman_read_procpar.cpp:115 129 {*movsf_internal}
     (nil))
(insn 180 924 181 17 (set (reg:SF 21 xmm0 [218])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -676 [0xfffffffffffffd5c])) [0 dwell+0 S4 A32])) sim2fitman_read_procpar.cpp:118 129 {*movsf_internal}
     (nil))
(insn 181 180 182 17 (set (reg:SF 22 xmm1 [219])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:118 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 182 181 183 17 (set (reg:SF 21 xmm0 [orig:106 D.5852 ] [106])
        (div:SF (reg:SF 21 xmm0 [218])
            (reg:SF 22 xmm1 [219]))) sim2fitman_read_procpar.cpp:118 804 {*fop_sf_1_sse}
     (nil))
(insn 183 182 184 17 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:118 89 {*movdi_internal}
     (nil))
(insn 184 183 185 17 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [220])
                (const_int 4 [0x4])) [0 procpar_info_61(D)->dwell_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:106 D.5852 ] [106])) sim2fitman_read_procpar.cpp:118 129 {*movsf_internal}
     (nil))
(insn 185 184 186 17 (set (reg:SF 21 xmm0 [222])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:120 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 186 185 187 17 (set (reg:SF 21 xmm0 [221])
        (div:SF (reg:SF 21 xmm0 [222])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -676 [0xfffffffffffffd5c])) [0 dwell+0 S4 A32]))) sim2fitman_read_procpar.cpp:120 804 {*fop_sf_1_sse}
     (nil))
(insn 187 186 861 17 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -676 [0xfffffffffffffd5c])) [0 dwell+0 S4 A32])
        (reg:SF 21 xmm0 [221])) sim2fitman_read_procpar.cpp:120 129 {*movsf_internal}
     (nil))
(jump_insn 861 187 862 17 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 862 861 190)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 223
(code_label 190 862 191 18 11 "" [1 uses])
(note 191 190 192 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 18 (set (reg:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:129 89 {*movdi_internal}
     (nil))
(insn 193 192 194 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f8d0c33bbd0 *.LC11>)) sim2fitman_read_procpar.cpp:129 89 {*movdi_internal}
     (nil))
(insn 194 193 195 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [223])) sim2fitman_read_procpar.cpp:129 89 {*movdi_internal}
     (nil))
(call_insn/i 195 194 196 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:129 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 196 195 197 18 (set (reg:SI 0 ax [orig:107 D.5848 ] [107])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:129 90 {*movsi_internal}
     (nil))
(insn 197 196 198 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:107 D.5848 ] [107])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:129 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 198 197 199 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 214)
            (pc))) sim2fitman_read_procpar.cpp:129 612 {*jcc_1}
     (nil)
 -> 214)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108 224 225 226
(note 199 198 200 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 200 199 201 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:131 89 {*movdi_internal}
     (nil))
(insn 201 200 202 19 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:131 89 {*movdi_internal}
     (nil))
(call_insn 202 201 203 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:131 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 203 202 204 19 (set (reg:DI 0 ax [224])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:131 89 {*movdi_internal}
     (nil))
(insn 204 203 205 19 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [224])) sim2fitman_read_procpar.cpp:131 89 {*movdi_internal}
     (nil))
(insn 205 204 206 19 (set (reg:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 206 205 207 19 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 207 206 208 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [225])) sim2fitman_read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(call_insn 208 207 209 19 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:132 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 209 208 210 19 (set (reg:DF 1 dx [orig:108 D.5851 ] [108])
        (reg:DF 21 xmm0)) sim2fitman_read_procpar.cpp:132 128 {*movdf_internal}
     (nil))
(insn 210 209 211 19 (set (reg/f:DI 0 ax [226])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 211 210 863 19 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [226])
                (const_int 336 [0x150])) [0 procpar_info_61(D)->main_frequency+0 S8 A64])
        (reg:DF 1 dx [orig:108 D.5851 ] [108])) sim2fitman_read_procpar.cpp:132 128 {*movdf_internal}
     (nil))
(jump_insn 863 211 864 19 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 864 863 214)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 227
(code_label 214 864 215 20 12 "" [1 uses])
(note 215 214 216 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 20 (set (reg:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(insn 217 216 218 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f8d0c33bc60 *.LC12>)) sim2fitman_read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(insn 218 217 219 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [227])) sim2fitman_read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(call_insn/i 219 218 220 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:136 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 220 219 221 20 (set (reg:SI 0 ax [orig:109 D.5848 ] [109])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:136 90 {*movsi_internal}
     (nil))
(insn 221 220 222 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:109 D.5848 ] [109])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:136 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 222 221 223 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 237)
            (pc))) sim2fitman_read_procpar.cpp:136 612 {*jcc_1}
     (nil)
 -> 237)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 228 229 230
(note 223 222 224 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f8d0c33bcf0 *.LC13>)) sim2fitman_read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(insn 225 224 226 21 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(call_insn 226 225 227 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:138 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 227 226 228 21 (set (reg:DI 0 ax [228])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(insn 228 227 229 21 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [228])) sim2fitman_read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(insn 229 228 230 21 (set (reg/f:DI 0 ax [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(insn 230 229 231 21 (parallel [
            (set (reg/f:DI 1 dx [orig:110 D.5853 ] [110])
                (plus:DI (reg/f:DI 0 ax [229])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:139 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 404 [0x194]))
        (nil)))
(insn 231 230 232 21 (set (reg:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(insn 232 231 233 21 (set (reg:DI 4 si)
        (reg:DI 0 ax [230])) sim2fitman_read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(insn 233 232 234 21 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:110 D.5853 ] [110])) sim2fitman_read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(call_insn 234 233 865 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f8d0c7d95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:139 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 865 234 866 21 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 866 865 237)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 111 231
(code_label 237 866 238 22 13 "" [1 uses])
(note 238 237 239 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 22 (set (reg:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:143 89 {*movdi_internal}
     (nil))
(insn 240 239 241 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f8d0c33bd80 *.LC14>)) sim2fitman_read_procpar.cpp:143 89 {*movdi_internal}
     (nil))
(insn 241 240 242 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [231])) sim2fitman_read_procpar.cpp:143 89 {*movdi_internal}
     (nil))
(call_insn/i 242 241 243 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:143 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 243 242 244 22 (set (reg:SI 0 ax [orig:111 D.5848 ] [111])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:143 90 {*movsi_internal}
     (nil))
(insn 244 243 245 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:111 D.5848 ] [111])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:143 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 245 244 246 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 260)
            (pc))) sim2fitman_read_procpar.cpp:143 612 {*jcc_1}
     (nil)
 -> 260)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 232 233 234
(note 246 245 247 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 248 23 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f8d0c33bcf0 *.LC13>)) sim2fitman_read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 248 247 249 23 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(call_insn 249 248 250 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:145 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 250 249 251 23 (set (reg:DI 0 ax [232])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 251 250 252 23 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [232])) sim2fitman_read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 252 251 253 23 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 253 252 254 23 (parallel [
            (set (reg/f:DI 1 dx [orig:112 D.5854 ] [112])
                (plus:DI (reg/f:DI 0 ax [233])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:146 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 440 [0x1b8]))
        (nil)))
(insn 254 253 255 23 (set (reg:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 255 254 256 23 (set (reg:DI 4 si)
        (reg:DI 0 ax [234])) sim2fitman_read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 256 255 257 23 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:112 D.5854 ] [112])) sim2fitman_read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(call_insn 257 256 867 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f8d0c7d95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:146 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 867 257 868 23 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 868 867 260)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 113 235
(code_label 260 868 261 24 14 "" [1 uses])
(note 261 260 262 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 262 261 263 24 (set (reg:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:150 89 {*movdi_internal}
     (nil))
(insn 263 262 264 24 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f8d0c33be10 *.LC15>)) sim2fitman_read_procpar.cpp:150 89 {*movdi_internal}
     (nil))
(insn 264 263 265 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [235])) sim2fitman_read_procpar.cpp:150 89 {*movdi_internal}
     (nil))
(call_insn/i 265 264 266 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:150 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 266 265 267 24 (set (reg:SI 0 ax [orig:113 D.5848 ] [113])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:150 90 {*movsi_internal}
     (nil))
(insn 267 266 268 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:113 D.5848 ] [113])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:150 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 268 267 269 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) sim2fitman_read_procpar.cpp:150 612 {*jcc_1}
     (nil)
 -> 283)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 114 236 237 238
(note 269 268 270 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 270 269 271 25 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f8d0c33bcf0 *.LC13>)) sim2fitman_read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(insn 271 270 272 25 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn 272 271 273 25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:152 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 273 272 274 25 (set (reg:DI 0 ax [236])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(insn 274 273 275 25 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [236])) sim2fitman_read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(insn 275 274 276 25 (set (reg/f:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(insn 276 275 277 25 (parallel [
            (set (reg/f:DI 1 dx [orig:114 D.5855 ] [114])
                (plus:DI (reg/f:DI 0 ax [237])
                    (const_int 468 [0x1d4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:153 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 468 [0x1d4]))
        (nil)))
(insn 277 276 278 25 (set (reg:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(insn 278 277 279 25 (set (reg:DI 4 si)
        (reg:DI 0 ax [238])) sim2fitman_read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(insn 279 278 280 25 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:114 D.5855 ] [114])) sim2fitman_read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(call_insn 280 279 869 25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f8d0c7d95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:153 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 869 280 870 25 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 870 869 283)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 115 239
(code_label 283 870 284 26 15 "" [1 uses])
(note 284 283 285 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 26 (set (reg:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(insn 286 285 287 26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f8d0c33bea0 *.LC16>)) sim2fitman_read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(insn 287 286 288 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [239])) sim2fitman_read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(call_insn/i 288 287 289 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:158 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 289 288 290 26 (set (reg:SI 0 ax [orig:115 D.5848 ] [115])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:158 90 {*movsi_internal}
     (nil))
(insn 290 289 291 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:115 D.5848 ] [115])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:158 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 291 290 292 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 305)
            (pc))) sim2fitman_read_procpar.cpp:158 612 {*jcc_1}
     (nil)
 -> 305)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 240 241 242
(note 292 291 293 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 27 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f8d0c33bcf0 *.LC13>)) sim2fitman_read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 294 293 295 27 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(call_insn 295 294 296 27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:160 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 296 295 297 27 (set (reg:DI 0 ax [240])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 297 296 298 27 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [240])) sim2fitman_read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 298 297 299 27 (set (reg:DI 1 dx [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:161 89 {*movdi_internal}
     (nil))
(insn 299 298 300 27 (parallel [
            (set (reg:DI 0 ax [242])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:161 218 {*adddi_1}
     (nil))
(insn 300 299 301 27 (set (reg:DI 4 si)
        (reg:DI 1 dx [241])) sim2fitman_read_procpar.cpp:161 89 {*movdi_internal}
     (nil))
(insn 301 300 302 27 (set (reg:DI 5 di)
        (reg:DI 0 ax [242])) sim2fitman_read_procpar.cpp:161 89 {*movdi_internal}
     (nil))
(call_insn 302 301 871 27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f8d0c7d95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:161 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 871 302 872 27 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 872 871 305)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 116 243
(code_label 305 872 306 28 16 "" [1 uses])
(note 306 305 307 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 28 (set (reg:DI 0 ax [243])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(insn 308 307 309 28 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f8d0c33bf30 *.LC17>)) sim2fitman_read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(insn 309 308 310 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [243])) sim2fitman_read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(call_insn/i 310 309 311 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:165 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 311 310 312 28 (set (reg:SI 0 ax [orig:116 D.5848 ] [116])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:165 90 {*movsi_internal}
     (nil))
(insn 312 311 313 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:116 D.5848 ] [116])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:165 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 313 312 314 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 327)
            (pc))) sim2fitman_read_procpar.cpp:165 612 {*jcc_1}
     (nil)
 -> 327)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 244 245 246
(note 314 313 315 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 315 314 316 29 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f8d0c33bcf0 *.LC13>)) sim2fitman_read_procpar.cpp:167 89 {*movdi_internal}
     (nil))
(insn 316 315 317 29 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:167 89 {*movdi_internal}
     (nil))
(call_insn 317 316 318 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:167 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 318 317 319 29 (set (reg:DI 0 ax [244])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:167 89 {*movdi_internal}
     (nil))
(insn 319 318 320 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [244])) sim2fitman_read_procpar.cpp:167 89 {*movdi_internal}
     (nil))
(insn 320 319 321 29 (set (reg:DI 1 dx [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:168 89 {*movdi_internal}
     (nil))
(insn 321 320 322 29 (parallel [
            (set (reg:DI 0 ax [246])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:168 218 {*adddi_1}
     (nil))
(insn 322 321 323 29 (set (reg:DI 4 si)
        (reg:DI 1 dx [245])) sim2fitman_read_procpar.cpp:168 89 {*movdi_internal}
     (nil))
(insn 323 322 324 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [246])) sim2fitman_read_procpar.cpp:168 89 {*movdi_internal}
     (nil))
(call_insn 324 323 873 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f8d0c7d95e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:168 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 873 324 874 29 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 874 873 327)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 247
(code_label 327 874 328 30 17 "" [1 uses])
(note 328 327 329 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 330 30 (set (reg:DI 0 ax [247])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(insn 330 329 331 30 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f8d0c34d000 *.LC18>)) sim2fitman_read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(insn 331 330 332 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [247])) sim2fitman_read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(call_insn/i 332 331 333 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:172 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 333 332 334 30 (set (reg:SI 0 ax [orig:117 D.5848 ] [117])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:172 90 {*movsi_internal}
     (nil))
(insn 334 333 335 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:117 D.5848 ] [117])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:172 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 335 334 336 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 358)
            (pc))) sim2fitman_read_procpar.cpp:172 612 {*jcc_1}
     (nil)
 -> 358)
;;  succ:       31 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118 119 120 121 248 249 250 251 252 253
(note 336 335 337 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 337 336 338 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:174 89 {*movdi_internal}
     (nil))
(insn 338 337 339 31 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:174 89 {*movdi_internal}
     (nil))
(call_insn 339 338 340 31 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:174 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 340 339 341 31 (set (reg:DI 0 ax [248])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:174 89 {*movdi_internal}
     (nil))
(insn 341 340 342 31 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [248])) sim2fitman_read_procpar.cpp:174 89 {*movdi_internal}
     (nil))
(insn 342 341 343 31 (set (reg:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 343 342 344 31 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 344 343 345 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [249])) sim2fitman_read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(call_insn 345 344 347 31 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:175 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 347 345 348 31 (set (reg:SF 21 xmm0 [orig:119 D.5852 ] [119])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:118 D.5851 ] [118]))) sim2fitman_read_procpar.cpp:175 157 {*truncdfsf_fast_sse}
     (nil))
(insn 348 347 349 31 (set (reg/f:DI 0 ax [250])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 349 348 350 31 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [250])
                (const_int 352 [0x160])) [0 procpar_info_61(D)->te+0 S4 A64])
        (reg:SF 21 xmm0 [orig:119 D.5852 ] [119])) sim2fitman_read_procpar.cpp:175 129 {*movsf_internal}
     (nil))
(insn 350 349 351 31 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:177 89 {*movdi_internal}
     (nil))
(insn 351 350 352 31 (set (reg:SF 21 xmm0 [orig:120 D.5852 ] [120])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [251])
                (const_int 352 [0x160])) [0 procpar_info_61(D)->te+0 S4 A64])) sim2fitman_read_procpar.cpp:177 129 {*movsf_internal}
     (nil))
(insn 352 351 353 31 (set (reg:SF 22 xmm1 [252])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:177 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+3 [0x0.fap+10])
        (nil)))
(insn 353 352 354 31 (set (reg:SF 21 xmm0 [orig:121 D.5852 ] [121])
        (div:SF (reg:SF 21 xmm0 [orig:120 D.5852 ] [120])
            (reg:SF 22 xmm1 [252]))) sim2fitman_read_procpar.cpp:177 804 {*fop_sf_1_sse}
     (nil))
(insn 354 353 355 31 (set (reg/f:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:177 89 {*movdi_internal}
     (nil))
(insn 355 354 875 31 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [253])
                (const_int 352 [0x160])) [0 procpar_info_61(D)->te+0 S4 A64])
        (reg:SF 21 xmm0 [orig:121 D.5852 ] [121])) sim2fitman_read_procpar.cpp:177 129 {*movsf_internal}
     (nil))
(jump_insn 875 355 876 31 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 876 875 358)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 254
(code_label 358 876 359 32 18 "" [1 uses])
(note 359 358 360 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 361 32 (set (reg:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:181 89 {*movdi_internal}
     (nil))
(insn 361 360 362 32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f8d0c34d090 *.LC20>)) sim2fitman_read_procpar.cpp:181 89 {*movdi_internal}
     (nil))
(insn 362 361 363 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [254])) sim2fitman_read_procpar.cpp:181 89 {*movdi_internal}
     (nil))
(call_insn/i 363 362 364 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:181 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 364 363 365 32 (set (reg:SI 0 ax [orig:122 D.5848 ] [122])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:181 90 {*movsi_internal}
     (nil))
(insn 365 364 366 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:122 D.5848 ] [122])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:181 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 366 365 367 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 389)
            (pc))) sim2fitman_read_procpar.cpp:181 612 {*jcc_1}
     (nil)
 -> 389)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123 124 125 126 255 256 257 258 259 260
(note 367 366 368 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 368 367 369 33 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:183 89 {*movdi_internal}
     (nil))
(insn 369 368 370 33 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:183 89 {*movdi_internal}
     (nil))
(call_insn 370 369 371 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:183 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 371 370 372 33 (set (reg:DI 0 ax [255])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:183 89 {*movdi_internal}
     (nil))
(insn 372 371 373 33 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [255])) sim2fitman_read_procpar.cpp:183 89 {*movdi_internal}
     (nil))
(insn 373 372 374 33 (set (reg:DI 0 ax [256])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 374 373 375 33 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 375 374 376 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [256])) sim2fitman_read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(call_insn 376 375 378 33 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:184 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 378 376 379 33 (set (reg:SF 21 xmm0 [orig:124 D.5852 ] [124])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:123 D.5851 ] [123]))) sim2fitman_read_procpar.cpp:184 157 {*truncdfsf_fast_sse}
     (nil))
(insn 379 378 380 33 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 380 379 381 33 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [257])
                (const_int 356 [0x164])) [0 procpar_info_61(D)->tr+0 S4 A32])
        (reg:SF 21 xmm0 [orig:124 D.5852 ] [124])) sim2fitman_read_procpar.cpp:184 129 {*movsf_internal}
     (nil))
(insn 381 380 382 33 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 382 381 383 33 (set (reg:SF 21 xmm0 [orig:125 D.5852 ] [125])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [258])
                (const_int 356 [0x164])) [0 procpar_info_61(D)->tr+0 S4 A32])) sim2fitman_read_procpar.cpp:186 129 {*movsf_internal}
     (nil))
(insn 383 382 384 33 (set (reg:SF 22 xmm1 [259])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:186 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+3 [0x0.fap+10])
        (nil)))
(insn 384 383 385 33 (set (reg:SF 21 xmm0 [orig:126 D.5852 ] [126])
        (div:SF (reg:SF 21 xmm0 [orig:125 D.5852 ] [125])
            (reg:SF 22 xmm1 [259]))) sim2fitman_read_procpar.cpp:186 804 {*fop_sf_1_sse}
     (nil))
(insn 385 384 386 33 (set (reg/f:DI 0 ax [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 386 385 877 33 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [260])
                (const_int 356 [0x164])) [0 procpar_info_61(D)->tr+0 S4 A32])
        (reg:SF 21 xmm0 [orig:126 D.5852 ] [126])) sim2fitman_read_procpar.cpp:186 129 {*movsf_internal}
     (nil))
(jump_insn 877 386 878 33 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 878 877 389)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 127 261
(code_label 389 878 390 34 19 "" [1 uses])
(note 390 389 391 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 391 390 392 34 (set (reg:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(insn 392 391 393 34 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f8d0c34d120 *.LC21>)) sim2fitman_read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(insn 393 392 394 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [261])) sim2fitman_read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(call_insn/i 394 393 395 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:191 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 395 394 396 34 (set (reg:SI 0 ax [orig:127 D.5848 ] [127])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:191 90 {*movsi_internal}
     (nil))
(insn 396 395 397 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:127 D.5848 ] [127])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:191 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 397 396 398 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 414)
            (pc))) sim2fitman_read_procpar.cpp:191 612 {*jcc_1}
     (nil)
 -> 414)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 128 129 262 263 264
(note 398 397 399 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 399 398 400 35 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:193 89 {*movdi_internal}
     (nil))
(insn 400 399 401 35 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:193 89 {*movdi_internal}
     (nil))
(call_insn 401 400 402 35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:193 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 402 401 403 35 (set (reg:DI 0 ax [262])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:193 89 {*movdi_internal}
     (nil))
(insn 403 402 404 35 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [262])) sim2fitman_read_procpar.cpp:193 89 {*movdi_internal}
     (nil))
(insn 404 403 405 35 (set (reg:DI 0 ax [263])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:194 89 {*movdi_internal}
     (nil))
(insn 405 404 406 35 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:194 89 {*movdi_internal}
     (nil))
(insn 406 405 407 35 (set (reg:DI 5 di)
        (reg:DI 0 ax [263])) sim2fitman_read_procpar.cpp:194 89 {*movdi_internal}
     (nil))
(call_insn 407 406 409 35 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:194 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 409 407 410 35 (set (reg:SF 21 xmm0 [orig:129 D.5852 ] [129])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:128 D.5851 ] [128]))) sim2fitman_read_procpar.cpp:194 157 {*truncdfsf_fast_sse}
     (nil))
(insn 410 409 411 35 (set (reg/f:DI 0 ax [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:194 89 {*movdi_internal}
     (nil))
(insn 411 410 879 35 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [264])
                (const_int 364 [0x16c])) [0 procpar_info_61(D)->pos1+0 S4 A32])
        (reg:SF 21 xmm0 [orig:129 D.5852 ] [129])) sim2fitman_read_procpar.cpp:194 129 {*movsf_internal}
     (nil))
(jump_insn 879 411 880 35 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 880 879 414)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 130 265
(code_label 414 880 415 36 20 "" [1 uses])
(note 415 414 416 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 416 415 417 36 (set (reg:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:196 89 {*movdi_internal}
     (nil))
(insn 417 416 418 36 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f8d0c34d1b0 *.LC22>)) sim2fitman_read_procpar.cpp:196 89 {*movdi_internal}
     (nil))
(insn 418 417 419 36 (set (reg:DI 5 di)
        (reg:DI 0 ax [265])) sim2fitman_read_procpar.cpp:196 89 {*movdi_internal}
     (nil))
(call_insn/i 419 418 420 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:196 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 420 419 421 36 (set (reg:SI 0 ax [orig:130 D.5848 ] [130])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:196 90 {*movsi_internal}
     (nil))
(insn 421 420 422 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:130 D.5848 ] [130])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:196 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 422 421 423 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 439)
            (pc))) sim2fitman_read_procpar.cpp:196 612 {*jcc_1}
     (nil)
 -> 439)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 131 132 266 267 268
(note 423 422 424 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 424 423 425 37 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 425 424 426 37 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(call_insn 426 425 427 37 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:198 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 427 426 428 37 (set (reg:DI 0 ax [266])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 428 427 429 37 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [266])) sim2fitman_read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 429 428 430 37 (set (reg:DI 0 ax [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 430 429 431 37 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 431 430 432 37 (set (reg:DI 5 di)
        (reg:DI 0 ax [267])) sim2fitman_read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(call_insn 432 431 434 37 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:199 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 434 432 435 37 (set (reg:SF 21 xmm0 [orig:132 D.5852 ] [132])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:131 D.5851 ] [131]))) sim2fitman_read_procpar.cpp:199 157 {*truncdfsf_fast_sse}
     (nil))
(insn 435 434 436 37 (set (reg/f:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 436 435 881 37 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [268])
                (const_int 368 [0x170])) [0 procpar_info_61(D)->pos2+0 S4 A64])
        (reg:SF 21 xmm0 [orig:132 D.5852 ] [132])) sim2fitman_read_procpar.cpp:199 129 {*movsf_internal}
     (nil))
(jump_insn 881 436 882 37 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 882 881 439)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 133 269
(code_label 439 882 440 38 21 "" [1 uses])
(note 440 439 441 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 441 440 442 38 (set (reg:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(insn 442 441 443 38 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f8d0c34d240 *.LC23>)) sim2fitman_read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(insn 443 442 444 38 (set (reg:DI 5 di)
        (reg:DI 0 ax [269])) sim2fitman_read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(call_insn/i 444 443 445 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:201 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 445 444 446 38 (set (reg:SI 0 ax [orig:133 D.5848 ] [133])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:201 90 {*movsi_internal}
     (nil))
(insn 446 445 447 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:133 D.5848 ] [133])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:201 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 447 446 448 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 464)
            (pc))) sim2fitman_read_procpar.cpp:201 612 {*jcc_1}
     (nil)
 -> 464)
;;  succ:       39 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 134 135 270 271 272
(note 448 447 449 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 449 448 450 39 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(insn 450 449 451 39 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(call_insn 451 450 452 39 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:203 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 452 451 453 39 (set (reg:DI 0 ax [270])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(insn 453 452 454 39 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [270])) sim2fitman_read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(insn 454 453 455 39 (set (reg:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(insn 455 454 456 39 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(insn 456 455 457 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [271])) sim2fitman_read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(call_insn 457 456 459 39 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:204 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 459 457 460 39 (set (reg:SF 21 xmm0 [orig:135 D.5852 ] [135])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:134 D.5851 ] [134]))) sim2fitman_read_procpar.cpp:204 157 {*truncdfsf_fast_sse}
     (nil))
(insn 460 459 461 39 (set (reg/f:DI 0 ax [272])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(insn 461 460 883 39 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [272])
                (const_int 372 [0x174])) [0 procpar_info_61(D)->pos3+0 S4 A32])
        (reg:SF 21 xmm0 [orig:135 D.5852 ] [135])) sim2fitman_read_procpar.cpp:204 129 {*movsf_internal}
     (nil))
(jump_insn 883 461 884 39 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 884 883 464)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 136 273
(code_label 464 884 465 40 22 "" [1 uses])
(note 465 464 466 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 466 465 467 40 (set (reg:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:206 89 {*movdi_internal}
     (nil))
(insn 467 466 468 40 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f8d0c34d2d0 *.LC24>)) sim2fitman_read_procpar.cpp:206 89 {*movdi_internal}
     (nil))
(insn 468 467 469 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [273])) sim2fitman_read_procpar.cpp:206 89 {*movdi_internal}
     (nil))
(call_insn/i 469 468 470 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:206 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 470 469 471 40 (set (reg:SI 0 ax [orig:136 D.5848 ] [136])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:206 90 {*movsi_internal}
     (nil))
(insn 471 470 472 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:136 D.5848 ] [136])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:206 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 472 471 473 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 489)
            (pc))) sim2fitman_read_procpar.cpp:206 612 {*jcc_1}
     (nil)
 -> 489)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 137 138 274 275 276
(note 473 472 474 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 474 473 475 41 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:208 89 {*movdi_internal}
     (nil))
(insn 475 474 476 41 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:208 89 {*movdi_internal}
     (nil))
(call_insn 476 475 477 41 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:208 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 477 476 478 41 (set (reg:DI 0 ax [274])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:208 89 {*movdi_internal}
     (nil))
(insn 478 477 479 41 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [274])) sim2fitman_read_procpar.cpp:208 89 {*movdi_internal}
     (nil))
(insn 479 478 480 41 (set (reg:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:209 89 {*movdi_internal}
     (nil))
(insn 480 479 481 41 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:209 89 {*movdi_internal}
     (nil))
(insn 481 480 482 41 (set (reg:DI 5 di)
        (reg:DI 0 ax [275])) sim2fitman_read_procpar.cpp:209 89 {*movdi_internal}
     (nil))
(call_insn 482 481 484 41 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:209 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 484 482 485 41 (set (reg:SF 21 xmm0 [orig:138 D.5852 ] [138])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:137 D.5851 ] [137]))) sim2fitman_read_procpar.cpp:209 157 {*truncdfsf_fast_sse}
     (nil))
(insn 485 484 486 41 (set (reg/f:DI 0 ax [276])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:209 89 {*movdi_internal}
     (nil))
(insn 486 485 885 41 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [276])
                (const_int 376 [0x178])) [0 procpar_info_61(D)->vox1+0 S4 A64])
        (reg:SF 21 xmm0 [orig:138 D.5852 ] [138])) sim2fitman_read_procpar.cpp:209 129 {*movsf_internal}
     (nil))
(jump_insn 885 486 886 41 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 886 885 489)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 139 277
(code_label 489 886 490 42 23 "" [1 uses])
(note 490 489 491 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 491 490 492 42 (set (reg:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:213 89 {*movdi_internal}
     (nil))
(insn 492 491 493 42 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f8d0c34d360 *.LC25>)) sim2fitman_read_procpar.cpp:213 89 {*movdi_internal}
     (nil))
(insn 493 492 494 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [277])) sim2fitman_read_procpar.cpp:213 89 {*movdi_internal}
     (nil))
(call_insn/i 494 493 495 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:213 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 495 494 496 42 (set (reg:SI 0 ax [orig:139 D.5848 ] [139])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:213 90 {*movsi_internal}
     (nil))
(insn 496 495 497 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:139 D.5848 ] [139])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:213 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 497 496 498 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 514)
            (pc))) sim2fitman_read_procpar.cpp:213 612 {*jcc_1}
     (nil)
 -> 514)
;;  succ:       43 (FALLTHRU)
;;              44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 140 141 278 279 280
(note 498 497 499 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 499 498 500 43 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:215 89 {*movdi_internal}
     (nil))
(insn 500 499 501 43 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:215 89 {*movdi_internal}
     (nil))
(call_insn 501 500 502 43 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:215 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 502 501 503 43 (set (reg:DI 0 ax [278])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:215 89 {*movdi_internal}
     (nil))
(insn 503 502 504 43 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [278])) sim2fitman_read_procpar.cpp:215 89 {*movdi_internal}
     (nil))
(insn 504 503 505 43 (set (reg:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(insn 505 504 506 43 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(insn 506 505 507 43 (set (reg:DI 5 di)
        (reg:DI 0 ax [279])) sim2fitman_read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(call_insn 507 506 509 43 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:216 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 509 507 510 43 (set (reg:SF 21 xmm0 [orig:141 D.5852 ] [141])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:140 D.5851 ] [140]))) sim2fitman_read_procpar.cpp:216 157 {*truncdfsf_fast_sse}
     (nil))
(insn 510 509 511 43 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(insn 511 510 887 43 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [280])
                (const_int 380 [0x17c])) [0 procpar_info_61(D)->vox2+0 S4 A32])
        (reg:SF 21 xmm0 [orig:141 D.5852 ] [141])) sim2fitman_read_procpar.cpp:216 129 {*movsf_internal}
     (nil))
(jump_insn 887 511 888 43 (set (pc)
        (label_ref 537)) 654 {jump}
     (nil)
 -> 537)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 888 887 514)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 142 281
(code_label 514 888 515 44 24 "" [1 uses])
(note 515 514 516 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 516 515 517 44 (set (reg:DI 0 ax [281])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:221 89 {*movdi_internal}
     (nil))
(insn 517 516 518 44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f8d0c34d3f0 *.LC26>)) sim2fitman_read_procpar.cpp:221 89 {*movdi_internal}
     (nil))
(insn 518 517 519 44 (set (reg:DI 5 di)
        (reg:DI 0 ax [281])) sim2fitman_read_procpar.cpp:221 89 {*movdi_internal}
     (nil))
(call_insn/i 519 518 520 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f8d0c7d9360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:221 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 520 519 521 44 (set (reg:SI 0 ax [orig:142 D.5848 ] [142])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:221 90 {*movsi_internal}
     (nil))
(insn 521 520 522 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:142 D.5848 ] [142])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:221 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 522 521 523 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 537)
            (pc))) sim2fitman_read_procpar.cpp:221 612 {*jcc_1}
     (nil)
 -> 537)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 143 144 282 283 284
(note 523 522 524 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 524 523 525 45 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f8d0c33ba20 *.LC6>)) sim2fitman_read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 525 524 526 45 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(call_insn 526 525 527 45 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f8d0c61a870 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:223 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 527 526 528 45 (set (reg:DI 0 ax [282])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 528 527 529 45 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])
        (reg:DI 0 ax [282])) sim2fitman_read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 529 528 530 45 (set (reg:DI 0 ax [283])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 530 529 531 45 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 531 530 532 45 (set (reg:DI 5 di)
        (reg:DI 0 ax [283])) sim2fitman_read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(call_insn 532 531 534 45 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:224 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 534 532 535 45 (set (reg:SF 21 xmm0 [orig:144 D.5852 ] [144])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:143 D.5851 ] [143]))) sim2fitman_read_procpar.cpp:224 157 {*truncdfsf_fast_sse}
     (nil))
(insn 535 534 536 45 (set (reg/f:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 536 535 537 45 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [284])
                (const_int 384 [0x180])) [0 procpar_info_61(D)->vox3+0 S4 A64])
        (reg:SF 21 xmm0 [orig:144 D.5852 ] [144])) sim2fitman_read_procpar.cpp:224 129 {*movsf_internal}
     (nil))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11 [100.0%] 
;;              13 [100.0%] 
;;              15 [100.0%] 
;;              17 [100.0%] 
;;              19 [100.0%] 
;;              21 [100.0%] 
;;              23 [100.0%] 
;;              25 [100.0%] 
;;              27 [100.0%] 
;;              29 [100.0%] 
;;              31 [100.0%] 
;;              33 [100.0%] 
;;              35 [100.0%] 
;;              37 [100.0%] 
;;              39 [100.0%] 
;;              41 [100.0%] 
;;              44
;;              45 (FALLTHRU)
;;              43 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 145 146 285 286 287
(code_label 537 536 538 46 8 "" [19 uses])
(note 538 537 539 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 539 538 540 46 (set (reg:DI 1 dx [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(insn 540 539 542 46 (parallel [
            (set (reg:DI 0 ax [286])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:250 218 {*adddi_1}
     (nil))
(insn 542 540 543 46 (set (reg:SI 4 si)
        (const_int 255 [0xff])) sim2fitman_read_procpar.cpp:250 90 {*movsi_internal}
     (nil))
(insn 543 542 544 46 (set (reg:DI 5 di)
        (reg:DI 0 ax [286])) sim2fitman_read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(call_insn 544 543 545 46 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f8d0c5aca20 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:250 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 545 544 546 46 (set (reg:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(insn 546 545 547 46 (set (reg:DI 5 di)
        (reg:DI 0 ax [287])) sim2fitman_read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn 547 546 548 46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x7f8d0c5b4870 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:251 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 548 547 549 46 (set (reg:SI 0 ax [orig:145 D.5848 ] [145])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:251 90 {*movsi_internal}
     (nil))
(insn 549 548 550 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:145 D.5848 ] [145])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:251 3 {*cmpsi_ccno_1}
     (nil))
(insn 550 549 551 46 (set (reg:QI 0 ax [orig:146 D.5849 ] [146])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:251 607 {*setcc_qi}
     (nil))
(insn 551 550 552 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:146 D.5849 ] [146])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:251 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 552 551 553 46 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 557)
            (pc))) sim2fitman_read_procpar.cpp:251 612 {*jcc_1}
     (nil)
 -> 557)
;;  succ:       47 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 553 552 554 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 554 553 889 47 (set (reg:SI 0 ax [orig:87 D.5848 ] [87])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_read_procpar.cpp:252 90 {*movsi_internal}
     (nil))
(jump_insn 889 554 890 47 (set (pc)
        (label_ref 834)) sim2fitman_read_procpar.cpp:252 654 {jump}
     (nil)
 -> 834)
;;  succ:       76 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 890 889 557)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 557 890 558 48 25 "" [1 uses])
(note 558 557 891 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(jump_insn 891 558 892 48 (set (pc)
        (label_ref 40)) sim2fitman_read_procpar.cpp:76 654 {jump}
     (nil)
 -> 40)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 892 891 561)
;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 147 148 149 288
(code_label 561 892 562 49 6 "" [1 uses])
(note 562 561 563 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 563 562 564 49 (set (reg:QI 0 ax [orig:147 D.5856 ] [147])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -588 [0xfffffffffffffdb4])) [0 date_temp+4 S1 A32])) sim2fitman_read_procpar.cpp:261 93 {*movqi_internal}
     (nil))
(insn 564 563 565 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [0 month_temp+0 S1 A64])
        (reg:QI 0 ax [orig:147 D.5856 ] [147])) sim2fitman_read_procpar.cpp:261 93 {*movqi_internal}
     (nil))
(insn 565 564 566 49 (set (reg:QI 0 ax [orig:148 D.5856 ] [148])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -587 [0xfffffffffffffdb5])) [0 date_temp+5 S1 A8])) sim2fitman_read_procpar.cpp:262 93 {*movqi_internal}
     (nil))
(insn 566 565 567 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -607 [0xfffffffffffffda1])) [0 month_temp+1 S1 A8])
        (reg:QI 0 ax [orig:148 D.5856 ] [148])) sim2fitman_read_procpar.cpp:262 93 {*movqi_internal}
     (nil))
(insn 567 566 568 49 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -606 [0xfffffffffffffda2])) [0 month_temp+2 S1 A16])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:263 93 {*movqi_internal}
     (nil))
(insn 568 567 569 49 (parallel [
            (set (reg:DI 0 ax [288])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -608 [0xfffffffffffffda0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:264 218 {*adddi_1}
     (nil))
(insn 569 568 570 49 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) sim2fitman_read_procpar.cpp:264 90 {*movsi_internal}
     (nil))
(insn 570 569 571 49 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 571 570 572 49 (set (reg:DI 5 di)
        (reg:DI 0 ax [288])) sim2fitman_read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(call_insn 572 571 573 49 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x7f8d0c663af8 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:264 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 573 572 574 49 (set (reg:DI 0 ax [orig:149 D.5850 ] [149])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 574 573 575 49 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -668 [0xfffffffffffffd64])) [0 month_temp_int+0 S4 A32])
        (reg:SI 0 ax [orig:149 D.5850 ] [149])) sim2fitman_read_procpar.cpp:264 90 {*movsi_internal}
     (nil))
(insn 575 574 576 49 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -668 [0xfffffffffffffd64])) [0 month_temp_int+0 S4 A32])
            (const_int 12 [0xc]))) sim2fitman_read_procpar.cpp:265 7 {*cmpsi_1}
     (nil))
(jump_insn 576 575 848 49 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 668)
            (pc))) sim2fitman_read_procpar.cpp:265 612 {*jcc_1}
     (nil)
 -> 668)
;;  succ:       63
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 289 290
(note 848 576 577 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 577 848 578 50 (set (reg:DI 0 ax [289])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -668 [0xfffffffffffffd64])) [0 month_temp_int+0 S4 A32]))) sim2fitman_read_procpar.cpp:265 133 {*zero_extendsidi2}
     (nil))
(insn 578 577 579 50 (set (reg:DI 0 ax [290])
        (mem/u/c:DI (plus:DI (ashift:DI (reg:DI 0 ax [289])
                    (const_int 3 [0x3]))
                (label_ref:DI 581)) [0  S8 A8])) sim2fitman_read_procpar.cpp:265 89 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 581 (nil)))
(jump_insn 579 578 580 50 (parallel [
            (set (pc)
                (reg:DI 0 ax [290]))
            (use (label_ref 581))
        ]) sim2fitman_read_procpar.cpp:265 658 {*tablejump_1}
     (nil)
 -> 581)
;;  succ:       63
;;              51
;;              52
;;              53
;;              54
;;              55
;;              56
;;              57
;;              58
;;              59
;;              60
;;              61
;;              62
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 580 579 581)
;; Insn is not within a basic block
(code_label 581 580 582 28 "" [2 uses])
;; Insn is not within a basic block
(jump_table_data 582 581 583 (addr_vec:DI [
            (label_ref:DI 668)
            (label_ref:DI 584)
            (label_ref:DI 591)
            (label_ref:DI 598)
            (label_ref:DI 605)
            (label_ref:DI 612)
            (label_ref:DI 619)
            (label_ref:DI 626)
            (label_ref:DI 633)
            (label_ref:DI 640)
            (label_ref:DI 647)
            (label_ref:DI 654)
            (label_ref:DI 661)
        ]))
(barrier 583 582 584)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 291
(code_label 584 583 585 51 27 "" [1 uses])
(note 585 584 586 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 586 585 587 51 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:266 89 {*movdi_internal}
     (nil))
(insn 587 586 588 51 (parallel [
            (set (reg/f:DI 0 ax [orig:150 D.5857 ] [150])
                (plus:DI (reg/f:DI 0 ax [291])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:266 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 588 587 893 51 (set (mem:SI (reg/f:DI 0 ax [orig:150 D.5857 ] [150]) [0 MEM[(void *)_184]+0 S4 A8])
        (const_int 7233866 [0x6e614a])) sim2fitman_read_procpar.cpp:266 90 {*movsi_internal}
     (nil))
(jump_insn 893 588 894 51 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:266 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 894 893 591)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 292
(code_label 591 894 592 52 29 "" [1 uses])
(note 592 591 593 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 593 592 594 52 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:267 89 {*movdi_internal}
     (nil))
(insn 594 593 595 52 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.5857 ] [151])
                (plus:DI (reg/f:DI 0 ax [292])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:267 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 595 594 895 52 (set (mem:SI (reg/f:DI 0 ax [orig:151 D.5857 ] [151]) [0 MEM[(void *)_186]+0 S4 A8])
        (const_int 6448454 [0x626546])) sim2fitman_read_procpar.cpp:267 90 {*movsi_internal}
     (nil))
(jump_insn 895 595 896 52 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:267 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 896 895 598)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 293
(code_label 598 896 599 53 30 "" [1 uses])
(note 599 598 600 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 600 599 601 53 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:268 89 {*movdi_internal}
     (nil))
(insn 601 600 602 53 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.5857 ] [152])
                (plus:DI (reg/f:DI 0 ax [293])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:268 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 602 601 897 53 (set (mem:SI (reg/f:DI 0 ax [orig:152 D.5857 ] [152]) [0 MEM[(void *)_188]+0 S4 A8])
        (const_int 7496013 [0x72614d])) sim2fitman_read_procpar.cpp:268 90 {*movsi_internal}
     (nil))
(jump_insn 897 602 898 53 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:268 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 898 897 605)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 294
(code_label 605 898 606 54 31 "" [1 uses])
(note 606 605 607 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 607 606 608 54 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:269 89 {*movdi_internal}
     (nil))
(insn 608 607 609 54 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.5857 ] [153])
                (plus:DI (reg/f:DI 0 ax [294])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:269 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 609 608 899 54 (set (mem:SI (reg/f:DI 0 ax [orig:153 D.5857 ] [153]) [0 MEM[(void *)_190]+0 S4 A8])
        (const_int 7499841 [0x727041])) sim2fitman_read_procpar.cpp:269 90 {*movsi_internal}
     (nil))
(jump_insn 899 609 900 54 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:269 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 900 899 612)
;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 295
(code_label 612 900 613 55 32 "" [1 uses])
(note 613 612 614 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 614 613 615 55 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:270 89 {*movdi_internal}
     (nil))
(insn 615 614 616 55 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.5857 ] [154])
                (plus:DI (reg/f:DI 0 ax [295])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:270 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 616 615 901 55 (set (mem:SI (reg/f:DI 0 ax [orig:154 D.5857 ] [154]) [0 MEM[(void *)_192]+0 S4 A8])
        (const_int 7954765 [0x79614d])) sim2fitman_read_procpar.cpp:270 90 {*movsi_internal}
     (nil))
(jump_insn 901 616 902 55 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:270 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 902 901 619)
;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 155 296
(code_label 619 902 620 56 33 "" [1 uses])
(note 620 619 621 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 621 620 622 56 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:271 89 {*movdi_internal}
     (nil))
(insn 622 621 623 56 (parallel [
            (set (reg/f:DI 0 ax [orig:155 D.5857 ] [155])
                (plus:DI (reg/f:DI 0 ax [296])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:271 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 623 622 903 56 (set (mem:SI (reg/f:DI 0 ax [orig:155 D.5857 ] [155]) [0 MEM[(void *)_194]+0 S4 A8])
        (const_int 7238986 [0x6e754a])) sim2fitman_read_procpar.cpp:271 90 {*movsi_internal}
     (nil))
(jump_insn 903 623 904 56 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:271 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 904 903 626)
;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 156 297
(code_label 626 904 627 57 34 "" [1 uses])
(note 627 626 628 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 628 627 629 57 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:272 89 {*movdi_internal}
     (nil))
(insn 629 628 630 57 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.5857 ] [156])
                (plus:DI (reg/f:DI 0 ax [297])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:272 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 630 629 905 57 (set (mem:SI (reg/f:DI 0 ax [orig:156 D.5857 ] [156]) [0 MEM[(void *)_196]+0 S4 A8])
        (const_int 7107914 [0x6c754a])) sim2fitman_read_procpar.cpp:272 90 {*movsi_internal}
     (nil))
(jump_insn 905 630 906 57 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:272 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 906 905 633)
;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 298
(code_label 633 906 634 58 35 "" [1 uses])
(note 634 633 635 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 635 634 636 58 (set (reg/f:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:273 89 {*movdi_internal}
     (nil))
(insn 636 635 637 58 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.5857 ] [157])
                (plus:DI (reg/f:DI 0 ax [298])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:273 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 637 636 907 58 (set (mem:SI (reg/f:DI 0 ax [orig:157 D.5857 ] [157]) [0 MEM[(void *)_198]+0 S4 A8])
        (const_int 6780225 [0x677541])) sim2fitman_read_procpar.cpp:273 90 {*movsi_internal}
     (nil))
(jump_insn 907 637 908 58 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:273 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 908 907 640)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 299
(code_label 640 908 641 59 36 "" [1 uses])
(note 641 640 642 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 642 641 643 59 (set (reg/f:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:274 89 {*movdi_internal}
     (nil))
(insn 643 642 644 59 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.5857 ] [158])
                (plus:DI (reg/f:DI 0 ax [299])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:274 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 644 643 909 59 (set (mem:SI (reg/f:DI 0 ax [orig:158 D.5857 ] [158]) [0 MEM[(void *)_200]+0 S4 A8])
        (const_int 7365971 [0x706553])) sim2fitman_read_procpar.cpp:274 90 {*movsi_internal}
     (nil))
(jump_insn 909 644 910 59 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:274 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 910 909 647)
;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159 300
(code_label 647 910 648 60 37 "" [1 uses])
(note 648 647 649 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 649 648 650 60 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:275 89 {*movdi_internal}
     (nil))
(insn 650 649 651 60 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.5857 ] [159])
                (plus:DI (reg/f:DI 0 ax [300])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:275 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 651 650 911 60 (set (mem:SI (reg/f:DI 0 ax [orig:159 D.5857 ] [159]) [0 MEM[(void *)_202]+0 S4 A8])
        (const_int 7627599 [0x74634f])) sim2fitman_read_procpar.cpp:275 90 {*movsi_internal}
     (nil))
(jump_insn 911 651 912 60 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:275 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 912 911 654)
;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 301
(code_label 654 912 655 61 38 "" [1 uses])
(note 655 654 656 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 656 655 657 61 (set (reg/f:DI 0 ax [301])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:276 89 {*movdi_internal}
     (nil))
(insn 657 656 658 61 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.5857 ] [160])
                (plus:DI (reg/f:DI 0 ax [301])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:276 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 658 657 913 61 (set (mem:SI (reg/f:DI 0 ax [orig:160 D.5857 ] [160]) [0 MEM[(void *)_204]+0 S4 A8])
        (const_int 7761742 [0x766f4e])) sim2fitman_read_procpar.cpp:276 90 {*movsi_internal}
     (nil))
(jump_insn 913 658 914 61 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:276 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 914 913 661)
;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 161 302
(code_label 661 914 662 62 39 "" [1 uses])
(note 662 661 663 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 663 662 664 62 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(insn 664 663 665 62 (parallel [
            (set (reg/f:DI 0 ax [orig:161 D.5857 ] [161])
                (plus:DI (reg/f:DI 0 ax [302])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:277 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 665 664 915 62 (set (mem:SI (reg/f:DI 0 ax [orig:161 D.5857 ] [161]) [0 MEM[(void *)_206]+0 S4 A8])
        (const_int 6513988 [0x636544])) sim2fitman_read_procpar.cpp:277 90 {*movsi_internal}
     (nil))
(jump_insn 915 665 916 62 (set (pc)
        (label_ref 673)) sim2fitman_read_procpar.cpp:277 654 {jump}
     (nil)
 -> 673)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 916 915 668)
;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;;              49
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 303
(code_label 668 916 669 63 26 "" [2 uses])
(note 669 668 670 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 670 669 671 63 (set (reg/f:DI 0 ax [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:278 89 {*movdi_internal}
     (nil))
(insn 671 670 672 63 (parallel [
            (set (reg/f:DI 0 ax [orig:162 D.5857 ] [162])
                (plus:DI (reg/f:DI 0 ax [303])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:278 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 672 671 673 63 (set (mem:SI (reg/f:DI 0 ax [orig:162 D.5857 ] [162]) [0 MEM[(void *)_208]+0 S4 A8])
        (const_int 2105376 [0x202020])) sim2fitman_read_procpar.cpp:278 90 {*movsi_internal}
     (nil))
;;  succ:       64 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;;              51 [100.0%] 
;;              52 [100.0%] 
;;              53 [100.0%] 
;;              54 [100.0%] 
;;              55 [100.0%] 
;;              56 [100.0%] 
;;              57 [100.0%] 
;;              58 [100.0%] 
;;              59 [100.0%] 
;;              60 [100.0%] 
;;              61 [100.0%] 
;;              62 [100.0%] 
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 163 164 165 166 167 168 169 170 171 172 173 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322
(code_label 673 672 674 64 40 "" [12 uses])
(note 674 673 675 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 675 674 676 64 (set (reg/f:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:280 89 {*movdi_internal}
     (nil))
(insn 676 675 677 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [304])
                (const_int 11 [0xb])) [0 procpar_info_61(D)->ex_datetime+3 S1 A8])
        (const_int 32 [0x20])) sim2fitman_read_procpar.cpp:280 93 {*movqi_internal}
     (nil))
(insn 677 676 678 64 (set (reg:QI 1 dx [orig:163 D.5856 ] [163])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -586 [0xfffffffffffffdb6])) [0 date_temp+6 S1 A16])) sim2fitman_read_procpar.cpp:281 93 {*movqi_internal}
     (nil))
(insn 678 677 679 64 (set (reg/f:DI 0 ax [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:281 89 {*movdi_internal}
     (nil))
(insn 679 678 680 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [305])
                (const_int 12 [0xc])) [0 procpar_info_61(D)->ex_datetime+4 S1 A32])
        (reg:QI 1 dx [orig:163 D.5856 ] [163])) sim2fitman_read_procpar.cpp:281 93 {*movqi_internal}
     (nil))
(insn 680 679 681 64 (set (reg:QI 1 dx [orig:164 D.5856 ] [164])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -585 [0xfffffffffffffdb7])) [0 date_temp+7 S1 A8])) sim2fitman_read_procpar.cpp:282 93 {*movqi_internal}
     (nil))
(insn 681 680 682 64 (set (reg/f:DI 0 ax [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:282 89 {*movdi_internal}
     (nil))
(insn 682 681 683 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [306])
                (const_int 13 [0xd])) [0 procpar_info_61(D)->ex_datetime+5 S1 A8])
        (reg:QI 1 dx [orig:164 D.5856 ] [164])) sim2fitman_read_procpar.cpp:282 93 {*movqi_internal}
     (nil))
(insn 683 682 684 64 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:283 89 {*movdi_internal}
     (nil))
(insn 684 683 685 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [307])
                (const_int 14 [0xe])) [0 procpar_info_61(D)->ex_datetime+6 S1 A16])
        (const_int 32 [0x20])) sim2fitman_read_procpar.cpp:283 93 {*movqi_internal}
     (nil))
(insn 685 684 686 64 (set (reg:QI 1 dx [orig:165 D.5856 ] [165])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [0 date_temp+0 S1 A64])) sim2fitman_read_procpar.cpp:306 93 {*movqi_internal}
     (nil))
(insn 686 685 687 64 (set (reg/f:DI 0 ax [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:306 89 {*movdi_internal}
     (nil))
(insn 687 686 688 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [308])
                (const_int 15 [0xf])) [0 procpar_info_61(D)->ex_datetime+7 S1 A8])
        (reg:QI 1 dx [orig:165 D.5856 ] [165])) sim2fitman_read_procpar.cpp:306 93 {*movqi_internal}
     (nil))
(insn 688 687 689 64 (set (reg:QI 1 dx [orig:166 D.5856 ] [166])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -591 [0xfffffffffffffdb1])) [0 date_temp+1 S1 A8])) sim2fitman_read_procpar.cpp:307 93 {*movqi_internal}
     (nil))
(insn 689 688 690 64 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:307 89 {*movdi_internal}
     (nil))
(insn 690 689 691 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [309])
                (const_int 16 [0x10])) [0 procpar_info_61(D)->ex_datetime+8 S1 A64])
        (reg:QI 1 dx [orig:166 D.5856 ] [166])) sim2fitman_read_procpar.cpp:307 93 {*movqi_internal}
     (nil))
(insn 691 690 692 64 (set (reg:QI 1 dx [orig:167 D.5856 ] [167])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -590 [0xfffffffffffffdb2])) [0 date_temp+2 S1 A16])) sim2fitman_read_procpar.cpp:308 93 {*movqi_internal}
     (nil))
(insn 692 691 693 64 (set (reg/f:DI 0 ax [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:308 89 {*movdi_internal}
     (nil))
(insn 693 692 694 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [310])
                (const_int 17 [0x11])) [0 procpar_info_61(D)->ex_datetime+9 S1 A8])
        (reg:QI 1 dx [orig:167 D.5856 ] [167])) sim2fitman_read_procpar.cpp:308 93 {*movqi_internal}
     (nil))
(insn 694 693 695 64 (set (reg:QI 1 dx [orig:168 D.5856 ] [168])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -589 [0xfffffffffffffdb3])) [0 date_temp+3 S1 A8])) sim2fitman_read_procpar.cpp:309 93 {*movqi_internal}
     (nil))
(insn 695 694 696 64 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:309 89 {*movdi_internal}
     (nil))
(insn 696 695 697 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [311])
                (const_int 18 [0x12])) [0 procpar_info_61(D)->ex_datetime+10 S1 A16])
        (reg:QI 1 dx [orig:168 D.5856 ] [168])) sim2fitman_read_procpar.cpp:309 93 {*movqi_internal}
     (nil))
(insn 697 696 698 64 (set (reg/f:DI 0 ax [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:312 89 {*movdi_internal}
     (nil))
(insn 698 697 699 64 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [312])
                (const_int 19 [0x13])) [0 procpar_info_61(D)->ex_datetime+11 S1 A8])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:312 93 {*movqi_internal}
     (nil))
(insn 699 698 700 64 (set (reg/f:DI 0 ax [313])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:315 89 {*movdi_internal}
     (nil))
(insn 700 699 701 64 (set (reg:DF 21 xmm0 [314])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC27") [flags 0x2]) [0  S8 A64])) sim2fitman_read_procpar.cpp:315 128 {*movdf_internal}
     (nil))
(insn 701 700 702 64 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [313])
                (const_int 344 [0x158])) [0 procpar_info_61(D)->offset_frequency+0 S8 A64])
        (reg:DF 21 xmm0 [314])) sim2fitman_read_procpar.cpp:315 128 {*movdf_internal}
     (nil))
(insn 702 701 703 64 (set (reg/f:DI 0 ax [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:317 89 {*movdi_internal}
     (nil))
(insn 703 702 704 64 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [315])
                (const_int 324 [0x144])) [0 procpar_info_61(D)->num_transients+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:317 90 {*movsi_internal}
     (nil))
(insn 704 703 705 64 (set (reg/f:DI 0 ax [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:319 89 {*movdi_internal}
     (nil))
(insn 705 704 706 64 (set (reg:SF 21 xmm0 [317])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:319 129 {*movsf_internal}
     (nil))
(insn 706 705 707 64 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [316])
                (const_int 400 [0x190])) [0 procpar_info_61(D)->vtheta+0 S4 A64])
        (reg:SF 21 xmm0 [317])) sim2fitman_read_procpar.cpp:319 129 {*movsf_internal}
     (nil))
(insn 707 706 708 64 (set (reg/f:DI 0 ax [318])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:321 89 {*movdi_internal}
     (nil))
(insn 708 707 709 64 (set (reg:SI 0 ax [orig:169 D.5848 ] [169])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [318])
                (const_int 328 [0x148])) [0 procpar_info_61(D)->num_points+0 S4 A64])) sim2fitman_read_procpar.cpp:321 90 {*movsi_internal}
     (nil))
(insn 709 708 710 64 (set (reg:SF 21 xmm0 [orig:170 D.5852 ] [170])
        (float:SF (reg:SI 0 ax [orig:169 D.5848 ] [169]))) sim2fitman_read_procpar.cpp:321 199 {*floatsisf2_sse}
     (nil))
(insn 710 709 711 64 (set (reg:SF 21 xmm0 [orig:171 D.5852 ] [171])
        (mult:SF (reg:SF 21 xmm0 [orig:170 D.5852 ] [170])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -676 [0xfffffffffffffd5c])) [0 dwell+0 S4 A32]))) sim2fitman_read_procpar.cpp:321 797 {*fop_sf_comm_sse}
     (nil))
(insn 711 710 712 64 (set (reg/f:DI 0 ax [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:321 89 {*movdi_internal}
     (nil))
(insn 712 711 713 64 (set (mem/j:SF (reg/f:DI 0 ax [319]) [0 procpar_info_61(D)->acquision_time+0 S4 A64])
        (reg:SF 21 xmm0 [orig:171 D.5852 ] [171])) sim2fitman_read_procpar.cpp:321 129 {*movsf_internal}
     (nil))
(insn 713 712 714 64 (set (reg/f:DI 0 ax [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:377 89 {*movdi_internal}
     (nil))
(insn 714 713 715 64 (set (reg:SF 21 xmm0 [321])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:377 129 {*movsf_internal}
     (nil))
(insn 715 714 716 64 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [320])
                (const_int 360 [0x168])) [0 procpar_info_61(D)->gain+0 S4 A64])
        (reg:SF 21 xmm0 [321])) sim2fitman_read_procpar.cpp:377 129 {*movsf_internal}
     (nil))
(insn 716 715 717 64 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f8d0c34d480 *.LC28>)) sim2fitman_read_procpar.cpp:378 89 {*movdi_internal}
     (nil))
(call_insn 717 716 718 64 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f8d0c7e5000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:378 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 718 717 719 64 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f8d0c34d510 *.LC29>)) sim2fitman_read_procpar.cpp:379 89 {*movdi_internal}
     (nil))
(insn 719 718 720 64 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:379 93 {*movqi_internal}
     (nil))
(call_insn 720 719 721 64 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f8d0c7e45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:379 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 721 720 722 64 (parallel [
            (set (reg:DI 0 ax [322])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:380 218 {*adddi_1}
     (nil))
(insn 722 721 723 64 (set (reg:DI 5 di)
        (reg:DI 0 ax [322])) sim2fitman_read_procpar.cpp:380 89 {*movdi_internal}
     (nil))
(call_insn 723 722 724 64 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("gets") [flags 0x41]  <function_decl 0x7f8d0c5acaf8 gets>) [0 gets S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:380 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 724 723 725 64 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.5858 ] [172])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:381 218 {*adddi_1}
     (nil))
(insn 725 724 726 64 (set (reg:QI 0 ax [orig:173 D.5859 ] [173])
        (mem:QI (reg/f:DI 0 ax [orig:172 D.5858 ] [172]) [0 MEM[(const unsigned char * {ref-all})_236]+0 S1 A8])) sim2fitman_read_procpar.cpp:381 93 {*movqi_internal}
     (nil))
(insn 726 725 727 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:173 D.5859 ] [173])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:381 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 727 726 728 64 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 783)
            (pc))) sim2fitman_read_procpar.cpp:381 612 {*jcc_1}
     (nil)
 -> 783)
;;  succ:       65 (FALLTHRU)
;;              73
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 174 323
(note 728 727 729 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 729 728 730 65 (parallel [
            (set (reg:DI 0 ax [323])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:382 218 {*adddi_1}
     (nil))
(insn 730 729 731 65 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:382 89 {*movdi_internal}
     (nil))
(insn 731 730 732 65 (set (reg:DI 5 di)
        (reg:DI 0 ax [323])) sim2fitman_read_procpar.cpp:382 89 {*movdi_internal}
     (nil))
(call_insn 732 731 734 65 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:382 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 734 732 925 65 (set (reg:SF 24 xmm3 [349])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:174 D.5851 ] [174]))) sim2fitman_read_procpar.cpp:382 157 {*truncdfsf_fast_sse}
     (nil))
(insn 925 734 775 65 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [0 temp_float+0 S4 A32])
        (reg:SF 24 xmm3 [349])) sim2fitman_read_procpar.cpp:382 129 {*movsf_internal}
     (nil))
;;  succ:       66 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;;              71 [100.0%] 
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 175 176 324
(code_label 775 925 735 66 46 "" [1 uses])
(note 735 775 736 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 736 735 737 66 (parallel [
            (set (reg:DI 0 ax [324])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:383 218 {*adddi_1}
     (nil))
(insn 737 736 738 66 (set (reg:DI 5 di)
        (reg:DI 0 ax [324])) sim2fitman_read_procpar.cpp:383 89 {*movdi_internal}
     (nil))
(call_insn 738 737 739 66 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x7f8d0c6dd438 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 739 738 740 66 (set (reg:QI 0 ax [orig:175 D.5849 ] [175])
        (reg:QI 0 ax)) sim2fitman_read_procpar.cpp:383 93 {*movqi_internal}
     (nil))
(insn 740 739 741 66 (parallel [
            (set (reg:QI 0 ax [orig:176 D.5849 ] [176])
                (xor:QI (reg:QI 0 ax [orig:175 D.5849 ] [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:383 406 {*xorqi_1}
     (nil))
(insn 741 740 742 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:176 D.5849 ] [176])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 742 741 743 66 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 750)
            (pc))) sim2fitman_read_procpar.cpp:383 612 {*jcc_1}
     (nil)
 -> 750)
;;  succ:       68
;;              67 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66 (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 177 325
(note 743 742 744 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 744 743 745 67 (set (reg:SF 0 ax [325])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [0 temp_float+0 S4 A32])) sim2fitman_read_procpar.cpp:383 129 {*movsf_internal}
     (nil))
(insn 745 744 926 67 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -740 [0xfffffffffffffd1c])) [0 %sfp+-740 S4 A32])
        (reg:SF 0 ax [325])) sim2fitman_read_procpar.cpp:383 129 {*movsf_internal}
     (nil))
(insn 926 745 746 67 (set (reg:SF 21 xmm0)
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -740 [0xfffffffffffffd1c])) [0 %sfp+-740 S4 A32])) sim2fitman_read_procpar.cpp:383 129 {*movsf_internal}
     (nil))
(call_insn 746 926 747 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5isNANf") [flags 0x41]  <function_decl 0x7f8d0c6dda20 isNAN>) [0 isNAN S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 669 {*call_value}
     (nil)
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 747 746 748 67 (set (reg:SI 0 ax [orig:177 D.5848 ] [177])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:383 90 {*movsi_internal}
     (nil))
(insn 748 747 749 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:177 D.5848 ] [177])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 749 748 750 67 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 755)
            (pc))) sim2fitman_read_procpar.cpp:383 612 {*jcc_1}
     (nil)
 -> 755)
;;  succ:       68 (FALLTHRU)
;;              69
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66
;;              67 (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89
(code_label 750 749 751 68 42 "" [1 uses])
(note 751 750 752 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 752 751 917 68 (set (reg:QI 0 ax [orig:89 D.5849 ] [89])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:383 93 {*movqi_internal}
     (nil))
(jump_insn 917 752 918 68 (set (pc)
        (label_ref 758)) sim2fitman_read_procpar.cpp:383 654 {jump}
     (nil)
 -> 758)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

(barrier 918 917 755)
;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89
(code_label 755 918 756 69 43 "" [1 uses])
(note 756 755 757 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 757 756 758 69 (set (reg:QI 0 ax [orig:89 D.5849 ] [89])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:383 93 {*movqi_internal}
     (nil))
;;  succ:       70 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69 (FALLTHRU)
;;              68 [100.0%] 
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(code_label 758 757 759 70 44 "" [1 uses])
(note 759 758 760 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 760 759 761 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.5849 ] [89])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 761 760 762 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 778)
            (pc))) sim2fitman_read_procpar.cpp:383 612 {*jcc_1}
     (nil)
 -> 778)
;;  succ:       71 (FALLTHRU)
;;              72
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 178 326 327
(note 762 761 763 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 763 762 764 71 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f8d0c34d5a0 *.LC30>)) sim2fitman_read_procpar.cpp:384 89 {*movdi_internal}
     (nil))
(insn 764 763 765 71 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:384 93 {*movqi_internal}
     (nil))
(call_insn 765 764 766 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f8d0c7e45e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:384 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 766 765 767 71 (parallel [
            (set (reg:DI 0 ax [326])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:385 218 {*adddi_1}
     (nil))
(insn 767 766 768 71 (set (reg:DI 5 di)
        (reg:DI 0 ax [326])) sim2fitman_read_procpar.cpp:385 89 {*movdi_internal}
     (nil))
(call_insn 768 767 769 71 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("gets") [flags 0x41]  <function_decl 0x7f8d0c5acaf8 gets>) [0 gets S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:385 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 769 768 770 71 (parallel [
            (set (reg:DI 0 ax [327])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:386 218 {*adddi_1}
     (nil))
(insn 770 769 771 71 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:386 89 {*movdi_internal}
     (nil))
(insn 771 770 772 71 (set (reg:DI 5 di)
        (reg:DI 0 ax [327])) sim2fitman_read_procpar.cpp:386 89 {*movdi_internal}
     (nil))
(call_insn 772 771 774 71 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x7f8d0c663870 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:386 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 774 772 927 71 (set (reg:SF 25 xmm4 [351])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:178 D.5851 ] [178]))) sim2fitman_read_procpar.cpp:386 157 {*truncdfsf_fast_sse}
     (nil))
(insn 927 774 919 71 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [0 temp_float+0 S4 A32])
        (reg:SF 25 xmm4 [351])) sim2fitman_read_procpar.cpp:386 129 {*movsf_internal}
     (nil))
(jump_insn 919 927 920 71 (set (pc)
        (label_ref 775)) sim2fitman_read_procpar.cpp:383 654 {jump}
     (nil)
 -> 775)
;;  succ:       66 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 920 919 778)
;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 328 329
(code_label 778 920 779 72 45 "" [1 uses])
(note 779 778 780 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 780 779 781 72 (set (reg/f:DI 0 ax [328])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:388 89 {*movdi_internal}
     (nil))
(insn 781 780 782 72 (set (reg:SF 21 xmm0 [329])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [0 temp_float+0 S4 A32])) sim2fitman_read_procpar.cpp:388 129 {*movsf_internal}
     (nil))
(insn 782 781 783 72 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [328])
                (const_int 360 [0x168])) [0 procpar_info_61(D)->gain+0 S4 A64])
        (reg:SF 21 xmm0 [329])) sim2fitman_read_procpar.cpp:388 129 {*movsf_internal}
     (nil))
;;  succ:       73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64
;;              72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 179 180 181 182 183 184 185 186 187 188 189 330 331 332 333 334 335 336 337 338 339 342 343 344
(code_label 783 782 784 73 41 "" [1 uses])
(note 784 783 785 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 785 784 786 73 (set (reg/f:DI 0 ax [330])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:395 89 {*movdi_internal}
     (nil))
(insn 786 785 787 73 (set (mem/j:SI (reg/f:DI 0 ax [330]) [0 infile_struct_50(D)->num_datasets+0 S4 A64])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:395 90 {*movsi_internal}
     (nil))
(insn 787 786 788 73 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])) sim2fitman_read_procpar.cpp:397 89 {*movdi_internal}
     (nil))
(insn 788 787 789 73 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [331])
                (const_int 24 [0x18])) [0 main_header_57(D)->ebytes.number+0 S8 A64])
        (const_int 16 [0x10])) sim2fitman_read_procpar.cpp:397 89 {*movdi_internal}
     (nil))
(insn 789 788 790 73 (set (reg:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:402 89 {*movdi_internal}
     (nil))
(insn 790 789 791 73 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) sim2fitman_read_procpar.cpp:402 90 {*movsi_internal}
     (nil))
(insn 791 790 792 73 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:402 89 {*movdi_internal}
     (nil))
(insn 792 791 793 73 (set (reg:DI 5 di)
        (reg:DI 0 ax [332])) sim2fitman_read_procpar.cpp:402 89 {*movdi_internal}
     (nil))
(call_insn 793 792 794 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7f8d0c5ac438 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:402 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 794 793 795 73 (set (reg/f:DI 0 ax [333])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:403 89 {*movdi_internal}
     (nil))
(insn 795 794 796 73 (set (reg:DI 0 ax [334])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [333])
                (const_int 24 [0x18])) [0 infile_struct_50(D)->hdr_offset+0 S8 A64])) sim2fitman_read_procpar.cpp:403 89 {*movdi_internal}
     (nil))
(insn 796 795 797 73 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [0 header_size+0 S8 A64])
        (reg:DI 0 ax [334])) sim2fitman_read_procpar.cpp:403 89 {*movdi_internal}
     (nil))
(insn 797 796 798 73 (set (reg:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:404 89 {*movdi_internal}
     (nil))
(insn 798 797 799 73 (set (reg:DI 5 di)
        (reg:DI 0 ax [335])) sim2fitman_read_procpar.cpp:404 89 {*movdi_internal}
     (nil))
(call_insn 799 798 800 73 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ftell") [flags 0x41]  <function_decl 0x7f8d0c5ac6c0 ftell>) [0 ftell S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:404 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 800 799 801 73 (set (reg:DI 0 ax [orig:179 D.5850 ] [179])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:404 89 {*movdi_internal}
     (nil))
(insn 801 800 802 73 (set (reg:SI 1 dx [orig:180 D.5848 ] [180])
        (reg:SI 0 ax [orig:179 D.5850 ] [179])) sim2fitman_read_procpar.cpp:404 90 {*movsi_internal}
     (nil))
(insn 802 801 803 73 (set (reg/f:DI 0 ax [336])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:404 89 {*movdi_internal}
     (nil))
(insn 803 802 804 73 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [336])
                (const_int 8 [0x8])) [0 infile_struct_50(D)->file_size+0 S4 A64])
        (reg:SI 1 dx [orig:180 D.5848 ] [180])) sim2fitman_read_procpar.cpp:404 90 {*movsi_internal}
     (nil))
(insn 804 803 805 73 (set (reg/f:DI 0 ax [337])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])) sim2fitman_read_procpar.cpp:405 89 {*movdi_internal}
     (nil))
(insn 805 804 806 73 (set (reg:DI 1 dx [orig:181 D.5850 ] [181])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [337])
                (const_int 24 [0x18])) [0 main_header_57(D)->ebytes.number+0 S8 A64])) sim2fitman_read_procpar.cpp:405 89 {*movdi_internal}
     (nil))
(insn 806 805 807 73 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:405 89 {*movdi_internal}
     (nil))
(insn 807 806 808 73 (set (reg:SI 0 ax [orig:182 D.5848 ] [182])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [338])
                (const_int 328 [0x148])) [0 procpar_info_61(D)->num_points+0 S4 A64])) sim2fitman_read_procpar.cpp:405 90 {*movsi_internal}
     (nil))
(insn 808 807 809 73 (set (reg:DI 0 ax [orig:183 D.5850 ] [183])
        (sign_extend:DI (reg:SI 0 ax [orig:182 D.5848 ] [182]))) sim2fitman_read_procpar.cpp:405 142 {*extendsidi2_rex64}
     (nil))
(insn 809 808 810 73 (parallel [
            (set (reg:DI 1 dx [orig:184 D.5850 ] [184])
                (mult:DI (reg:DI 1 dx [orig:181 D.5850 ] [181])
                    (reg:DI 0 ax [orig:183 D.5850 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:405 306 {*muldi3_1}
     (nil))
(insn 810 809 811 73 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:406 89 {*movdi_internal}
     (nil))
(insn 811 810 812 73 (set (reg:SI 0 ax [orig:185 D.5848 ] [185])
        (mem/j:SI (reg/f:DI 0 ax [339]) [0 infile_struct_50(D)->num_datasets+0 S4 A64])) sim2fitman_read_procpar.cpp:406 90 {*movsi_internal}
     (nil))
(insn 812 811 813 73 (set (reg:DI 0 ax [orig:186 D.5850 ] [186])
        (sign_extend:DI (reg:SI 0 ax [orig:185 D.5848 ] [185]))) sim2fitman_read_procpar.cpp:406 142 {*extendsidi2_rex64}
     (nil))
(insn 813 812 817 73 (parallel [
            (set (reg:DI 1 dx [orig:187 D.5850 ] [187])
                (mult:DI (reg:DI 1 dx [orig:184 D.5850 ] [184])
                    (reg:DI 0 ax [orig:186 D.5850 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:406 306 {*muldi3_1}
     (nil))
(insn 817 813 818 73 (set (reg:DI 0 ax [343])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [0 header_size+0 S8 A64])) sim2fitman_read_procpar.cpp:406 89 {*movdi_internal}
     (nil))
(insn 818 817 819 73 (parallel [
            (set (reg:DI 0 ax [342])
                (plus:DI (reg:DI 0 ax [343])
                    (reg:DI 1 dx [orig:187 D.5850 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:406 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg:DI 1 dx [orig:187 D.5850 ] [187])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -624 [0xfffffffffffffd90])) [0 header_size+0 S8 A64]))
        (nil)))
(insn 819 818 820 73 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -656 [0xfffffffffffffd70])) [0 calc_filesize+0 S8 A64])
        (reg:DI 0 ax [342])) sim2fitman_read_procpar.cpp:406 89 {*movdi_internal}
     (nil))
(insn 820 819 821 73 (set (reg/f:DI 0 ax [344])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:407 89 {*movdi_internal}
     (nil))
(insn 821 820 822 73 (set (reg:SI 0 ax [orig:188 D.5848 ] [188])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [344])
                (const_int 8 [0x8])) [0 infile_struct_50(D)->file_size+0 S4 A64])) sim2fitman_read_procpar.cpp:407 90 {*movsi_internal}
     (nil))
(insn 822 821 823 73 (set (reg:DI 0 ax [orig:189 D.5850 ] [189])
        (sign_extend:DI (reg:SI 0 ax [orig:188 D.5848 ] [188]))) sim2fitman_read_procpar.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 823 822 824 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:189 D.5850 ] [189])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -656 [0xfffffffffffffd70])) [0 calc_filesize+0 S8 A64]))) sim2fitman_read_procpar.cpp:407 8 {*cmpdi_1}
     (nil))
(jump_insn 824 823 825 73 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 829)
            (pc))) sim2fitman_read_procpar.cpp:407 612 {*jcc_1}
     (nil)
 -> 829)
;;  succ:       74 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 825 824 826 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 826 825 921 74 (set (reg:SI 0 ax [orig:87 D.5848 ] [87])
        (const_int -3 [0xfffffffffffffffd])) sim2fitman_read_procpar.cpp:408 90 {*movsi_internal}
     (nil))
(jump_insn 921 826 922 74 (set (pc)
        (label_ref 834)) sim2fitman_read_procpar.cpp:408 654 {jump}
     (nil)
 -> 834)
;;  succ:       76 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 922 921 829)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 829 922 830 75 47 "" [1 uses])
(note 830 829 831 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 831 830 834 75 (set (reg:SI 0 ax [orig:87 D.5848 ] [87])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:413 90 {*movsi_internal}
     (nil))
;;  succ:       76 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;;              47 [100.0%] 
;;              3 [100.0%] 
;;              74 [100.0%] 
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 190
(code_label 834 831 835 76 48 "" [3 uses])
(note 835 834 836 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 836 835 840 76 (set (reg:SI 0 ax [orig:190 <retval> ] [190])
        (reg:SI 0 ax [orig:87 D.5848 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 840 836 841 76 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:190 <retval> ] [190])) sim2fitman_read_procpar.cpp:415 90 {*movsi_internal}
     (nil))
(insn 841 840 842 76 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.5860+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [347]))
        ]) sim2fitman_read_procpar.cpp:415 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 842 841 849 76 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 845)
            (pc))) sim2fitman_read_procpar.cpp:415 612 {*jcc_1}
     (nil)
 -> 845)
;;  succ:       78
;;              77 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 849 842 843 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(call_insn 843 849 844 77 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f8d0c32c510 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:415 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 844 843 845)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 845 844 850 78 49 "" [1 uses])
(note 850 845 846 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 846 850 923 78 (use (reg/i:SI 0 ax)) sim2fitman_read_procpar.cpp:415 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 923 846 0 NOTE_INSN_DELETED)

;; Function int read_field(FILE*, char*, int, long int, int, bool) (_Z10read_fieldP8_IO_FILEPcilib, funcdef_no=3, decl_uid=5417, cgraph_uid=3, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 8:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 7
   Insn 58: point = 0
   Insn 57: point = 0
   Insn 53: point = 1
  BB 3
   Insn 60: point = 4
   Insn 35: point = 4
  BB 6
   Insn 50: point = 5
  BB 5
   Insn 47: point = 6
   Insn 46: point = 6
   Insn 45: point = 7
   Insn 44: point = 8
   Insn 43: point = 9
  BB 4
   Insn 41: point = 10
   Insn 40: point = 10
  BB 2
   Insn 33: point = 10
   Insn 32: point = 10
   Insn 31: point = 11
   Insn 30: point = 12
   Insn 29: point = 13
   Insn 28: point = 15
   Insn 27: point = 16
   Insn 26: point = 17
   Insn 25: point = 17
   Insn 24: point = 18
   Insn 23: point = 18
   Insn 22: point = 19
   Insn 21: point = 20
   Insn 20: point = 21
   Insn 19: point = 22
   Insn 18: point = 24
   Insn 17: point = 25
   Insn 16: point = 25
   Insn 15: point = 26
   Insn 14: point = 27
   Insn 13: point = 27
   Insn 12: point = 28
   Insn 8: point = 29
   Insn 7: point = 30
   Insn 6: point = 31
   Insn 5: point = 31
   Insn 4: point = 31
   Insn 3: point = 31
   Insn 2: point = 31
Compressing live ranges: from 31 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 50
changing reg in insn 35
changing reg in insn 53
changing reg in insn 19
changing reg in insn 23
changing reg in insn 27
changing reg in insn 30
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 53
changing reg in insn 57
changing reg in insn 7
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 43
changing reg in insn 45
changing reg in insn 44
changing reg in insn 46
deleting insn with uid = 22.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns


int read_field(FILE*, char*, int, long int, int, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={16d,13u} r1={8d,5u} r2={6d,3u} r4={7d,4u} r5={7d,4u} r6={1d,22u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d,3u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d,1u} r38={4d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 328{261d,67u,0e} in 40{37 regular + 3 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 93 94 95 96 97 98 99
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 in_file+0 S8 A64])
        (reg:DI 5 di [ in_file ])) sim2fitman_read_procpar.cpp:420 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 var_pointer+0 S8 A64])
        (reg:DI 4 si [ var_pointer ])) sim2fitman_read_procpar.cpp:420 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 var_size+0 S4 A32])
        (reg:SI 1 dx [ var_size ])) sim2fitman_read_procpar.cpp:420 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 hdr_field_offset+0 S8 A64])
        (reg:DI 2 cx [ hdr_field_offset ])) sim2fitman_read_procpar.cpp:420 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 hdr_field_size+0 S4 A32])
        (reg:SI 37 r8 [ hdr_field_size ])) sim2fitman_read_procpar.cpp:420 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [93])
        (reg:SI 38 r9 [ swap_bytes ])) sim2fitman_read_procpar.cpp:420 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 swap_bytes+0 S1 A32])
        (reg:QI 0 ax [93])) sim2fitman_read_procpar.cpp:420 93 {*movqi_internal}
     (nil))
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg:DI 2 cx [94])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 hdr_field_offset+0 S8 A64])) sim2fitman_read_procpar.cpp:422 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:422 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:422 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [94])) sim2fitman_read_procpar.cpp:422 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) sim2fitman_read_procpar.cpp:422 89 {*movdi_internal}
     (nil))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7f8d0c5ac438 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:422 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 18 17 19 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 hdr_field_size+0 S4 A32])) sim2fitman_read_procpar.cpp:423 90 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 1 dx [orig:88 D.5891 ] [88])
        (sign_extend:DI (reg:SI 0 ax [96]))) sim2fitman_read_procpar.cpp:423 142 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 2 (set (reg:DI 2 cx [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(insn 21 20 24 2 (set (reg:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 var_pointer+0 S8 A64])) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(insn 24 21 25 2 (set (reg:DI 4 si)
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [98])) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f8d0c5ac5e8 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:423 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 27 26 28 2 (set (reg:DI 1 dx [orig:89 D.5891 ] [89])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 hdr_field_size+0 S4 A32])) sim2fitman_read_procpar.cpp:423 90 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DI 0 ax [orig:90 D.5891 ] [90])
        (sign_extend:DI (reg:SI 0 ax [99]))) sim2fitman_read_procpar.cpp:423 142 {*extendsidi2_rex64}
     (nil))
(insn 30 29 31 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 1 dx [orig:89 D.5891 ] [89])
            (reg:DI 0 ax [orig:90 D.5891 ] [90]))) sim2fitman_read_procpar.cpp:423 8 {*cmpdi_1}
     (nil))
(insn 31 30 32 2 (set (reg:QI 0 ax [orig:91 D.5892 ] [91])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:423 607 {*setcc_qi}
     (nil))
(insn 32 31 33 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 D.5892 ] [91])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:423 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 33 32 34 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) sim2fitman_read_procpar.cpp:423 612 {*jcc_1}
     (nil)
 -> 38)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 34 33 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 60 3 (set (reg:SI 0 ax [orig:87 D.5890 ] [87])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_read_procpar.cpp:424 90 {*movsi_internal}
     (nil))
(jump_insn 60 35 61 3 (set (pc)
        (label_ref 51)) sim2fitman_read_procpar.cpp:424 654 {jump}
     (nil)
 -> 51)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 61 60 38)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 38 61 39 4 51 "" [1 uses])
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 swap_bytes+0 S1 A32])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:430 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 41 40 42 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) sim2fitman_read_procpar.cpp:430 612 {*jcc_1}
     (nil)
 -> 48)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 100 101
(note 42 41 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 5 (set (reg:SI 1 dx [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 var_size+0 S4 A32])) sim2fitman_read_procpar.cpp:431 90 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 var_pointer+0 S8 A64])) sim2fitman_read_procpar.cpp:431 89 {*movdi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:SI 4 si)
        (reg:SI 1 dx [100])) sim2fitman_read_procpar.cpp:431 90 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) sim2fitman_read_procpar.cpp:431 89 {*movdi_internal}
     (nil))
(call_insn 47 46 48 5 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7f8d0c6dd798 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:431 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 48 47 49 6 53 "" [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:SI 0 ax [orig:87 D.5890 ] [87])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:438 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 92
(code_label 51 50 52 7 52 "" [1 uses])
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 57 7 (set (reg:SI 0 ax [orig:92 <retval> ] [92])
        (reg:SI 0 ax [orig:87 D.5890 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 57 53 58 7 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:92 <retval> ] [92])) sim2fitman_read_procpar.cpp:440 90 {*movsi_internal}
     (nil))
(insn 58 57 62 7 (use (reg/i:SI 0 ax)) sim2fitman_read_procpar.cpp:440 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 62 58 0 NOTE_INSN_DELETED)
