
;; Function int read_data(int*, Preprocess*, IOFiles*, Data_file_header*, Data_block_header*, Precision2*, FILE**, Precision1*, float**, float**, int, InFile_struct*) (_Z9read_dataPiP10PreprocessP7IOFilesP16Data_file_headerP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSG_iP13InFile_struct, funcdef_no=2, decl_uid=5328, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=633 from oldreg=89, assigning class GENERAL_REGS to r633
   39: {r633:DI=r633:DI<<0x6;clobber flags:CC;}
      REG_DEAD r88:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  865: r633:DI=r88:DI
    Inserting insn reload after:
  866: r89:DI=r633:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 52:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 85:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 111:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 123:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 125
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 127:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 138
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 141:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 151:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 154:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=634 from oldreg=137, assigning class GENERAL_REGS to r634
  154: {r634:DI=r634:DI<<0x6;clobber flags:CC;}
      REG_DEAD r136:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  867: r634:DI=r136:DI
    Inserting insn reload after:
  868: r137:DI=r634:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 156
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=635 from oldreg=141, assigning class GENERAL_REGS to r635
  160: {r635:DI=r635:DI<<0x6;clobber flags:CC;}
      REG_DEAD r140:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  869: r635:DI=r140:DI
    Inserting insn reload after:
  870: r141:DI=r635:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 162
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 164:  (0) r  (1) 0  (2) mr {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=636 from oldreg=146, assigning class GENERAL_REGS to r636
  167: {r636:DI=r636:DI<<0x5;clobber flags:CC;}
      REG_DEAD r145:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  871: r636:DI=r145:DI
    Inserting insn reload after:
  872: r146:DI=r636:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 169
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 2 in insn 172:  (0) r  (1) 0  (2) mr {*muldi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 173:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 179:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 193:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=637 from oldreg=155, assigning class GENERAL_REGS to r637
  193: {r637:DI=r637:DI<<0x5;clobber flags:CC;}
      REG_DEAD r154:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  873: r637:DI=r154:DI
    Inserting insn reload after:
  874: r155:DI=r637:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 195
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 199:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=638 from oldreg=159, assigning class GENERAL_REGS to r638
  199: {r638:DI=r638:DI<<0x5;clobber flags:CC;}
      REG_DEAD r158:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  875: r638:DI=r158:DI
    Inserting insn reload after:
  876: r159:DI=r638:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 203:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=639 from oldreg=495, assigning class GENERAL_REGS to r639
  203: {r639:SI=r639:SI-r161:SI;clobber flags:CC;}
      REG_DEAD r161:SI
      REG_DEAD r157:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  877: r639:SI=r157:SI
    Inserting insn reload after:
  878: r495:SI=r639:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 212:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 215:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 217
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 218:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=640 from oldreg=168, assigning class GENERAL_REGS to r640
  226: {r640:DI=r640:DI<<0x5;clobber flags:CC;}
      REG_DEAD r167:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  879: r640:DI=r167:DI
    Inserting insn reload after:
  880: r168:DI=r640:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 228
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 239:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=641 from oldreg=171, assigning class GENERAL_REGS to r641
  239: {r641:DI=r641:DI<<0x6;clobber flags:CC;}
      REG_DEAD r170:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  881: r641:DI=r170:DI
    Inserting insn reload after:
  882: r171:DI=r641:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 241
	 Choosing alt 0 in insn 241:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 255
	 Choosing alt 0 in insn 255:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 256:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 259:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=642 from oldreg=181, assigning class GENERAL_REGS to r642
  259: {r642:DI=r642:DI<<0x6;clobber flags:CC;}
      REG_DEAD r180:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  883: r642:DI=r180:DI
    Inserting insn reload after:
  884: r181:DI=r642:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 267:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=643 from oldreg=187, assigning class GENERAL_REGS to r643
  267: {r643:DI=r643:DI<<0x6;clobber flags:CC;}
      REG_DEAD r186:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  885: r643:DI=r186:DI
    Inserting insn reload after:
  886: r187:DI=r643:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 269
	 Choosing alt 0 in insn 269:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 270:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 271:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=644 from oldreg=512, assigning class GENERAL_REGS to r644
  271: {r644:DI=r644:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  887: r644:DI=r189:DI
    Inserting insn reload after:
  888: r512:DI=r644:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 272
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 293:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 294:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 295
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 299:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=645 from oldreg=198, assigning class GENERAL_REGS to r645
  299: {r645:DI=r645:DI<<0x6;clobber flags:CC;}
      REG_DEAD r197:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  889: r645:DI=r197:DI
    Inserting insn reload after:
  890: r198:DI=r645:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 301
	 Choosing alt 0 in insn 301:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 307:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=646 from oldreg=204, assigning class GENERAL_REGS to r646
  307: {r646:DI=r646:DI<<0x6;clobber flags:CC;}
      REG_DEAD r203:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  891: r646:DI=r203:DI
    Inserting insn reload after:
  892: r204:DI=r646:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 311:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=647 from oldreg=522, assigning class GENERAL_REGS to r647
  311: {r647:DI=r647:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  893: r647:DI=r206:DI
    Inserting insn reload after:
  894: r522:DI=r647:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 312
	 Choosing alt 0 in insn 312:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 316:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 323:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 329:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 330:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=648 from oldreg=212, assigning class GENERAL_REGS to r648
  330: {r648:DI=r648:DI<<0x6;clobber flags:CC;}
      REG_DEAD r211:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  895: r648:DI=r211:DI
    Inserting insn reload after:
  896: r212:DI=r648:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 331:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 332
	 Choosing alt 0 in insn 332:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 333:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 340:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=649 from oldreg=531, assigning class GENERAL_REGS to r649
  340: {r649:DI=r649:DI<<0x8;clobber flags:CC;}
      REG_DEAD r529:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  897: r649:DI=r529:DI
    Inserting insn reload after:
  898: r531:DI=r649:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 342
	 Choosing alt 0 in insn 342:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 344:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 359:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 360:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 361
	 Choosing alt 0 in insn 361:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 364:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 366
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 371
	 Choosing alt 0 in insn 371:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 372:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 373:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=650 from oldreg=233, assigning class SSE_REGS to r650
  373: r650:SF=float_trunc(r232:DF)
      REG_DEAD r232:DF
    Inserting insn reload after:
  899: r233:SF=r650:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 899:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 374:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 382:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 383:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 384
	 Choosing alt 0 in insn 384:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 387:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 389
	 Choosing alt 0 in insn 389:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 392:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 394
	 Choosing alt 0 in insn 394:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 395:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 396:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=651 from oldreg=245, assigning class SSE_REGS to r651
  396: r651:SF=float_trunc(r244:DF)
      REG_DEAD r244:DF
    Inserting insn reload after:
  900: r245:SF=r651:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 900:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 397:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 400:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 407:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=652 from oldreg=218, assigning class GENERAL_REGS to r652
  407: {r652:DI=r652:DI<<0x6;clobber flags:CC;}
      REG_DEAD r217:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  901: r652:DI=r217:DI
    Inserting insn reload after:
  902: r218:DI=r652:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 409
	 Choosing alt 0 in insn 409:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 410:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 423:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 424
	 Choosing alt 0 in insn 424:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 425:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 428:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=653 from oldreg=252, assigning class GENERAL_REGS to r653
  428: {r653:DI=r653:DI<<0x6;clobber flags:CC;}
      REG_DEAD r251:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  903: r653:DI=r251:DI
    Inserting insn reload after:
  904: r252:DI=r653:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 430
	 Choosing alt 0 in insn 430:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 436:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=654 from oldreg=258, assigning class GENERAL_REGS to r654
  436: {r654:DI=r654:DI<<0x6;clobber flags:CC;}
      REG_DEAD r257:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  905: r654:DI=r257:DI
    Inserting insn reload after:
  906: r258:DI=r654:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 437:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 438
	 Choosing alt 0 in insn 438:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 439:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 440:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=655 from oldreg=552, assigning class GENERAL_REGS to r655
  440: {r655:DI=r655:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  907: r655:DI=r260:DI
    Inserting insn reload after:
  908: r552:DI=r655:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 441
	 Choosing alt 0 in insn 441:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 449
	 Choosing alt 0 in insn 449:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 459:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=656 from oldreg=269, assigning class GENERAL_REGS to r656
  459: {r656:DI=r656:DI<<0x6;clobber flags:CC;}
      REG_DEAD r268:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  909: r656:DI=r268:DI
    Inserting insn reload after:
  910: r269:DI=r656:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 461
	 Choosing alt 0 in insn 461:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 462:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 472:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=657 from oldreg=561, assigning class GENERAL_REGS to r657
  472: {r657:DI=r657:DI<<0x8;clobber flags:CC;}
      REG_DEAD r559:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  911: r657:DI=r559:DI
    Inserting insn reload after:
  912: r561:DI=r657:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 473:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 474
	 Choosing alt 0 in insn 474:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 476:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 480:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 483:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 489:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=658 from oldreg=283, assigning class GENERAL_REGS to r658
  489: {r658:DI=r658:DI<<0x6;clobber flags:CC;}
      REG_DEAD r282:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  913: r658:DI=r282:DI
    Inserting insn reload after:
  914: r283:DI=r658:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 491
	 Choosing alt 0 in insn 491:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 494:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 502:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 503
	 Choosing alt 0 in insn 503:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 506:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 518:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=659 from oldreg=297, assigning class GENERAL_REGS to r659
  518: {r659:DI=r659:DI<<0x6;clobber flags:CC;}
      REG_DEAD r296:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  915: r659:DI=r296:DI
    Inserting insn reload after:
  916: r297:DI=r659:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 520
	 Choosing alt 0 in insn 520:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 521:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 523:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 530:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 531:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 532
	 Choosing alt 0 in insn 532:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 538:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 539:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 540
	 Choosing alt 0 in insn 540:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 541:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 543:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 545
	 Choosing alt 0 in insn 545:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 548:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 549:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 550
	 Choosing alt 0 in insn 550:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 551:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 552:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=660 from oldreg=317, assigning class SSE_REGS to r660
  552: r660:SF=float_trunc(r316:DF)
      REG_DEAD r316:DF
    Inserting insn reload after:
  917: r317:SF=r660:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 917:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 553:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 561:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 563
	 Choosing alt 0 in insn 563:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 564:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 566:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 574:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 580:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 581:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=661 from oldreg=278, assigning class GENERAL_REGS to r661
  581: {r661:DI=r661:DI<<0x6;clobber flags:CC;}
      REG_DEAD r277:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  918: r661:DI=r277:DI
    Inserting insn reload after:
  919: r278:DI=r661:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 582:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 583
	 Choosing alt 0 in insn 583:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 584:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 585:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 593:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=662 from oldreg=327, assigning class GENERAL_REGS to r662
  593: {r662:DI=r662:DI<<0x6;clobber flags:CC;}
      REG_DEAD r326:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  920: r662:DI=r326:DI
    Inserting insn reload after:
  921: r327:DI=r662:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 595
	 Choosing alt 0 in insn 595:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 598:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 604:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=663 from oldreg=333, assigning class GENERAL_REGS to r663
  604: {r663:DI=r663:DI<<0x6;clobber flags:CC;}
      REG_DEAD r332:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  922: r663:DI=r332:DI
    Inserting insn reload after:
  923: r333:DI=r663:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 605:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 606
	 Choosing alt 0 in insn 606:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 607:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 610:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 611:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 617:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 618:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 619
	 Choosing alt 0 in insn 619:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 620:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 622:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 624
	 Choosing alt 0 in insn 624:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 625:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 627:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 628:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 629
	 Choosing alt 0 in insn 629:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 630:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 632:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 635:  (0) r  (1) rm {*movhi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) =*a  (1) *0 {extendhisi2}
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=2,overall=16,losers=2 -- refuse
	 Choosing alt 1 in insn 637:  (0) x  (1) r {*floatsisf2_sse}
      Creating newreg=664 from oldreg=354, assigning class SSE_REGS to r664
  637: r664:SF=float(r593:SI)
      REG_DEAD r593:SI
    Inserting insn reload after:
  924: r354:SF=r664:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 924:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 638:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 639:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 643:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 650:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 652:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=665 from oldreg=356, assigning class GENERAL_REGS to r665
  652: {r665:DI=r665:DI<<0x6;clobber flags:CC;}
      REG_DEAD r355:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  925: r665:DI=r355:DI
    Inserting insn reload after:
  926: r356:DI=r665:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 653:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 654
	 Choosing alt 0 in insn 654:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 655:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 657:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 661:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 668:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 669
	 Choosing alt 0 in insn 669:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 670:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 672:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 675:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=2,overall=16,losers=2 -- refuse
	 Choosing alt 1 in insn 676:  (0) x  (1) r {*floatdisf2_sse}
      Creating newreg=666 from oldreg=599, assigning class SSE_REGS to r666
  676: r666:SF=float(r374:DI)
      REG_DEAD r374:DI
    Inserting insn reload after:
  927: r599:SF=r666:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 927:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 677:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 680:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 681:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 682
	 Choosing alt 0 in insn 682:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 683:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 684:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 685:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 687
	 Choosing alt 0 in insn 687:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 688:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 689:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 690:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 693:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 695:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 696:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 697:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=667 from oldreg=363, assigning class GENERAL_REGS to r667
  697: {r667:DI=r667:DI<<0x6;clobber flags:CC;}
      REG_DEAD r362:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  928: r667:DI=r362:DI
    Inserting insn reload after:
  929: r363:DI=r667:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 698:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 699
	 Choosing alt 0 in insn 699:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 700:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 707:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 711:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 713:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 714:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 715
	 Choosing alt 0 in insn 715:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 716:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 718:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 719:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 720
	 Choosing alt 0 in insn 720:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 723:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 724:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 725
	 Choosing alt 0 in insn 725:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 726:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 728:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 729:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 730:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 731:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 732:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 733:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 734:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 735:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 736
	 Choosing alt 0 in insn 736:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 737:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 738:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 739:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 740:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 742:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 743:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=668 from oldreg=411, assigning class SSE_REGS to r668
  743: r668:SF=r668:SF+r410:SF
      REG_DEAD r410:SF
      REG_DEAD r402:SF
    Inserting insn reload before:
  930: r668:SF=r402:SF
    Inserting insn reload after:
  931: r411:SF=r668:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 931:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 744:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 745:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 746:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 747:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 748:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 749
	 Choosing alt 0 in insn 749:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 750:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 752:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 753:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 755
	 Choosing alt 0 in insn 755:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 756:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 758:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 759:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 760
	 Choosing alt 0 in insn 760:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 761:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 762:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 763:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 764:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 765:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 766:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 767:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 769:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 770:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 771:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 772
	 Choosing alt 0 in insn 772:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 773:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 774:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 775:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 776:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 777:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 778:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 779:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 780:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=669 from oldreg=438, assigning class SSE_REGS to r669
  780: r669:SF=r669:SF+r437:SF
      REG_DEAD r437:SF
      REG_DEAD r428:SF
    Inserting insn reload before:
  932: r669:SF=r428:SF
    Inserting insn reload after:
  933: r438:SF=r669:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 933:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 781:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 782:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 785:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 786:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 788:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 789:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=670 from oldreg=384, assigning class GENERAL_REGS to r670
  789: {r670:DI=r670:DI<<0x6;clobber flags:CC;}
      REG_DEAD r383:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  934: r670:DI=r383:DI
    Inserting insn reload after:
  935: r384:DI=r670:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 790:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 791
	 Choosing alt 0 in insn 791:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 792:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 793:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 795:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 798:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 802:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 803:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 807:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 810:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 811:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 813:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 816:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 819:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 821:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 822:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53

********** Pseudo live ranges #1: **********

  BB 53
   Insn 830: point = 0
   Insn 829: point = 0
   Insn 825: point = 1
   Insn 822: point = 3
   Insn 821: point = 4
   Insn 820: point = 4
   Insn 819: point = 5
   Insn 818: point = 6
   Insn 817: point = 6
   Insn 816: point = 7
  BB 52
   Insn 814: point = 8
   Insn 813: point = 8
   Insn 811: point = 9
   Insn 810: point = 11
  BB 2
   Insn 832: point = 12
   Insn 17: point = 12
   Insn 16: point = 12
   Insn 15: point = 12
   Insn 14: point = 12
   Insn 13: point = 12
   Insn 12: point = 12
   Insn 11: point = 12
   Insn 7: point = 12
   Insn 6: point = 12
   Insn 5: point = 12
   Insn 4: point = 12
   Insn 3: point = 12
   Insn 2: point = 12
  BB 51
   Insn 807: point = 12
  BB 50
   Insn 804: point = 12
   Insn 803: point = 12
   Insn 802: point = 13
  BB 10
   Insn 838: point = 14
   Insn 233: point = 14
  BB 8
   Insn 836: point = 14
   Insn 204: point = 14
   Insn 878: point = 15
	Hard reg 0 is preferable by r639 with profit 1
   Insn 203: point = 17
   Insn 877: point = 18
	Hard reg 0 is preferable by r639 with profit 1
	Hard reg 1 is preferable by r639 with profit 1
   Insn 202: point = 20
   Insn 201: point = 22
   Insn 200: point = 24
   Insn 876: point = 25
	Hard reg 2 is preferable by r638 with profit 1
   Insn 199: point = 27
   Insn 875: point = 27
	Hard reg 2 is preferable by r638 with profit 1
	Hard reg 0 is preferable by r638 with profit 1
   Insn 198: point = 29
   Insn 197: point = 31
   Insn 196: point = 32
   Insn 195: point = 34
   Insn 194: point = 36
   Insn 874: point = 37
	Hard reg 1 is preferable by r637 with profit 1
   Insn 193: point = 39
   Insn 873: point = 39
	Hard reg 1 is preferable by r637 with profit 1
	Hard reg 0 is preferable by r637 with profit 1
   Insn 192: point = 41
   Insn 191: point = 43
   Insn 190: point = 44
   Insn 189: point = 44
   Insn 188: point = 45
   Insn 187: point = 46
   Insn 186: point = 46
   Insn 185: point = 47
   Insn 184: point = 49
   Insn 183: point = 51
   Insn 182: point = 52
   Insn 181: point = 54
   Insn 180: point = 56
   Insn 179: point = 57
   Insn 178: point = 58
   Insn 177: point = 60
  BB 9
   Insn 230: point = 61
   Insn 229: point = 62
   Insn 228: point = 64
   Insn 227: point = 66
   Insn 880: point = 67
	Hard reg 1 is preferable by r640 with profit 1
   Insn 226: point = 69
   Insn 879: point = 69
	Hard reg 1 is preferable by r640 with profit 1
	Hard reg 0 is preferable by r640 with profit 1
   Insn 225: point = 71
   Insn 224: point = 73
   Insn 223: point = 74
   Insn 222: point = 74
   Insn 221: point = 75
   Insn 220: point = 76
   Insn 219: point = 76
   Insn 218: point = 77
   Insn 217: point = 79
   Insn 216: point = 81
   Insn 215: point = 82
   Insn 214: point = 84
   Insn 213: point = 86
   Insn 212: point = 87
   Insn 211: point = 88
   Insn 210: point = 90
   Insn 209: point = 92
  BB 7
   Insn 175: point = 93
   Insn 174: point = 93
   Insn 173: point = 93
   Insn 172: point = 94
   Insn 171: point = 96
   Insn 170: point = 98
   Insn 169: point = 100
   Insn 168: point = 102
   Insn 872: point = 103
	Hard reg 2 is preferable by r636 with profit 1
   Insn 167: point = 105
   Insn 871: point = 105
	Hard reg 2 is preferable by r636 with profit 1
	Hard reg 0 is preferable by r636 with profit 1
   Insn 166: point = 107
   Insn 165: point = 109
   Insn 164: point = 110
   Insn 163: point = 112
   Insn 162: point = 114
   Insn 161: point = 116
   Insn 870: point = 117
	Hard reg 2 is preferable by r635 with profit 1
   Insn 160: point = 119
   Insn 869: point = 119
	Hard reg 2 is preferable by r635 with profit 1
	Hard reg 0 is preferable by r635 with profit 1
   Insn 159: point = 121
   Insn 158: point = 123
   Insn 157: point = 124
   Insn 156: point = 126
   Insn 155: point = 128
   Insn 868: point = 129
	Hard reg 1 is preferable by r634 with profit 1
   Insn 154: point = 131
   Insn 867: point = 131
	Hard reg 1 is preferable by r634 with profit 1
	Hard reg 0 is preferable by r634 with profit 1
   Insn 153: point = 133
   Insn 152: point = 135
   Insn 151: point = 136
   Insn 150: point = 137
   Insn 149: point = 139
  BB 6
   Insn 147: point = 140
   Insn 146: point = 140
   Insn 145: point = 141
  BB 4
   Insn 834: point = 142
   Insn 112: point = 142
   Insn 111: point = 142
   Insn 110: point = 143
   Insn 109: point = 145
   Insn 108: point = 146
   Insn 107: point = 146
   Insn 106: point = 147
   Insn 105: point = 149
   Insn 104: point = 151
   Insn 103: point = 152
   Insn 102: point = 154
   Insn 101: point = 155
   Insn 100: point = 157
   Insn 99: point = 159
   Insn 98: point = 160
   Insn 97: point = 161
   Insn 96: point = 163
   Insn 95: point = 164
   Insn 94: point = 164
   Insn 93: point = 165
   Insn 92: point = 167
   Insn 91: point = 169
   Insn 90: point = 170
   Insn 89: point = 172
   Insn 88: point = 173
   Insn 87: point = 175
   Insn 86: point = 177
   Insn 85: point = 178
   Insn 84: point = 179
   Insn 83: point = 181
   Insn 82: point = 182
   Insn 81: point = 182
   Insn 80: point = 183
   Insn 79: point = 185
   Insn 78: point = 187
   Insn 77: point = 188
   Insn 76: point = 190
   Insn 75: point = 191
   Insn 74: point = 193
   Insn 73: point = 195
   Insn 72: point = 196
   Insn 71: point = 197
   Insn 70: point = 199
   Insn 69: point = 200
   Insn 68: point = 200
   Insn 67: point = 201
   Insn 66: point = 203
   Insn 65: point = 205
   Insn 64: point = 206
   Insn 63: point = 208
   Insn 62: point = 209
   Insn 61: point = 211
   Insn 60: point = 213
   Insn 59: point = 214
   Insn 58: point = 215
   Insn 57: point = 216
   Insn 56: point = 216
   Insn 55: point = 217
   Insn 54: point = 219
   Insn 53: point = 221
   Insn 52: point = 222
   Insn 51: point = 223
   Insn 50: point = 224
   Insn 49: point = 224
   Insn 48: point = 225
   Insn 47: point = 227
   Insn 46: point = 229
   Insn 45: point = 230
   Insn 44: point = 231
   Insn 43: point = 233
   Insn 42: point = 235
   Insn 41: point = 237
   Insn 40: point = 239
   Insn 866: point = 240
	Hard reg 1 is preferable by r633 with profit 1
   Insn 39: point = 242
   Insn 865: point = 242
	Hard reg 1 is preferable by r633 with profit 1
	Hard reg 0 is preferable by r633 with profit 1
   Insn 38: point = 244
   Insn 37: point = 246
  BB 5
   Insn 141: point = 247
   Insn 140: point = 247
   Insn 139: point = 248
   Insn 138: point = 249
   Insn 137: point = 251
   Insn 136: point = 253
   Insn 135: point = 255
   Insn 134: point = 257
   Insn 133: point = 258
   Insn 132: point = 260
   Insn 131: point = 262
   Insn 130: point = 263
   Insn 129: point = 265
   Insn 128: point = 267
   Insn 127: point = 268
   Insn 126: point = 269
   Insn 125: point = 270
   Insn 124: point = 272
   Insn 123: point = 274
   Insn 122: point = 276
   Insn 121: point = 277
   Insn 120: point = 279
   Insn 119: point = 281
   Insn 118: point = 282
   Insn 117: point = 284
   Insn 116: point = 286
  BB 49
   Insn 798: point = 287
  BB 48
   Insn 796: point = 287
   Insn 795: point = 287
   Insn 793: point = 288
   Insn 792: point = 290
   Insn 791: point = 292
   Insn 790: point = 294
   Insn 935: point = 295
	Hard reg 2 is preferable by r670 with profit 1
   Insn 789: point = 297
   Insn 934: point = 297
	Hard reg 2 is preferable by r670 with profit 1
	Hard reg 1 is preferable by r670 with profit 1
   Insn 788: point = 299
   Insn 787: point = 301
   Insn 786: point = 302
   Insn 785: point = 304
  BB 46
   Insn 862: point = 305
   Insn 707: point = 305
  BB 41
   Insn 858: point = 305
  BB 40
   Insn 644: point = 305
   Insn 643: point = 305
  BB 38
   Insn 855: point = 305
   Insn 611: point = 305
   Insn 610: point = 306
   Insn 609: point = 308
   Insn 608: point = 310
   Insn 607: point = 312
   Insn 606: point = 314
   Insn 605: point = 316
   Insn 923: point = 317
	Hard reg 1 is preferable by r663 with profit 1
   Insn 604: point = 319
   Insn 922: point = 319
	Hard reg 1 is preferable by r663 with profit 1
	Hard reg 0 is preferable by r663 with profit 1
   Insn 603: point = 321
   Insn 602: point = 323
  BB 39
   Insn 639: point = 324
   Insn 638: point = 324
   Insn 924: point = 325
	Hard reg 0 is preferable by r664 with profit 1
   Insn 637: point = 327
   Insn 636: point = 329
   Insn 635: point = 331
   Insn 634: point = 333
   Insn 633: point = 335
   Insn 632: point = 337
   Insn 631: point = 339
   Insn 630: point = 340
   Insn 629: point = 342
   Insn 628: point = 344
   Insn 627: point = 345
   Insn 626: point = 347
   Insn 625: point = 349
   Insn 624: point = 350
   Insn 623: point = 352
   Insn 622: point = 354
   Insn 621: point = 356
   Insn 620: point = 357
   Insn 619: point = 359
   Insn 618: point = 361
   Insn 617: point = 362
   Insn 616: point = 364
   Insn 615: point = 366
  BB 45
   Insn 704: point = 367
   Insn 703: point = 367
   Insn 701: point = 368
   Insn 700: point = 370
   Insn 699: point = 372
   Insn 698: point = 374
   Insn 929: point = 375
	Hard reg 2 is preferable by r667 with profit 1
   Insn 697: point = 377
   Insn 928: point = 377
	Hard reg 2 is preferable by r667 with profit 1
	Hard reg 1 is preferable by r667 with profit 1
   Insn 696: point = 379
   Insn 695: point = 381
   Insn 694: point = 382
   Insn 693: point = 384
  BB 43
   Insn 860: point = 385
   Insn 661: point = 385
  BB 42
   Insn 659: point = 385
   Insn 658: point = 385
   Insn 657: point = 386
   Insn 656: point = 388
   Insn 655: point = 390
   Insn 654: point = 392
   Insn 653: point = 394
   Insn 926: point = 395
	Hard reg 1 is preferable by r665 with profit 1
   Insn 652: point = 397
   Insn 925: point = 397
	Hard reg 1 is preferable by r665 with profit 1
	Hard reg 0 is preferable by r665 with profit 1
   Insn 651: point = 399
   Insn 650: point = 401
  BB 37
   Insn 600: point = 402
   Insn 599: point = 402
   Insn 598: point = 403
   Insn 597: point = 405
   Insn 596: point = 407
   Insn 595: point = 409
   Insn 594: point = 411
   Insn 921: point = 412
	Hard reg 1 is preferable by r662 with profit 1
   Insn 593: point = 414
   Insn 920: point = 414
	Hard reg 1 is preferable by r662 with profit 1
	Hard reg 0 is preferable by r662 with profit 1
   Insn 592: point = 416
   Insn 591: point = 418
  BB 36
   Insn 588: point = 419
   Insn 587: point = 419
   Insn 585: point = 420
   Insn 584: point = 422
   Insn 583: point = 424
   Insn 582: point = 426
   Insn 919: point = 427
	Hard reg 2 is preferable by r661 with profit 1
   Insn 581: point = 429
   Insn 918: point = 429
	Hard reg 2 is preferable by r661 with profit 1
	Hard reg 1 is preferable by r661 with profit 1
   Insn 580: point = 431
   Insn 579: point = 433
   Insn 578: point = 434
   Insn 577: point = 436
  BB 29
   Insn 849: point = 437
   Insn 483: point = 437
  BB 35
   Insn 574: point = 437
  BB 33
   Insn 853: point = 437
   Insn 553: point = 437
   Insn 917: point = 438
	Hard reg 0 is preferable by r660 with profit 1
   Insn 552: point = 440
   Insn 551: point = 442
   Insn 550: point = 444
   Insn 549: point = 446
   Insn 548: point = 447
   Insn 547: point = 449
   Insn 546: point = 451
   Insn 545: point = 452
   Insn 544: point = 454
   Insn 543: point = 456
   Insn 542: point = 458
   Insn 541: point = 459
   Insn 540: point = 461
   Insn 539: point = 463
   Insn 538: point = 464
   Insn 537: point = 466
   Insn 536: point = 468
   Insn 535: point = 469
   Insn 534: point = 469
   Insn 533: point = 470
   Insn 532: point = 471
   Insn 531: point = 473
   Insn 530: point = 474
   Insn 529: point = 476
   Insn 528: point = 478
   Insn 527: point = 479
  BB 31
   Insn 851: point = 480
   Insn 511: point = 480
   Insn 510: point = 480
   Insn 509: point = 481
   Insn 508: point = 482
   Insn 507: point = 484
   Insn 506: point = 486
   Insn 505: point = 488
   Insn 504: point = 489
   Insn 503: point = 491
   Insn 502: point = 493
   Insn 501: point = 494
   Insn 500: point = 496
   Insn 499: point = 498
   Insn 498: point = 499
  BB 34
   Insn 571: point = 500
   Insn 570: point = 500
   Insn 569: point = 501
   Insn 568: point = 502
   Insn 567: point = 504
   Insn 566: point = 506
   Insn 565: point = 508
   Insn 564: point = 509
   Insn 563: point = 511
   Insn 562: point = 513
   Insn 561: point = 514
   Insn 560: point = 516
   Insn 559: point = 518
   Insn 558: point = 519
  BB 32
   Insn 525: point = 520
   Insn 524: point = 520
   Insn 523: point = 521
   Insn 522: point = 523
   Insn 521: point = 525
   Insn 520: point = 527
   Insn 519: point = 529
   Insn 916: point = 530
	Hard reg 1 is preferable by r659 with profit 1
   Insn 518: point = 532
   Insn 915: point = 532
	Hard reg 1 is preferable by r659 with profit 1
	Hard reg 0 is preferable by r659 with profit 1
   Insn 517: point = 534
   Insn 516: point = 536
  BB 30
   Insn 496: point = 537
   Insn 495: point = 537
   Insn 494: point = 538
   Insn 493: point = 540
   Insn 492: point = 542
   Insn 491: point = 544
   Insn 490: point = 546
   Insn 914: point = 547
	Hard reg 1 is preferable by r658 with profit 1
   Insn 489: point = 549
   Insn 913: point = 549
	Hard reg 1 is preferable by r658 with profit 1
	Hard reg 0 is preferable by r658 with profit 1
   Insn 488: point = 551
   Insn 487: point = 553
  BB 28
   Insn 481: point = 554
   Insn 480: point = 554
  BB 25
   Insn 847: point = 554
  BB 24
   Insn 414: point = 554
   Insn 413: point = 554
   Insn 411: point = 555
   Insn 410: point = 557
   Insn 409: point = 559
   Insn 408: point = 561
   Insn 902: point = 562
	Hard reg 2 is preferable by r652 with profit 1
   Insn 407: point = 564
   Insn 901: point = 564
	Hard reg 2 is preferable by r652 with profit 1
	Hard reg 1 is preferable by r652 with profit 1
   Insn 406: point = 566
   Insn 405: point = 568
   Insn 404: point = 569
   Insn 403: point = 571
  BB 18
   Insn 844: point = 572
   Insn 350: point = 572
  BB 23
   Insn 400: point = 572
  BB 22
   Insn 397: point = 572
   Insn 900: point = 573
	Hard reg 0 is preferable by r651 with profit 1
   Insn 396: point = 575
   Insn 395: point = 577
   Insn 394: point = 579
   Insn 393: point = 581
   Insn 392: point = 582
   Insn 391: point = 584
   Insn 390: point = 586
   Insn 389: point = 587
   Insn 388: point = 589
   Insn 387: point = 591
   Insn 386: point = 593
   Insn 385: point = 594
   Insn 384: point = 596
   Insn 383: point = 598
   Insn 382: point = 599
   Insn 381: point = 601
   Insn 380: point = 603
  BB 21
   Insn 378: point = 604
   Insn 377: point = 604
  BB 20
   Insn 374: point = 604
   Insn 899: point = 605
	Hard reg 0 is preferable by r650 with profit 1
   Insn 373: point = 607
   Insn 372: point = 609
   Insn 371: point = 611
   Insn 370: point = 613
   Insn 369: point = 614
   Insn 368: point = 616
   Insn 367: point = 618
   Insn 366: point = 619
   Insn 365: point = 621
   Insn 364: point = 623
   Insn 363: point = 625
   Insn 362: point = 626
   Insn 361: point = 628
   Insn 360: point = 630
   Insn 359: point = 631
   Insn 358: point = 633
   Insn 357: point = 635
  BB 19
   Insn 355: point = 636
   Insn 354: point = 636
  BB 27
   Insn 477: point = 636
   Insn 476: point = 636
   Insn 475: point = 636
   Insn 474: point = 637
   Insn 473: point = 639
   Insn 912: point = 640
	Hard reg 1 is preferable by r657 with profit 1
   Insn 472: point = 642
   Insn 911: point = 642
	Hard reg 1 is preferable by r657 with profit 1
	Hard reg 0 is preferable by r657 with profit 1
   Insn 471: point = 644
   Insn 470: point = 646
  BB 26
   Insn 468: point = 647
   Insn 467: point = 647
   Insn 466: point = 648
   Insn 465: point = 649
   Insn 464: point = 650
   Insn 463: point = 652
   Insn 462: point = 654
   Insn 461: point = 656
   Insn 460: point = 658
   Insn 910: point = 659
	Hard reg 1 is preferable by r656 with profit 1
   Insn 459: point = 661
   Insn 909: point = 661
	Hard reg 1 is preferable by r656 with profit 1
	Hard reg 0 is preferable by r656 with profit 1
   Insn 458: point = 663
   Insn 457: point = 665
   Insn 456: point = 666
   Insn 455: point = 667
   Insn 454: point = 667
   Insn 453: point = 668
   Insn 452: point = 669
   Insn 451: point = 670
   Insn 450: point = 671
   Insn 449: point = 673
   Insn 448: point = 675
   Insn 447: point = 676
   Insn 446: point = 678
   Insn 445: point = 680
   Insn 444: point = 681
   Insn 443: point = 683
   Insn 442: point = 685
   Insn 441: point = 687
   Insn 908: point = 689
	Hard reg 2 is preferable by r655 with profit 1
   Insn 440: point = 691
   Insn 907: point = 691
   Insn 439: point = 692
   Insn 438: point = 694
   Insn 437: point = 696
   Insn 906: point = 697
	Hard reg 2 is preferable by r654 with profit 1
   Insn 436: point = 699
   Insn 905: point = 699
	Hard reg 2 is preferable by r654 with profit 1
	Hard reg 0 is preferable by r654 with profit 1
   Insn 435: point = 701
   Insn 434: point = 703
   Insn 433: point = 704
   Insn 432: point = 706
   Insn 431: point = 708
   Insn 430: point = 710
   Insn 429: point = 712
   Insn 904: point = 713
	Hard reg 2 is preferable by r653 with profit 1
   Insn 428: point = 715
   Insn 903: point = 715
	Hard reg 2 is preferable by r653 with profit 1
	Hard reg 0 is preferable by r653 with profit 1
   Insn 427: point = 717
   Insn 426: point = 719
   Insn 425: point = 720
   Insn 424: point = 722
   Insn 423: point = 724
   Insn 422: point = 725
   Insn 421: point = 727
   Insn 420: point = 729
  BB 17
   Insn 842: point = 730
   Insn 345: point = 730
   Insn 344: point = 730
   Insn 343: point = 730
   Insn 342: point = 731
   Insn 341: point = 733
   Insn 898: point = 734
	Hard reg 1 is preferable by r649 with profit 1
   Insn 340: point = 736
   Insn 897: point = 736
	Hard reg 1 is preferable by r649 with profit 1
	Hard reg 0 is preferable by r649 with profit 1
   Insn 339: point = 738
   Insn 338: point = 740
  BB 16
   Insn 336: point = 741
   Insn 335: point = 741
   Insn 334: point = 742
   Insn 333: point = 744
   Insn 332: point = 746
   Insn 331: point = 748
   Insn 896: point = 749
	Hard reg 2 is preferable by r648 with profit 1
   Insn 330: point = 751
   Insn 895: point = 751
	Hard reg 2 is preferable by r648 with profit 1
	Hard reg 1 is preferable by r648 with profit 1
   Insn 329: point = 753
   Insn 328: point = 755
   Insn 327: point = 756
   Insn 326: point = 758
  BB 13
   Insn 840: point = 759
   Insn 283: point = 759
   Insn 282: point = 760
   Insn 281: point = 761
   Insn 280: point = 761
   Insn 279: point = 762
   Insn 278: point = 763
   Insn 277: point = 764
   Insn 276: point = 765
   Insn 275: point = 766
   Insn 274: point = 768
   Insn 273: point = 770
   Insn 272: point = 772
   Insn 888: point = 774
	Hard reg 2 is preferable by r644 with profit 1
   Insn 271: point = 776
   Insn 887: point = 776
   Insn 270: point = 777
   Insn 269: point = 779
   Insn 268: point = 781
   Insn 886: point = 782
	Hard reg 2 is preferable by r643 with profit 1
   Insn 267: point = 784
   Insn 885: point = 784
	Hard reg 2 is preferable by r643 with profit 1
	Hard reg 0 is preferable by r643 with profit 1
   Insn 266: point = 786
   Insn 265: point = 788
   Insn 264: point = 789
   Insn 263: point = 791
   Insn 262: point = 793
   Insn 261: point = 795
   Insn 260: point = 797
   Insn 884: point = 798
	Hard reg 2 is preferable by r642 with profit 1
   Insn 259: point = 800
   Insn 883: point = 800
	Hard reg 2 is preferable by r642 with profit 1
	Hard reg 0 is preferable by r642 with profit 1
   Insn 258: point = 802
   Insn 257: point = 804
   Insn 256: point = 805
   Insn 255: point = 807
   Insn 254: point = 809
   Insn 253: point = 810
   Insn 252: point = 812
   Insn 251: point = 814
  BB 15
   Insn 323: point = 815
   Insn 322: point = 816
   Insn 321: point = 817
   Insn 320: point = 817
   Insn 319: point = 818
   Insn 318: point = 819
   Insn 317: point = 820
   Insn 316: point = 821
   Insn 315: point = 822
   Insn 314: point = 824
   Insn 313: point = 826
   Insn 312: point = 828
   Insn 894: point = 830
	Hard reg 2 is preferable by r647 with profit 1
   Insn 311: point = 832
   Insn 893: point = 832
   Insn 310: point = 833
   Insn 309: point = 835
   Insn 308: point = 837
   Insn 892: point = 838
	Hard reg 2 is preferable by r646 with profit 1
   Insn 307: point = 840
   Insn 891: point = 840
	Hard reg 2 is preferable by r646 with profit 1
	Hard reg 0 is preferable by r646 with profit 1
   Insn 306: point = 842
   Insn 305: point = 844
   Insn 304: point = 845
   Insn 303: point = 847
   Insn 302: point = 849
   Insn 301: point = 851
   Insn 300: point = 853
   Insn 890: point = 854
	Hard reg 2 is preferable by r645 with profit 1
   Insn 299: point = 856
   Insn 889: point = 856
	Hard reg 2 is preferable by r645 with profit 1
	Hard reg 0 is preferable by r645 with profit 1
   Insn 298: point = 858
   Insn 297: point = 860
   Insn 296: point = 861
   Insn 295: point = 863
   Insn 294: point = 865
   Insn 293: point = 866
   Insn 292: point = 868
   Insn 291: point = 870
  BB 14
   Insn 289: point = 871
   Insn 288: point = 871
  BB 12
   Insn 249: point = 871
   Insn 248: point = 871
  BB 11
   Insn 246: point = 871
   Insn 245: point = 871
   Insn 244: point = 872
   Insn 243: point = 874
   Insn 242: point = 876
   Insn 241: point = 878
   Insn 240: point = 880
   Insn 882: point = 881
	Hard reg 1 is preferable by r641 with profit 1
   Insn 239: point = 883
   Insn 881: point = 883
	Hard reg 1 is preferable by r641 with profit 1
	Hard reg 0 is preferable by r641 with profit 1
   Insn 238: point = 885
   Insn 237: point = 887
  BB 44
   Insn 690: point = 888
   Insn 689: point = 888
   Insn 688: point = 889
   Insn 687: point = 890
   Insn 686: point = 892
   Insn 685: point = 894
   Insn 684: point = 896
   Insn 683: point = 897
   Insn 682: point = 899
   Insn 681: point = 901
   Insn 680: point = 902
   Insn 679: point = 904
   Insn 678: point = 906
   Insn 677: point = 907
   Insn 927: point = 908
	Hard reg 0 is preferable by r666 with profit 1
   Insn 676: point = 910
   Insn 675: point = 912
   Insn 674: point = 914
   Insn 673: point = 916
   Insn 672: point = 918
   Insn 671: point = 920
   Insn 670: point = 921
   Insn 669: point = 923
   Insn 668: point = 925
   Insn 667: point = 926
   Insn 666: point = 928
   Insn 665: point = 930
  BB 47
   Insn 782: point = 931
   Insn 781: point = 931
   Insn 933: point = 932
	Hard reg 0 is preferable by r669 with profit 1
   Insn 780: point = 934
   Insn 932: point = 935
	Hard reg 0 is preferable by r669 with profit 1
	Hard reg 22 is preferable by r669 with profit 1
   Insn 779: point = 937
   Insn 778: point = 939
   Insn 777: point = 941
   Insn 776: point = 943
   Insn 775: point = 945
   Insn 774: point = 947
   Insn 773: point = 948
   Insn 772: point = 950
   Insn 771: point = 952
   Insn 770: point = 953
   Insn 769: point = 955
   Insn 768: point = 957
   Insn 767: point = 958
   Insn 766: point = 960
   Insn 765: point = 962
   Insn 764: point = 964
   Insn 763: point = 966
   Insn 762: point = 968
   Insn 761: point = 969
   Insn 760: point = 971
   Insn 759: point = 973
   Insn 758: point = 974
   Insn 757: point = 976
   Insn 756: point = 978
   Insn 755: point = 979
   Insn 754: point = 981
   Insn 753: point = 983
   Insn 752: point = 985
   Insn 751: point = 987
   Insn 750: point = 988
   Insn 749: point = 990
   Insn 748: point = 992
   Insn 747: point = 993
   Insn 746: point = 995
   Insn 745: point = 997
   Insn 744: point = 998
   Insn 931: point = 999
	Hard reg 0 is preferable by r668 with profit 1
   Insn 743: point = 1001
   Insn 930: point = 1002
	Hard reg 0 is preferable by r668 with profit 1
	Hard reg 22 is preferable by r668 with profit 1
   Insn 742: point = 1004
   Insn 741: point = 1006
   Insn 740: point = 1008
   Insn 739: point = 1010
   Insn 738: point = 1012
   Insn 737: point = 1013
   Insn 736: point = 1015
   Insn 735: point = 1017
   Insn 734: point = 1018
   Insn 733: point = 1020
   Insn 732: point = 1022
   Insn 731: point = 1023
   Insn 730: point = 1025
   Insn 729: point = 1027
   Insn 728: point = 1029
   Insn 727: point = 1031
   Insn 726: point = 1032
   Insn 725: point = 1034
   Insn 724: point = 1036
   Insn 723: point = 1037
   Insn 722: point = 1039
   Insn 721: point = 1041
   Insn 720: point = 1042
   Insn 719: point = 1044
   Insn 718: point = 1046
   Insn 717: point = 1048
   Insn 716: point = 1049
   Insn 715: point = 1051
   Insn 714: point = 1053
   Insn 713: point = 1054
   Insn 712: point = 1056
   Insn 711: point = 1058
  BB 3
   Insn 35: point = 1059
   Insn 34: point = 1059
   Insn 33: point = 1060
   Insn 32: point = 1062
   Insn 31: point = 1064
   Insn 30: point = 1065
   Insn 29: point = 1067
   Insn 28: point = 1069
   Insn 27: point = 1071
   Insn 26: point = 1072
   Insn 25: point = 1072
   Insn 24: point = 1072
   Insn 23: point = 1072
   Insn 22: point = 1073
   Insn 21: point = 1075
 r83: [8..9]
 r84: [1071..1073]
 r85: [1063..1065]
 r86: [1061..1062]
 r87: [1059..1060]
 r88: [243..244]
 r89: [238..240]
 r90: [236..237]
 r91: [234..235]
 r92: [232..233]
 r93: [226..227]
 r94: [224..225]
 r95: [218..219]
 r96: [216..217]
 r97: [210..211]
 r98: [207..209]
 r99: [196..206]
 r100: [202..203]
 r101: [200..201]
 r102: [196..197]
 r103: [192..193]
 r104: [189..191]
 r105: [178..188]
 r106: [184..185]
 r107: [182..183]
 r108: [178..179]
 r109: [174..175]
 r110: [171..173]
 r111: [160..170]
 r112: [166..167]
 r113: [164..165]
 r114: [160..161]
 r115: [156..157]
 r116: [153..155]
 r117: [142..152]
 r118: [148..149]
 r119: [146..147]
 r120: [142..143]
 r121: [283..284]
 r122: [280..282]
 r123: [278..279]
 r124: [271..277]
 r125: [273..274]
 r126: [271..272]
 r127: [268..270]
 r128: [264..265]
 r129: [261..263]
 r130: [259..260]
 r131: [250..258]
 r132: [254..255]
 r133: [252..253]
 r134: [250..251]
 r135: [247..249]
 r136: [132..133]
 r137: [127..129]
 r138: [125..126]
 r139: [111..124]
 r140: [120..121]
 r141: [115..117]
 r142: [113..114]
 r143: [111..112]
 r144: [95..110]
 r145: [106..107]
 r146: [101..103]
 r147: [99..100]
 r148: [97..98]
 r149: [95..96]
 r150: [53..54]
 r151: [50..52]
 r152: [48..49]
 r153: [44..47]
 r154: [40..41]
 r155: [35..37]
 r156: [33..34]
 r157: [19..32]
 r158: [28..29]
 r159: [23..25]
 r160: [21..22]
 r161: [17..20]
 r162: [89..90]
 r163: [83..84]
 r164: [80..82]
 r165: [78..79]
 r166: [74..77]
 r167: [70..71]
 r168: [65..67]
 r169: [63..64]
 r170: [884..885]
 r171: [879..881]
 r172: [877..878]
 r173: [875..876]
 r174: [873..874]
 r175: [871..872]
 r176: [811..812]
 r177: [808..810]
 r178: [806..807]
 r179: [764..805]
 r180: [801..802]
 r181: [796..798]
 r182: [794..795]
 r183: [792..793]
 r184: [790..791]
 r185: [763..789]
 r186: [785..786]
 r187: [780..782]
 r188: [778..779]
 r189: [773..777]
 r190: [767..768]
 r191: [762..766]
 r192: [759..760]
 r193: [867..868]
 r194: [864..866]
 r195: [862..863]
 r196: [820..861]
 r197: [857..858]
 r198: [852..854]
 r199: [850..851]
 r200: [848..849]
 r201: [846..847]
 r202: [819..845]
 r203: [841..842]
 r204: [836..838]
 r205: [834..835]
 r206: [829..833]
 r207: [823..824]
 r208: [818..822]
 r209: [815..816]
 r210: [741..756]
 r211: [752..753]
 r212: [747..749]
 r213: [745..746]
 r214: [743..744]
 r215: [741..742]
 r216: [554..569]
 r217: [565..566]
 r218: [560..562]
 r219: [558..559]
 r220: [556..557]
 r221: [554..555]
 r222: [632..633]
 r223: [629..631]
 r224: [627..628]
 r225: [620..626]
 r226: [622..623]
 r227: [620..621]
 r228: [604..619]
 r229: [615..616]
 r230: [612..614]
 r231: [610..611]
 r232: [608..609]
 r233: [604..605]
 r234: [600..601]
 r235: [597..599]
 r236: [595..596]
 r237: [588..594]
 r238: [590..591]
 r239: [588..589]
 r240: [572..587]
 r241: [583..584]
 r242: [580..582]
 r243: [578..579]
 r244: [576..577]
 r245: [572..573]
 r246: [730..731]
 r247: [726..727]
 r248: [723..725]
 r249: [721..722]
 r250: [670..720]
 r251: [716..717]
 r252: [711..713]
 r253: [709..710]
 r254: [707..708]
 r255: [705..706]
 r256: [669..704]
 r257: [700..701]
 r258: [695..697]
 r259: [693..694]
 r260: [688..692]
 r261: [682..683]
 r262: [668..681]
 r263: [677..678]
 r264: [674..676]
 r265: [672..673]
 r266: [667..671]
 r267: [649..666]
 r268: [662..663]
 r269: [657..659]
 r270: [655..656]
 r271: [653..654]
 r272: [651..652]
 r273: [649..650]
 r274: [647..648]
 r275: [636..637]
 r276: [419..434]
 r277: [430..431]
 r278: [425..427]
 r279: [423..424]
 r280: [421..422]
 r281: [419..420]
 r282: [550..551]
 r283: [545..547]
 r284: [543..544]
 r285: [541..542]
 r286: [539..540]
 r287: [537..538]
 r288: [481..499]
 r289: [495..496]
 r290: [492..494]
 r291: [490..491]
 r292: [483..489]
 r293: [485..486]
 r294: [483..484]
 r295: [480..482]
 r296: [533..534]
 r297: [528..530]
 r298: [526..527]
 r299: [524..525]
 r300: [522..523]
 r301: [520..521]
 r302: [470..479]
 r303: [475..476]
 r304: [472..474]
 r305: [469..471]
 r306: [465..466]
 r307: [462..464]
 r308: [460..461]
 r309: [453..459]
 r310: [455..456]
 r311: [453..454]
 r312: [437..452]
 r313: [448..449]
 r314: [445..447]
 r315: [443..444]
 r316: [441..442]
 r317: [437..438]
 r318: [501..519]
 r319: [515..516]
 r320: [512..514]
 r321: [510..511]
 r322: [503..509]
 r323: [505..506]
 r324: [503..504]
 r325: [500..502]
 r326: [415..416]
 r327: [410..412]
 r328: [408..409]
 r329: [406..407]
 r330: [404..405]
 r331: [402..403]
 r332: [320..321]
 r333: [315..317]
 r334: [313..314]
 r335: [311..312]
 r336: [309..310]
 r337: [307..308]
 r338: [305..306]
 r339: [363..364]
 r340: [360..362]
 r341: [358..359]
 r342: [351..357]
 r343: [353..354]
 r344: [351..352]
 r345: [324..350]
 r346: [346..347]
 r347: [343..345]
 r348: [341..342]
 r349: [334..340]
 r350: [336..337]
 r351: [334..335]
 r352: [332..333]
 r353: [330..331]
 r354: [324..325]
 r355: [398..399]
 r356: [393..395]
 r357: [391..392]
 r358: [389..390]
 r359: [387..388]
 r360: [385..386]
 r361: [367..382]
 r362: [378..379]
 r363: [373..375]
 r364: [371..372]
 r365: [369..370]
 r366: [367..368]
 r367: [927..928]
 r368: [924..926]
 r369: [922..923]
 r370: [915..921]
 r371: [917..918]
 r372: [915..916]
 r373: [913..914]
 r374: [911..912]
 r375: [903..904]
 r376: [900..902]
 r377: [898..899]
 r378: [891..897]
 r379: [893..894]
 r380: [891..892]
 r381: [888..890]
 r382: [287..302]
 r383: [298..299]
 r384: [293..295]
 r385: [291..292]
 r386: [289..290]
 r387: [287..288]
 r388: [1055..1056]
 r389: [1052..1054]
 r390: [1050..1051]
 r391: [1043..1049]
 r392: [1045..1046]
 r393: [1043..1044]
 r394: [998..1042]
 r395: [1038..1039]
 r396: [1035..1037]
 r397: [1033..1034]
 r398: [1026..1032]
 r399: [1028..1029]
 r400: [1026..1027]
 r401: [1024..1025]
 r402: [1003..1023]
 r403: [1019..1020]
 r404: [1016..1018]
 r405: [1014..1015]
 r406: [1007..1013]
 r407: [1009..1010]
 r408: [1007..1008]
 r409: [1005..1006]
 r410: [1001..1004]
 r411: [998..999]
 r412: [994..995]
 r413: [991..993]
 r414: [989..990]
 r415: [980..988]
 r416: [984..985]
 r417: [982..983]
 r418: [980..981]
 r419: [931..979]
 r420: [975..976]
 r421: [972..974]
 r422: [970..971]
 r423: [961..969]
 r424: [965..966]
 r425: [963..964]
 r426: [961..962]
 r427: [959..960]
 r428: [936..958]
 r429: [954..955]
 r430: [951..953]
 r431: [949..950]
 r432: [940..948]
 r433: [944..945]
 r434: [942..943]
 r435: [940..941]
 r436: [938..939]
 r437: [934..937]
 r438: [931..932]
 r439: [2..3]
 r440: [0..1]
 r441: [1074..1075]
 r442: [1070..1072] [1066..1067]
 r443: [1068..1069]
 r444: [1063..1064]
 r445: [245..246]
 r446: [238..239]
 r447: [230..231]
 r448: [228..229]
 r449: [222..223]
 r450: [220..221]
 r451: [214..215]
 r452: [212..213]
 r453: [207..208]
 r454: [204..205]
 r455: [198..199]
 r456: [194..195]
 r457: [189..190]
 r458: [186..187]
 r459: [180..181]
 r460: [176..177]
 r461: [171..172]
 r462: [168..169]
 r463: [162..163]
 r464: [158..159]
 r465: [153..154]
 r466: [150..151]
 r467: [144..145]
 r468: [285..286]
 r469: [280..281]
 r470: [275..276]
 r471: [268..269]
 r472: [266..267]
 r473: [261..262]
 r474: [256..257]
 r475: [247..248]
 r476: [140..141]
 r477: [138..139]
 r478: [136..137]
 r479: [134..135]
 r480: [127..128]
 r481: [122..123]
 r482: [115..116]
 r483: [108..109]
 r484: [101..102]
 r485: [93..94]
 r486: [59..60]
 r487: [57..58]
 r488: [55..56]
 r489: [50..51]
 r490: [45..46]
 r491: [42..43]
 r492: [35..36]
 r493: [30..31]
 r494: [23..24]
 r495: [14..15]
 r496: [91..92]
 r497: [87..88]
 r498: [85..86]
 r499: [80..81]
 r500: [75..76]
 r501: [72..73]
 r502: [65..66]
 r503: [61..62]
 r504: [886..887]
 r505: [879..880]
 r506: [813..814]
 r507: [808..809]
 r508: [803..804]
 r509: [796..797]
 r510: [787..788]
 r511: [780..781]
 r512: [773..774]
 r513: [771..772]
 r514: [769..770]
 r515: [761..765]
 r516: [869..870]
 r517: [864..865]
 r518: [859..860]
 r519: [852..853]
 r520: [843..844]
 r521: [836..837]
 r522: [829..830]
 r523: [827..828]
 r524: [825..826]
 r525: [817..821]
 r526: [757..758]
 r527: [754..755]
 r528: [747..748]
 r529: [737..738]
 r530: [739..740]
 r531: [732..734]
 r532: [732..733]
 r533: [634..635]
 r534: [629..630]
 r535: [624..625]
 r536: [617..618]
 r537: [612..613]
 r538: [602..603]
 r539: [597..598]
 r540: [592..593]
 r541: [585..586]
 r542: [580..581]
 r543: [570..571]
 r544: [567..568]
 r545: [560..561]
 r546: [728..729]
 r547: [723..724]
 r548: [718..719]
 r549: [711..712]
 r550: [702..703]
 r551: [695..696]
 r552: [688..689]
 r553: [686..687]
 r554: [684..685]
 r555: [679..680]
 r556: [674..675]
 r557: [664..665]
 r558: [657..658]
 r559: [643..644]
 r560: [645..646]
 r561: [638..640]
 r562: [638..639]
 r563: [552..553]
 r564: [545..546]
 r565: [497..498]
 r566: [492..493]
 r567: [487..488]
 r568: [535..536]
 r569: [528..529]
 r570: [477..478]
 r571: [472..473]
 r572: [467..468]
 r573: [462..463]
 r574: [457..458]
 r575: [450..451]
 r576: [445..446]
 r577: [517..518]
 r578: [512..513]
 r579: [507..508]
 r580: [435..436]
 r581: [432..433]
 r582: [425..426]
 r583: [417..418]
 r584: [410..411]
 r585: [322..323]
 r586: [315..316]
 r587: [365..366]
 r588: [360..361]
 r589: [355..356]
 r590: [348..349]
 r591: [343..344]
 r592: [338..339]
 r593: [328..329]
 r594: [400..401]
 r595: [393..394]
 r596: [929..930]
 r597: [924..925]
 r598: [919..920]
 r599: [907..908]
 r600: [905..906]
 r601: [900..901]
 r602: [895..896]
 r603: [888..889]
 r604: [383..384]
 r605: [380..381]
 r606: [373..374]
 r607: [1057..1058]
 r608: [1052..1053]
 r609: [1047..1048]
 r610: [1040..1041]
 r611: [1035..1036]
 r612: [1030..1031]
 r613: [1021..1022]
 r614: [1016..1017]
 r615: [1011..1012]
 r616: [996..997]
 r617: [991..992]
 r618: [986..987]
 r619: [977..978]
 r620: [972..973]
 r621: [967..968]
 r622: [956..957]
 r623: [951..952]
 r624: [946..947]
 r625: [303..304]
 r626: [300..301]
 r627: [293..294]
 r628: [12..13]
 r629: [10..11]
 r630: [6..7]
 r631: [4..5]
 r633: [241..242]
 r634: [130..131]
 r635: [118..119]
 r636: [104..105]
 r637: [38..39]
 r638: [26..27]
 r639: [16..18]
 r640: [68..69]
 r641: [882..883]
 r642: [799..800]
 r643: [783..784]
 r644: [775..776]
 r645: [855..856]
 r646: [839..840]
 r647: [831..832]
 r648: [750..751]
 r649: [735..736]
 r650: [606..607]
 r651: [574..575]
 r652: [563..564]
 r653: [714..715]
 r654: [698..699]
 r655: [690..691]
 r656: [660..661]
 r657: [641..642]
 r658: [548..549]
 r659: [531..532]
 r660: [439..440]
 r661: [428..429]
 r662: [413..414]
 r663: [318..319]
 r664: [326..327]
 r665: [396..397]
 r666: [909..910]
 r667: [376..377]
 r668: [1000..1002]
 r669: [933..935]
 r670: [296..297]
Compressing live ranges: from 1076 to 940 - 87%
Ranges after the compression:
 r83: [8..9]
 r84: [936..937]
 r85: [930..931]
 r86: [928..929]
 r87: [926..927]
 r88: [218..219]
 r89: [214..215]
 r90: [212..213]
 r91: [210..211]
 r92: [208..209]
 r93: [202..203]
 r94: [200..201]
 r95: [194..195]
 r96: [192..193]
 r97: [186..187]
 r98: [184..185]
 r99: [174..183]
 r100: [180..181]
 r101: [178..179]
 r102: [174..175]
 r103: [170..171]
 r104: [168..169]
 r105: [158..167]
 r106: [164..165]
 r107: [162..163]
 r108: [158..159]
 r109: [154..155]
 r110: [152..153]
 r111: [142..151]
 r112: [148..149]
 r113: [146..147]
 r114: [142..143]
 r115: [138..139]
 r116: [136..137]
 r117: [126..135]
 r118: [132..133]
 r119: [130..131]
 r120: [126..127]
 r121: [252..253]
 r122: [250..251]
 r123: [248..249]
 r124: [242..247]
 r125: [244..245]
 r126: [242..243]
 r127: [240..241]
 r128: [236..237]
 r129: [234..235]
 r130: [232..233]
 r131: [224..231]
 r132: [228..229]
 r133: [226..227]
 r134: [224..225]
 r135: [222..223]
 r136: [116..117]
 r137: [112..113]
 r138: [110..111]
 r139: [98..109]
 r140: [106..107]
 r141: [102..103]
 r142: [100..101]
 r143: [98..99]
 r144: [84..97]
 r145: [94..95]
 r146: [90..91]
 r147: [88..89]
 r148: [86..87]
 r149: [84..85]
 r150: [46..47]
 r151: [44..45]
 r152: [42..43]
 r153: [40..41]
 r154: [36..37]
 r155: [32..33]
 r156: [30..31]
 r157: [18..29]
 r158: [26..27]
 r159: [22..23]
 r160: [20..21]
 r161: [16..19]
 r162: [78..79]
 r163: [72..73]
 r164: [70..71]
 r165: [68..69]
 r166: [66..67]
 r167: [62..63]
 r168: [58..59]
 r169: [56..57]
 r170: [774..775]
 r171: [770..771]
 r172: [768..769]
 r173: [766..767]
 r174: [764..765]
 r175: [762..763]
 r176: [712..713]
 r177: [710..711]
 r178: [708..709]
 r179: [672..707]
 r180: [704..705]
 r181: [700..701]
 r182: [698..699]
 r183: [696..697]
 r184: [694..695]
 r185: [672..693]
 r186: [690..691]
 r187: [686..687]
 r188: [684..685]
 r189: [680..683]
 r190: [674..675]
 r191: [672..673]
 r192: [670..671]
 r193: [758..759]
 r194: [756..757]
 r195: [754..755]
 r196: [718..753]
 r197: [750..751]
 r198: [746..747]
 r199: [744..745]
 r200: [742..743]
 r201: [740..741]
 r202: [718..739]
 r203: [736..737]
 r204: [732..733]
 r205: [730..731]
 r206: [726..729]
 r207: [720..721]
 r208: [718..719]
 r209: [716..717]
 r210: [654..667]
 r211: [664..665]
 r212: [660..661]
 r213: [658..659]
 r214: [656..657]
 r215: [654..655]
 r216: [492..505]
 r217: [502..503]
 r218: [498..499]
 r219: [496..497]
 r220: [494..495]
 r221: [492..493]
 r222: [560..561]
 r223: [558..559]
 r224: [556..557]
 r225: [550..555]
 r226: [552..553]
 r227: [550..551]
 r228: [536..549]
 r229: [546..547]
 r230: [544..545]
 r231: [542..543]
 r232: [540..541]
 r233: [536..537]
 r234: [532..533]
 r235: [530..531]
 r236: [528..529]
 r237: [522..527]
 r238: [524..525]
 r239: [522..523]
 r240: [508..521]
 r241: [518..519]
 r242: [516..517]
 r243: [514..515]
 r244: [512..513]
 r245: [508..509]
 r246: [644..645]
 r247: [640..641]
 r248: [638..639]
 r249: [636..637]
 r250: [592..635]
 r251: [632..633]
 r252: [628..629]
 r253: [626..627]
 r254: [624..625]
 r255: [622..623]
 r256: [592..621]
 r257: [618..619]
 r258: [614..615]
 r259: [612..613]
 r260: [608..611]
 r261: [602..603]
 r262: [592..601]
 r263: [598..599]
 r264: [596..597]
 r265: [594..595]
 r266: [592..593]
 r267: [576..591]
 r268: [588..589]
 r269: [584..585]
 r270: [582..583]
 r271: [580..581]
 r272: [578..579]
 r273: [576..577]
 r274: [574..575]
 r275: [564..565]
 r276: [376..389]
 r277: [386..387]
 r278: [382..383]
 r279: [380..381]
 r280: [378..379]
 r281: [376..377]
 r282: [488..489]
 r283: [484..485]
 r284: [482..483]
 r285: [480..481]
 r286: [478..479]
 r287: [476..477]
 r288: [428..443]
 r289: [440..441]
 r290: [438..439]
 r291: [436..437]
 r292: [430..435]
 r293: [432..433]
 r294: [430..431]
 r295: [428..429]
 r296: [472..473]
 r297: [468..469]
 r298: [466..467]
 r299: [464..465]
 r300: [462..463]
 r301: [460..461]
 r302: [420..427]
 r303: [424..425]
 r304: [422..423]
 r305: [420..421]
 r306: [416..417]
 r307: [414..415]
 r308: [412..413]
 r309: [406..411]
 r310: [408..409]
 r311: [406..407]
 r312: [392..405]
 r313: [402..403]
 r314: [400..401]
 r315: [398..399]
 r316: [396..397]
 r317: [392..393]
 r318: [444..459]
 r319: [456..457]
 r320: [454..455]
 r321: [452..453]
 r322: [446..451]
 r323: [448..449]
 r324: [446..447]
 r325: [444..445]
 r326: [372..373]
 r327: [368..369]
 r328: [366..367]
 r329: [364..365]
 r330: [362..363]
 r331: [360..361]
 r332: [286..287]
 r333: [282..283]
 r334: [280..281]
 r335: [278..279]
 r336: [276..277]
 r337: [274..275]
 r338: [272..273]
 r339: [324..325]
 r340: [322..323]
 r341: [320..321]
 r342: [314..319]
 r343: [316..317]
 r344: [314..315]
 r345: [290..313]
 r346: [310..311]
 r347: [308..309]
 r348: [306..307]
 r349: [300..305]
 r350: [302..303]
 r351: [300..301]
 r352: [298..299]
 r353: [296..297]
 r354: [290..291]
 r355: [356..357]
 r356: [352..353]
 r357: [350..351]
 r358: [348..349]
 r359: [346..347]
 r360: [344..345]
 r361: [328..341]
 r362: [338..339]
 r363: [334..335]
 r364: [332..333]
 r365: [330..331]
 r366: [328..329]
 r367: [812..813]
 r368: [810..811]
 r369: [808..809]
 r370: [802..807]
 r371: [804..805]
 r372: [802..803]
 r373: [800..801]
 r374: [798..799]
 r375: [790..791]
 r376: [788..789]
 r377: [786..787]
 r378: [780..785]
 r379: [782..783]
 r380: [780..781]
 r381: [778..779]
 r382: [256..269]
 r383: [266..267]
 r384: [262..263]
 r385: [260..261]
 r386: [258..259]
 r387: [256..257]
 r388: [922..923]
 r389: [920..921]
 r390: [918..919]
 r391: [912..917]
 r392: [914..915]
 r393: [912..913]
 r394: [874..911]
 r395: [908..909]
 r396: [906..907]
 r397: [904..905]
 r398: [898..903]
 r399: [900..901]
 r400: [898..899]
 r401: [896..897]
 r402: [878..895]
 r403: [892..893]
 r404: [890..891]
 r405: [888..889]
 r406: [882..887]
 r407: [884..885]
 r408: [882..883]
 r409: [880..881]
 r410: [876..879]
 r411: [874..875]
 r412: [870..871]
 r413: [868..869]
 r414: [866..867]
 r415: [858..865]
 r416: [862..863]
 r417: [860..861]
 r418: [858..859]
 r419: [816..857]
 r420: [854..855]
 r421: [852..853]
 r422: [850..851]
 r423: [842..849]
 r424: [846..847]
 r425: [844..845]
 r426: [842..843]
 r427: [840..841]
 r428: [820..839]
 r429: [836..837]
 r430: [834..835]
 r431: [832..833]
 r432: [824..831]
 r433: [828..829]
 r434: [826..827]
 r435: [824..825]
 r436: [822..823]
 r437: [818..821]
 r438: [816..817]
 r439: [2..3]
 r440: [0..1]
 r441: [938..939]
 r442: [936..937] [932..933]
 r443: [934..935]
 r444: [930..931]
 r445: [220..221]
 r446: [214..215]
 r447: [206..207]
 r448: [204..205]
 r449: [198..199]
 r450: [196..197]
 r451: [190..191]
 r452: [188..189]
 r453: [184..185]
 r454: [182..183]
 r455: [176..177]
 r456: [172..173]
 r457: [168..169]
 r458: [166..167]
 r459: [160..161]
 r460: [156..157]
 r461: [152..153]
 r462: [150..151]
 r463: [144..145]
 r464: [140..141]
 r465: [136..137]
 r466: [134..135]
 r467: [128..129]
 r468: [254..255]
 r469: [250..251]
 r470: [246..247]
 r471: [240..241]
 r472: [238..239]
 r473: [234..235]
 r474: [230..231]
 r475: [222..223]
 r476: [124..125]
 r477: [122..123]
 r478: [120..121]
 r479: [118..119]
 r480: [112..113]
 r481: [108..109]
 r482: [102..103]
 r483: [96..97]
 r484: [90..91]
 r485: [82..83]
 r486: [52..53]
 r487: [50..51]
 r488: [48..49]
 r489: [44..45]
 r490: [40..41]
 r491: [38..39]
 r492: [32..33]
 r493: [28..29]
 r494: [22..23]
 r495: [14..15]
 r496: [80..81]
 r497: [76..77]
 r498: [74..75]
 r499: [70..71]
 r500: [66..67]
 r501: [64..65]
 r502: [58..59]
 r503: [54..55]
 r504: [776..777]
 r505: [770..771]
 r506: [714..715]
 r507: [710..711]
 r508: [706..707]
 r509: [700..701]
 r510: [692..693]
 r511: [686..687]
 r512: [680..681]
 r513: [678..679]
 r514: [676..677]
 r515: [672..673]
 r516: [760..761]
 r517: [756..757]
 r518: [752..753]
 r519: [746..747]
 r520: [738..739]
 r521: [732..733]
 r522: [726..727]
 r523: [724..725]
 r524: [722..723]
 r525: [718..719]
 r526: [668..669]
 r527: [666..667]
 r528: [660..661]
 r529: [650..651]
 r530: [652..653]
 r531: [646..647]
 r532: [646..647]
 r533: [562..563]
 r534: [558..559]
 r535: [554..555]
 r536: [548..549]
 r537: [544..545]
 r538: [534..535]
 r539: [530..531]
 r540: [526..527]
 r541: [520..521]
 r542: [516..517]
 r543: [506..507]
 r544: [504..505]
 r545: [498..499]
 r546: [642..643]
 r547: [638..639]
 r548: [634..635]
 r549: [628..629]
 r550: [620..621]
 r551: [614..615]
 r552: [608..609]
 r553: [606..607]
 r554: [604..605]
 r555: [600..601]
 r556: [596..597]
 r557: [590..591]
 r558: [584..585]
 r559: [570..571]
 r560: [572..573]
 r561: [566..567]
 r562: [566..567]
 r563: [490..491]
 r564: [484..485]
 r565: [442..443]
 r566: [438..439]
 r567: [434..435]
 r568: [474..475]
 r569: [468..469]
 r570: [426..427]
 r571: [422..423]
 r572: [418..419]
 r573: [414..415]
 r574: [410..411]
 r575: [404..405]
 r576: [400..401]
 r577: [458..459]
 r578: [454..455]
 r579: [450..451]
 r580: [390..391]
 r581: [388..389]
 r582: [382..383]
 r583: [374..375]
 r584: [368..369]
 r585: [288..289]
 r586: [282..283]
 r587: [326..327]
 r588: [322..323]
 r589: [318..319]
 r590: [312..313]
 r591: [308..309]
 r592: [304..305]
 r593: [294..295]
 r594: [358..359]
 r595: [352..353]
 r596: [814..815]
 r597: [810..811]
 r598: [806..807]
 r599: [794..795]
 r600: [792..793]
 r601: [788..789]
 r602: [784..785]
 r603: [778..779]
 r604: [342..343]
 r605: [340..341]
 r606: [334..335]
 r607: [924..925]
 r608: [920..921]
 r609: [916..917]
 r610: [910..911]
 r611: [906..907]
 r612: [902..903]
 r613: [894..895]
 r614: [890..891]
 r615: [886..887]
 r616: [872..873]
 r617: [868..869]
 r618: [864..865]
 r619: [856..857]
 r620: [852..853]
 r621: [848..849]
 r622: [838..839]
 r623: [834..835]
 r624: [830..831]
 r625: [270..271]
 r626: [268..269]
 r627: [262..263]
 r628: [12..13]
 r629: [10..11]
 r630: [6..7]
 r631: [4..5]
 r633: [216..217]
 r634: [114..115]
 r635: [104..105]
 r636: [92..93]
 r637: [34..35]
 r638: [24..25]
 r639: [16..17]
 r640: [60..61]
 r641: [772..773]
 r642: [702..703]
 r643: [688..689]
 r644: [682..683]
 r645: [748..749]
 r646: [734..735]
 r647: [728..729]
 r648: [662..663]
 r649: [648..649]
 r650: [538..539]
 r651: [510..511]
 r652: [500..501]
 r653: [630..631]
 r654: [616..617]
 r655: [610..611]
 r656: [586..587]
 r657: [568..569]
 r658: [486..487]
 r659: [470..471]
 r660: [394..395]
 r661: [384..385]
 r662: [370..371]
 r663: [284..285]
 r664: [292..293]
 r665: [354..355]
 r666: [796..797]
 r667: [336..337]
 r668: [876..877]
 r669: [818..819]
 r670: [264..265]

********** Assignment #1: **********

	 Assigning to 633 (cl=GENERAL_REGS, orig=89, freq=3, tfirst=633, tfreq=3)...
	   Assign 0 to reload r633 (freq=3)
	 Assigning to 634 (cl=GENERAL_REGS, orig=137, freq=3, tfirst=634, tfreq=3)...
	   Assign 0 to reload r634 (freq=3)
	 Assigning to 635 (cl=GENERAL_REGS, orig=141, freq=3, tfirst=635, tfreq=3)...
	   Assign 0 to reload r635 (freq=3)
	 Assigning to 636 (cl=GENERAL_REGS, orig=146, freq=3, tfirst=636, tfreq=3)...
	   Assign 0 to reload r636 (freq=3)
	 Assigning to 637 (cl=GENERAL_REGS, orig=155, freq=3, tfirst=637, tfreq=3)...
	   Assign 0 to reload r637 (freq=3)
	 Assigning to 638 (cl=GENERAL_REGS, orig=159, freq=3, tfirst=638, tfreq=3)...
	   Assign 0 to reload r638 (freq=3)
	 Assigning to 639 (cl=GENERAL_REGS, orig=495, freq=3, tfirst=639, tfreq=3)...
	   Assign 1 to reload r639 (freq=3)
	 Assigning to 640 (cl=GENERAL_REGS, orig=168, freq=3, tfirst=640, tfreq=3)...
	   Assign 0 to reload r640 (freq=3)
	 Assigning to 641 (cl=GENERAL_REGS, orig=171, freq=3, tfirst=641, tfreq=3)...
	   Assign 0 to reload r641 (freq=3)
	 Assigning to 642 (cl=GENERAL_REGS, orig=181, freq=3, tfirst=642, tfreq=3)...
	   Assign 0 to reload r642 (freq=3)
	 Assigning to 643 (cl=GENERAL_REGS, orig=187, freq=3, tfirst=643, tfreq=3)...
	   Assign 0 to reload r643 (freq=3)
	 Assigning to 644 (cl=GENERAL_REGS, orig=512, freq=3, tfirst=644, tfreq=3)...
	   Assign 2 to reload r644 (freq=3)
	 Assigning to 645 (cl=GENERAL_REGS, orig=198, freq=3, tfirst=645, tfreq=3)...
	   Assign 0 to reload r645 (freq=3)
	 Assigning to 646 (cl=GENERAL_REGS, orig=204, freq=3, tfirst=646, tfreq=3)...
	   Assign 0 to reload r646 (freq=3)
	 Assigning to 647 (cl=GENERAL_REGS, orig=522, freq=3, tfirst=647, tfreq=3)...
	   Assign 2 to reload r647 (freq=3)
	 Assigning to 648 (cl=GENERAL_REGS, orig=212, freq=3, tfirst=648, tfreq=3)...
	   Assign 2 to reload r648 (freq=3)
	 Assigning to 649 (cl=GENERAL_REGS, orig=531, freq=3, tfirst=649, tfreq=3)...
	   Assign 0 to reload r649 (freq=3)
	 Assigning to 652 (cl=GENERAL_REGS, orig=218, freq=3, tfirst=652, tfreq=3)...
	   Assign 2 to reload r652 (freq=3)
	 Assigning to 653 (cl=GENERAL_REGS, orig=252, freq=3, tfirst=653, tfreq=3)...
	   Assign 0 to reload r653 (freq=3)
	 Assigning to 654 (cl=GENERAL_REGS, orig=258, freq=3, tfirst=654, tfreq=3)...
	   Assign 0 to reload r654 (freq=3)
	 Assigning to 655 (cl=GENERAL_REGS, orig=552, freq=3, tfirst=655, tfreq=3)...
	   Assign 2 to reload r655 (freq=3)
	 Assigning to 656 (cl=GENERAL_REGS, orig=269, freq=3, tfirst=656, tfreq=3)...
	   Assign 0 to reload r656 (freq=3)
	 Assigning to 657 (cl=GENERAL_REGS, orig=561, freq=3, tfirst=657, tfreq=3)...
	   Assign 0 to reload r657 (freq=3)
	 Assigning to 658 (cl=GENERAL_REGS, orig=283, freq=3, tfirst=658, tfreq=3)...
	   Assign 0 to reload r658 (freq=3)
	 Assigning to 659 (cl=GENERAL_REGS, orig=297, freq=3, tfirst=659, tfreq=3)...
	   Assign 0 to reload r659 (freq=3)
	 Assigning to 661 (cl=GENERAL_REGS, orig=278, freq=3, tfirst=661, tfreq=3)...
	   Assign 2 to reload r661 (freq=3)
	 Assigning to 662 (cl=GENERAL_REGS, orig=327, freq=3, tfirst=662, tfreq=3)...
	   Assign 0 to reload r662 (freq=3)
	 Assigning to 663 (cl=GENERAL_REGS, orig=333, freq=3, tfirst=663, tfreq=3)...
	   Assign 0 to reload r663 (freq=3)
	 Assigning to 665 (cl=GENERAL_REGS, orig=356, freq=3, tfirst=665, tfreq=3)...
	   Assign 0 to reload r665 (freq=3)
	 Assigning to 667 (cl=GENERAL_REGS, orig=363, freq=3, tfirst=667, tfreq=3)...
	   Assign 2 to reload r667 (freq=3)
	 Assigning to 670 (cl=GENERAL_REGS, orig=384, freq=3, tfirst=670, tfreq=3)...
	   Assign 2 to reload r670 (freq=3)
	 Assigning to 668 (cl=SSE_REGS, orig=411, freq=3, tfirst=668, tfreq=3)...
	   Assign 22 to reload r668 (freq=3)
	 Assigning to 669 (cl=SSE_REGS, orig=438, freq=3, tfirst=669, tfreq=3)...
	   Assign 22 to reload r669 (freq=3)
	 Assigning to 650 (cl=SSE_REGS, orig=233, freq=2, tfirst=650, tfreq=2)...
	   Assign 23 to reload r650 (freq=2)
	 Assigning to 651 (cl=SSE_REGS, orig=245, freq=2, tfirst=651, tfreq=2)...
	   Assign 24 to reload r651 (freq=2)
	 Assigning to 660 (cl=SSE_REGS, orig=317, freq=2, tfirst=660, tfreq=2)...
	   Assign 25 to reload r660 (freq=2)
	 Assigning to 664 (cl=SSE_REGS, orig=354, freq=2, tfirst=664, tfreq=2)...
	   Assign 26 to reload r664 (freq=2)
	 Assigning to 666 (cl=SSE_REGS, orig=599, freq=2, tfirst=666, tfreq=2)...
	   Assign 27 to reload r666 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=160, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 811
changing reg in insn 813
changing reg in insn 22
changing reg in insn 27
changing reg in insn 25
changing reg in insn 23
changing reg in insn 27
changing reg in insn 25
changing reg in insn 30
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 64
changing reg in insn 72
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 77
changing reg in insn 85
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 90
changing reg in insn 98
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 103
changing reg in insn 111
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 110
changing reg in insn 111
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 140
changing reg in insn 153
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 164
changing reg in insn 159
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 166
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 189
changing reg in insn 192
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 210
changing reg in insn 211
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 222
changing reg in insn 225
changing reg in insn 228
changing reg in insn 228
changing reg in insn 229
changing reg in insn 238
changing reg in insn 241
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 245
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 277
changing reg in insn 258
changing reg in insn 261
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 278
changing reg in insn 266
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 279
changing reg in insn 282
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 295
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 317
changing reg in insn 298
changing reg in insn 301
changing reg in insn 301
changing reg in insn 302
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 318
changing reg in insn 306
changing reg in insn 309
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 319
changing reg in insn 322
changing reg in insn 327
changing reg in insn 335
changing reg in insn 329
changing reg in insn 332
changing reg in insn 332
changing reg in insn 333
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 404
changing reg in insn 413
changing reg in insn 406
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 413
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 366
changing reg in insn 374
changing reg in insn 368
changing reg in insn 369
changing reg in insn 369
changing reg in insn 371
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 374
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 384
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 397
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 397
changing reg in insn 342
changing reg in insn 343
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 424
changing reg in insn 424
changing reg in insn 425
changing reg in insn 425
changing reg in insn 451
changing reg in insn 427
changing reg in insn 430
changing reg in insn 430
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 452
changing reg in insn 435
changing reg in insn 438
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 453
changing reg in insn 446
changing reg in insn 447
changing reg in insn 447
changing reg in insn 449
changing reg in insn 449
changing reg in insn 450
changing reg in insn 450
changing reg in insn 454
changing reg in insn 456
changing reg in insn 465
changing reg in insn 458
changing reg in insn 461
changing reg in insn 461
changing reg in insn 462
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 465
changing reg in insn 466
changing reg in insn 467
changing reg in insn 474
changing reg in insn 475
changing reg in insn 578
changing reg in insn 587
changing reg in insn 580
changing reg in insn 583
changing reg in insn 583
changing reg in insn 584
changing reg in insn 584
changing reg in insn 585
changing reg in insn 585
changing reg in insn 587
changing reg in insn 488
changing reg in insn 491
changing reg in insn 491
changing reg in insn 492
changing reg in insn 492
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 495
changing reg in insn 498
changing reg in insn 509
changing reg in insn 500
changing reg in insn 501
changing reg in insn 501
changing reg in insn 503
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 508
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 508
changing reg in insn 508
changing reg in insn 510
changing reg in insn 517
changing reg in insn 520
changing reg in insn 520
changing reg in insn 521
changing reg in insn 521
changing reg in insn 522
changing reg in insn 522
changing reg in insn 523
changing reg in insn 523
changing reg in insn 524
changing reg in insn 527
changing reg in insn 533
changing reg in insn 529
changing reg in insn 530
changing reg in insn 530
changing reg in insn 532
changing reg in insn 532
changing reg in insn 534
changing reg in insn 537
changing reg in insn 538
changing reg in insn 538
changing reg in insn 540
changing reg in insn 540
changing reg in insn 541
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 544
changing reg in insn 545
changing reg in insn 553
changing reg in insn 547
changing reg in insn 548
changing reg in insn 548
changing reg in insn 550
changing reg in insn 550
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 553
changing reg in insn 558
changing reg in insn 569
changing reg in insn 560
changing reg in insn 561
changing reg in insn 561
changing reg in insn 563
changing reg in insn 563
changing reg in insn 564
changing reg in insn 564
changing reg in insn 568
changing reg in insn 566
changing reg in insn 567
changing reg in insn 567
changing reg in insn 568
changing reg in insn 568
changing reg in insn 570
changing reg in insn 592
changing reg in insn 595
changing reg in insn 595
changing reg in insn 596
changing reg in insn 596
changing reg in insn 597
changing reg in insn 597
changing reg in insn 598
changing reg in insn 598
changing reg in insn 599
changing reg in insn 603
changing reg in insn 606
changing reg in insn 606
changing reg in insn 607
changing reg in insn 607
changing reg in insn 608
changing reg in insn 609
changing reg in insn 609
changing reg in insn 610
changing reg in insn 610
changing reg in insn 611
changing reg in insn 616
changing reg in insn 617
changing reg in insn 617
changing reg in insn 619
changing reg in insn 619
changing reg in insn 620
changing reg in insn 620
changing reg in insn 622
changing reg in insn 623
changing reg in insn 623
changing reg in insn 624
changing reg in insn 638
changing reg in insn 626
changing reg in insn 627
changing reg in insn 627
changing reg in insn 629
changing reg in insn 629
changing reg in insn 630
changing reg in insn 630
changing reg in insn 634
changing reg in insn 632
changing reg in insn 633
changing reg in insn 633
changing reg in insn 634
changing reg in insn 634
changing reg in insn 635
changing reg in insn 635
changing reg in insn 636
changing reg in insn 638
changing reg in insn 651
changing reg in insn 654
changing reg in insn 654
changing reg in insn 655
changing reg in insn 655
changing reg in insn 656
changing reg in insn 656
changing reg in insn 657
changing reg in insn 657
changing reg in insn 658
changing reg in insn 694
changing reg in insn 703
changing reg in insn 696
changing reg in insn 699
changing reg in insn 699
changing reg in insn 700
changing reg in insn 700
changing reg in insn 701
changing reg in insn 701
changing reg in insn 703
changing reg in insn 666
changing reg in insn 667
changing reg in insn 667
changing reg in insn 669
changing reg in insn 669
changing reg in insn 670
changing reg in insn 670
changing reg in insn 674
changing reg in insn 672
changing reg in insn 673
changing reg in insn 673
changing reg in insn 674
changing reg in insn 674
changing reg in insn 675
changing reg in insn 675
changing reg in insn 676
changing reg in insn 679
changing reg in insn 680
changing reg in insn 680
changing reg in insn 682
changing reg in insn 682
changing reg in insn 683
changing reg in insn 683
changing reg in insn 685
changing reg in insn 686
changing reg in insn 686
changing reg in insn 687
changing reg in insn 689
changing reg in insn 786
changing reg in insn 795
changing reg in insn 788
changing reg in insn 791
changing reg in insn 791
changing reg in insn 792
changing reg in insn 792
changing reg in insn 793
changing reg in insn 793
changing reg in insn 795
changing reg in insn 712
changing reg in insn 713
changing reg in insn 713
changing reg in insn 715
changing reg in insn 715
changing reg in insn 716
changing reg in insn 716
changing reg in insn 718
changing reg in insn 719
changing reg in insn 719
changing reg in insn 720
changing reg in insn 744
changing reg in insn 722
changing reg in insn 723
changing reg in insn 723
changing reg in insn 725
changing reg in insn 725
changing reg in insn 726
changing reg in insn 726
changing reg in insn 730
changing reg in insn 728
changing reg in insn 729
changing reg in insn 729
changing reg in insn 730
changing reg in insn 730
changing reg in insn 731
changing reg in insn 731
changing reg in insn 733
changing reg in insn 734
changing reg in insn 734
changing reg in insn 736
changing reg in insn 736
changing reg in insn 737
changing reg in insn 737
changing reg in insn 741
changing reg in insn 739
changing reg in insn 740
changing reg in insn 740
changing reg in insn 741
changing reg in insn 741
changing reg in insn 742
changing reg in insn 742
changing reg in insn 743
changing reg in insn 744
changing reg in insn 746
changing reg in insn 747
changing reg in insn 747
changing reg in insn 749
changing reg in insn 749
changing reg in insn 750
changing reg in insn 750
changing reg in insn 752
changing reg in insn 753
changing reg in insn 753
changing reg in insn 754
changing reg in insn 754
changing reg in insn 755
changing reg in insn 781
changing reg in insn 757
changing reg in insn 758
changing reg in insn 758
changing reg in insn 760
changing reg in insn 760
changing reg in insn 761
changing reg in insn 761
changing reg in insn 766
changing reg in insn 763
changing reg in insn 764
changing reg in insn 764
changing reg in insn 765
changing reg in insn 765
changing reg in insn 766
changing reg in insn 766
changing reg in insn 767
changing reg in insn 767
changing reg in insn 769
changing reg in insn 770
changing reg in insn 770
changing reg in insn 772
changing reg in insn 772
changing reg in insn 773
changing reg in insn 773
changing reg in insn 778
changing reg in insn 775
changing reg in insn 776
changing reg in insn 776
changing reg in insn 777
changing reg in insn 777
changing reg in insn 778
changing reg in insn 778
changing reg in insn 779
changing reg in insn 779
changing reg in insn 780
changing reg in insn 781
changing reg in insn 822
changing reg in insn 825
changing reg in insn 825
changing reg in insn 829
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 27
changing reg in insn 26
changing reg in insn 25
changing reg in insn 24
changing reg in insn 23
changing reg in insn 30
changing reg in insn 28
changing reg in insn 27
changing reg in insn 26
changing reg in insn 25
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 122
changing reg in insn 123
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 134
changing reg in insn 135
changing reg in insn 139
changing reg in insn 140
changing reg in insn 145
changing reg in insn 146
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 155
changing reg in insn 158
changing reg in insn 159
changing reg in insn 161
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 172
changing reg in insn 173
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 186
changing reg in insn 188
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 197
changing reg in insn 198
changing reg in insn 200
changing reg in insn 204
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 219
changing reg in insn 221
changing reg in insn 224
changing reg in insn 225
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 237
changing reg in insn 238
changing reg in insn 240
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 257
changing reg in insn 258
changing reg in insn 260
changing reg in insn 265
changing reg in insn 266
changing reg in insn 268
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 280
changing reg in insn 291
changing reg in insn 292
changing reg in insn 294
changing reg in insn 297
changing reg in insn 298
changing reg in insn 300
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 314
changing reg in insn 316
changing reg in insn 320
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 331
changing reg in insn 339
changing reg in insn 338
changing reg in insn 339
changing reg in insn 342
changing reg in insn 341
changing reg in insn 357
changing reg in insn 358
changing reg in insn 360
changing reg in insn 363
changing reg in insn 364
changing reg in insn 367
changing reg in insn 368
changing reg in insn 370
changing reg in insn 380
changing reg in insn 381
changing reg in insn 383
changing reg in insn 386
changing reg in insn 387
changing reg in insn 390
changing reg in insn 391
changing reg in insn 393
changing reg in insn 403
changing reg in insn 404
changing reg in insn 405
changing reg in insn 406
changing reg in insn 408
changing reg in insn 420
changing reg in insn 421
changing reg in insn 423
changing reg in insn 426
changing reg in insn 427
changing reg in insn 429
changing reg in insn 434
changing reg in insn 435
changing reg in insn 437
changing reg in insn 441
changing reg in insn 442
changing reg in insn 442
changing reg in insn 443
changing reg in insn 445
changing reg in insn 446
changing reg in insn 448
changing reg in insn 457
changing reg in insn 458
changing reg in insn 460
changing reg in insn 471
changing reg in insn 470
changing reg in insn 471
changing reg in insn 474
changing reg in insn 473
changing reg in insn 487
changing reg in insn 488
changing reg in insn 490
changing reg in insn 499
changing reg in insn 500
changing reg in insn 502
changing reg in insn 505
changing reg in insn 506
changing reg in insn 516
changing reg in insn 517
changing reg in insn 519
changing reg in insn 528
changing reg in insn 529
changing reg in insn 531
changing reg in insn 536
changing reg in insn 537
changing reg in insn 539
changing reg in insn 542
changing reg in insn 543
changing reg in insn 546
changing reg in insn 547
changing reg in insn 549
changing reg in insn 559
changing reg in insn 560
changing reg in insn 562
changing reg in insn 565
changing reg in insn 566
changing reg in insn 577
changing reg in insn 578
changing reg in insn 579
changing reg in insn 580
changing reg in insn 582
changing reg in insn 591
changing reg in insn 592
changing reg in insn 594
changing reg in insn 602
changing reg in insn 603
changing reg in insn 605
changing reg in insn 615
changing reg in insn 616
changing reg in insn 618
changing reg in insn 621
changing reg in insn 622
changing reg in insn 625
changing reg in insn 626
changing reg in insn 628
changing reg in insn 631
changing reg in insn 632
changing reg in insn 636
changing reg in insn 637
changing reg in insn 650
changing reg in insn 651
changing reg in insn 653
changing reg in insn 665
changing reg in insn 666
changing reg in insn 668
changing reg in insn 671
changing reg in insn 672
changing reg in insn 677
changing reg in insn 678
changing reg in insn 679
changing reg in insn 681
changing reg in insn 684
changing reg in insn 685
changing reg in insn 688
changing reg in insn 689
changing reg in insn 693
changing reg in insn 694
changing reg in insn 695
changing reg in insn 696
changing reg in insn 698
changing reg in insn 711
changing reg in insn 712
changing reg in insn 714
changing reg in insn 717
changing reg in insn 718
changing reg in insn 721
changing reg in insn 722
changing reg in insn 724
changing reg in insn 727
changing reg in insn 728
changing reg in insn 732
changing reg in insn 733
changing reg in insn 735
changing reg in insn 738
changing reg in insn 739
changing reg in insn 745
changing reg in insn 746
changing reg in insn 748
changing reg in insn 751
changing reg in insn 752
changing reg in insn 756
changing reg in insn 757
changing reg in insn 759
changing reg in insn 762
changing reg in insn 763
changing reg in insn 768
changing reg in insn 769
changing reg in insn 771
changing reg in insn 774
changing reg in insn 775
changing reg in insn 785
changing reg in insn 786
changing reg in insn 787
changing reg in insn 788
changing reg in insn 790
changing reg in insn 802
changing reg in insn 803
changing reg in insn 810
changing reg in insn 811
changing reg in insn 816
changing reg in insn 817
changing reg in insn 819
changing reg in insn 820
deleting insn with uid = 877.
deleting insn with uid = 888.
deleting insn with uid = 279.
deleting insn with uid = 894.
deleting insn with uid = 319.
deleting insn with uid = 896.
deleting insn with uid = 902.
deleting insn with uid = 908.
deleting insn with uid = 453.
deleting insn with uid = 919.
deleting insn with uid = 929.
deleting insn with uid = 930.
deleting insn with uid = 932.
deleting insn with uid = 935.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 190.
verify found no changes in insn with uid = 223.
verify found no changes in insn with uid = 281.
verify found no changes in insn with uid = 321.
verify found no changes in insn with uid = 345.
verify found no changes in insn with uid = 455.
verify found no changes in insn with uid = 477.
verify found no changes in insn with uid = 511.
verify found no changes in insn with uid = 535.
verify found no changes in insn with uid = 571.
verify found no changes in insn with uid = 818.
verify found no changes in insn with uid = 821.


int read_data(int*, Preprocess*, IOFiles*, Data_file_header*, Data_block_header*, Precision2*, FILE**, Precision1*, float**, float**, int, InFile_struct*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 37[r8] 38[r9]
;;  ref usage 	r0={432d,426u} r1={145d,129u,38e} r2={79d,61u,23e} r3={4d,4u} r4={29d,11u} r5={40d,22u} r6={1d,272u} r7={1d,71u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r16={25e} r17={245d,23u} r18={18d} r19={18d} r20={1d,1u,35e} r21={24d,5u} r22={23d,4u} r23={20d,1u} r24={20d,1u} r25={20d,1u} r26={20d,1u} r27={20d,1u} r28={19d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={19d,1u} r38={19d,1u} r39={18d} r40={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} 
;;    total ref usage 3274{2117d,1036u,121e} in 780{762 regular + 18 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) sim2fitman_fmtext_o.cpp:26 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:29 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:30 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 numSets+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:31 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:32 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:33 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:34 89 {*movdi_internal}
     (nil))
(insn 17 16 832 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:50 90 {*movsi_internal}
     (nil))
(jump_insn 832 17 833 2 (set (pc)
        (label_ref 808)) sim2fitman_fmtext_o.cpp:50 636 {jump}
     (nil)
 -> 808)
;;  succ:       52 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 833 832 812)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 441 442 443 444
(code_label 812 833 20 3 33 "" [1 uses])
(note 20 812 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:54 90 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 1 dx [orig:84 D.6028 ] [84])
        (sign_extend:DI (reg:SI 0 ax [441]))) sim2fitman_fmtext_o.cpp:54 142 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 3 (set (reg:DI 0 ax [442])
        (reg:DI 1 dx [orig:84 D.6028 ] [84])) sim2fitman_fmtext_o.cpp:54 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg:DI 0 ax [442])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 497 {*ashldi3_1}
     (nil))
(insn 25 24 26 3 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg:DI 0 ax [442])
                    (reg:DI 1 dx [orig:84 D.6028 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.6028 ] [84])
            (const_int 9 [0x9]))
        (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg:DI 0 ax [442])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 497 {*ashldi3_1}
     (nil))
(insn 27 26 28 3 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg:DI 0 ax [442])
                    (reg:DI 1 dx [orig:84 D.6028 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.6028 ] [84])
            (const_int 19 [0x13]))
        (nil)))
(insn 28 27 29 3 (parallel [
            (set (reg:DI 0 ax [443])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 497 {*ashldi3_1}
     (nil))
(insn 29 28 30 3 (set (reg:DI 0 ax [442])
        (reg:DI 0 ax [443])) sim2fitman_fmtext_o.cpp:54 89 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:DI 1 dx [orig:85 D.6028 ] [85])
        (reg:DI 0 ax [442])) sim2fitman_fmtext_o.cpp:54 89 {*movdi_internal}
     (nil))
(insn 31 30 32 3 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])) sim2fitman_fmtext_o.cpp:54 89 {*movdi_internal}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.6029 ] [86])
                (plus:DI (reg/f:DI 0 ax [444])
                    (reg:DI 1 dx [orig:85 D.6028 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:54 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.6028 ] [85]))
        (nil)))
(insn 33 32 34 3 (set (reg:SI 0 ax [orig:87 D.6027 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:86 D.6029 ] [86])
                (const_int 20 [0x14])) [0 _34->file_type+0 S4 A32])) sim2fitman_fmtext_o.cpp:54 90 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 D.6027 ] [87])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:54 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 35 34 36 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 805)
            (pc))) sim2fitman_fmtext_o.cpp:54 596 {*jcc_1}
     (nil)
 -> 805)
;;  succ:       4 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467
(note 36 35 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 4 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:58 90 {*movsi_internal}
     (nil))
(insn 38 37 865 4 (set (reg:DI 0 ax [orig:88 D.6028 ] [88])
        (sign_extend:DI (reg:SI 0 ax [445]))) sim2fitman_fmtext_o.cpp:58 142 {*extendsidi2_rex64}
     (nil))
(insn 865 38 39 4 (set (reg:DI 0 ax [orig:89 D.6028 ] [89])
        (reg:DI 0 ax [orig:88 D.6028 ] [88])) sim2fitman_fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 39 865 866 4 (parallel [
            (set (reg:DI 0 ax [orig:89 D.6028 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:89 D.6028 ] [89])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:58 497 {*ashldi3_1}
     (nil))
(insn 866 39 40 4 (set (reg:DI 1 dx [orig:89 D.6028 ] [89])
        (reg:DI 0 ax [orig:89 D.6028 ] [89])) sim2fitman_fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 40 866 41 4 (set (reg/f:DI 0 ax [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.6030 ] [90])
                (plus:DI (reg/f:DI 0 ax [446])
                    (reg:DI 1 dx [orig:89 D.6028 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:58 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6028 ] [89]))
        (nil)))
(insn 42 41 43 4 (set (reg:DI 0 ax [orig:91 D.6031 ] [91])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:90 D.6030 ] [90])
                (const_int 16 [0x10])) [0 _39->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:58 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:SI 0 ax [orig:92 D.6027 ] [92])
        (reg:SI 0 ax [orig:91 D.6031 ] [91])) sim2fitman_fmtext_o.cpp:58 90 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:SI 0 ax [447])
                (ashift:SI (reg:SI 0 ax [orig:92 D.6027 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:58 496 {*ashlsi3_1}
     (nil))
(insn 45 44 46 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [447])) sim2fitman_fmtext_o.cpp:58 90 {*movsi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SI 0 ax [448])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:60 90 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:DI 0 ax [orig:93 D.6028 ] [93])
        (sign_extend:DI (reg:SI 0 ax [448]))) sim2fitman_fmtext_o.cpp:60 142 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg:DI 0 ax [orig:94 D.6028 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6028 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:60 497 {*ashldi3_1}
     (nil))
(insn 49 48 50 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:94 D.6028 ] [94])) sim2fitman_fmtext_o.cpp:60 89 {*movdi_internal}
     (nil))
(call_insn 50 49 51 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9d769fc200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:60 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 51 50 52 4 (set (reg/f:DI 0 ax [449])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:60 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [449])
        (nil)))
(insn 52 51 53 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])
        (reg/f:DI 0 ax [449])) sim2fitman_fmtext_o.cpp:60 89 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SI 0 ax [450])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:63 90 {*movsi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:DI 0 ax [orig:95 D.6028 ] [95])
        (sign_extend:DI (reg:SI 0 ax [450]))) sim2fitman_fmtext_o.cpp:63 142 {*extendsidi2_rex64}
     (nil))
(insn 55 54 56 4 (parallel [
            (set (reg:DI 0 ax [orig:96 D.6028 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.6028 ] [95])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:63 497 {*ashldi3_1}
     (nil))
(insn 56 55 57 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:96 D.6028 ] [96])) sim2fitman_fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(call_insn 57 56 58 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9d769fc200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:63 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [451])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:63 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [451])
        (nil)))
(insn 59 58 60 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 temp_double2+0 S8 A64])
        (reg/f:DI 0 ax [451])) sim2fitman_fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(insn 60 59 61 4 (set (reg:SI 0 ax [452])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:65 90 {*movsi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 0 ax [orig:97 D.6028 ] [97])
        (sign_extend:DI (reg:SI 0 ax [452]))) sim2fitman_fmtext_o.cpp:65 142 {*extendsidi2_rex64}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg:DI 1 dx [orig:98 D.6028 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.6028 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:65 497 {*ashldi3_1}
     (nil))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [453])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 out_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (parallel [
            (set (reg/f:DI 3 bx [orig:99 D.6032 ] [99])
                (plus:DI (reg:DI 1 dx [orig:98 D.6028 ] [98])
                    (reg/f:DI 0 ax [453])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:65 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.6028 ] [98]))
        (nil)))
(insn 65 64 66 4 (set (reg:SI 0 ax [454])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:65 90 {*movsi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:DI 0 ax [orig:100 D.6028 ] [100])
        (sign_extend:DI (reg:SI 0 ax [454]))) sim2fitman_fmtext_o.cpp:65 142 {*extendsidi2_rex64}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg:DI 0 ax [orig:101 D.6028 ] [101])
                (ashift:DI (reg:DI 0 ax [orig:100 D.6028 ] [100])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:65 497 {*ashldi3_1}
     (nil))
(insn 68 67 69 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:101 D.6028 ] [101])) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(call_insn 69 68 70 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9d769fc200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:65 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 70 69 71 4 (set (reg/f:DI 0 ax [455])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [455])
        (nil)))
(insn 71 70 72 4 (set (reg/f:DI 0 ax [orig:102 D.6033 ] [102])
        (reg/f:DI 0 ax [455])) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:99 D.6032 ] [99]) [0 *_52+0 S8 A64])
        (reg/f:DI 0 ax [orig:102 D.6033 ] [102])) sim2fitman_fmtext_o.cpp:65 89 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:SI 0 ax [456])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:66 90 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 0 ax [orig:103 D.6028 ] [103])
        (sign_extend:DI (reg:SI 0 ax [456]))) sim2fitman_fmtext_o.cpp:66 142 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 4 (parallel [
            (set (reg:DI 1 dx [orig:104 D.6028 ] [104])
                (ashift:DI (reg:DI 0 ax [orig:103 D.6028 ] [103])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:66 497 {*ashldi3_1}
     (nil))
(insn 76 75 77 4 (set (reg/f:DI 0 ax [457])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 scratch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg/f:DI 3 bx [orig:105 D.6032 ] [105])
                (plus:DI (reg:DI 1 dx [orig:104 D.6028 ] [104])
                    (reg/f:DI 0 ax [457])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:66 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:104 D.6028 ] [104]))
        (nil)))
(insn 78 77 79 4 (set (reg:SI 0 ax [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:66 90 {*movsi_internal}
     (nil))
(insn 79 78 80 4 (set (reg:DI 0 ax [orig:106 D.6028 ] [106])
        (sign_extend:DI (reg:SI 0 ax [458]))) sim2fitman_fmtext_o.cpp:66 142 {*extendsidi2_rex64}
     (nil))
(insn 80 79 81 4 (parallel [
            (set (reg:DI 0 ax [orig:107 D.6028 ] [107])
                (ashift:DI (reg:DI 0 ax [orig:106 D.6028 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:66 497 {*ashldi3_1}
     (nil))
(insn 81 80 82 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:107 D.6028 ] [107])) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (nil))
(call_insn 82 81 83 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9d769fc200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:66 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 83 82 84 4 (set (reg/f:DI 0 ax [459])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [459])
        (nil)))
(insn 84 83 85 4 (set (reg/f:DI 0 ax [orig:108 D.6033 ] [108])
        (reg/f:DI 0 ax [459])) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (nil))
(insn 85 84 86 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:105 D.6032 ] [105]) [0 *_59+0 S8 A64])
        (reg/f:DI 0 ax [orig:108 D.6033 ] [108])) sim2fitman_fmtext_o.cpp:66 89 {*movdi_internal}
     (nil))
(insn 86 85 87 4 (set (reg:SI 0 ax [460])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:68 90 {*movsi_internal}
     (nil))
(insn 87 86 88 4 (set (reg:DI 0 ax [orig:109 D.6028 ] [109])
        (sign_extend:DI (reg:SI 0 ax [460]))) sim2fitman_fmtext_o.cpp:68 142 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg:DI 1 dx [orig:110 D.6028 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 D.6028 ] [109])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:68 497 {*ashldi3_1}
     (nil))
(insn 89 88 90 4 (set (reg/f:DI 0 ax [461])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (parallel [
            (set (reg/f:DI 3 bx [orig:111 D.6034 ] [111])
                (plus:DI (reg:DI 1 dx [orig:110 D.6028 ] [110])
                    (reg/f:DI 0 ax [461])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:68 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.6028 ] [110]))
        (nil)))
(insn 91 90 92 4 (set (reg:SI 0 ax [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:68 90 {*movsi_internal}
     (nil))
(insn 92 91 93 4 (set (reg:DI 0 ax [orig:112 D.6028 ] [112])
        (sign_extend:DI (reg:SI 0 ax [462]))) sim2fitman_fmtext_o.cpp:68 142 {*extendsidi2_rex64}
     (nil))
(insn 93 92 94 4 (parallel [
            (set (reg:DI 0 ax [orig:113 D.6028 ] [113])
                (ashift:DI (reg:DI 0 ax [orig:112 D.6028 ] [112])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:68 497 {*ashldi3_1}
     (nil))
(insn 94 93 95 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:113 D.6028 ] [113])) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(call_insn 95 94 96 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9d769fc200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:68 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 96 95 97 4 (set (reg/f:DI 0 ax [463])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [463])
        (nil)))
(insn 97 96 98 4 (set (reg/f:DI 0 ax [orig:114 D.6033 ] [114])
        (reg/f:DI 0 ax [463])) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 98 97 99 4 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:111 D.6034 ] [111]) [0 _66->fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:114 D.6033 ] [114])) sim2fitman_fmtext_o.cpp:68 89 {*movdi_internal}
     (nil))
(insn 99 98 100 4 (set (reg:SI 0 ax [464])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:69 90 {*movsi_internal}
     (nil))
(insn 100 99 101 4 (set (reg:DI 0 ax [orig:115 D.6028 ] [115])
        (sign_extend:DI (reg:SI 0 ax [464]))) sim2fitman_fmtext_o.cpp:69 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg:DI 1 dx [orig:116 D.6028 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.6028 ] [115])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:69 497 {*ashldi3_1}
     (nil))
(insn 102 101 103 4 (set (reg/f:DI 0 ax [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (nil))
(insn 103 102 104 4 (parallel [
            (set (reg/f:DI 3 bx [orig:117 D.6035 ] [117])
                (plus:DI (reg:DI 1 dx [orig:116 D.6028 ] [116])
                    (reg/f:DI 0 ax [465])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:69 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.6028 ] [116]))
        (nil)))
(insn 104 103 105 4 (set (reg:SI 0 ax [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) sim2fitman_fmtext_o.cpp:69 90 {*movsi_internal}
     (nil))
(insn 105 104 106 4 (set (reg:DI 0 ax [orig:118 D.6028 ] [118])
        (sign_extend:DI (reg:SI 0 ax [466]))) sim2fitman_fmtext_o.cpp:69 142 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 4 (parallel [
            (set (reg:DI 0 ax [orig:119 D.6028 ] [119])
                (ashift:DI (reg:DI 0 ax [orig:118 D.6028 ] [118])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:69 497 {*ashldi3_1}
     (nil))
(insn 107 106 108 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:119 D.6028 ] [119])) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (nil))
(call_insn 108 107 109 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b9d769fc200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:69 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 109 108 110 4 (set (reg/f:DI 0 ax [467])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [467])
        (nil)))
(insn 110 109 111 4 (set (reg/f:DI 0 ax [orig:120 D.6033 ] [120])
        (reg/f:DI 0 ax [467])) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:117 D.6035 ] [117]) [0 _73->fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:120 D.6033 ] [120])) sim2fitman_fmtext_o.cpp:69 89 {*movdi_internal}
     (nil))
(insn 112 111 834 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:72 90 {*movsi_internal}
     (nil))
(jump_insn 834 112 835 4 (set (pc)
        (label_ref 142)) sim2fitman_fmtext_o.cpp:72 636 {jump}
     (nil)
 -> 142)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 835 834 144)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 468 469 470 471 472 473 474 475
(code_label 144 835 115 5 5 "" [1 uses])
(note 115 144 116 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 5 (set (reg:SI 0 ax [468])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 117 116 118 5 (set (reg:DI 0 ax [orig:121 D.6028 ] [121])
        (sign_extend:DI (reg:SI 0 ax [468]))) sim2fitman_fmtext_o.cpp:73 142 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 5 (parallel [
            (set (reg:DI 1 dx [orig:122 D.6028 ] [122])
                (ashift:DI (reg:DI 0 ax [orig:121 D.6028 ] [121])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:73 497 {*ashldi3_1}
     (nil))
(insn 119 118 120 5 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 120 119 121 5 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.6035 ] [123])
                (plus:DI (reg/f:DI 0 ax [469])
                    (reg:DI 1 dx [orig:122 D.6028 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:73 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:122 D.6028 ] [122]))
        (nil)))
(insn 121 120 122 5 (set (reg/f:DI 0 ax [orig:124 D.6036 ] [124])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:123 D.6035 ] [123]) [0 _80->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 122 121 123 5 (set (reg:SI 1 dx [470])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 123 122 124 5 (set (reg:DI 1 dx [orig:125 D.6028 ] [125])
        (sign_extend:DI (reg:SI 1 dx [470]))) sim2fitman_fmtext_o.cpp:73 142 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 5 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6028 ] [126])
                (ashift:DI (reg:DI 1 dx [orig:125 D.6028 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:73 497 {*ashldi3_1}
     (nil))
(insn 125 124 126 5 (parallel [
            (set (reg/f:DI 1 dx [orig:127 D.6036 ] [127])
                (plus:DI (reg:DI 1 dx [orig:126 D.6028 ] [126])
                    (reg/f:DI 0 ax [orig:124 D.6036 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:73 221 {*adddi_1}
     (nil))
(insn 126 125 127 5 (set (reg:SF 0 ax [471])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_fmtext_o.cpp:73 129 {*movsf_internal}
     (nil))
(insn 127 126 128 5 (set (mem:SF (reg/f:DI 1 dx [orig:127 D.6036 ] [127]) [0 *_84+0 S4 A32])
        (reg:SF 0 ax [471])) sim2fitman_fmtext_o.cpp:73 129 {*movsf_internal}
     (nil))
(insn 128 127 129 5 (set (reg:SI 0 ax [472])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:74 90 {*movsi_internal}
     (nil))
(insn 129 128 130 5 (set (reg:DI 0 ax [orig:128 D.6028 ] [128])
        (sign_extend:DI (reg:SI 0 ax [472]))) sim2fitman_fmtext_o.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 130 129 131 5 (parallel [
            (set (reg:DI 1 dx [orig:129 D.6028 ] [129])
                (ashift:DI (reg:DI 0 ax [orig:128 D.6028 ] [128])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 497 {*ashldi3_1}
     (nil))
(insn 131 130 132 5 (set (reg/f:DI 0 ax [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:74 89 {*movdi_internal}
     (nil))
(insn 132 131 133 5 (parallel [
            (set (reg/f:DI 0 ax [orig:130 D.6035 ] [130])
                (plus:DI (reg/f:DI 0 ax [473])
                    (reg:DI 1 dx [orig:129 D.6028 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.6028 ] [129]))
        (nil)))
(insn 133 132 134 5 (set (reg/f:DI 0 ax [orig:131 D.6036 ] [131])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:130 D.6035 ] [130]) [0 _87->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:74 89 {*movdi_internal}
     (nil))
(insn 134 133 135 5 (set (reg:SI 1 dx [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:74 90 {*movsi_internal}
     (nil))
(insn 135 134 136 5 (set (reg:DI 1 dx [orig:132 D.6037 ] [132])
        (sign_extend:DI (reg:SI 1 dx [474]))) sim2fitman_fmtext_o.cpp:74 142 {*extendsidi2_rex64}
     (nil))
(insn 136 135 137 5 (parallel [
            (set (reg:DI 1 dx [orig:133 D.6037 ] [133])
                (plus:DI (reg:DI 1 dx [orig:132 D.6037 ] [132])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 221 {*adddi_1}
     (nil))
(insn 137 136 138 5 (parallel [
            (set (reg:DI 1 dx [orig:134 D.6037 ] [134])
                (ashift:DI (reg:DI 1 dx [orig:133 D.6037 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 497 {*ashldi3_1}
     (nil))
(insn 138 137 139 5 (parallel [
            (set (reg/f:DI 1 dx [orig:135 D.6036 ] [135])
                (plus:DI (reg:DI 1 dx [orig:134 D.6037 ] [134])
                    (reg/f:DI 0 ax [orig:131 D.6036 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:74 221 {*adddi_1}
     (nil))
(insn 139 138 140 5 (set (reg:SF 0 ax [475])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_fmtext_o.cpp:74 129 {*movsf_internal}
     (nil))
(insn 140 139 141 5 (set (mem:SF (reg/f:DI 1 dx [orig:135 D.6036 ] [135]) [0 *_92+0 S4 A32])
        (reg:SF 0 ax [475])) sim2fitman_fmtext_o.cpp:74 129 {*movsf_internal}
     (nil))
(insn 141 140 142 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:72 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 476
(code_label 142 141 143 6 4 "" [1 uses])
(note 143 142 145 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 145 143 146 6 (set (reg:SI 0 ax [476])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:72 90 {*movsi_internal}
     (nil))
(insn 146 145 147 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [476])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32]))) sim2fitman_fmtext_o.cpp:72 7 {*cmpsi_1}
     (nil))
(jump_insn 147 146 148 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) sim2fitman_fmtext_o.cpp:72 596 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138 139 140 141 142 143 144 145 146 147 148 149 477 478 479 480 481 482 483 484 485
(note 148 147 149 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 149 148 150 7 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 150 149 151 7 (set (reg:DI 0 ax [478])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [477])
                (const_int 24 [0x18])) [0 infile_struct_94(D)->hdr_offset+0 S8 A64])) sim2fitman_fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 151 150 152 7 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
        (reg:DI 0 ax [478])) sim2fitman_fmtext_o.cpp:78 89 {*movdi_internal}
     (nil))
(insn 152 151 153 7 (set (reg:SI 0 ax [479])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:84 90 {*movsi_internal}
     (nil))
(insn 153 152 867 7 (set (reg:DI 0 ax [orig:136 D.6028 ] [136])
        (sign_extend:DI (reg:SI 0 ax [479]))) sim2fitman_fmtext_o.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 867 153 154 7 (set (reg:DI 0 ax [orig:137 D.6028 ] [137])
        (reg:DI 0 ax [orig:136 D.6028 ] [136])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 154 867 868 7 (parallel [
            (set (reg:DI 0 ax [orig:137 D.6028 ] [137])
                (ashift:DI (reg:DI 0 ax [orig:137 D.6028 ] [137])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 497 {*ashldi3_1}
     (nil))
(insn 868 154 155 7 (set (reg:DI 1 dx [orig:137 D.6028 ] [137])
        (reg:DI 0 ax [orig:137 D.6028 ] [137])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 155 868 156 7 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 156 155 157 7 (parallel [
            (set (reg/f:DI 0 ax [orig:138 D.6030 ] [138])
                (plus:DI (reg/f:DI 0 ax [480])
                    (reg:DI 1 dx [orig:137 D.6028 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.6028 ] [137]))
        (nil)))
(insn 157 156 158 7 (set (reg:DI 1 dx [orig:139 D.6031 ] [139])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:138 D.6030 ] [138])
                (const_int 24 [0x18])) [0 _98->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 158 157 159 7 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:84 90 {*movsi_internal}
     (nil))
(insn 159 158 869 7 (set (reg:DI 0 ax [orig:140 D.6028 ] [140])
        (sign_extend:DI (reg:SI 0 ax [481]))) sim2fitman_fmtext_o.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 869 159 160 7 (set (reg:DI 0 ax [orig:141 D.6028 ] [141])
        (reg:DI 0 ax [orig:140 D.6028 ] [140])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 160 869 870 7 (parallel [
            (set (reg:DI 0 ax [orig:141 D.6028 ] [141])
                (ashift:DI (reg:DI 0 ax [orig:141 D.6028 ] [141])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 497 {*ashldi3_1}
     (nil))
(insn 870 160 161 7 (set (reg:DI 2 cx [orig:141 D.6028 ] [141])
        (reg:DI 0 ax [orig:141 D.6028 ] [141])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 161 870 162 7 (set (reg/f:DI 0 ax [482])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 162 161 163 7 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.6030 ] [142])
                (plus:DI (reg/f:DI 0 ax [482])
                    (reg:DI 2 cx [orig:141 D.6028 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:141 D.6028 ] [141]))
        (nil)))
(insn 163 162 164 7 (set (reg:DI 0 ax [orig:143 D.6031 ] [143])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:142 D.6030 ] [142])
                (const_int 16 [0x10])) [0 _102->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:84 89 {*movdi_internal}
     (nil))
(insn 164 163 165 7 (parallel [
            (set (reg:DI 1 dx [orig:144 D.6031 ] [144])
                (mult:DI (reg:DI 1 dx [orig:139 D.6031 ] [139])
                    (reg:DI 0 ax [orig:143 D.6031 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:84 307 {*muldi3_1}
     (nil))
(insn 165 164 166 7 (set (reg:SI 0 ax [483])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:85 90 {*movsi_internal}
     (nil))
(insn 166 165 871 7 (set (reg:DI 0 ax [orig:145 D.6028 ] [145])
        (sign_extend:DI (reg:SI 0 ax [483]))) sim2fitman_fmtext_o.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 871 166 167 7 (set (reg:DI 0 ax [orig:146 D.6028 ] [146])
        (reg:DI 0 ax [orig:145 D.6028 ] [145])) sim2fitman_fmtext_o.cpp:85 89 {*movdi_internal}
     (nil))
(insn 167 871 872 7 (parallel [
            (set (reg:DI 0 ax [orig:146 D.6028 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:146 D.6028 ] [146])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:85 497 {*ashldi3_1}
     (nil))
(insn 872 167 168 7 (set (reg:DI 2 cx [orig:146 D.6028 ] [146])
        (reg:DI 0 ax [orig:146 D.6028 ] [146])) sim2fitman_fmtext_o.cpp:85 89 {*movdi_internal}
     (nil))
(insn 168 872 169 7 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:85 89 {*movdi_internal}
     (nil))
(insn 169 168 170 7 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6038 ] [147])
                (plus:DI (reg/f:DI 0 ax [484])
                    (reg:DI 2 cx [orig:146 D.6028 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:85 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (reg:DI 2 cx [orig:146 D.6028 ] [146]))
        (nil)))
(insn 170 169 171 7 (set (reg:SI 0 ax [orig:148 D.6027 ] [148])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:147 D.6038 ] [147])
                (const_int 4 [0x4])) [0 _107->num_unsup_sets+0 S4 A32])) sim2fitman_fmtext_o.cpp:85 90 {*movsi_internal}
     (nil))
(insn 171 170 172 7 (set (reg:DI 0 ax [orig:149 D.6031 ] [149])
        (sign_extend:DI (reg:SI 0 ax [orig:148 D.6027 ] [148]))) sim2fitman_fmtext_o.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 172 171 173 7 (parallel [
            (set (reg:DI 0 ax [485])
                (mult:DI (reg:DI 0 ax [orig:149 D.6031 ] [149])
                    (reg:DI 1 dx [orig:144 D.6031 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:85 307 {*muldi3_1}
     (nil))
(insn 173 172 174 7 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])
        (reg:DI 0 ax [485])) sim2fitman_fmtext_o.cpp:85 89 {*movdi_internal}
     (nil))
(insn 174 173 175 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:90 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 175 174 176 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 207)
            (pc))) sim2fitman_fmtext_o.cpp:90 596 {*jcc_1}
     (nil)
 -> 207)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 150 151 152 153 154 155 156 157 158 159 160 161 486 487 488 489 490 491 492 493 494 495
(note 176 175 177 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 8 (set (reg/f:DI 0 ax [486])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 178 177 179 8 (set (reg:DI 0 ax [487])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [486])
                (const_int 24 [0x18])) [0 infile_struct_94(D)->hdr_offset+0 S8 A64])) sim2fitman_fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 179 178 180 8 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
        (reg:DI 0 ax [487])) sim2fitman_fmtext_o.cpp:93 89 {*movdi_internal}
     (nil))
(insn 180 179 181 8 (set (reg:SI 0 ax [488])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:96 90 {*movsi_internal}
     (nil))
(insn 181 180 182 8 (set (reg:DI 0 ax [orig:150 D.6028 ] [150])
        (sign_extend:DI (reg:SI 0 ax [488]))) sim2fitman_fmtext_o.cpp:96 142 {*extendsidi2_rex64}
     (nil))
(insn 182 181 183 8 (parallel [
            (set (reg:DI 1 dx [orig:151 D.6028 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.6028 ] [150])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:96 497 {*ashldi3_1}
     (nil))
(insn 183 182 184 8 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(insn 184 183 185 8 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.6039 ] [152])
                (plus:DI (reg/f:DI 0 ax [489])
                    (reg:DI 1 dx [orig:151 D.6028 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:96 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.6028 ] [151]))
        (nil)))
(insn 185 184 186 8 (set (reg/f:DI 0 ax [orig:153 D.6040 ] [153])
        (mem/f:DI (reg/f:DI 0 ax [orig:152 D.6039 ] [152]) [0 *_115+0 S8 A64])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(insn 186 185 187 8 (set (reg:DI 2 cx [490])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(insn 187 186 188 8 (set (reg:SI 1 dx)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:96 90 {*movsi_internal}
     (nil))
(insn 188 187 189 8 (set (reg:DI 4 si)
        (reg:DI 2 cx [490])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(insn 189 188 190 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:153 D.6040 ] [153])) sim2fitman_fmtext_o.cpp:96 89 {*movdi_internal}
     (nil))
(call_insn 190 189 191 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b9d76b9c100 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:96 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 191 190 192 8 (set (reg:SI 0 ax [491])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:102 90 {*movsi_internal}
     (nil))
(insn 192 191 873 8 (set (reg:DI 0 ax [orig:154 D.6028 ] [154])
        (sign_extend:DI (reg:SI 0 ax [491]))) sim2fitman_fmtext_o.cpp:102 142 {*extendsidi2_rex64}
     (nil))
(insn 873 192 193 8 (set (reg:DI 0 ax [orig:155 D.6028 ] [155])
        (reg:DI 0 ax [orig:154 D.6028 ] [154])) sim2fitman_fmtext_o.cpp:102 89 {*movdi_internal}
     (nil))
(insn 193 873 874 8 (parallel [
            (set (reg:DI 0 ax [orig:155 D.6028 ] [155])
                (ashift:DI (reg:DI 0 ax [orig:155 D.6028 ] [155])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:102 497 {*ashldi3_1}
     (nil))
(insn 874 193 194 8 (set (reg:DI 1 dx [orig:155 D.6028 ] [155])
        (reg:DI 0 ax [orig:155 D.6028 ] [155])) sim2fitman_fmtext_o.cpp:102 89 {*movdi_internal}
     (nil))
(insn 194 874 195 8 (set (reg/f:DI 0 ax [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:102 89 {*movdi_internal}
     (nil))
(insn 195 194 196 8 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.6038 ] [156])
                (plus:DI (reg/f:DI 0 ax [492])
                    (reg:DI 1 dx [orig:155 D.6028 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:102 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.6028 ] [155]))
        (nil)))
(insn 196 195 197 8 (set (reg:SI 1 dx [orig:157 D.6027 ] [157])
        (mem/j:SI (reg/f:DI 0 ax [orig:156 D.6038 ] [156]) [0 _119->num_datasets+0 S4 A64])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(insn 197 196 198 8 (set (reg:SI 0 ax [493])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(insn 198 197 875 8 (set (reg:DI 0 ax [orig:158 D.6028 ] [158])
        (sign_extend:DI (reg:SI 0 ax [493]))) sim2fitman_fmtext_o.cpp:103 142 {*extendsidi2_rex64}
     (nil))
(insn 875 198 199 8 (set (reg:DI 0 ax [orig:159 D.6028 ] [159])
        (reg:DI 0 ax [orig:158 D.6028 ] [158])) sim2fitman_fmtext_o.cpp:103 89 {*movdi_internal}
     (nil))
(insn 199 875 876 8 (parallel [
            (set (reg:DI 0 ax [orig:159 D.6028 ] [159])
                (ashift:DI (reg:DI 0 ax [orig:159 D.6028 ] [159])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:103 497 {*ashldi3_1}
     (nil))
(insn 876 199 200 8 (set (reg:DI 2 cx [orig:159 D.6028 ] [159])
        (reg:DI 0 ax [orig:159 D.6028 ] [159])) sim2fitman_fmtext_o.cpp:103 89 {*movdi_internal}
     (nil))
(insn 200 876 201 8 (set (reg/f:DI 0 ax [494])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:103 89 {*movdi_internal}
     (nil))
(insn 201 200 202 8 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.6038 ] [160])
                (plus:DI (reg/f:DI 0 ax [494])
                    (reg:DI 2 cx [orig:159 D.6028 ] [159])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:103 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (reg:DI 2 cx [orig:159 D.6028 ] [159]))
        (nil)))
(insn 202 201 203 8 (set (reg:SI 0 ax [orig:161 D.6027 ] [161])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:160 D.6038 ] [160])
                (const_int 4 [0x4])) [0 _123->num_unsup_sets+0 S4 A32])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(insn 203 202 878 8 (parallel [
            (set (reg:SI 1 dx [495])
                (minus:SI (reg:SI 1 dx [495])
                    (reg:SI 0 ax [orig:161 D.6027 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:103 263 {*subsi_1}
     (nil))
(insn 878 203 204 8 (set (reg:SI 0 ax [495])
        (reg:SI 1 dx [495])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(insn 204 878 836 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [495])) sim2fitman_fmtext_o.cpp:103 90 {*movsi_internal}
     (nil))
(jump_insn 836 204 837 8 (set (pc)
        (label_ref 231)) 636 {jump}
     (nil)
 -> 231)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 837 836 207)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 162 163 164 165 166 167 168 169 496 497 498 499 500 501 502 503
(code_label 207 837 208 9 6 "" [1 uses])
(note 208 207 209 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 210 9 (set (reg/f:DI 0 ax [496])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 210 209 211 9 (parallel [
            (set (reg/f:DI 0 ax [orig:162 D.6038 ] [162])
                (plus:DI (reg/f:DI 0 ax [496])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:113 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (const_int 32 [0x20]))
        (nil)))
(insn 211 210 212 9 (set (reg:DI 0 ax [497])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:162 D.6038 ] [162])
                (const_int 24 [0x18])) [0 _126->hdr_offset+0 S8 A64])) sim2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 212 211 213 9 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
        (reg:DI 0 ax [497])) sim2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 213 212 214 9 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:119 90 {*movsi_internal}
     (nil))
(insn 214 213 215 9 (set (reg:DI 0 ax [orig:163 D.6028 ] [163])
        (sign_extend:DI (reg:SI 0 ax [498]))) sim2fitman_fmtext_o.cpp:119 142 {*extendsidi2_rex64}
     (nil))
(insn 215 214 216 9 (parallel [
            (set (reg:DI 1 dx [orig:164 D.6028 ] [164])
                (ashift:DI (reg:DI 0 ax [orig:163 D.6028 ] [163])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:119 497 {*ashldi3_1}
     (nil))
(insn 216 215 217 9 (set (reg/f:DI 0 ax [499])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(insn 217 216 218 9 (parallel [
            (set (reg/f:DI 0 ax [orig:165 D.6039 ] [165])
                (plus:DI (reg/f:DI 0 ax [499])
                    (reg:DI 1 dx [orig:164 D.6028 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:119 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:164 D.6028 ] [164]))
        (nil)))
(insn 218 217 219 9 (set (reg/f:DI 0 ax [orig:166 D.6040 ] [166])
        (mem/f:DI (reg/f:DI 0 ax [orig:165 D.6039 ] [165]) [0 *_130+0 S8 A64])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(insn 219 218 220 9 (set (reg:DI 2 cx [500])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(insn 220 219 221 9 (set (reg:SI 1 dx)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:119 90 {*movsi_internal}
     (nil))
(insn 221 220 222 9 (set (reg:DI 4 si)
        (reg:DI 2 cx [500])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(insn 222 221 223 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:166 D.6040 ] [166])) sim2fitman_fmtext_o.cpp:119 89 {*movdi_internal}
     (nil))
(call_insn 223 222 224 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b9d76b9c100 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:119 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 224 223 225 9 (set (reg:SI 0 ax [501])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 225 224 879 9 (set (reg:DI 0 ax [orig:167 D.6028 ] [167])
        (sign_extend:DI (reg:SI 0 ax [501]))) sim2fitman_fmtext_o.cpp:124 142 {*extendsidi2_rex64}
     (nil))
(insn 879 225 226 9 (set (reg:DI 0 ax [orig:168 D.6028 ] [168])
        (reg:DI 0 ax [orig:167 D.6028 ] [167])) sim2fitman_fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 226 879 880 9 (parallel [
            (set (reg:DI 0 ax [orig:168 D.6028 ] [168])
                (ashift:DI (reg:DI 0 ax [orig:168 D.6028 ] [168])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:124 497 {*ashldi3_1}
     (nil))
(insn 880 226 227 9 (set (reg:DI 1 dx [orig:168 D.6028 ] [168])
        (reg:DI 0 ax [orig:168 D.6028 ] [168])) sim2fitman_fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 227 880 228 9 (set (reg/f:DI 0 ax [502])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 infile_struct+0 S8 A64])) sim2fitman_fmtext_o.cpp:124 89 {*movdi_internal}
     (nil))
(insn 228 227 229 9 (parallel [
            (set (reg/f:DI 0 ax [orig:169 D.6038 ] [169])
                (plus:DI (reg/f:DI 0 ax [502])
                    (reg:DI 1 dx [orig:168 D.6028 ] [168])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:124 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 40 [0x28])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:168 D.6028 ] [168]))
        (nil)))
(insn 229 228 230 9 (set (reg:SI 0 ax [503])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:169 D.6038 ] [169])
                (const_int 4 [0x4])) [0 _134->num_unsup_sets+0 S4 A32])) sim2fitman_fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
(insn 230 229 231 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [503])) sim2fitman_fmtext_o.cpp:124 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 231 230 232 10 7 "" [1 uses])
(note 232 231 233 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 838 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:133 90 {*movsi_internal}
     (nil))
(jump_insn 838 233 839 10 (set (pc)
        (label_ref 799)) sim2fitman_fmtext_o.cpp:133 636 {jump}
     (nil)
 -> 799)
;;  succ:       50 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 839 838 801)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 170 171 172 173 174 175 504 505
(code_label 801 839 236 11 32 "" [1 uses])
(note 236 801 237 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 237 236 238 11 (set (reg:SI 0 ax [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:146 90 {*movsi_internal}
     (nil))
(insn 238 237 881 11 (set (reg:DI 0 ax [orig:170 D.6028 ] [170])
        (sign_extend:DI (reg:SI 0 ax [504]))) sim2fitman_fmtext_o.cpp:146 142 {*extendsidi2_rex64}
     (nil))
(insn 881 238 239 11 (set (reg:DI 0 ax [orig:171 D.6028 ] [171])
        (reg:DI 0 ax [orig:170 D.6028 ] [170])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 239 881 882 11 (parallel [
            (set (reg:DI 0 ax [orig:171 D.6028 ] [171])
                (ashift:DI (reg:DI 0 ax [orig:171 D.6028 ] [171])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:146 497 {*ashldi3_1}
     (nil))
(insn 882 239 240 11 (set (reg:DI 1 dx [orig:171 D.6028 ] [171])
        (reg:DI 0 ax [orig:171 D.6028 ] [171])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 240 882 241 11 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 241 240 242 11 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.6030 ] [172])
                (plus:DI (reg/f:DI 0 ax [505])
                    (reg:DI 1 dx [orig:171 D.6028 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:146 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:171 D.6028 ] [171]))
        (nil)))
(insn 242 241 243 11 (set (reg:DI 0 ax [orig:173 D.6031 ] [173])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:172 D.6030 ] [172])
                (const_int 24 [0x18])) [0 _139->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 243 242 244 11 (set (reg:DI 0 ax [orig:174 D.6041 ] [174])
        (reg:DI 0 ax [orig:173 D.6031 ] [173])) sim2fitman_fmtext_o.cpp:146 89 {*movdi_internal}
     (nil))
(insn 244 243 245 11 (parallel [
            (set (reg:DI 0 ax [orig:175 D.6041 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 D.6041 ] [174])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:146 221 {*adddi_1}
     (nil))
(insn 245 244 246 11 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:175 D.6041 ] [175])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:146 8 {*cmpdi_1}
     (nil))
(jump_insn 246 245 247 11 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 418)
            (pc))) sim2fitman_fmtext_o.cpp:146 596 {*jcc_1}
     (nil)
 -> 418)
;;  succ:       12 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 247 246 248 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 249 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:157 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 249 248 250 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) sim2fitman_fmtext_o.cpp:157 596 {*jcc_1}
     (nil)
 -> 286)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 506 507 508 509 510 511 512 513 514 515
(note 250 249 251 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 13 (set (reg:SI 0 ax [506])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:159 90 {*movsi_internal}
     (nil))
(insn 252 251 253 13 (set (reg:DI 0 ax [orig:176 D.6028 ] [176])
        (sign_extend:DI (reg:SI 0 ax [506]))) sim2fitman_fmtext_o.cpp:159 142 {*extendsidi2_rex64}
     (nil))
(insn 253 252 254 13 (parallel [
            (set (reg:DI 1 dx [orig:177 D.6028 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.6028 ] [176])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 497 {*ashldi3_1}
     (nil))
(insn 254 253 255 13 (set (reg/f:DI 0 ax [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 255 254 256 13 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.6039 ] [178])
                (plus:DI (reg/f:DI 0 ax [507])
                    (reg:DI 1 dx [orig:177 D.6028 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.6028 ] [177]))
        (nil)))
(insn 256 255 257 13 (set (reg/f:DI 1 dx [orig:179 D.6040 ] [179])
        (mem/f:DI (reg/f:DI 0 ax [orig:178 D.6039 ] [178]) [0 *_145+0 S8 A64])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 257 256 258 13 (set (reg:SI 0 ax [508])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:159 90 {*movsi_internal}
     (nil))
(insn 258 257 883 13 (set (reg:DI 0 ax [orig:180 D.6028 ] [180])
        (sign_extend:DI (reg:SI 0 ax [508]))) sim2fitman_fmtext_o.cpp:159 142 {*extendsidi2_rex64}
     (nil))
(insn 883 258 259 13 (set (reg:DI 0 ax [orig:181 D.6028 ] [181])
        (reg:DI 0 ax [orig:180 D.6028 ] [180])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 259 883 884 13 (parallel [
            (set (reg:DI 0 ax [orig:181 D.6028 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:181 D.6028 ] [181])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 497 {*ashldi3_1}
     (nil))
(insn 884 259 260 13 (set (reg:DI 2 cx [orig:181 D.6028 ] [181])
        (reg:DI 0 ax [orig:181 D.6028 ] [181])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 260 884 261 13 (set (reg/f:DI 0 ax [509])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 261 260 262 13 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.6030 ] [182])
                (plus:DI (reg/f:DI 0 ax [509])
                    (reg:DI 2 cx [orig:181 D.6028 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:181 D.6028 ] [181]))
        (nil)))
(insn 262 261 263 13 (set (reg:DI 0 ax [orig:183 D.6031 ] [183])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:182 D.6030 ] [182])
                (const_int 16 [0x10])) [0 _149->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 263 262 264 13 (parallel [
            (set (reg:DI 0 ax [orig:184 D.6031 ] [184])
                (ashift:DI (reg:DI 0 ax [orig:183 D.6031 ] [183])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:159 497 {*ashldi3_1}
     (nil))
(insn 264 263 265 13 (set (reg:DI 5 di [orig:185 D.6028 ] [185])
        (reg:DI 0 ax [orig:184 D.6031 ] [184])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 265 264 266 13 (set (reg:SI 0 ax [510])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:158 90 {*movsi_internal}
     (nil))
(insn 266 265 885 13 (set (reg:DI 0 ax [orig:186 D.6028 ] [186])
        (sign_extend:DI (reg:SI 0 ax [510]))) sim2fitman_fmtext_o.cpp:158 142 {*extendsidi2_rex64}
     (nil))
(insn 885 266 267 13 (set (reg:DI 0 ax [orig:187 D.6028 ] [187])
        (reg:DI 0 ax [orig:186 D.6028 ] [186])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 267 885 886 13 (parallel [
            (set (reg:DI 0 ax [orig:187 D.6028 ] [187])
                (ashift:DI (reg:DI 0 ax [orig:187 D.6028 ] [187])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 497 {*ashldi3_1}
     (nil))
(insn 886 267 268 13 (set (reg:DI 2 cx [orig:187 D.6028 ] [187])
        (reg:DI 0 ax [orig:187 D.6028 ] [187])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 268 886 269 13 (set (reg/f:DI 0 ax [511])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 269 268 270 13 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.6030 ] [188])
                (plus:DI (reg/f:DI 0 ax [511])
                    (reg:DI 2 cx [orig:187 D.6028 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:187 D.6028 ] [187]))
        (nil)))
(insn 270 269 887 13 (set (reg:DI 0 ax [orig:189 D.6031 ] [189])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:188 D.6030 ] [188])
                (const_int 24 [0x18])) [0 _155->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 887 270 271 13 (set (reg:DI 2 cx [512])
        (reg:DI 0 ax [orig:189 D.6031 ] [189])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 271 887 272 13 (parallel [
            (set (reg:DI 2 cx [512])
                (lshiftrt:DI (reg:DI 2 cx [512])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 531 {*lshrdi3_1}
     (nil))
(insn 272 271 273 13 (parallel [
            (set (reg:DI 0 ax [513])
                (plus:DI (reg:DI 0 ax [orig:189 D.6031 ] [189])
                    (reg:DI 2 cx [512])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 221 {*adddi_1}
     (nil))
(insn 273 272 274 13 (parallel [
            (set (reg:DI 0 ax [514])
                (ashiftrt:DI (reg:DI 0 ax [513])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:158 532 {*ashrdi3_1}
     (nil))
(insn 274 273 275 13 (set (reg:DI 0 ax [orig:190 D.6031 ] [190])
        (reg:DI 0 ax [514])) sim2fitman_fmtext_o.cpp:158 89 {*movdi_internal}
     (nil))
(insn 275 274 276 13 (set (reg:DI 4 si [orig:191 D.6028 ] [191])
        (reg:DI 0 ax [orig:190 D.6031 ] [190])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 276 275 277 13 (set (reg:DI 0 ax [515])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 277 276 278 13 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:179 D.6040 ] [179])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 278 277 280 13 (set (reg:DI 1 dx)
        (reg:DI 5 di [orig:185 D.6028 ] [185])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 280 278 281 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [515])) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(call_insn 281 280 282 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b9d76b95800 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:159 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 282 281 283 13 (set (reg:DI 0 ax [orig:192 D.6028 ] [192])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:159 89 {*movdi_internal}
     (nil))
(insn 283 282 840 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 k+0 S4 A32])
        (reg:SI 0 ax [orig:192 D.6028 ] [192])) sim2fitman_fmtext_o.cpp:159 90 {*movsi_internal}
     (nil))
(jump_insn 840 283 841 13 (set (pc)
        (label_ref 324)) 636 {jump}
     (nil)
 -> 324)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 841 840 286)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 286 841 287 14 10 "" [1 uses])
(note 287 286 288 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:160 7 {*cmpsi_1}
     (nil))
(jump_insn 289 288 290 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 324)
            (pc))) sim2fitman_fmtext_o.cpp:160 596 {*jcc_1}
     (nil)
 -> 324)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 516 517 518 519 520 521 522 523 524 525
(note 290 289 291 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 291 290 292 15 (set (reg:SI 0 ax [516])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
(insn 292 291 293 15 (set (reg:DI 0 ax [orig:193 D.6028 ] [193])
        (sign_extend:DI (reg:SI 0 ax [516]))) sim2fitman_fmtext_o.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 293 292 294 15 (parallel [
            (set (reg:DI 1 dx [orig:194 D.6028 ] [194])
                (ashift:DI (reg:DI 0 ax [orig:193 D.6028 ] [193])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 497 {*ashldi3_1}
     (nil))
(insn 294 293 295 15 (set (reg/f:DI 0 ax [517])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 295 294 296 15 (parallel [
            (set (reg/f:DI 0 ax [orig:195 D.6039 ] [195])
                (plus:DI (reg/f:DI 0 ax [517])
                    (reg:DI 1 dx [orig:194 D.6028 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:194 D.6028 ] [194]))
        (nil)))
(insn 296 295 297 15 (set (reg/f:DI 1 dx [orig:196 D.6040 ] [196])
        (mem/f:DI (reg/f:DI 0 ax [orig:195 D.6039 ] [195]) [0 *_164+0 S8 A64])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 297 296 298 15 (set (reg:SI 0 ax [518])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
(insn 298 297 889 15 (set (reg:DI 0 ax [orig:197 D.6028 ] [197])
        (sign_extend:DI (reg:SI 0 ax [518]))) sim2fitman_fmtext_o.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 889 298 299 15 (set (reg:DI 0 ax [orig:198 D.6028 ] [198])
        (reg:DI 0 ax [orig:197 D.6028 ] [197])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 299 889 890 15 (parallel [
            (set (reg:DI 0 ax [orig:198 D.6028 ] [198])
                (ashift:DI (reg:DI 0 ax [orig:198 D.6028 ] [198])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 497 {*ashldi3_1}
     (nil))
(insn 890 299 300 15 (set (reg:DI 2 cx [orig:198 D.6028 ] [198])
        (reg:DI 0 ax [orig:198 D.6028 ] [198])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 300 890 301 15 (set (reg/f:DI 0 ax [519])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 301 300 302 15 (parallel [
            (set (reg/f:DI 0 ax [orig:199 D.6030 ] [199])
                (plus:DI (reg/f:DI 0 ax [519])
                    (reg:DI 2 cx [orig:198 D.6028 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:198 D.6028 ] [198]))
        (nil)))
(insn 302 301 303 15 (set (reg:DI 0 ax [orig:200 D.6031 ] [200])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:199 D.6030 ] [199])
                (const_int 16 [0x10])) [0 _168->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 303 302 304 15 (parallel [
            (set (reg:DI 0 ax [orig:201 D.6031 ] [201])
                (ashift:DI (reg:DI 0 ax [orig:200 D.6031 ] [200])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:162 497 {*ashldi3_1}
     (nil))
(insn 304 303 305 15 (set (reg:DI 5 di [orig:202 D.6028 ] [202])
        (reg:DI 0 ax [orig:201 D.6031 ] [201])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 305 304 306 15 (set (reg:SI 0 ax [520])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:161 90 {*movsi_internal}
     (nil))
(insn 306 305 891 15 (set (reg:DI 0 ax [orig:203 D.6028 ] [203])
        (sign_extend:DI (reg:SI 0 ax [520]))) sim2fitman_fmtext_o.cpp:161 142 {*extendsidi2_rex64}
     (nil))
(insn 891 306 307 15 (set (reg:DI 0 ax [orig:204 D.6028 ] [204])
        (reg:DI 0 ax [orig:203 D.6028 ] [203])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 307 891 892 15 (parallel [
            (set (reg:DI 0 ax [orig:204 D.6028 ] [204])
                (ashift:DI (reg:DI 0 ax [orig:204 D.6028 ] [204])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 497 {*ashldi3_1}
     (nil))
(insn 892 307 308 15 (set (reg:DI 2 cx [orig:204 D.6028 ] [204])
        (reg:DI 0 ax [orig:204 D.6028 ] [204])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 308 892 309 15 (set (reg/f:DI 0 ax [521])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 309 308 310 15 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.6030 ] [205])
                (plus:DI (reg/f:DI 0 ax [521])
                    (reg:DI 2 cx [orig:204 D.6028 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:204 D.6028 ] [204]))
        (nil)))
(insn 310 309 893 15 (set (reg:DI 0 ax [orig:206 D.6031 ] [206])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:205 D.6030 ] [205])
                (const_int 24 [0x18])) [0 _174->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 893 310 311 15 (set (reg:DI 2 cx [522])
        (reg:DI 0 ax [orig:206 D.6031 ] [206])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 311 893 312 15 (parallel [
            (set (reg:DI 2 cx [522])
                (lshiftrt:DI (reg:DI 2 cx [522])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 531 {*lshrdi3_1}
     (nil))
(insn 312 311 313 15 (parallel [
            (set (reg:DI 0 ax [523])
                (plus:DI (reg:DI 0 ax [orig:206 D.6031 ] [206])
                    (reg:DI 2 cx [522])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 221 {*adddi_1}
     (nil))
(insn 313 312 314 15 (parallel [
            (set (reg:DI 0 ax [524])
                (ashiftrt:DI (reg:DI 0 ax [523])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:161 532 {*ashrdi3_1}
     (nil))
(insn 314 313 315 15 (set (reg:DI 0 ax [orig:207 D.6031 ] [207])
        (reg:DI 0 ax [524])) sim2fitman_fmtext_o.cpp:161 89 {*movdi_internal}
     (nil))
(insn 315 314 316 15 (set (reg:DI 4 si [orig:208 D.6028 ] [208])
        (reg:DI 0 ax [orig:207 D.6031 ] [207])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 316 315 317 15 (set (reg:DI 0 ax [525])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 temp_double2+0 S8 A64])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 317 316 318 15 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:196 D.6040 ] [196])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 318 317 320 15 (set (reg:DI 1 dx)
        (reg:DI 5 di [orig:202 D.6028 ] [202])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 320 318 321 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [525])) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(call_insn 321 320 322 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b9d76b95800 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:162 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 322 321 323 15 (set (reg:DI 0 ax [orig:209 D.6028 ] [209])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 323 322 324 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 k+0 S4 A32])
        (reg:SI 0 ax [orig:209 D.6028 ] [209])) sim2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;;              14
;;              13 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 210 211 212 213 214 215 526 527 528
(code_label 324 323 325 16 11 "" [2 uses])
(note 325 324 326 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 327 16 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 k+0 S4 A32])) sim2fitman_fmtext_o.cpp:173 90 {*movsi_internal}
     (nil))
(insn 327 326 328 16 (set (reg:DI 0 ax [orig:210 D.6031 ] [210])
        (sign_extend:DI (reg:SI 0 ax [526]))) sim2fitman_fmtext_o.cpp:173 142 {*extendsidi2_rex64}
     (nil))
(insn 328 327 329 16 (set (reg:SI 1 dx [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:173 90 {*movsi_internal}
     (nil))
(insn 329 328 895 16 (set (reg:DI 1 dx [orig:211 D.6028 ] [211])
        (sign_extend:DI (reg:SI 1 dx [527]))) sim2fitman_fmtext_o.cpp:173 142 {*extendsidi2_rex64}
     (nil))
(insn 895 329 330 16 (set (reg:DI 2 cx [orig:212 D.6028 ] [212])
        (reg:DI 1 dx [orig:211 D.6028 ] [211])) sim2fitman_fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 330 895 331 16 (parallel [
            (set (reg:DI 2 cx [orig:212 D.6028 ] [212])
                (ashift:DI (reg:DI 2 cx [orig:212 D.6028 ] [212])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:173 497 {*ashldi3_1}
     (nil))
(insn 331 330 332 16 (set (reg/f:DI 1 dx [528])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 332 331 333 16 (parallel [
            (set (reg/f:DI 1 dx [orig:213 D.6030 ] [213])
                (plus:DI (reg/f:DI 1 dx [528])
                    (reg:DI 2 cx [orig:212 D.6028 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:173 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:212 D.6028 ] [212]))
        (nil)))
(insn 333 332 334 16 (set (reg:DI 1 dx [orig:214 D.6031 ] [214])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:213 D.6030 ] [213])
                (const_int 16 [0x10])) [0 _184->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:173 89 {*movdi_internal}
     (nil))
(insn 334 333 335 16 (parallel [
            (set (reg:DI 1 dx [orig:215 D.6031 ] [215])
                (ashift:DI (reg:DI 1 dx [orig:214 D.6031 ] [214])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:173 497 {*ashldi3_1}
     (nil))
(insn 335 334 336 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:210 D.6031 ] [210])
            (reg:DI 1 dx [orig:215 D.6031 ] [215]))) sim2fitman_fmtext_o.cpp:173 8 {*cmpdi_1}
     (nil))
(jump_insn 336 335 337 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 348)
            (pc))) sim2fitman_fmtext_o.cpp:173 596 {*jcc_1}
     (nil)
 -> 348)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 246 529 530 531 532
(note 337 336 338 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 338 337 339 17 (set (reg:SI 0 ax [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 339 338 897 17 (set (reg:DI 0 ax [529])
        (sign_extend:DI (reg:SI 0 ax [530]))) sim2fitman_fmtext_o.cpp:174 142 {*extendsidi2_rex64}
     (nil))
(insn 897 339 340 17 (set (reg:DI 0 ax [531])
        (reg:DI 0 ax [529])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 340 897 898 17 (parallel [
            (set (reg:DI 0 ax [531])
                (ashift:DI (reg:DI 0 ax [531])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:174 497 {*ashldi3_1}
     (nil))
(insn 898 340 341 17 (set (reg:DI 1 dx [531])
        (reg:DI 0 ax [531])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 341 898 342 17 (set (reg/f:DI 0 ax [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 342 341 343 17 (parallel [
            (set (reg/f:DI 0 ax [orig:246 D.6045 ] [246])
                (plus:DI (reg/f:DI 0 ax [532])
                    (reg:DI 1 dx [531])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:174 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 file+0 S8 A64])
            (reg:DI 1 dx [531]))
        (nil)))
(insn 343 342 344 17 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:246 D.6045 ] [246])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 344 343 345 17 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(call_insn 345 344 842 17 (call (mem:QI (symbol_ref:DI ("_Z7exit_06PP8_IO_FILEPc") [flags 0x41]  <function_decl 0x2b9d76cd0500 exit_06>) [0 exit_06 S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:174 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 842 345 843 17 (set (pc)
        (label_ref 478)) 636 {jump}
     (nil)
 -> 478)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 843 842 348)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 348 843 349 18 12 "" [1 uses])
(note 349 348 350 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 350 349 844 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
(jump_insn 844 350 845 18 (set (pc)
        (label_ref 401)) sim2fitman_fmtext_o.cpp:185 636 {jump}
     (nil)
 -> 401)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 845 844 412)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 412 845 353 19 17 "" [1 uses])
(note 353 412 354 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 354 353 355 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:187 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 355 354 356 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 375)
            (pc))) sim2fitman_fmtext_o.cpp:187 596 {*jcc_1}
     (nil)
 -> 375)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 222 223 224 225 226 227 228 229 230 231 232 233 533 534 535 536 537
(note 356 355 357 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 357 356 358 20 (set (reg:SI 0 ax [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 358 357 359 20 (set (reg:DI 0 ax [orig:222 D.6028 ] [222])
        (sign_extend:DI (reg:SI 0 ax [533]))) sim2fitman_fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 359 358 360 20 (parallel [
            (set (reg:DI 1 dx [orig:223 D.6028 ] [223])
                (ashift:DI (reg:DI 0 ax [orig:222 D.6028 ] [222])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 360 359 361 20 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 361 360 362 20 (parallel [
            (set (reg/f:DI 0 ax [orig:224 D.6034 ] [224])
                (plus:DI (reg/f:DI 0 ax [534])
                    (reg:DI 1 dx [orig:223 D.6028 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:223 D.6028 ] [223]))
        (nil)))
(insn 362 361 363 20 (set (reg/f:DI 0 ax [orig:225 D.6036 ] [225])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:224 D.6034 ] [224]) [0 _196->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 363 362 364 20 (set (reg:SI 1 dx [535])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 364 363 365 20 (set (reg:DI 1 dx [orig:226 D.6028 ] [226])
        (sign_extend:DI (reg:SI 1 dx [535]))) sim2fitman_fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 365 364 366 20 (parallel [
            (set (reg:DI 1 dx [orig:227 D.6028 ] [227])
                (ashift:DI (reg:DI 1 dx [orig:226 D.6028 ] [226])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 366 365 367 20 (parallel [
            (set (reg/f:DI 1 dx [orig:228 D.6036 ] [228])
                (plus:DI (reg:DI 1 dx [orig:227 D.6028 ] [227])
                    (reg/f:DI 0 ax [orig:225 D.6036 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 221 {*adddi_1}
     (nil))
(insn 367 366 368 20 (set (reg:SI 0 ax [536])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:190 90 {*movsi_internal}
     (nil))
(insn 368 367 369 20 (set (reg:DI 0 ax [orig:229 D.6028 ] [229])
        (sign_extend:DI (reg:SI 0 ax [536]))) sim2fitman_fmtext_o.cpp:190 142 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 20 (parallel [
            (set (reg:DI 2 cx [orig:230 D.6028 ] [230])
                (ashift:DI (reg:DI 0 ax [orig:229 D.6028 ] [229])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 497 {*ashldi3_1}
     (nil))
(insn 370 369 371 20 (set (reg/f:DI 0 ax [537])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:190 89 {*movdi_internal}
     (nil))
(insn 371 370 372 20 (parallel [
            (set (reg/f:DI 0 ax [orig:231 D.6042 ] [231])
                (plus:DI (reg/f:DI 0 ax [537])
                    (reg:DI 2 cx [orig:230 D.6028 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:190 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 temp_double+0 S8 A64])
            (reg:DI 2 cx [orig:230 D.6028 ] [230]))
        (nil)))
(insn 372 371 373 20 (set (reg:DF 21 xmm0 [orig:232 D.6043 ] [232])
        (mem:DF (reg/f:DI 0 ax [orig:231 D.6042 ] [231]) [0 *_203+0 S8 A64])) sim2fitman_fmtext_o.cpp:190 128 {*movdf_internal}
     (nil))
(insn 373 372 899 20 (set (reg:SF 23 xmm2 [orig:233 D.6044 ] [233])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:232 D.6043 ] [232]))) sim2fitman_fmtext_o.cpp:190 157 {*truncdfsf_fast_sse}
     (nil))
(insn 899 373 374 20 (set (reg:SF 0 ax [orig:233 D.6044 ] [233])
        (reg:SF 23 xmm2 [orig:233 D.6044 ] [233])) sim2fitman_fmtext_o.cpp:190 129 {*movsf_internal}
     (nil))
(insn 374 899 375 20 (set (mem:SF (reg/f:DI 1 dx [orig:228 D.6036 ] [228]) [0 *_200+0 S4 A32])
        (reg:SF 0 ax [orig:233 D.6044 ] [233])) sim2fitman_fmtext_o.cpp:190 129 {*movsf_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 375 374 376 21 15 "" [1 uses])
(note 376 375 377 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:202 7 {*cmpsi_1}
     (nil))
(jump_insn 378 377 379 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 398)
            (pc))) sim2fitman_fmtext_o.cpp:202 596 {*jcc_1}
     (nil)
 -> 398)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 234 235 236 237 238 239 240 241 242 243 244 245 538 539 540 541 542
(note 379 378 380 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 381 22 (set (reg:SI 0 ax [538])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:205 90 {*movsi_internal}
     (nil))
(insn 381 380 382 22 (set (reg:DI 0 ax [orig:234 D.6028 ] [234])
        (sign_extend:DI (reg:SI 0 ax [538]))) sim2fitman_fmtext_o.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 382 381 383 22 (parallel [
            (set (reg:DI 1 dx [orig:235 D.6028 ] [235])
                (ashift:DI (reg:DI 0 ax [orig:234 D.6028 ] [234])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 497 {*ashldi3_1}
     (nil))
(insn 383 382 384 22 (set (reg/f:DI 0 ax [539])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:205 89 {*movdi_internal}
     (nil))
(insn 384 383 385 22 (parallel [
            (set (reg/f:DI 0 ax [orig:236 D.6034 ] [236])
                (plus:DI (reg/f:DI 0 ax [539])
                    (reg:DI 1 dx [orig:235 D.6028 ] [235])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:235 D.6028 ] [235]))
        (nil)))
(insn 385 384 386 22 (set (reg/f:DI 0 ax [orig:237 D.6036 ] [237])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:236 D.6034 ] [236]) [0 _208->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:205 89 {*movdi_internal}
     (nil))
(insn 386 385 387 22 (set (reg:SI 1 dx [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:205 90 {*movsi_internal}
     (nil))
(insn 387 386 388 22 (set (reg:DI 1 dx [orig:238 D.6028 ] [238])
        (sign_extend:DI (reg:SI 1 dx [540]))) sim2fitman_fmtext_o.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 388 387 389 22 (parallel [
            (set (reg:DI 1 dx [orig:239 D.6028 ] [239])
                (ashift:DI (reg:DI 1 dx [orig:238 D.6028 ] [238])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 497 {*ashldi3_1}
     (nil))
(insn 389 388 390 22 (parallel [
            (set (reg/f:DI 1 dx [orig:240 D.6036 ] [240])
                (plus:DI (reg:DI 1 dx [orig:239 D.6028 ] [239])
                    (reg/f:DI 0 ax [orig:237 D.6036 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 221 {*adddi_1}
     (nil))
(insn 390 389 391 22 (set (reg:SI 0 ax [541])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:205 90 {*movsi_internal}
     (nil))
(insn 391 390 392 22 (set (reg:DI 0 ax [orig:241 D.6028 ] [241])
        (sign_extend:DI (reg:SI 0 ax [541]))) sim2fitman_fmtext_o.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 392 391 393 22 (parallel [
            (set (reg:DI 2 cx [orig:242 D.6028 ] [242])
                (ashift:DI (reg:DI 0 ax [orig:241 D.6028 ] [241])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 497 {*ashldi3_1}
     (nil))
(insn 393 392 394 22 (set (reg/f:DI 0 ax [542])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 temp_double2+0 S8 A64])) sim2fitman_fmtext_o.cpp:205 89 {*movdi_internal}
     (nil))
(insn 394 393 395 22 (parallel [
            (set (reg/f:DI 0 ax [orig:243 D.6042 ] [243])
                (plus:DI (reg/f:DI 0 ax [542])
                    (reg:DI 2 cx [orig:242 D.6028 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:205 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 temp_double2+0 S8 A64])
            (reg:DI 2 cx [orig:242 D.6028 ] [242]))
        (nil)))
(insn 395 394 396 22 (set (reg:DF 21 xmm0 [orig:244 D.6043 ] [244])
        (mem:DF (reg/f:DI 0 ax [orig:243 D.6042 ] [243]) [0 *_215+0 S8 A64])) sim2fitman_fmtext_o.cpp:205 128 {*movdf_internal}
     (nil))
(insn 396 395 900 22 (set (reg:SF 24 xmm3 [orig:245 D.6044 ] [245])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:244 D.6043 ] [244]))) sim2fitman_fmtext_o.cpp:205 157 {*truncdfsf_fast_sse}
     (nil))
(insn 900 396 397 22 (set (reg:SF 0 ax [orig:245 D.6044 ] [245])
        (reg:SF 24 xmm3 [orig:245 D.6044 ] [245])) sim2fitman_fmtext_o.cpp:205 129 {*movsf_internal}
     (nil))
(insn 397 900 398 22 (set (mem:SF (reg/f:DI 1 dx [orig:240 D.6036 ] [240]) [0 *_212+0 S4 A32])
        (reg:SF 0 ax [orig:245 D.6044 ] [245])) sim2fitman_fmtext_o.cpp:205 129 {*movsf_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 398 397 399 23 16 "" [1 uses])
(note 399 398 400 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 400 399 401 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:185 220 {*addsi_1}
     (nil))
;;  succ:       24 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU,DFS_BACK)
;;              18 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 216 217 218 219 220 221 543 544 545
(code_label 401 400 402 24 14 "" [1 uses])
(note 402 401 403 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 24 (set (reg:SI 0 ax [543])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
(insn 404 403 405 24 (set (reg:DI 0 ax [orig:216 D.6031 ] [216])
        (sign_extend:DI (reg:SI 0 ax [543]))) sim2fitman_fmtext_o.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 405 404 406 24 (set (reg:SI 1 dx [544])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:185 90 {*movsi_internal}
     (nil))
(insn 406 405 901 24 (set (reg:DI 1 dx [orig:217 D.6028 ] [217])
        (sign_extend:DI (reg:SI 1 dx [544]))) sim2fitman_fmtext_o.cpp:185 142 {*extendsidi2_rex64}
     (nil))
(insn 901 406 407 24 (set (reg:DI 2 cx [orig:218 D.6028 ] [218])
        (reg:DI 1 dx [orig:217 D.6028 ] [217])) sim2fitman_fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 407 901 408 24 (parallel [
            (set (reg:DI 2 cx [orig:218 D.6028 ] [218])
                (ashift:DI (reg:DI 2 cx [orig:218 D.6028 ] [218])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:185 497 {*ashldi3_1}
     (nil))
(insn 408 407 409 24 (set (reg/f:DI 1 dx [545])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 409 408 410 24 (parallel [
            (set (reg/f:DI 1 dx [orig:219 D.6030 ] [219])
                (plus:DI (reg/f:DI 1 dx [545])
                    (reg:DI 2 cx [orig:218 D.6028 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:185 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:218 D.6028 ] [218]))
        (nil)))
(insn 410 409 411 24 (set (reg:DI 1 dx [orig:220 D.6031 ] [220])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:219 D.6030 ] [219])
                (const_int 16 [0x10])) [0 _191->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:185 89 {*movdi_internal}
     (nil))
(insn 411 410 413 24 (parallel [
            (set (reg:DI 1 dx [orig:221 D.6031 ] [221])
                (ashift:DI (reg:DI 1 dx [orig:220 D.6031 ] [220])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:185 497 {*ashldi3_1}
     (nil))
(insn 413 411 414 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:216 D.6031 ] [216])
            (reg:DI 1 dx [orig:221 D.6031 ] [221]))) sim2fitman_fmtext_o.cpp:185 8 {*cmpdi_1}
     (nil))
(jump_insn 414 413 846 24 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 412)
            (pc))) sim2fitman_fmtext_o.cpp:185 596 {*jcc_1}
     (nil)
 -> 412)
;;  succ:       19
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 846 414 847 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 847 846 848 25 (set (pc)
        (label_ref 478)) 636 {jump}
     (nil)
 -> 478)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 848 847 418)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 546 547 548 549 550 551 552 553 554 555 556 557 558
(code_label 418 848 419 26 9 "" [1 uses])
(note 419 418 420 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 420 419 421 26 (set (reg:SI 0 ax [546])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:233 90 {*movsi_internal}
     (nil))
(insn 421 420 422 26 (set (reg:DI 0 ax [orig:247 D.6028 ] [247])
        (sign_extend:DI (reg:SI 0 ax [546]))) sim2fitman_fmtext_o.cpp:233 142 {*extendsidi2_rex64}
     (nil))
(insn 422 421 423 26 (parallel [
            (set (reg:DI 1 dx [orig:248 D.6028 ] [248])
                (ashift:DI (reg:DI 0 ax [orig:247 D.6028 ] [247])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 497 {*ashldi3_1}
     (nil))
(insn 423 422 424 26 (set (reg/f:DI 0 ax [547])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 424 423 425 26 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.6039 ] [249])
                (plus:DI (reg/f:DI 0 ax [547])
                    (reg:DI 1 dx [orig:248 D.6028 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:248 D.6028 ] [248]))
        (nil)))
(insn 425 424 426 26 (set (reg/f:DI 1 dx [orig:250 D.6040 ] [250])
        (mem/f:DI (reg/f:DI 0 ax [orig:249 D.6039 ] [249]) [0 *_223+0 S8 A64])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 426 425 427 26 (set (reg:SI 0 ax [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:233 90 {*movsi_internal}
     (nil))
(insn 427 426 903 26 (set (reg:DI 0 ax [orig:251 D.6028 ] [251])
        (sign_extend:DI (reg:SI 0 ax [548]))) sim2fitman_fmtext_o.cpp:233 142 {*extendsidi2_rex64}
     (nil))
(insn 903 427 428 26 (set (reg:DI 0 ax [orig:252 D.6028 ] [252])
        (reg:DI 0 ax [orig:251 D.6028 ] [251])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 428 903 904 26 (parallel [
            (set (reg:DI 0 ax [orig:252 D.6028 ] [252])
                (ashift:DI (reg:DI 0 ax [orig:252 D.6028 ] [252])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 497 {*ashldi3_1}
     (nil))
(insn 904 428 429 26 (set (reg:DI 2 cx [orig:252 D.6028 ] [252])
        (reg:DI 0 ax [orig:252 D.6028 ] [252])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 429 904 430 26 (set (reg/f:DI 0 ax [549])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 430 429 431 26 (parallel [
            (set (reg/f:DI 0 ax [orig:253 D.6030 ] [253])
                (plus:DI (reg/f:DI 0 ax [549])
                    (reg:DI 2 cx [orig:252 D.6028 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:252 D.6028 ] [252]))
        (nil)))
(insn 431 430 432 26 (set (reg:DI 0 ax [orig:254 D.6031 ] [254])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:253 D.6030 ] [253])
                (const_int 16 [0x10])) [0 _227->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 432 431 433 26 (parallel [
            (set (reg:DI 0 ax [orig:255 D.6031 ] [255])
                (ashift:DI (reg:DI 0 ax [orig:254 D.6031 ] [254])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:233 497 {*ashldi3_1}
     (nil))
(insn 433 432 434 26 (set (reg:DI 5 di [orig:256 D.6028 ] [256])
        (reg:DI 0 ax [orig:255 D.6031 ] [255])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 434 433 435 26 (set (reg:SI 0 ax [550])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:232 90 {*movsi_internal}
     (nil))
(insn 435 434 905 26 (set (reg:DI 0 ax [orig:257 D.6028 ] [257])
        (sign_extend:DI (reg:SI 0 ax [550]))) sim2fitman_fmtext_o.cpp:232 142 {*extendsidi2_rex64}
     (nil))
(insn 905 435 436 26 (set (reg:DI 0 ax [orig:258 D.6028 ] [258])
        (reg:DI 0 ax [orig:257 D.6028 ] [257])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 436 905 906 26 (parallel [
            (set (reg:DI 0 ax [orig:258 D.6028 ] [258])
                (ashift:DI (reg:DI 0 ax [orig:258 D.6028 ] [258])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 497 {*ashldi3_1}
     (nil))
(insn 906 436 437 26 (set (reg:DI 2 cx [orig:258 D.6028 ] [258])
        (reg:DI 0 ax [orig:258 D.6028 ] [258])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 437 906 438 26 (set (reg/f:DI 0 ax [551])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 438 437 439 26 (parallel [
            (set (reg/f:DI 0 ax [orig:259 D.6030 ] [259])
                (plus:DI (reg/f:DI 0 ax [551])
                    (reg:DI 2 cx [orig:258 D.6028 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:258 D.6028 ] [258]))
        (nil)))
(insn 439 438 907 26 (set (reg:DI 0 ax [orig:260 D.6031 ] [260])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:259 D.6030 ] [259])
                (const_int 24 [0x18])) [0 _233->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 907 439 440 26 (set (reg:DI 2 cx [552])
        (reg:DI 0 ax [orig:260 D.6031 ] [260])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 440 907 441 26 (parallel [
            (set (reg:DI 2 cx [552])
                (lshiftrt:DI (reg:DI 2 cx [552])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 531 {*lshrdi3_1}
     (nil))
(insn 441 440 442 26 (parallel [
            (set (reg:DI 0 ax [553])
                (plus:DI (reg:DI 0 ax [orig:260 D.6031 ] [260])
                    (reg:DI 2 cx [552])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 221 {*adddi_1}
     (nil))
(insn 442 441 443 26 (parallel [
            (set (reg:DI 0 ax [554])
                (ashiftrt:DI (reg:DI 0 ax [553])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 532 {*ashrdi3_1}
     (nil))
(insn 443 442 444 26 (set (reg:DI 0 ax [orig:261 D.6031 ] [261])
        (reg:DI 0 ax [554])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 444 443 445 26 (set (reg:DI 4 si [orig:262 D.6028 ] [262])
        (reg:DI 0 ax [orig:261 D.6031 ] [261])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 445 444 446 26 (set (reg:SI 0 ax [555])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:232 90 {*movsi_internal}
     (nil))
(insn 446 445 447 26 (set (reg:DI 0 ax [orig:263 D.6028 ] [263])
        (sign_extend:DI (reg:SI 0 ax [555]))) sim2fitman_fmtext_o.cpp:232 142 {*extendsidi2_rex64}
     (nil))
(insn 447 446 448 26 (parallel [
            (set (reg:DI 2 cx [orig:264 D.6028 ] [264])
                (ashift:DI (reg:DI 0 ax [orig:263 D.6028 ] [263])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 497 {*ashldi3_1}
     (nil))
(insn 448 447 449 26 (set (reg/f:DI 0 ax [556])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:232 89 {*movdi_internal}
     (nil))
(insn 449 448 450 26 (parallel [
            (set (reg/f:DI 0 ax [orig:265 D.6034 ] [265])
                (plus:DI (reg/f:DI 0 ax [556])
                    (reg:DI 2 cx [orig:264 D.6028 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:232 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:264 D.6028 ] [264]))
        (nil)))
(insn 450 449 451 26 (set (reg/f:DI 0 ax [orig:266 D.6036 ] [266])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:265 D.6034 ] [265]) [0 _239->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 451 450 452 26 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:250 D.6040 ] [250])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 452 451 454 26 (set (reg:DI 1 dx)
        (reg:DI 5 di [orig:256 D.6028 ] [256])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 454 452 455 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:266 D.6036 ] [266])) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(call_insn 455 454 456 26 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b9d76b95800 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:233 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 456 455 457 26 (set (reg:DI 2 cx [orig:267 D.6028 ] [267])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 457 456 458 26 (set (reg:SI 0 ax [557])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:234 90 {*movsi_internal}
     (nil))
(insn 458 457 909 26 (set (reg:DI 0 ax [orig:268 D.6028 ] [268])
        (sign_extend:DI (reg:SI 0 ax [557]))) sim2fitman_fmtext_o.cpp:234 142 {*extendsidi2_rex64}
     (nil))
(insn 909 458 459 26 (set (reg:DI 0 ax [orig:269 D.6028 ] [269])
        (reg:DI 0 ax [orig:268 D.6028 ] [268])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 459 909 910 26 (parallel [
            (set (reg:DI 0 ax [orig:269 D.6028 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:269 D.6028 ] [269])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:234 497 {*ashldi3_1}
     (nil))
(insn 910 459 460 26 (set (reg:DI 1 dx [orig:269 D.6028 ] [269])
        (reg:DI 0 ax [orig:269 D.6028 ] [269])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 460 910 461 26 (set (reg/f:DI 0 ax [558])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 461 460 462 26 (parallel [
            (set (reg/f:DI 0 ax [orig:270 D.6030 ] [270])
                (plus:DI (reg/f:DI 0 ax [558])
                    (reg:DI 1 dx [orig:269 D.6028 ] [269])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:234 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:269 D.6028 ] [269]))
        (nil)))
(insn 462 461 463 26 (set (reg:DI 0 ax [orig:271 D.6031 ] [271])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:270 D.6030 ] [270])
                (const_int 16 [0x10])) [0 _245->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 463 462 464 26 (parallel [
            (set (reg:DI 0 ax [orig:272 D.6031 ] [272])
                (ashift:DI (reg:DI 0 ax [orig:271 D.6031 ] [271])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:234 497 {*ashldi3_1}
     (nil))
(insn 464 463 465 26 (set (reg:DI 0 ax [orig:273 D.6028 ] [273])
        (reg:DI 0 ax [orig:272 D.6031 ] [272])) sim2fitman_fmtext_o.cpp:234 89 {*movdi_internal}
     (nil))
(insn 465 464 466 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 2 cx [orig:267 D.6028 ] [267])
            (reg:DI 0 ax [orig:273 D.6028 ] [273]))) sim2fitman_fmtext_o.cpp:232 8 {*cmpdi_1}
     (nil))
(insn 466 465 467 26 (set (reg:QI 0 ax [orig:274 D.6046 ] [274])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:232 592 {*setcc_qi}
     (nil))
(insn 467 466 468 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:274 D.6046 ] [274])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:232 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 468 467 469 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 478)
            (pc))) sim2fitman_fmtext_o.cpp:232 596 {*jcc_1}
     (nil)
 -> 478)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 275 559 560 561 562
(note 469 468 470 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 470 469 471 27 (set (reg:SI 0 ax [560])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:235 90 {*movsi_internal}
     (nil))
(insn 471 470 911 27 (set (reg:DI 0 ax [559])
        (sign_extend:DI (reg:SI 0 ax [560]))) sim2fitman_fmtext_o.cpp:235 142 {*extendsidi2_rex64}
     (nil))
(insn 911 471 472 27 (set (reg:DI 0 ax [561])
        (reg:DI 0 ax [559])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(insn 472 911 912 27 (parallel [
            (set (reg:DI 0 ax [561])
                (ashift:DI (reg:DI 0 ax [561])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:235 497 {*ashldi3_1}
     (nil))
(insn 912 472 473 27 (set (reg:DI 1 dx [561])
        (reg:DI 0 ax [561])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(insn 473 912 474 27 (set (reg/f:DI 0 ax [562])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(insn 474 473 475 27 (parallel [
            (set (reg/f:DI 0 ax [orig:275 D.6045 ] [275])
                (plus:DI (reg/f:DI 0 ax [562])
                    (reg:DI 1 dx [561])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:235 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 file+0 S8 A64])
            (reg:DI 1 dx [561]))
        (nil)))
(insn 475 474 476 27 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:275 D.6045 ] [275])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(insn 476 475 477 27 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) sim2fitman_fmtext_o.cpp:235 89 {*movdi_internal}
     (nil))
(call_insn 477 476 478 27 (call (mem:QI (symbol_ref:DI ("_Z7exit_06PP8_IO_FILEPc") [flags 0x41]  <function_decl 0x2b9d76cd0500 exit_06>) [0 exit_06 S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:235 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 [100.0%] 
;;              26
;;              27 (FALLTHRU)
;;              25 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 478 477 479 28 13 "" [3 uses])
(note 479 478 480 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 481 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 48 [0x30])) [0 swap_bytes+0 S4 A64])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:240 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 481 480 482 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 589)
            (pc))) sim2fitman_fmtext_o.cpp:240 596 {*jcc_1}
     (nil)
 -> 589)
;;  succ:       29 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 482 481 483 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 483 482 849 29 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:241 90 {*movsi_internal}
     (nil))
(jump_insn 849 483 850 29 (set (pc)
        (label_ref 575)) sim2fitman_fmtext_o.cpp:241 636 {jump}
     (nil)
 -> 575)
;;  succ:       36 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 850 849 586)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 282 283 284 285 286 287 563 564
(code_label 586 850 486 30 23 "" [1 uses])
(note 486 586 487 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 487 486 488 30 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:242 90 {*movsi_internal}
     (nil))
(insn 488 487 913 30 (set (reg:DI 0 ax [orig:282 D.6028 ] [282])
        (sign_extend:DI (reg:SI 0 ax [563]))) sim2fitman_fmtext_o.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 913 488 489 30 (set (reg:DI 0 ax [orig:283 D.6028 ] [283])
        (reg:DI 0 ax [orig:282 D.6028 ] [282])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 489 913 914 30 (parallel [
            (set (reg:DI 0 ax [orig:283 D.6028 ] [283])
                (ashift:DI (reg:DI 0 ax [orig:283 D.6028 ] [283])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:242 497 {*ashldi3_1}
     (nil))
(insn 914 489 490 30 (set (reg:DI 1 dx [orig:283 D.6028 ] [283])
        (reg:DI 0 ax [orig:283 D.6028 ] [283])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 490 914 491 30 (set (reg/f:DI 0 ax [564])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 491 490 492 30 (parallel [
            (set (reg/f:DI 0 ax [orig:284 D.6030 ] [284])
                (plus:DI (reg/f:DI 0 ax [564])
                    (reg:DI 1 dx [orig:283 D.6028 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:242 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:283 D.6028 ] [283]))
        (nil)))
(insn 492 491 493 30 (set (reg:DI 0 ax [orig:285 D.6031 ] [285])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:284 D.6030 ] [284])
                (const_int 24 [0x18])) [0 _261->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 493 492 494 30 (set (reg:DI 0 ax [orig:286 D.6041 ] [286])
        (reg:DI 0 ax [orig:285 D.6031 ] [285])) sim2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(insn 494 493 495 30 (parallel [
            (set (reg:DI 0 ax [orig:287 D.6041 ] [287])
                (plus:DI (reg:DI 0 ax [orig:286 D.6041 ] [286])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:242 221 {*adddi_1}
     (nil))
(insn 495 494 496 30 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:287 D.6041 ] [287])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:242 8 {*cmpdi_1}
     (nil))
(jump_insn 496 495 497 30 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 514)
            (pc))) sim2fitman_fmtext_o.cpp:242 596 {*jcc_1}
     (nil)
 -> 514)
;;  succ:       31 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 288 289 290 291 292 293 294 295 565 566 567
(note 497 496 498 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 498 497 499 31 (set (reg:SI 2 cx [orig:288 D.6027 ] [288])
        (const_int 2 [0x2])) sim2fitman_fmtext_o.cpp:243 90 {*movsi_internal}
     (nil))
(insn 499 498 500 31 (set (reg:SI 0 ax [565])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:243 90 {*movsi_internal}
     (nil))
(insn 500 499 501 31 (set (reg:DI 0 ax [orig:289 D.6028 ] [289])
        (sign_extend:DI (reg:SI 0 ax [565]))) sim2fitman_fmtext_o.cpp:243 142 {*extendsidi2_rex64}
     (nil))
(insn 501 500 502 31 (parallel [
            (set (reg:DI 1 dx [orig:290 D.6028 ] [290])
                (ashift:DI (reg:DI 0 ax [orig:289 D.6028 ] [289])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:243 497 {*ashldi3_1}
     (nil))
(insn 502 501 503 31 (set (reg/f:DI 0 ax [566])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:243 89 {*movdi_internal}
     (nil))
(insn 503 502 504 31 (parallel [
            (set (reg/f:DI 0 ax [orig:291 D.6034 ] [291])
                (plus:DI (reg/f:DI 0 ax [566])
                    (reg:DI 1 dx [orig:290 D.6028 ] [290])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:243 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:290 D.6028 ] [290]))
        (nil)))
(insn 504 503 505 31 (set (reg/f:DI 0 ax [orig:292 D.6047 ] [292])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:291 D.6034 ] [291]) [0 _268->sh+0 S8 A64])) sim2fitman_fmtext_o.cpp:243 89 {*movdi_internal}
     (nil))
(insn 505 504 506 31 (set (reg:SI 1 dx [567])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:243 90 {*movsi_internal}
     (nil))
(insn 506 505 507 31 (set (reg:DI 1 dx [orig:293 D.6028 ] [293])
        (sign_extend:DI (reg:SI 1 dx [567]))) sim2fitman_fmtext_o.cpp:243 142 {*extendsidi2_rex64}
     (nil))
(insn 507 506 508 31 (parallel [
            (set (reg:DI 1 dx [orig:294 D.6028 ] [294])
                (ashift:DI (reg:DI 1 dx [orig:293 D.6028 ] [293])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:243 497 {*ashldi3_1}
     (nil))
(insn 508 507 509 31 (parallel [
            (set (reg/f:DI 0 ax [orig:295 D.6048 ] [295])
                (plus:DI (reg/f:DI 0 ax [orig:292 D.6047 ] [292])
                    (reg:DI 1 dx [orig:294 D.6028 ] [294])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:243 221 {*adddi_1}
     (nil))
(insn 509 508 510 31 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:288 D.6027 ] [288])) sim2fitman_fmtext_o.cpp:243 90 {*movsi_internal}
     (nil))
(insn 510 509 511 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:295 D.6048 ] [295])) sim2fitman_fmtext_o.cpp:243 89 {*movdi_internal}
     (nil))
(call_insn 511 510 851 31 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b9d76ccc500 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:243 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 851 511 852 31 (set (pc)
        (label_ref 572)) 636 {jump}
     (nil)
 -> 572)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 852 851 514)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 296 297 298 299 300 301 568 569
(code_label 514 852 515 32 20 "" [1 uses])
(note 515 514 516 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 516 515 517 32 (set (reg:SI 0 ax [568])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:244 90 {*movsi_internal}
     (nil))
(insn 517 516 915 32 (set (reg:DI 0 ax [orig:296 D.6028 ] [296])
        (sign_extend:DI (reg:SI 0 ax [568]))) sim2fitman_fmtext_o.cpp:244 142 {*extendsidi2_rex64}
     (nil))
(insn 915 517 518 32 (set (reg:DI 0 ax [orig:297 D.6028 ] [297])
        (reg:DI 0 ax [orig:296 D.6028 ] [296])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 518 915 916 32 (parallel [
            (set (reg:DI 0 ax [orig:297 D.6028 ] [297])
                (ashift:DI (reg:DI 0 ax [orig:297 D.6028 ] [297])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:244 497 {*ashldi3_1}
     (nil))
(insn 916 518 519 32 (set (reg:DI 1 dx [orig:297 D.6028 ] [297])
        (reg:DI 0 ax [orig:297 D.6028 ] [297])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 519 916 520 32 (set (reg/f:DI 0 ax [569])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 520 519 521 32 (parallel [
            (set (reg/f:DI 0 ax [orig:298 D.6030 ] [298])
                (plus:DI (reg/f:DI 0 ax [569])
                    (reg:DI 1 dx [orig:297 D.6028 ] [297])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:244 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:297 D.6028 ] [297]))
        (nil)))
(insn 521 520 522 32 (set (reg:DI 0 ax [orig:299 D.6031 ] [299])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:298 D.6030 ] [298])
                (const_int 24 [0x18])) [0 _275->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 522 521 523 32 (set (reg:DI 0 ax [orig:300 D.6041 ] [300])
        (reg:DI 0 ax [orig:299 D.6031 ] [299])) sim2fitman_fmtext_o.cpp:244 89 {*movdi_internal}
     (nil))
(insn 523 522 524 32 (parallel [
            (set (reg:DI 0 ax [orig:301 D.6041 ] [301])
                (plus:DI (reg:DI 0 ax [orig:300 D.6041 ] [300])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:244 221 {*adddi_1}
     (nil))
(insn 524 523 525 32 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:301 D.6041 ] [301])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:244 8 {*cmpdi_1}
     (nil))
(jump_insn 525 524 526 32 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 556)
            (pc))) sim2fitman_fmtext_o.cpp:244 596 {*jcc_1}
     (nil)
 -> 556)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 570 571 572 573 574 575 576
(note 526 525 527 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 528 33 (set (reg:SI 2 cx [orig:302 D.6027 ] [302])
        (const_int 8 [0x8])) sim2fitman_fmtext_o.cpp:245 90 {*movsi_internal}
     (nil))
(insn 528 527 529 33 (set (reg:SI 0 ax [570])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:245 90 {*movsi_internal}
     (nil))
(insn 529 528 530 33 (set (reg:DI 0 ax [orig:303 D.6028 ] [303])
        (sign_extend:DI (reg:SI 0 ax [570]))) sim2fitman_fmtext_o.cpp:245 142 {*extendsidi2_rex64}
     (nil))
(insn 530 529 531 33 (parallel [
            (set (reg:DI 1 dx [orig:304 D.6028 ] [304])
                (ashift:DI (reg:DI 0 ax [orig:303 D.6028 ] [303])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:245 497 {*ashldi3_1}
     (nil))
(insn 531 530 532 33 (set (reg/f:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:245 89 {*movdi_internal}
     (nil))
(insn 532 531 533 33 (parallel [
            (set (reg/f:DI 0 ax [orig:305 D.6048 ] [305])
                (plus:DI (reg/f:DI 0 ax [571])
                    (reg:DI 1 dx [orig:304 D.6028 ] [304])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:245 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 temp_double+0 S8 A64])
            (reg:DI 1 dx [orig:304 D.6028 ] [304]))
        (nil)))
(insn 533 532 534 33 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:302 D.6027 ] [302])) sim2fitman_fmtext_o.cpp:245 90 {*movsi_internal}
     (nil))
(insn 534 533 535 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:305 D.6048 ] [305])) sim2fitman_fmtext_o.cpp:245 89 {*movdi_internal}
     (nil))
(call_insn 535 534 536 33 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b9d76ccc500 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:245 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 536 535 537 33 (set (reg:SI 0 ax [572])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:246 90 {*movsi_internal}
     (nil))
(insn 537 536 538 33 (set (reg:DI 0 ax [orig:306 D.6028 ] [306])
        (sign_extend:DI (reg:SI 0 ax [572]))) sim2fitman_fmtext_o.cpp:246 142 {*extendsidi2_rex64}
     (nil))
(insn 538 537 539 33 (parallel [
            (set (reg:DI 1 dx [orig:307 D.6028 ] [307])
                (ashift:DI (reg:DI 0 ax [orig:306 D.6028 ] [306])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 497 {*ashldi3_1}
     (nil))
(insn 539 538 540 33 (set (reg/f:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:246 89 {*movdi_internal}
     (nil))
(insn 540 539 541 33 (parallel [
            (set (reg/f:DI 0 ax [orig:308 D.6034 ] [308])
                (plus:DI (reg/f:DI 0 ax [573])
                    (reg:DI 1 dx [orig:307 D.6028 ] [307])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:307 D.6028 ] [307]))
        (nil)))
(insn 541 540 542 33 (set (reg/f:DI 0 ax [orig:309 D.6036 ] [309])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:308 D.6034 ] [308]) [0 _285->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:246 89 {*movdi_internal}
     (nil))
(insn 542 541 543 33 (set (reg:SI 1 dx [574])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:246 90 {*movsi_internal}
     (nil))
(insn 543 542 544 33 (set (reg:DI 1 dx [orig:310 D.6028 ] [310])
        (sign_extend:DI (reg:SI 1 dx [574]))) sim2fitman_fmtext_o.cpp:246 142 {*extendsidi2_rex64}
     (nil))
(insn 544 543 545 33 (parallel [
            (set (reg:DI 1 dx [orig:311 D.6028 ] [311])
                (ashift:DI (reg:DI 1 dx [orig:310 D.6028 ] [310])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 497 {*ashldi3_1}
     (nil))
(insn 545 544 546 33 (parallel [
            (set (reg/f:DI 1 dx [orig:312 D.6036 ] [312])
                (plus:DI (reg:DI 1 dx [orig:311 D.6028 ] [311])
                    (reg/f:DI 0 ax [orig:309 D.6036 ] [309])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 221 {*adddi_1}
     (nil))
(insn 546 545 547 33 (set (reg:SI 0 ax [575])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:246 90 {*movsi_internal}
     (nil))
(insn 547 546 548 33 (set (reg:DI 0 ax [orig:313 D.6028 ] [313])
        (sign_extend:DI (reg:SI 0 ax [575]))) sim2fitman_fmtext_o.cpp:246 142 {*extendsidi2_rex64}
     (nil))
(insn 548 547 549 33 (parallel [
            (set (reg:DI 2 cx [orig:314 D.6028 ] [314])
                (ashift:DI (reg:DI 0 ax [orig:313 D.6028 ] [313])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 497 {*ashldi3_1}
     (nil))
(insn 549 548 550 33 (set (reg/f:DI 0 ax [576])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:246 89 {*movdi_internal}
     (nil))
(insn 550 549 551 33 (parallel [
            (set (reg/f:DI 0 ax [orig:315 D.6042 ] [315])
                (plus:DI (reg/f:DI 0 ax [576])
                    (reg:DI 2 cx [orig:314 D.6028 ] [314])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:246 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 temp_double+0 S8 A64])
            (reg:DI 2 cx [orig:314 D.6028 ] [314]))
        (nil)))
(insn 551 550 552 33 (set (reg:DF 21 xmm0 [orig:316 D.6043 ] [316])
        (mem:DF (reg/f:DI 0 ax [orig:315 D.6042 ] [315]) [0 *_292+0 S8 A64])) sim2fitman_fmtext_o.cpp:246 128 {*movdf_internal}
     (nil))
(insn 552 551 917 33 (set (reg:SF 25 xmm4 [orig:317 D.6044 ] [317])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:316 D.6043 ] [316]))) sim2fitman_fmtext_o.cpp:246 157 {*truncdfsf_fast_sse}
     (nil))
(insn 917 552 553 33 (set (reg:SF 0 ax [orig:317 D.6044 ] [317])
        (reg:SF 25 xmm4 [orig:317 D.6044 ] [317])) sim2fitman_fmtext_o.cpp:246 129 {*movsf_internal}
     (nil))
(insn 553 917 853 33 (set (mem:SF (reg/f:DI 1 dx [orig:312 D.6036 ] [312]) [0 *_289+0 S4 A32])
        (reg:SF 0 ax [orig:317 D.6044 ] [317])) sim2fitman_fmtext_o.cpp:246 129 {*movsf_internal}
     (nil))
(jump_insn 853 553 854 33 (set (pc)
        (label_ref 572)) 636 {jump}
     (nil)
 -> 572)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 854 853 556)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 318 319 320 321 322 323 324 325 577 578 579
(code_label 556 854 557 34 22 "" [1 uses])
(note 557 556 558 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 558 557 559 34 (set (reg:SI 2 cx [orig:318 D.6027 ] [318])
        (const_int 8 [0x8])) sim2fitman_fmtext_o.cpp:248 90 {*movsi_internal}
     (nil))
(insn 559 558 560 34 (set (reg:SI 0 ax [577])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:248 90 {*movsi_internal}
     (nil))
(insn 560 559 561 34 (set (reg:DI 0 ax [orig:319 D.6028 ] [319])
        (sign_extend:DI (reg:SI 0 ax [577]))) sim2fitman_fmtext_o.cpp:248 142 {*extendsidi2_rex64}
     (nil))
(insn 561 560 562 34 (parallel [
            (set (reg:DI 1 dx [orig:320 D.6028 ] [320])
                (ashift:DI (reg:DI 0 ax [orig:319 D.6028 ] [319])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:248 497 {*ashldi3_1}
     (nil))
(insn 562 561 563 34 (set (reg/f:DI 0 ax [578])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:248 89 {*movdi_internal}
     (nil))
(insn 563 562 564 34 (parallel [
            (set (reg/f:DI 0 ax [orig:321 D.6034 ] [321])
                (plus:DI (reg/f:DI 0 ax [578])
                    (reg:DI 1 dx [orig:320 D.6028 ] [320])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:248 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:320 D.6028 ] [320]))
        (nil)))
(insn 564 563 565 34 (set (reg/f:DI 0 ax [orig:322 D.6049 ] [322])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:321 D.6034 ] [321]) [0 _298->lo+0 S8 A64])) sim2fitman_fmtext_o.cpp:248 89 {*movdi_internal}
     (nil))
(insn 565 564 566 34 (set (reg:SI 1 dx [579])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:248 90 {*movsi_internal}
     (nil))
(insn 566 565 567 34 (set (reg:DI 1 dx [orig:323 D.6028 ] [323])
        (sign_extend:DI (reg:SI 1 dx [579]))) sim2fitman_fmtext_o.cpp:248 142 {*extendsidi2_rex64}
     (nil))
(insn 567 566 568 34 (parallel [
            (set (reg:DI 1 dx [orig:324 D.6028 ] [324])
                (ashift:DI (reg:DI 1 dx [orig:323 D.6028 ] [323])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:248 497 {*ashldi3_1}
     (nil))
(insn 568 567 569 34 (parallel [
            (set (reg/f:DI 0 ax [orig:325 D.6048 ] [325])
                (plus:DI (reg/f:DI 0 ax [orig:322 D.6049 ] [322])
                    (reg:DI 1 dx [orig:324 D.6028 ] [324])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:248 221 {*adddi_1}
     (nil))
(insn 569 568 570 34 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:318 D.6027 ] [318])) sim2fitman_fmtext_o.cpp:248 90 {*movsi_internal}
     (nil))
(insn 570 569 571 34 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:325 D.6048 ] [325])) sim2fitman_fmtext_o.cpp:248 89 {*movdi_internal}
     (nil))
(call_insn 571 570 572 34 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b9d76ccc500 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:248 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              31 [100.0%] 
;;              33 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 572 571 573 35 21 "" [2 uses])
(note 573 572 574 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 574 573 575 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:241 220 {*addsi_1}
     (nil))
;;  succ:       36 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU,DFS_BACK)
;;              29 [100.0%] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 276 277 278 279 280 281 580 581 582
(code_label 575 574 576 36 19 "" [1 uses])
(note 576 575 577 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 577 576 578 36 (set (reg:SI 0 ax [580])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:241 90 {*movsi_internal}
     (nil))
(insn 578 577 579 36 (set (reg:DI 0 ax [orig:276 D.6031 ] [276])
        (sign_extend:DI (reg:SI 0 ax [580]))) sim2fitman_fmtext_o.cpp:241 142 {*extendsidi2_rex64}
     (nil))
(insn 579 578 580 36 (set (reg:SI 1 dx [581])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:241 90 {*movsi_internal}
     (nil))
(insn 580 579 918 36 (set (reg:DI 1 dx [orig:277 D.6028 ] [277])
        (sign_extend:DI (reg:SI 1 dx [581]))) sim2fitman_fmtext_o.cpp:241 142 {*extendsidi2_rex64}
     (nil))
(insn 918 580 581 36 (set (reg:DI 2 cx [orig:278 D.6028 ] [278])
        (reg:DI 1 dx [orig:277 D.6028 ] [277])) sim2fitman_fmtext_o.cpp:241 89 {*movdi_internal}
     (nil))
(insn 581 918 582 36 (parallel [
            (set (reg:DI 2 cx [orig:278 D.6028 ] [278])
                (ashift:DI (reg:DI 2 cx [orig:278 D.6028 ] [278])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:241 497 {*ashldi3_1}
     (nil))
(insn 582 581 583 36 (set (reg/f:DI 1 dx [582])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:241 89 {*movdi_internal}
     (nil))
(insn 583 582 584 36 (parallel [
            (set (reg/f:DI 1 dx [orig:279 D.6030 ] [279])
                (plus:DI (reg/f:DI 1 dx [582])
                    (reg:DI 2 cx [orig:278 D.6028 ] [278])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:241 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:278 D.6028 ] [278]))
        (nil)))
(insn 584 583 585 36 (set (reg:DI 1 dx [orig:280 D.6031 ] [280])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:279 D.6030 ] [279])
                (const_int 16 [0x10])) [0 _256->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:241 89 {*movdi_internal}
     (nil))
(insn 585 584 587 36 (parallel [
            (set (reg:DI 1 dx [orig:281 D.6031 ] [281])
                (ashift:DI (reg:DI 1 dx [orig:280 D.6031 ] [280])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:241 497 {*ashldi3_1}
     (nil))
(insn 587 585 588 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:276 D.6031 ] [276])
            (reg:DI 1 dx [orig:281 D.6031 ] [281]))) sim2fitman_fmtext_o.cpp:241 8 {*cmpdi_1}
     (nil))
(jump_insn 588 587 589 36 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 586)
            (pc))) sim2fitman_fmtext_o.cpp:241 596 {*jcc_1}
     (nil)
 -> 586)
;;  succ:       30
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 326 327 328 329 330 331 583 584
(code_label 589 588 590 37 18 "" [1 uses])
(note 590 589 591 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 591 590 592 37 (set (reg:SI 0 ax [583])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:255 90 {*movsi_internal}
     (nil))
(insn 592 591 920 37 (set (reg:DI 0 ax [orig:326 D.6028 ] [326])
        (sign_extend:DI (reg:SI 0 ax [583]))) sim2fitman_fmtext_o.cpp:255 142 {*extendsidi2_rex64}
     (nil))
(insn 920 592 593 37 (set (reg:DI 0 ax [orig:327 D.6028 ] [327])
        (reg:DI 0 ax [orig:326 D.6028 ] [326])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 593 920 921 37 (parallel [
            (set (reg:DI 0 ax [orig:327 D.6028 ] [327])
                (ashift:DI (reg:DI 0 ax [orig:327 D.6028 ] [327])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:255 497 {*ashldi3_1}
     (nil))
(insn 921 593 594 37 (set (reg:DI 1 dx [orig:327 D.6028 ] [327])
        (reg:DI 0 ax [orig:327 D.6028 ] [327])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 594 921 595 37 (set (reg/f:DI 0 ax [584])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 595 594 596 37 (parallel [
            (set (reg/f:DI 0 ax [orig:328 D.6030 ] [328])
                (plus:DI (reg/f:DI 0 ax [584])
                    (reg:DI 1 dx [orig:327 D.6028 ] [327])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:255 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:327 D.6028 ] [327]))
        (nil)))
(insn 596 595 597 37 (set (reg:DI 0 ax [orig:329 D.6031 ] [329])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:328 D.6030 ] [328])
                (const_int 24 [0x18])) [0 _306->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 597 596 598 37 (set (reg:DI 0 ax [orig:330 D.6041 ] [330])
        (reg:DI 0 ax [orig:329 D.6031 ] [329])) sim2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(insn 598 597 599 37 (parallel [
            (set (reg:DI 0 ax [orig:331 D.6041 ] [331])
                (plus:DI (reg:DI 0 ax [orig:330 D.6041 ] [330])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:255 221 {*adddi_1}
     (nil))
(insn 599 598 600 37 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:331 D.6041 ] [331])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:255 8 {*cmpdi_1}
     (nil))
(jump_insn 600 599 601 37 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 648)
            (pc))) sim2fitman_fmtext_o.cpp:255 596 {*jcc_1}
     (nil)
 -> 648)
;;  succ:       38 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 332 333 334 335 336 337 338 585 586
(note 601 600 602 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 602 601 603 38 (set (reg:SI 0 ax [585])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 603 602 922 38 (set (reg:DI 0 ax [orig:332 D.6028 ] [332])
        (sign_extend:DI (reg:SI 0 ax [585]))) sim2fitman_fmtext_o.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 922 603 604 38 (set (reg:DI 0 ax [orig:333 D.6028 ] [333])
        (reg:DI 0 ax [orig:332 D.6028 ] [332])) sim2fitman_fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 604 922 923 38 (parallel [
            (set (reg:DI 0 ax [orig:333 D.6028 ] [333])
                (ashift:DI (reg:DI 0 ax [orig:333 D.6028 ] [333])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 923 604 605 38 (set (reg:DI 1 dx [orig:333 D.6028 ] [333])
        (reg:DI 0 ax [orig:333 D.6028 ] [333])) sim2fitman_fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 605 923 606 38 (set (reg/f:DI 0 ax [586])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 606 605 607 38 (parallel [
            (set (reg/f:DI 0 ax [orig:334 D.6030 ] [334])
                (plus:DI (reg/f:DI 0 ax [586])
                    (reg:DI 1 dx [orig:333 D.6028 ] [333])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:333 D.6028 ] [333]))
        (nil)))
(insn 607 606 608 38 (set (reg:DI 0 ax [orig:335 D.6031 ] [335])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:334 D.6030 ] [334])
                (const_int 16 [0x10])) [0 _312->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:256 89 {*movdi_internal}
     (nil))
(insn 608 607 609 38 (set (reg:SI 0 ax [orig:336 D.6050 ] [336])
        (reg:SI 0 ax [orig:335 D.6031 ] [335])) sim2fitman_fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(insn 609 608 610 38 (parallel [
            (set (reg:SI 0 ax [orig:337 D.6050 ] [337])
                (ashift:SI (reg:SI 0 ax [orig:336 D.6050 ] [336])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 496 {*ashlsi3_1}
     (nil))
(insn 610 609 611 38 (parallel [
            (set (reg:SI 0 ax [orig:338 D.6050 ] [338])
                (plus:SI (reg:SI 0 ax [orig:337 D.6050 ] [337])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 220 {*addsi_1}
     (nil))
(insn 611 610 855 38 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (reg:SI 0 ax [orig:338 D.6050 ] [338])) sim2fitman_fmtext_o.cpp:256 90 {*movsi_internal}
     (nil))
(jump_insn 855 611 856 38 (set (pc)
        (label_ref 640)) sim2fitman_fmtext_o.cpp:256 636 {jump}
     (nil)
 -> 640)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 856 855 642)
;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 587 588 589 590 591 592 593
(code_label 642 856 614 39 26 "" [1 uses])
(note 614 642 615 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 615 614 616 39 (set (reg:SI 0 ax [587])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 616 615 617 39 (set (reg:DI 0 ax [orig:339 D.6028 ] [339])
        (sign_extend:DI (reg:SI 0 ax [587]))) sim2fitman_fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 617 616 618 39 (parallel [
            (set (reg:DI 1 dx [orig:340 D.6028 ] [340])
                (ashift:DI (reg:DI 0 ax [orig:339 D.6028 ] [339])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 618 617 619 39 (set (reg/f:DI 0 ax [588])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 619 618 620 39 (parallel [
            (set (reg/f:DI 0 ax [orig:341 D.6034 ] [341])
                (plus:DI (reg/f:DI 0 ax [588])
                    (reg:DI 1 dx [orig:340 D.6028 ] [340])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:340 D.6028 ] [340]))
        (nil)))
(insn 620 619 621 39 (set (reg/f:DI 0 ax [orig:342 D.6036 ] [342])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:341 D.6034 ] [341]) [0 _320->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 621 620 622 39 (set (reg:SI 1 dx [589])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 622 621 623 39 (set (reg:DI 1 dx [orig:343 D.6028 ] [343])
        (sign_extend:DI (reg:SI 1 dx [589]))) sim2fitman_fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 623 622 624 39 (parallel [
            (set (reg:DI 1 dx [orig:344 D.6028 ] [344])
                (ashift:DI (reg:DI 1 dx [orig:343 D.6028 ] [343])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 624 623 625 39 (parallel [
            (set (reg/f:DI 1 dx [orig:345 D.6036 ] [345])
                (plus:DI (reg:DI 1 dx [orig:344 D.6028 ] [344])
                    (reg/f:DI 0 ax [orig:342 D.6036 ] [342])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 221 {*adddi_1}
     (nil))
(insn 625 624 626 39 (set (reg:SI 0 ax [590])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 626 625 627 39 (set (reg:DI 0 ax [orig:346 D.6028 ] [346])
        (sign_extend:DI (reg:SI 0 ax [590]))) sim2fitman_fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 627 626 628 39 (parallel [
            (set (reg:DI 2 cx [orig:347 D.6028 ] [347])
                (ashift:DI (reg:DI 0 ax [orig:346 D.6028 ] [346])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 628 627 629 39 (set (reg/f:DI 0 ax [591])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 629 628 630 39 (parallel [
            (set (reg/f:DI 0 ax [orig:348 D.6034 ] [348])
                (plus:DI (reg/f:DI 0 ax [591])
                    (reg:DI 2 cx [orig:347 D.6028 ] [347])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:347 D.6028 ] [347]))
        (nil)))
(insn 630 629 631 39 (set (reg/f:DI 0 ax [orig:349 D.6047 ] [349])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:348 D.6034 ] [348]) [0 _327->sh+0 S8 A64])) sim2fitman_fmtext_o.cpp:257 89 {*movdi_internal}
     (nil))
(insn 631 630 632 39 (set (reg:SI 2 cx [592])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:257 90 {*movsi_internal}
     (nil))
(insn 632 631 633 39 (set (reg:DI 2 cx [orig:350 D.6028 ] [350])
        (sign_extend:DI (reg:SI 2 cx [592]))) sim2fitman_fmtext_o.cpp:257 142 {*extendsidi2_rex64}
     (nil))
(insn 633 632 634 39 (parallel [
            (set (reg:DI 2 cx [orig:351 D.6028 ] [351])
                (ashift:DI (reg:DI 2 cx [orig:350 D.6028 ] [350])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 497 {*ashldi3_1}
     (nil))
(insn 634 633 635 39 (parallel [
            (set (reg/f:DI 0 ax [orig:352 D.6047 ] [352])
                (plus:DI (reg/f:DI 0 ax [orig:349 D.6047 ] [349])
                    (reg:DI 2 cx [orig:351 D.6028 ] [351])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:257 221 {*adddi_1}
     (nil))
(insn 635 634 636 39 (set (reg:HI 0 ax [orig:353 D.6051 ] [353])
        (mem:HI (reg/f:DI 0 ax [orig:352 D.6047 ] [352]) [0 *_331+0 S2 A16])) sim2fitman_fmtext_o.cpp:257 92 {*movhi_internal}
     (nil))
(insn 636 635 637 39 (set (reg:SI 0 ax [593])
        (sign_extend:SI (reg:HI 0 ax [orig:353 D.6051 ] [353]))) sim2fitman_fmtext_o.cpp:257 146 {extendhisi2}
     (nil))
(insn 637 636 924 39 (set (reg:SF 26 xmm5 [orig:354 D.6044 ] [354])
        (float:SF (reg:SI 0 ax [593]))) sim2fitman_fmtext_o.cpp:257 199 {*floatsisf2_sse}
     (nil))
(insn 924 637 638 39 (set (reg:SF 0 ax [orig:354 D.6044 ] [354])
        (reg:SF 26 xmm5 [orig:354 D.6044 ] [354])) sim2fitman_fmtext_o.cpp:257 129 {*movsf_internal}
     (nil))
(insn 638 924 639 39 (set (mem:SF (reg/f:DI 1 dx [orig:345 D.6036 ] [345]) [0 *_324+0 S4 A32])
        (reg:SF 0 ax [orig:354 D.6044 ] [354])) sim2fitman_fmtext_o.cpp:257 129 {*movsf_internal}
     (nil))
(insn 639 638 640 39 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:256 220 {*addsi_1}
     (nil))
;;  succ:       40 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU,DFS_BACK)
;;              38 [100.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 640 639 641 40 25 "" [1 uses])
(note 641 640 643 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 643 641 644 40 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:256 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 644 643 857 40 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 642)
            (pc))) sim2fitman_fmtext_o.cpp:256 596 {*jcc_1}
     (nil)
 -> 642)
;;  succ:       39
;;              41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 857 644 858 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(jump_insn 858 857 859 41 (set (pc)
        (label_ref 705)) 636 {jump}
     (nil)
 -> 705)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 859 858 648)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 355 356 357 358 359 360 594 595
(code_label 648 859 649 42 24 "" [1 uses])
(note 649 648 650 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 650 649 651 42 (set (reg:SI 0 ax [594])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:264 90 {*movsi_internal}
     (nil))
(insn 651 650 925 42 (set (reg:DI 0 ax [orig:355 D.6028 ] [355])
        (sign_extend:DI (reg:SI 0 ax [594]))) sim2fitman_fmtext_o.cpp:264 142 {*extendsidi2_rex64}
     (nil))
(insn 925 651 652 42 (set (reg:DI 0 ax [orig:356 D.6028 ] [356])
        (reg:DI 0 ax [orig:355 D.6028 ] [355])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 652 925 926 42 (parallel [
            (set (reg:DI 0 ax [orig:356 D.6028 ] [356])
                (ashift:DI (reg:DI 0 ax [orig:356 D.6028 ] [356])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:264 497 {*ashldi3_1}
     (nil))
(insn 926 652 653 42 (set (reg:DI 1 dx [orig:356 D.6028 ] [356])
        (reg:DI 0 ax [orig:356 D.6028 ] [356])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 653 926 654 42 (set (reg/f:DI 0 ax [595])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 654 653 655 42 (parallel [
            (set (reg/f:DI 0 ax [orig:357 D.6030 ] [357])
                (plus:DI (reg/f:DI 0 ax [595])
                    (reg:DI 1 dx [orig:356 D.6028 ] [356])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:264 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:356 D.6028 ] [356]))
        (nil)))
(insn 655 654 656 42 (set (reg:DI 0 ax [orig:358 D.6031 ] [358])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:357 D.6030 ] [357])
                (const_int 24 [0x18])) [0 _337->ebytes.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 656 655 657 42 (set (reg:DI 0 ax [orig:359 D.6041 ] [359])
        (reg:DI 0 ax [orig:358 D.6031 ] [358])) sim2fitman_fmtext_o.cpp:264 89 {*movdi_internal}
     (nil))
(insn 657 656 658 42 (parallel [
            (set (reg:DI 0 ax [orig:360 D.6041 ] [360])
                (plus:DI (reg:DI 0 ax [orig:359 D.6041 ] [359])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:264 221 {*adddi_1}
     (nil))
(insn 658 657 659 42 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:360 D.6041 ] [360])
            (const_int 1 [0x1]))) sim2fitman_fmtext_o.cpp:264 8 {*cmpdi_1}
     (nil))
(jump_insn 659 658 660 42 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 705)
            (pc))) sim2fitman_fmtext_o.cpp:264 596 {*jcc_1}
     (nil)
 -> 705)
;;  succ:       43 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 660 659 661 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 661 660 860 43 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
(jump_insn 860 661 861 43 (set (pc)
        (label_ref 691)) sim2fitman_fmtext_o.cpp:265 636 {jump}
     (nil)
 -> 691)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 861 860 702)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 596 597 598 599 600 601 602 603
(code_label 702 861 664 44 29 "" [1 uses])
(note 664 702 665 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 665 664 666 44 (set (reg:SI 0 ax [596])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:266 90 {*movsi_internal}
     (nil))
(insn 666 665 667 44 (set (reg:DI 0 ax [orig:367 D.6028 ] [367])
        (sign_extend:DI (reg:SI 0 ax [596]))) sim2fitman_fmtext_o.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 667 666 668 44 (parallel [
            (set (reg:DI 1 dx [orig:368 D.6028 ] [368])
                (ashift:DI (reg:DI 0 ax [orig:367 D.6028 ] [367])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:266 497 {*ashldi3_1}
     (nil))
(insn 668 667 669 44 (set (reg/f:DI 0 ax [597])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 669 668 670 44 (parallel [
            (set (reg/f:DI 0 ax [orig:369 D.6034 ] [369])
                (plus:DI (reg/f:DI 0 ax [597])
                    (reg:DI 1 dx [orig:368 D.6028 ] [368])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:266 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:368 D.6028 ] [368]))
        (nil)))
(insn 670 669 671 44 (set (reg/f:DI 0 ax [orig:370 D.6049 ] [370])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:369 D.6034 ] [369]) [0 _350->lo+0 S8 A64])) sim2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 671 670 672 44 (set (reg:SI 1 dx [598])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:266 90 {*movsi_internal}
     (nil))
(insn 672 671 673 44 (set (reg:DI 1 dx [orig:371 D.6028 ] [371])
        (sign_extend:DI (reg:SI 1 dx [598]))) sim2fitman_fmtext_o.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 673 672 674 44 (parallel [
            (set (reg:DI 1 dx [orig:372 D.6028 ] [372])
                (ashift:DI (reg:DI 1 dx [orig:371 D.6028 ] [371])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:266 497 {*ashldi3_1}
     (nil))
(insn 674 673 675 44 (parallel [
            (set (reg/f:DI 0 ax [orig:373 D.6049 ] [373])
                (plus:DI (reg/f:DI 0 ax [orig:370 D.6049 ] [370])
                    (reg:DI 1 dx [orig:372 D.6028 ] [372])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:266 221 {*adddi_1}
     (nil))
(insn 675 674 676 44 (set (reg:DI 0 ax [orig:374 D.6031 ] [374])
        (mem:DI (reg/f:DI 0 ax [orig:373 D.6049 ] [373]) [0 *_354+0 S8 A64])) sim2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 676 675 927 44 (set (reg:SF 27 xmm6 [599])
        (float:SF (reg:DI 0 ax [orig:374 D.6031 ] [374]))) sim2fitman_fmtext_o.cpp:266 200 {*floatdisf2_sse}
     (nil))
(insn 927 676 677 44 (set (reg:SF 0 ax [599])
        (reg:SF 27 xmm6 [599])) sim2fitman_fmtext_o.cpp:266 129 {*movsf_internal}
     (nil))
(insn 677 927 678 44 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])
        (reg:SF 0 ax [599])) sim2fitman_fmtext_o.cpp:266 129 {*movsf_internal}
     (nil))
(insn 678 677 679 44 (set (reg:SI 0 ax [600])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
(insn 679 678 680 44 (set (reg:DI 0 ax [orig:375 D.6028 ] [375])
        (sign_extend:DI (reg:SI 0 ax [600]))) sim2fitman_fmtext_o.cpp:267 142 {*extendsidi2_rex64}
     (nil))
(insn 680 679 681 44 (parallel [
            (set (reg:DI 1 dx [orig:376 D.6028 ] [376])
                (ashift:DI (reg:DI 0 ax [orig:375 D.6028 ] [375])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:267 497 {*ashldi3_1}
     (nil))
(insn 681 680 682 44 (set (reg/f:DI 0 ax [601])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:267 89 {*movdi_internal}
     (nil))
(insn 682 681 683 44 (parallel [
            (set (reg/f:DI 0 ax [orig:377 D.6034 ] [377])
                (plus:DI (reg/f:DI 0 ax [601])
                    (reg:DI 1 dx [orig:376 D.6028 ] [376])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:267 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:376 D.6028 ] [376]))
        (nil)))
(insn 683 682 684 44 (set (reg/f:DI 0 ax [orig:378 D.6036 ] [378])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:377 D.6034 ] [377]) [0 _359->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:267 89 {*movdi_internal}
     (nil))
(insn 684 683 685 44 (set (reg:SI 1 dx [602])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:267 90 {*movsi_internal}
     (nil))
(insn 685 684 686 44 (set (reg:DI 1 dx [orig:379 D.6028 ] [379])
        (sign_extend:DI (reg:SI 1 dx [602]))) sim2fitman_fmtext_o.cpp:267 142 {*extendsidi2_rex64}
     (nil))
(insn 686 685 687 44 (parallel [
            (set (reg:DI 1 dx [orig:380 D.6028 ] [380])
                (ashift:DI (reg:DI 1 dx [orig:379 D.6028 ] [379])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:267 497 {*ashldi3_1}
     (nil))
(insn 687 686 688 44 (parallel [
            (set (reg/f:DI 1 dx [orig:381 D.6036 ] [381])
                (plus:DI (reg:DI 1 dx [orig:380 D.6028 ] [380])
                    (reg/f:DI 0 ax [orig:378 D.6036 ] [378])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:267 221 {*adddi_1}
     (nil))
(insn 688 687 689 44 (set (reg:SF 0 ax [603])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])) sim2fitman_fmtext_o.cpp:267 129 {*movsf_internal}
     (nil))
(insn 689 688 690 44 (set (mem:SF (reg/f:DI 1 dx [orig:381 D.6036 ] [381]) [0 *_363+0 S4 A32])
        (reg:SF 0 ax [603])) sim2fitman_fmtext_o.cpp:267 129 {*movsf_internal}
     (nil))
(insn 690 689 691 44 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:265 220 {*addsi_1}
     (nil))
;;  succ:       45 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU,DFS_BACK)
;;              43 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 361 362 363 364 365 366 604 605 606
(code_label 691 690 692 45 28 "" [1 uses])
(note 692 691 693 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 693 692 694 45 (set (reg:SI 0 ax [604])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
(insn 694 693 695 45 (set (reg:DI 0 ax [orig:361 D.6031 ] [361])
        (sign_extend:DI (reg:SI 0 ax [604]))) sim2fitman_fmtext_o.cpp:265 142 {*extendsidi2_rex64}
     (nil))
(insn 695 694 696 45 (set (reg:SI 1 dx [605])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:265 90 {*movsi_internal}
     (nil))
(insn 696 695 928 45 (set (reg:DI 1 dx [orig:362 D.6028 ] [362])
        (sign_extend:DI (reg:SI 1 dx [605]))) sim2fitman_fmtext_o.cpp:265 142 {*extendsidi2_rex64}
     (nil))
(insn 928 696 697 45 (set (reg:DI 2 cx [orig:363 D.6028 ] [363])
        (reg:DI 1 dx [orig:362 D.6028 ] [362])) sim2fitman_fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 697 928 698 45 (parallel [
            (set (reg:DI 2 cx [orig:363 D.6028 ] [363])
                (ashift:DI (reg:DI 2 cx [orig:363 D.6028 ] [363])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:265 497 {*ashldi3_1}
     (nil))
(insn 698 697 699 45 (set (reg/f:DI 1 dx [606])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 699 698 700 45 (parallel [
            (set (reg/f:DI 1 dx [orig:364 D.6030 ] [364])
                (plus:DI (reg/f:DI 1 dx [606])
                    (reg:DI 2 cx [orig:363 D.6028 ] [363])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:265 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:363 D.6028 ] [363]))
        (nil)))
(insn 700 699 701 45 (set (reg:DI 1 dx [orig:365 D.6031 ] [365])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:364 D.6030 ] [364])
                (const_int 16 [0x10])) [0 _345->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:265 89 {*movdi_internal}
     (nil))
(insn 701 700 703 45 (parallel [
            (set (reg:DI 1 dx [orig:366 D.6031 ] [366])
                (ashift:DI (reg:DI 1 dx [orig:365 D.6031 ] [365])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:265 497 {*ashldi3_1}
     (nil))
(insn 703 701 704 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:361 D.6031 ] [361])
            (reg:DI 1 dx [orig:366 D.6031 ] [366]))) sim2fitman_fmtext_o.cpp:265 8 {*cmpdi_1}
     (nil))
(jump_insn 704 703 705 45 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 702)
            (pc))) sim2fitman_fmtext_o.cpp:265 596 {*jcc_1}
     (nil)
 -> 702)
;;  succ:       44
;;              46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;;              42
;;              41 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 705 704 706 46 27 "" [2 uses])
(note 706 705 707 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 707 706 862 46 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:278 90 {*movsi_internal}
     (nil))
(jump_insn 862 707 863 46 (set (pc)
        (label_ref 783)) sim2fitman_fmtext_o.cpp:278 636 {jump}
     (nil)
 -> 783)
;;  succ:       48 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 863 862 794)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624
(code_label 794 863 710 47 31 "" [1 uses])
(note 710 794 711 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 711 710 712 47 (set (reg:SI 0 ax [607])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 712 711 713 47 (set (reg:DI 0 ax [orig:388 D.6028 ] [388])
        (sign_extend:DI (reg:SI 0 ax [607]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 713 712 714 47 (parallel [
            (set (reg:DI 1 dx [orig:389 D.6028 ] [389])
                (ashift:DI (reg:DI 0 ax [orig:388 D.6028 ] [388])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 497 {*ashldi3_1}
     (nil))
(insn 714 713 715 47 (set (reg/f:DI 0 ax [608])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 715 714 716 47 (parallel [
            (set (reg/f:DI 0 ax [orig:390 D.6035 ] [390])
                (plus:DI (reg/f:DI 0 ax [608])
                    (reg:DI 1 dx [orig:389 D.6028 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:389 D.6028 ] [389]))
        (nil)))
(insn 716 715 717 47 (set (reg/f:DI 0 ax [orig:391 D.6036 ] [391])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:390 D.6035 ] [390]) [0 _374->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 717 716 718 47 (set (reg:SI 1 dx [609])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 718 717 719 47 (set (reg:DI 1 dx [orig:392 D.6028 ] [392])
        (sign_extend:DI (reg:SI 1 dx [609]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 719 718 720 47 (parallel [
            (set (reg:DI 1 dx [orig:393 D.6028 ] [393])
                (ashift:DI (reg:DI 1 dx [orig:392 D.6028 ] [392])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 497 {*ashldi3_1}
     (nil))
(insn 720 719 721 47 (parallel [
            (set (reg/f:DI 1 dx [orig:394 D.6036 ] [394])
                (plus:DI (reg:DI 1 dx [orig:393 D.6028 ] [393])
                    (reg/f:DI 0 ax [orig:391 D.6036 ] [391])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 221 {*adddi_1}
     (nil))
(insn 721 720 722 47 (set (reg:SI 0 ax [610])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 722 721 723 47 (set (reg:DI 0 ax [orig:395 D.6028 ] [395])
        (sign_extend:DI (reg:SI 0 ax [610]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 723 722 724 47 (parallel [
            (set (reg:DI 2 cx [orig:396 D.6028 ] [396])
                (ashift:DI (reg:DI 0 ax [orig:395 D.6028 ] [395])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 497 {*ashldi3_1}
     (nil))
(insn 724 723 725 47 (set (reg/f:DI 0 ax [611])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 725 724 726 47 (parallel [
            (set (reg/f:DI 0 ax [orig:397 D.6035 ] [397])
                (plus:DI (reg/f:DI 0 ax [611])
                    (reg:DI 2 cx [orig:396 D.6028 ] [396])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 2 cx [orig:396 D.6028 ] [396]))
        (nil)))
(insn 726 725 727 47 (set (reg/f:DI 0 ax [orig:398 D.6036 ] [398])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:397 D.6035 ] [397]) [0 _381->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 727 726 728 47 (set (reg:SI 2 cx [612])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 728 727 729 47 (set (reg:DI 2 cx [orig:399 D.6028 ] [399])
        (sign_extend:DI (reg:SI 2 cx [612]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 729 728 730 47 (parallel [
            (set (reg:DI 2 cx [orig:400 D.6028 ] [400])
                (ashift:DI (reg:DI 2 cx [orig:399 D.6028 ] [399])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 497 {*ashldi3_1}
     (nil))
(insn 730 729 731 47 (parallel [
            (set (reg/f:DI 0 ax [orig:401 D.6036 ] [401])
                (plus:DI (reg/f:DI 0 ax [orig:398 D.6036 ] [398])
                    (reg:DI 2 cx [orig:400 D.6028 ] [400])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 221 {*adddi_1}
     (nil))
(insn 731 730 732 47 (set (reg:SF 22 xmm1 [orig:402 D.6044 ] [402])
        (mem:SF (reg/f:DI 0 ax [orig:401 D.6036 ] [401]) [0 *_385+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 129 {*movsf_internal}
     (nil))
(insn 732 731 733 47 (set (reg:SI 0 ax [613])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 733 732 734 47 (set (reg:DI 0 ax [orig:403 D.6028 ] [403])
        (sign_extend:DI (reg:SI 0 ax [613]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 734 733 735 47 (parallel [
            (set (reg:DI 2 cx [orig:404 D.6028 ] [404])
                (ashift:DI (reg:DI 0 ax [orig:403 D.6028 ] [403])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 497 {*ashldi3_1}
     (nil))
(insn 735 734 736 47 (set (reg/f:DI 0 ax [614])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 736 735 737 47 (parallel [
            (set (reg/f:DI 0 ax [orig:405 D.6034 ] [405])
                (plus:DI (reg/f:DI 0 ax [614])
                    (reg:DI 2 cx [orig:404 D.6028 ] [404])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:404 D.6028 ] [404]))
        (nil)))
(insn 737 736 738 47 (set (reg/f:DI 0 ax [orig:406 D.6036 ] [406])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:405 D.6034 ] [405]) [0 _389->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:279 89 {*movdi_internal}
     (nil))
(insn 738 737 739 47 (set (reg:SI 2 cx [615])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 90 {*movsi_internal}
     (nil))
(insn 739 738 740 47 (set (reg:DI 2 cx [orig:407 D.6028 ] [407])
        (sign_extend:DI (reg:SI 2 cx [615]))) sim2fitman_fmtext_o.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 740 739 741 47 (parallel [
            (set (reg:DI 2 cx [orig:408 D.6028 ] [408])
                (ashift:DI (reg:DI 2 cx [orig:407 D.6028 ] [407])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 497 {*ashldi3_1}
     (nil))
(insn 741 740 742 47 (parallel [
            (set (reg/f:DI 0 ax [orig:409 D.6036 ] [409])
                (plus:DI (reg/f:DI 0 ax [orig:406 D.6036 ] [406])
                    (reg:DI 2 cx [orig:408 D.6028 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:279 221 {*adddi_1}
     (nil))
(insn 742 741 743 47 (set (reg:SF 21 xmm0 [orig:410 D.6044 ] [410])
        (mem:SF (reg/f:DI 0 ax [orig:409 D.6036 ] [409]) [0 *_393+0 S4 A32])) sim2fitman_fmtext_o.cpp:279 129 {*movsf_internal}
     (nil))
(insn 743 742 931 47 (set (reg:SF 22 xmm1 [orig:411 D.6044 ] [411])
        (plus:SF (reg:SF 22 xmm1 [orig:411 D.6044 ] [411])
            (reg:SF 21 xmm0 [orig:410 D.6044 ] [410]))) sim2fitman_fmtext_o.cpp:279 775 {*fop_sf_comm_sse}
     (nil))
(insn 931 743 744 47 (set (reg:SF 0 ax [orig:411 D.6044 ] [411])
        (reg:SF 22 xmm1 [orig:411 D.6044 ] [411])) sim2fitman_fmtext_o.cpp:279 129 {*movsf_internal}
     (nil))
(insn 744 931 745 47 (set (mem:SF (reg/f:DI 1 dx [orig:394 D.6036 ] [394]) [0 *_378+0 S4 A32])
        (reg:SF 0 ax [orig:411 D.6044 ] [411])) sim2fitman_fmtext_o.cpp:279 129 {*movsf_internal}
     (nil))
(insn 745 744 746 47 (set (reg:SI 0 ax [616])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 746 745 747 47 (set (reg:DI 0 ax [orig:412 D.6028 ] [412])
        (sign_extend:DI (reg:SI 0 ax [616]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 747 746 748 47 (parallel [
            (set (reg:DI 1 dx [orig:413 D.6028 ] [413])
                (ashift:DI (reg:DI 0 ax [orig:412 D.6028 ] [412])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 497 {*ashldi3_1}
     (nil))
(insn 748 747 749 47 (set (reg/f:DI 0 ax [617])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 749 748 750 47 (parallel [
            (set (reg/f:DI 0 ax [orig:414 D.6035 ] [414])
                (plus:DI (reg/f:DI 0 ax [617])
                    (reg:DI 1 dx [orig:413 D.6028 ] [413])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:413 D.6028 ] [413]))
        (nil)))
(insn 750 749 751 47 (set (reg/f:DI 0 ax [orig:415 D.6036 ] [415])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:414 D.6035 ] [414]) [0 _398->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 751 750 752 47 (set (reg:SI 1 dx [618])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 752 751 753 47 (set (reg:DI 1 dx [orig:416 D.6037 ] [416])
        (sign_extend:DI (reg:SI 1 dx [618]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 753 752 754 47 (parallel [
            (set (reg:DI 1 dx [orig:417 D.6037 ] [417])
                (plus:DI (reg:DI 1 dx [orig:416 D.6037 ] [416])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (nil))
(insn 754 753 755 47 (parallel [
            (set (reg:DI 1 dx [orig:418 D.6037 ] [418])
                (ashift:DI (reg:DI 1 dx [orig:417 D.6037 ] [417])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 497 {*ashldi3_1}
     (nil))
(insn 755 754 756 47 (parallel [
            (set (reg/f:DI 1 dx [orig:419 D.6036 ] [419])
                (plus:DI (reg:DI 1 dx [orig:418 D.6037 ] [418])
                    (reg/f:DI 0 ax [orig:415 D.6036 ] [415])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (nil))
(insn 756 755 757 47 (set (reg:SI 0 ax [619])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 757 756 758 47 (set (reg:DI 0 ax [orig:420 D.6028 ] [420])
        (sign_extend:DI (reg:SI 0 ax [619]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 758 757 759 47 (parallel [
            (set (reg:DI 2 cx [orig:421 D.6028 ] [421])
                (ashift:DI (reg:DI 0 ax [orig:420 D.6028 ] [420])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 497 {*ashldi3_1}
     (nil))
(insn 759 758 760 47 (set (reg/f:DI 0 ax [620])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 760 759 761 47 (parallel [
            (set (reg/f:DI 0 ax [orig:422 D.6035 ] [422])
                (plus:DI (reg/f:DI 0 ax [620])
                    (reg:DI 2 cx [orig:421 D.6028 ] [421])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 2 cx [orig:421 D.6028 ] [421]))
        (nil)))
(insn 761 760 762 47 (set (reg/f:DI 0 ax [orig:423 D.6036 ] [423])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:422 D.6035 ] [422]) [0 _406->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 762 761 763 47 (set (reg:SI 2 cx [621])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 763 762 764 47 (set (reg:DI 2 cx [orig:424 D.6037 ] [424])
        (sign_extend:DI (reg:SI 2 cx [621]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 764 763 765 47 (parallel [
            (set (reg:DI 2 cx [orig:425 D.6037 ] [425])
                (plus:DI (reg:DI 2 cx [orig:424 D.6037 ] [424])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (nil))
(insn 765 764 766 47 (parallel [
            (set (reg:DI 2 cx [orig:426 D.6037 ] [426])
                (ashift:DI (reg:DI 2 cx [orig:425 D.6037 ] [425])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 497 {*ashldi3_1}
     (nil))
(insn 766 765 767 47 (parallel [
            (set (reg/f:DI 0 ax [orig:427 D.6036 ] [427])
                (plus:DI (reg/f:DI 0 ax [orig:423 D.6036 ] [423])
                    (reg:DI 2 cx [orig:426 D.6037 ] [426])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (nil))
(insn 767 766 768 47 (set (reg:SF 22 xmm1 [orig:428 D.6044 ] [428])
        (mem:SF (reg/f:DI 0 ax [orig:427 D.6036 ] [427]) [0 *_411+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 129 {*movsf_internal}
     (nil))
(insn 768 767 769 47 (set (reg:SI 0 ax [622])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 769 768 770 47 (set (reg:DI 0 ax [orig:429 D.6028 ] [429])
        (sign_extend:DI (reg:SI 0 ax [622]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 770 769 771 47 (parallel [
            (set (reg:DI 2 cx [orig:430 D.6028 ] [430])
                (ashift:DI (reg:DI 0 ax [orig:429 D.6028 ] [429])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 497 {*ashldi3_1}
     (nil))
(insn 771 770 772 47 (set (reg/f:DI 0 ax [623])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 in_data+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 772 771 773 47 (parallel [
            (set (reg/f:DI 0 ax [orig:431 D.6034 ] [431])
                (plus:DI (reg/f:DI 0 ax [623])
                    (reg:DI 2 cx [orig:430 D.6028 ] [430])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:430 D.6028 ] [430]))
        (nil)))
(insn 773 772 774 47 (set (reg/f:DI 0 ax [orig:432 D.6036 ] [432])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:431 D.6034 ] [431]) [0 _415->fl+0 S8 A64])) sim2fitman_fmtext_o.cpp:280 89 {*movdi_internal}
     (nil))
(insn 774 773 775 47 (set (reg:SI 2 cx [624])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 90 {*movsi_internal}
     (nil))
(insn 775 774 776 47 (set (reg:DI 2 cx [orig:433 D.6037 ] [433])
        (sign_extend:DI (reg:SI 2 cx [624]))) sim2fitman_fmtext_o.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 776 775 777 47 (parallel [
            (set (reg:DI 2 cx [orig:434 D.6037 ] [434])
                (plus:DI (reg:DI 2 cx [orig:433 D.6037 ] [433])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (nil))
(insn 777 776 778 47 (parallel [
            (set (reg:DI 2 cx [orig:435 D.6037 ] [435])
                (ashift:DI (reg:DI 2 cx [orig:434 D.6037 ] [434])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 497 {*ashldi3_1}
     (nil))
(insn 778 777 779 47 (parallel [
            (set (reg/f:DI 0 ax [orig:436 D.6036 ] [436])
                (plus:DI (reg/f:DI 0 ax [orig:432 D.6036 ] [432])
                    (reg:DI 2 cx [orig:435 D.6037 ] [435])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:280 221 {*adddi_1}
     (nil))
(insn 779 778 780 47 (set (reg:SF 21 xmm0 [orig:437 D.6044 ] [437])
        (mem:SF (reg/f:DI 0 ax [orig:436 D.6036 ] [436]) [0 *_420+0 S4 A32])) sim2fitman_fmtext_o.cpp:280 129 {*movsf_internal}
     (nil))
(insn 780 779 933 47 (set (reg:SF 22 xmm1 [orig:438 D.6044 ] [438])
        (plus:SF (reg:SF 22 xmm1 [orig:438 D.6044 ] [438])
            (reg:SF 21 xmm0 [orig:437 D.6044 ] [437]))) sim2fitman_fmtext_o.cpp:280 775 {*fop_sf_comm_sse}
     (nil))
(insn 933 780 781 47 (set (reg:SF 0 ax [orig:438 D.6044 ] [438])
        (reg:SF 22 xmm1 [orig:438 D.6044 ] [438])) sim2fitman_fmtext_o.cpp:280 129 {*movsf_internal}
     (nil))
(insn 781 933 782 47 (set (mem:SF (reg/f:DI 1 dx [orig:419 D.6036 ] [419]) [0 *_403+0 S4 A32])
        (reg:SF 0 ax [orig:438 D.6044 ] [438])) sim2fitman_fmtext_o.cpp:280 129 {*movsf_internal}
     (nil))
(insn 782 781 783 47 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:278 220 {*addsi_1}
     (nil))
;;  succ:       48 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU,DFS_BACK)
;;              46 [100.0%] 
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 382 383 384 385 386 387 625 626 627
(code_label 783 782 784 48 30 "" [1 uses])
(note 784 783 785 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 785 784 786 48 (set (reg:SI 0 ax [625])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 countPoint+0 S4 A32])) sim2fitman_fmtext_o.cpp:278 90 {*movsi_internal}
     (nil))
(insn 786 785 787 48 (set (reg:DI 0 ax [orig:382 D.6031 ] [382])
        (sign_extend:DI (reg:SI 0 ax [625]))) sim2fitman_fmtext_o.cpp:278 142 {*extendsidi2_rex64}
     (nil))
(insn 787 786 788 48 (set (reg:SI 1 dx [626])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])) sim2fitman_fmtext_o.cpp:278 90 {*movsi_internal}
     (nil))
(insn 788 787 934 48 (set (reg:DI 1 dx [orig:383 D.6028 ] [383])
        (sign_extend:DI (reg:SI 1 dx [626]))) sim2fitman_fmtext_o.cpp:278 142 {*extendsidi2_rex64}
     (nil))
(insn 934 788 789 48 (set (reg:DI 2 cx [orig:384 D.6028 ] [384])
        (reg:DI 1 dx [orig:383 D.6028 ] [383])) sim2fitman_fmtext_o.cpp:278 89 {*movdi_internal}
     (nil))
(insn 789 934 790 48 (parallel [
            (set (reg:DI 2 cx [orig:384 D.6028 ] [384])
                (ashift:DI (reg:DI 2 cx [orig:384 D.6028 ] [384])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:278 497 {*ashldi3_1}
     (nil))
(insn 790 789 791 48 (set (reg/f:DI 1 dx [627])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:278 89 {*movdi_internal}
     (nil))
(insn 791 790 792 48 (parallel [
            (set (reg/f:DI 1 dx [orig:385 D.6030 ] [385])
                (plus:DI (reg/f:DI 1 dx [627])
                    (reg:DI 2 cx [orig:384 D.6028 ] [384])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:278 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:384 D.6028 ] [384]))
        (nil)))
(insn 792 791 793 48 (set (reg:DI 1 dx [orig:386 D.6031 ] [386])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:385 D.6030 ] [385])
                (const_int 16 [0x10])) [0 _369->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:278 89 {*movdi_internal}
     (nil))
(insn 793 792 795 48 (parallel [
            (set (reg:DI 1 dx [orig:387 D.6031 ] [387])
                (ashift:DI (reg:DI 1 dx [orig:386 D.6031 ] [386])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:278 497 {*ashldi3_1}
     (nil))
(insn 795 793 796 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:382 D.6031 ] [382])
            (reg:DI 1 dx [orig:387 D.6031 ] [387]))) sim2fitman_fmtext_o.cpp:278 8 {*cmpdi_1}
     (nil))
(jump_insn 796 795 797 48 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 794)
            (pc))) sim2fitman_fmtext_o.cpp:278 596 {*jcc_1}
     (nil)
 -> 794)
;;  succ:       47
;;              49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 797 796 798 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 798 797 799 49 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:133 220 {*addsi_1}
     (nil))
;;  succ:       50 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 628
(code_label 799 798 800 50 8 "" [1 uses])
(note 800 799 802 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 802 800 803 50 (set (reg:SI 0 ax [628])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countFID+0 S4 A32])) sim2fitman_fmtext_o.cpp:133 90 {*movsi_internal}
     (nil))
(insn 803 802 804 50 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [628])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 numSets+0 S4 A32]))) sim2fitman_fmtext_o.cpp:133 7 {*cmpsi_1}
     (nil))
(jump_insn 804 803 805 50 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 801)
            (pc))) sim2fitman_fmtext_o.cpp:133 596 {*jcc_1}
     (nil)
 -> 801)
;;  succ:       11
;;              51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 805 804 806 51 3 "" [1 uses])
(note 806 805 807 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 807 806 808 51 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:50 220 {*addsi_1}
     (nil))
;;  succ:       52 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 629
(code_label 808 807 809 52 2 "" [1 uses])
(note 809 808 810 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 810 809 811 52 (set (reg/f:DI 0 ax [629])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 fid+0 S8 A64])) sim2fitman_fmtext_o.cpp:50 89 {*movdi_internal}
     (nil))
(insn 811 810 813 52 (set (reg:SI 0 ax [orig:83 D.6027 ] [83])
        (mem:SI (reg/f:DI 0 ax [629]) [0 *fid_29(D)+0 S4 A32])) sim2fitman_fmtext_o.cpp:50 90 {*movsi_internal}
     (nil))
(insn 813 811 814 52 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.6027 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 i+0 S4 A32]))) sim2fitman_fmtext_o.cpp:50 7 {*cmpsi_1}
     (nil))
(jump_insn 814 813 815 52 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 812)
            (pc))) sim2fitman_fmtext_o.cpp:50 596 {*jcc_1}
     (nil)
 -> 812)
;;  succ:       3
;;              53 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 439 440 630 631
(note 815 814 816 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 816 815 817 53 (set (reg:DI 0 ax [630])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 temp_double+0 S8 A64])) sim2fitman_fmtext_o.cpp:319 89 {*movdi_internal}
     (nil))
(insn 817 816 818 53 (set (reg:DI 5 di)
        (reg:DI 0 ax [630])) sim2fitman_fmtext_o.cpp:319 89 {*movdi_internal}
     (nil))
(call_insn 818 817 819 53 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b9d769f0000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:319 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 819 818 820 53 (set (reg:DI 0 ax [631])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 temp_double2+0 S8 A64])) sim2fitman_fmtext_o.cpp:320 89 {*movdi_internal}
     (nil))
(insn 820 819 821 53 (set (reg:DI 5 di)
        (reg:DI 0 ax [631])) sim2fitman_fmtext_o.cpp:320 89 {*movdi_internal}
     (nil))
(call_insn 821 820 822 53 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b9d769f0000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:320 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 822 821 825 53 (set (reg:SI 0 ax [orig:439 D.6027 ] [439])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:322 90 {*movsi_internal}
     (nil))
(insn 825 822 829 53 (set (reg:SI 0 ax [orig:440 <retval> ] [440])
        (reg:SI 0 ax [orig:439 D.6027 ] [439])) sim2fitman_fmtext_o.cpp:322 90 {*movsi_internal}
     (nil))
(insn 829 825 830 53 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:440 <retval> ] [440])) sim2fitman_fmtext_o.cpp:323 90 {*movsi_internal}
     (nil))
(insn 830 829 864 53 (use (reg/i:SI 0 ax)) sim2fitman_fmtext_o.cpp:323 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 864 830 0 NOTE_INSN_DELETED)

;; Function void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*) (_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess, funcdef_no=3, decl_uid=5336, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 48:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 57:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 59:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 76:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 78:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 82:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=188 from oldreg=154, assigning class CREG to r188
      Creating newreg=189 from oldreg=156, assigning class DIREG to r189
   82: {r188:DI=unspec[[r189:DI],r158:QI,0x1,r188:DI] 23;clobber r189:DI;clobber flags:CC;}
      REG_DEAD r158:QI
      REG_DEAD r157:DI
      REG_DEAD r156:DI
      REG_UNUSED r156:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  241: r188:DI=r157:DI
  243: r189:DI=r156:DI
    Inserting insn reload after:
  242: r154:DI=r188:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 86
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 88:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 100:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 103:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 111:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 114:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 117:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 120:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) r  (1) rm {extendhisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 137:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 140:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 143:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 152:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 161:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 163:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 167:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 169:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 173:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 174:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 175:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 179:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 181:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 191
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 192:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 196:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 203:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 205
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 206:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 208:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 210:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 212:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 214:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 226:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (1) rzw {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
  BB 3
   Insn 236: point = 0
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 23: point = 1
  BB 8
   Insn 231: point = 2
   Insn 230: point = 2
   Insn 229: point = 3
  BB 7
   Insn 227: point = 4
   Insn 226: point = 4
  BB 6
   Insn 224: point = 4
   Insn 223: point = 4
   Insn 221: point = 5
   Insn 220: point = 7
   Insn 219: point = 9
   Insn 218: point = 10
   Insn 217: point = 12
  BB 4
   Insn 238: point = 13
   Insn 183: point = 13
   Insn 182: point = 13
   Insn 181: point = 13
   Insn 180: point = 13
   Insn 179: point = 13
   Insn 178: point = 13
   Insn 177: point = 14
   Insn 176: point = 15
   Insn 175: point = 15
   Insn 174: point = 15
   Insn 173: point = 15
   Insn 172: point = 15
   Insn 171: point = 16
   Insn 170: point = 17
   Insn 169: point = 17
   Insn 168: point = 17
   Insn 167: point = 17
   Insn 166: point = 17
   Insn 165: point = 18
   Insn 164: point = 19
   Insn 163: point = 19
   Insn 162: point = 19
   Insn 161: point = 20
   Insn 160: point = 20
   Insn 159: point = 21
   Insn 158: point = 22
   Insn 157: point = 23
   Insn 156: point = 24
   Insn 155: point = 25
   Insn 154: point = 26
   Insn 153: point = 27
   Insn 152: point = 29
   Insn 151: point = 31
   Insn 150: point = 32
   Insn 149: point = 34
   Insn 148: point = 36
   Insn 147: point = 37
   Insn 146: point = 39
   Insn 145: point = 41
   Insn 144: point = 42
   Insn 143: point = 44
   Insn 142: point = 46
   Insn 141: point = 47
   Insn 140: point = 49
   Insn 139: point = 51
   Insn 138: point = 52
   Insn 137: point = 54
   Insn 136: point = 56
   Insn 135: point = 57
   Insn 134: point = 57
   Insn 133: point = 57
   Insn 132: point = 58
   Insn 131: point = 58
   Insn 130: point = 59
   Insn 129: point = 60
   Insn 128: point = 61
   Insn 127: point = 62
   Insn 126: point = 63
   Insn 125: point = 64
   Insn 124: point = 65
   Insn 123: point = 67
   Insn 122: point = 69
   Insn 121: point = 70
   Insn 120: point = 72
   Insn 119: point = 74
   Insn 118: point = 75
   Insn 117: point = 77
   Insn 116: point = 79
   Insn 115: point = 80
   Insn 114: point = 82
   Insn 113: point = 84
   Insn 112: point = 85
   Insn 111: point = 87
   Insn 110: point = 89
   Insn 109: point = 90
   Insn 108: point = 92
   Insn 107: point = 94
   Insn 106: point = 95
   Insn 105: point = 95
   Insn 104: point = 95
   Insn 103: point = 96
   Insn 102: point = 96
   Insn 101: point = 97
   Insn 100: point = 98
   Insn 99: point = 100
   Insn 98: point = 101
   Insn 97: point = 101
   Insn 96: point = 101
   Insn 95: point = 102
   Insn 94: point = 102
   Insn 93: point = 103
   Insn 92: point = 104
   Insn 91: point = 105
   Insn 90: point = 105
   Insn 89: point = 106
   Insn 88: point = 107
   Insn 87: point = 108
   Insn 86: point = 108
   Insn 84: point = 110
   Insn 83: point = 112
   Insn 242: point = 114
	Hard reg 0 is preferable by r188 with profit 1
   Insn 82: point = 116
   Insn 243: point = 118
	Hard reg 4 is preferable by r189 with profit 1
   Insn 241: point = 120
	Hard reg 0 is preferable by r188 with profit 1
	Hard reg 2 is preferable by r188 with profit 1
   Insn 81: point = 122
   Insn 80: point = 123
   Insn 79: point = 125
   Insn 85: point = 126
   Insn 78: point = 127
   Insn 77: point = 129
   Insn 76: point = 130
   Insn 75: point = 132
   Insn 74: point = 133
   Insn 73: point = 133
   Insn 72: point = 133
   Insn 71: point = 134
   Insn 70: point = 134
   Insn 69: point = 135
   Insn 68: point = 136
   Insn 67: point = 138
   Insn 66: point = 139
   Insn 65: point = 139
   Insn 64: point = 139
   Insn 63: point = 140
   Insn 62: point = 140
   Insn 61: point = 141
   Insn 60: point = 142
   Insn 59: point = 144
   Insn 58: point = 146
   Insn 57: point = 147
   Insn 56: point = 149
   Insn 55: point = 150
   Insn 54: point = 150
   Insn 53: point = 150
   Insn 52: point = 151
   Insn 51: point = 151
   Insn 50: point = 152
   Insn 49: point = 153
   Insn 48: point = 155
   Insn 47: point = 157
   Insn 46: point = 158
   Insn 45: point = 158
   Insn 44: point = 158
   Insn 43: point = 159
   Insn 42: point = 159
   Insn 41: point = 160
   Insn 40: point = 161
   Insn 39: point = 163
   Insn 38: point = 164
   Insn 37: point = 164
   Insn 36: point = 164
   Insn 35: point = 165
   Insn 34: point = 165
   Insn 33: point = 166
   Insn 32: point = 167
   Insn 31: point = 169
   Insn 30: point = 171
  BB 2
   Insn 21: point = 172
   Insn 20: point = 172
   Insn 19: point = 173
   Insn 18: point = 174
   Insn 17: point = 174
   Insn 16: point = 175
   Insn 15: point = 176
   Insn 14: point = 176
   Insn 13: point = 177
   Insn 12: point = 177
   Insn 11: point = 178
   Insn 7: point = 178
   Insn 6: point = 178
   Insn 5: point = 178
   Insn 4: point = 178
   Insn 3: point = 178
   Insn 2: point = 178
  BB 5
   Insn 214: point = 178
   Insn 213: point = 178
   Insn 212: point = 178
   Insn 211: point = 178
   Insn 210: point = 179
   Insn 209: point = 179
   Insn 208: point = 180
   Insn 207: point = 181
   Insn 206: point = 183
   Insn 205: point = 185
   Insn 204: point = 187
   Insn 203: point = 188
   Insn 202: point = 190
   Insn 201: point = 192
   Insn 200: point = 194
   Insn 199: point = 195
   Insn 198: point = 195
   Insn 197: point = 195
   Insn 196: point = 196
   Insn 195: point = 196
   Insn 194: point = 197
   Insn 193: point = 198
   Insn 192: point = 200
   Insn 191: point = 202
   Insn 190: point = 204
   Insn 189: point = 205
   Insn 188: point = 207
   Insn 187: point = 209
 r83: [174..175]
 r84: [172..173]
 r85: [168..169]
 r86: [165..167]
 r87: [159..161]
 r88: [154..155]
 r89: [151..153]
 r90: [143..147]
 r91: [143..144]
 r92: [140..142]
 r93: [134..136]
 r94: [106..130]
 r95: [105..127]
 r96: [109..110]
 r97: [107..108]
 r98: [102..104]
 r99: [96..98]
 r100: [91..92]
 r101: [63..90]
 r102: [86..87]
 r103: [62..85]
 r104: [81..82]
 r105: [61..80]
 r106: [76..77]
 r107: [60..75]
 r108: [71..72]
 r109: [59..70]
 r110: [66..67]
 r111: [58..65]
 r112: [53..54]
 r113: [25..52]
 r114: [48..49]
 r115: [24..47]
 r116: [43..44]
 r117: [23..42]
 r118: [38..39]
 r119: [22..37]
 r120: [33..34]
 r121: [21..32]
 r122: [28..29]
 r123: [20..27]
 r124: [4..10]
 r125: [6..7]
 r126: [4..5]
 r127: [206..207]
 r128: [203..205]
 r129: [201..202]
 r130: [199..200]
 r131: [196..198]
 r132: [191..192]
 r133: [189..190]
 r134: [186..188]
 r135: [184..185]
 r136: [182..183]
 r137: [179..181]
 r138: [176..177]
 r139: [0..1]
 r140: [170..171]
 r141: [164..166]
 r142: [162..163]
 r143: [158..160]
 r144: [156..157]
 r145: [150..152]
 r146: [148..149]
 r147: [145..146]
 r148: [139..141]
 r149: [137..138]
 r150: [133..135]
 r151: [131..132]
 r152: [128..129]
 r153: [124..126]
 r154: [113..114]
 r155: [111..112]
 r156: [119..123]
 r157: [121..125]
 r158: [117..122]
 r159: [101..103]
 r160: [99..100]
 r161: [95..97]
 r162: [93..94]
 r163: [88..89]
 r164: [83..84]
 r165: [78..79]
 r166: [73..74]
 r167: [68..69]
 r168: [57..64]
 r169: [55..56]
 r170: [50..51]
 r171: [45..46]
 r172: [40..41]
 r173: [35..36]
 r174: [30..31]
 r175: [19..26]
 r176: [17..18]
 r177: [15..16]
 r178: [13..14]
 r179: [208..209]
 r180: [203..204]
 r181: [195..197]
 r182: [193..194]
 r183: [186..187]
 r184: [178..180]
 r185: [11..12]
 r186: [8..9]
 r187: [2..3]
 r188: [115..120]
 r189: [116..118]
Compressing live ranges: from 210 to 156 - 74%
Ranges after the compression:
 r83: [126..127]
 r84: [124..125]
 r85: [120..121]
 r86: [118..119]
 r87: [114..115]
 r88: [110..111]
 r89: [108..109]
 r90: [102..105]
 r91: [102..103]
 r92: [100..101]
 r93: [96..97]
 r94: [76..93]
 r95: [76..91]
 r96: [78..79]
 r97: [76..77]
 r98: [74..75]
 r99: [70..71]
 r100: [66..67]
 r101: [44..65]
 r102: [62..63]
 r103: [44..61]
 r104: [58..59]
 r105: [44..57]
 r106: [54..55]
 r107: [44..53]
 r108: [50..51]
 r109: [44..49]
 r110: [46..47]
 r111: [44..45]
 r112: [40..41]
 r113: [18..39]
 r114: [36..37]
 r115: [18..35]
 r116: [32..33]
 r117: [18..31]
 r118: [28..29]
 r119: [18..27]
 r120: [24..25]
 r121: [18..23]
 r122: [20..21]
 r123: [18..19]
 r124: [4..9]
 r125: [6..7]
 r126: [4..5]
 r127: [152..153]
 r128: [150..151]
 r129: [148..149]
 r130: [146..147]
 r131: [144..145]
 r132: [140..141]
 r133: [138..139]
 r134: [136..137]
 r135: [134..135]
 r136: [132..133]
 r137: [130..131]
 r138: [128..129]
 r139: [0..1]
 r140: [122..123]
 r141: [118..119]
 r142: [116..117]
 r143: [114..115]
 r144: [112..113]
 r145: [108..109]
 r146: [106..107]
 r147: [104..105]
 r148: [100..101]
 r149: [98..99]
 r150: [96..97]
 r151: [94..95]
 r152: [92..93]
 r153: [90..91]
 r154: [82..83]
 r155: [80..81]
 r156: [86..89]
 r157: [88..91]
 r158: [84..89]
 r159: [74..75]
 r160: [72..73]
 r161: [70..71]
 r162: [68..69]
 r163: [64..65]
 r164: [60..61]
 r165: [56..57]
 r166: [52..53]
 r167: [48..49]
 r168: [44..45]
 r169: [42..43]
 r170: [38..39]
 r171: [34..35]
 r172: [30..31]
 r173: [26..27]
 r174: [22..23]
 r175: [18..19]
 r176: [16..17]
 r177: [14..15]
 r178: [12..13]
 r179: [154..155]
 r180: [150..151]
 r181: [144..145]
 r182: [142..143]
 r183: [136..137]
 r184: [130..131]
 r185: [10..11]
 r186: [8..9]
 r187: [2..3]
 r188: [84..87]
 r189: [84..85]

********** Assignment #1: **********

	 Assigning to 188 (cl=CREG, orig=154, freq=3, tfirst=188, tfreq=3)...
	   Assign 2 to reload r188 (freq=3)
	 Assigning to 189 (cl=DIREG, orig=156, freq=2, tfirst=189, tfreq=2)...
	   Assign 5 to reload r189 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 40
changing reg in insn 42
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 68
changing reg in insn 70
changing reg in insn 76
changing reg in insn 89
changing reg in insn 78
changing reg in insn 90
changing reg in insn 85
changing reg in insn 84
changing reg in insn 86
changing reg in insn 88
changing reg in insn 87
changing reg in insn 92
changing reg in insn 94
changing reg in insn 100
changing reg in insn 102
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 126
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 127
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 128
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 129
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 130
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 131
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 155
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 156
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 157
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 158
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 159
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 160
changing reg in insn 218
changing reg in insn 223
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 223
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 195
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 207
changing reg in insn 209
changing reg in insn 12
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 80
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 80
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 93
changing reg in insn 96
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
changing reg in insn 125
changing reg in insn 133
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 151
changing reg in insn 152
changing reg in insn 154
changing reg in insn 162
changing reg in insn 165
changing reg in insn 166
changing reg in insn 171
changing reg in insn 172
changing reg in insn 177
changing reg in insn 178
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 194
changing reg in insn 197
changing reg in insn 200
changing reg in insn 201
changing reg in insn 204
changing reg in insn 208
changing reg in insn 211
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 229
changing reg in insn 230
deleting insn with uid = 16.
deleting insn with uid = 34.
deleting insn with uid = 42.
deleting insn with uid = 51.
deleting insn with uid = 62.
deleting insn with uid = 70.
deleting insn with uid = 241.
deleting insn with uid = 94.
deleting insn with uid = 102.
deleting insn with uid = 126.
deleting insn with uid = 127.
deleting insn with uid = 128.
deleting insn with uid = 129.
deleting insn with uid = 130.
deleting insn with uid = 131.
deleting insn with uid = 155.
deleting insn with uid = 156.
deleting insn with uid = 157.
deleting insn with uid = 158.
deleting insn with uid = 159.
deleting insn with uid = 160.
deleting insn with uid = 195.
deleting insn with uid = 209.
starting the processing of deferred insns
ending the processing of deferred insns


void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 37[r8] 38[r9]
;;  ref usage 	r0={90d,74u} r1={32d,16u,2e} r2={24d,6u} r4={36d,18u} r5={39d,20u} r6={1d,66u} r7={1d,27u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r17={36d,4u} r18={18d} r19={18d} r20={1d,1u,5e} r21={40d,21u} r22={22d,3u} r23={21d,2u} r24={21d,2u} r25={21d,2u} r26={20d,1u} r27={19d} r28={19d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={20d,2u} r38={19d,1u} r39={18d} r40={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} 
;;    total ref usage 1691{1418d,266u,7e} in 196{178 regular + 18 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 138
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
        (reg:DI 4 si [ data ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 index1+0 S4 A32])
        (reg:SI 37 r8 [ index1 ])) sim2fitman_fmtext_o.cpp:331 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
        (reg:DI 38 r9 [ procpar_info ])) sim2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:336 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])) sim2fitman_fmtext_o.cpp:338 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b9d76d76000 *.LC1>)) sim2fitman_fmtext_o.cpp:338 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [138])) sim2fitman_fmtext_o.cpp:338 89 {*movdi_internal}
     (nil))
(call_insn 15 14 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2b9d76b85e00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:338 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 15 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (reg/f:DI 0 ax [orig:83 D.6052 ] [83])) sim2fitman_fmtext_o.cpp:338 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:338 4 {*cmpdi_ccno_1}
     (nil))
(insn 19 18 20 2 (set (reg:QI 0 ax [orig:84 D.6053 ] [84])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:338 592 {*setcc_qi}
     (nil))
(insn 20 19 21 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.6053 ] [84])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:338 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) sim2fitman_fmtext_o.cpp:338 596 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 139
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])) sim2fitman_fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [139])) sim2fitman_fmtext_o.cpp:339 89 {*movdi_internal}
     (nil))
(call_insn 25 24 236 3 (call (mem:QI (symbol_ref:DI ("_Z7exit_08Pc") [flags 0x41]  <function_decl 0x2b9d76cd0700 exit_08>) [0 exit_08 S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:339 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 236 25 237 3 (set (pc)
        (label_ref 234)) 636 {jump}
     (nil)
 -> 234)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 237 236 28)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178
(code_label 28 237 29 4 36 "" [1 uses])
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:342 89 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 0 ax [orig:85 D.6054 ] [85])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [140])
                (const_int 328 [0x148])) [0 procpar_info_7(D)->num_points+0 S4 A64])) sim2fitman_fmtext_o.cpp:342 90 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 1 dx [orig:86 D.6054 ] [86])
                (ashift:SI (reg:SI 0 ax [orig:85 D.6054 ] [85])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:342 496 {*ashlsi3_1}
     (nil))
(insn 33 32 35 4 (set (reg:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:342 89 {*movdi_internal}
     (nil))
(insn 35 33 36 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b9d76d76098 *.LC2>)) sim2fitman_fmtext_o.cpp:342 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [141])) sim2fitman_fmtext_o.cpp:342 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:342 93 {*movqi_internal}
     (nil))
(call_insn 38 37 39 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:342 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:346 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:SI 1 dx [orig:87 D.6054 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [142])
                (const_int 508 [0x1fc])) [0 procpar_info_7(D)->nex+0 S4 A32])) sim2fitman_fmtext_o.cpp:346 90 {*movsi_internal}
     (nil))
(insn 41 40 43 4 (set (reg:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:346 89 {*movdi_internal}
     (nil))
(insn 43 41 44 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b9d76d76098 *.LC2>)) sim2fitman_fmtext_o.cpp:346 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [143])) sim2fitman_fmtext_o.cpp:346 89 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:346 93 {*movqi_internal}
     (nil))
(call_insn 46 45 47 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:346 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:351 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SF 21 xmm0 [orig:88 D.6055 ] [88])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [144])
                (const_int 4 [0x4])) [0 procpar_info_7(D)->dwell_time+0 S4 A32])) sim2fitman_fmtext_o.cpp:351 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DF 21 xmm0 [orig:89 D.6056 ] [89])
        (float_extend:DF (reg:SF 21 xmm0 [orig:88 D.6055 ] [88]))) sim2fitman_fmtext_o.cpp:351 152 {*extendsfdf2_sse}
     (nil))
(insn 50 49 52 4 (set (reg:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:351 89 {*movdi_internal}
     (nil))
(insn 52 50 53 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b9d76d76130 *.LC3>)) sim2fitman_fmtext_o.cpp:351 89 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [145])) sim2fitman_fmtext_o.cpp:351 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:351 93 {*movqi_internal}
     (nil))
(call_insn 55 54 56 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:351 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 56 55 57 4 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (set (reg:DF 22 xmm1 [orig:90 D.6056 ] [90])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [146])
                (const_int 336 [0x150])) [0 procpar_info_7(D)->main_frequency+0 S8 A64])) sim2fitman_fmtext_o.cpp:356 128 {*movdf_internal}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DF 21 xmm0 [orig:91 D.6056 ] [91])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [147])
                (const_int 344 [0x158])) [0 procpar_info_7(D)->offset_frequency+0 S8 A64])) sim2fitman_fmtext_o.cpp:356 128 {*movdf_internal}
     (nil))
(insn 60 59 61 4 (set (reg:DF 21 xmm0 [orig:92 D.6056 ] [92])
        (plus:DF (reg:DF 21 xmm0 [orig:91 D.6056 ] [91])
            (reg:DF 22 xmm1 [orig:90 D.6056 ] [90]))) sim2fitman_fmtext_o.cpp:356 776 {*fop_df_comm_sse}
     (nil))
(insn 61 60 63 4 (set (reg:DI 0 ax [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 63 61 64 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b9d76d761c8 *.LC4>)) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [148])) sim2fitman_fmtext_o.cpp:356 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:356 93 {*movqi_internal}
     (nil))
(call_insn 66 65 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:356 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 67 66 68 4 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:358 89 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:SI 1 dx [orig:93 D.6054 ] [93])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [149])
                (const_int 324 [0x144])) [0 procpar_info_7(D)->num_transients+0 S4 A32])) sim2fitman_fmtext_o.cpp:358 90 {*movsi_internal}
     (nil))
(insn 69 68 71 4 (set (reg:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:358 89 {*movdi_internal}
     (nil))
(insn 71 69 72 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b9d76d76098 *.LC2>)) sim2fitman_fmtext_o.cpp:358 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [150])) sim2fitman_fmtext_o.cpp:358 89 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:358 93 {*movqi_internal}
     (nil))
(call_insn 74 73 75 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:358 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 75 74 76 4 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (parallel [
            (set (reg/f:DI 37 r8 [orig:94 D.6057 ] [94])
                (plus:DI (reg/f:DI 0 ax [151])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:361 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 440 [0x1b8]))
        (nil)))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 78 77 85 4 (parallel [
            (set (reg/f:DI 1 dx [orig:95 D.6058 ] [95])
                (plus:DI (reg/f:DI 0 ax [152])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:361 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 404 [0x194]))
        (nil)))
(insn 85 78 79 4 (set (reg:DI 0 ax [153])
        (reg/f:DI 1 dx [orig:95 D.6058 ] [95])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 79 85 80 4 (set (reg:DI 2 cx [157])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:DI 4 si [156])
        (reg:DI 0 ax [153])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 81 80 243 4 (set (reg:QI 0 ax [158])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:361 93 {*movqi_internal}
     (nil))
(insn 243 81 82 4 (set (reg:DI 5 di [156])
        (reg:DI 4 si [156])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 82 243 242 4 (parallel [
            (set (reg:DI 2 cx [154])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [156]) [0  A8])
                        (reg:QI 0 ax [158])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [154])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [156]))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:361 923 {*strlenqi_1}
     (nil))
(insn 242 82 83 4 (set (reg:DI 0 ax [154])
        (reg:DI 2 cx [154])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 83 242 84 4 (set (reg:DI 0 ax [155])
        (not:DI (reg:DI 0 ax [154]))) sim2fitman_fmtext_o.cpp:361 479 {*one_cmpldi2_1}
     (nil))
(insn 84 83 86 4 (parallel [
            (set (reg:DI 0 ax [orig:96 D.6059 ] [96])
                (plus:DI (reg:DI 0 ax [155])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:361 221 {*adddi_1}
     (nil))
(insn 86 84 87 4 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.6060 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 D.6059 ] [96])
                    (reg/f:DI 1 dx [orig:95 D.6058 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:361 221 {*adddi_1}
     (nil))
(insn 87 86 88 4 (set (mem:HI (reg/f:DI 0 ax [orig:97 D.6060 ] [97]) [0 MEM[(void *)_20]+0 S2 A8])
        (const_int 8236 [0x202c])) sim2fitman_fmtext_o.cpp:361 92 {*movhi_internal}
     (nil))
(insn 88 87 89 4 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:97 D.6060 ] [97])
                (const_int 2 [0x2])) [0 MEM[(void *)_20]+2 S1 A8])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:361 93 {*movqi_internal}
     (nil))
(insn 89 88 90 4 (set (reg:DI 4 si)
        (reg/f:DI 37 r8 [orig:94 D.6057 ] [94])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:95 D.6058 ] [95])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(call_insn 91 90 92 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x2b9d769c4d00 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:361 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 92 91 93 4 (set (reg/f:DI 1 dx [orig:98 D.6060 ] [98])
        (reg:DI 0 ax)) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 93 92 95 4 (set (reg:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 95 93 96 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b9d76d76260 *.LC5>)) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 96 95 97 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [159])) sim2fitman_fmtext_o.cpp:361 89 {*movdi_internal}
     (nil))
(insn 97 96 98 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:361 93 {*movqi_internal}
     (nil))
(call_insn 98 97 99 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:361 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 99 98 100 4 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 100 99 101 4 (parallel [
            (set (reg/f:DI 1 dx [orig:99 D.6061 ] [99])
                (plus:DI (reg/f:DI 0 ax [160])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:367 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 101 100 103 4 (set (reg:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 103 101 104 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b9d76d762f8 *.LC6>)) sim2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 104 103 105 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [161])) sim2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 105 104 106 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:367 93 {*movqi_internal}
     (nil))
(call_insn 106 105 107 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:367 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 107 106 108 4 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 108 107 109 4 (set (reg:SF 21 xmm0 [orig:100 D.6055 ] [100])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [162])
                (const_int 400 [0x190])) [0 procpar_info_7(D)->vtheta+0 S4 A64])) sim2fitman_fmtext_o.cpp:373 129 {*movsf_internal}
     (nil))
(insn 109 108 110 4 (set (reg:DF 25 xmm4 [orig:101 D.6056 ] [101])
        (float_extend:DF (reg:SF 21 xmm0 [orig:100 D.6055 ] [100]))) sim2fitman_fmtext_o.cpp:373 152 {*extendsfdf2_sse}
     (nil))
(insn 110 109 111 4 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 111 110 112 4 (set (reg:SF 21 xmm0 [orig:102 D.6055 ] [102])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [163])
                (const_int 384 [0x180])) [0 procpar_info_7(D)->vox3+0 S4 A64])) sim2fitman_fmtext_o.cpp:373 129 {*movsf_internal}
     (nil))
(insn 112 111 113 4 (set (reg:DF 24 xmm3 [orig:103 D.6056 ] [103])
        (float_extend:DF (reg:SF 21 xmm0 [orig:102 D.6055 ] [102]))) sim2fitman_fmtext_o.cpp:373 152 {*extendsfdf2_sse}
     (nil))
(insn 113 112 114 4 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 114 113 115 4 (set (reg:SF 21 xmm0 [orig:104 D.6055 ] [104])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [164])
                (const_int 380 [0x17c])) [0 procpar_info_7(D)->vox2+0 S4 A32])) sim2fitman_fmtext_o.cpp:373 129 {*movsf_internal}
     (nil))
(insn 115 114 116 4 (set (reg:DF 23 xmm2 [orig:105 D.6056 ] [105])
        (float_extend:DF (reg:SF 21 xmm0 [orig:104 D.6055 ] [104]))) sim2fitman_fmtext_o.cpp:373 152 {*extendsfdf2_sse}
     (nil))
(insn 116 115 117 4 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 117 116 118 4 (set (reg:SF 21 xmm0 [orig:106 D.6055 ] [106])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [165])
                (const_int 376 [0x178])) [0 procpar_info_7(D)->vox1+0 S4 A64])) sim2fitman_fmtext_o.cpp:373 129 {*movsf_internal}
     (nil))
(insn 118 117 119 4 (set (reg:DF 22 xmm1 [orig:107 D.6056 ] [107])
        (float_extend:DF (reg:SF 21 xmm0 [orig:106 D.6055 ] [106]))) sim2fitman_fmtext_o.cpp:373 152 {*extendsfdf2_sse}
     (nil))
(insn 119 118 120 4 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 120 119 121 4 (set (reg:SF 21 xmm0 [orig:108 D.6055 ] [108])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [166])
                (const_int 4 [0x4])) [0 preprocess_31(D)->scale_factor+0 S4 A32])) sim2fitman_fmtext_o.cpp:373 129 {*movsf_internal}
     (nil))
(insn 121 120 122 4 (set (reg:DF 21 xmm0 [orig:109 D.6056 ] [109])
        (float_extend:DF (reg:SF 21 xmm0 [orig:108 D.6055 ] [108]))) sim2fitman_fmtext_o.cpp:373 152 {*extendsfdf2_sse}
     (nil))
(insn 122 121 123 4 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 block_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 123 122 124 4 (set (reg:HI 0 ax [orig:110 D.6062 ] [110])
        (mem/j:HI (reg/f:DI 0 ax [167]) [0 block_header_34(D)->scale.number+0 S2 A64])) sim2fitman_fmtext_o.cpp:373 92 {*movhi_internal}
     (nil))
(insn 124 123 125 4 (set (reg:SI 1 dx [orig:111 D.6054 ] [111])
        (sign_extend:SI (reg:HI 0 ax [orig:110 D.6062 ] [110]))) sim2fitman_fmtext_o.cpp:373 146 {extendhisi2}
     (nil))
(insn 125 124 132 4 (set (reg:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 132 125 133 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b9d76d76390 *.LC7>)) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 133 132 134 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [168])) sim2fitman_fmtext_o.cpp:373 89 {*movdi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) sim2fitman_fmtext_o.cpp:373 93 {*movqi_internal}
     (nil))
(call_insn 135 134 136 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:373 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 21 xmm0))
                        (expr_list:DF (use (reg:DF 22 xmm1))
                            (expr_list:DF (use (reg:DF 23 xmm2))
                                (expr_list:DF (use (reg:DF 24 xmm3))
                                    (expr_list:DF (use (reg:DF 25 xmm4))
                                        (nil)))))))))))
(insn 136 135 137 4 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 137 136 138 4 (set (reg:SF 21 xmm0 [orig:112 D.6055 ] [112])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [169])
                (const_int 360 [0x168])) [0 procpar_info_7(D)->gain+0 S4 A64])) sim2fitman_fmtext_o.cpp:377 129 {*movsf_internal}
     (nil))
(insn 138 137 139 4 (set (reg:DF 26 xmm5 [orig:113 D.6056 ] [113])
        (float_extend:DF (reg:SF 21 xmm0 [orig:112 D.6055 ] [112]))) sim2fitman_fmtext_o.cpp:377 152 {*extendsfdf2_sse}
     (nil))
(insn 139 138 140 4 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 140 139 141 4 (set (reg:SF 21 xmm0 [orig:114 D.6055 ] [114])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [170])
                (const_int 372 [0x174])) [0 procpar_info_7(D)->pos3+0 S4 A32])) sim2fitman_fmtext_o.cpp:377 129 {*movsf_internal}
     (nil))
(insn 141 140 142 4 (set (reg:DF 25 xmm4 [orig:115 D.6056 ] [115])
        (float_extend:DF (reg:SF 21 xmm0 [orig:114 D.6055 ] [114]))) sim2fitman_fmtext_o.cpp:377 152 {*extendsfdf2_sse}
     (nil))
(insn 142 141 143 4 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 143 142 144 4 (set (reg:SF 21 xmm0 [orig:116 D.6055 ] [116])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [171])
                (const_int 368 [0x170])) [0 procpar_info_7(D)->pos2+0 S4 A64])) sim2fitman_fmtext_o.cpp:377 129 {*movsf_internal}
     (nil))
(insn 144 143 145 4 (set (reg:DF 24 xmm3 [orig:117 D.6056 ] [117])
        (float_extend:DF (reg:SF 21 xmm0 [orig:116 D.6055 ] [116]))) sim2fitman_fmtext_o.cpp:377 152 {*extendsfdf2_sse}
     (nil))
(insn 145 144 146 4 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 146 145 147 4 (set (reg:SF 21 xmm0 [orig:118 D.6055 ] [118])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [172])
                (const_int 364 [0x16c])) [0 procpar_info_7(D)->pos1+0 S4 A32])) sim2fitman_fmtext_o.cpp:377 129 {*movsf_internal}
     (nil))
(insn 147 146 148 4 (set (reg:DF 23 xmm2 [orig:119 D.6056 ] [119])
        (float_extend:DF (reg:SF 21 xmm0 [orig:118 D.6055 ] [118]))) sim2fitman_fmtext_o.cpp:377 152 {*extendsfdf2_sse}
     (nil))
(insn 148 147 149 4 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 149 148 150 4 (set (reg:SF 21 xmm0 [orig:120 D.6055 ] [120])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [173])
                (const_int 356 [0x164])) [0 procpar_info_7(D)->tr+0 S4 A32])) sim2fitman_fmtext_o.cpp:377 129 {*movsf_internal}
     (nil))
(insn 150 149 151 4 (set (reg:DF 22 xmm1 [orig:121 D.6056 ] [121])
        (float_extend:DF (reg:SF 21 xmm0 [orig:120 D.6055 ] [120]))) sim2fitman_fmtext_o.cpp:377 152 {*extendsfdf2_sse}
     (nil))
(insn 151 150 152 4 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 152 151 153 4 (set (reg:SF 21 xmm0 [orig:122 D.6055 ] [122])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [174])
                (const_int 352 [0x160])) [0 procpar_info_7(D)->te+0 S4 A64])) sim2fitman_fmtext_o.cpp:377 129 {*movsf_internal}
     (nil))
(insn 153 152 154 4 (set (reg:DF 21 xmm0 [orig:123 D.6056 ] [123])
        (float_extend:DF (reg:SF 21 xmm0 [orig:122 D.6055 ] [122]))) sim2fitman_fmtext_o.cpp:377 152 {*extendsfdf2_sse}
     (nil))
(insn 154 153 161 4 (set (reg:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 161 154 162 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b9d76d76428 *.LC8>)) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 162 161 163 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [175])) sim2fitman_fmtext_o.cpp:377 89 {*movdi_internal}
     (nil))
(insn 163 162 164 4 (set (reg:QI 0 ax)
        (const_int 6 [0x6])) sim2fitman_fmtext_o.cpp:377 93 {*movqi_internal}
     (nil))
(call_insn 164 163 165 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:377 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (expr_list:DF (use (reg:DF 24 xmm3))
                                (expr_list:DF (use (reg:DF 25 xmm4))
                                    (expr_list:DF (use (reg:DF 26 xmm5))
                                        (nil)))))))))))
(insn 165 164 166 4 (set (reg:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 166 165 167 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [176])) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 167 166 168 4 (set (reg:DI 1 dx)
        (const_int 13 [0xd])) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 168 167 169 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 169 168 170 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b9d76d764c0 *.LC9>)) sim2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(call_insn 170 169 171 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b9d769d0700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:379 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 171 170 172 4 (set (reg:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(insn 172 171 173 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [177])) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(insn 173 172 174 4 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(insn 175 174 176 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b9d76d76558 *.LC10>)) sim2fitman_fmtext_o.cpp:381 89 {*movdi_internal}
     (nil))
(call_insn 176 175 177 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b9d769d0700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:381 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 177 176 178 4 (set (reg:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 178 177 179 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [178])) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 179 178 180 4 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 180 179 181 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 181 180 182 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b9d76d765f0 *.LC11>)) sim2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(call_insn 182 181 183 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x2b9d769d0700 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:383 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 183 182 238 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(jump_insn 238 183 239 4 (set (pc)
        (label_ref 215)) sim2fitman_fmtext_o.cpp:393 636 {jump}
     (nil)
 -> 215)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 239 238 222)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 127 128 129 130 131 132 133 134 135 136 137 179 180 181 182 183 184
(code_label 222 239 186 5 39 "" [1 uses])
(note 186 222 187 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 187 186 188 5 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) sim2fitman_fmtext_o.cpp:394 90 {*movsi_internal}
     (nil))
(insn 188 187 189 5 (set (reg:DI 0 ax [orig:127 D.6059 ] [127])
        (sign_extend:DI (reg:SI 0 ax [179]))) sim2fitman_fmtext_o.cpp:394 142 {*extendsidi2_rex64}
     (nil))
(insn 189 188 190 5 (parallel [
            (set (reg:DI 1 dx [orig:128 D.6059 ] [128])
                (ashift:DI (reg:DI 0 ax [orig:127 D.6059 ] [127])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:394 497 {*ashldi3_1}
     (nil))
(insn 190 189 191 5 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])) sim2fitman_fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 191 190 192 5 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.6064 ] [129])
                (plus:DI (reg/f:DI 0 ax [180])
                    (reg:DI 1 dx [orig:128 D.6059 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:394 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:128 D.6059 ] [128]))
        (nil)))
(insn 192 191 193 5 (set (reg:SF 21 xmm0 [orig:130 D.6055 ] [130])
        (mem:SF (reg/f:DI 0 ax [orig:129 D.6064 ] [129]) [0 *_57+0 S4 A32])) sim2fitman_fmtext_o.cpp:394 129 {*movsf_internal}
     (nil))
(insn 193 192 194 5 (set (reg:DF 21 xmm0 [orig:131 D.6056 ] [131])
        (float_extend:DF (reg:SF 21 xmm0 [orig:130 D.6055 ] [130]))) sim2fitman_fmtext_o.cpp:394 152 {*extendsfdf2_sse}
     (nil))
(insn 194 193 196 5 (set (reg:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 196 194 197 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b9d76d76688 *.LC12>)) sim2fitman_fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 197 196 198 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [181])) sim2fitman_fmtext_o.cpp:394 89 {*movdi_internal}
     (nil))
(insn 198 197 199 5 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:394 93 {*movqi_internal}
     (nil))
(call_insn 199 198 200 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:394 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 200 199 201 5 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) sim2fitman_fmtext_o.cpp:395 90 {*movsi_internal}
     (nil))
(insn 201 200 202 5 (set (reg:DI 0 ax [orig:132 D.6065 ] [132])
        (sign_extend:DI (reg:SI 0 ax [182]))) sim2fitman_fmtext_o.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 202 201 203 5 (parallel [
            (set (reg:DI 0 ax [orig:133 D.6065 ] [133])
                (plus:DI (reg:DI 0 ax [orig:132 D.6065 ] [132])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:395 221 {*adddi_1}
     (nil))
(insn 203 202 204 5 (parallel [
            (set (reg:DI 1 dx [orig:134 D.6065 ] [134])
                (ashift:DI (reg:DI 0 ax [orig:133 D.6065 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:395 497 {*ashldi3_1}
     (nil))
(insn 204 203 205 5 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])) sim2fitman_fmtext_o.cpp:395 89 {*movdi_internal}
     (nil))
(insn 205 204 206 5 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.6064 ] [135])
                (plus:DI (reg/f:DI 0 ax [183])
                    (reg:DI 1 dx [orig:134 D.6065 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:395 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:134 D.6065 ] [134]))
        (nil)))
(insn 206 205 207 5 (set (reg:SF 21 xmm0 [orig:136 D.6055 ] [136])
        (mem:SF (reg/f:DI 0 ax [orig:135 D.6064 ] [135]) [0 *_63+0 S4 A32])) sim2fitman_fmtext_o.cpp:395 129 {*movsf_internal}
     (nil))
(insn 207 206 208 5 (set (reg:DF 21 xmm0 [orig:137 D.6056 ] [137])
        (float_extend:DF (reg:SF 21 xmm0 [orig:136 D.6055 ] [136]))) sim2fitman_fmtext_o.cpp:395 152 {*extendsfdf2_sse}
     (nil))
(insn 208 207 210 5 (set (reg:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:395 89 {*movdi_internal}
     (nil))
(insn 210 208 211 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b9d76d76688 *.LC12>)) sim2fitman_fmtext_o.cpp:395 89 {*movdi_internal}
     (nil))
(insn 211 210 212 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [184])) sim2fitman_fmtext_o.cpp:395 89 {*movdi_internal}
     (nil))
(insn 212 211 213 5 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_fmtext_o.cpp:395 93 {*movqi_internal}
     (nil))
(call_insn 213 212 214 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x2b9d769cbd00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:395 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 214 213 215 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:393 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 185 186
(code_label 215 214 216 6 38 "" [1 uses])
(note 216 215 217 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 217 216 218 6 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) sim2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 218 217 219 6 (set (reg:DI 1 dx [orig:124 D.6063 ] [124])
        (sign_extend:DI (reg:SI 0 ax [185]))) sim2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 219 218 220 6 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 main_header+0 S8 A64])) sim2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 220 219 221 6 (set (reg:DI 0 ax [orig:125 D.6063 ] [125])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [186])
                (const_int 16 [0x10])) [0 main_header_51(D)->np.number+0 S8 A64])) sim2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 221 220 223 6 (parallel [
            (set (reg:DI 0 ax [orig:126 D.6063 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.6063 ] [125])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_fmtext_o.cpp:393 497 {*ashldi3_1}
     (nil))
(insn 223 221 224 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 1 dx [orig:124 D.6063 ] [124])
            (reg:DI 0 ax [orig:126 D.6063 ] [126]))) sim2fitman_fmtext_o.cpp:393 8 {*cmpdi_1}
     (nil))
(jump_insn 224 223 225 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) sim2fitman_fmtext_o.cpp:393 596 {*jcc_1}
     (nil)
 -> 222)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 225 224 226 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:397 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 227 226 228 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 234)
            (pc))) sim2fitman_fmtext_o.cpp:397 596 {*jcc_1}
     (nil)
 -> 234)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 187
(note 228 227 229 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 230 8 (set (reg:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) sim2fitman_fmtext_o.cpp:398 89 {*movdi_internal}
     (nil))
(insn 230 229 231 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [187])) sim2fitman_fmtext_o.cpp:398 89 {*movdi_internal}
     (nil))
(call_insn 231 230 234 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b9d76b85a00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) sim2fitman_fmtext_o.cpp:398 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              7
;;              3 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 234 231 235 9 35 "" [2 uses])
(note 235 234 240 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 240 235 0 NOTE_INSN_DELETED)
