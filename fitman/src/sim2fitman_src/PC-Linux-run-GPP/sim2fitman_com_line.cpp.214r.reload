
;; Function int command_line(Preprocess*, IOFiles*, Procpar_info*, int, char**, int*, int*, int*, bool*, bool*) (_Z12command_lineP10PreprocessP7IOFilesP12Procpar_infoiPPcPiS7_S7_PbS8_, funcdef_no=2, decl_uid=5301, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=896, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=864, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 11:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 13:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 17:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 23:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 24:  (0) r  (1) i {*movdi_internal}
      Creating newreg=780, assigning class GENERAL_REGS to r780
   24: r780:DI=0x6e656c6946206f4e
    Inserting insn reload after:
 1812: [r468:DI]=r780:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1812:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 25:  (0) r  (1) i {*movdi_internal}
      Creating newreg=781, assigning class GENERAL_REGS to r781
   25: r781:DI=0x6961764120656d61
    Inserting insn reload after:
 1813: [r468:DI+0x8]=r781:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1813:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 28:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 30:  (0) r  (1) i {*movdi_internal}
      Creating newreg=782, assigning class GENERAL_REGS to r782
   30: r782:DI=0x6e656c6946206f4e
    Inserting insn reload after:
 1814: [r470:DI]=r782:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1814:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 31:  (0) r  (1) i {*movdi_internal}
      Creating newreg=783, assigning class GENERAL_REGS to r783
   31: r783:DI=0x6961764120656d61
    Inserting insn reload after:
 1815: [r470:DI+0x8]=r783:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1815:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 34:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 36:  (0) r  (1) i {*movdi_internal}
      Creating newreg=784, assigning class GENERAL_REGS to r784
   36: r784:DI=0x6e656c6946206f4e
    Inserting insn reload after:
 1816: [r472:DI]=r784:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1816:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 37:  (0) r  (1) i {*movdi_internal}
      Creating newreg=785, assigning class GENERAL_REGS to r785
   37: r785:DI=0x6961764120656d61
    Inserting insn reload after:
 1817: [r472:DI+0x8]=r785:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1817:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 95
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 121
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 134
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 149:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 174
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 200
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 201:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 203:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 215:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 227
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 240
	 Choosing alt 0 in insn 240:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 241:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 243:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 253
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 254:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 0 in insn 266:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 267:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 269:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 279
	 Choosing alt 0 in insn 279:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 282:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 291:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 292
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 293:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 294:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 301:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 303:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 311
	 Choosing alt 0 in insn 311:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 312:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 313:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 327:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 329
	 Choosing alt 0 in insn 329:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 330:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 331:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 333:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 339:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 346:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 348
	 Choosing alt 0 in insn 348:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 350:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 359:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 360:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 361
	 Choosing alt 0 in insn 361:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 363:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 372:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 374
	 Choosing alt 0 in insn 374:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 375:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 376:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 385:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 394:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 395:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 398:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 399:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 400
	 Choosing alt 0 in insn 400:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 401:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 402:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 421
	 Choosing alt 0 in insn 421:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 423:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 425:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 427:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 433:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 436:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 437
	 Choosing alt 0 in insn 437:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 438:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 443:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 445
	 Choosing alt 0 in insn 445:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 447:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 456:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 466
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 468:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 471:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 472:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 473
	 Choosing alt 0 in insn 473:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 481:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 483:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 493:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 496:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 498
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 499:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 503:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=786 from oldreg=344, assigning class SSE_REGS to r786
  503: r786:SF=float_trunc(r343:DF)
      REG_DEAD r343:DF
    Inserting insn reload after:
 1818: r344:SF=r786:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1818:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 504:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 506:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 507:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 509:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 518:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 522:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 523:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 524
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 529:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=787 from oldreg=354, assigning class SSE_REGS to r787
  529: r787:SF=float_trunc(r353:DF)
      REG_DEAD r353:DF
    Inserting insn reload after:
 1819: r354:SF=r787:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1819:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 530:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 531:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 533:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 542:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 543
	 Choosing alt 0 in insn 543:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 556:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 557:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 558
	 Choosing alt 0 in insn 558:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 559:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 560:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 562:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 567:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 569:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 578:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 579
	 Choosing alt 0 in insn 579:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 580:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 581:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 584:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 585:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 586
	 Choosing alt 0 in insn 586:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 587:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 596:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 605:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 606:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 609:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 610:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 611
	 Choosing alt 0 in insn 611:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 612:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 617:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 627:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 628:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 630:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 631:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 632
	 Choosing alt 0 in insn 632:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 633:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 640:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 641:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 642:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 645:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 646:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 651:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 652:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 655:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 656:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 657
	 Choosing alt 0 in insn 657:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 658:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 662:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=788 from oldreg=397, assigning class SSE_REGS to r788
  662: r788:SF=float_trunc(r396:DF)
      REG_DEAD r396:DF
    Inserting insn reload after:
 1820: r397:SF=r788:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1820:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 663:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 664:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 665:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 666:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 667:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 668:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 677:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 679:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 681:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 682:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 683:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 684:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 688:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 689:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 690:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 693:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 694:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 695:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 696:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 697:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 698:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 699
	 Choosing alt 0 in insn 699:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 700:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 704:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=789 from oldreg=412, assigning class SSE_REGS to r789
  704: r789:SF=float_trunc(r411:DF)
      REG_DEAD r411:DF
    Inserting insn reload after:
 1821: r412:SF=r789:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 1821:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 705:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 706:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 707:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 708:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 711:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 717:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 718
	 Choosing alt 0 in insn 718:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 719:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 733:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 734:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 735:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 736:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 737
	 Choosing alt 0 in insn 737:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 738:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 739:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 743:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 746:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 749:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 753:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 755:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 756:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 757
	 Choosing alt 0 in insn 757:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 758:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 759:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 761:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 763:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 766:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 767:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 769:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 774:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 775:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 776:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 777
	 Choosing alt 0 in insn 777:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 778:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 779:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 781:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 783:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 786:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 787:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 788:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 789:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 792:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 793:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 794:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 795:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 796:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 801:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 807:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 808:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 809:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 810
	 Choosing alt 0 in insn 810:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 811:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 812:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 814:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 816:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 819:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 820:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 821:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 822:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 823:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 826:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 827:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 828:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 829:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 830:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 831:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 832:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 833:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 838:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 843:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 844:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 845:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 846:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 847
	 Choosing alt 0 in insn 847:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 848:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 849:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 851:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 853:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 856:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 857:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 858:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 859:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 862:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 863:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 864:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 865:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 866:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 867:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 868:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 869
	 Choosing alt 0 in insn 869:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 870:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 872:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 874:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 877:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 878:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 879:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 880:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 881:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 882:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 883
	 Choosing alt 0 in insn 883:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 884:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 886:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 888:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 889:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 894:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 899:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 904:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 905:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 906:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 907:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 908
	 Choosing alt 0 in insn 908:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 909:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 910:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 912:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 914:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 917:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 918:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 919:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 920:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 921:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 924:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 925:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 926:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 927:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 928:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 929:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 930:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 931:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 932:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 933
	 Choosing alt 0 in insn 933:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 934:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 936:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 938:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 941:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 942:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 943:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 944:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 945:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 946:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 947:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 948
	 Choosing alt 0 in insn 948:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 949:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 951:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 953:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 954:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 959:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 964:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 970:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 971:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 972:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 973
	 Choosing alt 0 in insn 973:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 974:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 975:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 977:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 979:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 982:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 983:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 984:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 985:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 986:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 987
	 Choosing alt 0 in insn 987:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 988:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 990:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 992:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 995:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 996:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 997:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 998:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 999:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1000:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1001
	 Choosing alt 0 in insn 1001:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1002:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1004:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1006:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1007:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1012:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1017:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1018:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1019:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1020:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1021
	 Choosing alt 0 in insn 1021:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1022:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1023:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1025:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1027:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1030:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1031:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1032:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1033:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1038:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1039:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1040:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1041:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1042
	 Choosing alt 0 in insn 1042:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1043:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1044:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1046:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1048:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1051:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1052:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1053:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1058:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1059:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1060:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1061:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1062
	 Choosing alt 0 in insn 1062:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1063:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1064:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1066:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1068:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1071:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1072:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1073:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1074:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1075:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1080:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1081:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1082:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1083:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1084
	 Choosing alt 0 in insn 1084:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1085:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1086:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1088:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1090:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1093:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1094:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1095:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1102:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1104
	 Choosing alt 0 in insn 1104:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1105:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1106:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1108:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1110:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1113:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1114:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1117:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1122:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1124:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1126
	 Choosing alt 0 in insn 1126:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1127:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1128:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1130:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1132:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1135:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1137:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1138:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1141:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1146:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1147:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1154:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1155:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1156
	 Choosing alt 0 in insn 1156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1157:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1158:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1160:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1162:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1165:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1169:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1172:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1178:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1179:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1184:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1185:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1186:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1188
	 Choosing alt 0 in insn 1188:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1189:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1190:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1192:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1194:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1197:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1198:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1199:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1200:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1203:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1208:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1209:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1214:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1215:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1216:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1217:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1218
	 Choosing alt 0 in insn 1218:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1219:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1220:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1222:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1224:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1227:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1228:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1229:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1230:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1231:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1234:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1240:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1241:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1246:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1247:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1248:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1249:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1250
	 Choosing alt 0 in insn 1250:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1251:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1252:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1254:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1256:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1259:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1260:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1265:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1266:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1267:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1268:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1269
	 Choosing alt 0 in insn 1269:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1270:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1271:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1273:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1275:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1278:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1279:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1284:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1285:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1286:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1288
	 Choosing alt 0 in insn 1288:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1289:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1290:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1292:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1294:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1297:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1298:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1299:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1303:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1304:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1305:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1306:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1311:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1315:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1316:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1319:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1322:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1325:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1329:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1334:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1335:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1336:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1339:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1340:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1341:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1344:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1345:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1346:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1347:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1350:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1355:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1356:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1357:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1360:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1362:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1365:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1370:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1373:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1374:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1375:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1378:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1379:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1380:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1383:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1384:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1385:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1386:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1389:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1390:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1391:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1392:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1393:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1396:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1399:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1400:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1401:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1406:  (0) ?mq {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1409:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1410:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1411:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1414:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1415:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1416:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1421:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1423:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1424:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1427:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1432:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1435:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1442:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1443:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1444:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1447:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1448:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1449:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1452:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1453:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1454:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1457:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1462:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1465:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1469:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1470:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1471:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1472:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1475:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1484:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1487:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1488:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1489:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1492:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1493:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1494:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1497:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1498:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1499:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1502:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1507:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1510:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1514:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1515:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1516:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1517:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1520:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1525:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1530:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1533:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1534:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1537:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1538:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1539:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1540:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1543:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1544:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1545:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1546:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1549:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1550:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1551:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1554:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1557:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1560:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1561:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1562:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1565:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1566:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1567:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1568:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1569:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1572:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1573:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1574:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1575:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1576:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1577:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1580:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1581:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1582:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1583:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1584:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1587:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1588:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1589:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1590:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1591:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1594:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1599:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1600:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1601:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1602:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1605:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1606:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1607:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1608:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1609:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1612:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1613:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1614:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1615:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1616:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1617:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1620:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1621:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1622:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1623:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1624:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1627:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1628:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1629:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1630:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1631:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1634:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1639:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1640:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1642:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1644:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1647:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1652:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1653:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1654:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1656:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1658:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1661:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1666:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1669:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1674:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1677:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1682:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 97
EBB 98
EBB 99
EBB 100
EBB 101
EBB 102
EBB 103
EBB 104
EBB 105
EBB 106
EBB 107
EBB 108
EBB 109
EBB 110
EBB 111
EBB 112
EBB 113
EBB 114
EBB 115
EBB 116
EBB 117
EBB 118
EBB 119
EBB 120
EBB 121
EBB 122
EBB 123
EBB 124
EBB 125
EBB 126
EBB 127
EBB 128
EBB 129
EBB 130
EBB 131
EBB 132
EBB 133
EBB 134
EBB 135
EBB 136
EBB 137
EBB 138
EBB 139
EBB 140
EBB 141
EBB 142
EBB 143
EBB 144
EBB 145
EBB 146
EBB 147
EBB 148
EBB 149
EBB 150

********** Pseudo live ranges #1: **********

  BB 30
   Insn 749: point = 0
   Insn 748: point = 0
   Insn 747: point = 0
   Insn 746: point = 0
  BB 32
   Insn 769: point = 0
   Insn 768: point = 0
   Insn 767: point = 0
   Insn 766: point = 0
  BB 88
   Insn 1299: point = 0
   Insn 1298: point = 0
   Insn 1297: point = 0
  BB 150
   Insn 1692: point = 0
   Insn 1691: point = 0
   Insn 1687: point = 1
  BB 148
   Insn 1809: point = 4
   Insn 1677: point = 4
  BB 144
   Insn 1805: point = 5
   Insn 1661: point = 5
  BB 142
   Insn 1803: point = 6
   Insn 1647: point = 6
  BB 134
   Insn 1799: point = 7
   Insn 1525: point = 7
  BB 133
   Insn 1797: point = 8
   Insn 1520: point = 8
  BB 132
   Insn 1518: point = 9
   Insn 1517: point = 9
   Insn 1516: point = 10
   Insn 1515: point = 12
   Insn 1514: point = 14
  BB 131
   Insn 1511: point = 15
   Insn 1510: point = 15
  BB 130
   Insn 1508: point = 15
   Insn 1507: point = 15
  BB 129
   Insn 1795: point = 15
   Insn 1502: point = 15
  BB 128
   Insn 1500: point = 16
   Insn 1499: point = 16
   Insn 1498: point = 17
   Insn 1497: point = 19
  BB 127
   Insn 1495: point = 20
   Insn 1494: point = 20
   Insn 1493: point = 21
   Insn 1492: point = 23
  BB 126
   Insn 1490: point = 24
   Insn 1489: point = 24
   Insn 1488: point = 25
   Insn 1487: point = 27
  BB 124
   Insn 1793: point = 28
   Insn 1475: point = 28
  BB 120
   Insn 1791: point = 29
   Insn 1457: point = 29
  BB 101
   Insn 1781: point = 30
   Insn 1365: point = 30
  BB 99
   Insn 1779: point = 31
   Insn 1350: point = 31
  BB 95
   Insn 1777: point = 32
   Insn 1329: point = 32
  BB 89
   Insn 1775: point = 33
   Insn 1306: point = 33
   Insn 1305: point = 34
   Insn 1304: point = 35
   Insn 1303: point = 36
  BB 87
   Insn 1295: point = 37
   Insn 1294: point = 37
   Insn 1293: point = 38
   Insn 1292: point = 39
   Insn 1291: point = 39
   Insn 1290: point = 40
   Insn 1289: point = 40
   Insn 1288: point = 42
   Insn 1287: point = 44
   Insn 1286: point = 45
   Insn 1285: point = 47
   Insn 1284: point = 49
  BB 81
   Insn 1767: point = 50
   Insn 1234: point = 50
  BB 77
   Insn 1763: point = 51
   Insn 1203: point = 51
  BB 73
   Insn 1759: point = 52
   Insn 1172: point = 52
  BB 69
   Insn 1755: point = 53
   Insn 1141: point = 53
  BB 56
   Insn 1743: point = 54
   Insn 1012: point = 54
  BB 52
   Insn 1739: point = 55
   Insn 964: point = 55
  BB 51
   Insn 1737: point = 56
   Insn 959: point = 56
  BB 46
   Insn 1733: point = 57
   Insn 899: point = 57
  BB 45
   Insn 1731: point = 58
   Insn 894: point = 58
  BB 40
   Insn 1727: point = 59
   Insn 838: point = 59
  BB 36
   Insn 1723: point = 60
   Insn 801: point = 60
  BB 27
   Insn 1717: point = 61
   Insn 724: point = 61
  BB 25
   Insn 1713: point = 62
   Insn 622: point = 62
  BB 20
   Insn 1707: point = 63
   Insn 549: point = 63
  BB 14
   Insn 1703: point = 64
   Insn 389: point = 64
  BB 8
   Insn 1699: point = 65
   Insn 320: point = 65
  BB 146
   Insn 1807: point = 66
   Insn 1669: point = 66
  BB 149
   Insn 1682: point = 67
  BB 147
   Insn 1675: point = 68
   Insn 1674: point = 68
  BB 145
   Insn 1667: point = 68
   Insn 1666: point = 68
  BB 143
   Insn 1659: point = 68
   Insn 1658: point = 68
   Insn 1657: point = 69
   Insn 1656: point = 70
   Insn 1655: point = 70
   Insn 1654: point = 71
   Insn 1653: point = 71
   Insn 1652: point = 73
  BB 141
   Insn 1645: point = 74
   Insn 1644: point = 74
   Insn 1643: point = 75
   Insn 1642: point = 76
   Insn 1641: point = 76
   Insn 1640: point = 77
   Insn 1639: point = 77
  BB 139
   Insn 1801: point = 78
   Insn 1594: point = 78
   Insn 1593: point = 78
   Insn 1592: point = 79
   Insn 1591: point = 80
   Insn 1590: point = 82
   Insn 1589: point = 83
   Insn 1588: point = 85
   Insn 1587: point = 86
   Insn 1586: point = 86
   Insn 1585: point = 87
   Insn 1584: point = 88
   Insn 1583: point = 90
   Insn 1582: point = 91
   Insn 1581: point = 93
   Insn 1580: point = 94
   Insn 1579: point = 94
   Insn 1578: point = 95
   Insn 1577: point = 96
   Insn 1576: point = 98
   Insn 1575: point = 100
   Insn 1574: point = 101
   Insn 1573: point = 103
   Insn 1572: point = 104
   Insn 1571: point = 104
   Insn 1570: point = 105
   Insn 1569: point = 106
   Insn 1568: point = 108
   Insn 1567: point = 109
   Insn 1566: point = 111
   Insn 1565: point = 112
   Insn 1564: point = 112
   Insn 1563: point = 113
   Insn 1562: point = 114
   Insn 1561: point = 116
   Insn 1560: point = 117
  BB 140
   Insn 1634: point = 118
   Insn 1633: point = 118
   Insn 1632: point = 119
   Insn 1631: point = 120
   Insn 1630: point = 122
   Insn 1629: point = 123
   Insn 1628: point = 125
   Insn 1627: point = 126
   Insn 1626: point = 126
   Insn 1625: point = 127
   Insn 1624: point = 128
   Insn 1623: point = 130
   Insn 1622: point = 131
   Insn 1621: point = 133
   Insn 1620: point = 134
   Insn 1619: point = 134
   Insn 1618: point = 135
   Insn 1617: point = 136
   Insn 1616: point = 138
   Insn 1615: point = 139
   Insn 1614: point = 141
   Insn 1613: point = 143
   Insn 1612: point = 144
   Insn 1611: point = 144
   Insn 1610: point = 145
   Insn 1609: point = 146
   Insn 1608: point = 148
   Insn 1607: point = 149
   Insn 1606: point = 151
   Insn 1605: point = 152
   Insn 1604: point = 152
   Insn 1603: point = 153
   Insn 1602: point = 154
   Insn 1601: point = 156
   Insn 1600: point = 157
   Insn 1599: point = 159
  BB 138
   Insn 1558: point = 160
   Insn 1557: point = 160
  BB 137
   Insn 1554: point = 160
   Insn 1553: point = 160
   Insn 1552: point = 161
   Insn 1551: point = 162
   Insn 1550: point = 163
   Insn 1549: point = 165
  BB 136
   Insn 1547: point = 166
   Insn 1546: point = 166
   Insn 1545: point = 167
   Insn 1544: point = 169
   Insn 1543: point = 170
   Insn 1542: point = 170
   Insn 1541: point = 171
   Insn 1540: point = 172
   Insn 1539: point = 173
   Insn 1538: point = 175
   Insn 1537: point = 176
   Insn 1536: point = 176
   Insn 1535: point = 177
   Insn 1534: point = 178
   Insn 1533: point = 179
  BB 135
   Insn 1531: point = 180
   Insn 1530: point = 180
  BB 116
   Insn 1789: point = 180
   Insn 1694: point = 180
  BB 113
   Insn 1787: point = 180
   Insn 1427: point = 180
  BB 111
   Insn 1785: point = 180
   Insn 1416: point = 180
   Insn 1415: point = 180
   Insn 1414: point = 180
  BB 108
   Insn 1783: point = 180
   Insn 1401: point = 180
   Insn 1400: point = 180
   Insn 1399: point = 180
  BB 115
   Insn 1435: point = 180
  BB 114
   Insn 1433: point = 180
   Insn 1432: point = 180
  BB 112
   Insn 1425: point = 180
   Insn 1424: point = 180
   Insn 1423: point = 180
   Insn 1422: point = 181
   Insn 1421: point = 182
  BB 110
   Insn 1412: point = 182
   Insn 1411: point = 182
   Insn 1410: point = 183
   Insn 1409: point = 185
  BB 109
   Insn 1407: point = 186
   Insn 1406: point = 186
  BB 107
   Insn 1397: point = 186
   Insn 1396: point = 186
  BB 106
   Insn 1394: point = 186
   Insn 1393: point = 186
   Insn 1392: point = 187
   Insn 1391: point = 189
   Insn 1390: point = 190
   Insn 1389: point = 191
  BB 125
   Insn 1485: point = 192
   Insn 1484: point = 192
  BB 123
   Insn 1473: point = 192
   Insn 1472: point = 192
   Insn 1471: point = 193
   Insn 1470: point = 195
   Insn 1469: point = 197
  BB 122
   Insn 1466: point = 198
   Insn 1465: point = 198
  BB 121
   Insn 1463: point = 198
   Insn 1462: point = 198
  BB 119
   Insn 1455: point = 198
   Insn 1454: point = 198
   Insn 1453: point = 199
   Insn 1452: point = 201
  BB 118
   Insn 1450: point = 202
   Insn 1449: point = 202
   Insn 1448: point = 203
   Insn 1447: point = 205
  BB 117
   Insn 1445: point = 206
   Insn 1444: point = 206
   Insn 1443: point = 207
   Insn 1442: point = 209
  BB 105
   Insn 1387: point = 210
   Insn 1386: point = 210
   Insn 1385: point = 211
   Insn 1384: point = 213
   Insn 1383: point = 215
  BB 104
   Insn 1381: point = 216
   Insn 1380: point = 216
   Insn 1379: point = 217
   Insn 1378: point = 219
  BB 103
   Insn 1376: point = 220
   Insn 1375: point = 220
   Insn 1374: point = 221
   Insn 1373: point = 223
  BB 102
   Insn 1371: point = 224
   Insn 1370: point = 224
  BB 100
   Insn 1363: point = 224
   Insn 1362: point = 224
   Insn 1361: point = 225
   Insn 1360: point = 226
   Insn 1359: point = 226
   Insn 1358: point = 227
   Insn 1357: point = 228
   Insn 1356: point = 229
   Insn 1355: point = 231
  BB 98
   Insn 1348: point = 232
   Insn 1347: point = 232
   Insn 1346: point = 233
   Insn 1345: point = 235
   Insn 1344: point = 237
  BB 97
   Insn 1342: point = 238
   Insn 1341: point = 238
   Insn 1340: point = 239
   Insn 1339: point = 241
  BB 96
   Insn 1337: point = 242
   Insn 1336: point = 242
   Insn 1335: point = 243
   Insn 1334: point = 245
  BB 94
   Insn 1326: point = 246
   Insn 1325: point = 246
  BB 93
   Insn 1323: point = 246
   Insn 1322: point = 246
  BB 92
   Insn 1320: point = 246
   Insn 1319: point = 246
  BB 91
   Insn 1317: point = 246
   Insn 1316: point = 246
   Insn 1315: point = 247
  BB 5
   Insn 1697: point = 248
   Insn 303: point = 248
   Insn 302: point = 249
   Insn 301: point = 250
  BB 4
   Insn 299: point = 250
   Insn 298: point = 250
  BB 2
   Insn 1695: point = 250
   Insn 40: point = 250
   Insn 39: point = 250
   Insn 38: point = 251
   Insn 1817: point = 251
   Insn 37: point = 252
   Insn 1816: point = 253
   Insn 36: point = 254
   Insn 35: point = 255
   Insn 34: point = 257
   Insn 33: point = 258
   Insn 32: point = 259
   Insn 1815: point = 259
   Insn 31: point = 260
   Insn 1814: point = 261
   Insn 30: point = 262
   Insn 29: point = 263
   Insn 28: point = 265
   Insn 27: point = 266
   Insn 26: point = 267
   Insn 1813: point = 267
   Insn 25: point = 268
   Insn 1812: point = 269
   Insn 24: point = 270
   Insn 23: point = 271
   Insn 22: point = 272
   Insn 21: point = 272
   Insn 20: point = 272
   Insn 19: point = 272
   Insn 18: point = 272
   Insn 17: point = 272
   Insn 16: point = 272
   Insn 15: point = 272
   Insn 14: point = 272
   Insn 13: point = 272
   Insn 12: point = 272
   Insn 11: point = 272
   Insn 7: point = 272
   Insn 6: point = 272
   Insn 5: point = 272
   Insn 4: point = 272
   Insn 3: point = 272
   Insn 2: point = 272
  BB 3
   Insn 294: point = 272
   Insn 293: point = 272
   Insn 292: point = 273
   Insn 291: point = 275
   Insn 290: point = 276
   Insn 289: point = 278
   Insn 288: point = 280
   Insn 287: point = 282
   Insn 286: point = 283
   Insn 285: point = 283
   Insn 284: point = 283
   Insn 283: point = 283
   Insn 282: point = 284
   Insn 281: point = 286
   Insn 280: point = 287
   Insn 279: point = 288
   Insn 278: point = 290
   Insn 277: point = 291
   Insn 276: point = 293
   Insn 275: point = 295
   Insn 274: point = 297
   Insn 273: point = 298
   Insn 272: point = 298
   Insn 271: point = 298
   Insn 270: point = 298
   Insn 269: point = 299
   Insn 268: point = 301
   Insn 267: point = 302
   Insn 266: point = 303
   Insn 265: point = 305
   Insn 264: point = 306
   Insn 263: point = 308
   Insn 262: point = 310
   Insn 261: point = 312
   Insn 260: point = 313
   Insn 259: point = 313
   Insn 258: point = 313
   Insn 257: point = 313
   Insn 256: point = 314
   Insn 255: point = 316
   Insn 254: point = 317
   Insn 253: point = 318
   Insn 252: point = 320
   Insn 251: point = 321
   Insn 250: point = 323
   Insn 249: point = 325
   Insn 248: point = 327
   Insn 247: point = 328
   Insn 246: point = 328
   Insn 245: point = 328
   Insn 244: point = 328
   Insn 243: point = 329
   Insn 242: point = 331
   Insn 241: point = 332
   Insn 240: point = 333
   Insn 239: point = 335
   Insn 238: point = 336
   Insn 237: point = 338
   Insn 236: point = 340
   Insn 235: point = 342
   Insn 234: point = 343
   Insn 233: point = 343
   Insn 232: point = 343
   Insn 231: point = 343
   Insn 230: point = 344
   Insn 229: point = 346
   Insn 228: point = 347
   Insn 227: point = 348
   Insn 226: point = 350
   Insn 225: point = 351
   Insn 224: point = 353
   Insn 223: point = 355
   Insn 222: point = 357
   Insn 221: point = 358
   Insn 220: point = 358
   Insn 219: point = 358
   Insn 218: point = 358
   Insn 217: point = 359
   Insn 216: point = 361
   Insn 215: point = 362
   Insn 214: point = 363
   Insn 213: point = 364
   Insn 212: point = 366
   Insn 211: point = 367
   Insn 210: point = 369
   Insn 209: point = 371
   Insn 208: point = 373
   Insn 207: point = 374
   Insn 206: point = 374
   Insn 205: point = 374
   Insn 204: point = 374
   Insn 203: point = 375
   Insn 202: point = 377
   Insn 201: point = 378
   Insn 200: point = 379
   Insn 199: point = 381
   Insn 198: point = 382
   Insn 197: point = 384
   Insn 196: point = 386
   Insn 195: point = 388
   Insn 194: point = 389
   Insn 193: point = 389
   Insn 192: point = 389
   Insn 191: point = 389
   Insn 190: point = 390
   Insn 189: point = 392
   Insn 188: point = 393
   Insn 187: point = 394
   Insn 186: point = 396
   Insn 185: point = 397
   Insn 184: point = 399
   Insn 183: point = 401
   Insn 182: point = 403
   Insn 181: point = 404
   Insn 180: point = 404
   Insn 179: point = 404
   Insn 178: point = 404
   Insn 177: point = 405
   Insn 176: point = 407
   Insn 175: point = 408
   Insn 174: point = 409
   Insn 173: point = 411
   Insn 172: point = 412
   Insn 171: point = 414
   Insn 170: point = 416
   Insn 169: point = 418
   Insn 168: point = 419
   Insn 167: point = 419
   Insn 166: point = 419
   Insn 165: point = 419
   Insn 164: point = 420
   Insn 163: point = 422
   Insn 162: point = 423
   Insn 161: point = 424
   Insn 160: point = 426
   Insn 159: point = 427
   Insn 158: point = 429
   Insn 157: point = 431
   Insn 156: point = 433
   Insn 155: point = 434
   Insn 154: point = 434
   Insn 153: point = 434
   Insn 152: point = 434
   Insn 151: point = 435
   Insn 150: point = 437
   Insn 149: point = 438
   Insn 148: point = 439
   Insn 147: point = 440
   Insn 146: point = 442
   Insn 145: point = 443
   Insn 144: point = 445
   Insn 143: point = 447
   Insn 142: point = 449
   Insn 141: point = 450
   Insn 140: point = 450
   Insn 139: point = 450
   Insn 138: point = 450
   Insn 137: point = 451
   Insn 136: point = 453
   Insn 135: point = 454
   Insn 134: point = 455
   Insn 133: point = 457
   Insn 132: point = 458
   Insn 131: point = 460
   Insn 130: point = 462
   Insn 129: point = 464
   Insn 128: point = 465
   Insn 127: point = 465
   Insn 126: point = 465
   Insn 125: point = 465
   Insn 124: point = 466
   Insn 123: point = 468
   Insn 122: point = 469
   Insn 121: point = 470
   Insn 120: point = 472
   Insn 119: point = 473
   Insn 118: point = 475
   Insn 117: point = 477
   Insn 116: point = 479
   Insn 115: point = 480
   Insn 114: point = 480
   Insn 113: point = 480
   Insn 112: point = 480
   Insn 111: point = 481
   Insn 110: point = 483
   Insn 109: point = 484
   Insn 108: point = 485
   Insn 107: point = 487
   Insn 106: point = 488
   Insn 105: point = 490
   Insn 104: point = 492
   Insn 103: point = 494
   Insn 102: point = 495
   Insn 101: point = 495
   Insn 100: point = 495
   Insn 99: point = 495
   Insn 98: point = 496
   Insn 97: point = 498
   Insn 96: point = 499
   Insn 95: point = 500
   Insn 94: point = 502
   Insn 93: point = 503
   Insn 92: point = 505
   Insn 91: point = 507
   Insn 90: point = 509
   Insn 89: point = 510
   Insn 88: point = 510
   Insn 87: point = 510
   Insn 86: point = 510
   Insn 85: point = 511
   Insn 84: point = 513
   Insn 83: point = 514
   Insn 82: point = 515
   Insn 81: point = 516
   Insn 80: point = 518
   Insn 79: point = 519
   Insn 78: point = 521
   Insn 77: point = 523
   Insn 76: point = 525
   Insn 75: point = 526
   Insn 74: point = 526
   Insn 73: point = 526
   Insn 72: point = 526
   Insn 71: point = 527
   Insn 70: point = 529
   Insn 69: point = 530
   Insn 68: point = 531
   Insn 67: point = 533
   Insn 66: point = 534
   Insn 65: point = 536
   Insn 64: point = 538
   Insn 63: point = 540
   Insn 62: point = 541
   Insn 61: point = 541
   Insn 60: point = 541
   Insn 59: point = 541
   Insn 58: point = 542
   Insn 57: point = 544
   Insn 56: point = 545
   Insn 55: point = 546
   Insn 54: point = 548
   Insn 53: point = 549
   Insn 52: point = 551
   Insn 51: point = 553
   Insn 50: point = 555
   Insn 49: point = 556
   Insn 48: point = 556
   Insn 47: point = 556
   Insn 46: point = 556
   Insn 45: point = 557
   Insn 44: point = 559
  BB 90
   Insn 1311: point = 560
  BB 86
   Insn 1773: point = 560
   Insn 1279: point = 560
   Insn 1278: point = 561
  BB 85
   Insn 1276: point = 562
   Insn 1275: point = 562
   Insn 1274: point = 563
   Insn 1273: point = 564
   Insn 1272: point = 564
   Insn 1271: point = 565
   Insn 1270: point = 565
   Insn 1269: point = 567
   Insn 1268: point = 569
   Insn 1267: point = 570
   Insn 1266: point = 572
   Insn 1265: point = 574
  BB 82
   Insn 1769: point = 575
   Insn 1241: point = 575
   Insn 1240: point = 576
   Insn 1239: point = 578
  BB 80
   Insn 1232: point = 579
   Insn 1231: point = 579
   Insn 1230: point = 580
   Insn 1229: point = 582
   Insn 1228: point = 584
   Insn 1227: point = 585
  BB 78
   Insn 1765: point = 585
   Insn 1209: point = 585
   Insn 1208: point = 586
  BB 76
   Insn 1201: point = 587
   Insn 1200: point = 587
   Insn 1199: point = 588
   Insn 1198: point = 590
   Insn 1197: point = 591
  BB 74
   Insn 1761: point = 591
   Insn 1179: point = 591
   Insn 1178: point = 592
   Insn 1177: point = 594
  BB 72
   Insn 1170: point = 595
   Insn 1169: point = 595
   Insn 1168: point = 596
   Insn 1167: point = 598
   Insn 1166: point = 600
   Insn 1165: point = 601
  BB 70
   Insn 1757: point = 601
   Insn 1147: point = 601
   Insn 1146: point = 602
  BB 68
   Insn 1139: point = 603
   Insn 1138: point = 603
   Insn 1137: point = 604
   Insn 1136: point = 606
   Insn 1135: point = 607
  BB 66
   Insn 1753: point = 607
   Insn 1117: point = 607
   Insn 1116: point = 608
   Insn 1115: point = 610
   Insn 1114: point = 611
   Insn 1113: point = 611
  BB 64
   Insn 1751: point = 611
   Insn 1095: point = 611
   Insn 1094: point = 612
   Insn 1093: point = 613
  BB 62
   Insn 1749: point = 613
   Insn 1075: point = 613
   Insn 1074: point = 614
   Insn 1073: point = 616
   Insn 1072: point = 617
   Insn 1071: point = 617
  BB 60
   Insn 1747: point = 617
   Insn 1053: point = 617
   Insn 1052: point = 618
   Insn 1051: point = 619
  BB 58
   Insn 1745: point = 619
   Insn 1033: point = 619
   Insn 1032: point = 620
   Insn 1031: point = 622
   Insn 1030: point = 623
  BB 55
   Insn 1741: point = 623
   Insn 1007: point = 623
   Insn 1006: point = 623
   Insn 1005: point = 623
   Insn 1004: point = 624
   Insn 1003: point = 624
   Insn 1002: point = 625
   Insn 1001: point = 627
   Insn 1000: point = 629
   Insn 999: point = 630
   Insn 998: point = 632
   Insn 997: point = 634
   Insn 996: point = 635
   Insn 995: point = 637
  BB 54
   Insn 993: point = 638
   Insn 992: point = 638
   Insn 991: point = 639
   Insn 990: point = 640
   Insn 989: point = 640
   Insn 988: point = 641
   Insn 987: point = 643
   Insn 986: point = 645
   Insn 985: point = 646
   Insn 984: point = 648
   Insn 983: point = 650
   Insn 982: point = 651
  BB 50
   Insn 1735: point = 651
   Insn 954: point = 651
   Insn 953: point = 651
   Insn 952: point = 651
   Insn 951: point = 652
   Insn 950: point = 652
   Insn 949: point = 653
   Insn 948: point = 655
   Insn 947: point = 657
   Insn 946: point = 658
   Insn 945: point = 660
   Insn 944: point = 662
   Insn 943: point = 663
   Insn 942: point = 665
   Insn 941: point = 667
  BB 49
   Insn 939: point = 668
   Insn 938: point = 668
   Insn 937: point = 669
   Insn 936: point = 670
   Insn 935: point = 670
   Insn 934: point = 671
   Insn 933: point = 673
   Insn 932: point = 675
   Insn 931: point = 676
   Insn 930: point = 678
   Insn 929: point = 680
   Insn 928: point = 681
   Insn 927: point = 681
   Insn 926: point = 682
   Insn 925: point = 684
   Insn 924: point = 685
  BB 48
   Insn 922: point = 685
   Insn 921: point = 685
   Insn 920: point = 686
   Insn 919: point = 688
   Insn 918: point = 690
   Insn 917: point = 691
  BB 44
   Insn 1729: point = 691
   Insn 889: point = 691
   Insn 888: point = 691
   Insn 887: point = 691
   Insn 886: point = 692
   Insn 885: point = 692
   Insn 884: point = 693
   Insn 883: point = 695
   Insn 882: point = 697
   Insn 881: point = 698
   Insn 880: point = 700
   Insn 879: point = 702
   Insn 878: point = 703
   Insn 877: point = 705
  BB 43
   Insn 875: point = 706
   Insn 874: point = 706
   Insn 873: point = 707
   Insn 872: point = 708
   Insn 871: point = 708
   Insn 870: point = 709
   Insn 869: point = 711
   Insn 868: point = 713
   Insn 867: point = 714
   Insn 866: point = 716
   Insn 865: point = 718
   Insn 864: point = 719
   Insn 863: point = 719
   Insn 862: point = 720
  BB 42
   Insn 860: point = 721
   Insn 859: point = 721
   Insn 858: point = 722
   Insn 857: point = 724
   Insn 856: point = 725
  BB 39
   Insn 1725: point = 725
   Insn 833: point = 725
   Insn 832: point = 726
   Insn 831: point = 727
   Insn 830: point = 729
   Insn 829: point = 730
   Insn 828: point = 731
   Insn 827: point = 733
   Insn 826: point = 734
  BB 38
   Insn 824: point = 734
   Insn 823: point = 734
   Insn 822: point = 735
   Insn 821: point = 737
   Insn 820: point = 739
   Insn 819: point = 740
  BB 35
   Insn 1721: point = 740
   Insn 796: point = 740
   Insn 795: point = 741
   Insn 794: point = 742
   Insn 793: point = 743
   Insn 792: point = 744
  BB 34
   Insn 790: point = 745
   Insn 789: point = 745
   Insn 788: point = 746
   Insn 787: point = 748
   Insn 786: point = 749
  BB 28
   Insn 1719: point = 749
  BB 26
   Insn 1715: point = 749
   Insn 719: point = 749
   Insn 718: point = 750
   Insn 717: point = 752
   Insn 716: point = 753
   Insn 715: point = 755
   Insn 714: point = 757
   Insn 713: point = 759
   Insn 712: point = 760
   Insn 711: point = 760
   Insn 710: point = 760
   Insn 709: point = 760
   Insn 708: point = 761
   Insn 707: point = 763
   Insn 706: point = 765
   Insn 705: point = 766
   Insn 1821: point = 767
	Hard reg 0 is preferable by r789 with profit 1
   Insn 704: point = 769
   Insn 703: point = 771
   Insn 702: point = 772
   Insn 701: point = 772
   Insn 700: point = 773
   Insn 699: point = 775
   Insn 698: point = 777
   Insn 697: point = 778
   Insn 696: point = 780
   Insn 695: point = 782
   Insn 694: point = 783
   Insn 693: point = 785
   Insn 692: point = 786
   Insn 691: point = 788
   Insn 690: point = 790
   Insn 689: point = 792
   Insn 688: point = 793
   Insn 687: point = 793
   Insn 686: point = 793
   Insn 685: point = 793
   Insn 684: point = 794
   Insn 683: point = 796
   Insn 682: point = 798
   Insn 681: point = 799
   Insn 680: point = 800
   Insn 679: point = 802
   Insn 678: point = 803
   Insn 677: point = 805
   Insn 676: point = 806
   Insn 675: point = 808
   Insn 674: point = 810
   Insn 673: point = 812
   Insn 672: point = 813
   Insn 671: point = 813
   Insn 670: point = 813
   Insn 669: point = 813
   Insn 668: point = 814
   Insn 667: point = 816
   Insn 666: point = 818
   Insn 665: point = 819
   Insn 664: point = 820
   Insn 663: point = 821
   Insn 1820: point = 822
	Hard reg 0 is preferable by r788 with profit 1
   Insn 662: point = 824
   Insn 661: point = 826
   Insn 660: point = 827
   Insn 659: point = 827
   Insn 658: point = 828
   Insn 657: point = 830
   Insn 656: point = 832
   Insn 655: point = 833
   Insn 654: point = 835
   Insn 653: point = 837
   Insn 652: point = 838
   Insn 651: point = 840
   Insn 650: point = 841
   Insn 649: point = 843
   Insn 648: point = 845
   Insn 647: point = 847
   Insn 646: point = 848
   Insn 645: point = 848
   Insn 644: point = 848
   Insn 643: point = 848
   Insn 642: point = 849
   Insn 641: point = 851
   Insn 640: point = 853
  BB 24
   Insn 1711: point = 854
  BB 23
   Insn 638: point = 854
   Insn 637: point = 854
   Insn 636: point = 855
   Insn 635: point = 856
   Insn 634: point = 856
   Insn 633: point = 857
   Insn 632: point = 859
   Insn 631: point = 861
   Insn 630: point = 862
   Insn 629: point = 864
   Insn 628: point = 866
   Insn 627: point = 867
   Insn 617: point = 867
   Insn 616: point = 868
   Insn 615: point = 870
   Insn 614: point = 871
   Insn 613: point = 871
   Insn 612: point = 872
   Insn 611: point = 874
   Insn 610: point = 876
   Insn 609: point = 877
   Insn 608: point = 879
   Insn 607: point = 881
   Insn 606: point = 882
   Insn 605: point = 884
   Insn 604: point = 885
   Insn 603: point = 887
   Insn 602: point = 889
   Insn 601: point = 891
   Insn 600: point = 892
   Insn 599: point = 892
   Insn 598: point = 892
   Insn 597: point = 892
   Insn 596: point = 893
   Insn 595: point = 895
   Insn 594: point = 897
  BB 22
   Insn 592: point = 898
   Insn 591: point = 898
   Insn 590: point = 899
   Insn 589: point = 900
   Insn 588: point = 900
   Insn 587: point = 901
   Insn 586: point = 903
   Insn 585: point = 905
   Insn 584: point = 906
   Insn 583: point = 908
   Insn 582: point = 910
   Insn 581: point = 911
   Insn 580: point = 911
   Insn 579: point = 912
   Insn 578: point = 914
   Insn 577: point = 915
   Insn 576: point = 917
   Insn 575: point = 919
   Insn 574: point = 921
   Insn 573: point = 922
   Insn 572: point = 922
   Insn 571: point = 922
   Insn 570: point = 922
   Insn 569: point = 923
   Insn 568: point = 925
   Insn 567: point = 927
  BB 21
   Insn 565: point = 928
   Insn 564: point = 928
   Insn 563: point = 929
   Insn 562: point = 930
   Insn 561: point = 930
   Insn 560: point = 931
   Insn 559: point = 931
   Insn 558: point = 933
   Insn 557: point = 935
   Insn 556: point = 936
   Insn 555: point = 938
   Insn 554: point = 940
  BB 19
   Insn 1705: point = 941
   Insn 544: point = 941
   Insn 543: point = 942
   Insn 542: point = 944
   Insn 541: point = 945
   Insn 540: point = 947
   Insn 539: point = 949
   Insn 538: point = 951
   Insn 537: point = 952
   Insn 536: point = 952
   Insn 535: point = 952
   Insn 534: point = 952
   Insn 533: point = 953
   Insn 532: point = 955
   Insn 531: point = 957
   Insn 530: point = 958
   Insn 1819: point = 959
	Hard reg 0 is preferable by r787 with profit 1
   Insn 529: point = 961
   Insn 528: point = 963
   Insn 527: point = 964
   Insn 526: point = 964
   Insn 525: point = 965
   Insn 524: point = 967
   Insn 523: point = 969
   Insn 522: point = 970
   Insn 521: point = 972
   Insn 520: point = 974
   Insn 519: point = 975
   Insn 518: point = 977
   Insn 517: point = 978
   Insn 516: point = 980
   Insn 515: point = 982
   Insn 514: point = 984
   Insn 513: point = 985
   Insn 512: point = 985
   Insn 511: point = 985
   Insn 510: point = 985
   Insn 509: point = 986
   Insn 508: point = 988
   Insn 507: point = 990
   Insn 506: point = 991
   Insn 505: point = 992
   Insn 504: point = 993
   Insn 1818: point = 994
	Hard reg 0 is preferable by r786 with profit 1
   Insn 503: point = 996
   Insn 502: point = 998
   Insn 501: point = 999
   Insn 500: point = 999
   Insn 499: point = 1000
   Insn 498: point = 1002
   Insn 497: point = 1004
   Insn 496: point = 1005
   Insn 495: point = 1007
   Insn 494: point = 1009
   Insn 493: point = 1010
   Insn 492: point = 1012
   Insn 491: point = 1013
   Insn 490: point = 1015
   Insn 489: point = 1017
   Insn 488: point = 1019
   Insn 487: point = 1020
   Insn 486: point = 1020
   Insn 485: point = 1020
   Insn 484: point = 1020
   Insn 483: point = 1021
   Insn 482: point = 1023
   Insn 481: point = 1025
  BB 18
   Insn 479: point = 1026
   Insn 478: point = 1026
   Insn 477: point = 1027
   Insn 476: point = 1028
   Insn 475: point = 1028
   Insn 474: point = 1029
   Insn 473: point = 1031
   Insn 472: point = 1033
   Insn 471: point = 1034
   Insn 470: point = 1036
   Insn 469: point = 1038
   Insn 468: point = 1039
   Insn 467: point = 1039
   Insn 466: point = 1040
   Insn 465: point = 1042
   Insn 464: point = 1043
   Insn 463: point = 1045
   Insn 462: point = 1047
   Insn 461: point = 1049
   Insn 460: point = 1050
   Insn 459: point = 1050
   Insn 458: point = 1050
   Insn 457: point = 1050
   Insn 456: point = 1051
   Insn 455: point = 1053
   Insn 454: point = 1055
  BB 17
   Insn 452: point = 1056
   Insn 451: point = 1056
   Insn 450: point = 1057
   Insn 449: point = 1058
   Insn 448: point = 1058
   Insn 447: point = 1059
   Insn 446: point = 1059
   Insn 445: point = 1061
   Insn 444: point = 1063
   Insn 443: point = 1064
   Insn 442: point = 1066
   Insn 441: point = 1068
  BB 16
   Insn 438: point = 1069
   Insn 437: point = 1070
   Insn 436: point = 1072
   Insn 435: point = 1073
   Insn 434: point = 1075
   Insn 433: point = 1077
   Insn 432: point = 1079
   Insn 431: point = 1080
   Insn 430: point = 1080
   Insn 429: point = 1080
   Insn 428: point = 1080
   Insn 427: point = 1081
   Insn 426: point = 1083
   Insn 425: point = 1085
   Insn 424: point = 1086
   Insn 423: point = 1087
   Insn 422: point = 1088
   Insn 421: point = 1089
   Insn 420: point = 1091
   Insn 419: point = 1092
   Insn 418: point = 1094
   Insn 417: point = 1096
   Insn 416: point = 1098
   Insn 415: point = 1099
   Insn 414: point = 1099
   Insn 413: point = 1099
   Insn 412: point = 1099
   Insn 411: point = 1100
   Insn 410: point = 1102
   Insn 409: point = 1104
  BB 15
   Insn 407: point = 1105
   Insn 406: point = 1105
   Insn 405: point = 1106
   Insn 404: point = 1107
   Insn 403: point = 1107
   Insn 402: point = 1108
   Insn 401: point = 1108
   Insn 400: point = 1110
   Insn 399: point = 1112
   Insn 398: point = 1113
   Insn 397: point = 1115
   Insn 396: point = 1117
   Insn 395: point = 1118
   Insn 394: point = 1119
  BB 13
   Insn 387: point = 1120
   Insn 386: point = 1120
   Insn 385: point = 1121
   Insn 384: point = 1123
  BB 9
   Insn 1701: point = 1124
   Insn 339: point = 1124
   Insn 338: point = 1124
   Insn 337: point = 1124
   Insn 336: point = 1125
   Insn 335: point = 1126
   Insn 334: point = 1128
   Insn 333: point = 1130
   Insn 332: point = 1132
   Insn 331: point = 1133
   Insn 330: point = 1134
   Insn 329: point = 1136
   Insn 328: point = 1138
   Insn 327: point = 1139
   Insn 326: point = 1141
   Insn 325: point = 1143
  BB 7
   Insn 318: point = 1144
   Insn 317: point = 1144
  BB 84
   Insn 1771: point = 1144
   Insn 1260: point = 1144
   Insn 1259: point = 1145
  BB 83
   Insn 1257: point = 1146
   Insn 1256: point = 1146
   Insn 1255: point = 1147
   Insn 1254: point = 1148
   Insn 1253: point = 1148
   Insn 1252: point = 1149
   Insn 1251: point = 1149
   Insn 1250: point = 1151
   Insn 1249: point = 1153
   Insn 1248: point = 1154
   Insn 1247: point = 1156
   Insn 1246: point = 1158
  BB 79
   Insn 1225: point = 1159
   Insn 1224: point = 1159
   Insn 1223: point = 1160
   Insn 1222: point = 1161
   Insn 1221: point = 1161
   Insn 1220: point = 1162
   Insn 1219: point = 1162
   Insn 1218: point = 1164
   Insn 1217: point = 1166
   Insn 1216: point = 1167
   Insn 1215: point = 1169
   Insn 1214: point = 1171
  BB 75
   Insn 1195: point = 1172
   Insn 1194: point = 1172
   Insn 1193: point = 1173
   Insn 1192: point = 1174
   Insn 1191: point = 1174
   Insn 1190: point = 1175
   Insn 1189: point = 1175
   Insn 1188: point = 1177
   Insn 1187: point = 1179
   Insn 1186: point = 1180
   Insn 1185: point = 1182
   Insn 1184: point = 1184
  BB 71
   Insn 1163: point = 1185
   Insn 1162: point = 1185
   Insn 1161: point = 1186
   Insn 1160: point = 1187
   Insn 1159: point = 1187
   Insn 1158: point = 1188
   Insn 1157: point = 1188
   Insn 1156: point = 1190
   Insn 1155: point = 1192
   Insn 1154: point = 1193
   Insn 1153: point = 1195
   Insn 1152: point = 1197
  BB 67
   Insn 1133: point = 1198
   Insn 1132: point = 1198
   Insn 1131: point = 1199
   Insn 1130: point = 1200
   Insn 1129: point = 1200
   Insn 1128: point = 1201
   Insn 1127: point = 1201
   Insn 1126: point = 1203
   Insn 1125: point = 1205
   Insn 1124: point = 1206
   Insn 1123: point = 1208
   Insn 1122: point = 1210
  BB 65
   Insn 1111: point = 1211
   Insn 1110: point = 1211
   Insn 1109: point = 1212
   Insn 1108: point = 1213
   Insn 1107: point = 1213
   Insn 1106: point = 1214
   Insn 1105: point = 1214
   Insn 1104: point = 1216
   Insn 1103: point = 1218
   Insn 1102: point = 1219
   Insn 1101: point = 1221
   Insn 1100: point = 1223
  BB 63
   Insn 1091: point = 1224
   Insn 1090: point = 1224
   Insn 1089: point = 1225
   Insn 1088: point = 1226
   Insn 1087: point = 1226
   Insn 1086: point = 1227
   Insn 1085: point = 1227
   Insn 1084: point = 1229
   Insn 1083: point = 1231
   Insn 1082: point = 1232
   Insn 1081: point = 1234
   Insn 1080: point = 1236
  BB 61
   Insn 1069: point = 1237
   Insn 1068: point = 1237
   Insn 1067: point = 1238
   Insn 1066: point = 1239
   Insn 1065: point = 1239
   Insn 1064: point = 1240
   Insn 1063: point = 1240
   Insn 1062: point = 1242
   Insn 1061: point = 1244
   Insn 1060: point = 1245
   Insn 1059: point = 1247
   Insn 1058: point = 1249
  BB 59
   Insn 1049: point = 1250
   Insn 1048: point = 1250
   Insn 1047: point = 1251
   Insn 1046: point = 1252
   Insn 1045: point = 1252
   Insn 1044: point = 1253
   Insn 1043: point = 1253
   Insn 1042: point = 1255
   Insn 1041: point = 1257
   Insn 1040: point = 1258
   Insn 1039: point = 1260
   Insn 1038: point = 1262
  BB 57
   Insn 1028: point = 1263
   Insn 1027: point = 1263
   Insn 1026: point = 1264
   Insn 1025: point = 1265
   Insn 1024: point = 1265
   Insn 1023: point = 1266
   Insn 1022: point = 1266
   Insn 1021: point = 1268
   Insn 1020: point = 1270
   Insn 1019: point = 1271
   Insn 1018: point = 1273
   Insn 1017: point = 1275
  BB 53
   Insn 980: point = 1276
   Insn 979: point = 1276
   Insn 978: point = 1277
   Insn 977: point = 1278
   Insn 976: point = 1278
   Insn 975: point = 1279
   Insn 974: point = 1279
   Insn 973: point = 1281
   Insn 972: point = 1283
   Insn 971: point = 1284
   Insn 970: point = 1286
   Insn 969: point = 1288
  BB 47
   Insn 915: point = 1289
   Insn 914: point = 1289
   Insn 913: point = 1290
   Insn 912: point = 1291
   Insn 911: point = 1291
   Insn 910: point = 1292
   Insn 909: point = 1292
   Insn 908: point = 1294
   Insn 907: point = 1296
   Insn 906: point = 1297
   Insn 905: point = 1299
   Insn 904: point = 1301
  BB 41
   Insn 854: point = 1302
   Insn 853: point = 1302
   Insn 852: point = 1303
   Insn 851: point = 1304
   Insn 850: point = 1304
   Insn 849: point = 1305
   Insn 848: point = 1305
   Insn 847: point = 1307
   Insn 846: point = 1309
   Insn 845: point = 1310
   Insn 844: point = 1312
   Insn 843: point = 1314
  BB 37
   Insn 817: point = 1315
   Insn 816: point = 1315
   Insn 815: point = 1316
   Insn 814: point = 1317
   Insn 813: point = 1317
   Insn 812: point = 1318
   Insn 811: point = 1318
   Insn 810: point = 1320
   Insn 809: point = 1322
   Insn 808: point = 1323
   Insn 807: point = 1325
   Insn 806: point = 1327
  BB 33
   Insn 784: point = 1328
   Insn 783: point = 1328
   Insn 782: point = 1329
   Insn 781: point = 1330
   Insn 780: point = 1330
   Insn 779: point = 1331
   Insn 778: point = 1331
   Insn 777: point = 1333
   Insn 776: point = 1335
   Insn 775: point = 1336
   Insn 774: point = 1338
   Insn 773: point = 1340
  BB 31
   Insn 764: point = 1341
   Insn 763: point = 1341
   Insn 762: point = 1342
   Insn 761: point = 1343
   Insn 760: point = 1343
   Insn 759: point = 1344
   Insn 758: point = 1344
   Insn 757: point = 1346
   Insn 756: point = 1348
   Insn 755: point = 1349
   Insn 754: point = 1351
   Insn 753: point = 1353
  BB 29
   Insn 744: point = 1354
   Insn 743: point = 1354
   Insn 742: point = 1355
   Insn 741: point = 1356
   Insn 740: point = 1356
   Insn 739: point = 1357
   Insn 738: point = 1357
   Insn 737: point = 1359
   Insn 736: point = 1361
   Insn 735: point = 1362
   Insn 734: point = 1364
   Insn 733: point = 1366
  BB 12
   Insn 381: point = 1367
   Insn 380: point = 1367
   Insn 379: point = 1368
   Insn 378: point = 1369
   Insn 377: point = 1369
   Insn 376: point = 1370
   Insn 375: point = 1370
   Insn 374: point = 1372
   Insn 373: point = 1374
   Insn 372: point = 1375
   Insn 371: point = 1377
   Insn 370: point = 1379
  BB 11
   Insn 368: point = 1380
   Insn 367: point = 1380
   Insn 366: point = 1381
   Insn 365: point = 1382
   Insn 364: point = 1382
   Insn 363: point = 1383
   Insn 362: point = 1383
   Insn 361: point = 1385
   Insn 360: point = 1387
   Insn 359: point = 1388
   Insn 358: point = 1390
   Insn 357: point = 1392
  BB 10
   Insn 355: point = 1393
   Insn 354: point = 1393
   Insn 353: point = 1394
   Insn 352: point = 1395
   Insn 351: point = 1395
   Insn 350: point = 1396
   Insn 349: point = 1396
   Insn 348: point = 1398
   Insn 347: point = 1400
   Insn 346: point = 1401
   Insn 345: point = 1403
   Insn 344: point = 1405
  BB 6
   Insn 315: point = 1406
   Insn 314: point = 1406
   Insn 313: point = 1407
   Insn 312: point = 1409
   Insn 311: point = 1411
   Insn 310: point = 1413
   Insn 309: point = 1414
   Insn 308: point = 1416
   Insn 307: point = 1418
 r83: [50..67] [28..33] [15..15] [2..8]
 r84: [555..557]
 r85: [547..549]
 r86: [545..546]
 r87: [540..542]
 r88: [532..534]
 r89: [530..531]
 r90: [525..527]
 r91: [517..519]
 r92: [514..516]
 r93: [509..511]
 r94: [501..503]
 r95: [499..500]
 r96: [494..496]
 r97: [486..488]
 r98: [484..485]
 r99: [479..481]
 r100: [471..473]
 r101: [469..470]
 r102: [464..466]
 r103: [456..458]
 r104: [454..455]
 r105: [449..451]
 r106: [441..443]
 r107: [438..440]
 r108: [433..435]
 r109: [425..427]
 r110: [423..424]
 r111: [418..420]
 r112: [410..412]
 r113: [408..409]
 r114: [403..405]
 r115: [395..397]
 r116: [393..394]
 r117: [388..390]
 r118: [380..382]
 r119: [378..379]
 r120: [373..375]
 r121: [365..367]
 r122: [362..364]
 r123: [357..359]
 r124: [349..351]
 r125: [347..348]
 r126: [342..344]
 r127: [334..336]
 r128: [332..333]
 r129: [327..329]
 r130: [319..321]
 r131: [317..318]
 r132: [312..314]
 r133: [304..306]
 r134: [302..303]
 r135: [297..299]
 r136: [289..291]
 r137: [287..288]
 r138: [282..284]
 r139: [274..276]
 r140: [272..273]
 r141: [1415..1416]
 r142: [1412..1414]
 r143: [1410..1411]
 r144: [1408..1409]
 r145: [1406..1407]
 r146: [1402..1403]
 r147: [1399..1401]
 r148: [1397..1398]
 r149: [1395..1396]
 r150: [1393..1394]
 r151: [1389..1390]
 r152: [1386..1388]
 r153: [1384..1385]
 r154: [1382..1383]
 r155: [1380..1381]
 r156: [1376..1377]
 r157: [1373..1375]
 r158: [1371..1372]
 r159: [1369..1370]
 r160: [1367..1368]
 r161: [1363..1364]
 r162: [1360..1362]
 r163: [1358..1359]
 r164: [1356..1357]
 r165: [1354..1355]
 r166: [1350..1351]
 r167: [1347..1349]
 r168: [1345..1346]
 r169: [1343..1344]
 r170: [1341..1342]
 r171: [1337..1338]
 r172: [1334..1336]
 r173: [1332..1333]
 r174: [1330..1331]
 r175: [1328..1329]
 r176: [745..746]
 r177: [1324..1325]
 r178: [1321..1323]
 r179: [1319..1320]
 r180: [1317..1318]
 r181: [1315..1316]
 r182: [736..737]
 r183: [734..735]
 r184: [730..731]
 r185: [725..727]
 r186: [1311..1312]
 r187: [1308..1310]
 r188: [1306..1307]
 r189: [1304..1305]
 r190: [1302..1303]
 r191: [721..722]
 r192: [715..716]
 r193: [712..714]
 r194: [710..711]
 r195: [708..709]
 r196: [706..707]
 r197: [692..703]
 r198: [699..700]
 r199: [696..698]
 r200: [694..695]
 r201: [691..693]
 r202: [1298..1299]
 r203: [1295..1297]
 r204: [1293..1294]
 r205: [1291..1292]
 r206: [1289..1290]
 r207: [687..688]
 r208: [685..686]
 r209: [681..682]
 r210: [677..678]
 r211: [674..676]
 r212: [672..673]
 r213: [670..671]
 r214: [668..669]
 r215: [664..665]
 r216: [652..663]
 r217: [659..660]
 r218: [656..658]
 r219: [654..655]
 r220: [651..653]
 r221: [1285..1286]
 r222: [1282..1284]
 r223: [1280..1281]
 r224: [1278..1279]
 r225: [1276..1277]
 r226: [647..648]
 r227: [644..646]
 r228: [642..643]
 r229: [640..641]
 r230: [638..639]
 r231: [624..635]
 r232: [631..632]
 r233: [628..630]
 r234: [626..627]
 r235: [623..625]
 r236: [1272..1273]
 r237: [1269..1271]
 r238: [1267..1268]
 r239: [1265..1266]
 r240: [1263..1264]
 r241: [619..620]
 r242: [1259..1260]
 r243: [1256..1258]
 r244: [1254..1255]
 r245: [1252..1253]
 r246: [1250..1251]
 r247: [1246..1247]
 r248: [1243..1245]
 r249: [1241..1242]
 r250: [1239..1240]
 r251: [1237..1238]
 r252: [613..614]
 r253: [1233..1234]
 r254: [1230..1232]
 r255: [1228..1229]
 r256: [1226..1227]
 r257: [1224..1225]
 r258: [1220..1221]
 r259: [1217..1219]
 r260: [1215..1216]
 r261: [1213..1214]
 r262: [1211..1212]
 r263: [607..608]
 r264: [1207..1208]
 r265: [1204..1206]
 r266: [1202..1203]
 r267: [1200..1201]
 r268: [1198..1199]
 r269: [603..604]
 r270: [1194..1195]
 r271: [1191..1193]
 r272: [1189..1190]
 r273: [1187..1188]
 r274: [1185..1186]
 r275: [597..598]
 r276: [595..596]
 r277: [591..592]
 r278: [1181..1182]
 r279: [1178..1180]
 r280: [1176..1177]
 r281: [1174..1175]
 r282: [1172..1173]
 r283: [587..588]
 r284: [1168..1169]
 r285: [1165..1167]
 r286: [1163..1164]
 r287: [1161..1162]
 r288: [1159..1160]
 r289: [581..582]
 r290: [579..580]
 r291: [575..576]
 r292: [1155..1156]
 r293: [1152..1154]
 r294: [1150..1151]
 r295: [1148..1149]
 r296: [1146..1147]
 r297: [571..572]
 r298: [568..570]
 r299: [566..567]
 r300: [564..565]
 r301: [562..563]
 r302: [46..47]
 r303: [43..45]
 r304: [41..42]
 r305: [39..40]
 r306: [37..38]
 r307: [1120..1121]
 r308: [1114..1115]
 r309: [1111..1113]
 r310: [1109..1110]
 r311: [1107..1108]
 r312: [1105..1106]
 r313: [1101..1102]
 r314: [1098..1100]
 r315: [1090..1092]
 r316: [1088..1089]
 r317: [1082..1083]
 r318: [1079..1081]
 r319: [1071..1073]
 r320: [1069..1070]
 r321: [1065..1066]
 r322: [1062..1064]
 r323: [1060..1061]
 r324: [1058..1059]
 r325: [1056..1057]
 r326: [1052..1053]
 r327: [1049..1051]
 r328: [1041..1043]
 r329: [1039..1040]
 r330: [1035..1036]
 r331: [1032..1034]
 r332: [1030..1031]
 r333: [1028..1029]
 r334: [1026..1027]
 r335: [1022..1023]
 r336: [1019..1021]
 r337: [1011..1013]
 r338: [993..1010]
 r339: [1006..1007]
 r340: [1003..1005]
 r341: [1001..1002]
 r342: [999..1000]
 r343: [997..998]
 r344: [993..994]
 r345: [987..988]
 r346: [984..986]
 r347: [976..978]
 r348: [958..975]
 r349: [971..972]
 r350: [968..970]
 r351: [966..967]
 r352: [964..965]
 r353: [962..963]
 r354: [958..959]
 r355: [954..955]
 r356: [951..953]
 r357: [943..945]
 r358: [941..942]
 r359: [937..938]
 r360: [934..936]
 r361: [932..933]
 r362: [930..931]
 r363: [928..929]
 r364: [924..925]
 r365: [921..923]
 r366: [913..915]
 r367: [911..912]
 r368: [907..908]
 r369: [904..906]
 r370: [902..903]
 r371: [900..901]
 r372: [898..899]
 r373: [894..895]
 r374: [891..893]
 r375: [883..885]
 r376: [867..882]
 r377: [878..879]
 r378: [875..877]
 r379: [873..874]
 r380: [871..872]
 r381: [869..870]
 r382: [867..868]
 r383: [863..864]
 r384: [860..862]
 r385: [858..859]
 r386: [856..857]
 r387: [854..855]
 r388: [850..851]
 r389: [847..849]
 r390: [839..841]
 r391: [821..838]
 r392: [834..835]
 r393: [831..833]
 r394: [829..830]
 r395: [827..828]
 r396: [825..826]
 r397: [821..822]
 r398: [815..816]
 r399: [812..814]
 r400: [804..806]
 r401: [799..803]
 r402: [799..800]
 r403: [795..796]
 r404: [792..794]
 r405: [784..786]
 r406: [766..783]
 r407: [779..780]
 r408: [776..778]
 r409: [774..775]
 r410: [772..773]
 r411: [770..771]
 r412: [766..767]
 r413: [762..763]
 r414: [759..761]
 r415: [751..753]
 r416: [749..750]
 r417: [1140..1141]
 r418: [1137..1139]
 r419: [1135..1136]
 r420: [1125..1134]
 r421: [1124..1126]
 r422: [242..243]
 r423: [238..239]
 r424: [234..235]
 r425: [232..233]
 r426: [224..225]
 r427: [220..221]
 r428: [216..217]
 r429: [212..213]
 r430: [210..211]
 r431: [186..187]
 r432: [182..183]
 r433: [180..181]
 r434: [206..207]
 r435: [202..203]
 r436: [198..199]
 r437: [194..195]
 r438: [192..193]
 r439: [24..25]
 r440: [20..21]
 r441: [16..17]
 r442: [11..12]
 r443: [9..10]
 r444: [176..179]
 r445: [170..173]
 r446: [166..167]
 r447: [160..163]
 r448: [113..117]
 r449: [112..114]
 r450: [105..109]
 r451: [104..106]
 r452: [95..101]
 r453: [97..98]
 r454: [94..96]
 r455: [86..91]
 r456: [78..83]
 r457: [152..157]
 r458: [144..149]
 r459: [140..141]
 r460: [134..139]
 r461: [126..131]
 r462: [118..123]
 r463: [76..77]
 r464: [74..75]
 r465: [70..71]
 r466: [68..69]
 r467: [0..1]
 r468: [266..271]
 r469: [264..265]
 r470: [258..263]
 r471: [256..257]
 r472: [250..255]
 r473: [558..559]
 r474: [554..556] [550..551]
 r475: [552..553]
 r476: [547..548]
 r477: [543..544]
 r478: [539..541] [535..536]
 r479: [537..538]
 r480: [532..533]
 r481: [528..529]
 r482: [524..526] [520..521]
 r483: [522..523]
 r484: [517..518]
 r485: [514..515]
 r486: [512..513]
 r487: [508..510] [504..505]
 r488: [506..507]
 r489: [501..502]
 r490: [497..498]
 r491: [493..495] [489..490]
 r492: [491..492]
 r493: [486..487]
 r494: [482..483]
 r495: [478..480] [474..475]
 r496: [476..477]
 r497: [471..472]
 r498: [467..468]
 r499: [463..465] [459..460]
 r500: [461..462]
 r501: [456..457]
 r502: [452..453]
 r503: [448..450] [444..445]
 r504: [446..447]
 r505: [441..442]
 r506: [438..439]
 r507: [436..437]
 r508: [432..434] [428..429]
 r509: [430..431]
 r510: [425..426]
 r511: [421..422]
 r512: [417..419] [413..414]
 r513: [415..416]
 r514: [410..411]
 r515: [406..407]
 r516: [402..404] [398..399]
 r517: [400..401]
 r518: [395..396]
 r519: [391..392]
 r520: [387..389] [383..384]
 r521: [385..386]
 r522: [380..381]
 r523: [376..377]
 r524: [372..374] [368..369]
 r525: [370..371]
 r526: [365..366]
 r527: [362..363]
 r528: [360..361]
 r529: [356..358] [352..353]
 r530: [354..355]
 r531: [349..350]
 r532: [345..346]
 r533: [341..343] [337..338]
 r534: [339..340]
 r535: [334..335]
 r536: [330..331]
 r537: [326..328] [322..323]
 r538: [324..325]
 r539: [319..320]
 r540: [315..316]
 r541: [311..313] [307..308]
 r542: [309..310]
 r543: [304..305]
 r544: [300..301]
 r545: [296..298] [292..293]
 r546: [294..295]
 r547: [289..290]
 r548: [285..286]
 r549: [281..283] [277..278]
 r550: [279..280]
 r551: [274..275]
 r552: [248..249]
 r553: [1417..1418]
 r554: [1412..1413]
 r555: [1142..1143]
 r556: [1137..1138]
 r557: [1127..1133]
 r558: [1129..1130]
 r559: [1131..1132]
 r560: [1127..1128]
 r561: [1404..1405]
 r562: [1399..1400]
 r563: [1391..1392]
 r564: [1386..1387]
 r565: [1378..1379]
 r566: [1373..1374]
 r567: [1122..1123]
 r568: [1118..1119]
 r569: [1116..1117]
 r570: [1111..1112]
 r571: [1103..1104]
 r572: [1097..1099] [1093..1094]
 r573: [1095..1096]
 r574: [1090..1091]
 r575: [1086..1087]
 r576: [1084..1085]
 r577: [1078..1080] [1074..1075]
 r578: [1076..1077]
 r579: [1071..1072]
 r580: [1067..1068]
 r581: [1062..1063]
 r582: [1054..1055]
 r583: [1048..1050] [1044..1045]
 r584: [1046..1047]
 r585: [1041..1042]
 r586: [1037..1038]
 r587: [1032..1033]
 r588: [1024..1025]
 r589: [1018..1020] [1014..1015]
 r590: [1016..1017]
 r591: [1011..1012]
 r592: [1008..1009]
 r593: [1003..1004]
 r594: [991..992]
 r595: [989..990]
 r596: [983..985] [979..980]
 r597: [981..982]
 r598: [976..977]
 r599: [973..974]
 r600: [968..969]
 r601: [956..957]
 r602: [950..952] [946..947]
 r603: [948..949]
 r604: [943..944]
 r605: [939..940]
 r606: [934..935]
 r607: [926..927]
 r608: [920..922] [916..917]
 r609: [918..919]
 r610: [913..914]
 r611: [909..910]
 r612: [904..905]
 r613: [896..897]
 r614: [890..892] [886..887]
 r615: [888..889]
 r616: [883..884]
 r617: [880..881]
 r618: [875..876]
 r619: [865..866]
 r620: [860..861]
 r621: [852..853]
 r622: [846..848] [842..843]
 r623: [844..845]
 r624: [839..840]
 r625: [836..837]
 r626: [831..832]
 r627: [819..820]
 r628: [817..818]
 r629: [811..813] [807..808]
 r630: [809..810]
 r631: [804..805]
 r632: [801..802]
 r633: [797..798]
 r634: [791..793] [787..788]
 r635: [789..790]
 r636: [784..785]
 r637: [781..782]
 r638: [776..777]
 r639: [764..765]
 r640: [758..760] [754..755]
 r641: [756..757]
 r642: [751..752]
 r643: [1365..1366]
 r644: [1360..1361]
 r645: [1352..1353]
 r646: [1347..1348]
 r647: [1339..1340]
 r648: [1334..1335]
 r649: [747..748]
 r650: [743..744]
 r651: [740..742]
 r652: [740..741]
 r653: [1326..1327]
 r654: [1321..1322]
 r655: [738..739]
 r656: [732..733]
 r657: [728..729]
 r658: [725..726]
 r659: [1313..1314]
 r660: [1308..1309]
 r661: [723..724]
 r662: [719..720]
 r663: [717..718]
 r664: [712..713]
 r665: [704..705]
 r666: [701..702]
 r667: [696..697]
 r668: [1300..1301]
 r669: [1295..1296]
 r670: [689..690]
 r671: [683..684]
 r672: [679..680]
 r673: [674..675]
 r674: [666..667]
 r675: [661..662]
 r676: [656..657]
 r677: [1287..1288]
 r678: [1282..1283]
 r679: [649..650]
 r680: [644..645]
 r681: [636..637]
 r682: [633..634]
 r683: [628..629]
 r684: [1274..1275]
 r685: [1269..1270]
 r686: [621..622]
 r687: [1261..1262]
 r688: [1256..1257]
 r689: [617..618]
 r690: [1248..1249]
 r691: [1243..1244]
 r692: [615..616]
 r693: [1235..1236]
 r694: [1230..1231]
 r695: [611..612]
 r696: [1222..1223]
 r697: [1217..1218]
 r698: [609..610]
 r699: [1209..1210]
 r700: [1204..1205]
 r701: [605..606]
 r702: [601..602]
 r703: [1196..1197]
 r704: [1191..1192]
 r705: [599..600]
 r706: [593..594]
 r707: [1183..1184]
 r708: [1178..1179]
 r709: [589..590]
 r710: [585..586]
 r711: [1170..1171]
 r712: [1165..1166]
 r713: [583..584]
 r714: [577..578]
 r715: [1157..1158]
 r716: [1152..1153]
 r717: [1144..1145]
 r718: [573..574]
 r719: [568..569]
 r720: [560..561]
 r721: [48..49]
 r722: [43..44]
 r723: [34..36]
 r724: [34..35]
 r725: [246..247]
 r726: [244..245]
 r727: [240..241]
 r728: [236..237]
 r729: [230..231]
 r730: [227..229]
 r731: [226..228]
 r732: [222..223]
 r733: [218..219]
 r734: [214..215]
 r735: [190..191]
 r736: [188..189]
 r737: [184..185]
 r738: [208..209]
 r739: [204..205]
 r740: [200..201]
 r741: [196..197]
 r742: [26..27]
 r743: [22..23]
 r744: [18..19]
 r745: [13..14]
 r746: [177..178]
 r747: [174..175]
 r748: [171..172]
 r749: [168..169]
 r750: [164..165]
 r751: [161..162]
 r752: [115..116]
 r753: [110..111]
 r754: [107..108]
 r755: [102..103]
 r756: [99..100]
 r757: [92..93]
 r758: [89..90]
 r759: [87..88]
 r760: [84..85]
 r761: [81..82]
 r762: [79..80]
 r763: [158..159]
 r764: [155..156]
 r765: [153..154]
 r766: [150..151]
 r767: [147..148]
 r768: [145..146]
 r769: [142..143]
 r770: [137..138]
 r771: [135..136]
 r772: [132..133]
 r773: [129..130]
 r774: [127..128]
 r775: [124..125]
 r776: [121..122]
 r777: [119..120]
 r778: [72..73]
 r780: [269..270]
 r781: [267..268]
 r782: [261..262]
 r783: [259..260]
 r784: [253..254]
 r785: [251..252]
 r786: [995..996]
 r787: [960..961]
 r788: [823..824]
 r789: [768..769]
Compressing live ranges: from 1419 to 1205 - 84%
Ranges after the compression:
 r83: [39..40] [23..24] [10..10] [2..3]
 r84: [435..436]
 r85: [429..430]
 r86: [427..428]
 r87: [423..424]
 r88: [417..418]
 r89: [415..416]
 r90: [411..412]
 r91: [405..406]
 r92: [403..404]
 r93: [399..400]
 r94: [393..394]
 r95: [391..392]
 r96: [387..388]
 r97: [381..382]
 r98: [379..380]
 r99: [375..376]
 r100: [369..370]
 r101: [367..368]
 r102: [363..364]
 r103: [357..358]
 r104: [355..356]
 r105: [351..352]
 r106: [345..346]
 r107: [343..344]
 r108: [339..340]
 r109: [333..334]
 r110: [331..332]
 r111: [327..328]
 r112: [321..322]
 r113: [319..320]
 r114: [315..316]
 r115: [309..310]
 r116: [307..308]
 r117: [303..304]
 r118: [297..298]
 r119: [295..296]
 r120: [291..292]
 r121: [285..286]
 r122: [283..284]
 r123: [279..280]
 r124: [273..274]
 r125: [271..272]
 r126: [267..268]
 r127: [261..262]
 r128: [259..260]
 r129: [255..256]
 r130: [249..250]
 r131: [247..248]
 r132: [243..244]
 r133: [237..238]
 r134: [235..236]
 r135: [231..232]
 r136: [225..226]
 r137: [223..224]
 r138: [219..220]
 r139: [213..214]
 r140: [211..212]
 r141: [1201..1202]
 r142: [1199..1200]
 r143: [1197..1198]
 r144: [1195..1196]
 r145: [1193..1194]
 r146: [1189..1190]
 r147: [1187..1188]
 r148: [1185..1186]
 r149: [1183..1184]
 r150: [1181..1182]
 r151: [1177..1178]
 r152: [1175..1176]
 r153: [1173..1174]
 r154: [1171..1172]
 r155: [1169..1170]
 r156: [1165..1166]
 r157: [1163..1164]
 r158: [1161..1162]
 r159: [1159..1160]
 r160: [1157..1158]
 r161: [1153..1154]
 r162: [1151..1152]
 r163: [1149..1150]
 r164: [1147..1148]
 r165: [1145..1146]
 r166: [1141..1142]
 r167: [1139..1140]
 r168: [1137..1138]
 r169: [1135..1136]
 r170: [1133..1134]
 r171: [1129..1130]
 r172: [1127..1128]
 r173: [1125..1126]
 r174: [1123..1124]
 r175: [1121..1122]
 r176: [609..610]
 r177: [1117..1118]
 r178: [1115..1116]
 r179: [1113..1114]
 r180: [1111..1112]
 r181: [1109..1110]
 r182: [601..602]
 r183: [599..600]
 r184: [595..596]
 r185: [591..592]
 r186: [1105..1106]
 r187: [1103..1104]
 r188: [1101..1102]
 r189: [1099..1100]
 r190: [1097..1098]
 r191: [587..588]
 r192: [581..582]
 r193: [579..580]
 r194: [577..578]
 r195: [575..576]
 r196: [573..574]
 r197: [561..570]
 r198: [567..568]
 r199: [565..566]
 r200: [563..564]
 r201: [561..562]
 r202: [1093..1094]
 r203: [1091..1092]
 r204: [1089..1090]
 r205: [1087..1088]
 r206: [1085..1086]
 r207: [557..558]
 r208: [555..556]
 r209: [551..552]
 r210: [547..548]
 r211: [545..546]
 r212: [543..544]
 r213: [541..542]
 r214: [539..540]
 r215: [535..536]
 r216: [525..534]
 r217: [531..532]
 r218: [529..530]
 r219: [527..528]
 r220: [525..526]
 r221: [1081..1082]
 r222: [1079..1080]
 r223: [1077..1078]
 r224: [1075..1076]
 r225: [1073..1074]
 r226: [521..522]
 r227: [519..520]
 r228: [517..518]
 r229: [515..516]
 r230: [513..514]
 r231: [501..510]
 r232: [507..508]
 r233: [505..506]
 r234: [503..504]
 r235: [501..502]
 r236: [1069..1070]
 r237: [1067..1068]
 r238: [1065..1066]
 r239: [1063..1064]
 r240: [1061..1062]
 r241: [497..498]
 r242: [1057..1058]
 r243: [1055..1056]
 r244: [1053..1054]
 r245: [1051..1052]
 r246: [1049..1050]
 r247: [1045..1046]
 r248: [1043..1044]
 r249: [1041..1042]
 r250: [1039..1040]
 r251: [1037..1038]
 r252: [491..492]
 r253: [1033..1034]
 r254: [1031..1032]
 r255: [1029..1030]
 r256: [1027..1028]
 r257: [1025..1026]
 r258: [1021..1022]
 r259: [1019..1020]
 r260: [1017..1018]
 r261: [1015..1016]
 r262: [1013..1014]
 r263: [485..486]
 r264: [1009..1010]
 r265: [1007..1008]
 r266: [1005..1006]
 r267: [1003..1004]
 r268: [1001..1002]
 r269: [481..482]
 r270: [997..998]
 r271: [995..996]
 r272: [993..994]
 r273: [991..992]
 r274: [989..990]
 r275: [475..476]
 r276: [473..474]
 r277: [469..470]
 r278: [985..986]
 r279: [983..984]
 r280: [981..982]
 r281: [979..980]
 r282: [977..978]
 r283: [465..466]
 r284: [973..974]
 r285: [971..972]
 r286: [969..970]
 r287: [967..968]
 r288: [965..966]
 r289: [459..460]
 r290: [457..458]
 r291: [453..454]
 r292: [961..962]
 r293: [959..960]
 r294: [957..958]
 r295: [955..956]
 r296: [953..954]
 r297: [449..450]
 r298: [447..448]
 r299: [445..446]
 r300: [443..444]
 r301: [441..442]
 r302: [35..36]
 r303: [33..34]
 r304: [31..32]
 r305: [29..30]
 r306: [27..28]
 r307: [931..932]
 r308: [925..926]
 r309: [923..924]
 r310: [921..922]
 r311: [919..920]
 r312: [917..918]
 r313: [913..914]
 r314: [911..912]
 r315: [905..906]
 r316: [903..904]
 r317: [897..898]
 r318: [895..896]
 r319: [889..890]
 r320: [887..888]
 r321: [883..884]
 r322: [881..882]
 r323: [879..880]
 r324: [877..878]
 r325: [875..876]
 r326: [871..872]
 r327: [869..870]
 r328: [863..864]
 r329: [861..862]
 r330: [857..858]
 r331: [855..856]
 r332: [853..854]
 r333: [851..852]
 r334: [849..850]
 r335: [845..846]
 r336: [843..844]
 r337: [837..838]
 r338: [821..836]
 r339: [833..834]
 r340: [831..832]
 r341: [829..830]
 r342: [827..828]
 r343: [825..826]
 r344: [821..822]
 r345: [815..816]
 r346: [813..814]
 r347: [807..808]
 r348: [791..806]
 r349: [803..804]
 r350: [801..802]
 r351: [799..800]
 r352: [797..798]
 r353: [795..796]
 r354: [791..792]
 r355: [787..788]
 r356: [785..786]
 r357: [779..780]
 r358: [777..778]
 r359: [773..774]
 r360: [771..772]
 r361: [769..770]
 r362: [767..768]
 r363: [765..766]
 r364: [761..762]
 r365: [759..760]
 r366: [753..754]
 r367: [751..752]
 r368: [747..748]
 r369: [745..746]
 r370: [743..744]
 r371: [741..742]
 r372: [739..740]
 r373: [735..736]
 r374: [733..734]
 r375: [727..728]
 r376: [713..726]
 r377: [723..724]
 r378: [721..722]
 r379: [719..720]
 r380: [717..718]
 r381: [715..716]
 r382: [713..714]
 r383: [709..710]
 r384: [707..708]
 r385: [705..706]
 r386: [703..704]
 r387: [701..702]
 r388: [697..698]
 r389: [695..696]
 r390: [689..690]
 r391: [673..688]
 r392: [685..686]
 r393: [683..684]
 r394: [681..682]
 r395: [679..680]
 r396: [677..678]
 r397: [673..674]
 r398: [667..668]
 r399: [665..666]
 r400: [659..660]
 r401: [655..658]
 r402: [655..656]
 r403: [651..652]
 r404: [649..650]
 r405: [643..644]
 r406: [627..642]
 r407: [639..640]
 r408: [637..638]
 r409: [635..636]
 r410: [633..634]
 r411: [631..632]
 r412: [627..628]
 r413: [623..624]
 r414: [621..622]
 r415: [615..616]
 r416: [613..614]
 r417: [947..948]
 r418: [945..946]
 r419: [943..944]
 r420: [935..942]
 r421: [935..936]
 r422: [187..188]
 r423: [183..184]
 r424: [179..180]
 r425: [177..178]
 r426: [171..172]
 r427: [167..168]
 r428: [163..164]
 r429: [159..160]
 r430: [157..158]
 r431: [133..134]
 r432: [129..130]
 r433: [127..128]
 r434: [153..154]
 r435: [149..150]
 r436: [145..146]
 r437: [141..142]
 r438: [139..140]
 r439: [19..20]
 r440: [15..16]
 r441: [11..12]
 r442: [6..7]
 r443: [4..5]
 r444: [125..126]
 r445: [121..122]
 r446: [117..118]
 r447: [113..114]
 r448: [77..80]
 r449: [77..78]
 r450: [71..74]
 r451: [71..72]
 r452: [63..68]
 r453: [65..66]
 r454: [63..64]
 r455: [57..60]
 r456: [51..54]
 r457: [107..110]
 r458: [101..104]
 r459: [97..98]
 r460: [93..96]
 r461: [87..90]
 r462: [81..84]
 r463: [49..50]
 r464: [47..48]
 r465: [43..44]
 r466: [41..42]
 r467: [0..1]
 r468: [207..210]
 r469: [205..206]
 r470: [201..204]
 r471: [199..200]
 r472: [195..198]
 r473: [437..438]
 r474: [435..436] [431..432]
 r475: [433..434]
 r476: [429..430]
 r477: [425..426]
 r478: [423..424] [419..420]
 r479: [421..422]
 r480: [417..418]
 r481: [413..414]
 r482: [411..412] [407..408]
 r483: [409..410]
 r484: [405..406]
 r485: [403..404]
 r486: [401..402]
 r487: [399..400] [395..396]
 r488: [397..398]
 r489: [393..394]
 r490: [389..390]
 r491: [387..388] [383..384]
 r492: [385..386]
 r493: [381..382]
 r494: [377..378]
 r495: [375..376] [371..372]
 r496: [373..374]
 r497: [369..370]
 r498: [365..366]
 r499: [363..364] [359..360]
 r500: [361..362]
 r501: [357..358]
 r502: [353..354]
 r503: [351..352] [347..348]
 r504: [349..350]
 r505: [345..346]
 r506: [343..344]
 r507: [341..342]
 r508: [339..340] [335..336]
 r509: [337..338]
 r510: [333..334]
 r511: [329..330]
 r512: [327..328] [323..324]
 r513: [325..326]
 r514: [321..322]
 r515: [317..318]
 r516: [315..316] [311..312]
 r517: [313..314]
 r518: [309..310]
 r519: [305..306]
 r520: [303..304] [299..300]
 r521: [301..302]
 r522: [297..298]
 r523: [293..294]
 r524: [291..292] [287..288]
 r525: [289..290]
 r526: [285..286]
 r527: [283..284]
 r528: [281..282]
 r529: [279..280] [275..276]
 r530: [277..278]
 r531: [273..274]
 r532: [269..270]
 r533: [267..268] [263..264]
 r534: [265..266]
 r535: [261..262]
 r536: [257..258]
 r537: [255..256] [251..252]
 r538: [253..254]
 r539: [249..250]
 r540: [245..246]
 r541: [243..244] [239..240]
 r542: [241..242]
 r543: [237..238]
 r544: [233..234]
 r545: [231..232] [227..228]
 r546: [229..230]
 r547: [225..226]
 r548: [221..222]
 r549: [219..220] [215..216]
 r550: [217..218]
 r551: [213..214]
 r552: [193..194]
 r553: [1203..1204]
 r554: [1199..1200]
 r555: [949..950]
 r556: [945..946]
 r557: [937..942]
 r558: [939..940]
 r559: [941..942]
 r560: [937..938]
 r561: [1191..1192]
 r562: [1187..1188]
 r563: [1179..1180]
 r564: [1175..1176]
 r565: [1167..1168]
 r566: [1163..1164]
 r567: [933..934]
 r568: [929..930]
 r569: [927..928]
 r570: [923..924]
 r571: [915..916]
 r572: [911..912] [907..908]
 r573: [909..910]
 r574: [905..906]
 r575: [901..902]
 r576: [899..900]
 r577: [895..896] [891..892]
 r578: [893..894]
 r579: [889..890]
 r580: [885..886]
 r581: [881..882]
 r582: [873..874]
 r583: [869..870] [865..866]
 r584: [867..868]
 r585: [863..864]
 r586: [859..860]
 r587: [855..856]
 r588: [847..848]
 r589: [843..844] [839..840]
 r590: [841..842]
 r591: [837..838]
 r592: [835..836]
 r593: [831..832]
 r594: [819..820]
 r595: [817..818]
 r596: [813..814] [809..810]
 r597: [811..812]
 r598: [807..808]
 r599: [805..806]
 r600: [801..802]
 r601: [789..790]
 r602: [785..786] [781..782]
 r603: [783..784]
 r604: [779..780]
 r605: [775..776]
 r606: [771..772]
 r607: [763..764]
 r608: [759..760] [755..756]
 r609: [757..758]
 r610: [753..754]
 r611: [749..750]
 r612: [745..746]
 r613: [737..738]
 r614: [733..734] [729..730]
 r615: [731..732]
 r616: [727..728]
 r617: [725..726]
 r618: [721..722]
 r619: [711..712]
 r620: [707..708]
 r621: [699..700]
 r622: [695..696] [691..692]
 r623: [693..694]
 r624: [689..690]
 r625: [687..688]
 r626: [683..684]
 r627: [671..672]
 r628: [669..670]
 r629: [665..666] [661..662]
 r630: [663..664]
 r631: [659..660]
 r632: [657..658]
 r633: [653..654]
 r634: [649..650] [645..646]
 r635: [647..648]
 r636: [643..644]
 r637: [641..642]
 r638: [637..638]
 r639: [625..626]
 r640: [621..622] [617..618]
 r641: [619..620]
 r642: [615..616]
 r643: [1155..1156]
 r644: [1151..1152]
 r645: [1143..1144]
 r646: [1139..1140]
 r647: [1131..1132]
 r648: [1127..1128]
 r649: [611..612]
 r650: [607..608]
 r651: [605..606]
 r652: [605..606]
 r653: [1119..1120]
 r654: [1115..1116]
 r655: [603..604]
 r656: [597..598]
 r657: [593..594]
 r658: [591..592]
 r659: [1107..1108]
 r660: [1103..1104]
 r661: [589..590]
 r662: [585..586]
 r663: [583..584]
 r664: [579..580]
 r665: [571..572]
 r666: [569..570]
 r667: [565..566]
 r668: [1095..1096]
 r669: [1091..1092]
 r670: [559..560]
 r671: [553..554]
 r672: [549..550]
 r673: [545..546]
 r674: [537..538]
 r675: [533..534]
 r676: [529..530]
 r677: [1083..1084]
 r678: [1079..1080]
 r679: [523..524]
 r680: [519..520]
 r681: [511..512]
 r682: [509..510]
 r683: [505..506]
 r684: [1071..1072]
 r685: [1067..1068]
 r686: [499..500]
 r687: [1059..1060]
 r688: [1055..1056]
 r689: [495..496]
 r690: [1047..1048]
 r691: [1043..1044]
 r692: [493..494]
 r693: [1035..1036]
 r694: [1031..1032]
 r695: [489..490]
 r696: [1023..1024]
 r697: [1019..1020]
 r698: [487..488]
 r699: [1011..1012]
 r700: [1007..1008]
 r701: [483..484]
 r702: [479..480]
 r703: [999..1000]
 r704: [995..996]
 r705: [477..478]
 r706: [471..472]
 r707: [987..988]
 r708: [983..984]
 r709: [467..468]
 r710: [463..464]
 r711: [975..976]
 r712: [971..972]
 r713: [461..462]
 r714: [455..456]
 r715: [963..964]
 r716: [959..960]
 r717: [951..952]
 r718: [451..452]
 r719: [447..448]
 r720: [439..440]
 r721: [37..38]
 r722: [33..34]
 r723: [25..26]
 r724: [25..26]
 r725: [191..192]
 r726: [189..190]
 r727: [185..186]
 r728: [181..182]
 r729: [175..176]
 r730: [173..174]
 r731: [173..174]
 r732: [169..170]
 r733: [165..166]
 r734: [161..162]
 r735: [137..138]
 r736: [135..136]
 r737: [131..132]
 r738: [155..156]
 r739: [151..152]
 r740: [147..148]
 r741: [143..144]
 r742: [21..22]
 r743: [17..18]
 r744: [13..14]
 r745: [8..9]
 r746: [125..126]
 r747: [123..124]
 r748: [121..122]
 r749: [119..120]
 r750: [115..116]
 r751: [113..114]
 r752: [79..80]
 r753: [75..76]
 r754: [73..74]
 r755: [69..70]
 r756: [67..68]
 r757: [61..62]
 r758: [59..60]
 r759: [57..58]
 r760: [55..56]
 r761: [53..54]
 r762: [51..52]
 r763: [111..112]
 r764: [109..110]
 r765: [107..108]
 r766: [105..106]
 r767: [103..104]
 r768: [101..102]
 r769: [99..100]
 r770: [95..96]
 r771: [93..94]
 r772: [91..92]
 r773: [89..90]
 r774: [87..88]
 r775: [85..86]
 r776: [83..84]
 r777: [81..82]
 r778: [45..46]
 r780: [209..210]
 r781: [207..208]
 r782: [203..204]
 r783: [201..202]
 r784: [197..198]
 r785: [195..196]
 r786: [823..824]
 r787: [793..794]
 r788: [675..676]
 r789: [629..630]

********** Assignment #1: **********

	 Assigning to 780 (cl=GENERAL_REGS, orig=780, freq=2, tfirst=780, tfreq=2)...
	   Assign 3 to reload r780 (freq=2)
	 Assigning to 781 (cl=GENERAL_REGS, orig=781, freq=2, tfirst=781, tfreq=2)...
	   Assign 3 to reload r781 (freq=2)
	 Assigning to 782 (cl=GENERAL_REGS, orig=782, freq=2, tfirst=782, tfreq=2)...
	   Assign 2 to reload r782 (freq=2)
	 Assigning to 783 (cl=GENERAL_REGS, orig=783, freq=2, tfirst=783, tfreq=2)...
	   Assign 3 to reload r783 (freq=2)
	 Assigning to 784 (cl=GENERAL_REGS, orig=784, freq=2, tfirst=784, tfreq=2)...
	   Assign 2 to reload r784 (freq=2)
	 Assigning to 785 (cl=GENERAL_REGS, orig=785, freq=2, tfirst=785, tfreq=2)...
	   Assign 3 to reload r785 (freq=2)
	 Assigning to 786 (cl=SSE_REGS, orig=344, freq=2, tfirst=786, tfreq=2)...
	   Assign 22 to reload r786 (freq=2)
	 Assigning to 787 (cl=SSE_REGS, orig=354, freq=2, tfirst=787, tfreq=2)...
	   Assign 23 to reload r787 (freq=2)
	 Assigning to 788 (cl=SSE_REGS, orig=397, freq=2, tfirst=788, tfreq=2)...
	   Assign 24 to reload r788 (freq=2)
	 Assigning to 789 (cl=SSE_REGS, orig=412, freq=2, tfirst=789, tfreq=2)...
	   Assign 25 to reload r789 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=896, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=864, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 1682
changing reg in insn 1677
changing reg in insn 1669
changing reg in insn 1661
changing reg in insn 1647
changing reg in insn 1525
changing reg in insn 1520
changing reg in insn 1502
changing reg in insn 1475
changing reg in insn 1457
changing reg in insn 1365
changing reg in insn 1350
changing reg in insn 1329
changing reg in insn 1306
changing reg in insn 1234
changing reg in insn 1203
changing reg in insn 1172
changing reg in insn 1141
changing reg in insn 1012
changing reg in insn 964
changing reg in insn 959
changing reg in insn 899
changing reg in insn 894
changing reg in insn 838
changing reg in insn 801
changing reg in insn 724
changing reg in insn 622
changing reg in insn 549
changing reg in insn 389
changing reg in insn 320
changing reg in insn 1687
changing reg in insn 45
changing reg in insn 50
changing reg in insn 48
changing reg in insn 46
changing reg in insn 50
changing reg in insn 48
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 63
changing reg in insn 61
changing reg in insn 59
changing reg in insn 63
changing reg in insn 61
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 76
changing reg in insn 74
changing reg in insn 72
changing reg in insn 76
changing reg in insn 74
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 85
changing reg in insn 90
changing reg in insn 88
changing reg in insn 86
changing reg in insn 90
changing reg in insn 88
changing reg in insn 93
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 103
changing reg in insn 101
changing reg in insn 99
changing reg in insn 103
changing reg in insn 101
changing reg in insn 106
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 116
changing reg in insn 114
changing reg in insn 112
changing reg in insn 116
changing reg in insn 114
changing reg in insn 119
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 129
changing reg in insn 127
changing reg in insn 125
changing reg in insn 129
changing reg in insn 127
changing reg in insn 132
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 142
changing reg in insn 140
changing reg in insn 138
changing reg in insn 142
changing reg in insn 140
changing reg in insn 145
changing reg in insn 147
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 151
changing reg in insn 156
changing reg in insn 154
changing reg in insn 152
changing reg in insn 156
changing reg in insn 154
changing reg in insn 159
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 169
changing reg in insn 167
changing reg in insn 165
changing reg in insn 169
changing reg in insn 167
changing reg in insn 172
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 182
changing reg in insn 180
changing reg in insn 178
changing reg in insn 182
changing reg in insn 180
changing reg in insn 185
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 190
changing reg in insn 195
changing reg in insn 193
changing reg in insn 191
changing reg in insn 195
changing reg in insn 193
changing reg in insn 198
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 208
changing reg in insn 206
changing reg in insn 204
changing reg in insn 208
changing reg in insn 206
changing reg in insn 211
changing reg in insn 213
changing reg in insn 213
changing reg in insn 213
changing reg in insn 215
changing reg in insn 217
changing reg in insn 222
changing reg in insn 220
changing reg in insn 218
changing reg in insn 222
changing reg in insn 220
changing reg in insn 225
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 230
changing reg in insn 235
changing reg in insn 233
changing reg in insn 231
changing reg in insn 235
changing reg in insn 233
changing reg in insn 238
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 243
changing reg in insn 248
changing reg in insn 246
changing reg in insn 244
changing reg in insn 248
changing reg in insn 246
changing reg in insn 251
changing reg in insn 253
changing reg in insn 253
changing reg in insn 254
changing reg in insn 256
changing reg in insn 261
changing reg in insn 259
changing reg in insn 257
changing reg in insn 261
changing reg in insn 259
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 269
changing reg in insn 274
changing reg in insn 272
changing reg in insn 270
changing reg in insn 274
changing reg in insn 272
changing reg in insn 277
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 282
changing reg in insn 287
changing reg in insn 285
changing reg in insn 283
changing reg in insn 287
changing reg in insn 285
changing reg in insn 290
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 313
changing reg in insn 313
changing reg in insn 314
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 351
changing reg in insn 353
changing reg in insn 354
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 364
changing reg in insn 366
changing reg in insn 367
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 374
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 377
changing reg in insn 379
changing reg in insn 380
changing reg in insn 734
changing reg in insn 735
changing reg in insn 735
changing reg in insn 737
changing reg in insn 737
changing reg in insn 738
changing reg in insn 738
changing reg in insn 740
changing reg in insn 742
changing reg in insn 743
changing reg in insn 754
changing reg in insn 755
changing reg in insn 755
changing reg in insn 757
changing reg in insn 757
changing reg in insn 758
changing reg in insn 758
changing reg in insn 760
changing reg in insn 762
changing reg in insn 763
changing reg in insn 774
changing reg in insn 775
changing reg in insn 775
changing reg in insn 777
changing reg in insn 777
changing reg in insn 778
changing reg in insn 778
changing reg in insn 780
changing reg in insn 782
changing reg in insn 783
changing reg in insn 788
changing reg in insn 789
changing reg in insn 807
changing reg in insn 808
changing reg in insn 808
changing reg in insn 810
changing reg in insn 810
changing reg in insn 811
changing reg in insn 811
changing reg in insn 813
changing reg in insn 815
changing reg in insn 816
changing reg in insn 821
changing reg in insn 822
changing reg in insn 822
changing reg in insn 823
changing reg in insn 828
changing reg in insn 829
changing reg in insn 831
changing reg in insn 833
changing reg in insn 844
changing reg in insn 845
changing reg in insn 845
changing reg in insn 847
changing reg in insn 847
changing reg in insn 848
changing reg in insn 848
changing reg in insn 850
changing reg in insn 852
changing reg in insn 853
changing reg in insn 858
changing reg in insn 859
changing reg in insn 866
changing reg in insn 867
changing reg in insn 867
changing reg in insn 869
changing reg in insn 869
changing reg in insn 870
changing reg in insn 870
changing reg in insn 871
changing reg in insn 873
changing reg in insn 874
changing reg in insn 878
changing reg in insn 885
changing reg in insn 880
changing reg in insn 881
changing reg in insn 881
changing reg in insn 883
changing reg in insn 883
changing reg in insn 884
changing reg in insn 884
changing reg in insn 887
changing reg in insn 905
changing reg in insn 906
changing reg in insn 906
changing reg in insn 908
changing reg in insn 908
changing reg in insn 909
changing reg in insn 909
changing reg in insn 911
changing reg in insn 913
changing reg in insn 914
changing reg in insn 919
changing reg in insn 920
changing reg in insn 920
changing reg in insn 921
changing reg in insn 926
changing reg in insn 927
changing reg in insn 930
changing reg in insn 931
changing reg in insn 931
changing reg in insn 933
changing reg in insn 933
changing reg in insn 934
changing reg in insn 934
changing reg in insn 935
changing reg in insn 937
changing reg in insn 938
changing reg in insn 942
changing reg in insn 943
changing reg in insn 943
changing reg in insn 950
changing reg in insn 945
changing reg in insn 946
changing reg in insn 946
changing reg in insn 948
changing reg in insn 948
changing reg in insn 949
changing reg in insn 949
changing reg in insn 952
changing reg in insn 970
changing reg in insn 971
changing reg in insn 971
changing reg in insn 973
changing reg in insn 973
changing reg in insn 974
changing reg in insn 974
changing reg in insn 976
changing reg in insn 978
changing reg in insn 979
changing reg in insn 984
changing reg in insn 985
changing reg in insn 985
changing reg in insn 987
changing reg in insn 987
changing reg in insn 988
changing reg in insn 988
changing reg in insn 989
changing reg in insn 991
changing reg in insn 992
changing reg in insn 996
changing reg in insn 1003
changing reg in insn 998
changing reg in insn 999
changing reg in insn 999
changing reg in insn 1001
changing reg in insn 1001
changing reg in insn 1002
changing reg in insn 1002
changing reg in insn 1005
changing reg in insn 1018
changing reg in insn 1019
changing reg in insn 1019
changing reg in insn 1021
changing reg in insn 1021
changing reg in insn 1022
changing reg in insn 1022
changing reg in insn 1024
changing reg in insn 1026
changing reg in insn 1027
changing reg in insn 1032
changing reg in insn 1033
changing reg in insn 1039
changing reg in insn 1040
changing reg in insn 1040
changing reg in insn 1042
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1043
changing reg in insn 1045
changing reg in insn 1047
changing reg in insn 1048
changing reg in insn 1059
changing reg in insn 1060
changing reg in insn 1060
changing reg in insn 1062
changing reg in insn 1062
changing reg in insn 1063
changing reg in insn 1063
changing reg in insn 1065
changing reg in insn 1067
changing reg in insn 1068
changing reg in insn 1074
changing reg in insn 1075
changing reg in insn 1081
changing reg in insn 1082
changing reg in insn 1082
changing reg in insn 1084
changing reg in insn 1084
changing reg in insn 1085
changing reg in insn 1085
changing reg in insn 1087
changing reg in insn 1089
changing reg in insn 1090
changing reg in insn 1101
changing reg in insn 1102
changing reg in insn 1102
changing reg in insn 1104
changing reg in insn 1104
changing reg in insn 1105
changing reg in insn 1105
changing reg in insn 1107
changing reg in insn 1109
changing reg in insn 1110
changing reg in insn 1116
changing reg in insn 1117
changing reg in insn 1123
changing reg in insn 1124
changing reg in insn 1124
changing reg in insn 1126
changing reg in insn 1126
changing reg in insn 1127
changing reg in insn 1127
changing reg in insn 1129
changing reg in insn 1131
changing reg in insn 1132
changing reg in insn 1137
changing reg in insn 1138
changing reg in insn 1153
changing reg in insn 1154
changing reg in insn 1154
changing reg in insn 1156
changing reg in insn 1156
changing reg in insn 1157
changing reg in insn 1157
changing reg in insn 1159
changing reg in insn 1161
changing reg in insn 1162
changing reg in insn 1167
changing reg in insn 1168
changing reg in insn 1168
changing reg in insn 1169
changing reg in insn 1178
changing reg in insn 1179
changing reg in insn 1185
changing reg in insn 1186
changing reg in insn 1186
changing reg in insn 1188
changing reg in insn 1188
changing reg in insn 1189
changing reg in insn 1189
changing reg in insn 1191
changing reg in insn 1193
changing reg in insn 1194
changing reg in insn 1199
changing reg in insn 1200
changing reg in insn 1215
changing reg in insn 1216
changing reg in insn 1216
changing reg in insn 1218
changing reg in insn 1218
changing reg in insn 1219
changing reg in insn 1219
changing reg in insn 1221
changing reg in insn 1223
changing reg in insn 1224
changing reg in insn 1229
changing reg in insn 1230
changing reg in insn 1230
changing reg in insn 1231
changing reg in insn 1240
changing reg in insn 1241
changing reg in insn 1247
changing reg in insn 1248
changing reg in insn 1248
changing reg in insn 1250
changing reg in insn 1250
changing reg in insn 1251
changing reg in insn 1251
changing reg in insn 1253
changing reg in insn 1255
changing reg in insn 1256
changing reg in insn 1266
changing reg in insn 1267
changing reg in insn 1267
changing reg in insn 1269
changing reg in insn 1269
changing reg in insn 1270
changing reg in insn 1270
changing reg in insn 1272
changing reg in insn 1274
changing reg in insn 1275
changing reg in insn 1285
changing reg in insn 1286
changing reg in insn 1286
changing reg in insn 1288
changing reg in insn 1288
changing reg in insn 1289
changing reg in insn 1289
changing reg in insn 1291
changing reg in insn 1293
changing reg in insn 1294
changing reg in insn 385
changing reg in insn 386
changing reg in insn 397
changing reg in insn 398
changing reg in insn 398
changing reg in insn 400
changing reg in insn 400
changing reg in insn 401
changing reg in insn 401
changing reg in insn 403
changing reg in insn 405
changing reg in insn 406
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 416
changing reg in insn 414
changing reg in insn 412
changing reg in insn 416
changing reg in insn 414
changing reg in insn 419
changing reg in insn 421
changing reg in insn 421
changing reg in insn 422
changing reg in insn 426
changing reg in insn 427
changing reg in insn 427
changing reg in insn 432
changing reg in insn 430
changing reg in insn 428
changing reg in insn 432
changing reg in insn 430
changing reg in insn 435
changing reg in insn 437
changing reg in insn 437
changing reg in insn 438
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 445
changing reg in insn 445
changing reg in insn 446
changing reg in insn 446
changing reg in insn 448
changing reg in insn 450
changing reg in insn 451
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 461
changing reg in insn 459
changing reg in insn 457
changing reg in insn 461
changing reg in insn 459
changing reg in insn 464
changing reg in insn 466
changing reg in insn 466
changing reg in insn 467
changing reg in insn 470
changing reg in insn 471
changing reg in insn 471
changing reg in insn 473
changing reg in insn 473
changing reg in insn 474
changing reg in insn 474
changing reg in insn 475
changing reg in insn 477
changing reg in insn 478
changing reg in insn 482
changing reg in insn 483
changing reg in insn 483
changing reg in insn 488
changing reg in insn 486
changing reg in insn 484
changing reg in insn 488
changing reg in insn 486
changing reg in insn 491
changing reg in insn 493
changing reg in insn 493
changing reg in insn 493
changing reg in insn 504
changing reg in insn 495
changing reg in insn 496
changing reg in insn 496
changing reg in insn 498
changing reg in insn 498
changing reg in insn 499
changing reg in insn 499
changing reg in insn 500
changing reg in insn 502
changing reg in insn 503
changing reg in insn 504
changing reg in insn 508
changing reg in insn 509
changing reg in insn 509
changing reg in insn 514
changing reg in insn 512
changing reg in insn 510
changing reg in insn 514
changing reg in insn 512
changing reg in insn 517
changing reg in insn 519
changing reg in insn 519
changing reg in insn 519
changing reg in insn 530
changing reg in insn 521
changing reg in insn 522
changing reg in insn 522
changing reg in insn 524
changing reg in insn 524
changing reg in insn 525
changing reg in insn 525
changing reg in insn 526
changing reg in insn 528
changing reg in insn 529
changing reg in insn 530
changing reg in insn 532
changing reg in insn 533
changing reg in insn 533
changing reg in insn 538
changing reg in insn 536
changing reg in insn 534
changing reg in insn 538
changing reg in insn 536
changing reg in insn 541
changing reg in insn 543
changing reg in insn 543
changing reg in insn 544
changing reg in insn 555
changing reg in insn 556
changing reg in insn 556
changing reg in insn 558
changing reg in insn 558
changing reg in insn 559
changing reg in insn 559
changing reg in insn 561
changing reg in insn 563
changing reg in insn 564
changing reg in insn 568
changing reg in insn 569
changing reg in insn 569
changing reg in insn 574
changing reg in insn 572
changing reg in insn 570
changing reg in insn 574
changing reg in insn 572
changing reg in insn 577
changing reg in insn 579
changing reg in insn 579
changing reg in insn 580
changing reg in insn 583
changing reg in insn 584
changing reg in insn 584
changing reg in insn 586
changing reg in insn 586
changing reg in insn 587
changing reg in insn 587
changing reg in insn 588
changing reg in insn 590
changing reg in insn 591
changing reg in insn 595
changing reg in insn 596
changing reg in insn 596
changing reg in insn 601
changing reg in insn 599
changing reg in insn 597
changing reg in insn 601
changing reg in insn 599
changing reg in insn 604
changing reg in insn 606
changing reg in insn 606
changing reg in insn 606
changing reg in insn 617
changing reg in insn 608
changing reg in insn 609
changing reg in insn 609
changing reg in insn 611
changing reg in insn 611
changing reg in insn 612
changing reg in insn 612
changing reg in insn 613
changing reg in insn 615
changing reg in insn 616
changing reg in insn 616
changing reg in insn 617
changing reg in insn 629
changing reg in insn 630
changing reg in insn 630
changing reg in insn 632
changing reg in insn 632
changing reg in insn 633
changing reg in insn 633
changing reg in insn 634
changing reg in insn 636
changing reg in insn 637
changing reg in insn 641
changing reg in insn 642
changing reg in insn 642
changing reg in insn 647
changing reg in insn 645
changing reg in insn 643
changing reg in insn 647
changing reg in insn 645
changing reg in insn 650
changing reg in insn 652
changing reg in insn 652
changing reg in insn 652
changing reg in insn 663
changing reg in insn 654
changing reg in insn 655
changing reg in insn 655
changing reg in insn 657
changing reg in insn 657
changing reg in insn 658
changing reg in insn 658
changing reg in insn 659
changing reg in insn 661
changing reg in insn 662
changing reg in insn 663
changing reg in insn 667
changing reg in insn 668
changing reg in insn 668
changing reg in insn 673
changing reg in insn 671
changing reg in insn 669
changing reg in insn 673
changing reg in insn 671
changing reg in insn 676
changing reg in insn 678
changing reg in insn 678
changing reg in insn 678
changing reg in insn 681
changing reg in insn 680
changing reg in insn 681
changing reg in insn 683
changing reg in insn 684
changing reg in insn 684
changing reg in insn 689
changing reg in insn 687
changing reg in insn 685
changing reg in insn 689
changing reg in insn 687
changing reg in insn 692
changing reg in insn 694
changing reg in insn 694
changing reg in insn 694
changing reg in insn 705
changing reg in insn 696
changing reg in insn 697
changing reg in insn 697
changing reg in insn 699
changing reg in insn 699
changing reg in insn 700
changing reg in insn 700
changing reg in insn 701
changing reg in insn 703
changing reg in insn 704
changing reg in insn 705
changing reg in insn 707
changing reg in insn 708
changing reg in insn 708
changing reg in insn 713
changing reg in insn 711
changing reg in insn 709
changing reg in insn 713
changing reg in insn 711
changing reg in insn 716
changing reg in insn 718
changing reg in insn 718
changing reg in insn 719
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 329
changing reg in insn 329
changing reg in insn 330
changing reg in insn 330
changing reg in insn 336
changing reg in insn 335
changing reg in insn 337
changing reg in insn 1335
changing reg in insn 1336
changing reg in insn 1340
changing reg in insn 1341
changing reg in insn 1345
changing reg in insn 1346
changing reg in insn 1346
changing reg in insn 1347
changing reg in insn 1361
changing reg in insn 1362
changing reg in insn 1374
changing reg in insn 1375
changing reg in insn 1379
changing reg in insn 1380
changing reg in insn 1384
changing reg in insn 1385
changing reg in insn 1385
changing reg in insn 1386
changing reg in insn 1392
changing reg in insn 1393
changing reg in insn 1410
changing reg in insn 1411
changing reg in insn 1422
changing reg in insn 1423
changing reg in insn 1443
changing reg in insn 1444
changing reg in insn 1448
changing reg in insn 1449
changing reg in insn 1453
changing reg in insn 1454
changing reg in insn 1470
changing reg in insn 1471
changing reg in insn 1471
changing reg in insn 1472
changing reg in insn 1488
changing reg in insn 1489
changing reg in insn 1493
changing reg in insn 1494
changing reg in insn 1498
changing reg in insn 1499
changing reg in insn 1515
changing reg in insn 1516
changing reg in insn 1516
changing reg in insn 1517
changing reg in insn 1533
changing reg in insn 1536
changing reg in insn 1539
changing reg in insn 1542
changing reg in insn 1545
changing reg in insn 1546
changing reg in insn 1550
changing reg in insn 1553
changing reg in insn 1560
changing reg in insn 1563
changing reg in insn 1562
changing reg in insn 1564
changing reg in insn 1567
changing reg in insn 1570
changing reg in insn 1569
changing reg in insn 1571
changing reg in insn 1574
changing reg in insn 1578
changing reg in insn 1576
changing reg in insn 1577
changing reg in insn 1577
changing reg in insn 1579
changing reg in insn 1582
changing reg in insn 1586
changing reg in insn 1589
changing reg in insn 1593
changing reg in insn 1600
changing reg in insn 1604
changing reg in insn 1607
changing reg in insn 1611
changing reg in insn 1614
changing reg in insn 1615
changing reg in insn 1615
changing reg in insn 1619
changing reg in insn 1622
changing reg in insn 1626
changing reg in insn 1629
changing reg in insn 1633
changing reg in insn 1639
changing reg in insn 1641
changing reg in insn 1643
changing reg in insn 1644
changing reg in insn 1653
changing reg in insn 1655
changing reg in insn 1657
changing reg in insn 1658
changing reg in insn 1687
changing reg in insn 1691
changing reg in insn 23
changing reg in insn 27
changing reg in insn 26
changing reg in insn 25
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 33
changing reg in insn 32
changing reg in insn 31
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 39
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 44
changing reg in insn 45
changing reg in insn 52
changing reg in insn 50
changing reg in insn 49
changing reg in insn 48
changing reg in insn 47
changing reg in insn 46
changing reg in insn 53
changing reg in insn 51
changing reg in insn 50
changing reg in insn 49
changing reg in insn 48
changing reg in insn 47
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 65
changing reg in insn 63
changing reg in insn 62
changing reg in insn 61
changing reg in insn 60
changing reg in insn 59
changing reg in insn 66
changing reg in insn 64
changing reg in insn 63
changing reg in insn 62
changing reg in insn 61
changing reg in insn 60
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 78
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 73
changing reg in insn 72
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 73
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 92
changing reg in insn 90
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 86
changing reg in insn 93
changing reg in insn 91
changing reg in insn 90
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 97
changing reg in insn 98
changing reg in insn 105
changing reg in insn 103
changing reg in insn 102
changing reg in insn 101
changing reg in insn 100
changing reg in insn 99
changing reg in insn 106
changing reg in insn 104
changing reg in insn 103
changing reg in insn 102
changing reg in insn 101
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 110
changing reg in insn 111
changing reg in insn 118
changing reg in insn 116
changing reg in insn 115
changing reg in insn 114
changing reg in insn 113
changing reg in insn 112
changing reg in insn 119
changing reg in insn 117
changing reg in insn 116
changing reg in insn 115
changing reg in insn 114
changing reg in insn 113
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 123
changing reg in insn 124
changing reg in insn 131
changing reg in insn 129
changing reg in insn 128
changing reg in insn 127
changing reg in insn 126
changing reg in insn 125
changing reg in insn 132
changing reg in insn 130
changing reg in insn 129
changing reg in insn 128
changing reg in insn 127
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 133
changing reg in insn 136
changing reg in insn 137
changing reg in insn 144
changing reg in insn 142
changing reg in insn 141
changing reg in insn 140
changing reg in insn 139
changing reg in insn 138
changing reg in insn 145
changing reg in insn 143
changing reg in insn 142
changing reg in insn 141
changing reg in insn 140
changing reg in insn 139
changing reg in insn 143
changing reg in insn 144
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 158
changing reg in insn 156
changing reg in insn 155
changing reg in insn 154
changing reg in insn 153
changing reg in insn 152
changing reg in insn 159
changing reg in insn 157
changing reg in insn 156
changing reg in insn 155
changing reg in insn 154
changing reg in insn 153
changing reg in insn 157
changing reg in insn 158
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 171
changing reg in insn 169
changing reg in insn 168
changing reg in insn 167
changing reg in insn 166
changing reg in insn 165
changing reg in insn 172
changing reg in insn 170
changing reg in insn 169
changing reg in insn 168
changing reg in insn 167
changing reg in insn 166
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 176
changing reg in insn 177
changing reg in insn 184
changing reg in insn 182
changing reg in insn 181
changing reg in insn 180
changing reg in insn 179
changing reg in insn 178
changing reg in insn 185
changing reg in insn 183
changing reg in insn 182
changing reg in insn 181
changing reg in insn 180
changing reg in insn 179
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 189
changing reg in insn 190
changing reg in insn 197
changing reg in insn 195
changing reg in insn 194
changing reg in insn 193
changing reg in insn 192
changing reg in insn 191
changing reg in insn 198
changing reg in insn 196
changing reg in insn 195
changing reg in insn 194
changing reg in insn 193
changing reg in insn 192
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 202
changing reg in insn 203
changing reg in insn 210
changing reg in insn 208
changing reg in insn 207
changing reg in insn 206
changing reg in insn 205
changing reg in insn 204
changing reg in insn 211
changing reg in insn 209
changing reg in insn 208
changing reg in insn 207
changing reg in insn 206
changing reg in insn 205
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 224
changing reg in insn 222
changing reg in insn 221
changing reg in insn 220
changing reg in insn 219
changing reg in insn 218
changing reg in insn 225
changing reg in insn 223
changing reg in insn 222
changing reg in insn 221
changing reg in insn 220
changing reg in insn 219
changing reg in insn 223
changing reg in insn 224
changing reg in insn 226
changing reg in insn 229
changing reg in insn 230
changing reg in insn 237
changing reg in insn 235
changing reg in insn 234
changing reg in insn 233
changing reg in insn 232
changing reg in insn 231
changing reg in insn 238
changing reg in insn 236
changing reg in insn 235
changing reg in insn 234
changing reg in insn 233
changing reg in insn 232
changing reg in insn 236
changing reg in insn 237
changing reg in insn 239
changing reg in insn 242
changing reg in insn 243
changing reg in insn 250
changing reg in insn 248
changing reg in insn 247
changing reg in insn 246
changing reg in insn 245
changing reg in insn 244
changing reg in insn 251
changing reg in insn 249
changing reg in insn 248
changing reg in insn 247
changing reg in insn 246
changing reg in insn 245
changing reg in insn 249
changing reg in insn 250
changing reg in insn 252
changing reg in insn 255
changing reg in insn 256
changing reg in insn 263
changing reg in insn 261
changing reg in insn 260
changing reg in insn 259
changing reg in insn 258
changing reg in insn 257
changing reg in insn 264
changing reg in insn 262
changing reg in insn 261
changing reg in insn 260
changing reg in insn 259
changing reg in insn 258
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 268
changing reg in insn 269
changing reg in insn 276
changing reg in insn 274
changing reg in insn 273
changing reg in insn 272
changing reg in insn 271
changing reg in insn 270
changing reg in insn 277
changing reg in insn 275
changing reg in insn 274
changing reg in insn 273
changing reg in insn 272
changing reg in insn 271
changing reg in insn 275
changing reg in insn 276
changing reg in insn 278
changing reg in insn 281
changing reg in insn 282
changing reg in insn 289
changing reg in insn 287
changing reg in insn 286
changing reg in insn 285
changing reg in insn 284
changing reg in insn 283
changing reg in insn 290
changing reg in insn 288
changing reg in insn 287
changing reg in insn 286
changing reg in insn 285
changing reg in insn 284
changing reg in insn 288
changing reg in insn 289
changing reg in insn 291
changing reg in insn 302
changing reg in insn 303
changing reg in insn 307
changing reg in insn 308
changing reg in insn 310
changing reg in insn 325
changing reg in insn 326
changing reg in insn 328
changing reg in insn 331
changing reg in insn 335
changing reg in insn 333
changing reg in insn 334
changing reg in insn 332
changing reg in insn 333
changing reg in insn 334
changing reg in insn 335
changing reg in insn 344
changing reg in insn 345
changing reg in insn 347
changing reg in insn 357
changing reg in insn 358
changing reg in insn 360
changing reg in insn 370
changing reg in insn 371
changing reg in insn 373
changing reg in insn 384
changing reg in insn 385
changing reg in insn 394
changing reg in insn 395
changing reg in insn 396
changing reg in insn 397
changing reg in insn 399
changing reg in insn 409
changing reg in insn 410
changing reg in insn 418
changing reg in insn 416
changing reg in insn 415
changing reg in insn 414
changing reg in insn 413
changing reg in insn 412
changing reg in insn 419
changing reg in insn 417
changing reg in insn 416
changing reg in insn 415
changing reg in insn 414
changing reg in insn 413
changing reg in insn 417
changing reg in insn 418
changing reg in insn 420
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 434
changing reg in insn 432
changing reg in insn 431
changing reg in insn 430
changing reg in insn 429
changing reg in insn 428
changing reg in insn 435
changing reg in insn 433
changing reg in insn 432
changing reg in insn 431
changing reg in insn 430
changing reg in insn 429
changing reg in insn 433
changing reg in insn 434
changing reg in insn 436
changing reg in insn 441
changing reg in insn 442
changing reg in insn 444
changing reg in insn 454
changing reg in insn 455
changing reg in insn 463
changing reg in insn 461
changing reg in insn 460
changing reg in insn 459
changing reg in insn 458
changing reg in insn 457
changing reg in insn 464
changing reg in insn 462
changing reg in insn 461
changing reg in insn 460
changing reg in insn 459
changing reg in insn 458
changing reg in insn 462
changing reg in insn 463
changing reg in insn 465
changing reg in insn 469
changing reg in insn 470
changing reg in insn 472
changing reg in insn 481
changing reg in insn 482
changing reg in insn 490
changing reg in insn 488
changing reg in insn 487
changing reg in insn 486
changing reg in insn 485
changing reg in insn 484
changing reg in insn 491
changing reg in insn 489
changing reg in insn 488
changing reg in insn 487
changing reg in insn 486
changing reg in insn 485
changing reg in insn 489
changing reg in insn 490
changing reg in insn 492
changing reg in insn 493
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 505
changing reg in insn 506
changing reg in insn 507
changing reg in insn 508
changing reg in insn 516
changing reg in insn 514
changing reg in insn 513
changing reg in insn 512
changing reg in insn 511
changing reg in insn 510
changing reg in insn 517
changing reg in insn 515
changing reg in insn 514
changing reg in insn 513
changing reg in insn 512
changing reg in insn 511
changing reg in insn 515
changing reg in insn 516
changing reg in insn 518
changing reg in insn 519
changing reg in insn 520
changing reg in insn 521
changing reg in insn 523
changing reg in insn 531
changing reg in insn 532
changing reg in insn 540
changing reg in insn 538
changing reg in insn 537
changing reg in insn 536
changing reg in insn 535
changing reg in insn 534
changing reg in insn 541
changing reg in insn 539
changing reg in insn 538
changing reg in insn 537
changing reg in insn 536
changing reg in insn 535
changing reg in insn 539
changing reg in insn 540
changing reg in insn 542
changing reg in insn 554
changing reg in insn 555
changing reg in insn 557
changing reg in insn 567
changing reg in insn 568
changing reg in insn 576
changing reg in insn 574
changing reg in insn 573
changing reg in insn 572
changing reg in insn 571
changing reg in insn 570
changing reg in insn 577
changing reg in insn 575
changing reg in insn 574
changing reg in insn 573
changing reg in insn 572
changing reg in insn 571
changing reg in insn 575
changing reg in insn 576
changing reg in insn 578
changing reg in insn 582
changing reg in insn 583
changing reg in insn 585
changing reg in insn 594
changing reg in insn 595
changing reg in insn 603
changing reg in insn 601
changing reg in insn 600
changing reg in insn 599
changing reg in insn 598
changing reg in insn 597
changing reg in insn 604
changing reg in insn 602
changing reg in insn 601
changing reg in insn 600
changing reg in insn 599
changing reg in insn 598
changing reg in insn 602
changing reg in insn 603
changing reg in insn 605
changing reg in insn 606
changing reg in insn 607
changing reg in insn 608
changing reg in insn 610
changing reg in insn 628
changing reg in insn 629
changing reg in insn 631
changing reg in insn 640
changing reg in insn 641
changing reg in insn 649
changing reg in insn 647
changing reg in insn 646
changing reg in insn 645
changing reg in insn 644
changing reg in insn 643
changing reg in insn 650
changing reg in insn 648
changing reg in insn 647
changing reg in insn 646
changing reg in insn 645
changing reg in insn 644
changing reg in insn 648
changing reg in insn 649
changing reg in insn 651
changing reg in insn 652
changing reg in insn 653
changing reg in insn 654
changing reg in insn 656
changing reg in insn 664
changing reg in insn 665
changing reg in insn 666
changing reg in insn 667
changing reg in insn 675
changing reg in insn 673
changing reg in insn 672
changing reg in insn 671
changing reg in insn 670
changing reg in insn 669
changing reg in insn 676
changing reg in insn 674
changing reg in insn 673
changing reg in insn 672
changing reg in insn 671
changing reg in insn 670
changing reg in insn 674
changing reg in insn 675
changing reg in insn 677
changing reg in insn 678
changing reg in insn 679
changing reg in insn 680
changing reg in insn 682
changing reg in insn 683
changing reg in insn 691
changing reg in insn 689
changing reg in insn 688
changing reg in insn 687
changing reg in insn 686
changing reg in insn 685
changing reg in insn 692
changing reg in insn 690
changing reg in insn 689
changing reg in insn 688
changing reg in insn 687
changing reg in insn 686
changing reg in insn 690
changing reg in insn 691
changing reg in insn 693
changing reg in insn 694
changing reg in insn 695
changing reg in insn 696
changing reg in insn 698
changing reg in insn 706
changing reg in insn 707
changing reg in insn 715
changing reg in insn 713
changing reg in insn 712
changing reg in insn 711
changing reg in insn 710
changing reg in insn 709
changing reg in insn 716
changing reg in insn 714
changing reg in insn 713
changing reg in insn 712
changing reg in insn 711
changing reg in insn 710
changing reg in insn 714
changing reg in insn 715
changing reg in insn 717
changing reg in insn 733
changing reg in insn 734
changing reg in insn 736
changing reg in insn 753
changing reg in insn 754
changing reg in insn 756
changing reg in insn 773
changing reg in insn 774
changing reg in insn 776
changing reg in insn 787
changing reg in insn 788
changing reg in insn 792
changing reg in insn 793
changing reg in insn 794
changing reg in insn 796
changing reg in insn 795
changing reg in insn 796
changing reg in insn 806
changing reg in insn 807
changing reg in insn 809
changing reg in insn 820
changing reg in insn 821
changing reg in insn 827
changing reg in insn 828
changing reg in insn 830
changing reg in insn 831
changing reg in insn 832
changing reg in insn 833
changing reg in insn 843
changing reg in insn 844
changing reg in insn 846
changing reg in insn 857
changing reg in insn 858
changing reg in insn 862
changing reg in insn 863
changing reg in insn 865
changing reg in insn 866
changing reg in insn 868
changing reg in insn 877
changing reg in insn 878
changing reg in insn 879
changing reg in insn 880
changing reg in insn 882
changing reg in insn 904
changing reg in insn 905
changing reg in insn 907
changing reg in insn 918
changing reg in insn 919
changing reg in insn 925
changing reg in insn 926
changing reg in insn 929
changing reg in insn 930
changing reg in insn 932
changing reg in insn 941
changing reg in insn 942
changing reg in insn 944
changing reg in insn 945
changing reg in insn 947
changing reg in insn 969
changing reg in insn 970
changing reg in insn 972
changing reg in insn 983
changing reg in insn 984
changing reg in insn 986
changing reg in insn 995
changing reg in insn 996
changing reg in insn 997
changing reg in insn 998
changing reg in insn 1000
changing reg in insn 1017
changing reg in insn 1018
changing reg in insn 1020
changing reg in insn 1031
changing reg in insn 1032
changing reg in insn 1038
changing reg in insn 1039
changing reg in insn 1041
changing reg in insn 1052
changing reg in insn 1053
changing reg in insn 1058
changing reg in insn 1059
changing reg in insn 1061
changing reg in insn 1073
changing reg in insn 1074
changing reg in insn 1080
changing reg in insn 1081
changing reg in insn 1083
changing reg in insn 1094
changing reg in insn 1095
changing reg in insn 1100
changing reg in insn 1101
changing reg in insn 1103
changing reg in insn 1115
changing reg in insn 1116
changing reg in insn 1122
changing reg in insn 1123
changing reg in insn 1125
changing reg in insn 1136
changing reg in insn 1137
changing reg in insn 1146
changing reg in insn 1147
changing reg in insn 1152
changing reg in insn 1153
changing reg in insn 1155
changing reg in insn 1166
changing reg in insn 1167
changing reg in insn 1177
changing reg in insn 1178
changing reg in insn 1184
changing reg in insn 1185
changing reg in insn 1187
changing reg in insn 1198
changing reg in insn 1199
changing reg in insn 1208
changing reg in insn 1209
changing reg in insn 1214
changing reg in insn 1215
changing reg in insn 1217
changing reg in insn 1228
changing reg in insn 1229
changing reg in insn 1239
changing reg in insn 1240
changing reg in insn 1246
changing reg in insn 1247
changing reg in insn 1249
changing reg in insn 1259
changing reg in insn 1260
changing reg in insn 1265
changing reg in insn 1266
changing reg in insn 1268
changing reg in insn 1278
changing reg in insn 1279
changing reg in insn 1284
changing reg in insn 1285
changing reg in insn 1287
changing reg in insn 1303
changing reg in insn 1305
changing reg in insn 1304
changing reg in insn 1305
changing reg in insn 1315
changing reg in insn 1316
changing reg in insn 1334
changing reg in insn 1335
changing reg in insn 1339
changing reg in insn 1340
changing reg in insn 1344
changing reg in insn 1345
changing reg in insn 1355
changing reg in insn 1356
changing reg in insn 1356
changing reg in insn 1358
changing reg in insn 1357
changing reg in insn 1359
changing reg in insn 1373
changing reg in insn 1374
changing reg in insn 1378
changing reg in insn 1379
changing reg in insn 1383
changing reg in insn 1384
changing reg in insn 1389
changing reg in insn 1390
changing reg in insn 1391
changing reg in insn 1392
changing reg in insn 1409
changing reg in insn 1410
changing reg in insn 1442
changing reg in insn 1443
changing reg in insn 1447
changing reg in insn 1448
changing reg in insn 1452
changing reg in insn 1453
changing reg in insn 1469
changing reg in insn 1470
changing reg in insn 1487
changing reg in insn 1488
changing reg in insn 1492
changing reg in insn 1493
changing reg in insn 1497
changing reg in insn 1498
changing reg in insn 1514
changing reg in insn 1515
changing reg in insn 1534
changing reg in insn 1535
changing reg in insn 1538
changing reg in insn 1539
changing reg in insn 1540
changing reg in insn 1541
changing reg in insn 1544
changing reg in insn 1545
changing reg in insn 1549
changing reg in insn 1550
changing reg in insn 1551
changing reg in insn 1552
changing reg in insn 1561
changing reg in insn 1562
changing reg in insn 1566
changing reg in insn 1567
changing reg in insn 1568
changing reg in insn 1569
changing reg in insn 1573
changing reg in insn 1574
changing reg in insn 1575
changing reg in insn 1576
changing reg in insn 1581
changing reg in insn 1582
changing reg in insn 1583
changing reg in insn 1584
changing reg in insn 1584
changing reg in insn 1585
changing reg in insn 1588
changing reg in insn 1589
changing reg in insn 1590
changing reg in insn 1591
changing reg in insn 1591
changing reg in insn 1592
changing reg in insn 1599
changing reg in insn 1600
changing reg in insn 1601
changing reg in insn 1602
changing reg in insn 1602
changing reg in insn 1603
changing reg in insn 1606
changing reg in insn 1607
changing reg in insn 1608
changing reg in insn 1609
changing reg in insn 1609
changing reg in insn 1610
changing reg in insn 1613
changing reg in insn 1614
changing reg in insn 1616
changing reg in insn 1617
changing reg in insn 1617
changing reg in insn 1618
changing reg in insn 1621
changing reg in insn 1622
changing reg in insn 1623
changing reg in insn 1624
changing reg in insn 1624
changing reg in insn 1625
changing reg in insn 1628
changing reg in insn 1629
changing reg in insn 1630
changing reg in insn 1631
changing reg in insn 1631
changing reg in insn 1632
changing reg in insn 1652
changing reg in insn 1653
deleting insn with uid = 502.
deleting insn with uid = 528.
deleting insn with uid = 661.
deleting insn with uid = 703.
deleting insn with uid = 885.
deleting insn with uid = 950.
deleting insn with uid = 1003.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 338.
verify found no changes in insn with uid = 352.
verify found no changes in insn with uid = 365.
verify found no changes in insn with uid = 378.
verify found no changes in insn with uid = 404.
verify found no changes in insn with uid = 449.
verify found no changes in insn with uid = 476.
verify found no changes in insn with uid = 501.
verify found no changes in insn with uid = 527.
verify found no changes in insn with uid = 562.
verify found no changes in insn with uid = 589.
verify found no changes in insn with uid = 614.
verify found no changes in insn with uid = 635.
verify found no changes in insn with uid = 660.
verify found no changes in insn with uid = 702.
verify found no changes in insn with uid = 741.
verify found no changes in insn with uid = 747.
verify found no changes in insn with uid = 749.
verify found no changes in insn with uid = 761.
verify found no changes in insn with uid = 767.
verify found no changes in insn with uid = 769.
verify found no changes in insn with uid = 781.
verify found no changes in insn with uid = 814.
verify found no changes in insn with uid = 851.
verify found no changes in insn with uid = 872.
verify found no changes in insn with uid = 889.
verify found no changes in insn with uid = 912.
verify found no changes in insn with uid = 936.
verify found no changes in insn with uid = 954.
verify found no changes in insn with uid = 977.
verify found no changes in insn with uid = 990.
verify found no changes in insn with uid = 1007.
verify found no changes in insn with uid = 1025.
verify found no changes in insn with uid = 1046.
verify found no changes in insn with uid = 1066.
verify found no changes in insn with uid = 1088.
verify found no changes in insn with uid = 1108.
verify found no changes in insn with uid = 1130.
verify found no changes in insn with uid = 1160.
verify found no changes in insn with uid = 1192.
verify found no changes in insn with uid = 1222.
verify found no changes in insn with uid = 1254.
verify found no changes in insn with uid = 1273.
verify found no changes in insn with uid = 1292.
verify found no changes in insn with uid = 1297.
verify found no changes in insn with uid = 1299.
verify found no changes in insn with uid = 1360.
verify found no changes in insn with uid = 1401.
verify found no changes in insn with uid = 1416.
verify found no changes in insn with uid = 1421.
verify found no changes in insn with uid = 1537.
verify found no changes in insn with uid = 1543.
verify found no changes in insn with uid = 1554.
verify found no changes in insn with uid = 1565.
verify found no changes in insn with uid = 1572.
verify found no changes in insn with uid = 1580.
verify found no changes in insn with uid = 1587.
verify found no changes in insn with uid = 1594.
verify found no changes in insn with uid = 1605.
verify found no changes in insn with uid = 1612.
verify found no changes in insn with uid = 1620.
verify found no changes in insn with uid = 1627.
verify found no changes in insn with uid = 1634.
verify found no changes in insn with uid = 1642.
verify found no changes in insn with uid = 1656.


int command_line(Preprocess*, IOFiles*, Procpar_info*, int, char**, int*, int*, int*, bool*, bool*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 37[r8] 38[r9]
;;  ref usage 	r0={801d,752u} r1={200d,197u,131e} r2={74d,9u,3e} r3={9d,9u} r4={111d,46u} r5={129d,64u} r6={1d,465u} r7={1d,215u} r8={65d} r9={65d} r10={65d} r11={65d} r12={65d} r13={65d} r14={65d} r15={65d} r16={4e} r17={499d,81u} r18={65d} r19={65d} r20={1d,1u,108e} r21={66d,4u} r22={67d,1u} r23={67d,1u} r24={67d,1u} r25={67d,1u} r26={66d} r27={66d} r28={66d} r29={65d} r30={65d} r31={65d} r32={65d} r33={65d} r34={65d} r35={65d} r36={65d} r37={66d,1u} r38={66d,1u} r39={65d} r40={65d} r45={65d} r46={65d} r47={65d} r48={65d} r49={65d} r50={65d} r51={65d} r52={65d} r53={65d} r54={65d} r55={65d} r56={65d} r57={65d} r58={65d} r59={65d} r60={65d} r61={65d} r62={65d} r63={65d} r64={65d} r65={65d} r66={65d} r67={65d} r68={65d} r69={65d} r70={65d} r71={65d} r72={65d} r73={65d} r74={65d} r75={65d} r76={65d} 
;;    total ref usage 7965{5870d,1849u,246e} in 1402{1337 regular + 65 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 468 469 470 471 472
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
        (reg:DI 5 di [ preprocess ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
        (reg:DI 4 si [ io_filenames ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -860 [0xfffffffffffffca4])) [0 argc+0 S4 A32])
        (reg:SI 2 cx [ argc ])) sim2fitman_com_line.cpp:50 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
        (reg:DI 37 r8 [ argv ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])
        (reg:DI 38 r9 [ fid ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:54 93 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:55 93 {*movqi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:56 93 {*movqi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -811 [0xfffffffffffffcd5])) [0 rscale_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:58 93 {*movqi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -810 [0xfffffffffffffcd6])) [0 rbc_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:59 93 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -809 [0xfffffffffffffcd7])) [0 rif_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:60 93 {*movqi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:61 93 {*movqi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -815 [0xfffffffffffffcd1])) [0 only_suppressed+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:63 93 {*movqi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -814 [0xfffffffffffffcd2])) [0 only_unsuppressed+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:64 93 {*movqi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -792 [0xfffffffffffffce8])) [0 temp_long+0 S8 A64])
        (const_int 0 [0])) sim2fitman_com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:67 90 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -796 [0xfffffffffffffce4])) [0 s_u_out+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:68 90 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (parallel [
            (set (reg:DI 0 ax [468])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:71 221 {*adddi_1}
     (nil))
(insn 24 23 1812 2 (set (reg:DI 3 bx [780])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_com_line.cpp:71 89 {*movdi_internal}
     (nil))
(insn 1812 24 25 2 (set (mem/c:DI (reg:DI 0 ax [468]) [0 MEM[(void *)&filename]+0 S8 A64])
        (reg:DI 3 bx [780])) sim2fitman_com_line.cpp:71 89 {*movdi_internal}
     (nil))
(insn 25 1812 1813 2 (set (reg:DI 3 bx [781])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_com_line.cpp:71 89 {*movdi_internal}
     (nil))
(insn 1813 25 26 2 (set (mem/c:DI (plus:DI (reg:DI 0 ax [468])
                (const_int 8 [0x8])) [0 MEM[(void *)&filename]+8 S8 A64])
        (reg:DI 3 bx [781])) sim2fitman_com_line.cpp:71 89 {*movdi_internal}
     (nil))
(insn 26 1813 27 2 (set (mem/c:SI (plus:DI (reg:DI 0 ax [468])
                (const_int 16 [0x10])) [0 MEM[(void *)&filename]+16 S4 A64])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_com_line.cpp:71 90 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (mem/c:HI (plus:DI (reg:DI 0 ax [468])
                (const_int 20 [0x14])) [0 MEM[(void *)&filename]+20 S2 A32])
        (const_int 101 [0x65])) sim2fitman_com_line.cpp:71 92 {*movhi_internal}
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg:DI 0 ax [469])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:72 221 {*adddi_1}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg:DI 0 ax [470])
                (plus:DI (reg:DI 0 ax [469])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:72 221 {*adddi_1}
     (nil))
(insn 30 29 1814 2 (set (reg:DI 2 cx [782])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 1814 30 31 2 (set (mem/c:DI (reg:DI 0 ax [470]) [0 MEM[(void *)&filename + 256B]+0 S8 A64])
        (reg:DI 2 cx [782])) sim2fitman_com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 31 1814 1815 2 (set (reg:DI 3 bx [783])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 1815 31 32 2 (set (mem/c:DI (plus:DI (reg:DI 0 ax [470])
                (const_int 8 [0x8])) [0 MEM[(void *)&filename + 256B]+8 S8 A64])
        (reg:DI 3 bx [783])) sim2fitman_com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 32 1815 33 2 (set (mem/c:SI (plus:DI (reg:DI 0 ax [470])
                (const_int 16 [0x10])) [0 MEM[(void *)&filename + 256B]+16 S4 A64])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_com_line.cpp:72 90 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (mem/c:HI (plus:DI (reg:DI 0 ax [470])
                (const_int 20 [0x14])) [0 MEM[(void *)&filename + 256B]+20 S2 A32])
        (const_int 101 [0x65])) sim2fitman_com_line.cpp:72 92 {*movhi_internal}
     (nil))
(insn 34 33 35 2 (parallel [
            (set (reg:DI 0 ax [471])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:73 221 {*adddi_1}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg:DI 0 ax [472])
                (plus:DI (reg:DI 0 ax [471])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:73 221 {*adddi_1}
     (nil))
(insn 36 35 1816 2 (set (reg:DI 2 cx [784])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_com_line.cpp:73 89 {*movdi_internal}
     (nil))
(insn 1816 36 37 2 (set (mem/c:DI (reg:DI 0 ax [472]) [0 MEM[(void *)&filename + 512B]+0 S8 A64])
        (reg:DI 2 cx [784])) sim2fitman_com_line.cpp:73 89 {*movdi_internal}
     (nil))
(insn 37 1816 1817 2 (set (reg:DI 3 bx [785])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_com_line.cpp:73 89 {*movdi_internal}
     (nil))
(insn 1817 37 38 2 (set (mem/c:DI (plus:DI (reg:DI 0 ax [472])
                (const_int 8 [0x8])) [0 MEM[(void *)&filename + 512B]+8 S8 A64])
        (reg:DI 3 bx [785])) sim2fitman_com_line.cpp:73 89 {*movdi_internal}
     (nil))
(insn 38 1817 39 2 (set (mem/c:SI (plus:DI (reg:DI 0 ax [472])
                (const_int 16 [0x10])) [0 MEM[(void *)&filename + 512B]+16 S4 A64])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_com_line.cpp:73 90 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (mem/c:HI (plus:DI (reg:DI 0 ax [472])
                (const_int 20 [0x14])) [0 MEM[(void *)&filename + 512B]+20 S2 A32])
        (const_int 101 [0x65])) sim2fitman_com_line.cpp:73 92 {*movhi_internal}
     (nil))
(insn 40 39 1695 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:76 90 {*movsi_internal}
     (nil))
(jump_insn 1695 40 1696 2 (set (pc)
        (label_ref 295)) sim2fitman_com_line.cpp:76 636 {jump}
     (nil)
 -> 295)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1696 1695 297)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551
(code_label 297 1696 43 3 3 "" [1 uses])
(note 43 297 44 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 3 (set (reg:SI 0 ax [473])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:77 90 {*movsi_internal}
     (nil))
(insn 45 44 46 3 (set (reg:DI 1 dx [orig:84 D.6101 ] [84])
        (sign_extend:DI (reg:SI 0 ax [473]))) sim2fitman_com_line.cpp:77 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 3 (set (reg:DI 0 ax [474])
        (reg:DI 1 dx [orig:84 D.6101 ] [84])) sim2fitman_com_line.cpp:77 89 {*movdi_internal}
     (nil))
(insn 47 46 48 3 (parallel [
            (set (reg:DI 0 ax [474])
                (ashift:DI (reg:DI 0 ax [474])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 497 {*ashldi3_1}
     (nil))
(insn 48 47 49 3 (parallel [
            (set (reg:DI 0 ax [474])
                (plus:DI (reg:DI 0 ax [474])
                    (reg:DI 1 dx [orig:84 D.6101 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.6101 ] [84])
            (const_int 9 [0x9]))
        (nil)))
(insn 49 48 50 3 (parallel [
            (set (reg:DI 0 ax [474])
                (ashift:DI (reg:DI 0 ax [474])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 497 {*ashldi3_1}
     (nil))
(insn 50 49 51 3 (parallel [
            (set (reg:DI 0 ax [474])
                (plus:DI (reg:DI 0 ax [474])
                    (reg:DI 1 dx [orig:84 D.6101 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:84 D.6101 ] [84])
            (const_int 19 [0x13]))
        (nil)))
(insn 51 50 52 3 (parallel [
            (set (reg:DI 0 ax [475])
                (ashift:DI (reg:DI 0 ax [474])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 497 {*ashldi3_1}
     (nil))
(insn 52 51 53 3 (set (reg:DI 0 ax [474])
        (reg:DI 0 ax [475])) sim2fitman_com_line.cpp:77 89 {*movdi_internal}
     (nil))
(insn 53 52 54 3 (set (reg:DI 1 dx [orig:85 D.6101 ] [85])
        (reg:DI 0 ax [474])) sim2fitman_com_line.cpp:77 89 {*movdi_internal}
     (nil))
(insn 54 53 55 3 (set (reg/f:DI 0 ax [476])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:77 89 {*movdi_internal}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.6102 ] [86])
                (plus:DI (reg/f:DI 0 ax [476])
                    (reg:DI 1 dx [orig:85 D.6101 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.6101 ] [85]))
        (nil)))
(insn 56 55 57 3 (set (mem/j:SI (reg/f:DI 0 ax [orig:86 D.6102 ] [86]) [0 _35->fid_scale+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:77 90 {*movsi_internal}
     (nil))
(insn 57 56 58 3 (set (reg:SI 0 ax [477])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:78 90 {*movsi_internal}
     (nil))
(insn 58 57 59 3 (set (reg:DI 1 dx [orig:87 D.6101 ] [87])
        (sign_extend:DI (reg:SI 0 ax [477]))) sim2fitman_com_line.cpp:78 142 {*extendsidi2_rex64}
     (nil))
(insn 59 58 60 3 (set (reg:DI 0 ax [478])
        (reg:DI 1 dx [orig:87 D.6101 ] [87])) sim2fitman_com_line.cpp:78 89 {*movdi_internal}
     (nil))
(insn 60 59 61 3 (parallel [
            (set (reg:DI 0 ax [478])
                (ashift:DI (reg:DI 0 ax [478])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 497 {*ashldi3_1}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg:DI 0 ax [478])
                (plus:DI (reg:DI 0 ax [478])
                    (reg:DI 1 dx [orig:87 D.6101 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:87 D.6101 ] [87])
            (const_int 9 [0x9]))
        (nil)))
(insn 62 61 63 3 (parallel [
            (set (reg:DI 0 ax [478])
                (ashift:DI (reg:DI 0 ax [478])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 497 {*ashldi3_1}
     (nil))
(insn 63 62 64 3 (parallel [
            (set (reg:DI 0 ax [478])
                (plus:DI (reg:DI 0 ax [478])
                    (reg:DI 1 dx [orig:87 D.6101 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:87 D.6101 ] [87])
            (const_int 19 [0x13]))
        (nil)))
(insn 64 63 65 3 (parallel [
            (set (reg:DI 0 ax [479])
                (ashift:DI (reg:DI 0 ax [478])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 497 {*ashldi3_1}
     (nil))
(insn 65 64 66 3 (set (reg:DI 0 ax [478])
        (reg:DI 0 ax [479])) sim2fitman_com_line.cpp:78 89 {*movdi_internal}
     (nil))
(insn 66 65 67 3 (set (reg:DI 1 dx [orig:88 D.6101 ] [88])
        (reg:DI 0 ax [478])) sim2fitman_com_line.cpp:78 89 {*movdi_internal}
     (nil))
(insn 67 66 68 3 (set (reg/f:DI 0 ax [480])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:78 89 {*movdi_internal}
     (nil))
(insn 68 67 69 3 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.6102 ] [89])
                (plus:DI (reg/f:DI 0 ax [480])
                    (reg:DI 1 dx [orig:88 D.6101 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.6101 ] [88]))
        (nil)))
(insn 69 68 70 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:89 D.6102 ] [89])
                (const_int 8 [0x8])) [0 _38->scaleby+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:78 90 {*movsi_internal}
     (nil))
(insn 70 69 71 3 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:79 90 {*movsi_internal}
     (nil))
(insn 71 70 72 3 (set (reg:DI 1 dx [orig:90 D.6101 ] [90])
        (sign_extend:DI (reg:SI 0 ax [481]))) sim2fitman_com_line.cpp:79 142 {*extendsidi2_rex64}
     (nil))
(insn 72 71 73 3 (set (reg:DI 0 ax [482])
        (reg:DI 1 dx [orig:90 D.6101 ] [90])) sim2fitman_com_line.cpp:79 89 {*movdi_internal}
     (nil))
(insn 73 72 74 3 (parallel [
            (set (reg:DI 0 ax [482])
                (ashift:DI (reg:DI 0 ax [482])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 74 73 75 3 (parallel [
            (set (reg:DI 0 ax [482])
                (plus:DI (reg:DI 0 ax [482])
                    (reg:DI 1 dx [orig:90 D.6101 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:90 D.6101 ] [90])
            (const_int 9 [0x9]))
        (nil)))
(insn 75 74 76 3 (parallel [
            (set (reg:DI 0 ax [482])
                (ashift:DI (reg:DI 0 ax [482])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 76 75 77 3 (parallel [
            (set (reg:DI 0 ax [482])
                (plus:DI (reg:DI 0 ax [482])
                    (reg:DI 1 dx [orig:90 D.6101 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:90 D.6101 ] [90])
            (const_int 19 [0x13]))
        (nil)))
(insn 77 76 78 3 (parallel [
            (set (reg:DI 0 ax [483])
                (ashift:DI (reg:DI 0 ax [482])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 497 {*ashldi3_1}
     (nil))
(insn 78 77 79 3 (set (reg:DI 0 ax [482])
        (reg:DI 0 ax [483])) sim2fitman_com_line.cpp:79 89 {*movdi_internal}
     (nil))
(insn 79 78 80 3 (set (reg:DI 1 dx [orig:91 D.6101 ] [91])
        (reg:DI 0 ax [482])) sim2fitman_com_line.cpp:79 89 {*movdi_internal}
     (nil))
(insn 80 79 81 3 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:79 89 {*movdi_internal}
     (nil))
(insn 81 80 82 3 (parallel [
            (set (reg/f:DI 1 dx [orig:92 D.6102 ] [92])
                (plus:DI (reg:DI 1 dx [orig:91 D.6101 ] [91])
                    (reg/f:DI 0 ax [484])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.6101 ] [91]))
        (nil)))
(insn 82 81 83 3 (set (reg:SF 0 ax [485])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:79 129 {*movsf_internal}
     (nil))
(insn 83 82 84 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:92 D.6102 ] [92])
                (const_int 4 [0x4])) [0 _41->scale_factor+0 S4 A32])
        (reg:SF 0 ax [485])) sim2fitman_com_line.cpp:79 129 {*movsf_internal}
     (nil))
(insn 84 83 85 3 (set (reg:SI 0 ax [486])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:80 90 {*movsi_internal}
     (nil))
(insn 85 84 86 3 (set (reg:DI 1 dx [orig:93 D.6101 ] [93])
        (sign_extend:DI (reg:SI 0 ax [486]))) sim2fitman_com_line.cpp:80 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 87 3 (set (reg:DI 0 ax [487])
        (reg:DI 1 dx [orig:93 D.6101 ] [93])) sim2fitman_com_line.cpp:80 89 {*movdi_internal}
     (nil))
(insn 87 86 88 3 (parallel [
            (set (reg:DI 0 ax [487])
                (ashift:DI (reg:DI 0 ax [487])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 497 {*ashldi3_1}
     (nil))
(insn 88 87 89 3 (parallel [
            (set (reg:DI 0 ax [487])
                (plus:DI (reg:DI 0 ax [487])
                    (reg:DI 1 dx [orig:93 D.6101 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:93 D.6101 ] [93])
            (const_int 9 [0x9]))
        (nil)))
(insn 89 88 90 3 (parallel [
            (set (reg:DI 0 ax [487])
                (ashift:DI (reg:DI 0 ax [487])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 497 {*ashldi3_1}
     (nil))
(insn 90 89 91 3 (parallel [
            (set (reg:DI 0 ax [487])
                (plus:DI (reg:DI 0 ax [487])
                    (reg:DI 1 dx [orig:93 D.6101 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:93 D.6101 ] [93])
            (const_int 19 [0x13]))
        (nil)))
(insn 91 90 92 3 (parallel [
            (set (reg:DI 0 ax [488])
                (ashift:DI (reg:DI 0 ax [487])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 497 {*ashldi3_1}
     (nil))
(insn 92 91 93 3 (set (reg:DI 0 ax [487])
        (reg:DI 0 ax [488])) sim2fitman_com_line.cpp:80 89 {*movdi_internal}
     (nil))
(insn 93 92 94 3 (set (reg:DI 1 dx [orig:94 D.6101 ] [94])
        (reg:DI 0 ax [487])) sim2fitman_com_line.cpp:80 89 {*movdi_internal}
     (nil))
(insn 94 93 95 3 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:80 89 {*movdi_internal}
     (nil))
(insn 95 94 96 3 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.6102 ] [95])
                (plus:DI (reg/f:DI 0 ax [489])
                    (reg:DI 1 dx [orig:94 D.6101 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.6101 ] [94]))
        (nil)))
(insn 96 95 97 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:95 D.6102 ] [95])
                (const_int 12 [0xc])) [0 _44->pre_ecc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:80 90 {*movsi_internal}
     (nil))
(insn 97 96 98 3 (set (reg:SI 0 ax [490])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:81 90 {*movsi_internal}
     (nil))
(insn 98 97 99 3 (set (reg:DI 1 dx [orig:96 D.6101 ] [96])
        (sign_extend:DI (reg:SI 0 ax [490]))) sim2fitman_com_line.cpp:81 142 {*extendsidi2_rex64}
     (nil))
(insn 99 98 100 3 (set (reg:DI 0 ax [491])
        (reg:DI 1 dx [orig:96 D.6101 ] [96])) sim2fitman_com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 100 99 101 3 (parallel [
            (set (reg:DI 0 ax [491])
                (ashift:DI (reg:DI 0 ax [491])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 497 {*ashldi3_1}
     (nil))
(insn 101 100 102 3 (parallel [
            (set (reg:DI 0 ax [491])
                (plus:DI (reg:DI 0 ax [491])
                    (reg:DI 1 dx [orig:96 D.6101 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:96 D.6101 ] [96])
            (const_int 9 [0x9]))
        (nil)))
(insn 102 101 103 3 (parallel [
            (set (reg:DI 0 ax [491])
                (ashift:DI (reg:DI 0 ax [491])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 497 {*ashldi3_1}
     (nil))
(insn 103 102 104 3 (parallel [
            (set (reg:DI 0 ax [491])
                (plus:DI (reg:DI 0 ax [491])
                    (reg:DI 1 dx [orig:96 D.6101 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:96 D.6101 ] [96])
            (const_int 19 [0x13]))
        (nil)))
(insn 104 103 105 3 (parallel [
            (set (reg:DI 0 ax [492])
                (ashift:DI (reg:DI 0 ax [491])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 497 {*ashldi3_1}
     (nil))
(insn 105 104 106 3 (set (reg:DI 0 ax [491])
        (reg:DI 0 ax [492])) sim2fitman_com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 106 105 107 3 (set (reg:DI 1 dx [orig:97 D.6101 ] [97])
        (reg:DI 0 ax [491])) sim2fitman_com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 107 106 108 3 (set (reg/f:DI 0 ax [493])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 108 107 109 3 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.6102 ] [98])
                (plus:DI (reg/f:DI 0 ax [493])
                    (reg:DI 1 dx [orig:97 D.6101 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.6101 ] [97]))
        (nil)))
(insn 109 108 110 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:98 D.6102 ] [98])
                (const_int 16 [0x10])) [0 _47->bc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:81 90 {*movsi_internal}
     (nil))
(insn 110 109 111 3 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:82 90 {*movsi_internal}
     (nil))
(insn 111 110 112 3 (set (reg:DI 1 dx [orig:99 D.6101 ] [99])
        (sign_extend:DI (reg:SI 0 ax [494]))) sim2fitman_com_line.cpp:82 142 {*extendsidi2_rex64}
     (nil))
(insn 112 111 113 3 (set (reg:DI 0 ax [495])
        (reg:DI 1 dx [orig:99 D.6101 ] [99])) sim2fitman_com_line.cpp:82 89 {*movdi_internal}
     (nil))
(insn 113 112 114 3 (parallel [
            (set (reg:DI 0 ax [495])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 497 {*ashldi3_1}
     (nil))
(insn 114 113 115 3 (parallel [
            (set (reg:DI 0 ax [495])
                (plus:DI (reg:DI 0 ax [495])
                    (reg:DI 1 dx [orig:99 D.6101 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:99 D.6101 ] [99])
            (const_int 9 [0x9]))
        (nil)))
(insn 115 114 116 3 (parallel [
            (set (reg:DI 0 ax [495])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 497 {*ashldi3_1}
     (nil))
(insn 116 115 117 3 (parallel [
            (set (reg:DI 0 ax [495])
                (plus:DI (reg:DI 0 ax [495])
                    (reg:DI 1 dx [orig:99 D.6101 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:99 D.6101 ] [99])
            (const_int 19 [0x13]))
        (nil)))
(insn 117 116 118 3 (parallel [
            (set (reg:DI 0 ax [496])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 497 {*ashldi3_1}
     (nil))
(insn 118 117 119 3 (set (reg:DI 0 ax [495])
        (reg:DI 0 ax [496])) sim2fitman_com_line.cpp:82 89 {*movdi_internal}
     (nil))
(insn 119 118 120 3 (set (reg:DI 1 dx [orig:100 D.6101 ] [100])
        (reg:DI 0 ax [495])) sim2fitman_com_line.cpp:82 89 {*movdi_internal}
     (nil))
(insn 120 119 121 3 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:82 89 {*movdi_internal}
     (nil))
(insn 121 120 122 3 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.6102 ] [101])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:100 D.6101 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.6101 ] [100]))
        (nil)))
(insn 122 121 123 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:101 D.6102 ] [101])
                (const_int 20 [0x14])) [0 _50->file_type+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:82 90 {*movsi_internal}
     (nil))
(insn 123 122 124 3 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:83 90 {*movsi_internal}
     (nil))
(insn 124 123 125 3 (set (reg:DI 1 dx [orig:102 D.6101 ] [102])
        (sign_extend:DI (reg:SI 0 ax [498]))) sim2fitman_com_line.cpp:83 142 {*extendsidi2_rex64}
     (nil))
(insn 125 124 126 3 (set (reg:DI 0 ax [499])
        (reg:DI 1 dx [orig:102 D.6101 ] [102])) sim2fitman_com_line.cpp:83 89 {*movdi_internal}
     (nil))
(insn 126 125 127 3 (parallel [
            (set (reg:DI 0 ax [499])
                (ashift:DI (reg:DI 0 ax [499])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 497 {*ashldi3_1}
     (nil))
(insn 127 126 128 3 (parallel [
            (set (reg:DI 0 ax [499])
                (plus:DI (reg:DI 0 ax [499])
                    (reg:DI 1 dx [orig:102 D.6101 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:102 D.6101 ] [102])
            (const_int 9 [0x9]))
        (nil)))
(insn 128 127 129 3 (parallel [
            (set (reg:DI 0 ax [499])
                (ashift:DI (reg:DI 0 ax [499])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 497 {*ashldi3_1}
     (nil))
(insn 129 128 130 3 (parallel [
            (set (reg:DI 0 ax [499])
                (plus:DI (reg:DI 0 ax [499])
                    (reg:DI 1 dx [orig:102 D.6101 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:102 D.6101 ] [102])
            (const_int 19 [0x13]))
        (nil)))
(insn 130 129 131 3 (parallel [
            (set (reg:DI 0 ax [500])
                (ashift:DI (reg:DI 0 ax [499])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 497 {*ashldi3_1}
     (nil))
(insn 131 130 132 3 (set (reg:DI 0 ax [499])
        (reg:DI 0 ax [500])) sim2fitman_com_line.cpp:83 89 {*movdi_internal}
     (nil))
(insn 132 131 133 3 (set (reg:DI 1 dx [orig:103 D.6101 ] [103])
        (reg:DI 0 ax [499])) sim2fitman_com_line.cpp:83 89 {*movdi_internal}
     (nil))
(insn 133 132 134 3 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:83 89 {*movdi_internal}
     (nil))
(insn 134 133 135 3 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6102 ] [104])
                (plus:DI (reg/f:DI 0 ax [501])
                    (reg:DI 1 dx [orig:103 D.6101 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.6101 ] [103]))
        (nil)))
(insn 135 134 136 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:104 D.6102 ] [104])
                (const_int 24 [0x18])) [0 _53->data_zero_fill+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:83 90 {*movsi_internal}
     (nil))
(insn 136 135 137 3 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:84 90 {*movsi_internal}
     (nil))
(insn 137 136 138 3 (set (reg:DI 1 dx [orig:105 D.6101 ] [105])
        (sign_extend:DI (reg:SI 0 ax [502]))) sim2fitman_com_line.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 3 (set (reg:DI 0 ax [503])
        (reg:DI 1 dx [orig:105 D.6101 ] [105])) sim2fitman_com_line.cpp:84 89 {*movdi_internal}
     (nil))
(insn 139 138 140 3 (parallel [
            (set (reg:DI 0 ax [503])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 497 {*ashldi3_1}
     (nil))
(insn 140 139 141 3 (parallel [
            (set (reg:DI 0 ax [503])
                (plus:DI (reg:DI 0 ax [503])
                    (reg:DI 1 dx [orig:105 D.6101 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:105 D.6101 ] [105])
            (const_int 9 [0x9]))
        (nil)))
(insn 141 140 142 3 (parallel [
            (set (reg:DI 0 ax [503])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 497 {*ashldi3_1}
     (nil))
(insn 142 141 143 3 (parallel [
            (set (reg:DI 0 ax [503])
                (plus:DI (reg:DI 0 ax [503])
                    (reg:DI 1 dx [orig:105 D.6101 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:105 D.6101 ] [105])
            (const_int 19 [0x13]))
        (nil)))
(insn 143 142 144 3 (parallel [
            (set (reg:DI 0 ax [504])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 497 {*ashldi3_1}
     (nil))
(insn 144 143 145 3 (set (reg:DI 0 ax [503])
        (reg:DI 0 ax [504])) sim2fitman_com_line.cpp:84 89 {*movdi_internal}
     (nil))
(insn 145 144 146 3 (set (reg:DI 1 dx [orig:106 D.6101 ] [106])
        (reg:DI 0 ax [503])) sim2fitman_com_line.cpp:84 89 {*movdi_internal}
     (nil))
(insn 146 145 147 3 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:84 89 {*movdi_internal}
     (nil))
(insn 147 146 148 3 (parallel [
            (set (reg/f:DI 1 dx [orig:107 D.6102 ] [107])
                (plus:DI (reg:DI 1 dx [orig:106 D.6101 ] [106])
                    (reg/f:DI 0 ax [505])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:106 D.6101 ] [106]))
        (nil)))
(insn 148 147 149 3 (set (reg:SF 0 ax [506])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:84 129 {*movsf_internal}
     (nil))
(insn 149 148 150 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:107 D.6102 ] [107])
                (const_int 28 [0x1c])) [0 _56->comp_filter+0 S4 A32])
        (reg:SF 0 ax [506])) sim2fitman_com_line.cpp:84 129 {*movsf_internal}
     (nil))
(insn 150 149 151 3 (set (reg:SI 0 ax [507])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:85 90 {*movsi_internal}
     (nil))
(insn 151 150 152 3 (set (reg:DI 1 dx [orig:108 D.6101 ] [108])
        (sign_extend:DI (reg:SI 0 ax [507]))) sim2fitman_com_line.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 152 151 153 3 (set (reg:DI 0 ax [508])
        (reg:DI 1 dx [orig:108 D.6101 ] [108])) sim2fitman_com_line.cpp:85 89 {*movdi_internal}
     (nil))
(insn 153 152 154 3 (parallel [
            (set (reg:DI 0 ax [508])
                (ashift:DI (reg:DI 0 ax [508])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 497 {*ashldi3_1}
     (nil))
(insn 154 153 155 3 (parallel [
            (set (reg:DI 0 ax [508])
                (plus:DI (reg:DI 0 ax [508])
                    (reg:DI 1 dx [orig:108 D.6101 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:108 D.6101 ] [108])
            (const_int 9 [0x9]))
        (nil)))
(insn 155 154 156 3 (parallel [
            (set (reg:DI 0 ax [508])
                (ashift:DI (reg:DI 0 ax [508])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 497 {*ashldi3_1}
     (nil))
(insn 156 155 157 3 (parallel [
            (set (reg:DI 0 ax [508])
                (plus:DI (reg:DI 0 ax [508])
                    (reg:DI 1 dx [orig:108 D.6101 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:108 D.6101 ] [108])
            (const_int 19 [0x13]))
        (nil)))
(insn 157 156 158 3 (parallel [
            (set (reg:DI 0 ax [509])
                (ashift:DI (reg:DI 0 ax [508])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 497 {*ashldi3_1}
     (nil))
(insn 158 157 159 3 (set (reg:DI 0 ax [508])
        (reg:DI 0 ax [509])) sim2fitman_com_line.cpp:85 89 {*movdi_internal}
     (nil))
(insn 159 158 160 3 (set (reg:DI 1 dx [orig:109 D.6101 ] [109])
        (reg:DI 0 ax [508])) sim2fitman_com_line.cpp:85 89 {*movdi_internal}
     (nil))
(insn 160 159 161 3 (set (reg/f:DI 0 ax [510])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:85 89 {*movdi_internal}
     (nil))
(insn 161 160 162 3 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.6102 ] [110])
                (plus:DI (reg/f:DI 0 ax [510])
                    (reg:DI 1 dx [orig:109 D.6101 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:109 D.6101 ] [109]))
        (nil)))
(insn 162 161 163 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:110 D.6102 ] [110])
                (const_int 32 [0x20])) [0 _59->max_normalize+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:85 90 {*movsi_internal}
     (nil))
(insn 163 162 164 3 (set (reg:SI 0 ax [511])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:86 90 {*movsi_internal}
     (nil))
(insn 164 163 165 3 (set (reg:DI 1 dx [orig:111 D.6101 ] [111])
        (sign_extend:DI (reg:SI 0 ax [511]))) sim2fitman_com_line.cpp:86 142 {*extendsidi2_rex64}
     (nil))
(insn 165 164 166 3 (set (reg:DI 0 ax [512])
        (reg:DI 1 dx [orig:111 D.6101 ] [111])) sim2fitman_com_line.cpp:86 89 {*movdi_internal}
     (nil))
(insn 166 165 167 3 (parallel [
            (set (reg:DI 0 ax [512])
                (ashift:DI (reg:DI 0 ax [512])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 497 {*ashldi3_1}
     (nil))
(insn 167 166 168 3 (parallel [
            (set (reg:DI 0 ax [512])
                (plus:DI (reg:DI 0 ax [512])
                    (reg:DI 1 dx [orig:111 D.6101 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:111 D.6101 ] [111])
            (const_int 9 [0x9]))
        (nil)))
(insn 168 167 169 3 (parallel [
            (set (reg:DI 0 ax [512])
                (ashift:DI (reg:DI 0 ax [512])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 497 {*ashldi3_1}
     (nil))
(insn 169 168 170 3 (parallel [
            (set (reg:DI 0 ax [512])
                (plus:DI (reg:DI 0 ax [512])
                    (reg:DI 1 dx [orig:111 D.6101 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:111 D.6101 ] [111])
            (const_int 19 [0x13]))
        (nil)))
(insn 170 169 171 3 (parallel [
            (set (reg:DI 0 ax [513])
                (ashift:DI (reg:DI 0 ax [512])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 497 {*ashldi3_1}
     (nil))
(insn 171 170 172 3 (set (reg:DI 0 ax [512])
        (reg:DI 0 ax [513])) sim2fitman_com_line.cpp:86 89 {*movdi_internal}
     (nil))
(insn 172 171 173 3 (set (reg:DI 1 dx [orig:112 D.6101 ] [112])
        (reg:DI 0 ax [512])) sim2fitman_com_line.cpp:86 89 {*movdi_internal}
     (nil))
(insn 173 172 174 3 (set (reg/f:DI 0 ax [514])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:86 89 {*movdi_internal}
     (nil))
(insn 174 173 175 3 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.6102 ] [113])
                (plus:DI (reg/f:DI 0 ax [514])
                    (reg:DI 1 dx [orig:112 D.6101 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.6101 ] [112]))
        (nil)))
(insn 175 174 176 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:113 D.6102 ] [113])
                (const_int 36 [0x24])) [0 _62->pre_quality+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:86 90 {*movsi_internal}
     (nil))
(insn 176 175 177 3 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:87 90 {*movsi_internal}
     (nil))
(insn 177 176 178 3 (set (reg:DI 1 dx [orig:114 D.6101 ] [114])
        (sign_extend:DI (reg:SI 0 ax [515]))) sim2fitman_com_line.cpp:87 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 3 (set (reg:DI 0 ax [516])
        (reg:DI 1 dx [orig:114 D.6101 ] [114])) sim2fitman_com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 179 178 180 3 (parallel [
            (set (reg:DI 0 ax [516])
                (ashift:DI (reg:DI 0 ax [516])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 497 {*ashldi3_1}
     (nil))
(insn 180 179 181 3 (parallel [
            (set (reg:DI 0 ax [516])
                (plus:DI (reg:DI 0 ax [516])
                    (reg:DI 1 dx [orig:114 D.6101 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:114 D.6101 ] [114])
            (const_int 9 [0x9]))
        (nil)))
(insn 181 180 182 3 (parallel [
            (set (reg:DI 0 ax [516])
                (ashift:DI (reg:DI 0 ax [516])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 497 {*ashldi3_1}
     (nil))
(insn 182 181 183 3 (parallel [
            (set (reg:DI 0 ax [516])
                (plus:DI (reg:DI 0 ax [516])
                    (reg:DI 1 dx [orig:114 D.6101 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:114 D.6101 ] [114])
            (const_int 19 [0x13]))
        (nil)))
(insn 183 182 184 3 (parallel [
            (set (reg:DI 0 ax [517])
                (ashift:DI (reg:DI 0 ax [516])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 497 {*ashldi3_1}
     (nil))
(insn 184 183 185 3 (set (reg:DI 0 ax [516])
        (reg:DI 0 ax [517])) sim2fitman_com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 185 184 186 3 (set (reg:DI 1 dx [orig:115 D.6101 ] [115])
        (reg:DI 0 ax [516])) sim2fitman_com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 186 185 187 3 (set (reg/f:DI 0 ax [518])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 187 186 188 3 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.6102 ] [116])
                (plus:DI (reg/f:DI 0 ax [518])
                    (reg:DI 1 dx [orig:115 D.6101 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.6101 ] [115]))
        (nil)))
(insn 188 187 189 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:116 D.6102 ] [116])
                (const_int 40 [0x28])) [0 _65->pre_quecc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:87 90 {*movsi_internal}
     (nil))
(insn 189 188 190 3 (set (reg:SI 0 ax [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:88 90 {*movsi_internal}
     (nil))
(insn 190 189 191 3 (set (reg:DI 1 dx [orig:117 D.6101 ] [117])
        (sign_extend:DI (reg:SI 0 ax [519]))) sim2fitman_com_line.cpp:88 142 {*extendsidi2_rex64}
     (nil))
(insn 191 190 192 3 (set (reg:DI 0 ax [520])
        (reg:DI 1 dx [orig:117 D.6101 ] [117])) sim2fitman_com_line.cpp:88 89 {*movdi_internal}
     (nil))
(insn 192 191 193 3 (parallel [
            (set (reg:DI 0 ax [520])
                (ashift:DI (reg:DI 0 ax [520])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 497 {*ashldi3_1}
     (nil))
(insn 193 192 194 3 (parallel [
            (set (reg:DI 0 ax [520])
                (plus:DI (reg:DI 0 ax [520])
                    (reg:DI 1 dx [orig:117 D.6101 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:117 D.6101 ] [117])
            (const_int 9 [0x9]))
        (nil)))
(insn 194 193 195 3 (parallel [
            (set (reg:DI 0 ax [520])
                (ashift:DI (reg:DI 0 ax [520])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 497 {*ashldi3_1}
     (nil))
(insn 195 194 196 3 (parallel [
            (set (reg:DI 0 ax [520])
                (plus:DI (reg:DI 0 ax [520])
                    (reg:DI 1 dx [orig:117 D.6101 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:117 D.6101 ] [117])
            (const_int 19 [0x13]))
        (nil)))
(insn 196 195 197 3 (parallel [
            (set (reg:DI 0 ax [521])
                (ashift:DI (reg:DI 0 ax [520])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 497 {*ashldi3_1}
     (nil))
(insn 197 196 198 3 (set (reg:DI 0 ax [520])
        (reg:DI 0 ax [521])) sim2fitman_com_line.cpp:88 89 {*movdi_internal}
     (nil))
(insn 198 197 199 3 (set (reg:DI 1 dx [orig:118 D.6101 ] [118])
        (reg:DI 0 ax [520])) sim2fitman_com_line.cpp:88 89 {*movdi_internal}
     (nil))
(insn 199 198 200 3 (set (reg/f:DI 0 ax [522])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:88 89 {*movdi_internal}
     (nil))
(insn 200 199 201 3 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.6102 ] [119])
                (plus:DI (reg/f:DI 0 ax [522])
                    (reg:DI 1 dx [orig:118 D.6101 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.6101 ] [118]))
        (nil)))
(insn 201 200 202 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:119 D.6102 ] [119])
                (const_int 44 [0x2c])) [0 _68->pre_quecc_points+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:88 90 {*movsi_internal}
     (nil))
(insn 202 201 203 3 (set (reg:SI 0 ax [523])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:89 90 {*movsi_internal}
     (nil))
(insn 203 202 204 3 (set (reg:DI 1 dx [orig:120 D.6101 ] [120])
        (sign_extend:DI (reg:SI 0 ax [523]))) sim2fitman_com_line.cpp:89 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 3 (set (reg:DI 0 ax [524])
        (reg:DI 1 dx [orig:120 D.6101 ] [120])) sim2fitman_com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 205 204 206 3 (parallel [
            (set (reg:DI 0 ax [524])
                (ashift:DI (reg:DI 0 ax [524])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 497 {*ashldi3_1}
     (nil))
(insn 206 205 207 3 (parallel [
            (set (reg:DI 0 ax [524])
                (plus:DI (reg:DI 0 ax [524])
                    (reg:DI 1 dx [orig:120 D.6101 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:120 D.6101 ] [120])
            (const_int 9 [0x9]))
        (nil)))
(insn 207 206 208 3 (parallel [
            (set (reg:DI 0 ax [524])
                (ashift:DI (reg:DI 0 ax [524])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 497 {*ashldi3_1}
     (nil))
(insn 208 207 209 3 (parallel [
            (set (reg:DI 0 ax [524])
                (plus:DI (reg:DI 0 ax [524])
                    (reg:DI 1 dx [orig:120 D.6101 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:120 D.6101 ] [120])
            (const_int 19 [0x13]))
        (nil)))
(insn 209 208 210 3 (parallel [
            (set (reg:DI 0 ax [525])
                (ashift:DI (reg:DI 0 ax [524])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 497 {*ashldi3_1}
     (nil))
(insn 210 209 211 3 (set (reg:DI 0 ax [524])
        (reg:DI 0 ax [525])) sim2fitman_com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 211 210 212 3 (set (reg:DI 1 dx [orig:121 D.6101 ] [121])
        (reg:DI 0 ax [524])) sim2fitman_com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 212 211 213 3 (set (reg/f:DI 0 ax [526])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 213 212 214 3 (parallel [
            (set (reg/f:DI 1 dx [orig:122 D.6102 ] [122])
                (plus:DI (reg:DI 1 dx [orig:121 D.6101 ] [121])
                    (reg/f:DI 0 ax [526])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.6101 ] [121]))
        (nil)))
(insn 214 213 215 3 (set (reg:SF 0 ax [527])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:89 129 {*movsf_internal}
     (nil))
(insn 215 214 216 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:122 D.6102 ] [122])
                (const_int 48 [0x30])) [0 _71->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [527])) sim2fitman_com_line.cpp:89 129 {*movsf_internal}
     (nil))
(insn 216 215 217 3 (set (reg:SI 0 ax [528])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:90 90 {*movsi_internal}
     (nil))
(insn 217 216 218 3 (set (reg:DI 1 dx [orig:123 D.6101 ] [123])
        (sign_extend:DI (reg:SI 0 ax [528]))) sim2fitman_com_line.cpp:90 142 {*extendsidi2_rex64}
     (nil))
(insn 218 217 219 3 (set (reg:DI 0 ax [529])
        (reg:DI 1 dx [orig:123 D.6101 ] [123])) sim2fitman_com_line.cpp:90 89 {*movdi_internal}
     (nil))
(insn 219 218 220 3 (parallel [
            (set (reg:DI 0 ax [529])
                (ashift:DI (reg:DI 0 ax [529])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 497 {*ashldi3_1}
     (nil))
(insn 220 219 221 3 (parallel [
            (set (reg:DI 0 ax [529])
                (plus:DI (reg:DI 0 ax [529])
                    (reg:DI 1 dx [orig:123 D.6101 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:123 D.6101 ] [123])
            (const_int 9 [0x9]))
        (nil)))
(insn 221 220 222 3 (parallel [
            (set (reg:DI 0 ax [529])
                (ashift:DI (reg:DI 0 ax [529])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 497 {*ashldi3_1}
     (nil))
(insn 222 221 223 3 (parallel [
            (set (reg:DI 0 ax [529])
                (plus:DI (reg:DI 0 ax [529])
                    (reg:DI 1 dx [orig:123 D.6101 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:123 D.6101 ] [123])
            (const_int 19 [0x13]))
        (nil)))
(insn 223 222 224 3 (parallel [
            (set (reg:DI 0 ax [530])
                (ashift:DI (reg:DI 0 ax [529])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 497 {*ashldi3_1}
     (nil))
(insn 224 223 225 3 (set (reg:DI 0 ax [529])
        (reg:DI 0 ax [530])) sim2fitman_com_line.cpp:90 89 {*movdi_internal}
     (nil))
(insn 225 224 226 3 (set (reg:DI 1 dx [orig:124 D.6101 ] [124])
        (reg:DI 0 ax [529])) sim2fitman_com_line.cpp:90 89 {*movdi_internal}
     (nil))
(insn 226 225 227 3 (set (reg/f:DI 0 ax [531])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:90 89 {*movdi_internal}
     (nil))
(insn 227 226 228 3 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.6102 ] [125])
                (plus:DI (reg/f:DI 0 ax [531])
                    (reg:DI 1 dx [orig:124 D.6101 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.6101 ] [124]))
        (nil)))
(insn 228 227 229 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:125 D.6102 ] [125])
                (const_int 52 [0x34])) [0 _74->pre_quecc_if+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:90 90 {*movsi_internal}
     (nil))
(insn 229 228 230 3 (set (reg:SI 0 ax [532])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:91 90 {*movsi_internal}
     (nil))
(insn 230 229 231 3 (set (reg:DI 1 dx [orig:126 D.6101 ] [126])
        (sign_extend:DI (reg:SI 0 ax [532]))) sim2fitman_com_line.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 231 230 232 3 (set (reg:DI 0 ax [533])
        (reg:DI 1 dx [orig:126 D.6101 ] [126])) sim2fitman_com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 232 231 233 3 (parallel [
            (set (reg:DI 0 ax [533])
                (ashift:DI (reg:DI 0 ax [533])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 497 {*ashldi3_1}
     (nil))
(insn 233 232 234 3 (parallel [
            (set (reg:DI 0 ax [533])
                (plus:DI (reg:DI 0 ax [533])
                    (reg:DI 1 dx [orig:126 D.6101 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:126 D.6101 ] [126])
            (const_int 9 [0x9]))
        (nil)))
(insn 234 233 235 3 (parallel [
            (set (reg:DI 0 ax [533])
                (ashift:DI (reg:DI 0 ax [533])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 497 {*ashldi3_1}
     (nil))
(insn 235 234 236 3 (parallel [
            (set (reg:DI 0 ax [533])
                (plus:DI (reg:DI 0 ax [533])
                    (reg:DI 1 dx [orig:126 D.6101 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:126 D.6101 ] [126])
            (const_int 19 [0x13]))
        (nil)))
(insn 236 235 237 3 (parallel [
            (set (reg:DI 0 ax [534])
                (ashift:DI (reg:DI 0 ax [533])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 497 {*ashldi3_1}
     (nil))
(insn 237 236 238 3 (set (reg:DI 0 ax [533])
        (reg:DI 0 ax [534])) sim2fitman_com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 238 237 239 3 (set (reg:DI 1 dx [orig:127 D.6101 ] [127])
        (reg:DI 0 ax [533])) sim2fitman_com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 239 238 240 3 (set (reg/f:DI 0 ax [535])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 240 239 241 3 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.6102 ] [128])
                (plus:DI (reg/f:DI 0 ax [535])
                    (reg:DI 1 dx [orig:127 D.6101 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.6101 ] [127]))
        (nil)))
(insn 241 240 242 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:128 D.6102 ] [128])
                (const_int 56 [0x38])) [0 _77->input_file_type+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:91 90 {*movsi_internal}
     (nil))
(insn 242 241 243 3 (set (reg:SI 0 ax [536])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:92 90 {*movsi_internal}
     (nil))
(insn 243 242 244 3 (set (reg:DI 1 dx [orig:129 D.6101 ] [129])
        (sign_extend:DI (reg:SI 0 ax [536]))) sim2fitman_com_line.cpp:92 142 {*extendsidi2_rex64}
     (nil))
(insn 244 243 245 3 (set (reg:DI 0 ax [537])
        (reg:DI 1 dx [orig:129 D.6101 ] [129])) sim2fitman_com_line.cpp:92 89 {*movdi_internal}
     (nil))
(insn 245 244 246 3 (parallel [
            (set (reg:DI 0 ax [537])
                (ashift:DI (reg:DI 0 ax [537])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 497 {*ashldi3_1}
     (nil))
(insn 246 245 247 3 (parallel [
            (set (reg:DI 0 ax [537])
                (plus:DI (reg:DI 0 ax [537])
                    (reg:DI 1 dx [orig:129 D.6101 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:129 D.6101 ] [129])
            (const_int 9 [0x9]))
        (nil)))
(insn 247 246 248 3 (parallel [
            (set (reg:DI 0 ax [537])
                (ashift:DI (reg:DI 0 ax [537])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 497 {*ashldi3_1}
     (nil))
(insn 248 247 249 3 (parallel [
            (set (reg:DI 0 ax [537])
                (plus:DI (reg:DI 0 ax [537])
                    (reg:DI 1 dx [orig:129 D.6101 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:129 D.6101 ] [129])
            (const_int 19 [0x13]))
        (nil)))
(insn 249 248 250 3 (parallel [
            (set (reg:DI 0 ax [538])
                (ashift:DI (reg:DI 0 ax [537])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 497 {*ashldi3_1}
     (nil))
(insn 250 249 251 3 (set (reg:DI 0 ax [537])
        (reg:DI 0 ax [538])) sim2fitman_com_line.cpp:92 89 {*movdi_internal}
     (nil))
(insn 251 250 252 3 (set (reg:DI 1 dx [orig:130 D.6101 ] [130])
        (reg:DI 0 ax [537])) sim2fitman_com_line.cpp:92 89 {*movdi_internal}
     (nil))
(insn 252 251 253 3 (set (reg/f:DI 0 ax [539])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:92 89 {*movdi_internal}
     (nil))
(insn 253 252 254 3 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.6102 ] [131])
                (plus:DI (reg/f:DI 0 ax [539])
                    (reg:DI 1 dx [orig:130 D.6101 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.6101 ] [130]))
        (nil)))
(insn 254 253 255 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:131 D.6102 ] [131])
                (const_int 60 [0x3c])) [0 _80->ref_file_argument+0 S4 A32])
        (const_int 5 [0x5])) sim2fitman_com_line.cpp:92 90 {*movsi_internal}
     (nil))
(insn 255 254 256 3 (set (reg:SI 0 ax [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:93 90 {*movsi_internal}
     (nil))
(insn 256 255 257 3 (set (reg:DI 1 dx [orig:132 D.6101 ] [132])
        (sign_extend:DI (reg:SI 0 ax [540]))) sim2fitman_com_line.cpp:93 142 {*extendsidi2_rex64}
     (nil))
(insn 257 256 258 3 (set (reg:DI 0 ax [541])
        (reg:DI 1 dx [orig:132 D.6101 ] [132])) sim2fitman_com_line.cpp:93 89 {*movdi_internal}
     (nil))
(insn 258 257 259 3 (parallel [
            (set (reg:DI 0 ax [541])
                (ashift:DI (reg:DI 0 ax [541])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 497 {*ashldi3_1}
     (nil))
(insn 259 258 260 3 (parallel [
            (set (reg:DI 0 ax [541])
                (plus:DI (reg:DI 0 ax [541])
                    (reg:DI 1 dx [orig:132 D.6101 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:132 D.6101 ] [132])
            (const_int 9 [0x9]))
        (nil)))
(insn 260 259 261 3 (parallel [
            (set (reg:DI 0 ax [541])
                (ashift:DI (reg:DI 0 ax [541])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 497 {*ashldi3_1}
     (nil))
(insn 261 260 262 3 (parallel [
            (set (reg:DI 0 ax [541])
                (plus:DI (reg:DI 0 ax [541])
                    (reg:DI 1 dx [orig:132 D.6101 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:132 D.6101 ] [132])
            (const_int 19 [0x13]))
        (nil)))
(insn 262 261 263 3 (parallel [
            (set (reg:DI 0 ax [542])
                (ashift:DI (reg:DI 0 ax [541])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 497 {*ashldi3_1}
     (nil))
(insn 263 262 264 3 (set (reg:DI 0 ax [541])
        (reg:DI 0 ax [542])) sim2fitman_com_line.cpp:93 89 {*movdi_internal}
     (nil))
(insn 264 263 265 3 (set (reg:DI 1 dx [orig:133 D.6101 ] [133])
        (reg:DI 0 ax [541])) sim2fitman_com_line.cpp:93 89 {*movdi_internal}
     (nil))
(insn 265 264 266 3 (set (reg/f:DI 0 ax [543])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:93 89 {*movdi_internal}
     (nil))
(insn 266 265 267 3 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6102 ] [134])
                (plus:DI (reg/f:DI 0 ax [543])
                    (reg:DI 1 dx [orig:133 D.6101 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6101 ] [133]))
        (nil)))
(insn 267 266 268 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:134 D.6102 ] [134])
                (const_int 64 [0x40])) [0 _83->csi_reorder+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:93 90 {*movsi_internal}
     (nil))
(insn 268 267 269 3 (set (reg:SI 0 ax [544])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:94 90 {*movsi_internal}
     (nil))
(insn 269 268 270 3 (set (reg:DI 1 dx [orig:135 D.6101 ] [135])
        (sign_extend:DI (reg:SI 0 ax [544]))) sim2fitman_com_line.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 270 269 271 3 (set (reg:DI 0 ax [545])
        (reg:DI 1 dx [orig:135 D.6101 ] [135])) sim2fitman_com_line.cpp:94 89 {*movdi_internal}
     (nil))
(insn 271 270 272 3 (parallel [
            (set (reg:DI 0 ax [545])
                (ashift:DI (reg:DI 0 ax [545])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 497 {*ashldi3_1}
     (nil))
(insn 272 271 273 3 (parallel [
            (set (reg:DI 0 ax [545])
                (plus:DI (reg:DI 0 ax [545])
                    (reg:DI 1 dx [orig:135 D.6101 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:135 D.6101 ] [135])
            (const_int 9 [0x9]))
        (nil)))
(insn 273 272 274 3 (parallel [
            (set (reg:DI 0 ax [545])
                (ashift:DI (reg:DI 0 ax [545])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 497 {*ashldi3_1}
     (nil))
(insn 274 273 275 3 (parallel [
            (set (reg:DI 0 ax [545])
                (plus:DI (reg:DI 0 ax [545])
                    (reg:DI 1 dx [orig:135 D.6101 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:135 D.6101 ] [135])
            (const_int 19 [0x13]))
        (nil)))
(insn 275 274 276 3 (parallel [
            (set (reg:DI 0 ax [546])
                (ashift:DI (reg:DI 0 ax [545])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 497 {*ashldi3_1}
     (nil))
(insn 276 275 277 3 (set (reg:DI 0 ax [545])
        (reg:DI 0 ax [546])) sim2fitman_com_line.cpp:94 89 {*movdi_internal}
     (nil))
(insn 277 276 278 3 (set (reg:DI 1 dx [orig:136 D.6101 ] [136])
        (reg:DI 0 ax [545])) sim2fitman_com_line.cpp:94 89 {*movdi_internal}
     (nil))
(insn 278 277 279 3 (set (reg/f:DI 0 ax [547])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:94 89 {*movdi_internal}
     (nil))
(insn 279 278 280 3 (parallel [
            (set (reg/f:DI 0 ax [orig:137 D.6102 ] [137])
                (plus:DI (reg/f:DI 0 ax [547])
                    (reg:DI 1 dx [orig:136 D.6101 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:136 D.6101 ] [136]))
        (nil)))
(insn 280 279 281 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:137 D.6102 ] [137])
                (const_int 68 [0x44])) [0 _86->tilt+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:94 90 {*movsi_internal}
     (nil))
(insn 281 280 282 3 (set (reg:SI 0 ax [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:95 90 {*movsi_internal}
     (nil))
(insn 282 281 283 3 (set (reg:DI 1 dx [orig:138 D.6101 ] [138])
        (sign_extend:DI (reg:SI 0 ax [548]))) sim2fitman_com_line.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 283 282 284 3 (set (reg:DI 0 ax [549])
        (reg:DI 1 dx [orig:138 D.6101 ] [138])) sim2fitman_com_line.cpp:95 89 {*movdi_internal}
     (nil))
(insn 284 283 285 3 (parallel [
            (set (reg:DI 0 ax [549])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 497 {*ashldi3_1}
     (nil))
(insn 285 284 286 3 (parallel [
            (set (reg:DI 0 ax [549])
                (plus:DI (reg:DI 0 ax [549])
                    (reg:DI 1 dx [orig:138 D.6101 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:138 D.6101 ] [138])
            (const_int 9 [0x9]))
        (nil)))
(insn 286 285 287 3 (parallel [
            (set (reg:DI 0 ax [549])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 497 {*ashldi3_1}
     (nil))
(insn 287 286 288 3 (parallel [
            (set (reg:DI 0 ax [549])
                (plus:DI (reg:DI 0 ax [549])
                    (reg:DI 1 dx [orig:138 D.6101 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:138 D.6101 ] [138])
            (const_int 19 [0x13]))
        (nil)))
(insn 288 287 289 3 (parallel [
            (set (reg:DI 0 ax [550])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 497 {*ashldi3_1}
     (nil))
(insn 289 288 290 3 (set (reg:DI 0 ax [549])
        (reg:DI 0 ax [550])) sim2fitman_com_line.cpp:95 89 {*movdi_internal}
     (nil))
(insn 290 289 291 3 (set (reg:DI 1 dx [orig:139 D.6101 ] [139])
        (reg:DI 0 ax [549])) sim2fitman_com_line.cpp:95 89 {*movdi_internal}
     (nil))
(insn 291 290 292 3 (set (reg/f:DI 0 ax [551])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:95 89 {*movdi_internal}
     (nil))
(insn 292 291 293 3 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.6102 ] [140])
                (plus:DI (reg/f:DI 0 ax [551])
                    (reg:DI 1 dx [orig:139 D.6101 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.6101 ] [139]))
        (nil)))
(insn 293 292 294 3 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:140 D.6102 ] [140])
                (const_int 72 [0x48])) [0 _89->ecc_present+0 S1 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:95 93 {*movqi_internal}
     (nil))
(insn 294 293 295 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:76 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 295 294 296 4 2 "" [1 uses])
(note 296 295 298 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 298 296 299 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -808 [0xfffffffffffffcd8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_com_line.cpp:76 7 {*cmpsi_1}
     (nil))
(jump_insn 299 298 300 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 297)
            (pc))) sim2fitman_com_line.cpp:76 596 {*jcc_1}
     (nil)
 -> 297)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 552
(note 300 299 301 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 301 300 302 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:99 90 {*movsi_internal}
     (nil))
(insn 302 301 303 5 (set (reg/f:DI 0 ax [552])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:100 89 {*movdi_internal}
     (nil))
(insn 303 302 1697 5 (set (mem:SI (reg/f:DI 0 ax [552]) [0 *fid_92(D)+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:100 90 {*movsi_internal}
     (nil))
(jump_insn 1697 303 1698 5 (set (pc)
        (label_ref 1312)) sim2fitman_com_line.cpp:102 636 {jump}
     (nil)
 -> 1312)
;;  succ:       91 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1698 1697 1314)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 144 145 553 554
(code_label 1314 1698 306 6 49 "" [1 uses])
(note 306 1314 307 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 6 (set (reg:SI 0 ax [553])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:103 90 {*movsi_internal}
     (nil))
(insn 308 307 309 6 (set (reg:DI 0 ax [orig:141 D.6101 ] [141])
        (sign_extend:DI (reg:SI 0 ax [553]))) sim2fitman_com_line.cpp:103 142 {*extendsidi2_rex64}
     (nil))
(insn 309 308 310 6 (parallel [
            (set (reg:DI 1 dx [orig:142 D.6101 ] [142])
                (ashift:DI (reg:DI 0 ax [orig:141 D.6101 ] [141])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:103 497 {*ashldi3_1}
     (nil))
(insn 310 309 311 6 (set (reg/f:DI 0 ax [554])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:103 89 {*movdi_internal}
     (nil))
(insn 311 310 312 6 (parallel [
            (set (reg/f:DI 0 ax [orig:143 D.6103 ] [143])
                (plus:DI (reg/f:DI 0 ax [554])
                    (reg:DI 1 dx [orig:142 D.6101 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:103 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:142 D.6101 ] [142]))
        (nil)))
(insn 312 311 313 6 (set (reg/f:DI 0 ax [orig:144 D.6104 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [orig:143 D.6103 ] [143]) [0 *_97+0 S8 A64])) sim2fitman_com_line.cpp:103 89 {*movdi_internal}
     (nil))
(insn 313 312 314 6 (set (reg:QI 0 ax [orig:145 D.6105 ] [145])
        (mem:QI (reg/f:DI 0 ax [orig:144 D.6104 ] [144]) [0 *_98+0 S1 A8])) sim2fitman_com_line.cpp:103 93 {*movqi_internal}
     (nil))
(insn 314 313 315 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:145 D.6105 ] [145])
            (const_int 45 [0x2d]))) sim2fitman_com_line.cpp:103 5 {*cmpqi_1}
     (nil))
(jump_insn 315 314 316 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 342)
            (pc))) sim2fitman_com_line.cpp:103 596 {*jcc_1}
     (nil)
 -> 342)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 316 315 317 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 317 316 318 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_com_line.cpp:106 7 {*cmpsi_1}
     (nil))
(jump_insn 318 317 319 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 323)
            (pc))) sim2fitman_com_line.cpp:106 596 {*jcc_1}
     (nil)
 -> 323)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 319 318 320 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 320 319 1699 8 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -5 [0xfffffffffffffffb])) sim2fitman_com_line.cpp:108 90 {*movsi_internal}
     (nil))
(jump_insn 1699 320 1700 8 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:108 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1700 1699 323)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 417 418 419 420 421 555 556 557 558 559 560
(code_label 323 1700 324 9 6 "" [1 uses])
(note 324 323 325 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 325 324 326 9 (set (reg:SI 0 ax [555])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:111 90 {*movsi_internal}
     (nil))
(insn 326 325 327 9 (set (reg:DI 0 ax [orig:417 D.6101 ] [417])
        (sign_extend:DI (reg:SI 0 ax [555]))) sim2fitman_com_line.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 327 326 328 9 (parallel [
            (set (reg:DI 1 dx [orig:418 D.6101 ] [418])
                (ashift:DI (reg:DI 0 ax [orig:417 D.6101 ] [417])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 497 {*ashldi3_1}
     (nil))
(insn 328 327 329 9 (set (reg/f:DI 0 ax [556])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:111 89 {*movdi_internal}
     (nil))
(insn 329 328 330 9 (parallel [
            (set (reg/f:DI 0 ax [orig:419 D.6103 ] [419])
                (plus:DI (reg/f:DI 0 ax [556])
                    (reg:DI 1 dx [orig:418 D.6101 ] [418])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:418 D.6101 ] [418]))
        (nil)))
(insn 330 329 331 9 (set (reg/f:DI 0 ax [orig:420 D.6104 ] [420])
        (mem/f:DI (reg/f:DI 0 ax [orig:419 D.6103 ] [419]) [0 *_423+0 S8 A64])) sim2fitman_com_line.cpp:111 89 {*movdi_internal}
     (nil))
(insn 331 330 332 9 (parallel [
            (set (reg:DI 1 dx [557])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 221 {*adddi_1}
     (nil))
(insn 332 331 333 9 (set (reg:SI 2 cx [559])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])) sim2fitman_com_line.cpp:111 90 {*movsi_internal}
     (nil))
(insn 333 332 334 9 (set (reg:DI 2 cx [558])
        (sign_extend:DI (reg:SI 2 cx [559]))) sim2fitman_com_line.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 334 333 335 9 (parallel [
            (set (reg:DI 2 cx [560])
                (ashift:DI (reg:DI 2 cx [558])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 497 {*ashldi3_1}
     (nil))
(insn 335 334 336 9 (parallel [
            (set (reg/f:DI 1 dx [orig:421 D.6111 ] [421])
                (plus:DI (reg:DI 1 dx [557])
                    (reg:DI 2 cx [560])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 221 {*adddi_1}
     (nil))
(insn 336 335 337 9 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:420 D.6104 ] [420])) sim2fitman_com_line.cpp:111 89 {*movdi_internal}
     (nil))
(insn 337 336 338 9 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:421 D.6111 ] [421])) sim2fitman_com_line.cpp:111 89 {*movdi_internal}
     (nil))
(call_insn 338 337 339 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:111 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 339 338 1701 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:112 220 {*addsi_1}
     (nil))
(jump_insn 1701 339 1702 9 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1702 1701 342)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 146 147 148 149 150 561 562
(code_label 342 1702 343 10 5 "" [1 uses])
(note 343 342 344 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 344 343 345 10 (set (reg:SI 0 ax [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:117 90 {*movsi_internal}
     (nil))
(insn 345 344 346 10 (set (reg:DI 0 ax [orig:146 D.6101 ] [146])
        (sign_extend:DI (reg:SI 0 ax [561]))) sim2fitman_com_line.cpp:117 142 {*extendsidi2_rex64}
     (nil))
(insn 346 345 347 10 (parallel [
            (set (reg:DI 1 dx [orig:147 D.6101 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:146 D.6101 ] [146])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:117 497 {*ashldi3_1}
     (nil))
(insn 347 346 348 10 (set (reg/f:DI 0 ax [562])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:117 89 {*movdi_internal}
     (nil))
(insn 348 347 349 10 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.6103 ] [148])
                (plus:DI (reg/f:DI 0 ax [562])
                    (reg:DI 1 dx [orig:147 D.6101 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:117 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.6101 ] [147]))
        (nil)))
(insn 349 348 350 10 (set (reg/f:DI 0 ax [orig:149 D.6104 ] [149])
        (mem/f:DI (reg/f:DI 0 ax [orig:148 D.6103 ] [148]) [0 *_102+0 S8 A64])) sim2fitman_com_line.cpp:117 89 {*movdi_internal}
     (nil))
(insn 350 349 351 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b4b6e457b48 *.LC2>)) sim2fitman_com_line.cpp:117 89 {*movdi_internal}
     (nil))
(insn 351 350 352 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:149 D.6104 ] [149])) sim2fitman_com_line.cpp:117 89 {*movdi_internal}
     (nil))
(call_insn/i 352 351 353 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:117 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 353 352 354 10 (set (reg:SI 0 ax [orig:150 D.6100 ] [150])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:117 90 {*movsi_internal}
     (nil))
(insn 354 353 355 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:150 D.6100 ] [150])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:117 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 355 354 356 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 382)
            (pc))) sim2fitman_com_line.cpp:117 596 {*jcc_1}
     (nil)
 -> 382)
;;  succ:       13
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 151 152 153 154 155 563 564
(note 356 355 357 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 357 356 358 11 (set (reg:SI 0 ax [563])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:118 90 {*movsi_internal}
     (nil))
(insn 358 357 359 11 (set (reg:DI 0 ax [orig:151 D.6101 ] [151])
        (sign_extend:DI (reg:SI 0 ax [563]))) sim2fitman_com_line.cpp:118 142 {*extendsidi2_rex64}
     (nil))
(insn 359 358 360 11 (parallel [
            (set (reg:DI 1 dx [orig:152 D.6101 ] [152])
                (ashift:DI (reg:DI 0 ax [orig:151 D.6101 ] [151])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:118 497 {*ashldi3_1}
     (nil))
(insn 360 359 361 11 (set (reg/f:DI 0 ax [564])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 361 360 362 11 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.6103 ] [153])
                (plus:DI (reg/f:DI 0 ax [564])
                    (reg:DI 1 dx [orig:152 D.6101 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:118 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:152 D.6101 ] [152]))
        (nil)))
(insn 362 361 363 11 (set (reg/f:DI 0 ax [orig:154 D.6104 ] [154])
        (mem/f:DI (reg/f:DI 0 ax [orig:153 D.6103 ] [153]) [0 *_107+0 S8 A64])) sim2fitman_com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 363 362 364 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b4b6e457be0 *.LC3>)) sim2fitman_com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 364 363 365 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:154 D.6104 ] [154])) sim2fitman_com_line.cpp:118 89 {*movdi_internal}
     (nil))
(call_insn/i 365 364 366 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:118 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 366 365 367 11 (set (reg:SI 0 ax [orig:155 D.6100 ] [155])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:118 90 {*movsi_internal}
     (nil))
(insn 367 366 368 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:155 D.6100 ] [155])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:117 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 368 367 369 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 382)
            (pc))) sim2fitman_com_line.cpp:117 596 {*jcc_1}
     (nil)
 -> 382)
;;  succ:       13
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 156 157 158 159 160 565 566
(note 369 368 370 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 370 369 371 12 (set (reg:SI 0 ax [565])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:119 90 {*movsi_internal}
     (nil))
(insn 371 370 372 12 (set (reg:DI 0 ax [orig:156 D.6101 ] [156])
        (sign_extend:DI (reg:SI 0 ax [565]))) sim2fitman_com_line.cpp:119 142 {*extendsidi2_rex64}
     (nil))
(insn 372 371 373 12 (parallel [
            (set (reg:DI 1 dx [orig:157 D.6101 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 D.6101 ] [156])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:119 497 {*ashldi3_1}
     (nil))
(insn 373 372 374 12 (set (reg/f:DI 0 ax [566])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:119 89 {*movdi_internal}
     (nil))
(insn 374 373 375 12 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.6103 ] [158])
                (plus:DI (reg/f:DI 0 ax [566])
                    (reg:DI 1 dx [orig:157 D.6101 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:119 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:157 D.6101 ] [157]))
        (nil)))
(insn 375 374 376 12 (set (reg/f:DI 0 ax [orig:159 D.6104 ] [159])
        (mem/f:DI (reg/f:DI 0 ax [orig:158 D.6103 ] [158]) [0 *_112+0 S8 A64])) sim2fitman_com_line.cpp:119 89 {*movdi_internal}
     (nil))
(insn 376 375 377 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b4b6e457c78 *.LC4>)) sim2fitman_com_line.cpp:119 89 {*movdi_internal}
     (nil))
(insn 377 376 378 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:159 D.6104 ] [159])) sim2fitman_com_line.cpp:119 89 {*movdi_internal}
     (nil))
(call_insn/i 378 377 379 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:119 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 379 378 380 12 (set (reg:SI 0 ax [orig:160 D.6100 ] [160])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:119 90 {*movsi_internal}
     (nil))
(insn 380 379 381 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:160 D.6100 ] [160])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:118 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 381 380 382 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 731)
            (pc))) sim2fitman_com_line.cpp:118 596 {*jcc_1}
     (nil)
 -> 731)
;;  succ:       13 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 307 567
(code_label 382 381 383 13 9 "" [2 uses])
(note 383 382 384 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 384 383 385 13 (set (reg/f:DI 0 ax [567])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:121 89 {*movdi_internal}
     (nil))
(insn 385 384 386 13 (set (reg:QI 0 ax [orig:307 D.6106 ] [307])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [567])
                (const_int 72 [0x48])) [0 preprocess_34(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:121 93 {*movqi_internal}
     (nil))
(insn 386 385 387 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:307 D.6106 ] [307])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:121 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 387 386 388 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 392)
            (pc))) sim2fitman_com_line.cpp:121 596 {*jcc_1}
     (nil)
 -> 392)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 388 387 389 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 389 388 1703 14 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -7 [0xfffffffffffffff9])) sim2fitman_com_line.cpp:123 90 {*movsi_internal}
     (nil))
(jump_insn 1703 389 1704 14 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:123 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1704 1703 392)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 308 309 310 311 312 568 569 570
(code_label 392 1704 393 15 11 "" [1 uses])
(note 393 392 394 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 394 393 395 15 (set (reg/f:DI 0 ax [568])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 395 394 396 15 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [568])
                (const_int 72 [0x48])) [0 preprocess_34(D)->ecc_present+0 S1 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:126 93 {*movqi_internal}
     (nil))
(insn 396 395 397 15 (set (reg:SI 0 ax [569])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:128 90 {*movsi_internal}
     (nil))
(insn 397 396 398 15 (set (reg:DI 0 ax [orig:308 D.6101 ] [308])
        (sign_extend:DI (reg:SI 0 ax [569]))) sim2fitman_com_line.cpp:128 142 {*extendsidi2_rex64}
     (nil))
(insn 398 397 399 15 (parallel [
            (set (reg:DI 1 dx [orig:309 D.6101 ] [309])
                (ashift:DI (reg:DI 0 ax [orig:308 D.6101 ] [308])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:128 497 {*ashldi3_1}
     (nil))
(insn 399 398 400 15 (set (reg/f:DI 0 ax [570])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:128 89 {*movdi_internal}
     (nil))
(insn 400 399 401 15 (parallel [
            (set (reg/f:DI 0 ax [orig:310 D.6103 ] [310])
                (plus:DI (reg/f:DI 0 ax [570])
                    (reg:DI 1 dx [orig:309 D.6101 ] [309])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:128 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:309 D.6101 ] [309]))
        (nil)))
(insn 401 400 402 15 (set (reg/f:DI 0 ax [orig:311 D.6104 ] [311])
        (mem/f:DI (reg/f:DI 0 ax [orig:310 D.6103 ] [310]) [0 *_303+0 S8 A64])) sim2fitman_com_line.cpp:128 89 {*movdi_internal}
     (nil))
(insn 402 401 403 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b4b6e457b48 *.LC2>)) sim2fitman_com_line.cpp:128 89 {*movdi_internal}
     (nil))
(insn 403 402 404 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:311 D.6104 ] [311])) sim2fitman_com_line.cpp:128 89 {*movdi_internal}
     (nil))
(call_insn/i 404 403 405 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:128 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 405 404 406 15 (set (reg:SI 0 ax [orig:312 D.6100 ] [312])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:128 90 {*movsi_internal}
     (nil))
(insn 406 405 407 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:312 D.6100 ] [312])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:128 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 407 406 408 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 439)
            (pc))) sim2fitman_com_line.cpp:128 596 {*jcc_1}
     (nil)
 -> 439)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 313 314 315 316 317 318 319 320 571 572 573 574 575 576 577 578 579
(note 408 407 409 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 409 408 410 16 (set (reg/f:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 410 409 411 16 (set (reg:SI 0 ax [orig:313 D.6100 ] [313])
        (mem:SI (reg/f:DI 0 ax [571]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:129 90 {*movsi_internal}
     (nil))
(insn 411 410 412 16 (set (reg:DI 1 dx [orig:314 D.6101 ] [314])
        (sign_extend:DI (reg:SI 0 ax [orig:313 D.6100 ] [313]))) sim2fitman_com_line.cpp:129 142 {*extendsidi2_rex64}
     (nil))
(insn 412 411 413 16 (set (reg:DI 0 ax [572])
        (reg:DI 1 dx [orig:314 D.6101 ] [314])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 413 412 414 16 (parallel [
            (set (reg:DI 0 ax [572])
                (ashift:DI (reg:DI 0 ax [572])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 497 {*ashldi3_1}
     (nil))
(insn 414 413 415 16 (parallel [
            (set (reg:DI 0 ax [572])
                (plus:DI (reg:DI 0 ax [572])
                    (reg:DI 1 dx [orig:314 D.6101 ] [314])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:314 D.6101 ] [314])
            (const_int 9 [0x9]))
        (nil)))
(insn 415 414 416 16 (parallel [
            (set (reg:DI 0 ax [572])
                (ashift:DI (reg:DI 0 ax [572])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 497 {*ashldi3_1}
     (nil))
(insn 416 415 417 16 (parallel [
            (set (reg:DI 0 ax [572])
                (plus:DI (reg:DI 0 ax [572])
                    (reg:DI 1 dx [orig:314 D.6101 ] [314])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:314 D.6101 ] [314])
            (const_int 19 [0x13]))
        (nil)))
(insn 417 416 418 16 (parallel [
            (set (reg:DI 0 ax [573])
                (ashift:DI (reg:DI 0 ax [572])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 497 {*ashldi3_1}
     (nil))
(insn 418 417 419 16 (set (reg:DI 0 ax [572])
        (reg:DI 0 ax [573])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 419 418 420 16 (set (reg:DI 1 dx [orig:315 D.6101 ] [315])
        (reg:DI 0 ax [572])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 420 419 421 16 (set (reg/f:DI 0 ax [574])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 421 420 422 16 (parallel [
            (set (reg/f:DI 0 ax [orig:316 D.6102 ] [316])
                (plus:DI (reg/f:DI 0 ax [574])
                    (reg:DI 1 dx [orig:315 D.6101 ] [315])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:315 D.6101 ] [315]))
        (nil)))
(insn 422 421 423 16 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:316 D.6102 ] [316])
                (const_int 12 [0xc])) [0 _309->pre_ecc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:129 90 {*movsi_internal}
     (nil))
(insn 423 422 424 16 (set (reg/f:DI 0 ax [575])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 424 423 425 16 (set (mem:SI (reg/f:DI 0 ax [575]) [0 *fid_92(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:130 90 {*movsi_internal}
     (nil))
(insn 425 424 426 16 (set (reg/f:DI 0 ax [576])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 426 425 427 16 (set (reg:SI 0 ax [orig:317 D.6100 ] [317])
        (mem:SI (reg/f:DI 0 ax [576]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:131 90 {*movsi_internal}
     (nil))
(insn 427 426 428 16 (set (reg:DI 1 dx [orig:318 D.6101 ] [318])
        (sign_extend:DI (reg:SI 0 ax [orig:317 D.6100 ] [317]))) sim2fitman_com_line.cpp:131 142 {*extendsidi2_rex64}
     (nil))
(insn 428 427 429 16 (set (reg:DI 0 ax [577])
        (reg:DI 1 dx [orig:318 D.6101 ] [318])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 429 428 430 16 (parallel [
            (set (reg:DI 0 ax [577])
                (ashift:DI (reg:DI 0 ax [577])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 497 {*ashldi3_1}
     (nil))
(insn 430 429 431 16 (parallel [
            (set (reg:DI 0 ax [577])
                (plus:DI (reg:DI 0 ax [577])
                    (reg:DI 1 dx [orig:318 D.6101 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:318 D.6101 ] [318])
            (const_int 9 [0x9]))
        (nil)))
(insn 431 430 432 16 (parallel [
            (set (reg:DI 0 ax [577])
                (ashift:DI (reg:DI 0 ax [577])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 497 {*ashldi3_1}
     (nil))
(insn 432 431 433 16 (parallel [
            (set (reg:DI 0 ax [577])
                (plus:DI (reg:DI 0 ax [577])
                    (reg:DI 1 dx [orig:318 D.6101 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:318 D.6101 ] [318])
            (const_int 19 [0x13]))
        (nil)))
(insn 433 432 434 16 (parallel [
            (set (reg:DI 0 ax [578])
                (ashift:DI (reg:DI 0 ax [577])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 497 {*ashldi3_1}
     (nil))
(insn 434 433 435 16 (set (reg:DI 0 ax [577])
        (reg:DI 0 ax [578])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 435 434 436 16 (set (reg:DI 1 dx [orig:319 D.6101 ] [319])
        (reg:DI 0 ax [577])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 436 435 437 16 (set (reg/f:DI 0 ax [579])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 437 436 438 16 (parallel [
            (set (reg/f:DI 0 ax [orig:320 D.6102 ] [320])
                (plus:DI (reg/f:DI 0 ax [579])
                    (reg:DI 1 dx [orig:319 D.6101 ] [319])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:319 D.6101 ] [319]))
        (nil)))
(insn 438 437 439 16 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:320 D.6102 ] [320])
                (const_int 12 [0xc])) [0 _313->pre_ecc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:131 90 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;;              16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 321 322 323 324 325 580 581
(code_label 439 438 440 17 12 "" [1 uses])
(note 440 439 441 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 441 440 442 17 (set (reg:SI 0 ax [580])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:134 90 {*movsi_internal}
     (nil))
(insn 442 441 443 17 (set (reg:DI 0 ax [orig:321 D.6101 ] [321])
        (sign_extend:DI (reg:SI 0 ax [580]))) sim2fitman_com_line.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 443 442 444 17 (parallel [
            (set (reg:DI 1 dx [orig:322 D.6101 ] [322])
                (ashift:DI (reg:DI 0 ax [orig:321 D.6101 ] [321])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:134 497 {*ashldi3_1}
     (nil))
(insn 444 443 445 17 (set (reg/f:DI 0 ax [581])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:134 89 {*movdi_internal}
     (nil))
(insn 445 444 446 17 (parallel [
            (set (reg/f:DI 0 ax [orig:323 D.6103 ] [323])
                (plus:DI (reg/f:DI 0 ax [581])
                    (reg:DI 1 dx [orig:322 D.6101 ] [322])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:134 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:322 D.6101 ] [322]))
        (nil)))
(insn 446 445 447 17 (set (reg/f:DI 0 ax [orig:324 D.6104 ] [324])
        (mem/f:DI (reg/f:DI 0 ax [orig:323 D.6103 ] [323]) [0 *_316+0 S8 A64])) sim2fitman_com_line.cpp:134 89 {*movdi_internal}
     (nil))
(insn 447 446 448 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b4b6e457be0 *.LC3>)) sim2fitman_com_line.cpp:134 89 {*movdi_internal}
     (nil))
(insn 448 447 449 17 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:324 D.6104 ] [324])) sim2fitman_com_line.cpp:134 89 {*movdi_internal}
     (nil))
(call_insn/i 449 448 450 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:134 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 450 449 451 17 (set (reg:SI 0 ax [orig:325 D.6100 ] [325])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:134 90 {*movsi_internal}
     (nil))
(insn 451 450 452 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:325 D.6100 ] [325])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:134 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 452 451 453 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 552)
            (pc))) sim2fitman_com_line.cpp:134 596 {*jcc_1}
     (nil)
 -> 552)
;;  succ:       18 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 326 327 328 329 330 331 332 333 334 582 583 584 585 586 587
(note 453 452 454 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 454 453 455 18 (set (reg/f:DI 0 ax [582])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 455 454 456 18 (set (reg:SI 0 ax [orig:326 D.6100 ] [326])
        (mem:SI (reg/f:DI 0 ax [582]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:135 90 {*movsi_internal}
     (nil))
(insn 456 455 457 18 (set (reg:DI 1 dx [orig:327 D.6101 ] [327])
        (sign_extend:DI (reg:SI 0 ax [orig:326 D.6100 ] [326]))) sim2fitman_com_line.cpp:135 142 {*extendsidi2_rex64}
     (nil))
(insn 457 456 458 18 (set (reg:DI 0 ax [583])
        (reg:DI 1 dx [orig:327 D.6101 ] [327])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 458 457 459 18 (parallel [
            (set (reg:DI 0 ax [583])
                (ashift:DI (reg:DI 0 ax [583])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 497 {*ashldi3_1}
     (nil))
(insn 459 458 460 18 (parallel [
            (set (reg:DI 0 ax [583])
                (plus:DI (reg:DI 0 ax [583])
                    (reg:DI 1 dx [orig:327 D.6101 ] [327])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:327 D.6101 ] [327])
            (const_int 9 [0x9]))
        (nil)))
(insn 460 459 461 18 (parallel [
            (set (reg:DI 0 ax [583])
                (ashift:DI (reg:DI 0 ax [583])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 497 {*ashldi3_1}
     (nil))
(insn 461 460 462 18 (parallel [
            (set (reg:DI 0 ax [583])
                (plus:DI (reg:DI 0 ax [583])
                    (reg:DI 1 dx [orig:327 D.6101 ] [327])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:327 D.6101 ] [327])
            (const_int 19 [0x13]))
        (nil)))
(insn 462 461 463 18 (parallel [
            (set (reg:DI 0 ax [584])
                (ashift:DI (reg:DI 0 ax [583])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 497 {*ashldi3_1}
     (nil))
(insn 463 462 464 18 (set (reg:DI 0 ax [583])
        (reg:DI 0 ax [584])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 464 463 465 18 (set (reg:DI 1 dx [orig:328 D.6101 ] [328])
        (reg:DI 0 ax [583])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 465 464 466 18 (set (reg/f:DI 0 ax [585])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 466 465 467 18 (parallel [
            (set (reg/f:DI 0 ax [orig:329 D.6102 ] [329])
                (plus:DI (reg/f:DI 0 ax [585])
                    (reg:DI 1 dx [orig:328 D.6101 ] [328])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:328 D.6101 ] [328]))
        (nil)))
(insn 467 466 468 18 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:329 D.6102 ] [329])
                (const_int 36 [0x24])) [0 _322->pre_quality+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:135 90 {*movsi_internal}
     (nil))
(insn 468 467 469 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:136 220 {*addsi_1}
     (nil))
(insn 469 468 470 18 (set (reg:SI 0 ax [586])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:137 90 {*movsi_internal}
     (nil))
(insn 470 469 471 18 (set (reg:DI 0 ax [orig:330 D.6101 ] [330])
        (sign_extend:DI (reg:SI 0 ax [586]))) sim2fitman_com_line.cpp:137 142 {*extendsidi2_rex64}
     (nil))
(insn 471 470 472 18 (parallel [
            (set (reg:DI 1 dx [orig:331 D.6101 ] [331])
                (ashift:DI (reg:DI 0 ax [orig:330 D.6101 ] [330])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:137 497 {*ashldi3_1}
     (nil))
(insn 472 471 473 18 (set (reg/f:DI 0 ax [587])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:137 89 {*movdi_internal}
     (nil))
(insn 473 472 474 18 (parallel [
            (set (reg/f:DI 0 ax [orig:332 D.6103 ] [332])
                (plus:DI (reg/f:DI 0 ax [587])
                    (reg:DI 1 dx [orig:331 D.6101 ] [331])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:137 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:331 D.6101 ] [331]))
        (nil)))
(insn 474 473 475 18 (set (reg/f:DI 0 ax [orig:333 D.6104 ] [333])
        (mem/f:DI (reg/f:DI 0 ax [orig:332 D.6103 ] [332]) [0 *_326+0 S8 A64])) sim2fitman_com_line.cpp:137 89 {*movdi_internal}
     (nil))
(insn 475 474 476 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:333 D.6104 ] [333])) sim2fitman_com_line.cpp:137 89 {*movdi_internal}
     (nil))
(call_insn 476 475 477 18 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x2b4b6e3ef000 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:137 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 477 476 478 18 (set (reg:QI 0 ax [orig:334 D.6106 ] [334])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:137 93 {*movqi_internal}
     (nil))
(insn 478 477 479 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:334 D.6106 ] [334])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:137 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 479 478 480 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 547)
            (pc))) sim2fitman_com_line.cpp:137 596 {*jcc_1}
     (nil)
 -> 547)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604
(note 480 479 481 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 481 480 482 19 (set (reg/f:DI 0 ax [588])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 482 481 483 19 (set (reg:SI 0 ax [orig:335 D.6100 ] [335])
        (mem:SI (reg/f:DI 0 ax [588]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:138 90 {*movsi_internal}
     (nil))
(insn 483 482 484 19 (set (reg:DI 1 dx [orig:336 D.6101 ] [336])
        (sign_extend:DI (reg:SI 0 ax [orig:335 D.6100 ] [335]))) sim2fitman_com_line.cpp:138 142 {*extendsidi2_rex64}
     (nil))
(insn 484 483 485 19 (set (reg:DI 0 ax [589])
        (reg:DI 1 dx [orig:336 D.6101 ] [336])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 485 484 486 19 (parallel [
            (set (reg:DI 0 ax [589])
                (ashift:DI (reg:DI 0 ax [589])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 497 {*ashldi3_1}
     (nil))
(insn 486 485 487 19 (parallel [
            (set (reg:DI 0 ax [589])
                (plus:DI (reg:DI 0 ax [589])
                    (reg:DI 1 dx [orig:336 D.6101 ] [336])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:336 D.6101 ] [336])
            (const_int 9 [0x9]))
        (nil)))
(insn 487 486 488 19 (parallel [
            (set (reg:DI 0 ax [589])
                (ashift:DI (reg:DI 0 ax [589])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 497 {*ashldi3_1}
     (nil))
(insn 488 487 489 19 (parallel [
            (set (reg:DI 0 ax [589])
                (plus:DI (reg:DI 0 ax [589])
                    (reg:DI 1 dx [orig:336 D.6101 ] [336])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:336 D.6101 ] [336])
            (const_int 19 [0x13]))
        (nil)))
(insn 489 488 490 19 (parallel [
            (set (reg:DI 0 ax [590])
                (ashift:DI (reg:DI 0 ax [589])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 497 {*ashldi3_1}
     (nil))
(insn 490 489 491 19 (set (reg:DI 0 ax [589])
        (reg:DI 0 ax [590])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 491 490 492 19 (set (reg:DI 1 dx [orig:337 D.6101 ] [337])
        (reg:DI 0 ax [589])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 492 491 493 19 (set (reg/f:DI 0 ax [591])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 493 492 494 19 (parallel [
            (set (reg/f:DI 3 bx [orig:338 D.6102 ] [338])
                (plus:DI (reg:DI 1 dx [orig:337 D.6101 ] [337])
                    (reg/f:DI 0 ax [591])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:337 D.6101 ] [337]))
        (nil)))
(insn 494 493 495 19 (set (reg:SI 0 ax [592])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:138 90 {*movsi_internal}
     (nil))
(insn 495 494 496 19 (set (reg:DI 0 ax [orig:339 D.6101 ] [339])
        (sign_extend:DI (reg:SI 0 ax [592]))) sim2fitman_com_line.cpp:138 142 {*extendsidi2_rex64}
     (nil))
(insn 496 495 497 19 (parallel [
            (set (reg:DI 1 dx [orig:340 D.6101 ] [340])
                (ashift:DI (reg:DI 0 ax [orig:339 D.6101 ] [339])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 497 {*ashldi3_1}
     (nil))
(insn 497 496 498 19 (set (reg/f:DI 0 ax [593])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 498 497 499 19 (parallel [
            (set (reg/f:DI 0 ax [orig:341 D.6103 ] [341])
                (plus:DI (reg/f:DI 0 ax [593])
                    (reg:DI 1 dx [orig:340 D.6101 ] [340])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:340 D.6101 ] [340]))
        (nil)))
(insn 499 498 500 19 (set (reg/f:DI 0 ax [orig:342 D.6104 ] [342])
        (mem/f:DI (reg/f:DI 0 ax [orig:341 D.6103 ] [341]) [0 *_336+0 S8 A64])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 500 499 501 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:342 D.6104 ] [342])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(call_insn/i 501 500 503 19 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x2b4b6e36fc00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:138 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 503 501 1818 19 (set (reg:SF 22 xmm1 [orig:344 D.6110 ] [344])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:343 D.6109 ] [343]))) sim2fitman_com_line.cpp:138 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1818 503 504 19 (set (reg:SF 0 ax [orig:344 D.6110 ] [344])
        (reg:SF 22 xmm1 [orig:344 D.6110 ] [344])) sim2fitman_com_line.cpp:138 129 {*movsf_internal}
     (nil))
(insn 504 1818 505 19 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:338 D.6102 ] [338])
                (const_int 48 [0x30])) [0 _333->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [orig:344 D.6110 ] [344])) sim2fitman_com_line.cpp:138 129 {*movsf_internal}
     (nil))
(insn 505 504 506 19 (set (reg/f:DI 0 ax [594])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 506 505 507 19 (set (mem:SI (reg/f:DI 0 ax [594]) [0 *fid_92(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:139 90 {*movsi_internal}
     (nil))
(insn 507 506 508 19 (set (reg/f:DI 0 ax [595])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 508 507 509 19 (set (reg:SI 0 ax [orig:345 D.6100 ] [345])
        (mem:SI (reg/f:DI 0 ax [595]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:140 90 {*movsi_internal}
     (nil))
(insn 509 508 510 19 (set (reg:DI 1 dx [orig:346 D.6101 ] [346])
        (sign_extend:DI (reg:SI 0 ax [orig:345 D.6100 ] [345]))) sim2fitman_com_line.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 510 509 511 19 (set (reg:DI 0 ax [596])
        (reg:DI 1 dx [orig:346 D.6101 ] [346])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 511 510 512 19 (parallel [
            (set (reg:DI 0 ax [596])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 497 {*ashldi3_1}
     (nil))
(insn 512 511 513 19 (parallel [
            (set (reg:DI 0 ax [596])
                (plus:DI (reg:DI 0 ax [596])
                    (reg:DI 1 dx [orig:346 D.6101 ] [346])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:346 D.6101 ] [346])
            (const_int 9 [0x9]))
        (nil)))
(insn 513 512 514 19 (parallel [
            (set (reg:DI 0 ax [596])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 497 {*ashldi3_1}
     (nil))
(insn 514 513 515 19 (parallel [
            (set (reg:DI 0 ax [596])
                (plus:DI (reg:DI 0 ax [596])
                    (reg:DI 1 dx [orig:346 D.6101 ] [346])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:346 D.6101 ] [346])
            (const_int 19 [0x13]))
        (nil)))
(insn 515 514 516 19 (parallel [
            (set (reg:DI 0 ax [597])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 497 {*ashldi3_1}
     (nil))
(insn 516 515 517 19 (set (reg:DI 0 ax [596])
        (reg:DI 0 ax [597])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 517 516 518 19 (set (reg:DI 1 dx [orig:347 D.6101 ] [347])
        (reg:DI 0 ax [596])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 518 517 519 19 (set (reg/f:DI 0 ax [598])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 519 518 520 19 (parallel [
            (set (reg/f:DI 3 bx [orig:348 D.6102 ] [348])
                (plus:DI (reg:DI 1 dx [orig:347 D.6101 ] [347])
                    (reg/f:DI 0 ax [598])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:347 D.6101 ] [347]))
        (nil)))
(insn 520 519 521 19 (set (reg:SI 0 ax [599])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:140 90 {*movsi_internal}
     (nil))
(insn 521 520 522 19 (set (reg:DI 0 ax [orig:349 D.6101 ] [349])
        (sign_extend:DI (reg:SI 0 ax [599]))) sim2fitman_com_line.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 522 521 523 19 (parallel [
            (set (reg:DI 1 dx [orig:350 D.6101 ] [350])
                (ashift:DI (reg:DI 0 ax [orig:349 D.6101 ] [349])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 497 {*ashldi3_1}
     (nil))
(insn 523 522 524 19 (set (reg/f:DI 0 ax [600])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 524 523 525 19 (parallel [
            (set (reg/f:DI 0 ax [orig:351 D.6103 ] [351])
                (plus:DI (reg/f:DI 0 ax [600])
                    (reg:DI 1 dx [orig:350 D.6101 ] [350])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:350 D.6101 ] [350]))
        (nil)))
(insn 525 524 526 19 (set (reg/f:DI 0 ax [orig:352 D.6104 ] [352])
        (mem/f:DI (reg/f:DI 0 ax [orig:351 D.6103 ] [351]) [0 *_346+0 S8 A64])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 526 525 527 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:352 D.6104 ] [352])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(call_insn/i 527 526 529 19 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x2b4b6e36fc00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:140 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 529 527 1819 19 (set (reg:SF 23 xmm2 [orig:354 D.6110 ] [354])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:353 D.6109 ] [353]))) sim2fitman_com_line.cpp:140 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1819 529 530 19 (set (reg:SF 0 ax [orig:354 D.6110 ] [354])
        (reg:SF 23 xmm2 [orig:354 D.6110 ] [354])) sim2fitman_com_line.cpp:140 129 {*movsf_internal}
     (nil))
(insn 530 1819 531 19 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:348 D.6102 ] [348])
                (const_int 48 [0x30])) [0 _343->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [orig:354 D.6110 ] [354])) sim2fitman_com_line.cpp:140 129 {*movsf_internal}
     (nil))
(insn 531 530 532 19 (set (reg/f:DI 0 ax [601])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 532 531 533 19 (set (reg:SI 0 ax [orig:355 D.6100 ] [355])
        (mem:SI (reg/f:DI 0 ax [601]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:141 90 {*movsi_internal}
     (nil))
(insn 533 532 534 19 (set (reg:DI 1 dx [orig:356 D.6101 ] [356])
        (sign_extend:DI (reg:SI 0 ax [orig:355 D.6100 ] [355]))) sim2fitman_com_line.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 534 533 535 19 (set (reg:DI 0 ax [602])
        (reg:DI 1 dx [orig:356 D.6101 ] [356])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 535 534 536 19 (parallel [
            (set (reg:DI 0 ax [602])
                (ashift:DI (reg:DI 0 ax [602])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 497 {*ashldi3_1}
     (nil))
(insn 536 535 537 19 (parallel [
            (set (reg:DI 0 ax [602])
                (plus:DI (reg:DI 0 ax [602])
                    (reg:DI 1 dx [orig:356 D.6101 ] [356])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:356 D.6101 ] [356])
            (const_int 9 [0x9]))
        (nil)))
(insn 537 536 538 19 (parallel [
            (set (reg:DI 0 ax [602])
                (ashift:DI (reg:DI 0 ax [602])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 497 {*ashldi3_1}
     (nil))
(insn 538 537 539 19 (parallel [
            (set (reg:DI 0 ax [602])
                (plus:DI (reg:DI 0 ax [602])
                    (reg:DI 1 dx [orig:356 D.6101 ] [356])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:356 D.6101 ] [356])
            (const_int 19 [0x13]))
        (nil)))
(insn 539 538 540 19 (parallel [
            (set (reg:DI 0 ax [603])
                (ashift:DI (reg:DI 0 ax [602])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 497 {*ashldi3_1}
     (nil))
(insn 540 539 541 19 (set (reg:DI 0 ax [602])
        (reg:DI 0 ax [603])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 541 540 542 19 (set (reg:DI 1 dx [orig:357 D.6101 ] [357])
        (reg:DI 0 ax [602])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 542 541 543 19 (set (reg/f:DI 0 ax [604])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 543 542 544 19 (parallel [
            (set (reg/f:DI 0 ax [orig:358 D.6102 ] [358])
                (plus:DI (reg/f:DI 0 ax [604])
                    (reg:DI 1 dx [orig:357 D.6101 ] [357])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:357 D.6101 ] [357]))
        (nil)))
(insn 544 543 1705 19 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:358 D.6102 ] [358])
                (const_int 36 [0x24])) [0 _353->pre_quality+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:141 90 {*movsi_internal}
     (nil))
(jump_insn 1705 544 1706 19 (set (pc)
        (label_ref 552)) 636 {jump}
     (nil)
 -> 552)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1706 1705 547)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 547 1706 548 20 14 "" [1 uses])
(note 548 547 549 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 549 548 1707 20 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -8 [0xfffffffffffffff8])) sim2fitman_com_line.cpp:143 90 {*movsi_internal}
     (nil))
(jump_insn 1707 549 1708 20 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:143 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1708 1707 552)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 359 360 361 362 363 605 606
(code_label 552 1708 553 21 13 "" [2 uses])
(note 553 552 554 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 554 553 555 21 (set (reg:SI 0 ax [605])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:148 90 {*movsi_internal}
     (nil))
(insn 555 554 556 21 (set (reg:DI 0 ax [orig:359 D.6101 ] [359])
        (sign_extend:DI (reg:SI 0 ax [605]))) sim2fitman_com_line.cpp:148 142 {*extendsidi2_rex64}
     (nil))
(insn 556 555 557 21 (parallel [
            (set (reg:DI 1 dx [orig:360 D.6101 ] [360])
                (ashift:DI (reg:DI 0 ax [orig:359 D.6101 ] [359])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:148 497 {*ashldi3_1}
     (nil))
(insn 557 556 558 21 (set (reg/f:DI 0 ax [606])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:148 89 {*movdi_internal}
     (nil))
(insn 558 557 559 21 (parallel [
            (set (reg/f:DI 0 ax [orig:361 D.6103 ] [361])
                (plus:DI (reg/f:DI 0 ax [606])
                    (reg:DI 1 dx [orig:360 D.6101 ] [360])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:148 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:360 D.6101 ] [360]))
        (nil)))
(insn 559 558 560 21 (set (reg/f:DI 0 ax [orig:362 D.6104 ] [362])
        (mem/f:DI (reg/f:DI 0 ax [orig:361 D.6103 ] [361]) [0 *_357+0 S8 A64])) sim2fitman_com_line.cpp:148 89 {*movdi_internal}
     (nil))
(insn 560 559 561 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b4b6e457c78 *.LC4>)) sim2fitman_com_line.cpp:148 89 {*movdi_internal}
     (nil))
(insn 561 560 562 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:362 D.6104 ] [362])) sim2fitman_com_line.cpp:148 89 {*movdi_internal}
     (nil))
(call_insn/i 562 561 563 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:148 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 563 562 564 21 (set (reg:SI 0 ax [orig:363 D.6100 ] [363])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:148 90 {*movsi_internal}
     (nil))
(insn 564 563 565 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:363 D.6100 ] [363])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:148 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 565 564 566 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 727)
            (pc))) sim2fitman_com_line.cpp:148 596 {*jcc_1}
     (nil)
 -> 727)
;;  succ:       22 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 364 365 366 367 368 369 370 371 372 607 608 609 610 611 612
(note 566 565 567 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 567 566 568 22 (set (reg/f:DI 0 ax [607])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 568 567 569 22 (set (reg:SI 0 ax [orig:364 D.6100 ] [364])
        (mem:SI (reg/f:DI 0 ax [607]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:149 90 {*movsi_internal}
     (nil))
(insn 569 568 570 22 (set (reg:DI 1 dx [orig:365 D.6101 ] [365])
        (sign_extend:DI (reg:SI 0 ax [orig:364 D.6100 ] [364]))) sim2fitman_com_line.cpp:149 142 {*extendsidi2_rex64}
     (nil))
(insn 570 569 571 22 (set (reg:DI 0 ax [608])
        (reg:DI 1 dx [orig:365 D.6101 ] [365])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 571 570 572 22 (parallel [
            (set (reg:DI 0 ax [608])
                (ashift:DI (reg:DI 0 ax [608])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 497 {*ashldi3_1}
     (nil))
(insn 572 571 573 22 (parallel [
            (set (reg:DI 0 ax [608])
                (plus:DI (reg:DI 0 ax [608])
                    (reg:DI 1 dx [orig:365 D.6101 ] [365])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:365 D.6101 ] [365])
            (const_int 9 [0x9]))
        (nil)))
(insn 573 572 574 22 (parallel [
            (set (reg:DI 0 ax [608])
                (ashift:DI (reg:DI 0 ax [608])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 497 {*ashldi3_1}
     (nil))
(insn 574 573 575 22 (parallel [
            (set (reg:DI 0 ax [608])
                (plus:DI (reg:DI 0 ax [608])
                    (reg:DI 1 dx [orig:365 D.6101 ] [365])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:365 D.6101 ] [365])
            (const_int 19 [0x13]))
        (nil)))
(insn 575 574 576 22 (parallel [
            (set (reg:DI 0 ax [609])
                (ashift:DI (reg:DI 0 ax [608])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 497 {*ashldi3_1}
     (nil))
(insn 576 575 577 22 (set (reg:DI 0 ax [608])
        (reg:DI 0 ax [609])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 577 576 578 22 (set (reg:DI 1 dx [orig:366 D.6101 ] [366])
        (reg:DI 0 ax [608])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 578 577 579 22 (set (reg/f:DI 0 ax [610])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 579 578 580 22 (parallel [
            (set (reg/f:DI 0 ax [orig:367 D.6102 ] [367])
                (plus:DI (reg/f:DI 0 ax [610])
                    (reg:DI 1 dx [orig:366 D.6101 ] [366])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:366 D.6101 ] [366]))
        (nil)))
(insn 580 579 581 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:367 D.6102 ] [367])
                (const_int 40 [0x28])) [0 _363->pre_quecc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:149 90 {*movsi_internal}
     (nil))
(insn 581 580 582 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:150 220 {*addsi_1}
     (nil))
(insn 582 581 583 22 (set (reg:SI 0 ax [611])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:151 90 {*movsi_internal}
     (nil))
(insn 583 582 584 22 (set (reg:DI 0 ax [orig:368 D.6101 ] [368])
        (sign_extend:DI (reg:SI 0 ax [611]))) sim2fitman_com_line.cpp:151 142 {*extendsidi2_rex64}
     (nil))
(insn 584 583 585 22 (parallel [
            (set (reg:DI 1 dx [orig:369 D.6101 ] [369])
                (ashift:DI (reg:DI 0 ax [orig:368 D.6101 ] [368])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:151 497 {*ashldi3_1}
     (nil))
(insn 585 584 586 22 (set (reg/f:DI 0 ax [612])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 586 585 587 22 (parallel [
            (set (reg/f:DI 0 ax [orig:370 D.6103 ] [370])
                (plus:DI (reg/f:DI 0 ax [612])
                    (reg:DI 1 dx [orig:369 D.6101 ] [369])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:151 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:369 D.6101 ] [369]))
        (nil)))
(insn 587 586 588 22 (set (reg/f:DI 0 ax [orig:371 D.6104 ] [371])
        (mem/f:DI (reg/f:DI 0 ax [orig:370 D.6103 ] [370]) [0 *_367+0 S8 A64])) sim2fitman_com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 588 587 589 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:371 D.6104 ] [371])) sim2fitman_com_line.cpp:151 89 {*movdi_internal}
     (nil))
(call_insn 589 588 590 22 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x2b4b6e3ef000 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:151 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 590 589 591 22 (set (reg:QI 0 ax [orig:372 D.6106 ] [372])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:151 93 {*movqi_internal}
     (nil))
(insn 591 590 592 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:372 D.6106 ] [372])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:151 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 592 591 593 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 620)
            (pc))) sim2fitman_com_line.cpp:151 596 {*jcc_1}
     (nil)
 -> 620)
;;  succ:       23 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 613 614 615 616 617 618 619 620
(note 593 592 594 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 594 593 595 23 (set (reg/f:DI 0 ax [613])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 595 594 596 23 (set (reg:SI 0 ax [orig:373 D.6100 ] [373])
        (mem:SI (reg/f:DI 0 ax [613]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:152 90 {*movsi_internal}
     (nil))
(insn 596 595 597 23 (set (reg:DI 1 dx [orig:374 D.6101 ] [374])
        (sign_extend:DI (reg:SI 0 ax [orig:373 D.6100 ] [373]))) sim2fitman_com_line.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 597 596 598 23 (set (reg:DI 0 ax [614])
        (reg:DI 1 dx [orig:374 D.6101 ] [374])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 598 597 599 23 (parallel [
            (set (reg:DI 0 ax [614])
                (ashift:DI (reg:DI 0 ax [614])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 497 {*ashldi3_1}
     (nil))
(insn 599 598 600 23 (parallel [
            (set (reg:DI 0 ax [614])
                (plus:DI (reg:DI 0 ax [614])
                    (reg:DI 1 dx [orig:374 D.6101 ] [374])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:374 D.6101 ] [374])
            (const_int 9 [0x9]))
        (nil)))
(insn 600 599 601 23 (parallel [
            (set (reg:DI 0 ax [614])
                (ashift:DI (reg:DI 0 ax [614])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 497 {*ashldi3_1}
     (nil))
(insn 601 600 602 23 (parallel [
            (set (reg:DI 0 ax [614])
                (plus:DI (reg:DI 0 ax [614])
                    (reg:DI 1 dx [orig:374 D.6101 ] [374])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:374 D.6101 ] [374])
            (const_int 19 [0x13]))
        (nil)))
(insn 602 601 603 23 (parallel [
            (set (reg:DI 0 ax [615])
                (ashift:DI (reg:DI 0 ax [614])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 497 {*ashldi3_1}
     (nil))
(insn 603 602 604 23 (set (reg:DI 0 ax [614])
        (reg:DI 0 ax [615])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 604 603 605 23 (set (reg:DI 1 dx [orig:375 D.6101 ] [375])
        (reg:DI 0 ax [614])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 605 604 606 23 (set (reg/f:DI 0 ax [616])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 606 605 607 23 (parallel [
            (set (reg/f:DI 3 bx [orig:376 D.6102 ] [376])
                (plus:DI (reg:DI 1 dx [orig:375 D.6101 ] [375])
                    (reg/f:DI 0 ax [616])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:375 D.6101 ] [375]))
        (nil)))
(insn 607 606 608 23 (set (reg:SI 0 ax [617])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:152 90 {*movsi_internal}
     (nil))
(insn 608 607 609 23 (set (reg:DI 0 ax [orig:377 D.6101 ] [377])
        (sign_extend:DI (reg:SI 0 ax [617]))) sim2fitman_com_line.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 609 608 610 23 (parallel [
            (set (reg:DI 1 dx [orig:378 D.6101 ] [378])
                (ashift:DI (reg:DI 0 ax [orig:377 D.6101 ] [377])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 497 {*ashldi3_1}
     (nil))
(insn 610 609 611 23 (set (reg/f:DI 0 ax [618])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 611 610 612 23 (parallel [
            (set (reg/f:DI 0 ax [orig:379 D.6103 ] [379])
                (plus:DI (reg/f:DI 0 ax [618])
                    (reg:DI 1 dx [orig:378 D.6101 ] [378])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:378 D.6101 ] [378]))
        (nil)))
(insn 612 611 613 23 (set (reg/f:DI 0 ax [orig:380 D.6104 ] [380])
        (mem/f:DI (reg/f:DI 0 ax [orig:379 D.6103 ] [379]) [0 *_377+0 S8 A64])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 613 612 614 23 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:380 D.6104 ] [380])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn/i 614 613 615 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x2b4b6e36fd00 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:152 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 615 614 616 23 (set (reg:SI 0 ax [orig:381 D.6100 ] [381])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:152 90 {*movsi_internal}
     (nil))
(insn 616 615 617 23 (parallel [
            (set (reg:SI 0 ax [orig:382 D.6100 ] [382])
                (ashift:SI (reg:SI 0 ax [orig:381 D.6100 ] [381])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 496 {*ashlsi3_1}
     (nil))
(insn 617 616 627 23 (set (mem/j:SI (plus:DI (reg/f:DI 3 bx [orig:376 D.6102 ] [376])
                (const_int 44 [0x2c])) [0 _374->pre_quecc_points+0 S4 A32])
        (reg:SI 0 ax [orig:382 D.6100 ] [382])) sim2fitman_com_line.cpp:152 90 {*movsi_internal}
     (nil))
(insn 627 617 628 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:156 220 {*addsi_1}
     (nil))
(insn 628 627 629 23 (set (reg:SI 0 ax [619])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:157 90 {*movsi_internal}
     (nil))
(insn 629 628 630 23 (set (reg:DI 0 ax [orig:383 D.6101 ] [383])
        (sign_extend:DI (reg:SI 0 ax [619]))) sim2fitman_com_line.cpp:157 142 {*extendsidi2_rex64}
     (nil))
(insn 630 629 631 23 (parallel [
            (set (reg:DI 1 dx [orig:384 D.6101 ] [384])
                (ashift:DI (reg:DI 0 ax [orig:383 D.6101 ] [383])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:157 497 {*ashldi3_1}
     (nil))
(insn 631 630 632 23 (set (reg/f:DI 0 ax [620])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:157 89 {*movdi_internal}
     (nil))
(insn 632 631 633 23 (parallel [
            (set (reg/f:DI 0 ax [orig:385 D.6103 ] [385])
                (plus:DI (reg/f:DI 0 ax [620])
                    (reg:DI 1 dx [orig:384 D.6101 ] [384])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:157 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:384 D.6101 ] [384]))
        (nil)))
(insn 633 632 634 23 (set (reg/f:DI 0 ax [orig:386 D.6104 ] [386])
        (mem/f:DI (reg/f:DI 0 ax [orig:385 D.6103 ] [385]) [0 *_384+0 S8 A64])) sim2fitman_com_line.cpp:157 89 {*movdi_internal}
     (nil))
(insn 634 633 635 23 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:386 D.6104 ] [386])) sim2fitman_com_line.cpp:157 89 {*movdi_internal}
     (nil))
(call_insn 635 634 636 23 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x2b4b6e3ef000 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:157 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 636 635 637 23 (set (reg:QI 0 ax [orig:387 D.6106 ] [387])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:157 93 {*movqi_internal}
     (nil))
(insn 637 636 638 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:387 D.6106 ] [387])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:157 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 638 637 1709 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 722)
            (pc))) sim2fitman_com_line.cpp:157 596 {*jcc_1}
     (nil)
 -> 722)
;;  succ:       24 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1709 638 1711 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1711 1709 1712 24 (set (pc)
        (label_ref 1710)) 636 {jump}
     (nil)
 -> 1710)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1712 1711 620)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 620 1712 621 25 16 "" [1 uses])
(note 621 620 622 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 622 621 1713 25 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -8 [0xfffffffffffffff8])) sim2fitman_com_line.cpp:154 90 {*movsi_internal}
     (nil))
(jump_insn 1713 622 1714 25 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:154 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1714 1713 1710)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642
(code_label 1710 1714 639 26 76 "" [1 uses])
(note 639 1710 640 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 640 639 641 26 (set (reg/f:DI 0 ax [621])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 641 640 642 26 (set (reg:SI 0 ax [orig:388 D.6100 ] [388])
        (mem:SI (reg/f:DI 0 ax [621]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:158 90 {*movsi_internal}
     (nil))
(insn 642 641 643 26 (set (reg:DI 1 dx [orig:389 D.6101 ] [389])
        (sign_extend:DI (reg:SI 0 ax [orig:388 D.6100 ] [388]))) sim2fitman_com_line.cpp:158 142 {*extendsidi2_rex64}
     (nil))
(insn 643 642 644 26 (set (reg:DI 0 ax [622])
        (reg:DI 1 dx [orig:389 D.6101 ] [389])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 644 643 645 26 (parallel [
            (set (reg:DI 0 ax [622])
                (ashift:DI (reg:DI 0 ax [622])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 497 {*ashldi3_1}
     (nil))
(insn 645 644 646 26 (parallel [
            (set (reg:DI 0 ax [622])
                (plus:DI (reg:DI 0 ax [622])
                    (reg:DI 1 dx [orig:389 D.6101 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:389 D.6101 ] [389])
            (const_int 9 [0x9]))
        (nil)))
(insn 646 645 647 26 (parallel [
            (set (reg:DI 0 ax [622])
                (ashift:DI (reg:DI 0 ax [622])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 497 {*ashldi3_1}
     (nil))
(insn 647 646 648 26 (parallel [
            (set (reg:DI 0 ax [622])
                (plus:DI (reg:DI 0 ax [622])
                    (reg:DI 1 dx [orig:389 D.6101 ] [389])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:389 D.6101 ] [389])
            (const_int 19 [0x13]))
        (nil)))
(insn 648 647 649 26 (parallel [
            (set (reg:DI 0 ax [623])
                (ashift:DI (reg:DI 0 ax [622])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 497 {*ashldi3_1}
     (nil))
(insn 649 648 650 26 (set (reg:DI 0 ax [622])
        (reg:DI 0 ax [623])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 650 649 651 26 (set (reg:DI 1 dx [orig:390 D.6101 ] [390])
        (reg:DI 0 ax [622])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 651 650 652 26 (set (reg/f:DI 0 ax [624])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 652 651 653 26 (parallel [
            (set (reg/f:DI 3 bx [orig:391 D.6102 ] [391])
                (plus:DI (reg:DI 1 dx [orig:390 D.6101 ] [390])
                    (reg/f:DI 0 ax [624])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:390 D.6101 ] [390]))
        (nil)))
(insn 653 652 654 26 (set (reg:SI 0 ax [625])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:158 90 {*movsi_internal}
     (nil))
(insn 654 653 655 26 (set (reg:DI 0 ax [orig:392 D.6101 ] [392])
        (sign_extend:DI (reg:SI 0 ax [625]))) sim2fitman_com_line.cpp:158 142 {*extendsidi2_rex64}
     (nil))
(insn 655 654 656 26 (parallel [
            (set (reg:DI 1 dx [orig:393 D.6101 ] [393])
                (ashift:DI (reg:DI 0 ax [orig:392 D.6101 ] [392])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 497 {*ashldi3_1}
     (nil))
(insn 656 655 657 26 (set (reg/f:DI 0 ax [626])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 657 656 658 26 (parallel [
            (set (reg/f:DI 0 ax [orig:394 D.6103 ] [394])
                (plus:DI (reg/f:DI 0 ax [626])
                    (reg:DI 1 dx [orig:393 D.6101 ] [393])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:393 D.6101 ] [393]))
        (nil)))
(insn 658 657 659 26 (set (reg/f:DI 0 ax [orig:395 D.6104 ] [395])
        (mem/f:DI (reg/f:DI 0 ax [orig:394 D.6103 ] [394]) [0 *_394+0 S8 A64])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 659 658 660 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:395 D.6104 ] [395])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(call_insn/i 660 659 662 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x2b4b6e36fc00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:158 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 662 660 1820 26 (set (reg:SF 24 xmm3 [orig:397 D.6110 ] [397])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:396 D.6109 ] [396]))) sim2fitman_com_line.cpp:158 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1820 662 663 26 (set (reg:SF 0 ax [orig:397 D.6110 ] [397])
        (reg:SF 24 xmm3 [orig:397 D.6110 ] [397])) sim2fitman_com_line.cpp:158 129 {*movsf_internal}
     (nil))
(insn 663 1820 664 26 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:391 D.6102 ] [391])
                (const_int 48 [0x30])) [0 _391->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [orig:397 D.6110 ] [397])) sim2fitman_com_line.cpp:158 129 {*movsf_internal}
     (nil))
(insn 664 663 665 26 (set (reg/f:DI 0 ax [627])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:159 89 {*movdi_internal}
     (nil))
(insn 665 664 666 26 (set (mem:SI (reg/f:DI 0 ax [627]) [0 *fid_92(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:159 90 {*movsi_internal}
     (nil))
(insn 666 665 667 26 (set (reg/f:DI 0 ax [628])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 667 666 668 26 (set (reg:SI 0 ax [orig:398 D.6100 ] [398])
        (mem:SI (reg/f:DI 0 ax [628]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:160 90 {*movsi_internal}
     (nil))
(insn 668 667 669 26 (set (reg:DI 1 dx [orig:399 D.6101 ] [399])
        (sign_extend:DI (reg:SI 0 ax [orig:398 D.6100 ] [398]))) sim2fitman_com_line.cpp:160 142 {*extendsidi2_rex64}
     (nil))
(insn 669 668 670 26 (set (reg:DI 0 ax [629])
        (reg:DI 1 dx [orig:399 D.6101 ] [399])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 670 669 671 26 (parallel [
            (set (reg:DI 0 ax [629])
                (ashift:DI (reg:DI 0 ax [629])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 497 {*ashldi3_1}
     (nil))
(insn 671 670 672 26 (parallel [
            (set (reg:DI 0 ax [629])
                (plus:DI (reg:DI 0 ax [629])
                    (reg:DI 1 dx [orig:399 D.6101 ] [399])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:399 D.6101 ] [399])
            (const_int 9 [0x9]))
        (nil)))
(insn 672 671 673 26 (parallel [
            (set (reg:DI 0 ax [629])
                (ashift:DI (reg:DI 0 ax [629])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 497 {*ashldi3_1}
     (nil))
(insn 673 672 674 26 (parallel [
            (set (reg:DI 0 ax [629])
                (plus:DI (reg:DI 0 ax [629])
                    (reg:DI 1 dx [orig:399 D.6101 ] [399])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:399 D.6101 ] [399])
            (const_int 19 [0x13]))
        (nil)))
(insn 674 673 675 26 (parallel [
            (set (reg:DI 0 ax [630])
                (ashift:DI (reg:DI 0 ax [629])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 497 {*ashldi3_1}
     (nil))
(insn 675 674 676 26 (set (reg:DI 0 ax [629])
        (reg:DI 0 ax [630])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 676 675 677 26 (set (reg:DI 1 dx [orig:400 D.6101 ] [400])
        (reg:DI 0 ax [629])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 677 676 678 26 (set (reg/f:DI 0 ax [631])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 678 677 679 26 (parallel [
            (set (reg/f:DI 1 dx [orig:401 D.6102 ] [401])
                (plus:DI (reg:DI 1 dx [orig:400 D.6101 ] [400])
                    (reg/f:DI 0 ax [631])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:400 D.6101 ] [400]))
        (nil)))
(insn 679 678 680 26 (set (reg/f:DI 0 ax [632])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 680 679 681 26 (set (reg:SI 0 ax [orig:402 D.6100 ] [402])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [632])
                (const_int 44 [0x2c])) [0 preprocess_34(D)->pre_quecc_points+0 S4 A32])) sim2fitman_com_line.cpp:160 90 {*movsi_internal}
     (nil))
(insn 681 680 682 26 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:401 D.6102 ] [401])
                (const_int 44 [0x2c])) [0 _401->pre_quecc_points+0 S4 A32])
        (reg:SI 0 ax [orig:402 D.6100 ] [402])) sim2fitman_com_line.cpp:160 90 {*movsi_internal}
     (nil))
(insn 682 681 683 26 (set (reg/f:DI 0 ax [633])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 683 682 684 26 (set (reg:SI 0 ax [orig:403 D.6100 ] [403])
        (mem:SI (reg/f:DI 0 ax [633]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:161 90 {*movsi_internal}
     (nil))
(insn 684 683 685 26 (set (reg:DI 1 dx [orig:404 D.6101 ] [404])
        (sign_extend:DI (reg:SI 0 ax [orig:403 D.6100 ] [403]))) sim2fitman_com_line.cpp:161 142 {*extendsidi2_rex64}
     (nil))
(insn 685 684 686 26 (set (reg:DI 0 ax [634])
        (reg:DI 1 dx [orig:404 D.6101 ] [404])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 686 685 687 26 (parallel [
            (set (reg:DI 0 ax [634])
                (ashift:DI (reg:DI 0 ax [634])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 497 {*ashldi3_1}
     (nil))
(insn 687 686 688 26 (parallel [
            (set (reg:DI 0 ax [634])
                (plus:DI (reg:DI 0 ax [634])
                    (reg:DI 1 dx [orig:404 D.6101 ] [404])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:404 D.6101 ] [404])
            (const_int 9 [0x9]))
        (nil)))
(insn 688 687 689 26 (parallel [
            (set (reg:DI 0 ax [634])
                (ashift:DI (reg:DI 0 ax [634])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 497 {*ashldi3_1}
     (nil))
(insn 689 688 690 26 (parallel [
            (set (reg:DI 0 ax [634])
                (plus:DI (reg:DI 0 ax [634])
                    (reg:DI 1 dx [orig:404 D.6101 ] [404])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:404 D.6101 ] [404])
            (const_int 19 [0x13]))
        (nil)))
(insn 690 689 691 26 (parallel [
            (set (reg:DI 0 ax [635])
                (ashift:DI (reg:DI 0 ax [634])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 497 {*ashldi3_1}
     (nil))
(insn 691 690 692 26 (set (reg:DI 0 ax [634])
        (reg:DI 0 ax [635])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 692 691 693 26 (set (reg:DI 1 dx [orig:405 D.6101 ] [405])
        (reg:DI 0 ax [634])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 693 692 694 26 (set (reg/f:DI 0 ax [636])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 694 693 695 26 (parallel [
            (set (reg/f:DI 3 bx [orig:406 D.6102 ] [406])
                (plus:DI (reg:DI 1 dx [orig:405 D.6101 ] [405])
                    (reg/f:DI 0 ax [636])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:405 D.6101 ] [405]))
        (nil)))
(insn 695 694 696 26 (set (reg:SI 0 ax [637])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:161 90 {*movsi_internal}
     (nil))
(insn 696 695 697 26 (set (reg:DI 0 ax [orig:407 D.6101 ] [407])
        (sign_extend:DI (reg:SI 0 ax [637]))) sim2fitman_com_line.cpp:161 142 {*extendsidi2_rex64}
     (nil))
(insn 697 696 698 26 (parallel [
            (set (reg:DI 1 dx [orig:408 D.6101 ] [408])
                (ashift:DI (reg:DI 0 ax [orig:407 D.6101 ] [407])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 497 {*ashldi3_1}
     (nil))
(insn 698 697 699 26 (set (reg/f:DI 0 ax [638])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 699 698 700 26 (parallel [
            (set (reg/f:DI 0 ax [orig:409 D.6103 ] [409])
                (plus:DI (reg/f:DI 0 ax [638])
                    (reg:DI 1 dx [orig:408 D.6101 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:408 D.6101 ] [408]))
        (nil)))
(insn 700 699 701 26 (set (reg/f:DI 0 ax [orig:410 D.6104 ] [410])
        (mem/f:DI (reg/f:DI 0 ax [orig:409 D.6103 ] [409]) [0 *_409+0 S8 A64])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 701 700 702 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:410 D.6104 ] [410])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(call_insn/i 702 701 704 26 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x2b4b6e36fc00 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:161 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 704 702 1821 26 (set (reg:SF 25 xmm4 [orig:412 D.6110 ] [412])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:411 D.6109 ] [411]))) sim2fitman_com_line.cpp:161 157 {*truncdfsf_fast_sse}
     (nil))
(insn 1821 704 705 26 (set (reg:SF 0 ax [orig:412 D.6110 ] [412])
        (reg:SF 25 xmm4 [orig:412 D.6110 ] [412])) sim2fitman_com_line.cpp:161 129 {*movsf_internal}
     (nil))
(insn 705 1821 706 26 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:406 D.6102 ] [406])
                (const_int 48 [0x30])) [0 _406->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [orig:412 D.6110 ] [412])) sim2fitman_com_line.cpp:161 129 {*movsf_internal}
     (nil))
(insn 706 705 707 26 (set (reg/f:DI 0 ax [639])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 707 706 708 26 (set (reg:SI 0 ax [orig:413 D.6100 ] [413])
        (mem:SI (reg/f:DI 0 ax [639]) [0 *fid_92(D)+0 S4 A32])) sim2fitman_com_line.cpp:162 90 {*movsi_internal}
     (nil))
(insn 708 707 709 26 (set (reg:DI 1 dx [orig:414 D.6101 ] [414])
        (sign_extend:DI (reg:SI 0 ax [orig:413 D.6100 ] [413]))) sim2fitman_com_line.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 709 708 710 26 (set (reg:DI 0 ax [640])
        (reg:DI 1 dx [orig:414 D.6101 ] [414])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 710 709 711 26 (parallel [
            (set (reg:DI 0 ax [640])
                (ashift:DI (reg:DI 0 ax [640])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 497 {*ashldi3_1}
     (nil))
(insn 711 710 712 26 (parallel [
            (set (reg:DI 0 ax [640])
                (plus:DI (reg:DI 0 ax [640])
                    (reg:DI 1 dx [orig:414 D.6101 ] [414])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:414 D.6101 ] [414])
            (const_int 9 [0x9]))
        (nil)))
(insn 712 711 713 26 (parallel [
            (set (reg:DI 0 ax [640])
                (ashift:DI (reg:DI 0 ax [640])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 497 {*ashldi3_1}
     (nil))
(insn 713 712 714 26 (parallel [
            (set (reg:DI 0 ax [640])
                (plus:DI (reg:DI 0 ax [640])
                    (reg:DI 1 dx [orig:414 D.6101 ] [414])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:414 D.6101 ] [414])
            (const_int 19 [0x13]))
        (nil)))
(insn 714 713 715 26 (parallel [
            (set (reg:DI 0 ax [641])
                (ashift:DI (reg:DI 0 ax [640])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 497 {*ashldi3_1}
     (nil))
(insn 715 714 716 26 (set (reg:DI 0 ax [640])
        (reg:DI 0 ax [641])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 716 715 717 26 (set (reg:DI 1 dx [orig:415 D.6101 ] [415])
        (reg:DI 0 ax [640])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 717 716 718 26 (set (reg/f:DI 0 ax [642])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 718 717 719 26 (parallel [
            (set (reg/f:DI 0 ax [orig:416 D.6102 ] [416])
                (plus:DI (reg/f:DI 0 ax [642])
                    (reg:DI 1 dx [orig:415 D.6101 ] [415])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:415 D.6101 ] [415]))
        (nil)))
(insn 719 718 1715 26 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:416 D.6102 ] [416])
                (const_int 40 [0x28])) [0 _416->pre_quecc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:162 90 {*movsi_internal}
     (nil))
(jump_insn 1715 719 1716 26 (set (pc)
        (label_ref 727)) 636 {jump}
     (nil)
 -> 727)
;;  succ:       28 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1716 1715 722)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 722 1716 723 27 18 "" [1 uses])
(note 723 722 724 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 724 723 1717 27 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -8 [0xfffffffffffffff8])) sim2fitman_com_line.cpp:164 90 {*movsi_internal}
     (nil))
(jump_insn 1717 724 1718 27 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:164 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1718 1717 727)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 727 1718 728 28 15 "" [2 uses])
(note 728 727 1719 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1719 728 1720 28 (set (pc)
        (label_ref 1309)) sim2fitman_com_line.cpp:148 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1720 1719 731)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 161 162 163 164 165 643 644
(code_label 731 1720 732 29 10 "" [1 uses])
(note 732 731 733 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 733 732 734 29 (set (reg:SI 0 ax [643])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:172 90 {*movsi_internal}
     (nil))
(insn 734 733 735 29 (set (reg:DI 0 ax [orig:161 D.6101 ] [161])
        (sign_extend:DI (reg:SI 0 ax [643]))) sim2fitman_com_line.cpp:172 142 {*extendsidi2_rex64}
     (nil))
(insn 735 734 736 29 (parallel [
            (set (reg:DI 1 dx [orig:162 D.6101 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.6101 ] [161])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:172 497 {*ashldi3_1}
     (nil))
(insn 736 735 737 29 (set (reg/f:DI 0 ax [644])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:172 89 {*movdi_internal}
     (nil))
(insn 737 736 738 29 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.6103 ] [163])
                (plus:DI (reg/f:DI 0 ax [644])
                    (reg:DI 1 dx [orig:162 D.6101 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:172 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.6101 ] [162]))
        (nil)))
(insn 738 737 739 29 (set (reg/f:DI 0 ax [orig:164 D.6104 ] [164])
        (mem/f:DI (reg/f:DI 0 ax [orig:163 D.6103 ] [163]) [0 *_117+0 S8 A64])) sim2fitman_com_line.cpp:172 89 {*movdi_internal}
     (nil))
(insn 739 738 740 29 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b4b6e457d10 *.LC5>)) sim2fitman_com_line.cpp:172 89 {*movdi_internal}
     (nil))
(insn 740 739 741 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:164 D.6104 ] [164])) sim2fitman_com_line.cpp:172 89 {*movdi_internal}
     (nil))
(call_insn/i 741 740 742 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:172 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 742 741 743 29 (set (reg:SI 0 ax [orig:165 D.6100 ] [165])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:172 90 {*movsi_internal}
     (nil))
(insn 743 742 744 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:165 D.6100 ] [165])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:172 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 744 743 745 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 751)
            (pc))) sim2fitman_com_line.cpp:172 596 {*jcc_1}
     (nil)
 -> 751)
;;  succ:       30 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 745 744 746 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 746 745 747 30 (set (reg:SI 5 di)
        (const_int 0 [0])) sim2fitman_com_line.cpp:173 90 {*movsi_internal}
     (nil))
(call_insn 747 746 748 30 (call (mem:QI (symbol_ref:DI ("_Z9disp_helpi") [flags 0x41]  <function_decl 0x2b4b6e3ef800 disp_help>) [0 disp_help S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:173 642 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 748 747 749 30 (set (reg:SI 5 di)
        (const_int 0 [0])) sim2fitman_com_line.cpp:174 90 {*movsi_internal}
     (nil))
(call_insn 749 748 750 30 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4b6e111900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:174 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 750 749 751)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 166 167 168 169 170 645 646
(code_label 751 750 752 31 19 "" [1 uses])
(note 752 751 753 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 753 752 754 31 (set (reg:SI 0 ax [645])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:177 90 {*movsi_internal}
     (nil))
(insn 754 753 755 31 (set (reg:DI 0 ax [orig:166 D.6101 ] [166])
        (sign_extend:DI (reg:SI 0 ax [645]))) sim2fitman_com_line.cpp:177 142 {*extendsidi2_rex64}
     (nil))
(insn 755 754 756 31 (parallel [
            (set (reg:DI 1 dx [orig:167 D.6101 ] [167])
                (ashift:DI (reg:DI 0 ax [orig:166 D.6101 ] [166])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:177 497 {*ashldi3_1}
     (nil))
(insn 756 755 757 31 (set (reg/f:DI 0 ax [646])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:177 89 {*movdi_internal}
     (nil))
(insn 757 756 758 31 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.6103 ] [168])
                (plus:DI (reg/f:DI 0 ax [646])
                    (reg:DI 1 dx [orig:167 D.6101 ] [167])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:177 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:167 D.6101 ] [167]))
        (nil)))
(insn 758 757 759 31 (set (reg/f:DI 0 ax [orig:169 D.6104 ] [169])
        (mem/f:DI (reg/f:DI 0 ax [orig:168 D.6103 ] [168]) [0 *_122+0 S8 A64])) sim2fitman_com_line.cpp:177 89 {*movdi_internal}
     (nil))
(insn 759 758 760 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b4b6e457da8 *.LC6>)) sim2fitman_com_line.cpp:177 89 {*movdi_internal}
     (nil))
(insn 760 759 761 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:169 D.6104 ] [169])) sim2fitman_com_line.cpp:177 89 {*movdi_internal}
     (nil))
(call_insn/i 761 760 762 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:177 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 762 761 763 31 (set (reg:SI 0 ax [orig:170 D.6100 ] [170])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:177 90 {*movsi_internal}
     (nil))
(insn 763 762 764 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:170 D.6100 ] [170])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:177 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 764 763 765 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 771)
            (pc))) sim2fitman_com_line.cpp:177 596 {*jcc_1}
     (nil)
 -> 771)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 765 764 766 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 766 765 767 32 (set (reg:SI 5 di)
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:178 90 {*movsi_internal}
     (nil))
(call_insn 767 766 768 32 (call (mem:QI (symbol_ref:DI ("_Z9disp_helpi") [flags 0x41]  <function_decl 0x2b4b6e3ef800 disp_help>) [0 disp_help S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:178 642 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 768 767 769 32 (set (reg:SI 5 di)
        (const_int 0 [0])) sim2fitman_com_line.cpp:179 90 {*movsi_internal}
     (nil))
(call_insn 769 768 770 32 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4b6e111900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:179 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 770 769 771)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 171 172 173 174 175 647 648
(code_label 771 770 772 33 20 "" [1 uses])
(note 772 771 773 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 773 772 774 33 (set (reg:SI 0 ax [647])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:182 90 {*movsi_internal}
     (nil))
(insn 774 773 775 33 (set (reg:DI 0 ax [orig:171 D.6101 ] [171])
        (sign_extend:DI (reg:SI 0 ax [647]))) sim2fitman_com_line.cpp:182 142 {*extendsidi2_rex64}
     (nil))
(insn 775 774 776 33 (parallel [
            (set (reg:DI 1 dx [orig:172 D.6101 ] [172])
                (ashift:DI (reg:DI 0 ax [orig:171 D.6101 ] [171])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:182 497 {*ashldi3_1}
     (nil))
(insn 776 775 777 33 (set (reg/f:DI 0 ax [648])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:182 89 {*movdi_internal}
     (nil))
(insn 777 776 778 33 (parallel [
            (set (reg/f:DI 0 ax [orig:173 D.6103 ] [173])
                (plus:DI (reg/f:DI 0 ax [648])
                    (reg:DI 1 dx [orig:172 D.6101 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:182 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:172 D.6101 ] [172]))
        (nil)))
(insn 778 777 779 33 (set (reg/f:DI 0 ax [orig:174 D.6104 ] [174])
        (mem/f:DI (reg/f:DI 0 ax [orig:173 D.6103 ] [173]) [0 *_127+0 S8 A64])) sim2fitman_com_line.cpp:182 89 {*movdi_internal}
     (nil))
(insn 779 778 780 33 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b4b6e457e40 *.LC7>)) sim2fitman_com_line.cpp:182 89 {*movdi_internal}
     (nil))
(insn 780 779 781 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:174 D.6104 ] [174])) sim2fitman_com_line.cpp:182 89 {*movdi_internal}
     (nil))
(call_insn/i 781 780 782 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:182 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 782 781 783 33 (set (reg:SI 0 ax [orig:175 D.6100 ] [175])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:182 90 {*movsi_internal}
     (nil))
(insn 783 782 784 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:175 D.6100 ] [175])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:182 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 784 783 785 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 804)
            (pc))) sim2fitman_com_line.cpp:182 596 {*jcc_1}
     (nil)
 -> 804)
;;  succ:       34 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 176 649
(note 785 784 786 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 786 785 787 34 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:184 93 {*movqi_internal}
     (nil))
(insn 787 786 788 34 (set (reg/f:DI 0 ax [649])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:185 89 {*movdi_internal}
     (nil))
(insn 788 787 789 34 (set (reg:SI 0 ax [orig:176 D.6100 ] [176])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [649])
                (const_int 8 [0x8])) [0 preprocess_34(D)->scaleby+0 S4 A32])) sim2fitman_com_line.cpp:185 90 {*movsi_internal}
     (nil))
(insn 789 788 790 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:176 D.6100 ] [176])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:185 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 790 789 791 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 799)
            (pc))) sim2fitman_com_line.cpp:185 596 {*jcc_1}
     (nil)
 -> 799)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 650 651 652
(note 791 790 792 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 792 791 793 35 (set (reg/f:DI 0 ax [650])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:186 89 {*movdi_internal}
     (nil))
(insn 793 792 794 35 (set (mem/j:SI (reg/f:DI 0 ax [650]) [0 preprocess_34(D)->fid_scale+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:186 90 {*movsi_internal}
     (nil))
(insn 794 793 795 35 (set (reg/f:DI 1 dx [651])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:187 89 {*movdi_internal}
     (nil))
(insn 795 794 796 35 (set (reg:SF 0 ax [652])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:187 129 {*movsf_internal}
     (nil))
(insn 796 795 1721 35 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [651])
                (const_int 4 [0x4])) [0 preprocess_34(D)->scale_factor+0 S4 A32])
        (reg:SF 0 ax [652])) sim2fitman_com_line.cpp:187 129 {*movsf_internal}
     (nil))
(jump_insn 1721 796 1722 35 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1722 1721 799)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 799 1722 800 36 22 "" [1 uses])
(note 800 799 801 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 801 800 1723 36 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_com_line.cpp:190 90 {*movsi_internal}
     (nil))
(jump_insn 1723 801 1724 36 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:190 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1724 1723 804)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 177 178 179 180 181 653 654
(code_label 804 1724 805 37 21 "" [1 uses])
(note 805 804 806 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 806 805 807 37 (set (reg:SI 0 ax [653])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:194 90 {*movsi_internal}
     (nil))
(insn 807 806 808 37 (set (reg:DI 0 ax [orig:177 D.6101 ] [177])
        (sign_extend:DI (reg:SI 0 ax [653]))) sim2fitman_com_line.cpp:194 142 {*extendsidi2_rex64}
     (nil))
(insn 808 807 809 37 (parallel [
            (set (reg:DI 1 dx [orig:178 D.6101 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:177 D.6101 ] [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:194 497 {*ashldi3_1}
     (nil))
(insn 809 808 810 37 (set (reg/f:DI 0 ax [654])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 810 809 811 37 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.6103 ] [179])
                (plus:DI (reg/f:DI 0 ax [654])
                    (reg:DI 1 dx [orig:178 D.6101 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:194 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:178 D.6101 ] [178]))
        (nil)))
(insn 811 810 812 37 (set (reg/f:DI 0 ax [orig:180 D.6104 ] [180])
        (mem/f:DI (reg/f:DI 0 ax [orig:179 D.6103 ] [179]) [0 *_135+0 S8 A64])) sim2fitman_com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 812 811 813 37 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b4b6e457ed8 *.LC8>)) sim2fitman_com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 813 812 814 37 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:180 D.6104 ] [180])) sim2fitman_com_line.cpp:194 89 {*movdi_internal}
     (nil))
(call_insn/i 814 813 815 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:194 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 815 814 816 37 (set (reg:SI 0 ax [orig:181 D.6100 ] [181])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:194 90 {*movsi_internal}
     (nil))
(insn 816 815 817 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:181 D.6100 ] [181])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:194 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 817 816 818 37 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 841)
            (pc))) sim2fitman_com_line.cpp:194 596 {*jcc_1}
     (nil)
 -> 841)
;;  succ:       38 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 182 183 655
(note 818 817 819 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 819 818 820 38 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:196 93 {*movqi_internal}
     (nil))
(insn 820 819 821 38 (set (reg/f:DI 0 ax [655])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:197 89 {*movdi_internal}
     (nil))
(insn 821 820 822 38 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.6102 ] [182])
                (plus:DI (reg/f:DI 0 ax [655])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:197 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 822 821 823 38 (set (reg:SI 0 ax [orig:183 D.6100 ] [183])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:182 D.6102 ] [182])
                (const_int 8 [0x8])) [0 _139->scaleby+0 S4 A32])) sim2fitman_com_line.cpp:197 90 {*movsi_internal}
     (nil))
(insn 823 822 824 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:183 D.6100 ] [183])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:197 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 824 823 825 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 836)
            (pc))) sim2fitman_com_line.cpp:197 596 {*jcc_1}
     (nil)
 -> 836)
;;  succ:       39 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 184 185 656 657 658
(note 825 824 826 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 826 825 827 39 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -811 [0xfffffffffffffcd5])) [0 rscale_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:198 93 {*movqi_internal}
     (nil))
(insn 827 826 828 39 (set (reg/f:DI 0 ax [656])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 828 827 829 39 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.6102 ] [184])
                (plus:DI (reg/f:DI 0 ax [656])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:199 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 829 828 830 39 (set (mem/j:SI (reg/f:DI 0 ax [orig:184 D.6102 ] [184]) [0 _142->fid_scale+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:199 90 {*movsi_internal}
     (nil))
(insn 830 829 831 39 (set (reg/f:DI 0 ax [657])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 831 830 832 39 (parallel [
            (set (reg/f:DI 1 dx [orig:185 D.6102 ] [185])
                (plus:DI (reg/f:DI 0 ax [657])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:200 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 832 831 833 39 (set (reg:SF 0 ax [658])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:200 129 {*movsf_internal}
     (nil))
(insn 833 832 1725 39 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:185 D.6102 ] [185])
                (const_int 4 [0x4])) [0 _143->scale_factor+0 S4 A32])
        (reg:SF 0 ax [658])) sim2fitman_com_line.cpp:200 129 {*movsf_internal}
     (nil))
(jump_insn 1725 833 1726 39 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1726 1725 836)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 836 1726 837 40 24 "" [1 uses])
(note 837 836 838 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 838 837 1727 40 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_com_line.cpp:203 90 {*movsi_internal}
     (nil))
(jump_insn 1727 838 1728 40 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:203 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1728 1727 841)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 186 187 188 189 190 659 660
(code_label 841 1728 842 41 23 "" [1 uses])
(note 842 841 843 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 843 842 844 41 (set (reg:SI 0 ax [659])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:207 90 {*movsi_internal}
     (nil))
(insn 844 843 845 41 (set (reg:DI 0 ax [orig:186 D.6101 ] [186])
        (sign_extend:DI (reg:SI 0 ax [659]))) sim2fitman_com_line.cpp:207 142 {*extendsidi2_rex64}
     (nil))
(insn 845 844 846 41 (parallel [
            (set (reg:DI 1 dx [orig:187 D.6101 ] [187])
                (ashift:DI (reg:DI 0 ax [orig:186 D.6101 ] [186])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:207 497 {*ashldi3_1}
     (nil))
(insn 846 845 847 41 (set (reg/f:DI 0 ax [660])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:207 89 {*movdi_internal}
     (nil))
(insn 847 846 848 41 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.6103 ] [188])
                (plus:DI (reg/f:DI 0 ax [660])
                    (reg:DI 1 dx [orig:187 D.6101 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:207 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:187 D.6101 ] [187]))
        (nil)))
(insn 848 847 849 41 (set (reg/f:DI 0 ax [orig:189 D.6104 ] [189])
        (mem/f:DI (reg/f:DI 0 ax [orig:188 D.6103 ] [188]) [0 *_147+0 S8 A64])) sim2fitman_com_line.cpp:207 89 {*movdi_internal}
     (nil))
(insn 849 848 850 41 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b4b6e457000 *.LC9>)) sim2fitman_com_line.cpp:207 89 {*movdi_internal}
     (nil))
(insn 850 849 851 41 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:189 D.6104 ] [189])) sim2fitman_com_line.cpp:207 89 {*movdi_internal}
     (nil))
(call_insn/i 851 850 852 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:207 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 852 851 853 41 (set (reg:SI 0 ax [orig:190 D.6100 ] [190])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:207 90 {*movsi_internal}
     (nil))
(insn 853 852 854 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:190 D.6100 ] [190])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:207 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 854 853 855 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 902)
            (pc))) sim2fitman_com_line.cpp:207 596 {*jcc_1}
     (nil)
 -> 902)
;;  succ:       42 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 191 661
(note 855 854 856 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 856 855 857 42 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:209 93 {*movqi_internal}
     (nil))
(insn 857 856 858 42 (set (reg/f:DI 0 ax [661])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:210 89 {*movdi_internal}
     (nil))
(insn 858 857 859 42 (set (reg:SI 0 ax [orig:191 D.6100 ] [191])
        (mem/j:SI (reg/f:DI 0 ax [661]) [0 preprocess_34(D)->fid_scale+0 S4 A32])) sim2fitman_com_line.cpp:210 90 {*movsi_internal}
     (nil))
(insn 859 858 860 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:191 D.6100 ] [191])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:210 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 860 859 861 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 897)
            (pc))) sim2fitman_com_line.cpp:210 596 {*jcc_1}
     (nil)
 -> 897)
;;  succ:       43 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 192 193 194 195 196 662 663 664
(note 861 860 862 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 862 861 863 43 (set (reg/f:DI 0 ax [662])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 863 862 864 43 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [662])
                (const_int 8 [0x8])) [0 preprocess_34(D)->scaleby+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:211 90 {*movsi_internal}
     (nil))
(insn 864 863 865 43 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:212 220 {*addsi_1}
     (nil))
(insn 865 864 866 43 (set (reg:SI 0 ax [663])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:213 90 {*movsi_internal}
     (nil))
(insn 866 865 867 43 (set (reg:DI 0 ax [orig:192 D.6101 ] [192])
        (sign_extend:DI (reg:SI 0 ax [663]))) sim2fitman_com_line.cpp:213 142 {*extendsidi2_rex64}
     (nil))
(insn 867 866 868 43 (parallel [
            (set (reg:DI 1 dx [orig:193 D.6101 ] [193])
                (ashift:DI (reg:DI 0 ax [orig:192 D.6101 ] [192])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:213 497 {*ashldi3_1}
     (nil))
(insn 868 867 869 43 (set (reg/f:DI 0 ax [664])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 869 868 870 43 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.6103 ] [194])
                (plus:DI (reg/f:DI 0 ax [664])
                    (reg:DI 1 dx [orig:193 D.6101 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:213 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:193 D.6101 ] [193]))
        (nil)))
(insn 870 869 871 43 (set (reg/f:DI 0 ax [orig:195 D.6104 ] [195])
        (mem/f:DI (reg/f:DI 0 ax [orig:194 D.6103 ] [194]) [0 *_155+0 S8 A64])) sim2fitman_com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 871 870 872 43 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:195 D.6104 ] [195])) sim2fitman_com_line.cpp:213 89 {*movdi_internal}
     (nil))
(call_insn 872 871 873 43 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x2b4b6e3ef000 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:213 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 873 872 874 43 (set (reg:QI 0 ax [orig:196 D.6106 ] [196])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:213 93 {*movqi_internal}
     (nil))
(insn 874 873 875 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:196 D.6106 ] [196])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:213 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 875 874 876 43 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 892)
            (pc))) sim2fitman_com_line.cpp:213 596 {*jcc_1}
     (nil)
 -> 892)
;;  succ:       44 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 197 198 199 200 201 665 666 667
(note 876 875 877 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 877 876 878 44 (set (reg/f:DI 0 ax [665])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 878 877 879 44 (parallel [
            (set (reg/f:DI 1 dx [orig:197 D.6107 ] [197])
                (plus:DI (reg/f:DI 0 ax [665])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:214 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 879 878 880 44 (set (reg:SI 0 ax [666])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:214 90 {*movsi_internal}
     (nil))
(insn 880 879 881 44 (set (reg:DI 0 ax [orig:198 D.6101 ] [198])
        (sign_extend:DI (reg:SI 0 ax [666]))) sim2fitman_com_line.cpp:214 142 {*extendsidi2_rex64}
     (nil))
(insn 881 880 882 44 (parallel [
            (set (reg:DI 2 cx [orig:199 D.6101 ] [199])
                (ashift:DI (reg:DI 0 ax [orig:198 D.6101 ] [198])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:214 497 {*ashldi3_1}
     (nil))
(insn 882 881 883 44 (set (reg/f:DI 0 ax [667])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 883 882 884 44 (parallel [
            (set (reg/f:DI 0 ax [orig:200 D.6103 ] [200])
                (plus:DI (reg/f:DI 0 ax [667])
                    (reg:DI 2 cx [orig:199 D.6101 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:214 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:199 D.6101 ] [199]))
        (nil)))
(insn 884 883 886 44 (set (reg/f:DI 0 ax [orig:201 D.6104 ] [201])
        (mem/f:DI (reg/f:DI 0 ax [orig:200 D.6103 ] [200]) [0 *_162+0 S8 A64])) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 886 884 887 44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b4b6e457098 *.LC10>)) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 887 886 888 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:201 D.6104 ] [201])) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 888 887 889 44 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_com_line.cpp:214 93 {*movqi_internal}
     (nil))
(call_insn 889 888 1729 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b4b6e0f8900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:214 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1729 889 1730 44 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1730 1729 892)
;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 892 1730 893 45 27 "" [1 uses])
(note 893 892 894 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 894 893 1731 45 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -14 [0xfffffffffffffff2])) sim2fitman_com_line.cpp:216 90 {*movsi_internal}
     (nil))
(jump_insn 1731 894 1732 45 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:216 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1732 1731 897)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 897 1732 898 46 26 "" [1 uses])
(note 898 897 899 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 899 898 1733 46 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_com_line.cpp:220 90 {*movsi_internal}
     (nil))
(jump_insn 1733 899 1734 46 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:220 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1734 1733 902)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 202 203 204 205 206 668 669
(code_label 902 1734 903 47 25 "" [1 uses])
(note 903 902 904 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 904 903 905 47 (set (reg:SI 0 ax [668])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:224 90 {*movsi_internal}
     (nil))
(insn 905 904 906 47 (set (reg:DI 0 ax [orig:202 D.6101 ] [202])
        (sign_extend:DI (reg:SI 0 ax [668]))) sim2fitman_com_line.cpp:224 142 {*extendsidi2_rex64}
     (nil))
(insn 906 905 907 47 (parallel [
            (set (reg:DI 1 dx [orig:203 D.6101 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.6101 ] [202])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:224 497 {*ashldi3_1}
     (nil))
(insn 907 906 908 47 (set (reg/f:DI 0 ax [669])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:224 89 {*movdi_internal}
     (nil))
(insn 908 907 909 47 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.6103 ] [204])
                (plus:DI (reg/f:DI 0 ax [669])
                    (reg:DI 1 dx [orig:203 D.6101 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:224 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:203 D.6101 ] [203]))
        (nil)))
(insn 909 908 910 47 (set (reg/f:DI 0 ax [orig:205 D.6104 ] [205])
        (mem/f:DI (reg/f:DI 0 ax [orig:204 D.6103 ] [204]) [0 *_168+0 S8 A64])) sim2fitman_com_line.cpp:224 89 {*movdi_internal}
     (nil))
(insn 910 909 911 47 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b4b6e49e000 *.LC11>)) sim2fitman_com_line.cpp:224 89 {*movdi_internal}
     (nil))
(insn 911 910 912 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:205 D.6104 ] [205])) sim2fitman_com_line.cpp:224 89 {*movdi_internal}
     (nil))
(call_insn/i 912 911 913 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:224 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 913 912 914 47 (set (reg:SI 0 ax [orig:206 D.6100 ] [206])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:224 90 {*movsi_internal}
     (nil))
(insn 914 913 915 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:206 D.6100 ] [206])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:224 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 915 914 916 47 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 967)
            (pc))) sim2fitman_com_line.cpp:224 596 {*jcc_1}
     (nil)
 -> 967)
;;  succ:       48 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 208 670
(note 916 915 917 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 917 916 918 48 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:226 93 {*movqi_internal}
     (nil))
(insn 918 917 919 48 (set (reg/f:DI 0 ax [670])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:227 89 {*movdi_internal}
     (nil))
(insn 919 918 920 48 (parallel [
            (set (reg/f:DI 0 ax [orig:207 D.6102 ] [207])
                (plus:DI (reg/f:DI 0 ax [670])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:227 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 920 919 921 48 (set (reg:SI 0 ax [orig:208 D.6100 ] [208])
        (mem/j:SI (reg/f:DI 0 ax [orig:207 D.6102 ] [207]) [0 _172->fid_scale+0 S4 A32])) sim2fitman_com_line.cpp:227 90 {*movsi_internal}
     (nil))
(insn 921 920 922 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:208 D.6100 ] [208])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:227 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 922 921 923 48 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 962)
            (pc))) sim2fitman_com_line.cpp:227 596 {*jcc_1}
     (nil)
 -> 962)
;;  succ:       49 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 209 210 211 212 213 214 671 672 673
(note 923 922 924 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 924 923 925 49 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -811 [0xfffffffffffffcd5])) [0 rscale_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:228 93 {*movqi_internal}
     (nil))
(insn 925 924 926 49 (set (reg/f:DI 0 ax [671])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 926 925 927 49 (parallel [
            (set (reg/f:DI 0 ax [orig:209 D.6102 ] [209])
                (plus:DI (reg/f:DI 0 ax [671])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:229 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 927 926 928 49 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:209 D.6102 ] [209])
                (const_int 8 [0x8])) [0 _175->scaleby+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:229 90 {*movsi_internal}
     (nil))
(insn 928 927 929 49 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:230 220 {*addsi_1}
     (nil))
(insn 929 928 930 49 (set (reg:SI 0 ax [672])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:231 90 {*movsi_internal}
     (nil))
(insn 930 929 931 49 (set (reg:DI 0 ax [orig:210 D.6101 ] [210])
        (sign_extend:DI (reg:SI 0 ax [672]))) sim2fitman_com_line.cpp:231 142 {*extendsidi2_rex64}
     (nil))
(insn 931 930 932 49 (parallel [
            (set (reg:DI 1 dx [orig:211 D.6101 ] [211])
                (ashift:DI (reg:DI 0 ax [orig:210 D.6101 ] [210])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:231 497 {*ashldi3_1}
     (nil))
(insn 932 931 933 49 (set (reg/f:DI 0 ax [673])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:231 89 {*movdi_internal}
     (nil))
(insn 933 932 934 49 (parallel [
            (set (reg/f:DI 0 ax [orig:212 D.6103 ] [212])
                (plus:DI (reg/f:DI 0 ax [673])
                    (reg:DI 1 dx [orig:211 D.6101 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:231 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:211 D.6101 ] [211]))
        (nil)))
(insn 934 933 935 49 (set (reg/f:DI 0 ax [orig:213 D.6104 ] [213])
        (mem/f:DI (reg/f:DI 0 ax [orig:212 D.6103 ] [212]) [0 *_179+0 S8 A64])) sim2fitman_com_line.cpp:231 89 {*movdi_internal}
     (nil))
(insn 935 934 936 49 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:213 D.6104 ] [213])) sim2fitman_com_line.cpp:231 89 {*movdi_internal}
     (nil))
(call_insn 936 935 937 49 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x2b4b6e3ef000 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:231 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 937 936 938 49 (set (reg:QI 0 ax [orig:214 D.6106 ] [214])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:231 93 {*movqi_internal}
     (nil))
(insn 938 937 939 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:214 D.6106 ] [214])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:231 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 939 938 940 49 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 957)
            (pc))) sim2fitman_com_line.cpp:231 596 {*jcc_1}
     (nil)
 -> 957)
;;  succ:       50 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 215 216 217 218 219 220 674 675 676
(note 940 939 941 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 941 940 942 50 (set (reg/f:DI 0 ax [674])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 942 941 943 50 (parallel [
            (set (reg/f:DI 0 ax [orig:215 D.6102 ] [215])
                (plus:DI (reg/f:DI 0 ax [674])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:232 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 943 942 944 50 (parallel [
            (set (reg/f:DI 1 dx [orig:216 D.6107 ] [216])
                (plus:DI (reg/f:DI 0 ax [orig:215 D.6102 ] [215])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:232 221 {*adddi_1}
     (nil))
(insn 944 943 945 50 (set (reg:SI 0 ax [675])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:232 90 {*movsi_internal}
     (nil))
(insn 945 944 946 50 (set (reg:DI 0 ax [orig:217 D.6101 ] [217])
        (sign_extend:DI (reg:SI 0 ax [675]))) sim2fitman_com_line.cpp:232 142 {*extendsidi2_rex64}
     (nil))
(insn 946 945 947 50 (parallel [
            (set (reg:DI 2 cx [orig:218 D.6101 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.6101 ] [217])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:232 497 {*ashldi3_1}
     (nil))
(insn 947 946 948 50 (set (reg/f:DI 0 ax [676])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 948 947 949 50 (parallel [
            (set (reg/f:DI 0 ax [orig:219 D.6103 ] [219])
                (plus:DI (reg/f:DI 0 ax [676])
                    (reg:DI 2 cx [orig:218 D.6101 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:232 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:218 D.6101 ] [218]))
        (nil)))
(insn 949 948 951 50 (set (reg/f:DI 0 ax [orig:220 D.6104 ] [220])
        (mem/f:DI (reg/f:DI 0 ax [orig:219 D.6103 ] [219]) [0 *_187+0 S8 A64])) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 951 949 952 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b4b6e457098 *.LC10>)) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 952 951 953 50 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:220 D.6104 ] [220])) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 953 952 954 50 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_com_line.cpp:232 93 {*movqi_internal}
     (nil))
(call_insn 954 953 1735 50 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b4b6e0f8900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:232 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1735 954 1736 50 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1736 1735 957)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 957 1736 958 51 30 "" [1 uses])
(note 958 957 959 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 959 958 1737 51 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -15 [0xfffffffffffffff1])) sim2fitman_com_line.cpp:234 90 {*movsi_internal}
     (nil))
(jump_insn 1737 959 1738 51 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:234 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1738 1737 962)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 962 1738 963 52 29 "" [1 uses])
(note 963 962 964 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 964 963 1739 52 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_com_line.cpp:238 90 {*movsi_internal}
     (nil))
(jump_insn 1739 964 1740 52 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:238 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1740 1739 967)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 221 222 223 224 225 677 678
(code_label 967 1740 968 53 28 "" [1 uses])
(note 968 967 969 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 969 968 970 53 (set (reg:SI 0 ax [677])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:242 90 {*movsi_internal}
     (nil))
(insn 970 969 971 53 (set (reg:DI 0 ax [orig:221 D.6101 ] [221])
        (sign_extend:DI (reg:SI 0 ax [677]))) sim2fitman_com_line.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 971 970 972 53 (parallel [
            (set (reg:DI 1 dx [orig:222 D.6101 ] [222])
                (ashift:DI (reg:DI 0 ax [orig:221 D.6101 ] [221])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:242 497 {*ashldi3_1}
     (nil))
(insn 972 971 973 53 (set (reg/f:DI 0 ax [678])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:242 89 {*movdi_internal}
     (nil))
(insn 973 972 974 53 (parallel [
            (set (reg/f:DI 0 ax [orig:223 D.6103 ] [223])
                (plus:DI (reg/f:DI 0 ax [678])
                    (reg:DI 1 dx [orig:222 D.6101 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:242 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.6101 ] [222]))
        (nil)))
(insn 974 973 975 53 (set (reg/f:DI 0 ax [orig:224 D.6104 ] [224])
        (mem/f:DI (reg/f:DI 0 ax [orig:223 D.6103 ] [223]) [0 *_193+0 S8 A64])) sim2fitman_com_line.cpp:242 89 {*movdi_internal}
     (nil))
(insn 975 974 976 53 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b4b6e49e098 *.LC12>)) sim2fitman_com_line.cpp:242 89 {*movdi_internal}
     (nil))
(insn 976 975 977 53 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:224 D.6104 ] [224])) sim2fitman_com_line.cpp:242 89 {*movdi_internal}
     (nil))
(call_insn/i 977 976 978 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:242 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 978 977 979 53 (set (reg:SI 0 ax [orig:225 D.6100 ] [225])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:242 90 {*movsi_internal}
     (nil))
(insn 979 978 980 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:225 D.6100 ] [225])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:242 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 980 979 981 53 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1015)
            (pc))) sim2fitman_com_line.cpp:242 596 {*jcc_1}
     (nil)
 -> 1015)
;;  succ:       54 (FALLTHRU)
;;              57
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 226 227 228 229 230 679 680
(note 981 980 982 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 982 981 983 54 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:243 220 {*addsi_1}
     (nil))
(insn 983 982 984 54 (set (reg:SI 0 ax [679])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:244 90 {*movsi_internal}
     (nil))
(insn 984 983 985 54 (set (reg:DI 0 ax [orig:226 D.6101 ] [226])
        (sign_extend:DI (reg:SI 0 ax [679]))) sim2fitman_com_line.cpp:244 142 {*extendsidi2_rex64}
     (nil))
(insn 985 984 986 54 (parallel [
            (set (reg:DI 1 dx [orig:227 D.6101 ] [227])
                (ashift:DI (reg:DI 0 ax [orig:226 D.6101 ] [226])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:244 497 {*ashldi3_1}
     (nil))
(insn 986 985 987 54 (set (reg/f:DI 0 ax [680])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:244 89 {*movdi_internal}
     (nil))
(insn 987 986 988 54 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.6103 ] [228])
                (plus:DI (reg/f:DI 0 ax [680])
                    (reg:DI 1 dx [orig:227 D.6101 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:244 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:227 D.6101 ] [227]))
        (nil)))
(insn 988 987 989 54 (set (reg/f:DI 0 ax [orig:229 D.6104 ] [229])
        (mem/f:DI (reg/f:DI 0 ax [orig:228 D.6103 ] [228]) [0 *_199+0 S8 A64])) sim2fitman_com_line.cpp:244 89 {*movdi_internal}
     (nil))
(insn 989 988 990 54 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:229 D.6104 ] [229])) sim2fitman_com_line.cpp:244 89 {*movdi_internal}
     (nil))
(call_insn 990 989 991 54 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x2b4b6e3ef000 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:244 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 991 990 992 54 (set (reg:QI 0 ax [orig:230 D.6106 ] [230])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:244 93 {*movqi_internal}
     (nil))
(insn 992 991 993 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:230 D.6106 ] [230])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:244 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 993 992 994 54 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1010)
            (pc))) sim2fitman_com_line.cpp:244 596 {*jcc_1}
     (nil)
 -> 1010)
;;  succ:       55 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 231 232 233 234 235 681 682 683
(note 994 993 995 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 995 994 996 55 (set (reg/f:DI 0 ax [681])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 996 995 997 55 (parallel [
            (set (reg/f:DI 1 dx [orig:231 D.6107 ] [231])
                (plus:DI (reg/f:DI 0 ax [681])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:245 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 28 [0x1c]))
        (nil)))
(insn 997 996 998 55 (set (reg:SI 0 ax [682])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:245 90 {*movsi_internal}
     (nil))
(insn 998 997 999 55 (set (reg:DI 0 ax [orig:232 D.6101 ] [232])
        (sign_extend:DI (reg:SI 0 ax [682]))) sim2fitman_com_line.cpp:245 142 {*extendsidi2_rex64}
     (nil))
(insn 999 998 1000 55 (parallel [
            (set (reg:DI 2 cx [orig:233 D.6101 ] [233])
                (ashift:DI (reg:DI 0 ax [orig:232 D.6101 ] [232])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:245 497 {*ashldi3_1}
     (nil))
(insn 1000 999 1001 55 (set (reg/f:DI 0 ax [683])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1001 1000 1002 55 (parallel [
            (set (reg/f:DI 0 ax [orig:234 D.6103 ] [234])
                (plus:DI (reg/f:DI 0 ax [683])
                    (reg:DI 2 cx [orig:233 D.6101 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:245 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:233 D.6101 ] [233]))
        (nil)))
(insn 1002 1001 1004 55 (set (reg/f:DI 0 ax [orig:235 D.6104 ] [235])
        (mem/f:DI (reg/f:DI 0 ax [orig:234 D.6103 ] [234]) [0 *_206+0 S8 A64])) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1004 1002 1005 55 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b4b6e457098 *.LC10>)) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1005 1004 1006 55 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:235 D.6104 ] [235])) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1006 1005 1007 55 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_com_line.cpp:245 93 {*movqi_internal}
     (nil))
(call_insn 1007 1006 1741 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x2b4b6e0f8900 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:245 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1741 1007 1742 55 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1742 1741 1010)
;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 1010 1742 1011 56 32 "" [1 uses])
(note 1011 1010 1012 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 1012 1011 1743 56 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -16 [0xfffffffffffffff0])) sim2fitman_com_line.cpp:247 90 {*movsi_internal}
     (nil))
(jump_insn 1743 1012 1744 56 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:247 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1744 1743 1015)
;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 236 237 238 239 240 684 685
(code_label 1015 1744 1016 57 31 "" [1 uses])
(note 1016 1015 1017 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 1017 1016 1018 57 (set (reg:SI 0 ax [684])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:251 90 {*movsi_internal}
     (nil))
(insn 1018 1017 1019 57 (set (reg:DI 0 ax [orig:236 D.6101 ] [236])
        (sign_extend:DI (reg:SI 0 ax [684]))) sim2fitman_com_line.cpp:251 142 {*extendsidi2_rex64}
     (nil))
(insn 1019 1018 1020 57 (parallel [
            (set (reg:DI 1 dx [orig:237 D.6101 ] [237])
                (ashift:DI (reg:DI 0 ax [orig:236 D.6101 ] [236])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:251 497 {*ashldi3_1}
     (nil))
(insn 1020 1019 1021 57 (set (reg/f:DI 0 ax [685])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:251 89 {*movdi_internal}
     (nil))
(insn 1021 1020 1022 57 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.6103 ] [238])
                (plus:DI (reg/f:DI 0 ax [685])
                    (reg:DI 1 dx [orig:237 D.6101 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:251 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:237 D.6101 ] [237]))
        (nil)))
(insn 1022 1021 1023 57 (set (reg/f:DI 0 ax [orig:239 D.6104 ] [239])
        (mem/f:DI (reg/f:DI 0 ax [orig:238 D.6103 ] [238]) [0 *_211+0 S8 A64])) sim2fitman_com_line.cpp:251 89 {*movdi_internal}
     (nil))
(insn 1023 1022 1024 57 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b4b6e49e130 *.LC13>)) sim2fitman_com_line.cpp:251 89 {*movdi_internal}
     (nil))
(insn 1024 1023 1025 57 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:239 D.6104 ] [239])) sim2fitman_com_line.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn/i 1025 1024 1026 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:251 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1026 1025 1027 57 (set (reg:SI 0 ax [orig:240 D.6100 ] [240])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:251 90 {*movsi_internal}
     (nil))
(insn 1027 1026 1028 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:240 D.6100 ] [240])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:251 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1028 1027 1029 57 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1036)
            (pc))) sim2fitman_com_line.cpp:251 596 {*jcc_1}
     (nil)
 -> 1036)
;;  succ:       58 (FALLTHRU)
;;              59
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 241 686
(note 1029 1028 1030 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 1030 1029 1031 58 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:252 93 {*movqi_internal}
     (nil))
(insn 1031 1030 1032 58 (set (reg/f:DI 0 ax [686])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:253 89 {*movdi_internal}
     (nil))
(insn 1032 1031 1033 58 (parallel [
            (set (reg/f:DI 0 ax [orig:241 D.6102 ] [241])
                (plus:DI (reg/f:DI 0 ax [686])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:253 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 1033 1032 1745 58 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:241 D.6102 ] [241])
                (const_int 32 [0x20])) [0 _215->max_normalize+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:253 90 {*movsi_internal}
     (nil))
(jump_insn 1745 1033 1746 58 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1746 1745 1036)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 242 243 244 245 246 687 688
(code_label 1036 1746 1037 59 33 "" [1 uses])
(note 1037 1036 1038 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 1038 1037 1039 59 (set (reg:SI 0 ax [687])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:256 90 {*movsi_internal}
     (nil))
(insn 1039 1038 1040 59 (set (reg:DI 0 ax [orig:242 D.6101 ] [242])
        (sign_extend:DI (reg:SI 0 ax [687]))) sim2fitman_com_line.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 1040 1039 1041 59 (parallel [
            (set (reg:DI 1 dx [orig:243 D.6101 ] [243])
                (ashift:DI (reg:DI 0 ax [orig:242 D.6101 ] [242])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:256 497 {*ashldi3_1}
     (nil))
(insn 1041 1040 1042 59 (set (reg/f:DI 0 ax [688])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1042 1041 1043 59 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.6103 ] [244])
                (plus:DI (reg/f:DI 0 ax [688])
                    (reg:DI 1 dx [orig:243 D.6101 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:256 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:243 D.6101 ] [243]))
        (nil)))
(insn 1043 1042 1044 59 (set (reg/f:DI 0 ax [orig:245 D.6104 ] [245])
        (mem/f:DI (reg/f:DI 0 ax [orig:244 D.6103 ] [244]) [0 *_218+0 S8 A64])) sim2fitman_com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1044 1043 1045 59 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b4b6e49e1c8 *.LC14>)) sim2fitman_com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1045 1044 1046 59 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:245 D.6104 ] [245])) sim2fitman_com_line.cpp:256 89 {*movdi_internal}
     (nil))
(call_insn/i 1046 1045 1047 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:256 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1047 1046 1048 59 (set (reg:SI 0 ax [orig:246 D.6100 ] [246])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:256 90 {*movsi_internal}
     (nil))
(insn 1048 1047 1049 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:246 D.6100 ] [246])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:256 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1049 1048 1050 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1056)
            (pc))) sim2fitman_com_line.cpp:256 596 {*jcc_1}
     (nil)
 -> 1056)
;;  succ:       60 (FALLTHRU)
;;              61
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 689
(note 1050 1049 1051 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 1051 1050 1052 60 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:258 93 {*movqi_internal}
     (nil))
(insn 1052 1051 1053 60 (set (reg/f:DI 0 ax [689])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:259 89 {*movdi_internal}
     (nil))
(insn 1053 1052 1747 60 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [689])
                (const_int 52 [0x34])) [0 preprocess_34(D)->pre_quecc_if+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:259 90 {*movsi_internal}
     (nil))
(jump_insn 1747 1053 1748 60 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1748 1747 1056)
;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 247 248 249 250 251 690 691
(code_label 1056 1748 1057 61 34 "" [1 uses])
(note 1057 1056 1058 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 1058 1057 1059 61 (set (reg:SI 0 ax [690])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:262 90 {*movsi_internal}
     (nil))
(insn 1059 1058 1060 61 (set (reg:DI 0 ax [orig:247 D.6101 ] [247])
        (sign_extend:DI (reg:SI 0 ax [690]))) sim2fitman_com_line.cpp:262 142 {*extendsidi2_rex64}
     (nil))
(insn 1060 1059 1061 61 (parallel [
            (set (reg:DI 1 dx [orig:248 D.6101 ] [248])
                (ashift:DI (reg:DI 0 ax [orig:247 D.6101 ] [247])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:262 497 {*ashldi3_1}
     (nil))
(insn 1061 1060 1062 61 (set (reg/f:DI 0 ax [691])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:262 89 {*movdi_internal}
     (nil))
(insn 1062 1061 1063 61 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.6103 ] [249])
                (plus:DI (reg/f:DI 0 ax [691])
                    (reg:DI 1 dx [orig:248 D.6101 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:262 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:248 D.6101 ] [248]))
        (nil)))
(insn 1063 1062 1064 61 (set (reg/f:DI 0 ax [orig:250 D.6104 ] [250])
        (mem/f:DI (reg/f:DI 0 ax [orig:249 D.6103 ] [249]) [0 *_224+0 S8 A64])) sim2fitman_com_line.cpp:262 89 {*movdi_internal}
     (nil))
(insn 1064 1063 1065 61 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b4b6e49e260 *.LC15>)) sim2fitman_com_line.cpp:262 89 {*movdi_internal}
     (nil))
(insn 1065 1064 1066 61 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:250 D.6104 ] [250])) sim2fitman_com_line.cpp:262 89 {*movdi_internal}
     (nil))
(call_insn/i 1066 1065 1067 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:262 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1067 1066 1068 61 (set (reg:SI 0 ax [orig:251 D.6100 ] [251])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:262 90 {*movsi_internal}
     (nil))
(insn 1068 1067 1069 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:251 D.6100 ] [251])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:262 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1069 1068 1070 61 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1078)
            (pc))) sim2fitman_com_line.cpp:262 596 {*jcc_1}
     (nil)
 -> 1078)
;;  succ:       62 (FALLTHRU)
;;              63
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 252 692
(note 1070 1069 1071 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 1071 1070 1072 62 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:264 93 {*movqi_internal}
     (nil))
(insn 1072 1071 1073 62 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -809 [0xfffffffffffffcd7])) [0 rif_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:265 93 {*movqi_internal}
     (nil))
(insn 1073 1072 1074 62 (set (reg/f:DI 0 ax [692])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:266 89 {*movdi_internal}
     (nil))
(insn 1074 1073 1075 62 (parallel [
            (set (reg/f:DI 0 ax [orig:252 D.6102 ] [252])
                (plus:DI (reg/f:DI 0 ax [692])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:266 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 1075 1074 1749 62 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:252 D.6102 ] [252])
                (const_int 52 [0x34])) [0 _229->pre_quecc_if+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:266 90 {*movsi_internal}
     (nil))
(jump_insn 1749 1075 1750 62 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1750 1749 1078)
;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 253 254 255 256 257 693 694
(code_label 1078 1750 1079 63 35 "" [1 uses])
(note 1079 1078 1080 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 1080 1079 1081 63 (set (reg:SI 0 ax [693])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:269 90 {*movsi_internal}
     (nil))
(insn 1081 1080 1082 63 (set (reg:DI 0 ax [orig:253 D.6101 ] [253])
        (sign_extend:DI (reg:SI 0 ax [693]))) sim2fitman_com_line.cpp:269 142 {*extendsidi2_rex64}
     (nil))
(insn 1082 1081 1083 63 (parallel [
            (set (reg:DI 1 dx [orig:254 D.6101 ] [254])
                (ashift:DI (reg:DI 0 ax [orig:253 D.6101 ] [253])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:269 497 {*ashldi3_1}
     (nil))
(insn 1083 1082 1084 63 (set (reg/f:DI 0 ax [694])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:269 89 {*movdi_internal}
     (nil))
(insn 1084 1083 1085 63 (parallel [
            (set (reg/f:DI 0 ax [orig:255 D.6103 ] [255])
                (plus:DI (reg/f:DI 0 ax [694])
                    (reg:DI 1 dx [orig:254 D.6101 ] [254])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:269 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:254 D.6101 ] [254]))
        (nil)))
(insn 1085 1084 1086 63 (set (reg/f:DI 0 ax [orig:256 D.6104 ] [256])
        (mem/f:DI (reg/f:DI 0 ax [orig:255 D.6103 ] [255]) [0 *_232+0 S8 A64])) sim2fitman_com_line.cpp:269 89 {*movdi_internal}
     (nil))
(insn 1086 1085 1087 63 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b4b6e49e2f8 *.LC16>)) sim2fitman_com_line.cpp:269 89 {*movdi_internal}
     (nil))
(insn 1087 1086 1088 63 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:256 D.6104 ] [256])) sim2fitman_com_line.cpp:269 89 {*movdi_internal}
     (nil))
(call_insn/i 1088 1087 1089 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:269 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1089 1088 1090 63 (set (reg:SI 0 ax [orig:257 D.6100 ] [257])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:269 90 {*movsi_internal}
     (nil))
(insn 1090 1089 1091 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:257 D.6100 ] [257])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:269 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1091 1090 1092 63 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1098)
            (pc))) sim2fitman_com_line.cpp:269 596 {*jcc_1}
     (nil)
 -> 1098)
;;  succ:       64 (FALLTHRU)
;;              65
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 695
(note 1092 1091 1093 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 1093 1092 1094 64 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:271 93 {*movqi_internal}
     (nil))
(insn 1094 1093 1095 64 (set (reg/f:DI 0 ax [695])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1095 1094 1751 64 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [695])
                (const_int 16 [0x10])) [0 preprocess_34(D)->bc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:272 90 {*movsi_internal}
     (nil))
(jump_insn 1751 1095 1752 64 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1752 1751 1098)
;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 258 259 260 261 262 696 697
(code_label 1098 1752 1099 65 36 "" [1 uses])
(note 1099 1098 1100 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 1100 1099 1101 65 (set (reg:SI 0 ax [696])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:275 90 {*movsi_internal}
     (nil))
(insn 1101 1100 1102 65 (set (reg:DI 0 ax [orig:258 D.6101 ] [258])
        (sign_extend:DI (reg:SI 0 ax [696]))) sim2fitman_com_line.cpp:275 142 {*extendsidi2_rex64}
     (nil))
(insn 1102 1101 1103 65 (parallel [
            (set (reg:DI 1 dx [orig:259 D.6101 ] [259])
                (ashift:DI (reg:DI 0 ax [orig:258 D.6101 ] [258])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:275 497 {*ashldi3_1}
     (nil))
(insn 1103 1102 1104 65 (set (reg/f:DI 0 ax [697])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:275 89 {*movdi_internal}
     (nil))
(insn 1104 1103 1105 65 (parallel [
            (set (reg/f:DI 0 ax [orig:260 D.6103 ] [260])
                (plus:DI (reg/f:DI 0 ax [697])
                    (reg:DI 1 dx [orig:259 D.6101 ] [259])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:275 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:259 D.6101 ] [259]))
        (nil)))
(insn 1105 1104 1106 65 (set (reg/f:DI 0 ax [orig:261 D.6104 ] [261])
        (mem/f:DI (reg/f:DI 0 ax [orig:260 D.6103 ] [260]) [0 *_238+0 S8 A64])) sim2fitman_com_line.cpp:275 89 {*movdi_internal}
     (nil))
(insn 1106 1105 1107 65 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b4b6e49e390 *.LC17>)) sim2fitman_com_line.cpp:275 89 {*movdi_internal}
     (nil))
(insn 1107 1106 1108 65 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:261 D.6104 ] [261])) sim2fitman_com_line.cpp:275 89 {*movdi_internal}
     (nil))
(call_insn/i 1108 1107 1109 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:275 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1109 1108 1110 65 (set (reg:SI 0 ax [orig:262 D.6100 ] [262])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:275 90 {*movsi_internal}
     (nil))
(insn 1110 1109 1111 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:262 D.6100 ] [262])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:275 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1111 1110 1112 65 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1120)
            (pc))) sim2fitman_com_line.cpp:275 596 {*jcc_1}
     (nil)
 -> 1120)
;;  succ:       66 (FALLTHRU)
;;              67
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 263 698
(note 1112 1111 1113 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 1113 1112 1114 66 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:277 93 {*movqi_internal}
     (nil))
(insn 1114 1113 1115 66 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -810 [0xfffffffffffffcd6])) [0 rbc_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:278 93 {*movqi_internal}
     (nil))
(insn 1115 1114 1116 66 (set (reg/f:DI 0 ax [698])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:279 89 {*movdi_internal}
     (nil))
(insn 1116 1115 1117 66 (parallel [
            (set (reg/f:DI 0 ax [orig:263 D.6102 ] [263])
                (plus:DI (reg/f:DI 0 ax [698])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:279 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -824 [0xfffffffffffffcc8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 1117 1116 1753 66 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:263 D.6102 ] [263])
                (const_int 16 [0x10])) [0 _243->bc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:279 90 {*movsi_internal}
     (nil))
(jump_insn 1753 1117 1754 66 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1754 1753 1120)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 264 265 266 267 268 699 700
(code_label 1120 1754 1121 67 37 "" [1 uses])
(note 1121 1120 1122 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 1122 1121 1123 67 (set (reg:SI 0 ax [699])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:321 90 {*movsi_internal}
     (nil))
(insn 1123 1122 1124 67 (set (reg:DI 0 ax [orig:264 D.6101 ] [264])
        (sign_extend:DI (reg:SI 0 ax [699]))) sim2fitman_com_line.cpp:321 142 {*extendsidi2_rex64}
     (nil))
(insn 1124 1123 1125 67 (parallel [
            (set (reg:DI 1 dx [orig:265 D.6101 ] [265])
                (ashift:DI (reg:DI 0 ax [orig:264 D.6101 ] [264])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:321 497 {*ashldi3_1}
     (nil))
(insn 1125 1124 1126 67 (set (reg/f:DI 0 ax [700])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:321 89 {*movdi_internal}
     (nil))
(insn 1126 1125 1127 67 (parallel [
            (set (reg/f:DI 0 ax [orig:266 D.6103 ] [266])
                (plus:DI (reg/f:DI 0 ax [700])
                    (reg:DI 1 dx [orig:265 D.6101 ] [265])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:321 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:265 D.6101 ] [265]))
        (nil)))
(insn 1127 1126 1128 67 (set (reg/f:DI 0 ax [orig:267 D.6104 ] [267])
        (mem/f:DI (reg/f:DI 0 ax [orig:266 D.6103 ] [266]) [0 *_246+0 S8 A64])) sim2fitman_com_line.cpp:321 89 {*movdi_internal}
     (nil))
(insn 1128 1127 1129 67 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b4b6e49e428 *.LC18>)) sim2fitman_com_line.cpp:321 89 {*movdi_internal}
     (nil))
(insn 1129 1128 1130 67 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:267 D.6104 ] [267])) sim2fitman_com_line.cpp:321 89 {*movdi_internal}
     (nil))
(call_insn/i 1130 1129 1131 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:321 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1131 1130 1132 67 (set (reg:SI 0 ax [orig:268 D.6100 ] [268])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:321 90 {*movsi_internal}
     (nil))
(insn 1132 1131 1133 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:268 D.6100 ] [268])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:321 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1133 1132 1134 67 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1150)
            (pc))) sim2fitman_com_line.cpp:321 596 {*jcc_1}
     (nil)
 -> 1150)
;;  succ:       68 (FALLTHRU)
;;              71
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 269 701
(note 1134 1133 1135 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 1135 1134 1136 68 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:323 93 {*movqi_internal}
     (nil))
(insn 1136 1135 1137 68 (set (reg/f:DI 0 ax [701])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:324 89 {*movdi_internal}
     (nil))
(insn 1137 1136 1138 68 (set (reg:SI 0 ax [orig:269 D.6100 ] [269])
        (mem:SI (reg/f:DI 0 ax [701]) [0 *forced_swap_250(D)+0 S4 A32])) sim2fitman_com_line.cpp:324 90 {*movsi_internal}
     (nil))
(insn 1138 1137 1139 68 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:269 D.6100 ] [269])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:324 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1139 1138 1140 68 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1144)
            (pc))) sim2fitman_com_line.cpp:324 596 {*jcc_1}
     (nil)
 -> 1144)
;;  succ:       69 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1140 1139 1141 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 1141 1140 1755 69 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -10 [0xfffffffffffffff6])) sim2fitman_com_line.cpp:326 90 {*movsi_internal}
     (nil))
(jump_insn 1755 1141 1756 69 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:326 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1756 1755 1144)
;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 702
(code_label 1144 1756 1145 70 39 "" [1 uses])
(note 1145 1144 1146 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 1146 1145 1147 70 (set (reg/f:DI 0 ax [702])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1147 1146 1757 70 (set (mem:SI (reg/f:DI 0 ax [702]) [0 *forced_swap_250(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:328 90 {*movsi_internal}
     (nil))
(jump_insn 1757 1147 1758 70 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1758 1757 1150)
;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 270 271 272 273 274 703 704
(code_label 1150 1758 1151 71 38 "" [1 uses])
(note 1151 1150 1152 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 1152 1151 1153 71 (set (reg:SI 0 ax [703])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:332 90 {*movsi_internal}
     (nil))
(insn 1153 1152 1154 71 (set (reg:DI 0 ax [orig:270 D.6101 ] [270])
        (sign_extend:DI (reg:SI 0 ax [703]))) sim2fitman_com_line.cpp:332 142 {*extendsidi2_rex64}
     (nil))
(insn 1154 1153 1155 71 (parallel [
            (set (reg:DI 1 dx [orig:271 D.6101 ] [271])
                (ashift:DI (reg:DI 0 ax [orig:270 D.6101 ] [270])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:332 497 {*ashldi3_1}
     (nil))
(insn 1155 1154 1156 71 (set (reg/f:DI 0 ax [704])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:332 89 {*movdi_internal}
     (nil))
(insn 1156 1155 1157 71 (parallel [
            (set (reg/f:DI 0 ax [orig:272 D.6103 ] [272])
                (plus:DI (reg/f:DI 0 ax [704])
                    (reg:DI 1 dx [orig:271 D.6101 ] [271])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:332 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:271 D.6101 ] [271]))
        (nil)))
(insn 1157 1156 1158 71 (set (reg/f:DI 0 ax [orig:273 D.6104 ] [273])
        (mem/f:DI (reg/f:DI 0 ax [orig:272 D.6103 ] [272]) [0 *_255+0 S8 A64])) sim2fitman_com_line.cpp:332 89 {*movdi_internal}
     (nil))
(insn 1158 1157 1159 71 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2b4b6e49e4c0 *.LC19>)) sim2fitman_com_line.cpp:332 89 {*movdi_internal}
     (nil))
(insn 1159 1158 1160 71 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:273 D.6104 ] [273])) sim2fitman_com_line.cpp:332 89 {*movdi_internal}
     (nil))
(call_insn/i 1160 1159 1161 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:332 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1161 1160 1162 71 (set (reg:SI 0 ax [orig:274 D.6100 ] [274])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:332 90 {*movsi_internal}
     (nil))
(insn 1162 1161 1163 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:274 D.6100 ] [274])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:332 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1163 1162 1164 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1182)
            (pc))) sim2fitman_com_line.cpp:332 596 {*jcc_1}
     (nil)
 -> 1182)
;;  succ:       72 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 275 276 705
(note 1164 1163 1165 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 1165 1164 1166 72 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:334 93 {*movqi_internal}
     (nil))
(insn 1166 1165 1167 72 (set (reg/f:DI 0 ax [705])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:335 89 {*movdi_internal}
     (nil))
(insn 1167 1166 1168 72 (parallel [
            (set (reg/f:DI 0 ax [orig:275 D.6108 ] [275])
                (plus:DI (reg/f:DI 0 ax [705])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 forced_swap+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 1168 1167 1169 72 (set (reg:SI 0 ax [orig:276 D.6100 ] [276])
        (mem:SI (reg/f:DI 0 ax [orig:275 D.6108 ] [275]) [0 *_259+0 S4 A32])) sim2fitman_com_line.cpp:335 90 {*movsi_internal}
     (nil))
(insn 1169 1168 1170 72 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:276 D.6100 ] [276])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:335 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1170 1169 1171 72 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1175)
            (pc))) sim2fitman_com_line.cpp:335 596 {*jcc_1}
     (nil)
 -> 1175)
;;  succ:       73 (FALLTHRU)
;;              74
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1171 1170 1172 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1172 1171 1759 73 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -10 [0xfffffffffffffff6])) sim2fitman_com_line.cpp:337 90 {*movsi_internal}
     (nil))
(jump_insn 1759 1172 1760 73 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:337 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1760 1759 1175)
;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 277 706
(code_label 1175 1760 1176 74 41 "" [1 uses])
(note 1176 1175 1177 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 1177 1176 1178 74 (set (reg/f:DI 0 ax [706])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1178 1177 1179 74 (parallel [
            (set (reg/f:DI 0 ax [orig:277 D.6108 ] [277])
                (plus:DI (reg/f:DI 0 ax [706])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:339 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 forced_swap+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 1179 1178 1761 74 (set (mem:SI (reg/f:DI 0 ax [orig:277 D.6108 ] [277]) [0 *_261+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:339 90 {*movsi_internal}
     (nil))
(jump_insn 1761 1179 1762 74 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1762 1761 1182)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 278 279 280 281 282 707 708
(code_label 1182 1762 1183 75 40 "" [1 uses])
(note 1183 1182 1184 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 1184 1183 1185 75 (set (reg:SI 0 ax [707])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:343 90 {*movsi_internal}
     (nil))
(insn 1185 1184 1186 75 (set (reg:DI 0 ax [orig:278 D.6101 ] [278])
        (sign_extend:DI (reg:SI 0 ax [707]))) sim2fitman_com_line.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 1186 1185 1187 75 (parallel [
            (set (reg:DI 1 dx [orig:279 D.6101 ] [279])
                (ashift:DI (reg:DI 0 ax [orig:278 D.6101 ] [278])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:343 497 {*ashldi3_1}
     (nil))
(insn 1187 1186 1188 75 (set (reg/f:DI 0 ax [708])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:343 89 {*movdi_internal}
     (nil))
(insn 1188 1187 1189 75 (parallel [
            (set (reg/f:DI 0 ax [orig:280 D.6103 ] [280])
                (plus:DI (reg/f:DI 0 ax [708])
                    (reg:DI 1 dx [orig:279 D.6101 ] [279])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:343 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:279 D.6101 ] [279]))
        (nil)))
(insn 1189 1188 1190 75 (set (reg/f:DI 0 ax [orig:281 D.6104 ] [281])
        (mem/f:DI (reg/f:DI 0 ax [orig:280 D.6103 ] [280]) [0 *_265+0 S8 A64])) sim2fitman_com_line.cpp:343 89 {*movdi_internal}
     (nil))
(insn 1190 1189 1191 75 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2b4b6e49e558 *.LC20>)) sim2fitman_com_line.cpp:343 89 {*movdi_internal}
     (nil))
(insn 1191 1190 1192 75 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:281 D.6104 ] [281])) sim2fitman_com_line.cpp:343 89 {*movdi_internal}
     (nil))
(call_insn/i 1192 1191 1193 75 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:343 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1193 1192 1194 75 (set (reg:SI 0 ax [orig:282 D.6100 ] [282])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:343 90 {*movsi_internal}
     (nil))
(insn 1194 1193 1195 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:282 D.6100 ] [282])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:343 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1195 1194 1196 75 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1212)
            (pc))) sim2fitman_com_line.cpp:343 596 {*jcc_1}
     (nil)
 -> 1212)
;;  succ:       76 (FALLTHRU)
;;              79
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 283 709
(note 1196 1195 1197 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 1197 1196 1198 76 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:345 93 {*movqi_internal}
     (nil))
(insn 1198 1197 1199 76 (set (reg/f:DI 0 ax [709])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:346 89 {*movdi_internal}
     (nil))
(insn 1199 1198 1200 76 (set (reg:SI 0 ax [orig:283 D.6100 ] [283])
        (mem:SI (reg/f:DI 0 ax [709]) [0 *forced_swap_250(D)+0 S4 A32])) sim2fitman_com_line.cpp:346 90 {*movsi_internal}
     (nil))
(insn 1200 1199 1201 76 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:283 D.6100 ] [283])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:346 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1201 1200 1202 76 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1206)
            (pc))) sim2fitman_com_line.cpp:346 596 {*jcc_1}
     (nil)
 -> 1206)
;;  succ:       77 (FALLTHRU)
;;              78
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1202 1201 1203 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1203 1202 1763 77 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -10 [0xfffffffffffffff6])) sim2fitman_com_line.cpp:348 90 {*movsi_internal}
     (nil))
(jump_insn 1763 1203 1764 77 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:348 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1764 1763 1206)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 710
(code_label 1206 1764 1207 78 43 "" [1 uses])
(note 1207 1206 1208 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 1208 1207 1209 78 (set (reg/f:DI 0 ax [710])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:350 89 {*movdi_internal}
     (nil))
(insn 1209 1208 1765 78 (set (mem:SI (reg/f:DI 0 ax [710]) [0 *forced_swap_250(D)+0 S4 A32])
        (const_int 2 [0x2])) sim2fitman_com_line.cpp:350 90 {*movsi_internal}
     (nil))
(jump_insn 1765 1209 1766 78 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1766 1765 1212)
;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 284 285 286 287 288 711 712
(code_label 1212 1766 1213 79 42 "" [1 uses])
(note 1213 1212 1214 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 1214 1213 1215 79 (set (reg:SI 0 ax [711])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:354 90 {*movsi_internal}
     (nil))
(insn 1215 1214 1216 79 (set (reg:DI 0 ax [orig:284 D.6101 ] [284])
        (sign_extend:DI (reg:SI 0 ax [711]))) sim2fitman_com_line.cpp:354 142 {*extendsidi2_rex64}
     (nil))
(insn 1216 1215 1217 79 (parallel [
            (set (reg:DI 1 dx [orig:285 D.6101 ] [285])
                (ashift:DI (reg:DI 0 ax [orig:284 D.6101 ] [284])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:354 497 {*ashldi3_1}
     (nil))
(insn 1217 1216 1218 79 (set (reg/f:DI 0 ax [712])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:354 89 {*movdi_internal}
     (nil))
(insn 1218 1217 1219 79 (parallel [
            (set (reg/f:DI 0 ax [orig:286 D.6103 ] [286])
                (plus:DI (reg/f:DI 0 ax [712])
                    (reg:DI 1 dx [orig:285 D.6101 ] [285])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:354 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:285 D.6101 ] [285]))
        (nil)))
(insn 1219 1218 1220 79 (set (reg/f:DI 0 ax [orig:287 D.6104 ] [287])
        (mem/f:DI (reg/f:DI 0 ax [orig:286 D.6103 ] [286]) [0 *_273+0 S8 A64])) sim2fitman_com_line.cpp:354 89 {*movdi_internal}
     (nil))
(insn 1220 1219 1221 79 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2b4b6e49e5f0 *.LC21>)) sim2fitman_com_line.cpp:354 89 {*movdi_internal}
     (nil))
(insn 1221 1220 1222 79 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:287 D.6104 ] [287])) sim2fitman_com_line.cpp:354 89 {*movdi_internal}
     (nil))
(call_insn/i 1222 1221 1223 79 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:354 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1223 1222 1224 79 (set (reg:SI 0 ax [orig:288 D.6100 ] [288])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:354 90 {*movsi_internal}
     (nil))
(insn 1224 1223 1225 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:288 D.6100 ] [288])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:354 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1225 1224 1226 79 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1244)
            (pc))) sim2fitman_com_line.cpp:354 596 {*jcc_1}
     (nil)
 -> 1244)
;;  succ:       80 (FALLTHRU)
;;              83
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 289 290 713
(note 1226 1225 1227 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 1227 1226 1228 80 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:356 93 {*movqi_internal}
     (nil))
(insn 1228 1227 1229 80 (set (reg/f:DI 0 ax [713])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:357 89 {*movdi_internal}
     (nil))
(insn 1229 1228 1230 80 (parallel [
            (set (reg/f:DI 0 ax [orig:289 D.6108 ] [289])
                (plus:DI (reg/f:DI 0 ax [713])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:357 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 forced_swap+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 1230 1229 1231 80 (set (reg:SI 0 ax [orig:290 D.6100 ] [290])
        (mem:SI (reg/f:DI 0 ax [orig:289 D.6108 ] [289]) [0 *_277+0 S4 A32])) sim2fitman_com_line.cpp:357 90 {*movsi_internal}
     (nil))
(insn 1231 1230 1232 80 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:290 D.6100 ] [290])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:357 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1232 1231 1233 80 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1237)
            (pc))) sim2fitman_com_line.cpp:357 596 {*jcc_1}
     (nil)
 -> 1237)
;;  succ:       81 (FALLTHRU)
;;              82
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1233 1232 1234 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1234 1233 1767 81 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -10 [0xfffffffffffffff6])) sim2fitman_com_line.cpp:359 90 {*movsi_internal}
     (nil))
(jump_insn 1767 1234 1768 81 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:359 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1768 1767 1237)
;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 291 714
(code_label 1237 1768 1238 82 45 "" [1 uses])
(note 1238 1237 1239 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 1239 1238 1240 82 (set (reg/f:DI 0 ax [714])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:361 89 {*movdi_internal}
     (nil))
(insn 1240 1239 1241 82 (parallel [
            (set (reg/f:DI 0 ax [orig:291 D.6108 ] [291])
                (plus:DI (reg/f:DI 0 ax [714])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:361 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 forced_swap+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 1241 1240 1769 82 (set (mem:SI (reg/f:DI 0 ax [orig:291 D.6108 ] [291]) [0 *_279+0 S4 A32])
        (const_int 2 [0x2])) sim2fitman_com_line.cpp:361 90 {*movsi_internal}
     (nil))
(jump_insn 1769 1241 1770 82 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1770 1769 1244)
;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 292 293 294 295 296 715 716
(code_label 1244 1770 1245 83 44 "" [1 uses])
(note 1245 1244 1246 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1246 1245 1247 83 (set (reg:SI 0 ax [715])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:365 90 {*movsi_internal}
     (nil))
(insn 1247 1246 1248 83 (set (reg:DI 0 ax [orig:292 D.6101 ] [292])
        (sign_extend:DI (reg:SI 0 ax [715]))) sim2fitman_com_line.cpp:365 142 {*extendsidi2_rex64}
     (nil))
(insn 1248 1247 1249 83 (parallel [
            (set (reg:DI 1 dx [orig:293 D.6101 ] [293])
                (ashift:DI (reg:DI 0 ax [orig:292 D.6101 ] [292])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:365 497 {*ashldi3_1}
     (nil))
(insn 1249 1248 1250 83 (set (reg/f:DI 0 ax [716])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:365 89 {*movdi_internal}
     (nil))
(insn 1250 1249 1251 83 (parallel [
            (set (reg/f:DI 0 ax [orig:294 D.6103 ] [294])
                (plus:DI (reg/f:DI 0 ax [716])
                    (reg:DI 1 dx [orig:293 D.6101 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:365 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:293 D.6101 ] [293]))
        (nil)))
(insn 1251 1250 1252 83 (set (reg/f:DI 0 ax [orig:295 D.6104 ] [295])
        (mem/f:DI (reg/f:DI 0 ax [orig:294 D.6103 ] [294]) [0 *_283+0 S8 A64])) sim2fitman_com_line.cpp:365 89 {*movdi_internal}
     (nil))
(insn 1252 1251 1253 83 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b4b6e49e688 *.LC22>)) sim2fitman_com_line.cpp:365 89 {*movdi_internal}
     (nil))
(insn 1253 1252 1254 83 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:295 D.6104 ] [295])) sim2fitman_com_line.cpp:365 89 {*movdi_internal}
     (nil))
(call_insn/i 1254 1253 1255 83 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:365 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1255 1254 1256 83 (set (reg:SI 0 ax [orig:296 D.6100 ] [296])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:365 90 {*movsi_internal}
     (nil))
(insn 1256 1255 1257 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:296 D.6100 ] [296])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:365 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1257 1256 1258 83 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1263)
            (pc))) sim2fitman_com_line.cpp:365 596 {*jcc_1}
     (nil)
 -> 1263)
;;  succ:       84 (FALLTHRU)
;;              85
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83 (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 717
(note 1258 1257 1259 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1259 1258 1260 84 (set (reg/f:DI 0 ax [717])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 overwrite+0 S8 A64])) sim2fitman_com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1260 1259 1771 84 (set (mem:QI (reg/f:DI 0 ax [717]) [0 *overwrite_286(D)+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:366 93 {*movqi_internal}
     (nil))
(jump_insn 1771 1260 1772 84 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1772 1771 1263)
;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 297 298 299 300 301 718 719
(code_label 1263 1772 1264 85 46 "" [1 uses])
(note 1264 1263 1265 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 1265 1264 1266 85 (set (reg:SI 0 ax [718])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:369 90 {*movsi_internal}
     (nil))
(insn 1266 1265 1267 85 (set (reg:DI 0 ax [orig:297 D.6101 ] [297])
        (sign_extend:DI (reg:SI 0 ax [718]))) sim2fitman_com_line.cpp:369 142 {*extendsidi2_rex64}
     (nil))
(insn 1267 1266 1268 85 (parallel [
            (set (reg:DI 1 dx [orig:298 D.6101 ] [298])
                (ashift:DI (reg:DI 0 ax [orig:297 D.6101 ] [297])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:369 497 {*ashldi3_1}
     (nil))
(insn 1268 1267 1269 85 (set (reg/f:DI 0 ax [719])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:369 89 {*movdi_internal}
     (nil))
(insn 1269 1268 1270 85 (parallel [
            (set (reg/f:DI 0 ax [orig:299 D.6103 ] [299])
                (plus:DI (reg/f:DI 0 ax [719])
                    (reg:DI 1 dx [orig:298 D.6101 ] [298])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:369 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:298 D.6101 ] [298]))
        (nil)))
(insn 1270 1269 1271 85 (set (reg/f:DI 0 ax [orig:300 D.6104 ] [300])
        (mem/f:DI (reg/f:DI 0 ax [orig:299 D.6103 ] [299]) [0 *_289+0 S8 A64])) sim2fitman_com_line.cpp:369 89 {*movdi_internal}
     (nil))
(insn 1271 1270 1272 85 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b4b6e49e720 *.LC23>)) sim2fitman_com_line.cpp:369 89 {*movdi_internal}
     (nil))
(insn 1272 1271 1273 85 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:300 D.6104 ] [300])) sim2fitman_com_line.cpp:369 89 {*movdi_internal}
     (nil))
(call_insn/i 1273 1272 1274 85 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:369 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1274 1273 1275 85 (set (reg:SI 0 ax [orig:301 D.6100 ] [301])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:369 90 {*movsi_internal}
     (nil))
(insn 1275 1274 1276 85 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:301 D.6100 ] [301])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:369 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1276 1275 1277 85 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1282)
            (pc))) sim2fitman_com_line.cpp:369 596 {*jcc_1}
     (nil)
 -> 1282)
;;  succ:       86 (FALLTHRU)
;;              87
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85 (FALLTHRU)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 720
(note 1277 1276 1278 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 1278 1277 1279 86 (set (reg/f:DI 0 ax [720])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 verbose+0 S8 A64])) sim2fitman_com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1279 1278 1773 86 (set (mem:QI (reg/f:DI 0 ax [720]) [0 *verbose_292(D)+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:370 93 {*movqi_internal}
     (nil))
(jump_insn 1773 1279 1774 86 (set (pc)
        (label_ref 1309)) 636 {jump}
     (nil)
 -> 1309)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1774 1773 1282)
;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 302 303 304 305 306 721 722
(code_label 1282 1774 1283 87 47 "" [1 uses])
(note 1283 1282 1284 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 1284 1283 1285 87 (set (reg:SI 0 ax [721])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:373 90 {*movsi_internal}
     (nil))
(insn 1285 1284 1286 87 (set (reg:DI 0 ax [orig:302 D.6101 ] [302])
        (sign_extend:DI (reg:SI 0 ax [721]))) sim2fitman_com_line.cpp:373 142 {*extendsidi2_rex64}
     (nil))
(insn 1286 1285 1287 87 (parallel [
            (set (reg:DI 1 dx [orig:303 D.6101 ] [303])
                (ashift:DI (reg:DI 0 ax [orig:302 D.6101 ] [302])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:373 497 {*ashldi3_1}
     (nil))
(insn 1287 1286 1288 87 (set (reg/f:DI 0 ax [722])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:373 89 {*movdi_internal}
     (nil))
(insn 1288 1287 1289 87 (parallel [
            (set (reg/f:DI 0 ax [orig:304 D.6103 ] [304])
                (plus:DI (reg/f:DI 0 ax [722])
                    (reg:DI 1 dx [orig:303 D.6101 ] [303])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:373 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:303 D.6101 ] [303]))
        (nil)))
(insn 1289 1288 1290 87 (set (reg/f:DI 0 ax [orig:305 D.6104 ] [305])
        (mem/f:DI (reg/f:DI 0 ax [orig:304 D.6103 ] [304]) [0 *_295+0 S8 A64])) sim2fitman_com_line.cpp:373 89 {*movdi_internal}
     (nil))
(insn 1290 1289 1291 87 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b4b6e49e7b8 *.LC24>)) sim2fitman_com_line.cpp:373 89 {*movdi_internal}
     (nil))
(insn 1291 1290 1292 87 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:305 D.6104 ] [305])) sim2fitman_com_line.cpp:373 89 {*movdi_internal}
     (nil))
(call_insn/i 1292 1291 1293 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:373 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1293 1292 1294 87 (set (reg:SI 0 ax [orig:306 D.6100 ] [306])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:373 90 {*movsi_internal}
     (nil))
(insn 1294 1293 1295 87 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:306 D.6100 ] [306])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:373 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1295 1294 1296 87 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1301)
            (pc))) sim2fitman_com_line.cpp:373 596 {*jcc_1}
     (nil)
 -> 1301)
;;  succ:       88 (FALLTHRU)
;;              89
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1296 1295 1297 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(call_insn 1297 1296 1298 88 (call (mem:QI (symbol_ref:DI ("_Z13print_versionv") [flags 0x41]  <function_decl 0x2b4b6e3efc00 print_version>) [0 print_version S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:374 642 {*call}
     (nil)
    (nil))
(insn 1298 1297 1299 88 (set (reg:SI 5 di)
        (const_int 0 [0])) sim2fitman_com_line.cpp:375 90 {*movsi_internal}
     (nil))
(call_insn 1299 1298 1300 88 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b4b6e111900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:375 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1300 1299 1301)
;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       87
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83 723 724
(code_label 1301 1300 1302 89 48 "" [1 uses])
(note 1302 1301 1303 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 1303 1302 1304 89 (set (reg/f:DI 0 ax [723])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 arg_read+0 S8 A64])) sim2fitman_com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1304 1303 1305 89 (set (reg:SI 1 dx [724])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:379 90 {*movsi_internal}
     (nil))
(insn 1305 1304 1306 89 (set (mem:SI (reg/f:DI 0 ax [723]) [0 *arg_read_298(D)+0 S4 A32])
        (reg:SI 1 dx [724])) sim2fitman_com_line.cpp:379 90 {*movsi_internal}
     (nil))
(insn 1306 1305 1775 89 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -2 [0xfffffffffffffffe])) sim2fitman_com_line.cpp:380 90 {*movsi_internal}
     (nil))
(jump_insn 1775 1306 1776 89 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:380 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1776 1775 1309)
;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 91, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       84 [100.0%] 
;;              9 [100.0%] 
;;              28 [100.0%] 
;;              35 [100.0%] 
;;              39 [100.0%] 
;;              44 [100.0%] 
;;              50 [100.0%] 
;;              55 [100.0%] 
;;              58 [100.0%] 
;;              60 [100.0%] 
;;              62 [100.0%] 
;;              64 [100.0%] 
;;              66 [100.0%] 
;;              70 [100.0%] 
;;              74 [100.0%] 
;;              78 [100.0%] 
;;              82 [100.0%] 
;;              86 [100.0%] 
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1309 1776 1310 90 8 "" [18 uses])
(note 1310 1309 1311 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 1311 1310 1312 90 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:384 220 {*addsi_1}
     (nil))
;;  succ:       91 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 91, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       90 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 725
(code_label 1312 1311 1313 91 4 "" [1 uses])
(note 1313 1312 1315 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 1315 1313 1316 91 (set (reg:SI 0 ax [725])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -804 [0xfffffffffffffcdc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:102 90 {*movsi_internal}
     (nil))
(insn 1316 1315 1317 91 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [725])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -860 [0xfffffffffffffca4])) [0 argc+0 S4 A32]))) sim2fitman_com_line.cpp:102 7 {*cmpsi_1}
     (nil))
(jump_insn 1317 1316 1318 91 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1314)
            (pc))) sim2fitman_com_line.cpp:102 596 {*jcc_1}
     (nil)
 -> 1314)
;;  succ:       6
;;              92 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 92, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 91, next block 93, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91 (FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1318 1317 1319 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 1319 1318 1320 92 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
            (const_int 3 [0x3]))) sim2fitman_com_line.cpp:391 7 {*cmpsi_1}
     (nil))
(jump_insn 1320 1319 1321 92 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1368)
            (pc))) sim2fitman_com_line.cpp:391 596 {*jcc_1}
     (nil)
 -> 1368)
;;  succ:       93 (FALLTHRU)
;;              102
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 93, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 92, next block 94, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       92 (FALLTHRU)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1321 1320 1322 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 1322 1321 1323 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:393 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1323 1322 1324 93 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1327)
            (pc))) sim2fitman_com_line.cpp:393 596 {*jcc_1}
     (nil)
 -> 1327)
;;  succ:       95
;;              94 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 94, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 93, next block 95, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93 (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1324 1323 1325 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 1325 1324 1326 94 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:393 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1326 1325 1327 94 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1332)
            (pc))) sim2fitman_com_line.cpp:393 596 {*jcc_1}
     (nil)
 -> 1332)
;;  succ:       95 (FALLTHRU)
;;              96
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 95, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 94, next block 96, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93
;;              94 (FALLTHRU)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 1327 1326 1328 95 51 "" [1 uses])
(note 1328 1327 1329 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 1329 1328 1777 95 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -12 [0xfffffffffffffff4])) sim2fitman_com_line.cpp:395 90 {*movsi_internal}
     (nil))
(jump_insn 1777 1329 1778 95 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:395 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1778 1777 1332)
;; basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 95, next block 97, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       94
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 422 726
(code_label 1332 1778 1333 96 52 "" [1 uses])
(note 1333 1332 1334 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 1334 1333 1335 96 (set (reg:QI 0 ax [726])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])) sim2fitman_com_line.cpp:396 93 {*movqi_internal}
     (nil))
(insn 1335 1334 1336 96 (parallel [
            (set (reg:QI 0 ax [orig:422 D.6106 ] [422])
                (xor:QI (reg:QI 0 ax [726])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:396 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -797 [0xfffffffffffffce3])) [0 ir_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1336 1335 1337 96 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:422 D.6106 ] [422])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:396 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1337 1336 1338 96 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1353)
            (pc))) sim2fitman_com_line.cpp:396 596 {*jcc_1}
     (nil)
 -> 1353)
;;  succ:       97 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 97, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 96, next block 98, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       96 (FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 423 727
(note 1338 1337 1339 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 1339 1338 1340 97 (set (reg:QI 0 ax [727])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])) sim2fitman_com_line.cpp:396 93 {*movqi_internal}
     (nil))
(insn 1340 1339 1341 97 (parallel [
            (set (reg:QI 0 ax [orig:423 D.6106 ] [423])
                (xor:QI (reg:QI 0 ax [727])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:396 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -796 [0xfffffffffffffce4])) [0 irn_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1341 1340 1342 97 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:423 D.6106 ] [423])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:396 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1342 1341 1343 97 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1353)
            (pc))) sim2fitman_com_line.cpp:396 596 {*jcc_1}
     (nil)
 -> 1353)
;;  succ:       98 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 98, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 97, next block 99, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       97 (FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 424 425 728
(note 1343 1342 1344 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 1344 1343 1345 98 (set (reg/f:DI 0 ax [728])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:396 89 {*movdi_internal}
     (nil))
(insn 1345 1344 1346 98 (set (reg:QI 0 ax [orig:424 D.6106 ] [424])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [728])
                (const_int 72 [0x48])) [0 preprocess_34(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:396 93 {*movqi_internal}
     (nil))
(insn 1346 1345 1347 98 (parallel [
            (set (reg:QI 0 ax [orig:425 D.6106 ] [425])
                (xor:QI (reg:QI 0 ax [orig:424 D.6106 ] [424])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:396 395 {*xorqi_1}
     (nil))
(insn 1347 1346 1348 98 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:425 D.6106 ] [425])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:396 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1348 1347 1349 98 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1353)
            (pc))) sim2fitman_com_line.cpp:396 596 {*jcc_1}
     (nil)
 -> 1353)
;;  succ:       99 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 99, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 98, next block 100, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       98 (FALLTHRU)
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1349 1348 1350 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 1350 1349 1779 99 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -6 [0xfffffffffffffffa])) sim2fitman_com_line.cpp:398 90 {*movsi_internal}
     (nil))
(jump_insn 1779 1350 1780 99 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:398 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1780 1779 1353)
;; basic block 100, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 99, next block 101, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       96
;;              97
;;              98
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 426 729 730 731
(code_label 1353 1780 1354 100 53 "" [3 uses])
(note 1354 1353 1355 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 1355 1354 1356 100 (parallel [
            (set (reg:DI 0 ax [729])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:399 221 {*adddi_1}
     (nil))
(insn 1356 1355 1357 100 (parallel [
            (set (reg:DI 1 dx [730])
                (plus:DI (reg:DI 0 ax [729])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:399 221 {*adddi_1}
     (nil))
(insn 1357 1356 1358 100 (parallel [
            (set (reg:DI 0 ax [731])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:399 221 {*adddi_1}
     (nil))
(insn 1358 1357 1359 100 (set (reg:DI 4 si)
        (reg:DI 1 dx [730])) sim2fitman_com_line.cpp:399 89 {*movdi_internal}
     (nil))
(insn 1359 1358 1360 100 (set (reg:DI 5 di)
        (reg:DI 0 ax [731])) sim2fitman_com_line.cpp:399 89 {*movdi_internal}
     (nil))
(call_insn/i 1360 1359 1361 100 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:399 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1361 1360 1362 100 (set (reg:SI 0 ax [orig:426 D.6100 ] [426])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:399 90 {*movsi_internal}
     (nil))
(insn 1362 1361 1363 100 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:426 D.6100 ] [426])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:399 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1363 1362 1364 100 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1528)
            (pc))) sim2fitman_com_line.cpp:399 596 {*jcc_1}
     (nil)
 -> 1528)
;;  succ:       101 (FALLTHRU)
;;              135
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 101, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 100, next block 102, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       100 (FALLTHRU)
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1364 1363 1365 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 1365 1364 1781 101 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -17 [0xffffffffffffffef])) sim2fitman_com_line.cpp:401 90 {*movsi_internal}
     (nil))
(jump_insn 1781 1365 1782 101 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:401 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1782 1781 1368)
;; basic block 102, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 101, next block 103, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       92
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1368 1782 1369 102 50 "" [1 uses])
(note 1369 1368 1370 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 1370 1369 1371 102 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_com_line.cpp:407 7 {*cmpsi_1}
     (nil))
(jump_insn 1371 1370 1372 102 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1482)
            (pc))) sim2fitman_com_line.cpp:407 596 {*jcc_1}
     (nil)
 -> 1482)
;;  succ:       103 (FALLTHRU)
;;              125
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 103, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 102, next block 104, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102 (FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 427 732
(note 1372 1371 1373 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 1373 1372 1374 103 (set (reg:QI 0 ax [732])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])) sim2fitman_com_line.cpp:409 93 {*movqi_internal}
     (nil))
(insn 1374 1373 1375 103 (parallel [
            (set (reg:QI 0 ax [orig:427 D.6106 ] [427])
                (xor:QI (reg:QI 0 ax [732])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:409 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -797 [0xfffffffffffffce3])) [0 ir_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1375 1374 1376 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:427 D.6106 ] [427])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:409 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1376 1375 1377 103 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1440)
            (pc))) sim2fitman_com_line.cpp:409 596 {*jcc_1}
     (nil)
 -> 1440)
;;  succ:       104 (FALLTHRU)
;;              117
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 104, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 103, next block 105, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103 (FALLTHRU)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 428 733
(note 1377 1376 1378 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 1378 1377 1379 104 (set (reg:QI 0 ax [733])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])) sim2fitman_com_line.cpp:409 93 {*movqi_internal}
     (nil))
(insn 1379 1378 1380 104 (parallel [
            (set (reg:QI 0 ax [orig:428 D.6106 ] [428])
                (xor:QI (reg:QI 0 ax [733])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:409 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -796 [0xfffffffffffffce4])) [0 irn_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1380 1379 1381 104 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:428 D.6106 ] [428])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:409 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1381 1380 1382 104 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1440)
            (pc))) sim2fitman_com_line.cpp:409 596 {*jcc_1}
     (nil)
 -> 1440)
;;  succ:       105 (FALLTHRU)
;;              117
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 105, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 104, next block 106, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       104 (FALLTHRU)
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 429 430 734
(note 1382 1381 1383 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 1383 1382 1384 105 (set (reg/f:DI 0 ax [734])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:409 89 {*movdi_internal}
     (nil))
(insn 1384 1383 1385 105 (set (reg:QI 0 ax [orig:429 D.6106 ] [429])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [734])
                (const_int 72 [0x48])) [0 preprocess_34(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:409 93 {*movqi_internal}
     (nil))
(insn 1385 1384 1386 105 (parallel [
            (set (reg:QI 0 ax [orig:430 D.6106 ] [430])
                (xor:QI (reg:QI 0 ax [orig:429 D.6106 ] [429])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:409 395 {*xorqi_1}
     (nil))
(insn 1386 1385 1387 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:430 D.6106 ] [430])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:409 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1387 1386 1388 105 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1440)
            (pc))) sim2fitman_com_line.cpp:409 596 {*jcc_1}
     (nil)
 -> 1440)
;;  succ:       106 (FALLTHRU)
;;              117
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 106, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105 (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 431 735 736
(note 1388 1387 1389 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 1389 1388 1390 106 (set (reg/f:DI 0 ax [735])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -880 [0xfffffffffffffc90])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:411 89 {*movdi_internal}
     (nil))
(insn 1390 1389 1391 106 (set (mem:SI (reg/f:DI 0 ax [735]) [0 *fid_92(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:411 90 {*movsi_internal}
     (nil))
(insn 1391 1390 1392 106 (set (reg:QI 0 ax [736])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])) sim2fitman_com_line.cpp:412 93 {*movqi_internal}
     (nil))
(insn 1392 1391 1393 106 (parallel [
            (set (reg:QI 0 ax [orig:431 D.6106 ] [431])
                (xor:QI (reg:QI 0 ax [736])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:412 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -801 [0xfffffffffffffcdf])) [0 ioption_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1393 1392 1394 106 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:431 D.6106 ] [431])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:412 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1394 1393 1395 106 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1404)
            (pc))) sim2fitman_com_line.cpp:412 596 {*jcc_1}
     (nil)
 -> 1404)
;;  succ:       107 (FALLTHRU)
;;              109
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 107, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 106, next block 108, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       106 (FALLTHRU)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1395 1394 1396 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 1396 1395 1397 107 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:412 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1397 1396 1398 107 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1404)
            (pc))) sim2fitman_com_line.cpp:412 596 {*jcc_1}
     (nil)
 -> 1404)
;;  succ:       108 (FALLTHRU)
;;              109
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 108, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 107, next block 109, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       107 (FALLTHRU)
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1398 1397 1399 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(insn 1399 1398 1400 108 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -814 [0xfffffffffffffcd2])) [0 only_unsuppressed+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:414 93 {*movqi_internal}
     (nil))
(insn 1400 1399 1401 108 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b4b6e49e850 *.LC25>)) sim2fitman_com_line.cpp:415 89 {*movdi_internal}
     (nil))
(call_insn 1401 1400 1783 108 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4b6e0f6900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:415 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1783 1401 1784 108 (set (pc)
        (label_ref 1436)) sim2fitman_com_line.cpp:415 636 {jump}
     (nil)
 -> 1436)
;;  succ:       116 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1784 1783 1404)
;; basic block 109, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 108, next block 110, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       106
;;              107
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1404 1784 1405 109 57 "" [2 uses])
(note 1405 1404 1406 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 1406 1405 1407 109 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:416 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1407 1406 1408 109 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1419)
            (pc))) sim2fitman_com_line.cpp:416 596 {*jcc_1}
     (nil)
 -> 1419)
;;  succ:       110 (FALLTHRU)
;;              112
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 110, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 109, next block 111, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       109 (FALLTHRU)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 432 737
(note 1408 1407 1409 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn 1409 1408 1410 110 (set (reg:QI 0 ax [737])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])) sim2fitman_com_line.cpp:416 93 {*movqi_internal}
     (nil))
(insn 1410 1409 1411 110 (parallel [
            (set (reg:QI 0 ax [orig:432 D.6106 ] [432])
                (xor:QI (reg:QI 0 ax [737])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:416 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -800 [0xfffffffffffffce0])) [0 roption_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1411 1410 1412 110 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:432 D.6106 ] [432])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:416 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1412 1411 1413 110 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1419)
            (pc))) sim2fitman_com_line.cpp:416 596 {*jcc_1}
     (nil)
 -> 1419)
;;  succ:       111 (FALLTHRU)
;;              112
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 111, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 110, next block 112, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       110 (FALLTHRU)
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 1413 1412 1414 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(insn 1414 1413 1415 111 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -815 [0xfffffffffffffcd1])) [0 only_suppressed+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:418 93 {*movqi_internal}
     (nil))
(insn 1415 1414 1416 111 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x2b4b6e49e8e8 *.LC26>)) sim2fitman_com_line.cpp:419 89 {*movdi_internal}
     (nil))
(call_insn 1416 1415 1785 111 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b4b6e0f6900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:419 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1785 1416 1786 111 (set (pc)
        (label_ref 1436)) sim2fitman_com_line.cpp:419 636 {jump}
     (nil)
 -> 1436)
;;  succ:       116 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1786 1785 1419)
;; basic block 112, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 111, next block 113, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       109
;;              110
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 433
(code_label 1419 1786 1420 112 59 "" [2 uses])
(note 1420 1419 1421 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(call_insn 1421 1420 1422 112 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z12cond_exit_23v") [flags 0x41]  <function_decl 0x2b4b6e3f7500 cond_exit_23>) [0 cond_exit_23 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:422 649 {*call_value}
     (nil)
    (nil))
(insn 1422 1421 1423 112 (set (reg:SI 0 ax [orig:433 D.6100 ] [433])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:422 90 {*movsi_internal}
     (nil))
(insn 1423 1422 1424 112 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -796 [0xfffffffffffffce4])) [0 s_u_out+0 S4 A32])
        (reg:SI 0 ax [orig:433 D.6100 ] [433])) sim2fitman_com_line.cpp:422 90 {*movsi_internal}
     (nil))
(insn 1424 1423 1425 112 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -796 [0xfffffffffffffce4])) [0 s_u_out+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_com_line.cpp:423 7 {*cmpsi_1}
     (nil))
(jump_insn 1425 1424 1426 112 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1430)
            (pc))) sim2fitman_com_line.cpp:423 596 {*jcc_1}
     (nil)
 -> 1430)
;;  succ:       113 (FALLTHRU)
;;              114
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 113, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 112, next block 114, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       112 (FALLTHRU)
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1426 1425 1427 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 1427 1426 1787 113 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -815 [0xfffffffffffffcd1])) [0 only_suppressed+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:424 93 {*movqi_internal}
     (nil))
(jump_insn 1787 1427 1788 113 (set (pc)
        (label_ref 1436)) 636 {jump}
     (nil)
 -> 1436)
;;  succ:       116 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1788 1787 1430)
;; basic block 114, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 113, next block 115, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       112
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1430 1788 1431 114 60 "" [1 uses])
(note 1431 1430 1432 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 1432 1431 1433 114 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -796 [0xfffffffffffffce4])) [0 s_u_out+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_com_line.cpp:425 7 {*cmpsi_1}
     (nil))
(jump_insn 1433 1432 1434 114 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1436)
            (pc))) sim2fitman_com_line.cpp:425 596 {*jcc_1}
     (nil)
 -> 1436)
;;  succ:       115 (FALLTHRU)
;;              116
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 115, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 114, next block 116, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       114 (FALLTHRU)
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1434 1433 1435 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn 1435 1434 1436 115 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -814 [0xfffffffffffffcd2])) [0 only_unsuppressed+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:426 93 {*movqi_internal}
     (nil))
;;  succ:       116 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 116, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 115, next block 117, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       115 (FALLTHRU)
;;              108 [100.0%] 
;;              111 [100.0%] 
;;              114
;;              113 [100.0%] 
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1436 1435 1437 116 58 "" [4 uses])
(note 1437 1436 1694 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 1694 1437 1789 116 (const_int 0 [0]) sim2fitman_com_line.cpp:412 662 {nop}
     (nil))
(jump_insn 1789 1694 1790 116 (set (pc)
        (label_ref 1528)) sim2fitman_com_line.cpp:412 636 {jump}
     (nil)
 -> 1528)
;;  succ:       135 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1790 1789 1440)
;; basic block 117, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 116, next block 118, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103
;;              104
;;              105
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 434 738
(code_label 1440 1790 1441 117 56 "" [3 uses])
(note 1441 1440 1442 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(insn 1442 1441 1443 117 (set (reg:QI 0 ax [738])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])) sim2fitman_com_line.cpp:432 93 {*movqi_internal}
     (nil))
(insn 1443 1442 1444 117 (parallel [
            (set (reg:QI 0 ax [orig:434 D.6106 ] [434])
                (xor:QI (reg:QI 0 ax [738])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:432 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -797 [0xfffffffffffffce3])) [0 ir_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1444 1443 1445 117 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:434 D.6106 ] [434])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:432 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1445 1444 1446 117 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1460)
            (pc))) sim2fitman_com_line.cpp:432 596 {*jcc_1}
     (nil)
 -> 1460)
;;  succ:       118 (FALLTHRU)
;;              121
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 118, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 117, next block 119, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       117 (FALLTHRU)
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 435 739
(note 1446 1445 1447 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn 1447 1446 1448 118 (set (reg:QI 0 ax [739])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])) sim2fitman_com_line.cpp:432 93 {*movqi_internal}
     (nil))
(insn 1448 1447 1449 118 (parallel [
            (set (reg:QI 0 ax [orig:435 D.6106 ] [435])
                (xor:QI (reg:QI 0 ax [739])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:432 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -796 [0xfffffffffffffce4])) [0 irn_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1449 1448 1450 118 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:435 D.6106 ] [435])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:432 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1450 1449 1451 118 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1460)
            (pc))) sim2fitman_com_line.cpp:432 596 {*jcc_1}
     (nil)
 -> 1460)
;;  succ:       119 (FALLTHRU)
;;              121
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 119, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 118, next block 120, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       118 (FALLTHRU)
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 436 740
(note 1451 1450 1452 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(insn 1452 1451 1453 119 (set (reg/f:DI 0 ax [740])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:432 89 {*movdi_internal}
     (nil))
(insn 1453 1452 1454 119 (set (reg:QI 0 ax [orig:436 D.6106 ] [436])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [740])
                (const_int 72 [0x48])) [0 preprocess_34(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:432 93 {*movqi_internal}
     (nil))
(insn 1454 1453 1455 119 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:436 D.6106 ] [436])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:432 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1455 1454 1456 119 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1460)
            (pc))) sim2fitman_com_line.cpp:432 596 {*jcc_1}
     (nil)
 -> 1460)
;;  succ:       120 (FALLTHRU)
;;              121
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 120, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 119, next block 121, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       119 (FALLTHRU)
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1456 1455 1457 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn 1457 1456 1791 120 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -4 [0xfffffffffffffffc])) sim2fitman_com_line.cpp:434 90 {*movsi_internal}
     (nil))
(jump_insn 1791 1457 1792 120 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:434 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1792 1791 1460)
;; basic block 121, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 120, next block 122, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       117
;;              118
;;              119
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1460 1792 1461 121 62 "" [3 uses])
(note 1461 1460 1462 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn 1462 1461 1463 121 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:435 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1463 1462 1464 121 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1467)
            (pc))) sim2fitman_com_line.cpp:435 596 {*jcc_1}
     (nil)
 -> 1467)
;;  succ:       123
;;              122 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 122, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 121, next block 123, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       121 (FALLTHRU)
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1464 1463 1465 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 1465 1464 1466 122 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:435 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1466 1465 1467 122 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1528)
            (pc))) sim2fitman_com_line.cpp:435 596 {*jcc_1}
     (nil)
 -> 1528)
;;  succ:       123 (FALLTHRU)
;;              135
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 123, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 122, next block 124, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       121
;;              122 (FALLTHRU)
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 437 438 741
(code_label 1467 1466 1468 123 63 "" [1 uses])
(note 1468 1467 1469 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 1469 1468 1470 123 (set (reg/f:DI 0 ax [741])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:435 89 {*movdi_internal}
     (nil))
(insn 1470 1469 1471 123 (set (reg:QI 0 ax [orig:437 D.6106 ] [437])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [741])
                (const_int 72 [0x48])) [0 preprocess_34(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:435 93 {*movqi_internal}
     (nil))
(insn 1471 1470 1472 123 (parallel [
            (set (reg:QI 0 ax [orig:438 D.6106 ] [438])
                (xor:QI (reg:QI 0 ax [orig:437 D.6106 ] [437])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:435 395 {*xorqi_1}
     (nil))
(insn 1472 1471 1473 123 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:438 D.6106 ] [438])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:435 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1473 1472 1474 123 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1528)
            (pc))) sim2fitman_com_line.cpp:435 596 {*jcc_1}
     (nil)
 -> 1528)
;;  succ:       124 (FALLTHRU)
;;              135
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 124, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 123, next block 125, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       123 (FALLTHRU)
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1474 1473 1475 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn 1475 1474 1793 124 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -6 [0xfffffffffffffffa])) sim2fitman_com_line.cpp:437 90 {*movsi_internal}
     (nil))
(jump_insn 1793 1475 1794 124 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:437 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1794 1793 1482)
;; basic block 125, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 124, next block 126, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1482 1794 1483 125 55 "" [1 uses])
(note 1483 1482 1484 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(insn 1484 1483 1485 125 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_com_line.cpp:442 7 {*cmpsi_1}
     (nil))
(jump_insn 1485 1484 1486 125 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1528)
            (pc))) sim2fitman_com_line.cpp:442 596 {*jcc_1}
     (nil)
 -> 1528)
;;  succ:       126 (FALLTHRU)
;;              135
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 126, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 125, next block 127, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       125 (FALLTHRU)
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 439 742
(note 1486 1485 1487 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(insn 1487 1486 1488 126 (set (reg:QI 0 ax [742])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])) sim2fitman_com_line.cpp:444 93 {*movqi_internal}
     (nil))
(insn 1488 1487 1489 126 (parallel [
            (set (reg:QI 0 ax [orig:439 D.6106 ] [439])
                (xor:QI (reg:QI 0 ax [742])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:444 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -797 [0xfffffffffffffce3])) [0 ir_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1489 1488 1490 126 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:439 D.6106 ] [439])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:444 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1490 1489 1491 126 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1505)
            (pc))) sim2fitman_com_line.cpp:444 596 {*jcc_1}
     (nil)
 -> 1505)
;;  succ:       127 (FALLTHRU)
;;              130
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 127, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 126, next block 128, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       126 (FALLTHRU)
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 440 743
(note 1491 1490 1492 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 1492 1491 1493 127 (set (reg:QI 0 ax [743])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])) sim2fitman_com_line.cpp:444 93 {*movqi_internal}
     (nil))
(insn 1493 1492 1494 127 (parallel [
            (set (reg:QI 0 ax [orig:440 D.6106 ] [440])
                (xor:QI (reg:QI 0 ax [743])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:444 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -796 [0xfffffffffffffce4])) [0 irn_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1494 1493 1495 127 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:440 D.6106 ] [440])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:444 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1495 1494 1496 127 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1505)
            (pc))) sim2fitman_com_line.cpp:444 596 {*jcc_1}
     (nil)
 -> 1505)
;;  succ:       128 (FALLTHRU)
;;              130
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 128, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 127, next block 129, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       127 (FALLTHRU)
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 441 744
(note 1496 1495 1497 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn 1497 1496 1498 128 (set (reg/f:DI 0 ax [744])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:444 89 {*movdi_internal}
     (nil))
(insn 1498 1497 1499 128 (set (reg:QI 0 ax [orig:441 D.6106 ] [441])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [744])
                (const_int 72 [0x48])) [0 preprocess_34(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:444 93 {*movqi_internal}
     (nil))
(insn 1499 1498 1500 128 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:441 D.6106 ] [441])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:444 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1500 1499 1501 128 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1505)
            (pc))) sim2fitman_com_line.cpp:444 596 {*jcc_1}
     (nil)
 -> 1505)
;;  succ:       129 (FALLTHRU)
;;              130
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 129, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 128, next block 130, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       128 (FALLTHRU)
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1501 1500 1502 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn 1502 1501 1795 129 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -13 [0xfffffffffffffff3])) sim2fitman_com_line.cpp:446 90 {*movsi_internal}
     (nil))
(jump_insn 1795 1502 1796 129 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:446 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1796 1795 1505)
;; basic block 130, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 129, next block 131, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       126
;;              127
;;              128
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1505 1796 1506 130 64 "" [3 uses])
(note 1506 1505 1507 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn 1507 1506 1508 130 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:447 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1508 1507 1509 130 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1512)
            (pc))) sim2fitman_com_line.cpp:447 596 {*jcc_1}
     (nil)
 -> 1512)
;;  succ:       132
;;              131 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 131, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 130, next block 132, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       130 (FALLTHRU)
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1509 1508 1510 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn 1510 1509 1511 131 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:447 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1511 1510 1512 131 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1523)
            (pc))) sim2fitman_com_line.cpp:447 596 {*jcc_1}
     (nil)
 -> 1523)
;;  succ:       132 (FALLTHRU)
;;              134
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 132, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 131, next block 133, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       130
;;              131 (FALLTHRU)
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 442 443 745
(code_label 1512 1511 1513 132 65 "" [1 uses])
(note 1513 1512 1514 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn 1514 1513 1515 132 (set (reg/f:DI 0 ax [745])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:447 89 {*movdi_internal}
     (nil))
(insn 1515 1514 1516 132 (set (reg:QI 0 ax [orig:442 D.6106 ] [442])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [745])
                (const_int 72 [0x48])) [0 preprocess_34(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:447 93 {*movqi_internal}
     (nil))
(insn 1516 1515 1517 132 (parallel [
            (set (reg:QI 0 ax [orig:443 D.6106 ] [443])
                (xor:QI (reg:QI 0 ax [orig:442 D.6106 ] [442])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:447 395 {*xorqi_1}
     (nil))
(insn 1517 1516 1518 132 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:443 D.6106 ] [443])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:447 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1518 1517 1519 132 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1523)
            (pc))) sim2fitman_com_line.cpp:447 596 {*jcc_1}
     (nil)
 -> 1523)
;;  succ:       133 (FALLTHRU)
;;              134
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 133, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 132, next block 134, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       132 (FALLTHRU)
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1519 1518 1520 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(insn 1520 1519 1797 133 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -6 [0xfffffffffffffffa])) sim2fitman_com_line.cpp:449 90 {*movsi_internal}
     (nil))
(jump_insn 1797 1520 1798 133 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:449 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1798 1797 1523)
;; basic block 134, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 133, next block 135, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       131
;;              132
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 1523 1798 1524 134 66 "" [2 uses])
(note 1524 1523 1525 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(insn 1525 1524 1799 134 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -4 [0xfffffffffffffffc])) sim2fitman_com_line.cpp:452 90 {*movsi_internal}
     (nil))
(jump_insn 1799 1525 1800 134 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:452 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1800 1799 1528)
;; basic block 135, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 134, next block 136, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       100
;;              123
;;              125
;;              122
;;              116 [100.0%] 
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1528 1800 1529 135 54 "" [5 uses])
(note 1529 1528 1530 135 [bb 135] NOTE_INSN_BASIC_BLOCK)
(insn 1530 1529 1531 135 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:456 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1531 1530 1532 135 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1637)
            (pc))) sim2fitman_com_line.cpp:456 596 {*jcc_1}
     (nil)
 -> 1637)
;;  succ:       136 (FALLTHRU)
;;              141
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 136, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 135, next block 137, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       135 (FALLTHRU)
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 444 445 446 746 747 748 749
(note 1532 1531 1533 136 [bb 136] NOTE_INSN_BASIC_BLOCK)
(insn 1533 1532 1534 136 (set (reg/f:DI 0 ax [orig:444 D.6111 ] [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:459 89 {*movdi_internal}
     (nil))
(insn 1534 1533 1535 136 (parallel [
            (set (reg:DI 1 dx [746])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:459 221 {*adddi_1}
     (nil))
(insn 1535 1534 1536 136 (set (reg:DI 4 si)
        (reg:DI 1 dx [746])) sim2fitman_com_line.cpp:459 89 {*movdi_internal}
     (nil))
(insn 1536 1535 1537 136 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:444 D.6111 ] [444])) sim2fitman_com_line.cpp:459 89 {*movdi_internal}
     (nil))
(call_insn 1537 1536 1538 136 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:459 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1538 1537 1539 136 (set (reg/f:DI 0 ax [747])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])) sim2fitman_com_line.cpp:461 89 {*movdi_internal}
     (nil))
(insn 1539 1538 1540 136 (parallel [
            (set (reg/f:DI 1 dx [orig:445 D.6112 ] [445])
                (plus:DI (reg/f:DI 0 ax [747])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:461 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 procpar_info+0 S8 A64])
            (const_int 60 [0x3c]))
        (nil)))
(insn 1540 1539 1541 136 (parallel [
            (set (reg:DI 0 ax [748])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:461 221 {*adddi_1}
     (nil))
(insn 1541 1540 1542 136 (set (reg:DI 4 si)
        (reg:DI 0 ax [748])) sim2fitman_com_line.cpp:461 89 {*movdi_internal}
     (nil))
(insn 1542 1541 1543 136 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:445 D.6112 ] [445])) sim2fitman_com_line.cpp:461 89 {*movdi_internal}
     (nil))
(call_insn 1543 1542 1544 136 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:461 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1544 1543 1545 136 (set (reg/f:DI 0 ax [749])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:463 89 {*movdi_internal}
     (nil))
(insn 1545 1544 1546 136 (set (reg:SI 0 ax [orig:446 D.6100 ] [446])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [749])
                (const_int 56 [0x38])) [0 preprocess_34(D)->input_file_type+0 S4 A32])) sim2fitman_com_line.cpp:463 90 {*movsi_internal}
     (nil))
(insn 1546 1545 1547 136 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:446 D.6100 ] [446])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:463 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1547 1546 1548 136 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1555)
            (pc))) sim2fitman_com_line.cpp:463 596 {*jcc_1}
     (nil)
 -> 1555)
;;  succ:       137 (FALLTHRU)
;;              138
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 137, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 136, next block 138, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       136 (FALLTHRU)
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 447 750 751
(note 1548 1547 1549 137 [bb 137] NOTE_INSN_BASIC_BLOCK)
(insn 1549 1548 1550 137 (set (reg/f:DI 0 ax [750])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:464 89 {*movdi_internal}
     (nil))
(insn 1550 1549 1551 137 (parallel [
            (set (reg/f:DI 1 dx [orig:447 D.6111 ] [447])
                (plus:DI (reg/f:DI 0 ax [750])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:464 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 1551 1550 1552 137 (parallel [
            (set (reg:DI 0 ax [751])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:464 221 {*adddi_1}
     (nil))
(insn 1552 1551 1553 137 (set (reg:DI 4 si)
        (reg:DI 0 ax [751])) sim2fitman_com_line.cpp:464 89 {*movdi_internal}
     (nil))
(insn 1553 1552 1554 137 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:447 D.6111 ] [447])) sim2fitman_com_line.cpp:464 89 {*movdi_internal}
     (nil))
(call_insn 1554 1553 1555 137 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:464 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
;;  succ:       138 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 138, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 137, next block 139, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       136
;;              137 (FALLTHRU)
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1555 1554 1556 138 68 "" [1 uses])
(note 1556 1555 1557 138 [bb 138] NOTE_INSN_BASIC_BLOCK)
(insn 1557 1556 1558 138 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])) [0 num_filenames+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_com_line.cpp:467 7 {*cmpsi_1}
     (nil))
(jump_insn 1558 1557 1559 138 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1597)
            (pc))) sim2fitman_com_line.cpp:467 596 {*jcc_1}
     (nil)
 -> 1597)
;;  succ:       139 (FALLTHRU)
;;              140
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 139, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 138, next block 140, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       138 (FALLTHRU)
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 448 449 450 451 452 453 454 455 456 752 753 754 755 756 757 758 759 760 761 762
(note 1559 1558 1560 139 [bb 139] NOTE_INSN_BASIC_BLOCK)
(insn 1560 1559 1561 139 (set (reg/f:DI 0 ax [orig:448 D.6111 ] [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:471 89 {*movdi_internal}
     (nil))
(insn 1561 1560 1562 139 (set (reg/f:DI 1 dx [752])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:471 89 {*movdi_internal}
     (nil))
(insn 1562 1561 1563 139 (parallel [
            (set (reg/f:DI 1 dx [orig:449 D.6111 ] [449])
                (plus:DI (reg/f:DI 1 dx [752])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:471 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1563 1562 1564 139 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:448 D.6111 ] [448])) sim2fitman_com_line.cpp:471 89 {*movdi_internal}
     (nil))
(insn 1564 1563 1565 139 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:449 D.6111 ] [449])) sim2fitman_com_line.cpp:471 89 {*movdi_internal}
     (nil))
(call_insn 1565 1564 1566 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:471 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1566 1565 1567 139 (set (reg/f:DI 0 ax [753])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:473 89 {*movdi_internal}
     (nil))
(insn 1567 1566 1568 139 (parallel [
            (set (reg/f:DI 1 dx [orig:450 D.6111 ] [450])
                (plus:DI (reg/f:DI 0 ax [753])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:473 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 1568 1567 1569 139 (set (reg/f:DI 0 ax [754])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:473 89 {*movdi_internal}
     (nil))
(insn 1569 1568 1570 139 (parallel [
            (set (reg/f:DI 0 ax [orig:451 D.6111 ] [451])
                (plus:DI (reg/f:DI 0 ax [754])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:473 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1570 1569 1571 139 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:450 D.6111 ] [450])) sim2fitman_com_line.cpp:473 89 {*movdi_internal}
     (nil))
(insn 1571 1570 1572 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:451 D.6111 ] [451])) sim2fitman_com_line.cpp:473 89 {*movdi_internal}
     (nil))
(call_insn 1572 1571 1573 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:473 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1573 1572 1574 139 (set (reg/f:DI 0 ax [755])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])) sim2fitman_com_line.cpp:475 89 {*movdi_internal}
     (nil))
(insn 1574 1573 1575 139 (parallel [
            (set (reg/f:DI 1 dx [orig:452 D.6112 ] [452])
                (plus:DI (reg/f:DI 0 ax [755])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:475 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 procpar_info+0 S8 A64])
            (const_int 60 [0x3c]))
        (nil)))
(insn 1575 1574 1576 139 (set (reg/f:DI 0 ax [756])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])) sim2fitman_com_line.cpp:475 89 {*movdi_internal}
     (nil))
(insn 1576 1575 1577 139 (parallel [
            (set (reg/f:DI 0 ax [orig:453 D.6113 ] [453])
                (plus:DI (reg/f:DI 0 ax [756])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:475 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 procpar_info+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1577 1576 1578 139 (parallel [
            (set (reg/f:DI 0 ax [orig:454 D.6112 ] [454])
                (plus:DI (reg/f:DI 0 ax [orig:453 D.6113 ] [453])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:475 221 {*adddi_1}
     (nil))
(insn 1578 1577 1579 139 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:452 D.6112 ] [452])) sim2fitman_com_line.cpp:475 89 {*movdi_internal}
     (nil))
(insn 1579 1578 1580 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:454 D.6112 ] [454])) sim2fitman_com_line.cpp:475 89 {*movdi_internal}
     (nil))
(call_insn 1580 1579 1581 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:475 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1581 1580 1582 139 (set (reg/f:DI 0 ax [757])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1582 1581 1583 139 (parallel [
            (set (reg/f:DI 0 ax [orig:455 D.6111 ] [455])
                (plus:DI (reg/f:DI 0 ax [757])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:477 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1583 1582 1584 139 (parallel [
            (set (reg:DI 1 dx [758])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:477 221 {*adddi_1}
     (nil))
(insn 1584 1583 1585 139 (parallel [
            (set (reg:DI 1 dx [759])
                (plus:DI (reg:DI 1 dx [758])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:477 221 {*adddi_1}
     (nil))
(insn 1585 1584 1586 139 (set (reg:DI 4 si)
        (reg:DI 1 dx [759])) sim2fitman_com_line.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1586 1585 1587 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:455 D.6111 ] [455])) sim2fitman_com_line.cpp:477 89 {*movdi_internal}
     (nil))
(call_insn 1587 1586 1588 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:477 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1588 1587 1589 139 (set (reg/f:DI 0 ax [760])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:478 89 {*movdi_internal}
     (nil))
(insn 1589 1588 1590 139 (parallel [
            (set (reg/f:DI 0 ax [orig:456 D.6111 ] [456])
                (plus:DI (reg/f:DI 0 ax [760])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:478 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1590 1589 1591 139 (parallel [
            (set (reg:DI 1 dx [761])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:478 221 {*adddi_1}
     (nil))
(insn 1591 1590 1592 139 (parallel [
            (set (reg:DI 1 dx [762])
                (plus:DI (reg:DI 1 dx [761])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:478 221 {*adddi_1}
     (nil))
(insn 1592 1591 1593 139 (set (reg:DI 4 si)
        (reg:DI 1 dx [762])) sim2fitman_com_line.cpp:478 89 {*movdi_internal}
     (nil))
(insn 1593 1592 1594 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:456 D.6111 ] [456])) sim2fitman_com_line.cpp:478 89 {*movdi_internal}
     (nil))
(call_insn 1594 1593 1801 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:478 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 1801 1594 1802 139 (set (pc)
        (label_ref 1637)) 636 {jump}
     (nil)
 -> 1637)
;;  succ:       141 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1802 1801 1597)
;; basic block 140, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 139, next block 141, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       138
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 457 458 459 460 461 462 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777
(code_label 1597 1802 1598 140 69 "" [1 uses])
(note 1598 1597 1599 140 [bb 140] NOTE_INSN_BASIC_BLOCK)
(insn 1599 1598 1600 140 (set (reg/f:DI 0 ax [763])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:482 89 {*movdi_internal}
     (nil))
(insn 1600 1599 1601 140 (parallel [
            (set (reg/f:DI 0 ax [orig:457 D.6111 ] [457])
                (plus:DI (reg/f:DI 0 ax [763])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:482 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1601 1600 1602 140 (parallel [
            (set (reg:DI 1 dx [764])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:482 221 {*adddi_1}
     (nil))
(insn 1602 1601 1603 140 (parallel [
            (set (reg:DI 1 dx [765])
                (plus:DI (reg:DI 1 dx [764])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:482 221 {*adddi_1}
     (nil))
(insn 1603 1602 1604 140 (set (reg:DI 4 si)
        (reg:DI 1 dx [765])) sim2fitman_com_line.cpp:482 89 {*movdi_internal}
     (nil))
(insn 1604 1603 1605 140 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:457 D.6111 ] [457])) sim2fitman_com_line.cpp:482 89 {*movdi_internal}
     (nil))
(call_insn 1605 1604 1606 140 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:482 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1606 1605 1607 140 (set (reg/f:DI 0 ax [766])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:484 89 {*movdi_internal}
     (nil))
(insn 1607 1606 1608 140 (parallel [
            (set (reg/f:DI 0 ax [orig:458 D.6111 ] [458])
                (plus:DI (reg/f:DI 0 ax [766])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:484 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1608 1607 1609 140 (parallel [
            (set (reg:DI 1 dx [767])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:484 221 {*adddi_1}
     (nil))
(insn 1609 1608 1610 140 (parallel [
            (set (reg:DI 1 dx [768])
                (plus:DI (reg:DI 1 dx [767])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:484 221 {*adddi_1}
     (nil))
(insn 1610 1609 1611 140 (set (reg:DI 4 si)
        (reg:DI 1 dx [768])) sim2fitman_com_line.cpp:484 89 {*movdi_internal}
     (nil))
(insn 1611 1610 1612 140 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:458 D.6111 ] [458])) sim2fitman_com_line.cpp:484 89 {*movdi_internal}
     (nil))
(call_insn 1612 1611 1613 140 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:484 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1613 1612 1614 140 (set (reg/f:DI 0 ax [769])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])) sim2fitman_com_line.cpp:486 89 {*movdi_internal}
     (nil))
(insn 1614 1613 1615 140 (parallel [
            (set (reg/f:DI 0 ax [orig:459 D.6113 ] [459])
                (plus:DI (reg/f:DI 0 ax [769])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:486 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 procpar_info+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1615 1614 1616 140 (parallel [
            (set (reg/f:DI 0 ax [orig:460 D.6112 ] [460])
                (plus:DI (reg/f:DI 0 ax [orig:459 D.6113 ] [459])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:486 221 {*adddi_1}
     (nil))
(insn 1616 1615 1617 140 (parallel [
            (set (reg:DI 1 dx [770])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:486 221 {*adddi_1}
     (nil))
(insn 1617 1616 1618 140 (parallel [
            (set (reg:DI 1 dx [771])
                (plus:DI (reg:DI 1 dx [770])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:486 221 {*adddi_1}
     (nil))
(insn 1618 1617 1619 140 (set (reg:DI 4 si)
        (reg:DI 1 dx [771])) sim2fitman_com_line.cpp:486 89 {*movdi_internal}
     (nil))
(insn 1619 1618 1620 140 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:460 D.6112 ] [460])) sim2fitman_com_line.cpp:486 89 {*movdi_internal}
     (nil))
(call_insn 1620 1619 1621 140 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:486 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1621 1620 1622 140 (set (reg/f:DI 0 ax [772])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:488 89 {*movdi_internal}
     (nil))
(insn 1622 1621 1623 140 (parallel [
            (set (reg/f:DI 0 ax [orig:461 D.6111 ] [461])
                (plus:DI (reg/f:DI 0 ax [772])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:488 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1623 1622 1624 140 (parallel [
            (set (reg:DI 1 dx [773])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:488 221 {*adddi_1}
     (nil))
(insn 1624 1623 1625 140 (parallel [
            (set (reg:DI 1 dx [774])
                (plus:DI (reg:DI 1 dx [773])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:488 221 {*adddi_1}
     (nil))
(insn 1625 1624 1626 140 (set (reg:DI 4 si)
        (reg:DI 1 dx [774])) sim2fitman_com_line.cpp:488 89 {*movdi_internal}
     (nil))
(insn 1626 1625 1627 140 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:461 D.6111 ] [461])) sim2fitman_com_line.cpp:488 89 {*movdi_internal}
     (nil))
(call_insn 1627 1626 1628 140 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:488 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1628 1627 1629 140 (set (reg/f:DI 0 ax [775])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:489 89 {*movdi_internal}
     (nil))
(insn 1629 1628 1630 140 (parallel [
            (set (reg/f:DI 0 ax [orig:462 D.6111 ] [462])
                (plus:DI (reg/f:DI 0 ax [775])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:489 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1630 1629 1631 140 (parallel [
            (set (reg:DI 1 dx [776])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -784 [0xfffffffffffffcf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:489 221 {*adddi_1}
     (nil))
(insn 1631 1630 1632 140 (parallel [
            (set (reg:DI 1 dx [777])
                (plus:DI (reg:DI 1 dx [776])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:489 221 {*adddi_1}
     (nil))
(insn 1632 1631 1633 140 (set (reg:DI 4 si)
        (reg:DI 1 dx [777])) sim2fitman_com_line.cpp:489 89 {*movdi_internal}
     (nil))
(insn 1633 1632 1634 140 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:462 D.6111 ] [462])) sim2fitman_com_line.cpp:489 89 {*movdi_internal}
     (nil))
(call_insn 1634 1633 1637 140 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b4b6e0e9600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:489 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
;;  succ:       141 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 141, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 140, next block 142, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       135
;;              140 (FALLTHRU)
;;              139 [100.0%] 
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 463 464
(code_label 1637 1634 1638 141 67 "" [2 uses])
(note 1638 1637 1639 141 [bb 141] NOTE_INSN_BASIC_BLOCK)
(insn 1639 1638 1640 141 (set (reg/f:DI 0 ax [orig:463 D.6111 ] [463])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:494 89 {*movdi_internal}
     (nil))
(insn 1640 1639 1641 141 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b4b6e49e980 *.LC27>)) sim2fitman_com_line.cpp:494 89 {*movdi_internal}
     (nil))
(insn 1641 1640 1642 141 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:463 D.6111 ] [463])) sim2fitman_com_line.cpp:494 89 {*movdi_internal}
     (nil))
(call_insn/i 1642 1641 1643 141 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:494 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1643 1642 1644 141 (set (reg:SI 0 ax [orig:464 D.6100 ] [464])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:494 90 {*movsi_internal}
     (nil))
(insn 1644 1643 1645 141 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:464 D.6100 ] [464])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:494 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1645 1644 1646 141 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1650)
            (pc))) sim2fitman_com_line.cpp:494 596 {*jcc_1}
     (nil)
 -> 1650)
;;  succ:       142 (FALLTHRU)
;;              143
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 142, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 141, next block 143, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       141 (FALLTHRU)
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1646 1645 1647 142 [bb 142] NOTE_INSN_BASIC_BLOCK)
(insn 1647 1646 1803 142 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -3 [0xfffffffffffffffd])) sim2fitman_com_line.cpp:495 90 {*movsi_internal}
     (nil))
(jump_insn 1803 1647 1804 142 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:495 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1804 1803 1650)
;; basic block 143, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 142, next block 144, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       141
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 465 466 778
(code_label 1650 1804 1651 143 71 "" [1 uses])
(note 1651 1650 1652 143 [bb 143] NOTE_INSN_BASIC_BLOCK)
(insn 1652 1651 1653 143 (set (reg/f:DI 0 ax [778])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:499 89 {*movdi_internal}
     (nil))
(insn 1653 1652 1654 143 (parallel [
            (set (reg/f:DI 0 ax [orig:465 D.6111 ] [465])
                (plus:DI (reg/f:DI 0 ax [778])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:499 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -832 [0xfffffffffffffcc0])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1654 1653 1655 143 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2b4b6e49e980 *.LC27>)) sim2fitman_com_line.cpp:499 89 {*movdi_internal}
     (nil))
(insn 1655 1654 1656 143 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:465 D.6111 ] [465])) sim2fitman_com_line.cpp:499 89 {*movdi_internal}
     (nil))
(call_insn/i 1656 1655 1657 143 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b4b6e0e9300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:499 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1657 1656 1658 143 (set (reg:SI 0 ax [orig:466 D.6100 ] [466])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:499 90 {*movsi_internal}
     (nil))
(insn 1658 1657 1659 143 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:466 D.6100 ] [466])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:499 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1659 1658 1660 143 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1664)
            (pc))) sim2fitman_com_line.cpp:499 596 {*jcc_1}
     (nil)
 -> 1664)
;;  succ:       144 (FALLTHRU)
;;              145
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 144, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 143, next block 145, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       143 (FALLTHRU)
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1660 1659 1661 144 [bb 144] NOTE_INSN_BASIC_BLOCK)
(insn 1661 1660 1805 144 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int -4 [0xfffffffffffffffc])) sim2fitman_com_line.cpp:500 90 {*movsi_internal}
     (nil))
(jump_insn 1805 1661 1806 144 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:500 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1806 1805 1664)
;; basic block 145, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 144, next block 146, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       143
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1664 1806 1665 145 72 "" [1 uses])
(note 1665 1664 1666 145 [bb 145] NOTE_INSN_BASIC_BLOCK)
(insn 1666 1665 1667 145 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -815 [0xfffffffffffffcd1])) [0 only_suppressed+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:503 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1667 1666 1668 145 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1672)
            (pc))) sim2fitman_com_line.cpp:503 596 {*jcc_1}
     (nil)
 -> 1672)
;;  succ:       146 (FALLTHRU)
;;              147
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 146, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 145, next block 147, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       145 (FALLTHRU)
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1668 1667 1669 146 [bb 146] NOTE_INSN_BASIC_BLOCK)
(insn 1669 1668 1807 146 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:505 90 {*movsi_internal}
     (nil))
(jump_insn 1807 1669 1808 146 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:505 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1808 1807 1672)
;; basic block 147, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 146, next block 148, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       145
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1672 1808 1673 147 73 "" [1 uses])
(note 1673 1672 1674 147 [bb 147] NOTE_INSN_BASIC_BLOCK)
(insn 1674 1673 1675 147 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -814 [0xfffffffffffffcd2])) [0 only_unsuppressed+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:506 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1675 1674 1676 147 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1680)
            (pc))) sim2fitman_com_line.cpp:506 596 {*jcc_1}
     (nil)
 -> 1680)
;;  succ:       148 (FALLTHRU)
;;              149
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 148, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 147, next block 149, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       147 (FALLTHRU)
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 1676 1675 1677 148 [bb 148] NOTE_INSN_BASIC_BLOCK)
(insn 1677 1676 1809 148 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int 2 [0x2])) sim2fitman_com_line.cpp:508 90 {*movsi_internal}
     (nil))
(jump_insn 1809 1677 1810 148 (set (pc)
        (label_ref 1685)) sim2fitman_com_line.cpp:508 636 {jump}
     (nil)
 -> 1685)
;;  succ:       150 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 1810 1809 1680)
;; basic block 149, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 148, next block 150, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       147
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 1680 1810 1681 149 74 "" [1 uses])
(note 1681 1680 1682 149 [bb 149] NOTE_INSN_BASIC_BLOCK)
(insn 1682 1681 1685 149 (set (reg:SI 0 ax [orig:83 D.6100 ] [83])
        (const_int 0 [0])) sim2fitman_com_line.cpp:511 90 {*movsi_internal}
     (nil))
;;  succ:       150 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 150, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 149, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       149 (FALLTHRU)
;;              146 [100.0%] 
;;              8 [100.0%] 
;;              14 [100.0%] 
;;              20 [100.0%] 
;;              25 [100.0%] 
;;              27 [100.0%] 
;;              36 [100.0%] 
;;              40 [100.0%] 
;;              45 [100.0%] 
;;              46 [100.0%] 
;;              51 [100.0%] 
;;              52 [100.0%] 
;;              56 [100.0%] 
;;              69 [100.0%] 
;;              73 [100.0%] 
;;              77 [100.0%] 
;;              81 [100.0%] 
;;              89 [100.0%] 
;;              95 [100.0%] 
;;              99 [100.0%] 
;;              101 [100.0%] 
;;              120 [100.0%] 
;;              124 [100.0%] 
;;              129 [100.0%] 
;;              133 [100.0%] 
;;              134 [100.0%] 
;;              142 [100.0%] 
;;              144 [100.0%] 
;;              148 [100.0%] 
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 467
(code_label 1685 1682 1686 150 75 "" [29 uses])
(note 1686 1685 1687 150 [bb 150] NOTE_INSN_BASIC_BLOCK)
(insn 1687 1686 1691 150 (set (reg:SI 0 ax [orig:467 <retval> ] [467])
        (reg:SI 0 ax [orig:83 D.6100 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 1691 1687 1692 150 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:467 <retval> ] [467])) sim2fitman_com_line.cpp:513 90 {*movsi_internal}
     (nil))
(insn 1692 1691 1811 150 (use (reg/i:SI 0 ax)) sim2fitman_com_line.cpp:513 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1811 1692 0 NOTE_INSN_DELETED)
