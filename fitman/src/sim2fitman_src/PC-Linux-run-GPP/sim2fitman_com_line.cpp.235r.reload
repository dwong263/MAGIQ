
;; Function int command_line(Preprocess*, IOFiles*, Procpar_info*, int, char**, int*, int*, int*, bool*, bool*) (_Z12command_lineP10PreprocessP7IOFilesP12Procpar_infoiPPcPiS7_S7_PbS8_, funcdef_no=2, decl_uid=5403, cgraph_uid=2, symbol_order=2)

      Creating newreg=788
Removing SCRATCH in insn #17 (nop 2)
rescanning insn with uid = 17.
      Creating newreg=789
Removing SCRATCH in insn #1701 (nop 3)
rescanning insn with uid = 1701.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=944, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=912, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r788
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 23:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 25:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 26:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 27:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 33:  (0) r  (1) i {*movdi_internal}
      Creating newreg=790, assigning class GENERAL_REGS to r790
   33: r790:DI=0x6e656c6946206f4e
    Inserting insn reload after:
 1830: [r476:DI]=r790:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1830:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 34:  (0) r  (1) i {*movdi_internal}
      Creating newreg=791, assigning class GENERAL_REGS to r791
   34: r791:DI=0x6961764120656d61
    Inserting insn reload after:
 1831: [r476:DI+0x8]=r791:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1831:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 37:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 39:  (0) r  (1) i {*movdi_internal}
      Creating newreg=792, assigning class GENERAL_REGS to r792
   39: r792:DI=0x6e656c6946206f4e
    Inserting insn reload after:
 1832: [r478:DI]=r792:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1832:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 40:  (0) r  (1) i {*movdi_internal}
      Creating newreg=793, assigning class GENERAL_REGS to r793
   40: r793:DI=0x6961764120656d61
    Inserting insn reload after:
 1833: [r478:DI+0x8]=r793:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1833:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 43:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 45:  (0) r  (1) i {*movdi_internal}
      Creating newreg=794, assigning class GENERAL_REGS to r794
   45: r794:DI=0x6e656c6946206f4e
    Inserting insn reload after:
 1834: [r480:DI]=r794:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1834:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 46:  (0) r  (1) i {*movdi_internal}
      Creating newreg=795, assigning class GENERAL_REGS to r795
   46: r795:DI=0x6961764120656d61
    Inserting insn reload after:
 1835: [r480:DI+0x8]=r795:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 1835:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 65
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 78
	 Choosing alt 0 in insn 78:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 91
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 92:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 93:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 118
	 Choosing alt 0 in insn 118:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 131
	 Choosing alt 0 in insn 131:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 144
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 145:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 157
	 Choosing alt 0 in insn 157:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 158:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 159:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 171
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 197
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 200:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 210
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 211:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 224:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 225:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 227:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 237
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 238:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 240:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 250
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 251:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 263
	 Choosing alt 0 in insn 263:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 276
	 Choosing alt 0 in insn 276:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 277:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 289
	 Choosing alt 0 in insn 289:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 290:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 302
	 Choosing alt 0 in insn 302:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 303:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 304:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 310:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 311:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 315:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 320:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 321:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 322
	 Choosing alt 0 in insn 322:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 323:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 324:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 338:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 340
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 342:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 344:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 350:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 357:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 358:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 359
	 Choosing alt 0 in insn 359:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 360:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 361:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 370:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 371:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 372
	 Choosing alt 0 in insn 372:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 374:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 383:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 385
	 Choosing alt 0 in insn 385:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 387:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 396:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 405:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 406:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 409:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 410:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 411
	 Choosing alt 0 in insn 411:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 413:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 432
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 434:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 436:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 438:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 448
	 Choosing alt 0 in insn 448:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 449:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 454:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 455:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 456
	 Choosing alt 0 in insn 456:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 458:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 476:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 477
	 Choosing alt 0 in insn 477:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 478:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 479:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 482:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 484
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 492:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 494:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 508:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 509
	 Choosing alt 0 in insn 509:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 510:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 515:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 518:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 520:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 525:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 529:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 533:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 534:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 535
	 Choosing alt 0 in insn 535:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 536:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 541:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 542:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 553:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 554
	 Choosing alt 0 in insn 554:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 555:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 567:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 568:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 569
	 Choosing alt 0 in insn 569:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 570:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 571:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 578:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 580:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 585:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 589:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 590
	 Choosing alt 0 in insn 590:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 591:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 592:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 593:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 595:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 597
	 Choosing alt 0 in insn 597:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 598:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 605:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 606:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 607:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 610:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 611:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 616:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 617:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 620:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 621:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 622
	 Choosing alt 0 in insn 622:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 623:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 625:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 628:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 638:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 639:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 641:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 642:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 643
	 Choosing alt 0 in insn 643:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 644:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 646:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 651:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 652:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 653:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 656:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 657:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 659:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 663:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 666:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 667:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 668
	 Choosing alt 0 in insn 668:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 674:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 675:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 676:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 677:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 679:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 682:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 683:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 684:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 685:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 688:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 689:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 690:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 692:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 693:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 695:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 698:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 699:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 704:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 705:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 707:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 708:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 709:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 710
	 Choosing alt 0 in insn 710:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 711:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 715:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 716:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 717:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 719:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 725:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 728:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 729
	 Choosing alt 0 in insn 729:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 730:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 744:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 745:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 746:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 747:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 748
	 Choosing alt 0 in insn 748:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 749:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 750:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 752:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 758:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 760:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 764:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 765:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 766:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 767:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 768
	 Choosing alt 0 in insn 768:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 769:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 770:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 772:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 774:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 777:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 778:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 779:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 780:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 784:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 785:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 786:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 787:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 788
	 Choosing alt 0 in insn 788:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 789:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 790:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 794:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 797:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 798:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 800:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 803:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 804:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 805:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 806:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 807:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 812:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 817:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 819:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 820:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 821
	 Choosing alt 0 in insn 821:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 822:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 823:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 825:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 827:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 830:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 831:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 832:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 833:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 834:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 837:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 838:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 839:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 840:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 841:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 842:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 843:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 844:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 849:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 854:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 855:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 856:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 857:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 858
	 Choosing alt 0 in insn 858:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 859:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 860:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 862:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 864:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 867:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 868:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 869:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 870:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 873:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 874:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 875:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 876:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 877:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 878:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 879:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 880
	 Choosing alt 0 in insn 880:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 881:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 883:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 885:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 888:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 889:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 890:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 891:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 892:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 893:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 894
	 Choosing alt 0 in insn 894:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 895:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 897:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 899:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 900:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 905:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 910:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 915:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 916:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 917:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 918:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 919
	 Choosing alt 0 in insn 919:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 920:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 921:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 923:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 925:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 928:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 929:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 930:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 931:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 932:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 935:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 936:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 937:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 938:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 939:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 940:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 941:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 942:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 943:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 944
	 Choosing alt 0 in insn 944:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 945:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 947:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 949:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 952:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 953:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 954:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 955:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 956:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 957:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 958:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 959
	 Choosing alt 0 in insn 959:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 960:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 962:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 964:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 965:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 970:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 975:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 980:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 981:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 982:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 983:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 984
	 Choosing alt 0 in insn 984:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 985:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 986:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 988:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 990:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 993:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 994:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 995:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 996:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 997:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 998
	 Choosing alt 0 in insn 998:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 999:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1001:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1003:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1006:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1007:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1008:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1009:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1010:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1011:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1012
	 Choosing alt 0 in insn 1012:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1013:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1015:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1017:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1018:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1023:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1028:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1029:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1030:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1031:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1032
	 Choosing alt 0 in insn 1032:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1033:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1034:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1036:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1038:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1041:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1042:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1043:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1044:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1049:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1050:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1051:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1052:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1053
	 Choosing alt 0 in insn 1053:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1054:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1055:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1057:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1059:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1062:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1063:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1064:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1069:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1070:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1071:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1072:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1073
	 Choosing alt 0 in insn 1073:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1074:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1075:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1077:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1079:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1082:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1083:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1084:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1085:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1086:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1091:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1092:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1093:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1094:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1095
	 Choosing alt 0 in insn 1095:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1096:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1097:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1099:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1101:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1104:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1105:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1106:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1113:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1115
	 Choosing alt 0 in insn 1115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1116:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1117:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1119:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1121:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1124:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1125:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1127:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1128:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1135:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1137
	 Choosing alt 0 in insn 1137:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1138:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1139:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1141:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1143:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1146:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1148:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1149:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1152:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1157:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1158:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1163:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1164:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1165:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1167
	 Choosing alt 0 in insn 1167:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1168:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1169:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1171:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1173:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1176:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1178:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1179:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1180:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1183:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1188:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1189:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1190:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1195:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1196:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1197:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1198:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1199
	 Choosing alt 0 in insn 1199:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1200:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1201:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1203:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1205:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1208:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1210:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1211:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1214:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1219:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1220:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1225:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1226:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1227:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1228:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1229
	 Choosing alt 0 in insn 1229:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1230:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1231:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1233:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1235:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1238:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1240:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1241:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1242:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1245:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1252:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1257:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1259:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1260:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1261
	 Choosing alt 0 in insn 1261:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1262:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1263:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1265:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1267:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1270:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1271:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1276:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1277:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1278:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1279:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1280
	 Choosing alt 0 in insn 1280:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1281:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1282:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1284:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1286:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1289:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1290:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1295:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1296:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1297:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1298:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1299
	 Choosing alt 0 in insn 1299:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1300:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1301:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1303:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1305:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1308:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1309:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1310:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1314:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1315:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1316:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1317:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1322:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1328:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1331:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1334:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1338:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1343:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1344:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1345:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1348:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1349:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1350:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1353:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1354:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1355:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1356:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1359:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1364:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1365:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1366:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1369:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1371:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1374:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1379:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1382:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1383:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1384:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1387:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1388:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1389:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1392:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1393:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1394:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1395:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1398:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1399:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1400:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1401:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1402:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1405:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1408:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1409:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1410:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1415:  (0) ?mq {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1418:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1419:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1420:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1423:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1424:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1425:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1430:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1432:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1433:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1436:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1441:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 1444:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1451:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1452:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1453:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1456:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1457:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1458:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1461:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1462:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1463:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1466:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1471:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1474:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1478:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1479:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1480:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1481:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1484:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1493:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1496:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1497:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1498:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1501:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1502:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1503:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1506:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1507:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1508:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1511:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1516:  (0) ?mq {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1519:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1523:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1524:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 1525:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1526:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1529:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1534:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1539:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1542:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1543:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1546:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1547:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1548:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1549:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1552:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1553:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1554:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1555:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1558:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1559:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1560:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1563:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1566:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1569:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1570:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1571:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1574:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1575:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1576:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1577:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1578:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1581:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1582:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1583:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1584:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1585:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1586:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1589:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1590:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1591:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1592:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1593:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1596:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1597:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1598:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1599:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1600:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1603:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1608:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1609:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1610:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1611:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1614:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1615:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1616:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1617:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1618:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1621:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1622:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1623:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1624:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1625:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1626:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1629:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1630:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1631:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1632:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1633:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1636:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1637:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1638:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1639:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1640:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1643:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1648:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1649:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1651:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1653:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1656:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1661:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1662:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1663:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1665:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1667:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1670:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1675:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1678:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1683:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1686:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1691:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1701:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r789
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1703:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 97
EBB 98
EBB 99
EBB 100
EBB 101
EBB 102
EBB 103
EBB 104
EBB 105
EBB 106
EBB 107
EBB 108
EBB 109
EBB 110
EBB 111
EBB 112
EBB 113
EBB 114
EBB 115
EBB 116
EBB 117
EBB 118
EBB 119
EBB 120
EBB 121
EBB 122
EBB 123
EBB 124
EBB 125
EBB 126
EBB 127
EBB 128
EBB 129
EBB 130
EBB 131
EBB 132
EBB 133
EBB 152
EBB 134
EBB 135
EBB 136
EBB 137
EBB 138
EBB 139
EBB 140
EBB 141
EBB 142
EBB 143
EBB 144
EBB 145
EBB 146
EBB 147
EBB 148
EBB 149
EBB 150
EBB 151

********** Pseudo live ranges #1: **********

  BB 30
   Insn 760: point = 0
   Insn 759: point = 0
   Insn 758: point = 0
   Insn 757: point = 0
  BB 32
   Insn 780: point = 0
   Insn 779: point = 0
   Insn 778: point = 0
   Insn 777: point = 0
  BB 88
   Insn 1310: point = 0
   Insn 1309: point = 0
   Insn 1308: point = 0
  BB 150
   Insn 1703: point = 0
  BB 151
   Insn 1706: point = 0
  BB 149
   Insn 1702: point = 0
   Insn 1701: point = 0
   Insn 1700: point = 1
   Insn 1696: point = 2
  BB 147
   Insn 1824: point = 5
   Insn 1686: point = 5
  BB 143
   Insn 1820: point = 6
   Insn 1670: point = 6
  BB 141
   Insn 1818: point = 7
   Insn 1656: point = 7
  BB 133
   Insn 1814: point = 8
   Insn 1534: point = 8
  BB 132
   Insn 1812: point = 9
   Insn 1529: point = 9
  BB 131
   Insn 1527: point = 10
   Insn 1526: point = 10
   Insn 1525: point = 11
   Insn 1524: point = 13
   Insn 1523: point = 15
  BB 130
   Insn 1520: point = 16
   Insn 1519: point = 16
  BB 129
   Insn 1517: point = 16
   Insn 1516: point = 16
  BB 128
   Insn 1810: point = 16
   Insn 1511: point = 16
  BB 127
   Insn 1509: point = 17
   Insn 1508: point = 17
   Insn 1507: point = 18
   Insn 1506: point = 20
  BB 126
   Insn 1504: point = 21
   Insn 1503: point = 21
   Insn 1502: point = 22
   Insn 1501: point = 24
  BB 125
   Insn 1499: point = 25
   Insn 1498: point = 25
   Insn 1497: point = 26
   Insn 1496: point = 28
  BB 123
   Insn 1808: point = 29
   Insn 1484: point = 29
  BB 119
   Insn 1806: point = 30
   Insn 1466: point = 30
  BB 100
   Insn 1794: point = 31
   Insn 1374: point = 31
  BB 98
   Insn 1792: point = 32
   Insn 1359: point = 32
  BB 94
   Insn 1790: point = 33
   Insn 1338: point = 33
  BB 89
   Insn 1786: point = 34
   Insn 1317: point = 34
   Insn 1316: point = 35
   Insn 1315: point = 36
   Insn 1314: point = 37
  BB 87
   Insn 1306: point = 38
   Insn 1305: point = 38
   Insn 1304: point = 39
   Insn 1303: point = 40
   Insn 1302: point = 40
   Insn 1301: point = 41
   Insn 1300: point = 41
   Insn 1299: point = 43
   Insn 1298: point = 45
   Insn 1297: point = 46
   Insn 1296: point = 48
   Insn 1295: point = 50
  BB 81
   Insn 1778: point = 51
   Insn 1245: point = 51
  BB 77
   Insn 1774: point = 52
   Insn 1214: point = 52
  BB 73
   Insn 1770: point = 53
   Insn 1183: point = 53
  BB 69
   Insn 1766: point = 54
   Insn 1152: point = 54
  BB 56
   Insn 1754: point = 55
   Insn 1023: point = 55
  BB 52
   Insn 1750: point = 56
   Insn 975: point = 56
  BB 51
   Insn 1748: point = 57
   Insn 970: point = 57
  BB 46
   Insn 1744: point = 58
   Insn 910: point = 58
  BB 45
   Insn 1742: point = 59
   Insn 905: point = 59
  BB 40
   Insn 1738: point = 60
   Insn 849: point = 60
  BB 36
   Insn 1734: point = 61
   Insn 812: point = 61
  BB 28
   Insn 1730: point = 62
   Insn 735: point = 62
  BB 26
   Insn 1726: point = 63
   Insn 633: point = 63
  BB 21
   Insn 1720: point = 64
   Insn 560: point = 64
  BB 15
   Insn 1716: point = 65
   Insn 400: point = 65
  BB 9
   Insn 1712: point = 66
   Insn 331: point = 66
  BB 145
   Insn 1822: point = 67
   Insn 1678: point = 67
  BB 148
   Insn 1691: point = 68
  BB 146
   Insn 1684: point = 69
   Insn 1683: point = 69
  BB 144
   Insn 1676: point = 69
   Insn 1675: point = 69
  BB 142
   Insn 1668: point = 69
   Insn 1667: point = 69
   Insn 1666: point = 70
   Insn 1665: point = 71
   Insn 1664: point = 71
   Insn 1663: point = 72
   Insn 1662: point = 72
   Insn 1661: point = 74
  BB 140
   Insn 1654: point = 75
   Insn 1653: point = 75
   Insn 1652: point = 76
   Insn 1651: point = 77
   Insn 1650: point = 77
   Insn 1649: point = 78
   Insn 1648: point = 78
  BB 138
   Insn 1816: point = 79
   Insn 1603: point = 79
   Insn 1602: point = 79
   Insn 1601: point = 80
   Insn 1600: point = 81
   Insn 1599: point = 83
   Insn 1598: point = 84
   Insn 1597: point = 86
   Insn 1596: point = 87
   Insn 1595: point = 87
   Insn 1594: point = 88
   Insn 1593: point = 89
   Insn 1592: point = 91
   Insn 1591: point = 92
   Insn 1590: point = 94
   Insn 1589: point = 95
   Insn 1588: point = 95
   Insn 1587: point = 96
   Insn 1586: point = 97
   Insn 1585: point = 99
   Insn 1584: point = 101
   Insn 1583: point = 102
   Insn 1582: point = 104
   Insn 1581: point = 105
   Insn 1580: point = 105
   Insn 1579: point = 106
   Insn 1578: point = 107
   Insn 1577: point = 109
   Insn 1576: point = 110
   Insn 1575: point = 112
   Insn 1574: point = 113
   Insn 1573: point = 113
   Insn 1572: point = 114
   Insn 1571: point = 115
   Insn 1570: point = 117
   Insn 1569: point = 118
  BB 139
   Insn 1643: point = 119
   Insn 1642: point = 119
   Insn 1641: point = 120
   Insn 1640: point = 121
   Insn 1639: point = 123
   Insn 1638: point = 124
   Insn 1637: point = 126
   Insn 1636: point = 127
   Insn 1635: point = 127
   Insn 1634: point = 128
   Insn 1633: point = 129
   Insn 1632: point = 131
   Insn 1631: point = 132
   Insn 1630: point = 134
   Insn 1629: point = 135
   Insn 1628: point = 135
   Insn 1627: point = 136
   Insn 1626: point = 137
   Insn 1625: point = 139
   Insn 1624: point = 140
   Insn 1623: point = 142
   Insn 1622: point = 144
   Insn 1621: point = 145
   Insn 1620: point = 145
   Insn 1619: point = 146
   Insn 1618: point = 147
   Insn 1617: point = 149
   Insn 1616: point = 150
   Insn 1615: point = 152
   Insn 1614: point = 153
   Insn 1613: point = 153
   Insn 1612: point = 154
   Insn 1611: point = 155
   Insn 1610: point = 157
   Insn 1609: point = 158
   Insn 1608: point = 160
  BB 137
   Insn 1567: point = 161
   Insn 1566: point = 161
  BB 136
   Insn 1563: point = 161
   Insn 1562: point = 161
   Insn 1561: point = 162
   Insn 1560: point = 163
   Insn 1559: point = 164
   Insn 1558: point = 166
  BB 135
   Insn 1556: point = 167
   Insn 1555: point = 167
   Insn 1554: point = 168
   Insn 1553: point = 170
   Insn 1552: point = 171
   Insn 1551: point = 171
   Insn 1550: point = 172
   Insn 1549: point = 173
   Insn 1548: point = 174
   Insn 1547: point = 176
   Insn 1546: point = 177
   Insn 1545: point = 177
   Insn 1544: point = 178
   Insn 1543: point = 179
   Insn 1542: point = 180
  BB 134
   Insn 1540: point = 181
   Insn 1539: point = 181
  BB 152
   Insn 1828: point = 181
  BB 114
   Insn 1802: point = 181
   Insn 1444: point = 181
  BB 115
   Insn 1804: point = 181
  BB 110
   Insn 1798: point = 181
   Insn 1425: point = 181
   Insn 1424: point = 181
   Insn 1423: point = 181
  BB 107
   Insn 1796: point = 181
   Insn 1410: point = 181
   Insn 1409: point = 181
   Insn 1408: point = 181
  BB 112
   Insn 1800: point = 181
   Insn 1436: point = 181
  BB 113
   Insn 1442: point = 181
   Insn 1441: point = 181
  BB 111
   Insn 1434: point = 181
   Insn 1433: point = 181
   Insn 1432: point = 181
   Insn 1431: point = 182
   Insn 1430: point = 183
  BB 109
   Insn 1421: point = 183
   Insn 1420: point = 183
   Insn 1419: point = 184
   Insn 1418: point = 186
  BB 108
   Insn 1416: point = 187
   Insn 1415: point = 187
  BB 106
   Insn 1406: point = 187
   Insn 1405: point = 187
  BB 105
   Insn 1403: point = 187
   Insn 1402: point = 187
   Insn 1401: point = 188
   Insn 1400: point = 190
   Insn 1399: point = 191
   Insn 1398: point = 192
  BB 124
   Insn 1494: point = 193
   Insn 1493: point = 193
  BB 122
   Insn 1482: point = 193
   Insn 1481: point = 193
   Insn 1480: point = 194
   Insn 1479: point = 196
   Insn 1478: point = 198
  BB 121
   Insn 1475: point = 199
   Insn 1474: point = 199
  BB 120
   Insn 1472: point = 199
   Insn 1471: point = 199
  BB 118
   Insn 1464: point = 199
   Insn 1463: point = 199
   Insn 1462: point = 200
   Insn 1461: point = 202
  BB 117
   Insn 1459: point = 203
   Insn 1458: point = 203
   Insn 1457: point = 204
   Insn 1456: point = 206
  BB 116
   Insn 1454: point = 207
   Insn 1453: point = 207
   Insn 1452: point = 208
   Insn 1451: point = 210
  BB 104
   Insn 1396: point = 211
   Insn 1395: point = 211
   Insn 1394: point = 212
   Insn 1393: point = 214
   Insn 1392: point = 216
  BB 103
   Insn 1390: point = 217
   Insn 1389: point = 217
   Insn 1388: point = 218
   Insn 1387: point = 220
  BB 102
   Insn 1385: point = 221
   Insn 1384: point = 221
   Insn 1383: point = 222
   Insn 1382: point = 224
  BB 101
   Insn 1380: point = 225
   Insn 1379: point = 225
  BB 99
   Insn 1372: point = 225
   Insn 1371: point = 225
   Insn 1370: point = 226
   Insn 1369: point = 227
   Insn 1368: point = 227
   Insn 1367: point = 228
   Insn 1366: point = 229
   Insn 1365: point = 230
   Insn 1364: point = 232
  BB 97
   Insn 1357: point = 233
   Insn 1356: point = 233
   Insn 1355: point = 234
   Insn 1354: point = 236
   Insn 1353: point = 238
  BB 96
   Insn 1351: point = 239
   Insn 1350: point = 239
   Insn 1349: point = 240
   Insn 1348: point = 242
  BB 95
   Insn 1346: point = 243
   Insn 1345: point = 243
   Insn 1344: point = 244
   Insn 1343: point = 246
  BB 93
   Insn 1335: point = 247
   Insn 1334: point = 247
  BB 92
   Insn 1332: point = 247
   Insn 1331: point = 247
  BB 91
   Insn 1329: point = 247
   Insn 1328: point = 247
  BB 6
   Insn 316: point = 247
   Insn 315: point = 247
   Insn 314: point = 248
  BB 90
   Insn 1788: point = 249
   Insn 1322: point = 249
  BB 86
   Insn 1784: point = 249
   Insn 1290: point = 249
   Insn 1289: point = 250
  BB 85
   Insn 1287: point = 251
   Insn 1286: point = 251
   Insn 1285: point = 252
   Insn 1284: point = 253
   Insn 1283: point = 253
   Insn 1282: point = 254
   Insn 1281: point = 254
   Insn 1280: point = 256
   Insn 1279: point = 258
   Insn 1278: point = 259
   Insn 1277: point = 261
   Insn 1276: point = 263
  BB 84
   Insn 1782: point = 264
   Insn 1271: point = 264
   Insn 1270: point = 265
  BB 83
   Insn 1268: point = 266
   Insn 1267: point = 266
   Insn 1266: point = 267
   Insn 1265: point = 268
   Insn 1264: point = 268
   Insn 1263: point = 269
   Insn 1262: point = 269
   Insn 1261: point = 271
   Insn 1260: point = 273
   Insn 1259: point = 274
   Insn 1258: point = 276
   Insn 1257: point = 278
  BB 82
   Insn 1780: point = 279
   Insn 1252: point = 279
   Insn 1251: point = 280
   Insn 1250: point = 282
  BB 80
   Insn 1243: point = 283
   Insn 1242: point = 283
   Insn 1241: point = 284
   Insn 1240: point = 286
   Insn 1239: point = 288
   Insn 1238: point = 289
  BB 79
   Insn 1236: point = 289
   Insn 1235: point = 289
   Insn 1234: point = 290
   Insn 1233: point = 291
   Insn 1232: point = 291
   Insn 1231: point = 292
   Insn 1230: point = 292
   Insn 1229: point = 294
   Insn 1228: point = 296
   Insn 1227: point = 297
   Insn 1226: point = 299
   Insn 1225: point = 301
  BB 78
   Insn 1776: point = 302
   Insn 1220: point = 302
   Insn 1219: point = 303
  BB 76
   Insn 1212: point = 304
   Insn 1211: point = 304
   Insn 1210: point = 305
   Insn 1209: point = 307
   Insn 1208: point = 308
  BB 75
   Insn 1206: point = 308
   Insn 1205: point = 308
   Insn 1204: point = 309
   Insn 1203: point = 310
   Insn 1202: point = 310
   Insn 1201: point = 311
   Insn 1200: point = 311
   Insn 1199: point = 313
   Insn 1198: point = 315
   Insn 1197: point = 316
   Insn 1196: point = 318
   Insn 1195: point = 320
  BB 74
   Insn 1772: point = 321
   Insn 1190: point = 321
   Insn 1189: point = 322
   Insn 1188: point = 324
  BB 72
   Insn 1181: point = 325
   Insn 1180: point = 325
   Insn 1179: point = 326
   Insn 1178: point = 328
   Insn 1177: point = 330
   Insn 1176: point = 331
  BB 71
   Insn 1174: point = 331
   Insn 1173: point = 331
   Insn 1172: point = 332
   Insn 1171: point = 333
   Insn 1170: point = 333
   Insn 1169: point = 334
   Insn 1168: point = 334
   Insn 1167: point = 336
   Insn 1166: point = 338
   Insn 1165: point = 339
   Insn 1164: point = 341
   Insn 1163: point = 343
  BB 70
   Insn 1768: point = 344
   Insn 1158: point = 344
   Insn 1157: point = 345
  BB 68
   Insn 1150: point = 346
   Insn 1149: point = 346
   Insn 1148: point = 347
   Insn 1147: point = 349
   Insn 1146: point = 350
  BB 67
   Insn 1144: point = 350
   Insn 1143: point = 350
   Insn 1142: point = 351
   Insn 1141: point = 352
   Insn 1140: point = 352
   Insn 1139: point = 353
   Insn 1138: point = 353
   Insn 1137: point = 355
   Insn 1136: point = 357
   Insn 1135: point = 358
   Insn 1134: point = 360
   Insn 1133: point = 362
  BB 66
   Insn 1764: point = 363
   Insn 1128: point = 363
   Insn 1127: point = 364
   Insn 1126: point = 366
   Insn 1125: point = 367
   Insn 1124: point = 367
  BB 65
   Insn 1122: point = 367
   Insn 1121: point = 367
   Insn 1120: point = 368
   Insn 1119: point = 369
   Insn 1118: point = 369
   Insn 1117: point = 370
   Insn 1116: point = 370
   Insn 1115: point = 372
   Insn 1114: point = 374
   Insn 1113: point = 375
   Insn 1112: point = 377
   Insn 1111: point = 379
  BB 64
   Insn 1762: point = 380
   Insn 1106: point = 380
   Insn 1105: point = 381
   Insn 1104: point = 382
  BB 63
   Insn 1102: point = 382
   Insn 1101: point = 382
   Insn 1100: point = 383
   Insn 1099: point = 384
   Insn 1098: point = 384
   Insn 1097: point = 385
   Insn 1096: point = 385
   Insn 1095: point = 387
   Insn 1094: point = 389
   Insn 1093: point = 390
   Insn 1092: point = 392
   Insn 1091: point = 394
  BB 62
   Insn 1760: point = 395
   Insn 1086: point = 395
   Insn 1085: point = 396
   Insn 1084: point = 398
   Insn 1083: point = 399
   Insn 1082: point = 399
  BB 61
   Insn 1080: point = 399
   Insn 1079: point = 399
   Insn 1078: point = 400
   Insn 1077: point = 401
   Insn 1076: point = 401
   Insn 1075: point = 402
   Insn 1074: point = 402
   Insn 1073: point = 404
   Insn 1072: point = 406
   Insn 1071: point = 407
   Insn 1070: point = 409
   Insn 1069: point = 411
  BB 60
   Insn 1758: point = 412
   Insn 1064: point = 412
   Insn 1063: point = 413
   Insn 1062: point = 414
  BB 59
   Insn 1060: point = 414
   Insn 1059: point = 414
   Insn 1058: point = 415
   Insn 1057: point = 416
   Insn 1056: point = 416
   Insn 1055: point = 417
   Insn 1054: point = 417
   Insn 1053: point = 419
   Insn 1052: point = 421
   Insn 1051: point = 422
   Insn 1050: point = 424
   Insn 1049: point = 426
  BB 58
   Insn 1756: point = 427
   Insn 1044: point = 427
   Insn 1043: point = 428
   Insn 1042: point = 430
   Insn 1041: point = 431
  BB 57
   Insn 1039: point = 431
   Insn 1038: point = 431
   Insn 1037: point = 432
   Insn 1036: point = 433
   Insn 1035: point = 433
   Insn 1034: point = 434
   Insn 1033: point = 434
   Insn 1032: point = 436
   Insn 1031: point = 438
   Insn 1030: point = 439
   Insn 1029: point = 441
   Insn 1028: point = 443
  BB 55
   Insn 1752: point = 444
   Insn 1018: point = 444
   Insn 1017: point = 444
   Insn 1016: point = 444
   Insn 1015: point = 445
   Insn 1014: point = 445
   Insn 1013: point = 446
   Insn 1012: point = 448
   Insn 1011: point = 450
   Insn 1010: point = 451
   Insn 1009: point = 453
   Insn 1008: point = 455
   Insn 1007: point = 456
   Insn 1006: point = 458
  BB 54
   Insn 1004: point = 459
   Insn 1003: point = 459
   Insn 1002: point = 460
   Insn 1001: point = 461
   Insn 1000: point = 461
   Insn 999: point = 462
   Insn 998: point = 464
   Insn 997: point = 466
   Insn 996: point = 467
   Insn 995: point = 469
   Insn 994: point = 471
   Insn 993: point = 472
  BB 53
   Insn 991: point = 472
   Insn 990: point = 472
   Insn 989: point = 473
   Insn 988: point = 474
   Insn 987: point = 474
   Insn 986: point = 475
   Insn 985: point = 475
   Insn 984: point = 477
   Insn 983: point = 479
   Insn 982: point = 480
   Insn 981: point = 482
   Insn 980: point = 484
  BB 50
   Insn 1746: point = 485
   Insn 965: point = 485
   Insn 964: point = 485
   Insn 963: point = 485
   Insn 962: point = 486
   Insn 961: point = 486
   Insn 960: point = 487
   Insn 959: point = 489
   Insn 958: point = 491
   Insn 957: point = 492
   Insn 956: point = 494
   Insn 955: point = 496
   Insn 954: point = 497
   Insn 953: point = 499
   Insn 952: point = 501
  BB 49
   Insn 950: point = 502
   Insn 949: point = 502
   Insn 948: point = 503
   Insn 947: point = 504
   Insn 946: point = 504
   Insn 945: point = 505
   Insn 944: point = 507
   Insn 943: point = 509
   Insn 942: point = 510
   Insn 941: point = 512
   Insn 940: point = 514
   Insn 939: point = 515
   Insn 938: point = 515
   Insn 937: point = 516
   Insn 936: point = 518
   Insn 935: point = 519
  BB 48
   Insn 933: point = 519
   Insn 932: point = 519
   Insn 931: point = 520
   Insn 930: point = 522
   Insn 929: point = 524
   Insn 928: point = 525
  BB 47
   Insn 926: point = 525
   Insn 925: point = 525
   Insn 924: point = 526
   Insn 923: point = 527
   Insn 922: point = 527
   Insn 921: point = 528
   Insn 920: point = 528
   Insn 919: point = 530
   Insn 918: point = 532
   Insn 917: point = 533
   Insn 916: point = 535
   Insn 915: point = 537
  BB 44
   Insn 1740: point = 538
   Insn 900: point = 538
   Insn 899: point = 538
   Insn 898: point = 538
   Insn 897: point = 539
   Insn 896: point = 539
   Insn 895: point = 540
   Insn 894: point = 542
   Insn 893: point = 544
   Insn 892: point = 545
   Insn 891: point = 547
   Insn 890: point = 549
   Insn 889: point = 550
   Insn 888: point = 552
  BB 43
   Insn 886: point = 553
   Insn 885: point = 553
   Insn 884: point = 554
   Insn 883: point = 555
   Insn 882: point = 555
   Insn 881: point = 556
   Insn 880: point = 558
   Insn 879: point = 560
   Insn 878: point = 561
   Insn 877: point = 563
   Insn 876: point = 565
   Insn 875: point = 566
   Insn 874: point = 566
   Insn 873: point = 567
  BB 42
   Insn 871: point = 568
   Insn 870: point = 568
   Insn 869: point = 569
   Insn 868: point = 571
   Insn 867: point = 572
  BB 41
   Insn 865: point = 572
   Insn 864: point = 572
   Insn 863: point = 573
   Insn 862: point = 574
   Insn 861: point = 574
   Insn 860: point = 575
   Insn 859: point = 575
   Insn 858: point = 577
   Insn 857: point = 579
   Insn 856: point = 580
   Insn 855: point = 582
   Insn 854: point = 584
  BB 39
   Insn 1736: point = 585
   Insn 844: point = 585
   Insn 843: point = 586
   Insn 842: point = 587
   Insn 841: point = 589
   Insn 840: point = 590
   Insn 839: point = 591
   Insn 838: point = 593
   Insn 837: point = 594
  BB 38
   Insn 835: point = 594
   Insn 834: point = 594
   Insn 833: point = 595
   Insn 832: point = 597
   Insn 831: point = 599
   Insn 830: point = 600
  BB 37
   Insn 828: point = 600
   Insn 827: point = 600
   Insn 826: point = 601
   Insn 825: point = 602
   Insn 824: point = 602
   Insn 823: point = 603
   Insn 822: point = 603
   Insn 821: point = 605
   Insn 820: point = 607
   Insn 819: point = 608
   Insn 818: point = 610
   Insn 817: point = 612
  BB 35
   Insn 1732: point = 613
   Insn 807: point = 613
   Insn 806: point = 614
   Insn 805: point = 615
   Insn 804: point = 616
   Insn 803: point = 617
  BB 34
   Insn 801: point = 618
   Insn 800: point = 618
   Insn 799: point = 619
   Insn 798: point = 621
   Insn 797: point = 622
  BB 33
   Insn 795: point = 622
   Insn 794: point = 622
   Insn 793: point = 623
   Insn 792: point = 624
   Insn 791: point = 624
   Insn 790: point = 625
   Insn 789: point = 625
   Insn 788: point = 627
   Insn 787: point = 629
   Insn 786: point = 630
   Insn 785: point = 632
   Insn 784: point = 634
  BB 31
   Insn 775: point = 635
   Insn 774: point = 635
   Insn 773: point = 636
   Insn 772: point = 637
   Insn 771: point = 637
   Insn 770: point = 638
   Insn 769: point = 638
   Insn 768: point = 640
   Insn 767: point = 642
   Insn 766: point = 643
   Insn 765: point = 645
   Insn 764: point = 647
  BB 29
   Insn 755: point = 648
   Insn 754: point = 648
   Insn 753: point = 649
   Insn 752: point = 650
   Insn 751: point = 650
   Insn 750: point = 651
   Insn 749: point = 651
   Insn 748: point = 653
   Insn 747: point = 655
   Insn 746: point = 656
   Insn 745: point = 658
   Insn 744: point = 660
  BB 27
   Insn 1728: point = 661
   Insn 730: point = 661
   Insn 729: point = 662
   Insn 728: point = 664
   Insn 727: point = 665
   Insn 726: point = 667
   Insn 725: point = 669
   Insn 724: point = 671
   Insn 723: point = 672
   Insn 722: point = 672
   Insn 721: point = 672
   Insn 720: point = 672
   Insn 719: point = 673
   Insn 718: point = 675
   Insn 717: point = 677
   Insn 716: point = 678
   Insn 715: point = 679
   Insn 714: point = 681
   Insn 713: point = 682
   Insn 712: point = 682
   Insn 711: point = 683
   Insn 710: point = 685
   Insn 709: point = 687
   Insn 708: point = 688
   Insn 707: point = 690
   Insn 706: point = 692
   Insn 705: point = 693
   Insn 704: point = 695
   Insn 703: point = 696
   Insn 702: point = 698
   Insn 701: point = 700
   Insn 700: point = 702
   Insn 699: point = 703
   Insn 698: point = 703
   Insn 697: point = 703
   Insn 696: point = 703
   Insn 695: point = 704
   Insn 694: point = 706
   Insn 693: point = 708
   Insn 692: point = 709
   Insn 691: point = 710
   Insn 690: point = 712
   Insn 689: point = 713
   Insn 688: point = 715
   Insn 687: point = 716
   Insn 686: point = 718
   Insn 685: point = 720
   Insn 684: point = 722
   Insn 683: point = 723
   Insn 682: point = 723
   Insn 681: point = 723
   Insn 680: point = 723
   Insn 679: point = 724
   Insn 678: point = 726
   Insn 677: point = 728
   Insn 676: point = 729
   Insn 675: point = 730
   Insn 674: point = 731
   Insn 673: point = 732
   Insn 672: point = 734
   Insn 671: point = 735
   Insn 670: point = 735
   Insn 669: point = 736
   Insn 668: point = 738
   Insn 667: point = 740
   Insn 666: point = 741
   Insn 665: point = 743
   Insn 664: point = 745
   Insn 663: point = 746
   Insn 662: point = 748
   Insn 661: point = 749
   Insn 660: point = 751
   Insn 659: point = 753
   Insn 658: point = 755
   Insn 657: point = 756
   Insn 656: point = 756
   Insn 655: point = 756
   Insn 654: point = 756
   Insn 653: point = 757
   Insn 652: point = 759
   Insn 651: point = 761
  BB 25
   Insn 1724: point = 762
  BB 24
   Insn 649: point = 762
   Insn 648: point = 762
   Insn 647: point = 763
   Insn 646: point = 764
   Insn 645: point = 764
   Insn 644: point = 765
   Insn 643: point = 767
   Insn 642: point = 769
   Insn 641: point = 770
   Insn 640: point = 772
   Insn 639: point = 774
   Insn 638: point = 775
   Insn 628: point = 775
   Insn 627: point = 776
   Insn 626: point = 778
   Insn 625: point = 779
   Insn 624: point = 779
   Insn 623: point = 780
   Insn 622: point = 782
   Insn 621: point = 784
   Insn 620: point = 785
   Insn 619: point = 787
   Insn 618: point = 789
   Insn 617: point = 790
   Insn 616: point = 792
   Insn 615: point = 793
   Insn 614: point = 795
   Insn 613: point = 797
   Insn 612: point = 799
   Insn 611: point = 800
   Insn 610: point = 800
   Insn 609: point = 800
   Insn 608: point = 800
   Insn 607: point = 801
   Insn 606: point = 803
   Insn 605: point = 805
  BB 23
   Insn 603: point = 806
   Insn 602: point = 806
   Insn 601: point = 807
   Insn 600: point = 808
   Insn 599: point = 808
   Insn 598: point = 809
   Insn 597: point = 811
   Insn 596: point = 813
   Insn 595: point = 814
   Insn 594: point = 816
   Insn 593: point = 818
   Insn 592: point = 819
   Insn 591: point = 819
   Insn 590: point = 820
   Insn 589: point = 822
   Insn 588: point = 823
   Insn 587: point = 825
   Insn 586: point = 827
   Insn 585: point = 829
   Insn 584: point = 830
   Insn 583: point = 830
   Insn 582: point = 830
   Insn 581: point = 830
   Insn 580: point = 831
   Insn 579: point = 833
   Insn 578: point = 835
  BB 10
   Insn 1714: point = 836
   Insn 350: point = 836
   Insn 349: point = 836
   Insn 348: point = 836
   Insn 347: point = 837
   Insn 346: point = 838
   Insn 345: point = 840
   Insn 344: point = 842
   Insn 343: point = 844
   Insn 342: point = 845
   Insn 341: point = 846
   Insn 340: point = 848
   Insn 339: point = 850
   Insn 338: point = 851
   Insn 337: point = 853
   Insn 336: point = 855
  BB 8
   Insn 329: point = 856
   Insn 328: point = 856
  BB 22
   Insn 576: point = 856
   Insn 575: point = 856
   Insn 574: point = 857
   Insn 573: point = 858
   Insn 572: point = 858
   Insn 571: point = 859
   Insn 570: point = 859
   Insn 569: point = 861
   Insn 568: point = 863
   Insn 567: point = 864
   Insn 566: point = 866
   Insn 565: point = 868
  BB 20
   Insn 1718: point = 869
   Insn 555: point = 869
   Insn 554: point = 870
   Insn 553: point = 872
   Insn 552: point = 873
   Insn 551: point = 875
   Insn 550: point = 877
   Insn 549: point = 879
   Insn 548: point = 880
   Insn 547: point = 880
   Insn 546: point = 880
   Insn 545: point = 880
   Insn 544: point = 881
   Insn 543: point = 883
   Insn 542: point = 885
   Insn 541: point = 886
   Insn 540: point = 887
   Insn 539: point = 889
   Insn 538: point = 890
   Insn 537: point = 890
   Insn 536: point = 891
   Insn 535: point = 893
   Insn 534: point = 895
   Insn 533: point = 896
   Insn 532: point = 898
   Insn 531: point = 900
   Insn 530: point = 901
   Insn 529: point = 903
   Insn 528: point = 904
   Insn 527: point = 906
   Insn 526: point = 908
   Insn 525: point = 910
   Insn 524: point = 911
   Insn 523: point = 911
   Insn 522: point = 911
   Insn 521: point = 911
   Insn 520: point = 912
   Insn 519: point = 914
   Insn 518: point = 916
   Insn 517: point = 917
   Insn 516: point = 918
   Insn 515: point = 919
   Insn 514: point = 920
   Insn 513: point = 922
   Insn 512: point = 923
   Insn 511: point = 923
   Insn 510: point = 924
   Insn 509: point = 926
   Insn 508: point = 928
   Insn 507: point = 929
   Insn 506: point = 931
   Insn 505: point = 933
   Insn 504: point = 934
   Insn 503: point = 936
   Insn 502: point = 937
   Insn 501: point = 939
   Insn 500: point = 941
   Insn 499: point = 943
   Insn 498: point = 944
   Insn 497: point = 944
   Insn 496: point = 944
   Insn 495: point = 944
   Insn 494: point = 945
   Insn 493: point = 947
   Insn 492: point = 949
  BB 19
   Insn 490: point = 950
   Insn 489: point = 950
   Insn 488: point = 951
   Insn 487: point = 952
   Insn 486: point = 952
   Insn 485: point = 953
   Insn 484: point = 955
   Insn 483: point = 957
   Insn 482: point = 958
   Insn 481: point = 960
   Insn 480: point = 962
   Insn 479: point = 963
   Insn 478: point = 963
   Insn 477: point = 964
   Insn 476: point = 966
   Insn 475: point = 967
   Insn 474: point = 969
   Insn 473: point = 971
   Insn 472: point = 973
   Insn 471: point = 974
   Insn 470: point = 974
   Insn 469: point = 974
   Insn 468: point = 974
   Insn 467: point = 975
   Insn 466: point = 977
   Insn 465: point = 979
  BB 18
   Insn 463: point = 980
   Insn 462: point = 980
   Insn 461: point = 981
   Insn 460: point = 982
   Insn 459: point = 982
   Insn 458: point = 983
   Insn 457: point = 983
   Insn 456: point = 985
   Insn 455: point = 987
   Insn 454: point = 988
   Insn 453: point = 990
   Insn 452: point = 992
  BB 17
   Insn 449: point = 993
   Insn 448: point = 994
   Insn 447: point = 996
   Insn 446: point = 997
   Insn 445: point = 999
   Insn 444: point = 1001
   Insn 443: point = 1003
   Insn 442: point = 1004
   Insn 441: point = 1004
   Insn 440: point = 1004
   Insn 439: point = 1004
   Insn 438: point = 1005
   Insn 437: point = 1007
   Insn 436: point = 1009
   Insn 435: point = 1010
   Insn 434: point = 1011
   Insn 433: point = 1012
   Insn 432: point = 1013
   Insn 431: point = 1015
   Insn 430: point = 1016
   Insn 429: point = 1018
   Insn 428: point = 1020
   Insn 427: point = 1022
   Insn 426: point = 1023
   Insn 425: point = 1023
   Insn 424: point = 1023
   Insn 423: point = 1023
   Insn 422: point = 1024
   Insn 421: point = 1026
   Insn 420: point = 1028
  BB 16
   Insn 418: point = 1029
   Insn 417: point = 1029
   Insn 416: point = 1030
   Insn 415: point = 1031
   Insn 414: point = 1031
   Insn 413: point = 1032
   Insn 412: point = 1032
   Insn 411: point = 1034
   Insn 410: point = 1036
   Insn 409: point = 1037
   Insn 408: point = 1039
   Insn 407: point = 1041
   Insn 406: point = 1042
   Insn 405: point = 1043
  BB 14
   Insn 398: point = 1044
   Insn 397: point = 1044
   Insn 396: point = 1045
   Insn 395: point = 1047
  BB 13
   Insn 392: point = 1048
   Insn 391: point = 1048
   Insn 390: point = 1049
   Insn 389: point = 1050
   Insn 388: point = 1050
   Insn 387: point = 1051
   Insn 386: point = 1051
   Insn 385: point = 1053
   Insn 384: point = 1055
   Insn 383: point = 1056
   Insn 382: point = 1058
   Insn 381: point = 1060
  BB 12
   Insn 379: point = 1061
   Insn 378: point = 1061
   Insn 377: point = 1062
   Insn 376: point = 1063
   Insn 375: point = 1063
   Insn 374: point = 1064
   Insn 373: point = 1064
   Insn 372: point = 1066
   Insn 371: point = 1068
   Insn 370: point = 1069
   Insn 369: point = 1071
   Insn 368: point = 1073
  BB 11
   Insn 366: point = 1074
   Insn 365: point = 1074
   Insn 364: point = 1075
   Insn 363: point = 1076
   Insn 362: point = 1076
   Insn 361: point = 1077
   Insn 360: point = 1077
   Insn 359: point = 1079
   Insn 358: point = 1081
   Insn 357: point = 1082
   Insn 356: point = 1084
   Insn 355: point = 1086
  BB 7
   Insn 326: point = 1087
   Insn 325: point = 1087
   Insn 324: point = 1088
   Insn 323: point = 1090
   Insn 322: point = 1092
   Insn 321: point = 1094
   Insn 320: point = 1095
   Insn 319: point = 1097
   Insn 318: point = 1099
  BB 5
   Insn 312: point = 1100
   Insn 311: point = 1101
   Insn 310: point = 1102
  BB 3
   Insn 52: point = 1102
   Insn 51: point = 1102
  BB 4
   Insn 1710: point = 1102
   Insn 304: point = 1102
   Insn 303: point = 1102
   Insn 302: point = 1103
   Insn 301: point = 1105
   Insn 300: point = 1106
   Insn 299: point = 1108
   Insn 298: point = 1110
   Insn 297: point = 1112
   Insn 296: point = 1113
   Insn 295: point = 1113
   Insn 294: point = 1113
   Insn 293: point = 1113
   Insn 292: point = 1114
   Insn 291: point = 1116
   Insn 290: point = 1117
   Insn 289: point = 1118
   Insn 288: point = 1120
   Insn 287: point = 1121
   Insn 286: point = 1123
   Insn 285: point = 1125
   Insn 284: point = 1127
   Insn 283: point = 1128
   Insn 282: point = 1128
   Insn 281: point = 1128
   Insn 280: point = 1128
   Insn 279: point = 1129
   Insn 278: point = 1131
   Insn 277: point = 1132
   Insn 276: point = 1133
   Insn 275: point = 1135
   Insn 274: point = 1136
   Insn 273: point = 1138
   Insn 272: point = 1140
   Insn 271: point = 1142
   Insn 270: point = 1143
   Insn 269: point = 1143
   Insn 268: point = 1143
   Insn 267: point = 1143
   Insn 266: point = 1144
   Insn 265: point = 1146
   Insn 264: point = 1147
   Insn 263: point = 1148
   Insn 262: point = 1150
   Insn 261: point = 1151
   Insn 260: point = 1153
   Insn 259: point = 1155
   Insn 258: point = 1157
   Insn 257: point = 1158
   Insn 256: point = 1158
   Insn 255: point = 1158
   Insn 254: point = 1158
   Insn 253: point = 1159
   Insn 252: point = 1161
   Insn 251: point = 1162
   Insn 250: point = 1163
   Insn 249: point = 1165
   Insn 248: point = 1166
   Insn 247: point = 1168
   Insn 246: point = 1170
   Insn 245: point = 1172
   Insn 244: point = 1173
   Insn 243: point = 1173
   Insn 242: point = 1173
   Insn 241: point = 1173
   Insn 240: point = 1174
   Insn 239: point = 1176
   Insn 238: point = 1177
   Insn 237: point = 1178
   Insn 236: point = 1180
   Insn 235: point = 1181
   Insn 234: point = 1183
   Insn 233: point = 1185
   Insn 232: point = 1187
   Insn 231: point = 1188
   Insn 230: point = 1188
   Insn 229: point = 1188
   Insn 228: point = 1188
   Insn 227: point = 1189
   Insn 226: point = 1191
   Insn 225: point = 1192
   Insn 224: point = 1193
   Insn 223: point = 1194
   Insn 222: point = 1196
   Insn 221: point = 1197
   Insn 220: point = 1199
   Insn 219: point = 1201
   Insn 218: point = 1203
   Insn 217: point = 1204
   Insn 216: point = 1204
   Insn 215: point = 1204
   Insn 214: point = 1204
   Insn 213: point = 1205
   Insn 212: point = 1207
   Insn 211: point = 1208
   Insn 210: point = 1209
   Insn 209: point = 1211
   Insn 208: point = 1212
   Insn 207: point = 1214
   Insn 206: point = 1216
   Insn 205: point = 1218
   Insn 204: point = 1219
   Insn 203: point = 1219
   Insn 202: point = 1219
   Insn 201: point = 1219
   Insn 200: point = 1220
   Insn 199: point = 1222
   Insn 198: point = 1223
   Insn 197: point = 1224
   Insn 196: point = 1226
   Insn 195: point = 1227
   Insn 194: point = 1229
   Insn 193: point = 1231
   Insn 192: point = 1233
   Insn 191: point = 1234
   Insn 190: point = 1234
   Insn 189: point = 1234
   Insn 188: point = 1234
   Insn 187: point = 1235
   Insn 186: point = 1237
   Insn 185: point = 1238
   Insn 184: point = 1239
   Insn 183: point = 1241
   Insn 182: point = 1242
   Insn 181: point = 1244
   Insn 180: point = 1246
   Insn 179: point = 1248
   Insn 178: point = 1249
   Insn 177: point = 1249
   Insn 176: point = 1249
   Insn 175: point = 1249
   Insn 174: point = 1250
   Insn 173: point = 1252
   Insn 172: point = 1253
   Insn 171: point = 1254
   Insn 170: point = 1256
   Insn 169: point = 1257
   Insn 168: point = 1259
   Insn 167: point = 1261
   Insn 166: point = 1263
   Insn 165: point = 1264
   Insn 164: point = 1264
   Insn 163: point = 1264
   Insn 162: point = 1264
   Insn 161: point = 1265
   Insn 160: point = 1267
   Insn 159: point = 1268
   Insn 158: point = 1269
   Insn 157: point = 1270
   Insn 156: point = 1272
   Insn 155: point = 1273
   Insn 154: point = 1275
   Insn 153: point = 1277
   Insn 152: point = 1279
   Insn 151: point = 1280
   Insn 150: point = 1280
   Insn 149: point = 1280
   Insn 148: point = 1280
   Insn 147: point = 1281
   Insn 146: point = 1283
   Insn 145: point = 1284
   Insn 144: point = 1285
   Insn 143: point = 1287
   Insn 142: point = 1288
   Insn 141: point = 1290
   Insn 140: point = 1292
   Insn 139: point = 1294
   Insn 138: point = 1295
   Insn 137: point = 1295
   Insn 136: point = 1295
   Insn 135: point = 1295
   Insn 134: point = 1296
   Insn 133: point = 1298
   Insn 132: point = 1299
   Insn 131: point = 1300
   Insn 130: point = 1302
   Insn 129: point = 1303
   Insn 128: point = 1305
   Insn 127: point = 1307
   Insn 126: point = 1309
   Insn 125: point = 1310
   Insn 124: point = 1310
   Insn 123: point = 1310
   Insn 122: point = 1310
   Insn 121: point = 1311
   Insn 120: point = 1313
   Insn 119: point = 1314
   Insn 118: point = 1315
   Insn 117: point = 1317
   Insn 116: point = 1318
   Insn 115: point = 1320
   Insn 114: point = 1322
   Insn 113: point = 1324
   Insn 112: point = 1325
   Insn 111: point = 1325
   Insn 110: point = 1325
   Insn 109: point = 1325
   Insn 108: point = 1326
   Insn 107: point = 1328
   Insn 106: point = 1329
   Insn 105: point = 1330
   Insn 104: point = 1332
   Insn 103: point = 1333
   Insn 102: point = 1335
   Insn 101: point = 1337
   Insn 100: point = 1339
   Insn 99: point = 1340
   Insn 98: point = 1340
   Insn 97: point = 1340
   Insn 96: point = 1340
   Insn 95: point = 1341
   Insn 94: point = 1343
   Insn 93: point = 1344
   Insn 92: point = 1345
   Insn 91: point = 1346
   Insn 90: point = 1348
   Insn 89: point = 1349
   Insn 88: point = 1351
   Insn 87: point = 1353
   Insn 86: point = 1355
   Insn 85: point = 1356
   Insn 84: point = 1356
   Insn 83: point = 1356
   Insn 82: point = 1356
   Insn 81: point = 1357
   Insn 80: point = 1359
   Insn 79: point = 1360
   Insn 78: point = 1361
   Insn 77: point = 1363
   Insn 76: point = 1364
   Insn 75: point = 1366
   Insn 74: point = 1368
   Insn 73: point = 1370
   Insn 72: point = 1371
   Insn 71: point = 1371
   Insn 70: point = 1371
   Insn 69: point = 1371
   Insn 68: point = 1372
   Insn 67: point = 1374
   Insn 66: point = 1375
   Insn 65: point = 1376
   Insn 64: point = 1378
   Insn 63: point = 1379
   Insn 62: point = 1381
   Insn 61: point = 1383
   Insn 60: point = 1385
   Insn 59: point = 1386
   Insn 58: point = 1386
   Insn 57: point = 1386
   Insn 56: point = 1386
   Insn 55: point = 1387
   Insn 54: point = 1389
  BB 2
   Insn 49: point = 1390
   Insn 48: point = 1390
   Insn 47: point = 1391
   Insn 1835: point = 1391
   Insn 46: point = 1392
   Insn 1834: point = 1393
   Insn 45: point = 1394
   Insn 44: point = 1395
   Insn 43: point = 1397
   Insn 42: point = 1398
   Insn 41: point = 1399
   Insn 1833: point = 1399
   Insn 40: point = 1400
   Insn 1832: point = 1401
   Insn 39: point = 1402
   Insn 38: point = 1403
   Insn 37: point = 1405
   Insn 36: point = 1406
   Insn 35: point = 1407
   Insn 1831: point = 1407
   Insn 34: point = 1408
   Insn 1830: point = 1409
   Insn 33: point = 1410
   Insn 32: point = 1411
   Insn 31: point = 1412
   Insn 30: point = 1412
   Insn 29: point = 1412
   Insn 28: point = 1412
   Insn 27: point = 1412
   Insn 26: point = 1412
   Insn 25: point = 1412
   Insn 24: point = 1412
   Insn 23: point = 1412
   Insn 22: point = 1412
   Insn 21: point = 1412
   Insn 20: point = 1412
   Insn 17: point = 1412
   Insn 15: point = 1414
   Insn 14: point = 1415
   Insn 13: point = 1416
   Insn 12: point = 1417
   Insn 11: point = 1418
   Insn 10: point = 1419
   Insn 9: point = 1420
   Insn 8: point = 1421
   Insn 7: point = 1422
   Insn 6: point = 1422
   Insn 5: point = 1422
   Insn 4: point = 1422
   Insn 3: point = 1422
   Insn 2: point = 1422
 r87: [51..68] [29..34] [16..16] [3..9]
 r88: [1385..1387]
 r89: [1377..1379]
 r90: [1375..1376]
 r91: [1370..1372]
 r92: [1362..1364]
 r93: [1360..1361]
 r94: [1355..1357]
 r95: [1347..1349]
 r96: [1344..1346]
 r97: [1339..1341]
 r98: [1331..1333]
 r99: [1329..1330]
 r100: [1324..1326]
 r101: [1316..1318]
 r102: [1314..1315]
 r103: [1309..1311]
 r104: [1301..1303]
 r105: [1299..1300]
 r106: [1294..1296]
 r107: [1286..1288]
 r108: [1284..1285]
 r109: [1279..1281]
 r110: [1271..1273]
 r111: [1268..1270]
 r112: [1263..1265]
 r113: [1255..1257]
 r114: [1253..1254]
 r115: [1248..1250]
 r116: [1240..1242]
 r117: [1238..1239]
 r118: [1233..1235]
 r119: [1225..1227]
 r120: [1223..1224]
 r121: [1218..1220]
 r122: [1210..1212]
 r123: [1208..1209]
 r124: [1203..1205]
 r125: [1195..1197]
 r126: [1192..1194]
 r127: [1187..1189]
 r128: [1179..1181]
 r129: [1177..1178]
 r130: [1172..1174]
 r131: [1164..1166]
 r132: [1162..1163]
 r133: [1157..1159]
 r134: [1149..1151]
 r135: [1147..1148]
 r136: [1142..1144]
 r137: [1134..1136]
 r138: [1132..1133]
 r139: [1127..1129]
 r140: [1119..1121]
 r141: [1117..1118]
 r142: [1112..1114]
 r143: [1104..1106]
 r144: [1102..1103]
 r145: [1096..1097]
 r146: [1093..1095]
 r147: [1091..1092]
 r148: [1089..1090]
 r149: [1087..1088]
 r150: [1083..1084]
 r151: [1080..1082]
 r152: [1078..1079]
 r153: [1076..1077]
 r154: [1074..1075]
 r155: [1070..1071]
 r156: [1067..1069]
 r157: [1065..1066]
 r158: [1063..1064]
 r159: [1061..1062]
 r160: [1057..1058]
 r161: [1054..1056]
 r162: [1052..1053]
 r163: [1050..1051]
 r164: [1048..1049]
 r165: [657..658]
 r166: [654..656]
 r167: [652..653]
 r168: [650..651]
 r169: [648..649]
 r170: [644..645]
 r171: [641..643]
 r172: [639..640]
 r173: [637..638]
 r174: [635..636]
 r175: [631..632]
 r176: [628..630]
 r177: [626..627]
 r178: [624..625]
 r179: [622..623]
 r180: [618..619]
 r181: [609..610]
 r182: [606..608]
 r183: [604..605]
 r184: [602..603]
 r185: [600..601]
 r186: [596..597]
 r187: [594..595]
 r188: [590..591]
 r189: [585..587]
 r190: [581..582]
 r191: [578..580]
 r192: [576..577]
 r193: [574..575]
 r194: [572..573]
 r195: [568..569]
 r196: [562..563]
 r197: [559..561]
 r198: [557..558]
 r199: [555..556]
 r200: [553..554]
 r201: [539..550]
 r202: [546..547]
 r203: [543..545]
 r204: [541..542]
 r205: [538..540]
 r206: [534..535]
 r207: [531..533]
 r208: [529..530]
 r209: [527..528]
 r210: [525..526]
 r211: [521..522]
 r212: [519..520]
 r213: [515..516]
 r214: [511..512]
 r215: [508..510]
 r216: [506..507]
 r217: [504..505]
 r218: [502..503]
 r219: [498..499]
 r220: [486..497]
 r221: [493..494]
 r222: [490..492]
 r223: [488..489]
 r224: [485..487]
 r225: [481..482]
 r226: [478..480]
 r227: [476..477]
 r228: [474..475]
 r229: [472..473]
 r230: [468..469]
 r231: [465..467]
 r232: [463..464]
 r233: [461..462]
 r234: [459..460]
 r235: [445..456]
 r236: [452..453]
 r237: [449..451]
 r238: [447..448]
 r239: [444..446]
 r240: [440..441]
 r241: [437..439]
 r242: [435..436]
 r243: [433..434]
 r244: [431..432]
 r245: [427..428]
 r246: [423..424]
 r247: [420..422]
 r248: [418..419]
 r249: [416..417]
 r250: [414..415]
 r251: [408..409]
 r252: [405..407]
 r253: [403..404]
 r254: [401..402]
 r255: [399..400]
 r256: [395..396]
 r257: [391..392]
 r258: [388..390]
 r259: [386..387]
 r260: [384..385]
 r261: [382..383]
 r262: [376..377]
 r263: [373..375]
 r264: [371..372]
 r265: [369..370]
 r266: [367..368]
 r267: [363..364]
 r268: [359..360]
 r269: [356..358]
 r270: [354..355]
 r271: [352..353]
 r272: [350..351]
 r273: [346..347]
 r274: [340..341]
 r275: [337..339]
 r276: [335..336]
 r277: [333..334]
 r278: [331..332]
 r279: [327..328]
 r280: [325..326]
 r281: [321..322]
 r282: [317..318]
 r283: [314..316]
 r284: [312..313]
 r285: [310..311]
 r286: [308..309]
 r287: [304..305]
 r288: [298..299]
 r289: [295..297]
 r290: [293..294]
 r291: [291..292]
 r292: [289..290]
 r293: [285..286]
 r294: [283..284]
 r295: [279..280]
 r296: [275..276]
 r297: [272..274]
 r298: [270..271]
 r299: [268..269]
 r300: [266..267]
 r301: [260..261]
 r302: [257..259]
 r303: [255..256]
 r304: [253..254]
 r305: [251..252]
 r306: [47..48]
 r307: [44..46]
 r308: [42..43]
 r309: [40..41]
 r310: [38..39]
 r311: [1044..1045]
 r312: [1038..1039]
 r313: [1035..1037]
 r314: [1033..1034]
 r315: [1031..1032]
 r316: [1029..1030]
 r317: [1025..1026]
 r318: [1022..1024]
 r319: [1014..1016]
 r320: [1012..1013]
 r321: [1006..1007]
 r322: [1003..1005]
 r323: [995..997]
 r324: [993..994]
 r325: [989..990]
 r326: [986..988]
 r327: [984..985]
 r328: [982..983]
 r329: [980..981]
 r330: [976..977]
 r331: [973..975]
 r332: [965..967]
 r333: [963..964]
 r334: [959..960]
 r335: [956..958]
 r336: [954..955]
 r337: [952..953]
 r338: [950..951]
 r339: [946..947]
 r340: [943..945]
 r341: [935..937]
 r342: [919..934]
 r343: [930..931]
 r344: [927..929]
 r345: [925..926]
 r346: [923..924]
 r347: [921..922]
 r348: [919..920]
 r349: [913..914]
 r350: [910..912]
 r351: [902..904]
 r352: [886..901]
 r353: [897..898]
 r354: [894..896]
 r355: [892..893]
 r356: [890..891]
 r357: [888..889]
 r358: [886..887]
 r359: [882..883]
 r360: [879..881]
 r361: [871..873]
 r362: [869..870]
 r363: [865..866]
 r364: [862..864]
 r365: [860..861]
 r366: [858..859]
 r367: [856..857]
 r368: [832..833]
 r369: [829..831]
 r370: [821..823]
 r371: [819..820]
 r372: [815..816]
 r373: [812..814]
 r374: [810..811]
 r375: [808..809]
 r376: [806..807]
 r377: [802..803]
 r378: [799..801]
 r379: [791..793]
 r380: [775..790]
 r381: [786..787]
 r382: [783..785]
 r383: [781..782]
 r384: [779..780]
 r385: [777..778]
 r386: [775..776]
 r387: [771..772]
 r388: [768..770]
 r389: [766..767]
 r390: [764..765]
 r391: [762..763]
 r392: [758..759]
 r393: [755..757]
 r394: [747..749]
 r395: [731..746]
 r396: [742..743]
 r397: [739..741]
 r398: [737..738]
 r399: [735..736]
 r400: [733..734]
 r401: [731..732]
 r402: [725..726]
 r403: [722..724]
 r404: [714..716]
 r405: [709..713]
 r406: [709..710]
 r407: [705..706]
 r408: [702..704]
 r409: [694..696]
 r410: [678..693]
 r411: [689..690]
 r412: [686..688]
 r413: [684..685]
 r414: [682..683]
 r415: [680..681]
 r416: [678..679]
 r417: [674..675]
 r418: [671..673]
 r419: [663..665]
 r420: [661..662]
 r421: [852..853]
 r422: [849..851]
 r423: [847..848]
 r424: [837..846]
 r425: [836..838]
 r426: [243..244]
 r427: [239..240]
 r428: [235..236]
 r429: [233..234]
 r430: [225..226]
 r431: [221..222]
 r432: [217..218]
 r433: [213..214]
 r434: [211..212]
 r435: [187..188]
 r436: [183..184]
 r437: [181..182]
 r438: [207..208]
 r439: [203..204]
 r440: [199..200]
 r441: [195..196]
 r442: [193..194]
 r443: [25..26]
 r444: [21..22]
 r445: [17..18]
 r446: [12..13]
 r447: [10..11]
 r448: [177..180]
 r449: [171..174]
 r450: [167..168]
 r451: [161..164]
 r452: [114..118]
 r453: [113..115]
 r454: [106..110]
 r455: [105..107]
 r456: [96..102]
 r457: [98..99]
 r458: [95..97]
 r459: [87..92]
 r460: [79..84]
 r461: [153..158]
 r462: [145..150]
 r463: [141..142]
 r464: [135..140]
 r465: [127..132]
 r466: [119..124]
 r467: [77..78]
 r468: [75..76]
 r469: [71..72]
 r470: [69..70]
 r471: [1..2]
 r472: [1420..1421]
 r473: [1418..1419]
 r474: [1416..1417]
 r475: [1414..1415]
 r476: [1406..1411]
 r477: [1404..1405]
 r478: [1398..1403]
 r479: [1396..1397]
 r480: [1390..1395]
 r481: [1388..1389]
 r482: [1384..1386] [1380..1381]
 r483: [1382..1383]
 r484: [1377..1378]
 r485: [1373..1374]
 r486: [1369..1371] [1365..1366]
 r487: [1367..1368]
 r488: [1362..1363]
 r489: [1358..1359]
 r490: [1354..1356] [1350..1351]
 r491: [1352..1353]
 r492: [1347..1348]
 r493: [1344..1345]
 r494: [1342..1343]
 r495: [1338..1340] [1334..1335]
 r496: [1336..1337]
 r497: [1331..1332]
 r498: [1327..1328]
 r499: [1323..1325] [1319..1320]
 r500: [1321..1322]
 r501: [1316..1317]
 r502: [1312..1313]
 r503: [1308..1310] [1304..1305]
 r504: [1306..1307]
 r505: [1301..1302]
 r506: [1297..1298]
 r507: [1293..1295] [1289..1290]
 r508: [1291..1292]
 r509: [1286..1287]
 r510: [1282..1283]
 r511: [1278..1280] [1274..1275]
 r512: [1276..1277]
 r513: [1271..1272]
 r514: [1268..1269]
 r515: [1266..1267]
 r516: [1262..1264] [1258..1259]
 r517: [1260..1261]
 r518: [1255..1256]
 r519: [1251..1252]
 r520: [1247..1249] [1243..1244]
 r521: [1245..1246]
 r522: [1240..1241]
 r523: [1236..1237]
 r524: [1232..1234] [1228..1229]
 r525: [1230..1231]
 r526: [1225..1226]
 r527: [1221..1222]
 r528: [1217..1219] [1213..1214]
 r529: [1215..1216]
 r530: [1210..1211]
 r531: [1206..1207]
 r532: [1202..1204] [1198..1199]
 r533: [1200..1201]
 r534: [1195..1196]
 r535: [1192..1193]
 r536: [1190..1191]
 r537: [1186..1188] [1182..1183]
 r538: [1184..1185]
 r539: [1179..1180]
 r540: [1175..1176]
 r541: [1171..1173] [1167..1168]
 r542: [1169..1170]
 r543: [1164..1165]
 r544: [1160..1161]
 r545: [1156..1158] [1152..1153]
 r546: [1154..1155]
 r547: [1149..1150]
 r548: [1145..1146]
 r549: [1141..1143] [1137..1138]
 r550: [1139..1140]
 r551: [1134..1135]
 r552: [1130..1131]
 r553: [1126..1128] [1122..1123]
 r554: [1124..1125]
 r555: [1119..1120]
 r556: [1115..1116]
 r557: [1111..1113] [1107..1108]
 r558: [1109..1110]
 r559: [1104..1105]
 r560: [1100..1101]
 r561: [247..248]
 r562: [1098..1099]
 r563: [1093..1094]
 r564: [854..855]
 r565: [849..850]
 r566: [839..845]
 r567: [841..842]
 r568: [843..844]
 r569: [839..840]
 r570: [1085..1086]
 r571: [1080..1081]
 r572: [1072..1073]
 r573: [1067..1068]
 r574: [1059..1060]
 r575: [1054..1055]
 r576: [1046..1047]
 r577: [1042..1043]
 r578: [1040..1041]
 r579: [1035..1036]
 r580: [1027..1028]
 r581: [1021..1023] [1017..1018]
 r582: [1019..1020]
 r583: [1014..1015]
 r584: [1010..1011]
 r585: [1008..1009]
 r586: [1002..1004] [998..999]
 r587: [1000..1001]
 r588: [995..996]
 r589: [991..992]
 r590: [986..987]
 r591: [978..979]
 r592: [972..974] [968..969]
 r593: [970..971]
 r594: [965..966]
 r595: [961..962]
 r596: [956..957]
 r597: [948..949]
 r598: [942..944] [938..939]
 r599: [940..941]
 r600: [935..936]
 r601: [932..933]
 r602: [927..928]
 r603: [917..918]
 r604: [915..916]
 r605: [909..911] [905..906]
 r606: [907..908]
 r607: [902..903]
 r608: [899..900]
 r609: [894..895]
 r610: [884..885]
 r611: [878..880] [874..875]
 r612: [876..877]
 r613: [871..872]
 r614: [867..868]
 r615: [862..863]
 r616: [834..835]
 r617: [828..830] [824..825]
 r618: [826..827]
 r619: [821..822]
 r620: [817..818]
 r621: [812..813]
 r622: [804..805]
 r623: [798..800] [794..795]
 r624: [796..797]
 r625: [791..792]
 r626: [788..789]
 r627: [783..784]
 r628: [773..774]
 r629: [768..769]
 r630: [760..761]
 r631: [754..756] [750..751]
 r632: [752..753]
 r633: [747..748]
 r634: [744..745]
 r635: [739..740]
 r636: [729..730]
 r637: [727..728]
 r638: [721..723] [717..718]
 r639: [719..720]
 r640: [714..715]
 r641: [711..712]
 r642: [707..708]
 r643: [701..703] [697..698]
 r644: [699..700]
 r645: [694..695]
 r646: [691..692]
 r647: [686..687]
 r648: [676..677]
 r649: [670..672] [666..667]
 r650: [668..669]
 r651: [663..664]
 r652: [659..660]
 r653: [654..655]
 r654: [646..647]
 r655: [641..642]
 r656: [633..634]
 r657: [628..629]
 r658: [620..621]
 r659: [616..617]
 r660: [613..615]
 r661: [613..614]
 r662: [611..612]
 r663: [606..607]
 r664: [598..599]
 r665: [592..593]
 r666: [588..589]
 r667: [585..586]
 r668: [583..584]
 r669: [578..579]
 r670: [570..571]
 r671: [566..567]
 r672: [564..565]
 r673: [559..560]
 r674: [551..552]
 r675: [548..549]
 r676: [543..544]
 r677: [536..537]
 r678: [531..532]
 r679: [523..524]
 r680: [517..518]
 r681: [513..514]
 r682: [508..509]
 r683: [500..501]
 r684: [495..496]
 r685: [490..491]
 r686: [483..484]
 r687: [478..479]
 r688: [470..471]
 r689: [465..466]
 r690: [457..458]
 r691: [454..455]
 r692: [449..450]
 r693: [442..443]
 r694: [437..438]
 r695: [429..430]
 r696: [425..426]
 r697: [420..421]
 r698: [412..413]
 r699: [410..411]
 r700: [405..406]
 r701: [397..398]
 r702: [393..394]
 r703: [388..389]
 r704: [380..381]
 r705: [378..379]
 r706: [373..374]
 r707: [365..366]
 r708: [361..362]
 r709: [356..357]
 r710: [348..349]
 r711: [344..345]
 r712: [342..343]
 r713: [337..338]
 r714: [329..330]
 r715: [323..324]
 r716: [319..320]
 r717: [314..315]
 r718: [306..307]
 r719: [302..303]
 r720: [300..301]
 r721: [295..296]
 r722: [287..288]
 r723: [281..282]
 r724: [277..278]
 r725: [272..273]
 r726: [264..265]
 r727: [262..263]
 r728: [257..258]
 r729: [249..250]
 r730: [49..50]
 r731: [44..45]
 r732: [35..37]
 r733: [35..36]
 r734: [245..246]
 r735: [241..242]
 r736: [237..238]
 r737: [231..232]
 r738: [228..230]
 r739: [227..229]
 r740: [223..224]
 r741: [219..220]
 r742: [215..216]
 r743: [191..192]
 r744: [189..190]
 r745: [185..186]
 r746: [209..210]
 r747: [205..206]
 r748: [201..202]
 r749: [197..198]
 r750: [27..28]
 r751: [23..24]
 r752: [19..20]
 r753: [14..15]
 r754: [178..179]
 r755: [175..176]
 r756: [172..173]
 r757: [169..170]
 r758: [165..166]
 r759: [162..163]
 r760: [116..117]
 r761: [111..112]
 r762: [108..109]
 r763: [103..104]
 r764: [100..101]
 r765: [93..94]
 r766: [90..91]
 r767: [88..89]
 r768: [85..86]
 r769: [82..83]
 r770: [80..81]
 r771: [159..160]
 r772: [156..157]
 r773: [154..155]
 r774: [151..152]
 r775: [148..149]
 r776: [146..147]
 r777: [143..144]
 r778: [138..139]
 r779: [136..137]
 r780: [133..134]
 r781: [130..131]
 r782: [128..129]
 r783: [125..126]
 r784: [122..123]
 r785: [120..121]
 r786: [73..74]
 r788: [1412..1413]
 r789: [0..0]
 r790: [1409..1410]
 r791: [1407..1408]
 r792: [1401..1402]
 r793: [1399..1400]
 r794: [1393..1394]
 r795: [1391..1392]
Compressing live ranges: from 1422 to 1208 - 84%
Ranges after the compression:
 r87: [40..41] [24..25] [11..11] [3..4]
 r88: [1178..1179]
 r89: [1172..1173]
 r90: [1170..1171]
 r91: [1166..1167]
 r92: [1160..1161]
 r93: [1158..1159]
 r94: [1154..1155]
 r95: [1148..1149]
 r96: [1146..1147]
 r97: [1142..1143]
 r98: [1136..1137]
 r99: [1134..1135]
 r100: [1130..1131]
 r101: [1124..1125]
 r102: [1122..1123]
 r103: [1118..1119]
 r104: [1112..1113]
 r105: [1110..1111]
 r106: [1106..1107]
 r107: [1100..1101]
 r108: [1098..1099]
 r109: [1094..1095]
 r110: [1088..1089]
 r111: [1086..1087]
 r112: [1082..1083]
 r113: [1076..1077]
 r114: [1074..1075]
 r115: [1070..1071]
 r116: [1064..1065]
 r117: [1062..1063]
 r118: [1058..1059]
 r119: [1052..1053]
 r120: [1050..1051]
 r121: [1046..1047]
 r122: [1040..1041]
 r123: [1038..1039]
 r124: [1034..1035]
 r125: [1028..1029]
 r126: [1026..1027]
 r127: [1022..1023]
 r128: [1016..1017]
 r129: [1014..1015]
 r130: [1010..1011]
 r131: [1004..1005]
 r132: [1002..1003]
 r133: [998..999]
 r134: [992..993]
 r135: [990..991]
 r136: [986..987]
 r137: [980..981]
 r138: [978..979]
 r139: [974..975]
 r140: [968..969]
 r141: [966..967]
 r142: [962..963]
 r143: [956..957]
 r144: [954..955]
 r145: [948..949]
 r146: [946..947]
 r147: [944..945]
 r148: [942..943]
 r149: [940..941]
 r150: [936..937]
 r151: [934..935]
 r152: [932..933]
 r153: [930..931]
 r154: [928..929]
 r155: [924..925]
 r156: [922..923]
 r157: [920..921]
 r158: [918..919]
 r159: [916..917]
 r160: [912..913]
 r161: [910..911]
 r162: [908..909]
 r163: [906..907]
 r164: [904..905]
 r165: [570..571]
 r166: [568..569]
 r167: [566..567]
 r168: [564..565]
 r169: [562..563]
 r170: [558..559]
 r171: [556..557]
 r172: [554..555]
 r173: [552..553]
 r174: [550..551]
 r175: [546..547]
 r176: [544..545]
 r177: [542..543]
 r178: [540..541]
 r179: [538..539]
 r180: [534..535]
 r181: [526..527]
 r182: [524..525]
 r183: [522..523]
 r184: [520..521]
 r185: [518..519]
 r186: [514..515]
 r187: [512..513]
 r188: [508..509]
 r189: [504..505]
 r190: [500..501]
 r191: [498..499]
 r192: [496..497]
 r193: [494..495]
 r194: [492..493]
 r195: [488..489]
 r196: [482..483]
 r197: [480..481]
 r198: [478..479]
 r199: [476..477]
 r200: [474..475]
 r201: [462..471]
 r202: [468..469]
 r203: [466..467]
 r204: [464..465]
 r205: [462..463]
 r206: [458..459]
 r207: [456..457]
 r208: [454..455]
 r209: [452..453]
 r210: [450..451]
 r211: [446..447]
 r212: [444..445]
 r213: [440..441]
 r214: [436..437]
 r215: [434..435]
 r216: [432..433]
 r217: [430..431]
 r218: [428..429]
 r219: [424..425]
 r220: [414..423]
 r221: [420..421]
 r222: [418..419]
 r223: [416..417]
 r224: [414..415]
 r225: [410..411]
 r226: [408..409]
 r227: [406..407]
 r228: [404..405]
 r229: [402..403]
 r230: [398..399]
 r231: [396..397]
 r232: [394..395]
 r233: [392..393]
 r234: [390..391]
 r235: [378..387]
 r236: [384..385]
 r237: [382..383]
 r238: [380..381]
 r239: [378..379]
 r240: [374..375]
 r241: [372..373]
 r242: [370..371]
 r243: [368..369]
 r244: [366..367]
 r245: [362..363]
 r246: [358..359]
 r247: [356..357]
 r248: [354..355]
 r249: [352..353]
 r250: [350..351]
 r251: [344..345]
 r252: [342..343]
 r253: [340..341]
 r254: [338..339]
 r255: [336..337]
 r256: [332..333]
 r257: [328..329]
 r258: [326..327]
 r259: [324..325]
 r260: [322..323]
 r261: [320..321]
 r262: [314..315]
 r263: [312..313]
 r264: [310..311]
 r265: [308..309]
 r266: [306..307]
 r267: [302..303]
 r268: [298..299]
 r269: [296..297]
 r270: [294..295]
 r271: [292..293]
 r272: [290..291]
 r273: [286..287]
 r274: [280..281]
 r275: [278..279]
 r276: [276..277]
 r277: [274..275]
 r278: [272..273]
 r279: [268..269]
 r280: [266..267]
 r281: [262..263]
 r282: [258..259]
 r283: [256..257]
 r284: [254..255]
 r285: [252..253]
 r286: [250..251]
 r287: [246..247]
 r288: [240..241]
 r289: [238..239]
 r290: [236..237]
 r291: [234..235]
 r292: [232..233]
 r293: [228..229]
 r294: [226..227]
 r295: [222..223]
 r296: [218..219]
 r297: [216..217]
 r298: [214..215]
 r299: [212..213]
 r300: [210..211]
 r301: [204..205]
 r302: [202..203]
 r303: [200..201]
 r304: [198..199]
 r305: [196..197]
 r306: [36..37]
 r307: [34..35]
 r308: [32..33]
 r309: [30..31]
 r310: [28..29]
 r311: [900..901]
 r312: [894..895]
 r313: [892..893]
 r314: [890..891]
 r315: [888..889]
 r316: [886..887]
 r317: [882..883]
 r318: [880..881]
 r319: [874..875]
 r320: [872..873]
 r321: [866..867]
 r322: [864..865]
 r323: [858..859]
 r324: [856..857]
 r325: [852..853]
 r326: [850..851]
 r327: [848..849]
 r328: [846..847]
 r329: [844..845]
 r330: [840..841]
 r331: [838..839]
 r332: [832..833]
 r333: [830..831]
 r334: [826..827]
 r335: [824..825]
 r336: [822..823]
 r337: [820..821]
 r338: [818..819]
 r339: [814..815]
 r340: [812..813]
 r341: [806..807]
 r342: [792..805]
 r343: [802..803]
 r344: [800..801]
 r345: [798..799]
 r346: [796..797]
 r347: [794..795]
 r348: [792..793]
 r349: [786..787]
 r350: [784..785]
 r351: [778..779]
 r352: [764..777]
 r353: [774..775]
 r354: [772..773]
 r355: [770..771]
 r356: [768..769]
 r357: [766..767]
 r358: [764..765]
 r359: [760..761]
 r360: [758..759]
 r361: [752..753]
 r362: [750..751]
 r363: [746..747]
 r364: [744..745]
 r365: [742..743]
 r366: [740..741]
 r367: [738..739]
 r368: [718..719]
 r369: [716..717]
 r370: [710..711]
 r371: [708..709]
 r372: [704..705]
 r373: [702..703]
 r374: [700..701]
 r375: [698..699]
 r376: [696..697]
 r377: [692..693]
 r378: [690..691]
 r379: [684..685]
 r380: [670..683]
 r381: [680..681]
 r382: [678..679]
 r383: [676..677]
 r384: [674..675]
 r385: [672..673]
 r386: [670..671]
 r387: [666..667]
 r388: [664..665]
 r389: [662..663]
 r390: [660..661]
 r391: [658..659]
 r392: [654..655]
 r393: [652..653]
 r394: [646..647]
 r395: [632..645]
 r396: [642..643]
 r397: [640..641]
 r398: [638..639]
 r399: [636..637]
 r400: [634..635]
 r401: [632..633]
 r402: [626..627]
 r403: [624..625]
 r404: [618..619]
 r405: [614..617]
 r406: [614..615]
 r407: [610..611]
 r408: [608..609]
 r409: [602..603]
 r410: [588..601]
 r411: [598..599]
 r412: [596..597]
 r413: [594..595]
 r414: [592..593]
 r415: [590..591]
 r416: [588..589]
 r417: [584..585]
 r418: [582..583]
 r419: [576..577]
 r420: [574..575]
 r421: [734..735]
 r422: [732..733]
 r423: [730..731]
 r424: [722..729]
 r425: [722..723]
 r426: [188..189]
 r427: [184..185]
 r428: [180..181]
 r429: [178..179]
 r430: [172..173]
 r431: [168..169]
 r432: [164..165]
 r433: [160..161]
 r434: [158..159]
 r435: [134..135]
 r436: [130..131]
 r437: [128..129]
 r438: [154..155]
 r439: [150..151]
 r440: [146..147]
 r441: [142..143]
 r442: [140..141]
 r443: [20..21]
 r444: [16..17]
 r445: [12..13]
 r446: [7..8]
 r447: [5..6]
 r448: [126..127]
 r449: [122..123]
 r450: [118..119]
 r451: [114..115]
 r452: [78..81]
 r453: [78..79]
 r454: [72..75]
 r455: [72..73]
 r456: [64..69]
 r457: [66..67]
 r458: [64..65]
 r459: [58..61]
 r460: [52..55]
 r461: [108..111]
 r462: [102..105]
 r463: [98..99]
 r464: [94..97]
 r465: [88..91]
 r466: [82..85]
 r467: [50..51]
 r468: [48..49]
 r469: [44..45]
 r470: [42..43]
 r471: [1..2]
 r472: [1206..1207]
 r473: [1204..1205]
 r474: [1202..1203]
 r475: [1200..1201]
 r476: [1194..1197]
 r477: [1192..1193]
 r478: [1188..1191]
 r479: [1186..1187]
 r480: [1182..1185]
 r481: [1180..1181]
 r482: [1178..1179] [1174..1175]
 r483: [1176..1177]
 r484: [1172..1173]
 r485: [1168..1169]
 r486: [1166..1167] [1162..1163]
 r487: [1164..1165]
 r488: [1160..1161]
 r489: [1156..1157]
 r490: [1154..1155] [1150..1151]
 r491: [1152..1153]
 r492: [1148..1149]
 r493: [1146..1147]
 r494: [1144..1145]
 r495: [1142..1143] [1138..1139]
 r496: [1140..1141]
 r497: [1136..1137]
 r498: [1132..1133]
 r499: [1130..1131] [1126..1127]
 r500: [1128..1129]
 r501: [1124..1125]
 r502: [1120..1121]
 r503: [1118..1119] [1114..1115]
 r504: [1116..1117]
 r505: [1112..1113]
 r506: [1108..1109]
 r507: [1106..1107] [1102..1103]
 r508: [1104..1105]
 r509: [1100..1101]
 r510: [1096..1097]
 r511: [1094..1095] [1090..1091]
 r512: [1092..1093]
 r513: [1088..1089]
 r514: [1086..1087]
 r515: [1084..1085]
 r516: [1082..1083] [1078..1079]
 r517: [1080..1081]
 r518: [1076..1077]
 r519: [1072..1073]
 r520: [1070..1071] [1066..1067]
 r521: [1068..1069]
 r522: [1064..1065]
 r523: [1060..1061]
 r524: [1058..1059] [1054..1055]
 r525: [1056..1057]
 r526: [1052..1053]
 r527: [1048..1049]
 r528: [1046..1047] [1042..1043]
 r529: [1044..1045]
 r530: [1040..1041]
 r531: [1036..1037]
 r532: [1034..1035] [1030..1031]
 r533: [1032..1033]
 r534: [1028..1029]
 r535: [1026..1027]
 r536: [1024..1025]
 r537: [1022..1023] [1018..1019]
 r538: [1020..1021]
 r539: [1016..1017]
 r540: [1012..1013]
 r541: [1010..1011] [1006..1007]
 r542: [1008..1009]
 r543: [1004..1005]
 r544: [1000..1001]
 r545: [998..999] [994..995]
 r546: [996..997]
 r547: [992..993]
 r548: [988..989]
 r549: [986..987] [982..983]
 r550: [984..985]
 r551: [980..981]
 r552: [976..977]
 r553: [974..975] [970..971]
 r554: [972..973]
 r555: [968..969]
 r556: [964..965]
 r557: [962..963] [958..959]
 r558: [960..961]
 r559: [956..957]
 r560: [952..953]
 r561: [192..193]
 r562: [950..951]
 r563: [946..947]
 r564: [736..737]
 r565: [732..733]
 r566: [724..729]
 r567: [726..727]
 r568: [728..729]
 r569: [724..725]
 r570: [938..939]
 r571: [934..935]
 r572: [926..927]
 r573: [922..923]
 r574: [914..915]
 r575: [910..911]
 r576: [902..903]
 r577: [898..899]
 r578: [896..897]
 r579: [892..893]
 r580: [884..885]
 r581: [880..881] [876..877]
 r582: [878..879]
 r583: [874..875]
 r584: [870..871]
 r585: [868..869]
 r586: [864..865] [860..861]
 r587: [862..863]
 r588: [858..859]
 r589: [854..855]
 r590: [850..851]
 r591: [842..843]
 r592: [838..839] [834..835]
 r593: [836..837]
 r594: [832..833]
 r595: [828..829]
 r596: [824..825]
 r597: [816..817]
 r598: [812..813] [808..809]
 r599: [810..811]
 r600: [806..807]
 r601: [804..805]
 r602: [800..801]
 r603: [790..791]
 r604: [788..789]
 r605: [784..785] [780..781]
 r606: [782..783]
 r607: [778..779]
 r608: [776..777]
 r609: [772..773]
 r610: [762..763]
 r611: [758..759] [754..755]
 r612: [756..757]
 r613: [752..753]
 r614: [748..749]
 r615: [744..745]
 r616: [720..721]
 r617: [716..717] [712..713]
 r618: [714..715]
 r619: [710..711]
 r620: [706..707]
 r621: [702..703]
 r622: [694..695]
 r623: [690..691] [686..687]
 r624: [688..689]
 r625: [684..685]
 r626: [682..683]
 r627: [678..679]
 r628: [668..669]
 r629: [664..665]
 r630: [656..657]
 r631: [652..653] [648..649]
 r632: [650..651]
 r633: [646..647]
 r634: [644..645]
 r635: [640..641]
 r636: [630..631]
 r637: [628..629]
 r638: [624..625] [620..621]
 r639: [622..623]
 r640: [618..619]
 r641: [616..617]
 r642: [612..613]
 r643: [608..609] [604..605]
 r644: [606..607]
 r645: [602..603]
 r646: [600..601]
 r647: [596..597]
 r648: [586..587]
 r649: [582..583] [578..579]
 r650: [580..581]
 r651: [576..577]
 r652: [572..573]
 r653: [568..569]
 r654: [560..561]
 r655: [556..557]
 r656: [548..549]
 r657: [544..545]
 r658: [536..537]
 r659: [532..533]
 r660: [530..531]
 r661: [530..531]
 r662: [528..529]
 r663: [524..525]
 r664: [516..517]
 r665: [510..511]
 r666: [506..507]
 r667: [504..505]
 r668: [502..503]
 r669: [498..499]
 r670: [490..491]
 r671: [486..487]
 r672: [484..485]
 r673: [480..481]
 r674: [472..473]
 r675: [470..471]
 r676: [466..467]
 r677: [460..461]
 r678: [456..457]
 r679: [448..449]
 r680: [442..443]
 r681: [438..439]
 r682: [434..435]
 r683: [426..427]
 r684: [422..423]
 r685: [418..419]
 r686: [412..413]
 r687: [408..409]
 r688: [400..401]
 r689: [396..397]
 r690: [388..389]
 r691: [386..387]
 r692: [382..383]
 r693: [376..377]
 r694: [372..373]
 r695: [364..365]
 r696: [360..361]
 r697: [356..357]
 r698: [348..349]
 r699: [346..347]
 r700: [342..343]
 r701: [334..335]
 r702: [330..331]
 r703: [326..327]
 r704: [318..319]
 r705: [316..317]
 r706: [312..313]
 r707: [304..305]
 r708: [300..301]
 r709: [296..297]
 r710: [288..289]
 r711: [284..285]
 r712: [282..283]
 r713: [278..279]
 r714: [270..271]
 r715: [264..265]
 r716: [260..261]
 r717: [256..257]
 r718: [248..249]
 r719: [244..245]
 r720: [242..243]
 r721: [238..239]
 r722: [230..231]
 r723: [224..225]
 r724: [220..221]
 r725: [216..217]
 r726: [208..209]
 r727: [206..207]
 r728: [202..203]
 r729: [194..195]
 r730: [38..39]
 r731: [34..35]
 r732: [26..27]
 r733: [26..27]
 r734: [190..191]
 r735: [186..187]
 r736: [182..183]
 r737: [176..177]
 r738: [174..175]
 r739: [174..175]
 r740: [170..171]
 r741: [166..167]
 r742: [162..163]
 r743: [138..139]
 r744: [136..137]
 r745: [132..133]
 r746: [156..157]
 r747: [152..153]
 r748: [148..149]
 r749: [144..145]
 r750: [22..23]
 r751: [18..19]
 r752: [14..15]
 r753: [9..10]
 r754: [126..127]
 r755: [124..125]
 r756: [122..123]
 r757: [120..121]
 r758: [116..117]
 r759: [114..115]
 r760: [80..81]
 r761: [76..77]
 r762: [74..75]
 r763: [70..71]
 r764: [68..69]
 r765: [62..63]
 r766: [60..61]
 r767: [58..59]
 r768: [56..57]
 r769: [54..55]
 r770: [52..53]
 r771: [112..113]
 r772: [110..111]
 r773: [108..109]
 r774: [106..107]
 r775: [104..105]
 r776: [102..103]
 r777: [100..101]
 r778: [96..97]
 r779: [94..95]
 r780: [92..93]
 r781: [90..91]
 r782: [88..89]
 r783: [86..87]
 r784: [84..85]
 r785: [82..83]
 r786: [46..47]
 r788: [1198..1199]
 r789: [0..0]
 r790: [1196..1197]
 r791: [1194..1195]
 r792: [1190..1191]
 r793: [1188..1189]
 r794: [1184..1185]
 r795: [1182..1183]

********** Assignment #1: **********

	 Assigning to 790 (cl=GENERAL_REGS, orig=790, freq=2, tfirst=790, tfreq=2)...
	   Assign 3 to reload r790 (freq=2)
	 Assigning to 791 (cl=GENERAL_REGS, orig=791, freq=2, tfirst=791, tfreq=2)...
	   Assign 3 to reload r791 (freq=2)
	 Assigning to 792 (cl=GENERAL_REGS, orig=792, freq=2, tfirst=792, tfreq=2)...
	   Assign 2 to reload r792 (freq=2)
	 Assigning to 793 (cl=GENERAL_REGS, orig=793, freq=2, tfirst=793, tfreq=2)...
	   Assign 3 to reload r793 (freq=2)
	 Assigning to 794 (cl=GENERAL_REGS, orig=794, freq=2, tfirst=794, tfreq=2)...
	   Assign 2 to reload r794 (freq=2)
	 Assigning to 795 (cl=GENERAL_REGS, orig=795, freq=2, tfirst=795, tfreq=2)...
	   Assign 3 to reload r795 (freq=2)
	 Assigning to 788 (cl=INDEX_REGS, orig=788, freq=1, tfirst=788, tfreq=1)...
	   Assign 0 to reload r788 (freq=1)
	 Assigning to 789 (cl=INDEX_REGS, orig=789, freq=1, tfirst=789, tfreq=1)...
	   Assign 2 to reload r789 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=944, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=912, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 1691
changing reg in insn 1686
changing reg in insn 1678
changing reg in insn 1670
changing reg in insn 1656
changing reg in insn 1534
changing reg in insn 1529
changing reg in insn 1511
changing reg in insn 1484
changing reg in insn 1466
changing reg in insn 1374
changing reg in insn 1359
changing reg in insn 1338
changing reg in insn 1317
changing reg in insn 1245
changing reg in insn 1214
changing reg in insn 1183
changing reg in insn 1152
changing reg in insn 1023
changing reg in insn 975
changing reg in insn 970
changing reg in insn 910
changing reg in insn 905
changing reg in insn 849
changing reg in insn 812
changing reg in insn 735
changing reg in insn 633
changing reg in insn 560
changing reg in insn 400
changing reg in insn 331
changing reg in insn 1696
changing reg in insn 55
changing reg in insn 60
changing reg in insn 58
changing reg in insn 56
changing reg in insn 60
changing reg in insn 58
changing reg in insn 63
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 73
changing reg in insn 71
changing reg in insn 69
changing reg in insn 73
changing reg in insn 71
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 86
changing reg in insn 84
changing reg in insn 82
changing reg in insn 86
changing reg in insn 84
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 95
changing reg in insn 100
changing reg in insn 98
changing reg in insn 96
changing reg in insn 100
changing reg in insn 98
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 113
changing reg in insn 111
changing reg in insn 109
changing reg in insn 113
changing reg in insn 111
changing reg in insn 116
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 126
changing reg in insn 124
changing reg in insn 122
changing reg in insn 126
changing reg in insn 124
changing reg in insn 129
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 139
changing reg in insn 137
changing reg in insn 135
changing reg in insn 139
changing reg in insn 137
changing reg in insn 142
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 147
changing reg in insn 152
changing reg in insn 150
changing reg in insn 148
changing reg in insn 152
changing reg in insn 150
changing reg in insn 155
changing reg in insn 157
changing reg in insn 157
changing reg in insn 159
changing reg in insn 161
changing reg in insn 166
changing reg in insn 164
changing reg in insn 162
changing reg in insn 166
changing reg in insn 164
changing reg in insn 169
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 179
changing reg in insn 177
changing reg in insn 175
changing reg in insn 179
changing reg in insn 177
changing reg in insn 182
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 192
changing reg in insn 190
changing reg in insn 188
changing reg in insn 192
changing reg in insn 190
changing reg in insn 195
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 200
changing reg in insn 205
changing reg in insn 203
changing reg in insn 201
changing reg in insn 205
changing reg in insn 203
changing reg in insn 208
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 218
changing reg in insn 216
changing reg in insn 214
changing reg in insn 218
changing reg in insn 216
changing reg in insn 221
changing reg in insn 223
changing reg in insn 223
changing reg in insn 225
changing reg in insn 227
changing reg in insn 232
changing reg in insn 230
changing reg in insn 228
changing reg in insn 232
changing reg in insn 230
changing reg in insn 235
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 240
changing reg in insn 245
changing reg in insn 243
changing reg in insn 241
changing reg in insn 245
changing reg in insn 243
changing reg in insn 248
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 253
changing reg in insn 258
changing reg in insn 256
changing reg in insn 254
changing reg in insn 258
changing reg in insn 256
changing reg in insn 261
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 266
changing reg in insn 271
changing reg in insn 269
changing reg in insn 267
changing reg in insn 271
changing reg in insn 269
changing reg in insn 274
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 279
changing reg in insn 284
changing reg in insn 282
changing reg in insn 280
changing reg in insn 284
changing reg in insn 282
changing reg in insn 287
changing reg in insn 289
changing reg in insn 289
changing reg in insn 290
changing reg in insn 292
changing reg in insn 297
changing reg in insn 295
changing reg in insn 293
changing reg in insn 297
changing reg in insn 295
changing reg in insn 300
changing reg in insn 302
changing reg in insn 302
changing reg in insn 303
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 322
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 325
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 359
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 362
changing reg in insn 364
changing reg in insn 365
changing reg in insn 369
changing reg in insn 370
changing reg in insn 370
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 375
changing reg in insn 377
changing reg in insn 378
changing reg in insn 382
changing reg in insn 383
changing reg in insn 383
changing reg in insn 385
changing reg in insn 385
changing reg in insn 386
changing reg in insn 386
changing reg in insn 388
changing reg in insn 390
changing reg in insn 391
changing reg in insn 745
changing reg in insn 746
changing reg in insn 746
changing reg in insn 748
changing reg in insn 748
changing reg in insn 749
changing reg in insn 749
changing reg in insn 751
changing reg in insn 753
changing reg in insn 754
changing reg in insn 765
changing reg in insn 766
changing reg in insn 766
changing reg in insn 768
changing reg in insn 768
changing reg in insn 769
changing reg in insn 769
changing reg in insn 771
changing reg in insn 773
changing reg in insn 774
changing reg in insn 785
changing reg in insn 786
changing reg in insn 786
changing reg in insn 788
changing reg in insn 788
changing reg in insn 789
changing reg in insn 789
changing reg in insn 791
changing reg in insn 793
changing reg in insn 794
changing reg in insn 799
changing reg in insn 800
changing reg in insn 818
changing reg in insn 819
changing reg in insn 819
changing reg in insn 821
changing reg in insn 821
changing reg in insn 822
changing reg in insn 822
changing reg in insn 824
changing reg in insn 826
changing reg in insn 827
changing reg in insn 832
changing reg in insn 833
changing reg in insn 833
changing reg in insn 834
changing reg in insn 839
changing reg in insn 840
changing reg in insn 842
changing reg in insn 844
changing reg in insn 855
changing reg in insn 856
changing reg in insn 856
changing reg in insn 858
changing reg in insn 858
changing reg in insn 859
changing reg in insn 859
changing reg in insn 861
changing reg in insn 863
changing reg in insn 864
changing reg in insn 869
changing reg in insn 870
changing reg in insn 877
changing reg in insn 878
changing reg in insn 878
changing reg in insn 880
changing reg in insn 880
changing reg in insn 881
changing reg in insn 881
changing reg in insn 882
changing reg in insn 884
changing reg in insn 885
changing reg in insn 889
changing reg in insn 896
changing reg in insn 891
changing reg in insn 892
changing reg in insn 892
changing reg in insn 894
changing reg in insn 894
changing reg in insn 895
changing reg in insn 895
changing reg in insn 898
changing reg in insn 916
changing reg in insn 917
changing reg in insn 917
changing reg in insn 919
changing reg in insn 919
changing reg in insn 920
changing reg in insn 920
changing reg in insn 922
changing reg in insn 924
changing reg in insn 925
changing reg in insn 930
changing reg in insn 931
changing reg in insn 931
changing reg in insn 932
changing reg in insn 937
changing reg in insn 938
changing reg in insn 941
changing reg in insn 942
changing reg in insn 942
changing reg in insn 944
changing reg in insn 944
changing reg in insn 945
changing reg in insn 945
changing reg in insn 946
changing reg in insn 948
changing reg in insn 949
changing reg in insn 953
changing reg in insn 954
changing reg in insn 954
changing reg in insn 961
changing reg in insn 956
changing reg in insn 957
changing reg in insn 957
changing reg in insn 959
changing reg in insn 959
changing reg in insn 960
changing reg in insn 960
changing reg in insn 963
changing reg in insn 981
changing reg in insn 982
changing reg in insn 982
changing reg in insn 984
changing reg in insn 984
changing reg in insn 985
changing reg in insn 985
changing reg in insn 987
changing reg in insn 989
changing reg in insn 990
changing reg in insn 995
changing reg in insn 996
changing reg in insn 996
changing reg in insn 998
changing reg in insn 998
changing reg in insn 999
changing reg in insn 999
changing reg in insn 1000
changing reg in insn 1002
changing reg in insn 1003
changing reg in insn 1007
changing reg in insn 1014
changing reg in insn 1009
changing reg in insn 1010
changing reg in insn 1010
changing reg in insn 1012
changing reg in insn 1012
changing reg in insn 1013
changing reg in insn 1013
changing reg in insn 1016
changing reg in insn 1029
changing reg in insn 1030
changing reg in insn 1030
changing reg in insn 1032
changing reg in insn 1032
changing reg in insn 1033
changing reg in insn 1033
changing reg in insn 1035
changing reg in insn 1037
changing reg in insn 1038
changing reg in insn 1043
changing reg in insn 1044
changing reg in insn 1050
changing reg in insn 1051
changing reg in insn 1051
changing reg in insn 1053
changing reg in insn 1053
changing reg in insn 1054
changing reg in insn 1054
changing reg in insn 1056
changing reg in insn 1058
changing reg in insn 1059
changing reg in insn 1070
changing reg in insn 1071
changing reg in insn 1071
changing reg in insn 1073
changing reg in insn 1073
changing reg in insn 1074
changing reg in insn 1074
changing reg in insn 1076
changing reg in insn 1078
changing reg in insn 1079
changing reg in insn 1085
changing reg in insn 1086
changing reg in insn 1092
changing reg in insn 1093
changing reg in insn 1093
changing reg in insn 1095
changing reg in insn 1095
changing reg in insn 1096
changing reg in insn 1096
changing reg in insn 1098
changing reg in insn 1100
changing reg in insn 1101
changing reg in insn 1112
changing reg in insn 1113
changing reg in insn 1113
changing reg in insn 1115
changing reg in insn 1115
changing reg in insn 1116
changing reg in insn 1116
changing reg in insn 1118
changing reg in insn 1120
changing reg in insn 1121
changing reg in insn 1127
changing reg in insn 1128
changing reg in insn 1134
changing reg in insn 1135
changing reg in insn 1135
changing reg in insn 1137
changing reg in insn 1137
changing reg in insn 1138
changing reg in insn 1138
changing reg in insn 1140
changing reg in insn 1142
changing reg in insn 1143
changing reg in insn 1148
changing reg in insn 1149
changing reg in insn 1164
changing reg in insn 1165
changing reg in insn 1165
changing reg in insn 1167
changing reg in insn 1167
changing reg in insn 1168
changing reg in insn 1168
changing reg in insn 1170
changing reg in insn 1172
changing reg in insn 1173
changing reg in insn 1178
changing reg in insn 1179
changing reg in insn 1179
changing reg in insn 1180
changing reg in insn 1189
changing reg in insn 1190
changing reg in insn 1196
changing reg in insn 1197
changing reg in insn 1197
changing reg in insn 1199
changing reg in insn 1199
changing reg in insn 1200
changing reg in insn 1200
changing reg in insn 1202
changing reg in insn 1204
changing reg in insn 1205
changing reg in insn 1210
changing reg in insn 1211
changing reg in insn 1226
changing reg in insn 1227
changing reg in insn 1227
changing reg in insn 1229
changing reg in insn 1229
changing reg in insn 1230
changing reg in insn 1230
changing reg in insn 1232
changing reg in insn 1234
changing reg in insn 1235
changing reg in insn 1240
changing reg in insn 1241
changing reg in insn 1241
changing reg in insn 1242
changing reg in insn 1251
changing reg in insn 1252
changing reg in insn 1258
changing reg in insn 1259
changing reg in insn 1259
changing reg in insn 1261
changing reg in insn 1261
changing reg in insn 1262
changing reg in insn 1262
changing reg in insn 1264
changing reg in insn 1266
changing reg in insn 1267
changing reg in insn 1277
changing reg in insn 1278
changing reg in insn 1278
changing reg in insn 1280
changing reg in insn 1280
changing reg in insn 1281
changing reg in insn 1281
changing reg in insn 1283
changing reg in insn 1285
changing reg in insn 1286
changing reg in insn 1296
changing reg in insn 1297
changing reg in insn 1297
changing reg in insn 1299
changing reg in insn 1299
changing reg in insn 1300
changing reg in insn 1300
changing reg in insn 1302
changing reg in insn 1304
changing reg in insn 1305
changing reg in insn 396
changing reg in insn 397
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 411
changing reg in insn 411
changing reg in insn 412
changing reg in insn 412
changing reg in insn 414
changing reg in insn 416
changing reg in insn 417
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 427
changing reg in insn 425
changing reg in insn 423
changing reg in insn 427
changing reg in insn 425
changing reg in insn 430
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 437
changing reg in insn 438
changing reg in insn 438
changing reg in insn 443
changing reg in insn 441
changing reg in insn 439
changing reg in insn 443
changing reg in insn 441
changing reg in insn 446
changing reg in insn 448
changing reg in insn 448
changing reg in insn 449
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 456
changing reg in insn 456
changing reg in insn 457
changing reg in insn 457
changing reg in insn 459
changing reg in insn 461
changing reg in insn 462
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 472
changing reg in insn 470
changing reg in insn 468
changing reg in insn 472
changing reg in insn 470
changing reg in insn 475
changing reg in insn 477
changing reg in insn 477
changing reg in insn 478
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 484
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 486
changing reg in insn 488
changing reg in insn 489
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 499
changing reg in insn 497
changing reg in insn 495
changing reg in insn 499
changing reg in insn 497
changing reg in insn 502
changing reg in insn 504
changing reg in insn 504
changing reg in insn 504
changing reg in insn 515
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 509
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 511
changing reg in insn 513
changing reg in insn 514
changing reg in insn 514
changing reg in insn 515
changing reg in insn 519
changing reg in insn 520
changing reg in insn 520
changing reg in insn 525
changing reg in insn 523
changing reg in insn 521
changing reg in insn 525
changing reg in insn 523
changing reg in insn 528
changing reg in insn 530
changing reg in insn 530
changing reg in insn 530
changing reg in insn 541
changing reg in insn 532
changing reg in insn 533
changing reg in insn 533
changing reg in insn 535
changing reg in insn 535
changing reg in insn 536
changing reg in insn 536
changing reg in insn 537
changing reg in insn 539
changing reg in insn 540
changing reg in insn 540
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 544
changing reg in insn 549
changing reg in insn 547
changing reg in insn 545
changing reg in insn 549
changing reg in insn 547
changing reg in insn 552
changing reg in insn 554
changing reg in insn 554
changing reg in insn 555
changing reg in insn 566
changing reg in insn 567
changing reg in insn 567
changing reg in insn 569
changing reg in insn 569
changing reg in insn 570
changing reg in insn 570
changing reg in insn 572
changing reg in insn 574
changing reg in insn 575
changing reg in insn 579
changing reg in insn 580
changing reg in insn 580
changing reg in insn 585
changing reg in insn 583
changing reg in insn 581
changing reg in insn 585
changing reg in insn 583
changing reg in insn 588
changing reg in insn 590
changing reg in insn 590
changing reg in insn 591
changing reg in insn 594
changing reg in insn 595
changing reg in insn 595
changing reg in insn 597
changing reg in insn 597
changing reg in insn 598
changing reg in insn 598
changing reg in insn 599
changing reg in insn 601
changing reg in insn 602
changing reg in insn 606
changing reg in insn 607
changing reg in insn 607
changing reg in insn 612
changing reg in insn 610
changing reg in insn 608
changing reg in insn 612
changing reg in insn 610
changing reg in insn 615
changing reg in insn 617
changing reg in insn 617
changing reg in insn 617
changing reg in insn 628
changing reg in insn 619
changing reg in insn 620
changing reg in insn 620
changing reg in insn 622
changing reg in insn 622
changing reg in insn 623
changing reg in insn 623
changing reg in insn 624
changing reg in insn 626
changing reg in insn 627
changing reg in insn 627
changing reg in insn 628
changing reg in insn 640
changing reg in insn 641
changing reg in insn 641
changing reg in insn 643
changing reg in insn 643
changing reg in insn 644
changing reg in insn 644
changing reg in insn 645
changing reg in insn 647
changing reg in insn 648
changing reg in insn 652
changing reg in insn 653
changing reg in insn 653
changing reg in insn 658
changing reg in insn 656
changing reg in insn 654
changing reg in insn 658
changing reg in insn 656
changing reg in insn 661
changing reg in insn 663
changing reg in insn 663
changing reg in insn 663
changing reg in insn 674
changing reg in insn 665
changing reg in insn 666
changing reg in insn 666
changing reg in insn 668
changing reg in insn 668
changing reg in insn 669
changing reg in insn 669
changing reg in insn 670
changing reg in insn 672
changing reg in insn 673
changing reg in insn 673
changing reg in insn 674
changing reg in insn 678
changing reg in insn 679
changing reg in insn 679
changing reg in insn 684
changing reg in insn 682
changing reg in insn 680
changing reg in insn 684
changing reg in insn 682
changing reg in insn 687
changing reg in insn 689
changing reg in insn 689
changing reg in insn 689
changing reg in insn 692
changing reg in insn 691
changing reg in insn 692
changing reg in insn 694
changing reg in insn 695
changing reg in insn 695
changing reg in insn 700
changing reg in insn 698
changing reg in insn 696
changing reg in insn 700
changing reg in insn 698
changing reg in insn 703
changing reg in insn 705
changing reg in insn 705
changing reg in insn 705
changing reg in insn 716
changing reg in insn 707
changing reg in insn 708
changing reg in insn 708
changing reg in insn 710
changing reg in insn 710
changing reg in insn 711
changing reg in insn 711
changing reg in insn 712
changing reg in insn 714
changing reg in insn 715
changing reg in insn 715
changing reg in insn 716
changing reg in insn 718
changing reg in insn 719
changing reg in insn 719
changing reg in insn 724
changing reg in insn 722
changing reg in insn 720
changing reg in insn 724
changing reg in insn 722
changing reg in insn 727
changing reg in insn 729
changing reg in insn 729
changing reg in insn 730
changing reg in insn 337
changing reg in insn 338
changing reg in insn 338
changing reg in insn 340
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 347
changing reg in insn 346
changing reg in insn 348
changing reg in insn 1344
changing reg in insn 1345
changing reg in insn 1349
changing reg in insn 1350
changing reg in insn 1354
changing reg in insn 1355
changing reg in insn 1355
changing reg in insn 1356
changing reg in insn 1370
changing reg in insn 1371
changing reg in insn 1383
changing reg in insn 1384
changing reg in insn 1388
changing reg in insn 1389
changing reg in insn 1393
changing reg in insn 1394
changing reg in insn 1394
changing reg in insn 1395
changing reg in insn 1401
changing reg in insn 1402
changing reg in insn 1419
changing reg in insn 1420
changing reg in insn 1431
changing reg in insn 1432
changing reg in insn 1452
changing reg in insn 1453
changing reg in insn 1457
changing reg in insn 1458
changing reg in insn 1462
changing reg in insn 1463
changing reg in insn 1479
changing reg in insn 1480
changing reg in insn 1480
changing reg in insn 1481
changing reg in insn 1497
changing reg in insn 1498
changing reg in insn 1502
changing reg in insn 1503
changing reg in insn 1507
changing reg in insn 1508
changing reg in insn 1524
changing reg in insn 1525
changing reg in insn 1525
changing reg in insn 1526
changing reg in insn 1542
changing reg in insn 1545
changing reg in insn 1548
changing reg in insn 1551
changing reg in insn 1554
changing reg in insn 1555
changing reg in insn 1559
changing reg in insn 1562
changing reg in insn 1569
changing reg in insn 1572
changing reg in insn 1571
changing reg in insn 1573
changing reg in insn 1576
changing reg in insn 1579
changing reg in insn 1578
changing reg in insn 1580
changing reg in insn 1583
changing reg in insn 1587
changing reg in insn 1585
changing reg in insn 1586
changing reg in insn 1586
changing reg in insn 1588
changing reg in insn 1591
changing reg in insn 1595
changing reg in insn 1598
changing reg in insn 1602
changing reg in insn 1609
changing reg in insn 1613
changing reg in insn 1616
changing reg in insn 1620
changing reg in insn 1623
changing reg in insn 1624
changing reg in insn 1624
changing reg in insn 1628
changing reg in insn 1631
changing reg in insn 1635
changing reg in insn 1638
changing reg in insn 1642
changing reg in insn 1648
changing reg in insn 1650
changing reg in insn 1652
changing reg in insn 1653
changing reg in insn 1662
changing reg in insn 1664
changing reg in insn 1666
changing reg in insn 1667
changing reg in insn 1696
changing reg in insn 1700
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 32
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 42
changing reg in insn 41
changing reg in insn 40
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 48
changing reg in insn 47
changing reg in insn 46
changing reg in insn 45
changing reg in insn 54
changing reg in insn 55
changing reg in insn 62
changing reg in insn 60
changing reg in insn 59
changing reg in insn 58
changing reg in insn 57
changing reg in insn 56
changing reg in insn 63
changing reg in insn 61
changing reg in insn 60
changing reg in insn 59
changing reg in insn 58
changing reg in insn 57
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 75
changing reg in insn 73
changing reg in insn 72
changing reg in insn 71
changing reg in insn 70
changing reg in insn 69
changing reg in insn 76
changing reg in insn 74
changing reg in insn 73
changing reg in insn 72
changing reg in insn 71
changing reg in insn 70
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 88
changing reg in insn 86
changing reg in insn 85
changing reg in insn 84
changing reg in insn 83
changing reg in insn 82
changing reg in insn 89
changing reg in insn 87
changing reg in insn 86
changing reg in insn 85
changing reg in insn 84
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 102
changing reg in insn 100
changing reg in insn 99
changing reg in insn 98
changing reg in insn 97
changing reg in insn 96
changing reg in insn 103
changing reg in insn 101
changing reg in insn 100
changing reg in insn 99
changing reg in insn 98
changing reg in insn 97
changing reg in insn 101
changing reg in insn 102
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 115
changing reg in insn 113
changing reg in insn 112
changing reg in insn 111
changing reg in insn 110
changing reg in insn 109
changing reg in insn 116
changing reg in insn 114
changing reg in insn 113
changing reg in insn 112
changing reg in insn 111
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 120
changing reg in insn 121
changing reg in insn 128
changing reg in insn 126
changing reg in insn 125
changing reg in insn 124
changing reg in insn 123
changing reg in insn 122
changing reg in insn 129
changing reg in insn 127
changing reg in insn 126
changing reg in insn 125
changing reg in insn 124
changing reg in insn 123
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 133
changing reg in insn 134
changing reg in insn 141
changing reg in insn 139
changing reg in insn 138
changing reg in insn 137
changing reg in insn 136
changing reg in insn 135
changing reg in insn 142
changing reg in insn 140
changing reg in insn 139
changing reg in insn 138
changing reg in insn 137
changing reg in insn 136
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 146
changing reg in insn 147
changing reg in insn 154
changing reg in insn 152
changing reg in insn 151
changing reg in insn 150
changing reg in insn 149
changing reg in insn 148
changing reg in insn 155
changing reg in insn 153
changing reg in insn 152
changing reg in insn 151
changing reg in insn 150
changing reg in insn 149
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 168
changing reg in insn 166
changing reg in insn 165
changing reg in insn 164
changing reg in insn 163
changing reg in insn 162
changing reg in insn 169
changing reg in insn 167
changing reg in insn 166
changing reg in insn 165
changing reg in insn 164
changing reg in insn 163
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 181
changing reg in insn 179
changing reg in insn 178
changing reg in insn 177
changing reg in insn 176
changing reg in insn 175
changing reg in insn 182
changing reg in insn 180
changing reg in insn 179
changing reg in insn 178
changing reg in insn 177
changing reg in insn 176
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 186
changing reg in insn 187
changing reg in insn 194
changing reg in insn 192
changing reg in insn 191
changing reg in insn 190
changing reg in insn 189
changing reg in insn 188
changing reg in insn 195
changing reg in insn 193
changing reg in insn 192
changing reg in insn 191
changing reg in insn 190
changing reg in insn 189
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 199
changing reg in insn 200
changing reg in insn 207
changing reg in insn 205
changing reg in insn 204
changing reg in insn 203
changing reg in insn 202
changing reg in insn 201
changing reg in insn 208
changing reg in insn 206
changing reg in insn 205
changing reg in insn 204
changing reg in insn 203
changing reg in insn 202
changing reg in insn 206
changing reg in insn 207
changing reg in insn 209
changing reg in insn 212
changing reg in insn 213
changing reg in insn 220
changing reg in insn 218
changing reg in insn 217
changing reg in insn 216
changing reg in insn 215
changing reg in insn 214
changing reg in insn 221
changing reg in insn 219
changing reg in insn 218
changing reg in insn 217
changing reg in insn 216
changing reg in insn 215
changing reg in insn 219
changing reg in insn 220
changing reg in insn 222
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 234
changing reg in insn 232
changing reg in insn 231
changing reg in insn 230
changing reg in insn 229
changing reg in insn 228
changing reg in insn 235
changing reg in insn 233
changing reg in insn 232
changing reg in insn 231
changing reg in insn 230
changing reg in insn 229
changing reg in insn 233
changing reg in insn 234
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 247
changing reg in insn 245
changing reg in insn 244
changing reg in insn 243
changing reg in insn 242
changing reg in insn 241
changing reg in insn 248
changing reg in insn 246
changing reg in insn 245
changing reg in insn 244
changing reg in insn 243
changing reg in insn 242
changing reg in insn 246
changing reg in insn 247
changing reg in insn 249
changing reg in insn 252
changing reg in insn 253
changing reg in insn 260
changing reg in insn 258
changing reg in insn 257
changing reg in insn 256
changing reg in insn 255
changing reg in insn 254
changing reg in insn 261
changing reg in insn 259
changing reg in insn 258
changing reg in insn 257
changing reg in insn 256
changing reg in insn 255
changing reg in insn 259
changing reg in insn 260
changing reg in insn 262
changing reg in insn 265
changing reg in insn 266
changing reg in insn 273
changing reg in insn 271
changing reg in insn 270
changing reg in insn 269
changing reg in insn 268
changing reg in insn 267
changing reg in insn 274
changing reg in insn 272
changing reg in insn 271
changing reg in insn 270
changing reg in insn 269
changing reg in insn 268
changing reg in insn 272
changing reg in insn 273
changing reg in insn 275
changing reg in insn 278
changing reg in insn 279
changing reg in insn 286
changing reg in insn 284
changing reg in insn 283
changing reg in insn 282
changing reg in insn 281
changing reg in insn 280
changing reg in insn 287
changing reg in insn 285
changing reg in insn 284
changing reg in insn 283
changing reg in insn 282
changing reg in insn 281
changing reg in insn 285
changing reg in insn 286
changing reg in insn 288
changing reg in insn 291
changing reg in insn 292
changing reg in insn 299
changing reg in insn 297
changing reg in insn 296
changing reg in insn 295
changing reg in insn 294
changing reg in insn 293
changing reg in insn 300
changing reg in insn 298
changing reg in insn 297
changing reg in insn 296
changing reg in insn 295
changing reg in insn 294
changing reg in insn 298
changing reg in insn 299
changing reg in insn 301
changing reg in insn 311
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 318
changing reg in insn 319
changing reg in insn 321
changing reg in insn 336
changing reg in insn 337
changing reg in insn 339
changing reg in insn 342
changing reg in insn 346
changing reg in insn 344
changing reg in insn 345
changing reg in insn 343
changing reg in insn 344
changing reg in insn 345
changing reg in insn 346
changing reg in insn 355
changing reg in insn 356
changing reg in insn 358
changing reg in insn 368
changing reg in insn 369
changing reg in insn 371
changing reg in insn 381
changing reg in insn 382
changing reg in insn 384
changing reg in insn 395
changing reg in insn 396
changing reg in insn 405
changing reg in insn 406
changing reg in insn 407
changing reg in insn 408
changing reg in insn 410
changing reg in insn 420
changing reg in insn 421
changing reg in insn 429
changing reg in insn 427
changing reg in insn 426
changing reg in insn 425
changing reg in insn 424
changing reg in insn 423
changing reg in insn 430
changing reg in insn 428
changing reg in insn 427
changing reg in insn 426
changing reg in insn 425
changing reg in insn 424
changing reg in insn 428
changing reg in insn 429
changing reg in insn 431
changing reg in insn 434
changing reg in insn 435
changing reg in insn 436
changing reg in insn 437
changing reg in insn 445
changing reg in insn 443
changing reg in insn 442
changing reg in insn 441
changing reg in insn 440
changing reg in insn 439
changing reg in insn 446
changing reg in insn 444
changing reg in insn 443
changing reg in insn 442
changing reg in insn 441
changing reg in insn 440
changing reg in insn 444
changing reg in insn 445
changing reg in insn 447
changing reg in insn 452
changing reg in insn 453
changing reg in insn 455
changing reg in insn 465
changing reg in insn 466
changing reg in insn 474
changing reg in insn 472
changing reg in insn 471
changing reg in insn 470
changing reg in insn 469
changing reg in insn 468
changing reg in insn 475
changing reg in insn 473
changing reg in insn 472
changing reg in insn 471
changing reg in insn 470
changing reg in insn 469
changing reg in insn 473
changing reg in insn 474
changing reg in insn 476
changing reg in insn 480
changing reg in insn 481
changing reg in insn 483
changing reg in insn 492
changing reg in insn 493
changing reg in insn 501
changing reg in insn 499
changing reg in insn 498
changing reg in insn 497
changing reg in insn 496
changing reg in insn 495
changing reg in insn 502
changing reg in insn 500
changing reg in insn 499
changing reg in insn 498
changing reg in insn 497
changing reg in insn 496
changing reg in insn 500
changing reg in insn 501
changing reg in insn 503
changing reg in insn 504
changing reg in insn 505
changing reg in insn 506
changing reg in insn 508
changing reg in insn 516
changing reg in insn 517
changing reg in insn 518
changing reg in insn 519
changing reg in insn 527
changing reg in insn 525
changing reg in insn 524
changing reg in insn 523
changing reg in insn 522
changing reg in insn 521
changing reg in insn 528
changing reg in insn 526
changing reg in insn 525
changing reg in insn 524
changing reg in insn 523
changing reg in insn 522
changing reg in insn 526
changing reg in insn 527
changing reg in insn 529
changing reg in insn 530
changing reg in insn 531
changing reg in insn 532
changing reg in insn 534
changing reg in insn 542
changing reg in insn 543
changing reg in insn 551
changing reg in insn 549
changing reg in insn 548
changing reg in insn 547
changing reg in insn 546
changing reg in insn 545
changing reg in insn 552
changing reg in insn 550
changing reg in insn 549
changing reg in insn 548
changing reg in insn 547
changing reg in insn 546
changing reg in insn 550
changing reg in insn 551
changing reg in insn 553
changing reg in insn 565
changing reg in insn 566
changing reg in insn 568
changing reg in insn 578
changing reg in insn 579
changing reg in insn 587
changing reg in insn 585
changing reg in insn 584
changing reg in insn 583
changing reg in insn 582
changing reg in insn 581
changing reg in insn 588
changing reg in insn 586
changing reg in insn 585
changing reg in insn 584
changing reg in insn 583
changing reg in insn 582
changing reg in insn 586
changing reg in insn 587
changing reg in insn 589
changing reg in insn 593
changing reg in insn 594
changing reg in insn 596
changing reg in insn 605
changing reg in insn 606
changing reg in insn 614
changing reg in insn 612
changing reg in insn 611
changing reg in insn 610
changing reg in insn 609
changing reg in insn 608
changing reg in insn 615
changing reg in insn 613
changing reg in insn 612
changing reg in insn 611
changing reg in insn 610
changing reg in insn 609
changing reg in insn 613
changing reg in insn 614
changing reg in insn 616
changing reg in insn 617
changing reg in insn 618
changing reg in insn 619
changing reg in insn 621
changing reg in insn 639
changing reg in insn 640
changing reg in insn 642
changing reg in insn 651
changing reg in insn 652
changing reg in insn 660
changing reg in insn 658
changing reg in insn 657
changing reg in insn 656
changing reg in insn 655
changing reg in insn 654
changing reg in insn 661
changing reg in insn 659
changing reg in insn 658
changing reg in insn 657
changing reg in insn 656
changing reg in insn 655
changing reg in insn 659
changing reg in insn 660
changing reg in insn 662
changing reg in insn 663
changing reg in insn 664
changing reg in insn 665
changing reg in insn 667
changing reg in insn 675
changing reg in insn 676
changing reg in insn 677
changing reg in insn 678
changing reg in insn 686
changing reg in insn 684
changing reg in insn 683
changing reg in insn 682
changing reg in insn 681
changing reg in insn 680
changing reg in insn 687
changing reg in insn 685
changing reg in insn 684
changing reg in insn 683
changing reg in insn 682
changing reg in insn 681
changing reg in insn 685
changing reg in insn 686
changing reg in insn 688
changing reg in insn 689
changing reg in insn 690
changing reg in insn 691
changing reg in insn 693
changing reg in insn 694
changing reg in insn 702
changing reg in insn 700
changing reg in insn 699
changing reg in insn 698
changing reg in insn 697
changing reg in insn 696
changing reg in insn 703
changing reg in insn 701
changing reg in insn 700
changing reg in insn 699
changing reg in insn 698
changing reg in insn 697
changing reg in insn 701
changing reg in insn 702
changing reg in insn 704
changing reg in insn 705
changing reg in insn 706
changing reg in insn 707
changing reg in insn 709
changing reg in insn 717
changing reg in insn 718
changing reg in insn 726
changing reg in insn 724
changing reg in insn 723
changing reg in insn 722
changing reg in insn 721
changing reg in insn 720
changing reg in insn 727
changing reg in insn 725
changing reg in insn 724
changing reg in insn 723
changing reg in insn 722
changing reg in insn 721
changing reg in insn 725
changing reg in insn 726
changing reg in insn 728
changing reg in insn 744
changing reg in insn 745
changing reg in insn 747
changing reg in insn 764
changing reg in insn 765
changing reg in insn 767
changing reg in insn 784
changing reg in insn 785
changing reg in insn 787
changing reg in insn 798
changing reg in insn 799
changing reg in insn 803
changing reg in insn 804
changing reg in insn 805
changing reg in insn 807
changing reg in insn 806
changing reg in insn 807
changing reg in insn 817
changing reg in insn 818
changing reg in insn 820
changing reg in insn 831
changing reg in insn 832
changing reg in insn 838
changing reg in insn 839
changing reg in insn 841
changing reg in insn 842
changing reg in insn 843
changing reg in insn 844
changing reg in insn 854
changing reg in insn 855
changing reg in insn 857
changing reg in insn 868
changing reg in insn 869
changing reg in insn 873
changing reg in insn 874
changing reg in insn 876
changing reg in insn 877
changing reg in insn 879
changing reg in insn 888
changing reg in insn 889
changing reg in insn 890
changing reg in insn 891
changing reg in insn 893
changing reg in insn 915
changing reg in insn 916
changing reg in insn 918
changing reg in insn 929
changing reg in insn 930
changing reg in insn 936
changing reg in insn 937
changing reg in insn 940
changing reg in insn 941
changing reg in insn 943
changing reg in insn 952
changing reg in insn 953
changing reg in insn 955
changing reg in insn 956
changing reg in insn 958
changing reg in insn 980
changing reg in insn 981
changing reg in insn 983
changing reg in insn 994
changing reg in insn 995
changing reg in insn 997
changing reg in insn 1006
changing reg in insn 1007
changing reg in insn 1008
changing reg in insn 1009
changing reg in insn 1011
changing reg in insn 1028
changing reg in insn 1029
changing reg in insn 1031
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1049
changing reg in insn 1050
changing reg in insn 1052
changing reg in insn 1063
changing reg in insn 1064
changing reg in insn 1069
changing reg in insn 1070
changing reg in insn 1072
changing reg in insn 1084
changing reg in insn 1085
changing reg in insn 1091
changing reg in insn 1092
changing reg in insn 1094
changing reg in insn 1105
changing reg in insn 1106
changing reg in insn 1111
changing reg in insn 1112
changing reg in insn 1114
changing reg in insn 1126
changing reg in insn 1127
changing reg in insn 1133
changing reg in insn 1134
changing reg in insn 1136
changing reg in insn 1147
changing reg in insn 1148
changing reg in insn 1157
changing reg in insn 1158
changing reg in insn 1163
changing reg in insn 1164
changing reg in insn 1166
changing reg in insn 1177
changing reg in insn 1178
changing reg in insn 1188
changing reg in insn 1189
changing reg in insn 1195
changing reg in insn 1196
changing reg in insn 1198
changing reg in insn 1209
changing reg in insn 1210
changing reg in insn 1219
changing reg in insn 1220
changing reg in insn 1225
changing reg in insn 1226
changing reg in insn 1228
changing reg in insn 1239
changing reg in insn 1240
changing reg in insn 1250
changing reg in insn 1251
changing reg in insn 1257
changing reg in insn 1258
changing reg in insn 1260
changing reg in insn 1270
changing reg in insn 1271
changing reg in insn 1276
changing reg in insn 1277
changing reg in insn 1279
changing reg in insn 1289
changing reg in insn 1290
changing reg in insn 1295
changing reg in insn 1296
changing reg in insn 1298
changing reg in insn 1314
changing reg in insn 1316
changing reg in insn 1315
changing reg in insn 1316
changing reg in insn 1343
changing reg in insn 1344
changing reg in insn 1348
changing reg in insn 1349
changing reg in insn 1353
changing reg in insn 1354
changing reg in insn 1364
changing reg in insn 1365
changing reg in insn 1365
changing reg in insn 1367
changing reg in insn 1366
changing reg in insn 1368
changing reg in insn 1382
changing reg in insn 1383
changing reg in insn 1387
changing reg in insn 1388
changing reg in insn 1392
changing reg in insn 1393
changing reg in insn 1398
changing reg in insn 1399
changing reg in insn 1400
changing reg in insn 1401
changing reg in insn 1418
changing reg in insn 1419
changing reg in insn 1451
changing reg in insn 1452
changing reg in insn 1456
changing reg in insn 1457
changing reg in insn 1461
changing reg in insn 1462
changing reg in insn 1478
changing reg in insn 1479
changing reg in insn 1496
changing reg in insn 1497
changing reg in insn 1501
changing reg in insn 1502
changing reg in insn 1506
changing reg in insn 1507
changing reg in insn 1523
changing reg in insn 1524
changing reg in insn 1543
changing reg in insn 1544
changing reg in insn 1547
changing reg in insn 1548
changing reg in insn 1549
changing reg in insn 1550
changing reg in insn 1553
changing reg in insn 1554
changing reg in insn 1558
changing reg in insn 1559
changing reg in insn 1560
changing reg in insn 1561
changing reg in insn 1570
changing reg in insn 1571
changing reg in insn 1575
changing reg in insn 1576
changing reg in insn 1577
changing reg in insn 1578
changing reg in insn 1582
changing reg in insn 1583
changing reg in insn 1584
changing reg in insn 1585
changing reg in insn 1590
changing reg in insn 1591
changing reg in insn 1592
changing reg in insn 1593
changing reg in insn 1593
changing reg in insn 1594
changing reg in insn 1597
changing reg in insn 1598
changing reg in insn 1599
changing reg in insn 1600
changing reg in insn 1600
changing reg in insn 1601
changing reg in insn 1608
changing reg in insn 1609
changing reg in insn 1610
changing reg in insn 1611
changing reg in insn 1611
changing reg in insn 1612
changing reg in insn 1615
changing reg in insn 1616
changing reg in insn 1617
changing reg in insn 1618
changing reg in insn 1618
changing reg in insn 1619
changing reg in insn 1622
changing reg in insn 1623
changing reg in insn 1625
changing reg in insn 1626
changing reg in insn 1626
changing reg in insn 1627
changing reg in insn 1630
changing reg in insn 1631
changing reg in insn 1632
changing reg in insn 1633
changing reg in insn 1633
changing reg in insn 1634
changing reg in insn 1637
changing reg in insn 1638
changing reg in insn 1639
changing reg in insn 1640
changing reg in insn 1640
changing reg in insn 1641
changing reg in insn 1661
changing reg in insn 1662
changing reg in insn 17
changing reg in insn 1701
deleting insn with uid = 513.
deleting insn with uid = 539.
deleting insn with uid = 672.
deleting insn with uid = 714.
deleting insn with uid = 896.
deleting insn with uid = 961.
deleting insn with uid = 1014.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 349.
verify found no changes in insn with uid = 363.
verify found no changes in insn with uid = 376.
verify found no changes in insn with uid = 389.
verify found no changes in insn with uid = 415.
verify found no changes in insn with uid = 460.
verify found no changes in insn with uid = 487.
verify found no changes in insn with uid = 512.
verify found no changes in insn with uid = 538.
verify found no changes in insn with uid = 573.
verify found no changes in insn with uid = 600.
verify found no changes in insn with uid = 625.
verify found no changes in insn with uid = 646.
verify found no changes in insn with uid = 671.
verify found no changes in insn with uid = 713.
verify found no changes in insn with uid = 752.
verify found no changes in insn with uid = 758.
verify found no changes in insn with uid = 760.
verify found no changes in insn with uid = 772.
verify found no changes in insn with uid = 778.
verify found no changes in insn with uid = 780.
verify found no changes in insn with uid = 792.
verify found no changes in insn with uid = 825.
verify found no changes in insn with uid = 862.
verify found no changes in insn with uid = 883.
verify found no changes in insn with uid = 900.
verify found no changes in insn with uid = 923.
verify found no changes in insn with uid = 947.
verify found no changes in insn with uid = 965.
verify found no changes in insn with uid = 988.
verify found no changes in insn with uid = 1001.
verify found no changes in insn with uid = 1018.
verify found no changes in insn with uid = 1036.
verify found no changes in insn with uid = 1057.
verify found no changes in insn with uid = 1077.
verify found no changes in insn with uid = 1099.
verify found no changes in insn with uid = 1119.
verify found no changes in insn with uid = 1141.
verify found no changes in insn with uid = 1171.
verify found no changes in insn with uid = 1203.
verify found no changes in insn with uid = 1233.
verify found no changes in insn with uid = 1265.
verify found no changes in insn with uid = 1284.
verify found no changes in insn with uid = 1303.
verify found no changes in insn with uid = 1308.
verify found no changes in insn with uid = 1310.
verify found no changes in insn with uid = 1369.
verify found no changes in insn with uid = 1410.
verify found no changes in insn with uid = 1425.
verify found no changes in insn with uid = 1430.
verify found no changes in insn with uid = 1546.
verify found no changes in insn with uid = 1552.
verify found no changes in insn with uid = 1563.
verify found no changes in insn with uid = 1574.
verify found no changes in insn with uid = 1581.
verify found no changes in insn with uid = 1589.
verify found no changes in insn with uid = 1596.
verify found no changes in insn with uid = 1603.
verify found no changes in insn with uid = 1614.
verify found no changes in insn with uid = 1621.
verify found no changes in insn with uid = 1629.
verify found no changes in insn with uid = 1636.
verify found no changes in insn with uid = 1643.
verify found no changes in insn with uid = 1651.
verify found no changes in insn with uid = 1665.
verify found no changes in insn with uid = 1703.


int command_line(Preprocess*, IOFiles*, Procpar_info*, int, char**, int*, int*, int*, bool*, bool*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={803d,752u} r1={196d,192u,131e} r2={76d,9u,3e} r3={9d,9u} r4={112d,46u} r5={130d,64u} r6={1d,477u} r7={1d,218u} r8={66d} r9={66d} r10={66d} r11={66d} r12={66d} r13={66d} r14={66d} r15={66d} r17={502d,82u} r18={66d} r19={66d} r20={1d,1u,112e} r21={76d,13u} r22={67d} r23={67d} r24={67d} r25={67d} r26={67d} r27={67d} r28={67d} r29={66d} r30={66d} r31={66d} r32={66d} r33={66d} r34={66d} r35={66d} r36={66d} r37={67d,1u} r38={67d,1u} r39={66d} r40={66d} r45={66d} r46={66d} r47={66d} r48={66d} r49={66d} r50={66d} r51={66d} r52={66d} r53={66d} r54={66d} r55={66d} r56={66d} r57={66d} r58={66d} r59={66d} r60={66d} r61={66d} r62={66d} r63={66d} r64={66d} r65={66d} r66={66d} r67={66d} r68={66d} r69={66d} r70={66d} r71={66d} r72={66d} r73={66d} r74={66d} r75={66d} r76={66d} r77={66d} r78={66d} r79={66d} r80={66d} 
;;    total ref usage 8317{6206d,1865u,246e} in 1410{1344 regular + 66 call} insns.
(note 1 0 18 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 17 [flags] 472 473 474 475 476 477 478 479 480
(note 18 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 18 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])
        (reg:DI 5 di [ preprocess ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])
        (reg:DI 4 si [ io_filenames ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -876 [0xfffffffffffffc94])) [0 argc+0 S4 A32])
        (reg:SI 2 cx [ argc ])) sim2fitman_com_line.cpp:50 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])
        (reg:DI 37 r8 [ argv ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])
        (reg:DI 38 r9 [ fid ])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [472])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 arg_read+0 S8 A64])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -904 [0xfffffffffffffc78])) [0 arg_read+0 S8 A64])
        (reg/f:DI 0 ax [472])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])
        (reg/f:DI 0 ax [473])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [474])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 overwrite+0 S8 A64])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -920 [0xfffffffffffffc68])) [0 overwrite+0 S8 A64])
        (reg/f:DI 0 ax [474])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [475])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 verbose+0 S8 A64])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -928 [0xfffffffffffffc60])) [0 verbose+0 S8 A64])
        (reg/f:DI 0 ax [475])) sim2fitman_com_line.cpp:50 89 {*movdi_internal}
     (nil))
(note 16 15 17 2 NOTE_INSN_FUNCTION_BEG)
(insn 17 16 20 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.6217+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [788])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:50 986 {stack_tls_protect_set_di}
     (nil))
(insn 20 17 21 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -829 [0xfffffffffffffcc3])) [0 ir_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:54 93 {*movqi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -828 [0xfffffffffffffcc4])) [0 irn_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:55 93 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:56 93 {*movqi_internal}
     (nil))
(insn 23 22 24 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -827 [0xfffffffffffffcc5])) [0 rscale_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:58 93 {*movqi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -826 [0xfffffffffffffcc6])) [0 rbc_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:59 93 {*movqi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -825 [0xfffffffffffffcc7])) [0 rif_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:60 93 {*movqi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:61 93 {*movqi_internal}
     (nil))
(insn 27 26 28 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -831 [0xfffffffffffffcc1])) [0 only_suppressed+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:63 93 {*movqi_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -830 [0xfffffffffffffcc2])) [0 only_unsuppressed+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:64 93 {*movqi_internal}
     (nil))
(insn 29 28 30 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -808 [0xfffffffffffffcd8])) [0 temp_long+0 S8 A64])
        (const_int 0 [0])) sim2fitman_com_line.cpp:66 89 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:67 90 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -812 [0xfffffffffffffcd4])) [0 s_u_out+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:68 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (parallel [
            (set (reg:DI 0 ax [476])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:71 218 {*adddi_1}
     (nil))
(insn 33 32 1830 2 (set (reg:DI 3 bx [790])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_com_line.cpp:71 89 {*movdi_internal}
     (nil))
(insn 1830 33 34 2 (set (mem/c:DI (reg:DI 0 ax [476]) [0 MEM[(void *)&filename]+0 S8 A64])
        (reg:DI 3 bx [790])) sim2fitman_com_line.cpp:71 89 {*movdi_internal}
     (nil))
(insn 34 1830 1831 2 (set (reg:DI 3 bx [791])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_com_line.cpp:71 89 {*movdi_internal}
     (nil))
(insn 1831 34 35 2 (set (mem/c:DI (plus:DI (reg:DI 0 ax [476])
                (const_int 8 [0x8])) [0 MEM[(void *)&filename]+8 S8 A64])
        (reg:DI 3 bx [791])) sim2fitman_com_line.cpp:71 89 {*movdi_internal}
     (nil))
(insn 35 1831 36 2 (set (mem/c:SI (plus:DI (reg:DI 0 ax [476])
                (const_int 16 [0x10])) [0 MEM[(void *)&filename]+16 S4 A64])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_com_line.cpp:71 90 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (set (mem/c:HI (plus:DI (reg:DI 0 ax [476])
                (const_int 20 [0x14])) [0 MEM[(void *)&filename]+20 S2 A32])
        (const_int 101 [0x65])) sim2fitman_com_line.cpp:71 92 {*movhi_internal}
     (nil))
(insn 37 36 38 2 (parallel [
            (set (reg:DI 0 ax [477])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:72 218 {*adddi_1}
     (nil))
(insn 38 37 39 2 (parallel [
            (set (reg:DI 0 ax [478])
                (plus:DI (reg:DI 0 ax [477])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:72 218 {*adddi_1}
     (nil))
(insn 39 38 1832 2 (set (reg:DI 2 cx [792])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 1832 39 40 2 (set (mem/c:DI (reg:DI 0 ax [478]) [0 MEM[(void *)&filename + 256B]+0 S8 A64])
        (reg:DI 2 cx [792])) sim2fitman_com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 40 1832 1833 2 (set (reg:DI 3 bx [793])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 1833 40 41 2 (set (mem/c:DI (plus:DI (reg:DI 0 ax [478])
                (const_int 8 [0x8])) [0 MEM[(void *)&filename + 256B]+8 S8 A64])
        (reg:DI 3 bx [793])) sim2fitman_com_line.cpp:72 89 {*movdi_internal}
     (nil))
(insn 41 1833 42 2 (set (mem/c:SI (plus:DI (reg:DI 0 ax [478])
                (const_int 16 [0x10])) [0 MEM[(void *)&filename + 256B]+16 S4 A64])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_com_line.cpp:72 90 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (mem/c:HI (plus:DI (reg:DI 0 ax [478])
                (const_int 20 [0x14])) [0 MEM[(void *)&filename + 256B]+20 S2 A32])
        (const_int 101 [0x65])) sim2fitman_com_line.cpp:72 92 {*movhi_internal}
     (nil))
(insn 43 42 44 2 (parallel [
            (set (reg:DI 0 ax [479])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:73 218 {*adddi_1}
     (nil))
(insn 44 43 45 2 (parallel [
            (set (reg:DI 0 ax [480])
                (plus:DI (reg:DI 0 ax [479])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:73 218 {*adddi_1}
     (nil))
(insn 45 44 1834 2 (set (reg:DI 2 cx [794])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_com_line.cpp:73 89 {*movdi_internal}
     (nil))
(insn 1834 45 46 2 (set (mem/c:DI (reg:DI 0 ax [480]) [0 MEM[(void *)&filename + 512B]+0 S8 A64])
        (reg:DI 2 cx [794])) sim2fitman_com_line.cpp:73 89 {*movdi_internal}
     (nil))
(insn 46 1834 1835 2 (set (reg:DI 3 bx [795])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_com_line.cpp:73 89 {*movdi_internal}
     (nil))
(insn 1835 46 47 2 (set (mem/c:DI (plus:DI (reg:DI 0 ax [480])
                (const_int 8 [0x8])) [0 MEM[(void *)&filename + 512B]+8 S8 A64])
        (reg:DI 3 bx [795])) sim2fitman_com_line.cpp:73 89 {*movdi_internal}
     (nil))
(insn 47 1835 48 2 (set (mem/c:SI (plus:DI (reg:DI 0 ax [480])
                (const_int 16 [0x10])) [0 MEM[(void *)&filename + 512B]+16 S4 A64])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_com_line.cpp:73 90 {*movsi_internal}
     (nil))
(insn 48 47 49 2 (set (mem/c:HI (plus:DI (reg:DI 0 ax [480])
                (const_int 20 [0x14])) [0 MEM[(void *)&filename + 512B]+20 S2 A32])
        (const_int 101 [0x65])) sim2fitman_com_line.cpp:73 92 {*movhi_internal}
     (nil))
(insn 49 48 305 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:76 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 305 49 50 3 3 "" [1 uses])
(note 50 305 51 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_com_line.cpp:76 7 {*cmpsi_1}
     (nil))
(jump_insn 52 51 53 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 308)
            (pc))) sim2fitman_com_line.cpp:76 612 {*jcc_1}
     (nil)
 -> 308)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(note 53 52 54 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 4 (set (reg:SI 0 ax [481])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:77 90 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 1 dx [orig:88 D.6204 ] [88])
        (sign_extend:DI (reg:SI 0 ax [481]))) sim2fitman_com_line.cpp:77 142 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 4 (set (reg:DI 0 ax [482])
        (reg:DI 1 dx [orig:88 D.6204 ] [88])) sim2fitman_com_line.cpp:77 89 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (parallel [
            (set (reg:DI 0 ax [482])
                (ashift:DI (reg:DI 0 ax [482])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 512 {*ashldi3_1}
     (nil))
(insn 58 57 59 4 (parallel [
            (set (reg:DI 0 ax [482])
                (plus:DI (reg:DI 0 ax [482])
                    (reg:DI 1 dx [orig:88 D.6204 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.6204 ] [88])
            (const_int 9 [0x9]))
        (nil)))
(insn 59 58 60 4 (parallel [
            (set (reg:DI 0 ax [482])
                (ashift:DI (reg:DI 0 ax [482])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 512 {*ashldi3_1}
     (nil))
(insn 60 59 61 4 (parallel [
            (set (reg:DI 0 ax [482])
                (plus:DI (reg:DI 0 ax [482])
                    (reg:DI 1 dx [orig:88 D.6204 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.6204 ] [88])
            (const_int 19 [0x13]))
        (nil)))
(insn 61 60 62 4 (parallel [
            (set (reg:DI 0 ax [483])
                (ashift:DI (reg:DI 0 ax [482])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 512 {*ashldi3_1}
     (nil))
(insn 62 61 63 4 (set (reg:DI 0 ax [482])
        (reg:DI 0 ax [483])) sim2fitman_com_line.cpp:77 89 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:DI 1 dx [orig:89 D.6204 ] [89])
        (reg:DI 0 ax [482])) sim2fitman_com_line.cpp:77 89 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:77 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.6205 ] [90])
                (plus:DI (reg/f:DI 0 ax [484])
                    (reg:DI 1 dx [orig:89 D.6204 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:77 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6204 ] [89]))
        (nil)))
(insn 66 65 67 4 (set (mem/j:SI (reg/f:DI 0 ax [orig:90 D.6205 ] [90]) [0 _53->fid_scale+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:77 90 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:SI 0 ax [485])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:78 90 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 1 dx [orig:91 D.6204 ] [91])
        (sign_extend:DI (reg:SI 0 ax [485]))) sim2fitman_com_line.cpp:78 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 4 (set (reg:DI 0 ax [486])
        (reg:DI 1 dx [orig:91 D.6204 ] [91])) sim2fitman_com_line.cpp:78 89 {*movdi_internal}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:DI 0 ax [486])
                (ashift:DI (reg:DI 0 ax [486])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 512 {*ashldi3_1}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg:DI 0 ax [486])
                (plus:DI (reg:DI 0 ax [486])
                    (reg:DI 1 dx [orig:91 D.6204 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:91 D.6204 ] [91])
            (const_int 9 [0x9]))
        (nil)))
(insn 72 71 73 4 (parallel [
            (set (reg:DI 0 ax [486])
                (ashift:DI (reg:DI 0 ax [486])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 512 {*ashldi3_1}
     (nil))
(insn 73 72 74 4 (parallel [
            (set (reg:DI 0 ax [486])
                (plus:DI (reg:DI 0 ax [486])
                    (reg:DI 1 dx [orig:91 D.6204 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:91 D.6204 ] [91])
            (const_int 19 [0x13]))
        (nil)))
(insn 74 73 75 4 (parallel [
            (set (reg:DI 0 ax [487])
                (ashift:DI (reg:DI 0 ax [486])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 512 {*ashldi3_1}
     (nil))
(insn 75 74 76 4 (set (reg:DI 0 ax [486])
        (reg:DI 0 ax [487])) sim2fitman_com_line.cpp:78 89 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 1 dx [orig:92 D.6204 ] [92])
        (reg:DI 0 ax [486])) sim2fitman_com_line.cpp:78 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (set (reg/f:DI 0 ax [488])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:78 89 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.6205 ] [93])
                (plus:DI (reg/f:DI 0 ax [488])
                    (reg:DI 1 dx [orig:92 D.6204 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:78 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.6204 ] [92]))
        (nil)))
(insn 79 78 80 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:93 D.6205 ] [93])
                (const_int 8 [0x8])) [0 _57->scaleby+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:78 90 {*movsi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:SI 0 ax [489])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:79 90 {*movsi_internal}
     (nil))
(insn 81 80 82 4 (set (reg:DI 1 dx [orig:94 D.6204 ] [94])
        (sign_extend:DI (reg:SI 0 ax [489]))) sim2fitman_com_line.cpp:79 142 {*extendsidi2_rex64}
     (nil))
(insn 82 81 83 4 (set (reg:DI 0 ax [490])
        (reg:DI 1 dx [orig:94 D.6204 ] [94])) sim2fitman_com_line.cpp:79 89 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (parallel [
            (set (reg:DI 0 ax [490])
                (ashift:DI (reg:DI 0 ax [490])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 84 83 85 4 (parallel [
            (set (reg:DI 0 ax [490])
                (plus:DI (reg:DI 0 ax [490])
                    (reg:DI 1 dx [orig:94 D.6204 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:94 D.6204 ] [94])
            (const_int 9 [0x9]))
        (nil)))
(insn 85 84 86 4 (parallel [
            (set (reg:DI 0 ax [490])
                (ashift:DI (reg:DI 0 ax [490])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 86 85 87 4 (parallel [
            (set (reg:DI 0 ax [490])
                (plus:DI (reg:DI 0 ax [490])
                    (reg:DI 1 dx [orig:94 D.6204 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:94 D.6204 ] [94])
            (const_int 19 [0x13]))
        (nil)))
(insn 87 86 88 4 (parallel [
            (set (reg:DI 0 ax [491])
                (ashift:DI (reg:DI 0 ax [490])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 512 {*ashldi3_1}
     (nil))
(insn 88 87 89 4 (set (reg:DI 0 ax [490])
        (reg:DI 0 ax [491])) sim2fitman_com_line.cpp:79 89 {*movdi_internal}
     (nil))
(insn 89 88 90 4 (set (reg:DI 1 dx [orig:95 D.6204 ] [95])
        (reg:DI 0 ax [490])) sim2fitman_com_line.cpp:79 89 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (set (reg/f:DI 0 ax [492])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:79 89 {*movdi_internal}
     (nil))
(insn 91 90 92 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 D.6205 ] [96])
                (plus:DI (reg/f:DI 0 ax [492])
                    (reg:DI 1 dx [orig:95 D.6204 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:79 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.6204 ] [95]))
        (nil)))
(insn 92 91 93 4 (set (reg:SF 21 xmm0 [493])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:79 129 {*movsf_internal}
     (nil))
(insn 93 92 94 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:96 D.6205 ] [96])
                (const_int 4 [0x4])) [0 _61->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [493])) sim2fitman_com_line.cpp:79 129 {*movsf_internal}
     (nil))
(insn 94 93 95 4 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:80 90 {*movsi_internal}
     (nil))
(insn 95 94 96 4 (set (reg:DI 1 dx [orig:97 D.6204 ] [97])
        (sign_extend:DI (reg:SI 0 ax [494]))) sim2fitman_com_line.cpp:80 142 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 4 (set (reg:DI 0 ax [495])
        (reg:DI 1 dx [orig:97 D.6204 ] [97])) sim2fitman_com_line.cpp:80 89 {*movdi_internal}
     (nil))
(insn 97 96 98 4 (parallel [
            (set (reg:DI 0 ax [495])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 512 {*ashldi3_1}
     (nil))
(insn 98 97 99 4 (parallel [
            (set (reg:DI 0 ax [495])
                (plus:DI (reg:DI 0 ax [495])
                    (reg:DI 1 dx [orig:97 D.6204 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:97 D.6204 ] [97])
            (const_int 9 [0x9]))
        (nil)))
(insn 99 98 100 4 (parallel [
            (set (reg:DI 0 ax [495])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 512 {*ashldi3_1}
     (nil))
(insn 100 99 101 4 (parallel [
            (set (reg:DI 0 ax [495])
                (plus:DI (reg:DI 0 ax [495])
                    (reg:DI 1 dx [orig:97 D.6204 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:97 D.6204 ] [97])
            (const_int 19 [0x13]))
        (nil)))
(insn 101 100 102 4 (parallel [
            (set (reg:DI 0 ax [496])
                (ashift:DI (reg:DI 0 ax [495])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 512 {*ashldi3_1}
     (nil))
(insn 102 101 103 4 (set (reg:DI 0 ax [495])
        (reg:DI 0 ax [496])) sim2fitman_com_line.cpp:80 89 {*movdi_internal}
     (nil))
(insn 103 102 104 4 (set (reg:DI 1 dx [orig:98 D.6204 ] [98])
        (reg:DI 0 ax [495])) sim2fitman_com_line.cpp:80 89 {*movdi_internal}
     (nil))
(insn 104 103 105 4 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:80 89 {*movdi_internal}
     (nil))
(insn 105 104 106 4 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.6205 ] [99])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:98 D.6204 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:80 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.6204 ] [98]))
        (nil)))
(insn 106 105 107 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:99 D.6205 ] [99])
                (const_int 12 [0xc])) [0 _65->pre_ecc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:80 90 {*movsi_internal}
     (nil))
(insn 107 106 108 4 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:81 90 {*movsi_internal}
     (nil))
(insn 108 107 109 4 (set (reg:DI 1 dx [orig:100 D.6204 ] [100])
        (sign_extend:DI (reg:SI 0 ax [498]))) sim2fitman_com_line.cpp:81 142 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 4 (set (reg:DI 0 ax [499])
        (reg:DI 1 dx [orig:100 D.6204 ] [100])) sim2fitman_com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 110 109 111 4 (parallel [
            (set (reg:DI 0 ax [499])
                (ashift:DI (reg:DI 0 ax [499])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 512 {*ashldi3_1}
     (nil))
(insn 111 110 112 4 (parallel [
            (set (reg:DI 0 ax [499])
                (plus:DI (reg:DI 0 ax [499])
                    (reg:DI 1 dx [orig:100 D.6204 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:100 D.6204 ] [100])
            (const_int 9 [0x9]))
        (nil)))
(insn 112 111 113 4 (parallel [
            (set (reg:DI 0 ax [499])
                (ashift:DI (reg:DI 0 ax [499])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 512 {*ashldi3_1}
     (nil))
(insn 113 112 114 4 (parallel [
            (set (reg:DI 0 ax [499])
                (plus:DI (reg:DI 0 ax [499])
                    (reg:DI 1 dx [orig:100 D.6204 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:100 D.6204 ] [100])
            (const_int 19 [0x13]))
        (nil)))
(insn 114 113 115 4 (parallel [
            (set (reg:DI 0 ax [500])
                (ashift:DI (reg:DI 0 ax [499])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 512 {*ashldi3_1}
     (nil))
(insn 115 114 116 4 (set (reg:DI 0 ax [499])
        (reg:DI 0 ax [500])) sim2fitman_com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 116 115 117 4 (set (reg:DI 1 dx [orig:101 D.6204 ] [101])
        (reg:DI 0 ax [499])) sim2fitman_com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 117 116 118 4 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:81 89 {*movdi_internal}
     (nil))
(insn 118 117 119 4 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.6205 ] [102])
                (plus:DI (reg/f:DI 0 ax [501])
                    (reg:DI 1 dx [orig:101 D.6204 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:81 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:101 D.6204 ] [101]))
        (nil)))
(insn 119 118 120 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:102 D.6205 ] [102])
                (const_int 16 [0x10])) [0 _69->bc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:81 90 {*movsi_internal}
     (nil))
(insn 120 119 121 4 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:82 90 {*movsi_internal}
     (nil))
(insn 121 120 122 4 (set (reg:DI 1 dx [orig:103 D.6204 ] [103])
        (sign_extend:DI (reg:SI 0 ax [502]))) sim2fitman_com_line.cpp:82 142 {*extendsidi2_rex64}
     (nil))
(insn 122 121 123 4 (set (reg:DI 0 ax [503])
        (reg:DI 1 dx [orig:103 D.6204 ] [103])) sim2fitman_com_line.cpp:82 89 {*movdi_internal}
     (nil))
(insn 123 122 124 4 (parallel [
            (set (reg:DI 0 ax [503])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 512 {*ashldi3_1}
     (nil))
(insn 124 123 125 4 (parallel [
            (set (reg:DI 0 ax [503])
                (plus:DI (reg:DI 0 ax [503])
                    (reg:DI 1 dx [orig:103 D.6204 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:103 D.6204 ] [103])
            (const_int 9 [0x9]))
        (nil)))
(insn 125 124 126 4 (parallel [
            (set (reg:DI 0 ax [503])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 512 {*ashldi3_1}
     (nil))
(insn 126 125 127 4 (parallel [
            (set (reg:DI 0 ax [503])
                (plus:DI (reg:DI 0 ax [503])
                    (reg:DI 1 dx [orig:103 D.6204 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:103 D.6204 ] [103])
            (const_int 19 [0x13]))
        (nil)))
(insn 127 126 128 4 (parallel [
            (set (reg:DI 0 ax [504])
                (ashift:DI (reg:DI 0 ax [503])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 512 {*ashldi3_1}
     (nil))
(insn 128 127 129 4 (set (reg:DI 0 ax [503])
        (reg:DI 0 ax [504])) sim2fitman_com_line.cpp:82 89 {*movdi_internal}
     (nil))
(insn 129 128 130 4 (set (reg:DI 1 dx [orig:104 D.6204 ] [104])
        (reg:DI 0 ax [503])) sim2fitman_com_line.cpp:82 89 {*movdi_internal}
     (nil))
(insn 130 129 131 4 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:82 89 {*movdi_internal}
     (nil))
(insn 131 130 132 4 (parallel [
            (set (reg/f:DI 0 ax [orig:105 D.6205 ] [105])
                (plus:DI (reg/f:DI 0 ax [505])
                    (reg:DI 1 dx [orig:104 D.6204 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:82 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:104 D.6204 ] [104]))
        (nil)))
(insn 132 131 133 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:105 D.6205 ] [105])
                (const_int 20 [0x14])) [0 _73->file_type+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:82 90 {*movsi_internal}
     (nil))
(insn 133 132 134 4 (set (reg:SI 0 ax [506])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:83 90 {*movsi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:DI 1 dx [orig:106 D.6204 ] [106])
        (sign_extend:DI (reg:SI 0 ax [506]))) sim2fitman_com_line.cpp:83 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 4 (set (reg:DI 0 ax [507])
        (reg:DI 1 dx [orig:106 D.6204 ] [106])) sim2fitman_com_line.cpp:83 89 {*movdi_internal}
     (nil))
(insn 136 135 137 4 (parallel [
            (set (reg:DI 0 ax [507])
                (ashift:DI (reg:DI 0 ax [507])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 512 {*ashldi3_1}
     (nil))
(insn 137 136 138 4 (parallel [
            (set (reg:DI 0 ax [507])
                (plus:DI (reg:DI 0 ax [507])
                    (reg:DI 1 dx [orig:106 D.6204 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:106 D.6204 ] [106])
            (const_int 9 [0x9]))
        (nil)))
(insn 138 137 139 4 (parallel [
            (set (reg:DI 0 ax [507])
                (ashift:DI (reg:DI 0 ax [507])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 512 {*ashldi3_1}
     (nil))
(insn 139 138 140 4 (parallel [
            (set (reg:DI 0 ax [507])
                (plus:DI (reg:DI 0 ax [507])
                    (reg:DI 1 dx [orig:106 D.6204 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:106 D.6204 ] [106])
            (const_int 19 [0x13]))
        (nil)))
(insn 140 139 141 4 (parallel [
            (set (reg:DI 0 ax [508])
                (ashift:DI (reg:DI 0 ax [507])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 512 {*ashldi3_1}
     (nil))
(insn 141 140 142 4 (set (reg:DI 0 ax [507])
        (reg:DI 0 ax [508])) sim2fitman_com_line.cpp:83 89 {*movdi_internal}
     (nil))
(insn 142 141 143 4 (set (reg:DI 1 dx [orig:107 D.6204 ] [107])
        (reg:DI 0 ax [507])) sim2fitman_com_line.cpp:83 89 {*movdi_internal}
     (nil))
(insn 143 142 144 4 (set (reg/f:DI 0 ax [509])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:83 89 {*movdi_internal}
     (nil))
(insn 144 143 145 4 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.6205 ] [108])
                (plus:DI (reg/f:DI 0 ax [509])
                    (reg:DI 1 dx [orig:107 D.6204 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:83 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:107 D.6204 ] [107]))
        (nil)))
(insn 145 144 146 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:108 D.6205 ] [108])
                (const_int 24 [0x18])) [0 _77->data_zero_fill+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:83 90 {*movsi_internal}
     (nil))
(insn 146 145 147 4 (set (reg:SI 0 ax [510])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:84 90 {*movsi_internal}
     (nil))
(insn 147 146 148 4 (set (reg:DI 1 dx [orig:109 D.6204 ] [109])
        (sign_extend:DI (reg:SI 0 ax [510]))) sim2fitman_com_line.cpp:84 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 4 (set (reg:DI 0 ax [511])
        (reg:DI 1 dx [orig:109 D.6204 ] [109])) sim2fitman_com_line.cpp:84 89 {*movdi_internal}
     (nil))
(insn 149 148 150 4 (parallel [
            (set (reg:DI 0 ax [511])
                (ashift:DI (reg:DI 0 ax [511])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 150 149 151 4 (parallel [
            (set (reg:DI 0 ax [511])
                (plus:DI (reg:DI 0 ax [511])
                    (reg:DI 1 dx [orig:109 D.6204 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:109 D.6204 ] [109])
            (const_int 9 [0x9]))
        (nil)))
(insn 151 150 152 4 (parallel [
            (set (reg:DI 0 ax [511])
                (ashift:DI (reg:DI 0 ax [511])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 152 151 153 4 (parallel [
            (set (reg:DI 0 ax [511])
                (plus:DI (reg:DI 0 ax [511])
                    (reg:DI 1 dx [orig:109 D.6204 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:109 D.6204 ] [109])
            (const_int 19 [0x13]))
        (nil)))
(insn 153 152 154 4 (parallel [
            (set (reg:DI 0 ax [512])
                (ashift:DI (reg:DI 0 ax [511])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 512 {*ashldi3_1}
     (nil))
(insn 154 153 155 4 (set (reg:DI 0 ax [511])
        (reg:DI 0 ax [512])) sim2fitman_com_line.cpp:84 89 {*movdi_internal}
     (nil))
(insn 155 154 156 4 (set (reg:DI 1 dx [orig:110 D.6204 ] [110])
        (reg:DI 0 ax [511])) sim2fitman_com_line.cpp:84 89 {*movdi_internal}
     (nil))
(insn 156 155 157 4 (set (reg/f:DI 0 ax [513])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:84 89 {*movdi_internal}
     (nil))
(insn 157 156 158 4 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.6205 ] [111])
                (plus:DI (reg/f:DI 0 ax [513])
                    (reg:DI 1 dx [orig:110 D.6204 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:84 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.6204 ] [110]))
        (nil)))
(insn 158 157 159 4 (set (reg:SF 21 xmm0 [514])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:84 129 {*movsf_internal}
     (nil))
(insn 159 158 160 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:111 D.6205 ] [111])
                (const_int 28 [0x1c])) [0 _81->comp_filter+0 S4 A32])
        (reg:SF 21 xmm0 [514])) sim2fitman_com_line.cpp:84 129 {*movsf_internal}
     (nil))
(insn 160 159 161 4 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:85 90 {*movsi_internal}
     (nil))
(insn 161 160 162 4 (set (reg:DI 1 dx [orig:112 D.6204 ] [112])
        (sign_extend:DI (reg:SI 0 ax [515]))) sim2fitman_com_line.cpp:85 142 {*extendsidi2_rex64}
     (nil))
(insn 162 161 163 4 (set (reg:DI 0 ax [516])
        (reg:DI 1 dx [orig:112 D.6204 ] [112])) sim2fitman_com_line.cpp:85 89 {*movdi_internal}
     (nil))
(insn 163 162 164 4 (parallel [
            (set (reg:DI 0 ax [516])
                (ashift:DI (reg:DI 0 ax [516])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 512 {*ashldi3_1}
     (nil))
(insn 164 163 165 4 (parallel [
            (set (reg:DI 0 ax [516])
                (plus:DI (reg:DI 0 ax [516])
                    (reg:DI 1 dx [orig:112 D.6204 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:112 D.6204 ] [112])
            (const_int 9 [0x9]))
        (nil)))
(insn 165 164 166 4 (parallel [
            (set (reg:DI 0 ax [516])
                (ashift:DI (reg:DI 0 ax [516])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 512 {*ashldi3_1}
     (nil))
(insn 166 165 167 4 (parallel [
            (set (reg:DI 0 ax [516])
                (plus:DI (reg:DI 0 ax [516])
                    (reg:DI 1 dx [orig:112 D.6204 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:112 D.6204 ] [112])
            (const_int 19 [0x13]))
        (nil)))
(insn 167 166 168 4 (parallel [
            (set (reg:DI 0 ax [517])
                (ashift:DI (reg:DI 0 ax [516])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 512 {*ashldi3_1}
     (nil))
(insn 168 167 169 4 (set (reg:DI 0 ax [516])
        (reg:DI 0 ax [517])) sim2fitman_com_line.cpp:85 89 {*movdi_internal}
     (nil))
(insn 169 168 170 4 (set (reg:DI 1 dx [orig:113 D.6204 ] [113])
        (reg:DI 0 ax [516])) sim2fitman_com_line.cpp:85 89 {*movdi_internal}
     (nil))
(insn 170 169 171 4 (set (reg/f:DI 0 ax [518])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:85 89 {*movdi_internal}
     (nil))
(insn 171 170 172 4 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.6205 ] [114])
                (plus:DI (reg/f:DI 0 ax [518])
                    (reg:DI 1 dx [orig:113 D.6204 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:85 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:113 D.6204 ] [113]))
        (nil)))
(insn 172 171 173 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:114 D.6205 ] [114])
                (const_int 32 [0x20])) [0 _85->max_normalize+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:85 90 {*movsi_internal}
     (nil))
(insn 173 172 174 4 (set (reg:SI 0 ax [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:86 90 {*movsi_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DI 1 dx [orig:115 D.6204 ] [115])
        (sign_extend:DI (reg:SI 0 ax [519]))) sim2fitman_com_line.cpp:86 142 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 4 (set (reg:DI 0 ax [520])
        (reg:DI 1 dx [orig:115 D.6204 ] [115])) sim2fitman_com_line.cpp:86 89 {*movdi_internal}
     (nil))
(insn 176 175 177 4 (parallel [
            (set (reg:DI 0 ax [520])
                (ashift:DI (reg:DI 0 ax [520])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 512 {*ashldi3_1}
     (nil))
(insn 177 176 178 4 (parallel [
            (set (reg:DI 0 ax [520])
                (plus:DI (reg:DI 0 ax [520])
                    (reg:DI 1 dx [orig:115 D.6204 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:115 D.6204 ] [115])
            (const_int 9 [0x9]))
        (nil)))
(insn 178 177 179 4 (parallel [
            (set (reg:DI 0 ax [520])
                (ashift:DI (reg:DI 0 ax [520])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 512 {*ashldi3_1}
     (nil))
(insn 179 178 180 4 (parallel [
            (set (reg:DI 0 ax [520])
                (plus:DI (reg:DI 0 ax [520])
                    (reg:DI 1 dx [orig:115 D.6204 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:115 D.6204 ] [115])
            (const_int 19 [0x13]))
        (nil)))
(insn 180 179 181 4 (parallel [
            (set (reg:DI 0 ax [521])
                (ashift:DI (reg:DI 0 ax [520])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 512 {*ashldi3_1}
     (nil))
(insn 181 180 182 4 (set (reg:DI 0 ax [520])
        (reg:DI 0 ax [521])) sim2fitman_com_line.cpp:86 89 {*movdi_internal}
     (nil))
(insn 182 181 183 4 (set (reg:DI 1 dx [orig:116 D.6204 ] [116])
        (reg:DI 0 ax [520])) sim2fitman_com_line.cpp:86 89 {*movdi_internal}
     (nil))
(insn 183 182 184 4 (set (reg/f:DI 0 ax [522])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:86 89 {*movdi_internal}
     (nil))
(insn 184 183 185 4 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6205 ] [117])
                (plus:DI (reg/f:DI 0 ax [522])
                    (reg:DI 1 dx [orig:116 D.6204 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:86 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.6204 ] [116]))
        (nil)))
(insn 185 184 186 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:117 D.6205 ] [117])
                (const_int 36 [0x24])) [0 _89->pre_quality+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:86 90 {*movsi_internal}
     (nil))
(insn 186 185 187 4 (set (reg:SI 0 ax [523])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:87 90 {*movsi_internal}
     (nil))
(insn 187 186 188 4 (set (reg:DI 1 dx [orig:118 D.6204 ] [118])
        (sign_extend:DI (reg:SI 0 ax [523]))) sim2fitman_com_line.cpp:87 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 4 (set (reg:DI 0 ax [524])
        (reg:DI 1 dx [orig:118 D.6204 ] [118])) sim2fitman_com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 189 188 190 4 (parallel [
            (set (reg:DI 0 ax [524])
                (ashift:DI (reg:DI 0 ax [524])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 512 {*ashldi3_1}
     (nil))
(insn 190 189 191 4 (parallel [
            (set (reg:DI 0 ax [524])
                (plus:DI (reg:DI 0 ax [524])
                    (reg:DI 1 dx [orig:118 D.6204 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:118 D.6204 ] [118])
            (const_int 9 [0x9]))
        (nil)))
(insn 191 190 192 4 (parallel [
            (set (reg:DI 0 ax [524])
                (ashift:DI (reg:DI 0 ax [524])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 512 {*ashldi3_1}
     (nil))
(insn 192 191 193 4 (parallel [
            (set (reg:DI 0 ax [524])
                (plus:DI (reg:DI 0 ax [524])
                    (reg:DI 1 dx [orig:118 D.6204 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:118 D.6204 ] [118])
            (const_int 19 [0x13]))
        (nil)))
(insn 193 192 194 4 (parallel [
            (set (reg:DI 0 ax [525])
                (ashift:DI (reg:DI 0 ax [524])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 512 {*ashldi3_1}
     (nil))
(insn 194 193 195 4 (set (reg:DI 0 ax [524])
        (reg:DI 0 ax [525])) sim2fitman_com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 195 194 196 4 (set (reg:DI 1 dx [orig:119 D.6204 ] [119])
        (reg:DI 0 ax [524])) sim2fitman_com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 196 195 197 4 (set (reg/f:DI 0 ax [526])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:87 89 {*movdi_internal}
     (nil))
(insn 197 196 198 4 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.6205 ] [120])
                (plus:DI (reg/f:DI 0 ax [526])
                    (reg:DI 1 dx [orig:119 D.6204 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:87 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:119 D.6204 ] [119]))
        (nil)))
(insn 198 197 199 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:120 D.6205 ] [120])
                (const_int 40 [0x28])) [0 _93->pre_quecc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:87 90 {*movsi_internal}
     (nil))
(insn 199 198 200 4 (set (reg:SI 0 ax [527])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:88 90 {*movsi_internal}
     (nil))
(insn 200 199 201 4 (set (reg:DI 1 dx [orig:121 D.6204 ] [121])
        (sign_extend:DI (reg:SI 0 ax [527]))) sim2fitman_com_line.cpp:88 142 {*extendsidi2_rex64}
     (nil))
(insn 201 200 202 4 (set (reg:DI 0 ax [528])
        (reg:DI 1 dx [orig:121 D.6204 ] [121])) sim2fitman_com_line.cpp:88 89 {*movdi_internal}
     (nil))
(insn 202 201 203 4 (parallel [
            (set (reg:DI 0 ax [528])
                (ashift:DI (reg:DI 0 ax [528])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 512 {*ashldi3_1}
     (nil))
(insn 203 202 204 4 (parallel [
            (set (reg:DI 0 ax [528])
                (plus:DI (reg:DI 0 ax [528])
                    (reg:DI 1 dx [orig:121 D.6204 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:121 D.6204 ] [121])
            (const_int 9 [0x9]))
        (nil)))
(insn 204 203 205 4 (parallel [
            (set (reg:DI 0 ax [528])
                (ashift:DI (reg:DI 0 ax [528])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 512 {*ashldi3_1}
     (nil))
(insn 205 204 206 4 (parallel [
            (set (reg:DI 0 ax [528])
                (plus:DI (reg:DI 0 ax [528])
                    (reg:DI 1 dx [orig:121 D.6204 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:121 D.6204 ] [121])
            (const_int 19 [0x13]))
        (nil)))
(insn 206 205 207 4 (parallel [
            (set (reg:DI 0 ax [529])
                (ashift:DI (reg:DI 0 ax [528])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 512 {*ashldi3_1}
     (nil))
(insn 207 206 208 4 (set (reg:DI 0 ax [528])
        (reg:DI 0 ax [529])) sim2fitman_com_line.cpp:88 89 {*movdi_internal}
     (nil))
(insn 208 207 209 4 (set (reg:DI 1 dx [orig:122 D.6204 ] [122])
        (reg:DI 0 ax [528])) sim2fitman_com_line.cpp:88 89 {*movdi_internal}
     (nil))
(insn 209 208 210 4 (set (reg/f:DI 0 ax [530])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:88 89 {*movdi_internal}
     (nil))
(insn 210 209 211 4 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.6205 ] [123])
                (plus:DI (reg/f:DI 0 ax [530])
                    (reg:DI 1 dx [orig:122 D.6204 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:88 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:122 D.6204 ] [122]))
        (nil)))
(insn 211 210 212 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:123 D.6205 ] [123])
                (const_int 44 [0x2c])) [0 _97->pre_quecc_points+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:88 90 {*movsi_internal}
     (nil))
(insn 212 211 213 4 (set (reg:SI 0 ax [531])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:89 90 {*movsi_internal}
     (nil))
(insn 213 212 214 4 (set (reg:DI 1 dx [orig:124 D.6204 ] [124])
        (sign_extend:DI (reg:SI 0 ax [531]))) sim2fitman_com_line.cpp:89 142 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 4 (set (reg:DI 0 ax [532])
        (reg:DI 1 dx [orig:124 D.6204 ] [124])) sim2fitman_com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 215 214 216 4 (parallel [
            (set (reg:DI 0 ax [532])
                (ashift:DI (reg:DI 0 ax [532])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 512 {*ashldi3_1}
     (nil))
(insn 216 215 217 4 (parallel [
            (set (reg:DI 0 ax [532])
                (plus:DI (reg:DI 0 ax [532])
                    (reg:DI 1 dx [orig:124 D.6204 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:124 D.6204 ] [124])
            (const_int 9 [0x9]))
        (nil)))
(insn 217 216 218 4 (parallel [
            (set (reg:DI 0 ax [532])
                (ashift:DI (reg:DI 0 ax [532])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 512 {*ashldi3_1}
     (nil))
(insn 218 217 219 4 (parallel [
            (set (reg:DI 0 ax [532])
                (plus:DI (reg:DI 0 ax [532])
                    (reg:DI 1 dx [orig:124 D.6204 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:124 D.6204 ] [124])
            (const_int 19 [0x13]))
        (nil)))
(insn 219 218 220 4 (parallel [
            (set (reg:DI 0 ax [533])
                (ashift:DI (reg:DI 0 ax [532])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 512 {*ashldi3_1}
     (nil))
(insn 220 219 221 4 (set (reg:DI 0 ax [532])
        (reg:DI 0 ax [533])) sim2fitman_com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 221 220 222 4 (set (reg:DI 1 dx [orig:125 D.6204 ] [125])
        (reg:DI 0 ax [532])) sim2fitman_com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 222 221 223 4 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:89 89 {*movdi_internal}
     (nil))
(insn 223 222 224 4 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.6205 ] [126])
                (plus:DI (reg/f:DI 0 ax [534])
                    (reg:DI 1 dx [orig:125 D.6204 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:89 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.6204 ] [125]))
        (nil)))
(insn 224 223 225 4 (set (reg:SF 21 xmm0 [535])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:89 129 {*movsf_internal}
     (nil))
(insn 225 224 226 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:126 D.6205 ] [126])
                (const_int 48 [0x30])) [0 _101->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [535])) sim2fitman_com_line.cpp:89 129 {*movsf_internal}
     (nil))
(insn 226 225 227 4 (set (reg:SI 0 ax [536])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:90 90 {*movsi_internal}
     (nil))
(insn 227 226 228 4 (set (reg:DI 1 dx [orig:127 D.6204 ] [127])
        (sign_extend:DI (reg:SI 0 ax [536]))) sim2fitman_com_line.cpp:90 142 {*extendsidi2_rex64}
     (nil))
(insn 228 227 229 4 (set (reg:DI 0 ax [537])
        (reg:DI 1 dx [orig:127 D.6204 ] [127])) sim2fitman_com_line.cpp:90 89 {*movdi_internal}
     (nil))
(insn 229 228 230 4 (parallel [
            (set (reg:DI 0 ax [537])
                (ashift:DI (reg:DI 0 ax [537])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 512 {*ashldi3_1}
     (nil))
(insn 230 229 231 4 (parallel [
            (set (reg:DI 0 ax [537])
                (plus:DI (reg:DI 0 ax [537])
                    (reg:DI 1 dx [orig:127 D.6204 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:127 D.6204 ] [127])
            (const_int 9 [0x9]))
        (nil)))
(insn 231 230 232 4 (parallel [
            (set (reg:DI 0 ax [537])
                (ashift:DI (reg:DI 0 ax [537])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 512 {*ashldi3_1}
     (nil))
(insn 232 231 233 4 (parallel [
            (set (reg:DI 0 ax [537])
                (plus:DI (reg:DI 0 ax [537])
                    (reg:DI 1 dx [orig:127 D.6204 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:127 D.6204 ] [127])
            (const_int 19 [0x13]))
        (nil)))
(insn 233 232 234 4 (parallel [
            (set (reg:DI 0 ax [538])
                (ashift:DI (reg:DI 0 ax [537])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 512 {*ashldi3_1}
     (nil))
(insn 234 233 235 4 (set (reg:DI 0 ax [537])
        (reg:DI 0 ax [538])) sim2fitman_com_line.cpp:90 89 {*movdi_internal}
     (nil))
(insn 235 234 236 4 (set (reg:DI 1 dx [orig:128 D.6204 ] [128])
        (reg:DI 0 ax [537])) sim2fitman_com_line.cpp:90 89 {*movdi_internal}
     (nil))
(insn 236 235 237 4 (set (reg/f:DI 0 ax [539])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:90 89 {*movdi_internal}
     (nil))
(insn 237 236 238 4 (parallel [
            (set (reg/f:DI 0 ax [orig:129 D.6205 ] [129])
                (plus:DI (reg/f:DI 0 ax [539])
                    (reg:DI 1 dx [orig:128 D.6204 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:90 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:128 D.6204 ] [128]))
        (nil)))
(insn 238 237 239 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:129 D.6205 ] [129])
                (const_int 52 [0x34])) [0 _105->pre_quecc_if+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:90 90 {*movsi_internal}
     (nil))
(insn 239 238 240 4 (set (reg:SI 0 ax [540])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:91 90 {*movsi_internal}
     (nil))
(insn 240 239 241 4 (set (reg:DI 1 dx [orig:130 D.6204 ] [130])
        (sign_extend:DI (reg:SI 0 ax [540]))) sim2fitman_com_line.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 4 (set (reg:DI 0 ax [541])
        (reg:DI 1 dx [orig:130 D.6204 ] [130])) sim2fitman_com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 242 241 243 4 (parallel [
            (set (reg:DI 0 ax [541])
                (ashift:DI (reg:DI 0 ax [541])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 512 {*ashldi3_1}
     (nil))
(insn 243 242 244 4 (parallel [
            (set (reg:DI 0 ax [541])
                (plus:DI (reg:DI 0 ax [541])
                    (reg:DI 1 dx [orig:130 D.6204 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:130 D.6204 ] [130])
            (const_int 9 [0x9]))
        (nil)))
(insn 244 243 245 4 (parallel [
            (set (reg:DI 0 ax [541])
                (ashift:DI (reg:DI 0 ax [541])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 512 {*ashldi3_1}
     (nil))
(insn 245 244 246 4 (parallel [
            (set (reg:DI 0 ax [541])
                (plus:DI (reg:DI 0 ax [541])
                    (reg:DI 1 dx [orig:130 D.6204 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:130 D.6204 ] [130])
            (const_int 19 [0x13]))
        (nil)))
(insn 246 245 247 4 (parallel [
            (set (reg:DI 0 ax [542])
                (ashift:DI (reg:DI 0 ax [541])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 512 {*ashldi3_1}
     (nil))
(insn 247 246 248 4 (set (reg:DI 0 ax [541])
        (reg:DI 0 ax [542])) sim2fitman_com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 248 247 249 4 (set (reg:DI 1 dx [orig:131 D.6204 ] [131])
        (reg:DI 0 ax [541])) sim2fitman_com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 249 248 250 4 (set (reg/f:DI 0 ax [543])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:91 89 {*movdi_internal}
     (nil))
(insn 250 249 251 4 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.6205 ] [132])
                (plus:DI (reg/f:DI 0 ax [543])
                    (reg:DI 1 dx [orig:131 D.6204 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.6204 ] [131]))
        (nil)))
(insn 251 250 252 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:132 D.6205 ] [132])
                (const_int 56 [0x38])) [0 _109->input_file_type+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:91 90 {*movsi_internal}
     (nil))
(insn 252 251 253 4 (set (reg:SI 0 ax [544])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:92 90 {*movsi_internal}
     (nil))
(insn 253 252 254 4 (set (reg:DI 1 dx [orig:133 D.6204 ] [133])
        (sign_extend:DI (reg:SI 0 ax [544]))) sim2fitman_com_line.cpp:92 142 {*extendsidi2_rex64}
     (nil))
(insn 254 253 255 4 (set (reg:DI 0 ax [545])
        (reg:DI 1 dx [orig:133 D.6204 ] [133])) sim2fitman_com_line.cpp:92 89 {*movdi_internal}
     (nil))
(insn 255 254 256 4 (parallel [
            (set (reg:DI 0 ax [545])
                (ashift:DI (reg:DI 0 ax [545])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 512 {*ashldi3_1}
     (nil))
(insn 256 255 257 4 (parallel [
            (set (reg:DI 0 ax [545])
                (plus:DI (reg:DI 0 ax [545])
                    (reg:DI 1 dx [orig:133 D.6204 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:133 D.6204 ] [133])
            (const_int 9 [0x9]))
        (nil)))
(insn 257 256 258 4 (parallel [
            (set (reg:DI 0 ax [545])
                (ashift:DI (reg:DI 0 ax [545])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 512 {*ashldi3_1}
     (nil))
(insn 258 257 259 4 (parallel [
            (set (reg:DI 0 ax [545])
                (plus:DI (reg:DI 0 ax [545])
                    (reg:DI 1 dx [orig:133 D.6204 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:133 D.6204 ] [133])
            (const_int 19 [0x13]))
        (nil)))
(insn 259 258 260 4 (parallel [
            (set (reg:DI 0 ax [546])
                (ashift:DI (reg:DI 0 ax [545])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 512 {*ashldi3_1}
     (nil))
(insn 260 259 261 4 (set (reg:DI 0 ax [545])
        (reg:DI 0 ax [546])) sim2fitman_com_line.cpp:92 89 {*movdi_internal}
     (nil))
(insn 261 260 262 4 (set (reg:DI 1 dx [orig:134 D.6204 ] [134])
        (reg:DI 0 ax [545])) sim2fitman_com_line.cpp:92 89 {*movdi_internal}
     (nil))
(insn 262 261 263 4 (set (reg/f:DI 0 ax [547])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:92 89 {*movdi_internal}
     (nil))
(insn 263 262 264 4 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.6205 ] [135])
                (plus:DI (reg/f:DI 0 ax [547])
                    (reg:DI 1 dx [orig:134 D.6204 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:92 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:134 D.6204 ] [134]))
        (nil)))
(insn 264 263 265 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:135 D.6205 ] [135])
                (const_int 60 [0x3c])) [0 _113->ref_file_argument+0 S4 A32])
        (const_int 5 [0x5])) sim2fitman_com_line.cpp:92 90 {*movsi_internal}
     (nil))
(insn 265 264 266 4 (set (reg:SI 0 ax [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:93 90 {*movsi_internal}
     (nil))
(insn 266 265 267 4 (set (reg:DI 1 dx [orig:136 D.6204 ] [136])
        (sign_extend:DI (reg:SI 0 ax [548]))) sim2fitman_com_line.cpp:93 142 {*extendsidi2_rex64}
     (nil))
(insn 267 266 268 4 (set (reg:DI 0 ax [549])
        (reg:DI 1 dx [orig:136 D.6204 ] [136])) sim2fitman_com_line.cpp:93 89 {*movdi_internal}
     (nil))
(insn 268 267 269 4 (parallel [
            (set (reg:DI 0 ax [549])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 512 {*ashldi3_1}
     (nil))
(insn 269 268 270 4 (parallel [
            (set (reg:DI 0 ax [549])
                (plus:DI (reg:DI 0 ax [549])
                    (reg:DI 1 dx [orig:136 D.6204 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:136 D.6204 ] [136])
            (const_int 9 [0x9]))
        (nil)))
(insn 270 269 271 4 (parallel [
            (set (reg:DI 0 ax [549])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 512 {*ashldi3_1}
     (nil))
(insn 271 270 272 4 (parallel [
            (set (reg:DI 0 ax [549])
                (plus:DI (reg:DI 0 ax [549])
                    (reg:DI 1 dx [orig:136 D.6204 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:136 D.6204 ] [136])
            (const_int 19 [0x13]))
        (nil)))
(insn 272 271 273 4 (parallel [
            (set (reg:DI 0 ax [550])
                (ashift:DI (reg:DI 0 ax [549])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 512 {*ashldi3_1}
     (nil))
(insn 273 272 274 4 (set (reg:DI 0 ax [549])
        (reg:DI 0 ax [550])) sim2fitman_com_line.cpp:93 89 {*movdi_internal}
     (nil))
(insn 274 273 275 4 (set (reg:DI 1 dx [orig:137 D.6204 ] [137])
        (reg:DI 0 ax [549])) sim2fitman_com_line.cpp:93 89 {*movdi_internal}
     (nil))
(insn 275 274 276 4 (set (reg/f:DI 0 ax [551])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:93 89 {*movdi_internal}
     (nil))
(insn 276 275 277 4 (parallel [
            (set (reg/f:DI 0 ax [orig:138 D.6205 ] [138])
                (plus:DI (reg/f:DI 0 ax [551])
                    (reg:DI 1 dx [orig:137 D.6204 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:93 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:137 D.6204 ] [137]))
        (nil)))
(insn 277 276 278 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:138 D.6205 ] [138])
                (const_int 64 [0x40])) [0 _117->csi_reorder+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:93 90 {*movsi_internal}
     (nil))
(insn 278 277 279 4 (set (reg:SI 0 ax [552])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:94 90 {*movsi_internal}
     (nil))
(insn 279 278 280 4 (set (reg:DI 1 dx [orig:139 D.6204 ] [139])
        (sign_extend:DI (reg:SI 0 ax [552]))) sim2fitman_com_line.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 280 279 281 4 (set (reg:DI 0 ax [553])
        (reg:DI 1 dx [orig:139 D.6204 ] [139])) sim2fitman_com_line.cpp:94 89 {*movdi_internal}
     (nil))
(insn 281 280 282 4 (parallel [
            (set (reg:DI 0 ax [553])
                (ashift:DI (reg:DI 0 ax [553])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 512 {*ashldi3_1}
     (nil))
(insn 282 281 283 4 (parallel [
            (set (reg:DI 0 ax [553])
                (plus:DI (reg:DI 0 ax [553])
                    (reg:DI 1 dx [orig:139 D.6204 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:139 D.6204 ] [139])
            (const_int 9 [0x9]))
        (nil)))
(insn 283 282 284 4 (parallel [
            (set (reg:DI 0 ax [553])
                (ashift:DI (reg:DI 0 ax [553])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 512 {*ashldi3_1}
     (nil))
(insn 284 283 285 4 (parallel [
            (set (reg:DI 0 ax [553])
                (plus:DI (reg:DI 0 ax [553])
                    (reg:DI 1 dx [orig:139 D.6204 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:139 D.6204 ] [139])
            (const_int 19 [0x13]))
        (nil)))
(insn 285 284 286 4 (parallel [
            (set (reg:DI 0 ax [554])
                (ashift:DI (reg:DI 0 ax [553])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 512 {*ashldi3_1}
     (nil))
(insn 286 285 287 4 (set (reg:DI 0 ax [553])
        (reg:DI 0 ax [554])) sim2fitman_com_line.cpp:94 89 {*movdi_internal}
     (nil))
(insn 287 286 288 4 (set (reg:DI 1 dx [orig:140 D.6204 ] [140])
        (reg:DI 0 ax [553])) sim2fitman_com_line.cpp:94 89 {*movdi_internal}
     (nil))
(insn 288 287 289 4 (set (reg/f:DI 0 ax [555])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:94 89 {*movdi_internal}
     (nil))
(insn 289 288 290 4 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.6205 ] [141])
                (plus:DI (reg/f:DI 0 ax [555])
                    (reg:DI 1 dx [orig:140 D.6204 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:94 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:140 D.6204 ] [140]))
        (nil)))
(insn 290 289 291 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:141 D.6205 ] [141])
                (const_int 68 [0x44])) [0 _121->tilt+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:94 90 {*movsi_internal}
     (nil))
(insn 291 290 292 4 (set (reg:SI 0 ax [556])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])) sim2fitman_com_line.cpp:95 90 {*movsi_internal}
     (nil))
(insn 292 291 293 4 (set (reg:DI 1 dx [orig:142 D.6204 ] [142])
        (sign_extend:DI (reg:SI 0 ax [556]))) sim2fitman_com_line.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 293 292 294 4 (set (reg:DI 0 ax [557])
        (reg:DI 1 dx [orig:142 D.6204 ] [142])) sim2fitman_com_line.cpp:95 89 {*movdi_internal}
     (nil))
(insn 294 293 295 4 (parallel [
            (set (reg:DI 0 ax [557])
                (ashift:DI (reg:DI 0 ax [557])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 512 {*ashldi3_1}
     (nil))
(insn 295 294 296 4 (parallel [
            (set (reg:DI 0 ax [557])
                (plus:DI (reg:DI 0 ax [557])
                    (reg:DI 1 dx [orig:142 D.6204 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:142 D.6204 ] [142])
            (const_int 9 [0x9]))
        (nil)))
(insn 296 295 297 4 (parallel [
            (set (reg:DI 0 ax [557])
                (ashift:DI (reg:DI 0 ax [557])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 512 {*ashldi3_1}
     (nil))
(insn 297 296 298 4 (parallel [
            (set (reg:DI 0 ax [557])
                (plus:DI (reg:DI 0 ax [557])
                    (reg:DI 1 dx [orig:142 D.6204 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:142 D.6204 ] [142])
            (const_int 19 [0x13]))
        (nil)))
(insn 298 297 299 4 (parallel [
            (set (reg:DI 0 ax [558])
                (ashift:DI (reg:DI 0 ax [557])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 512 {*ashldi3_1}
     (nil))
(insn 299 298 300 4 (set (reg:DI 0 ax [557])
        (reg:DI 0 ax [558])) sim2fitman_com_line.cpp:95 89 {*movdi_internal}
     (nil))
(insn 300 299 301 4 (set (reg:DI 1 dx [orig:143 D.6204 ] [143])
        (reg:DI 0 ax [557])) sim2fitman_com_line.cpp:95 89 {*movdi_internal}
     (nil))
(insn 301 300 302 4 (set (reg/f:DI 0 ax [559])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:95 89 {*movdi_internal}
     (nil))
(insn 302 301 303 4 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.6205 ] [144])
                (plus:DI (reg/f:DI 0 ax [559])
                    (reg:DI 1 dx [orig:143 D.6204 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:95 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.6204 ] [143]))
        (nil)))
(insn 303 302 304 4 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [orig:144 D.6205 ] [144])
                (const_int 72 [0x48])) [0 _125->ecc_present+0 S1 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:95 93 {*movqi_internal}
     (nil))
(insn 304 303 1710 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -824 [0xfffffffffffffcc8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:76 217 {*addsi_1}
     (nil))
(jump_insn 1710 304 1711 4 (set (pc)
        (label_ref 305)) sim2fitman_com_line.cpp:76 654 {jump}
     (nil)
 -> 305)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1711 1710 308)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 560
(code_label 308 1711 309 5 2 "" [1 uses])
(note 309 308 310 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:99 90 {*movsi_internal}
     (nil))
(insn 311 310 312 5 (set (reg/f:DI 0 ax [560])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:100 89 {*movdi_internal}
     (nil))
(insn 312 311 1323 5 (set (mem:SI (reg/f:DI 0 ax [560]) [0 *fid_129(D)+0 S4 A32])
        (const_int 0 [0])) sim2fitman_com_line.cpp:100 90 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              90 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 561
(code_label 1323 312 313 6 49 "" [1 uses])
(note 313 1323 314 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 314 313 315 6 (set (reg:SI 0 ax [561])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:102 90 {*movsi_internal}
     (nil))
(insn 315 314 316 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [561])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -876 [0xfffffffffffffc94])) [0 argc+0 S4 A32]))) sim2fitman_com_line.cpp:102 7 {*cmpsi_1}
     (nil))
(jump_insn 316 315 317 6 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1326)
            (pc))) sim2fitman_com_line.cpp:102 612 {*jcc_1}
     (nil)
 -> 1326)
;;  succ:       91
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 146 147 148 149 562 563
(note 317 316 318 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 318 317 319 7 (set (reg:SI 0 ax [562])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:103 90 {*movsi_internal}
     (nil))
(insn 319 318 320 7 (set (reg:DI 0 ax [orig:145 D.6204 ] [145])
        (sign_extend:DI (reg:SI 0 ax [562]))) sim2fitman_com_line.cpp:103 142 {*extendsidi2_rex64}
     (nil))
(insn 320 319 321 7 (parallel [
            (set (reg:DI 1 dx [orig:146 D.6204 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.6204 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:103 512 {*ashldi3_1}
     (nil))
(insn 321 320 322 7 (set (reg/f:DI 0 ax [563])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:103 89 {*movdi_internal}
     (nil))
(insn 322 321 323 7 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6206 ] [147])
                (plus:DI (reg/f:DI 0 ax [563])
                    (reg:DI 1 dx [orig:146 D.6204 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:103 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:146 D.6204 ] [146]))
        (nil)))
(insn 323 322 324 7 (set (reg/f:DI 0 ax [orig:148 D.6207 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [orig:147 D.6206 ] [147]) [0 *_135+0 S8 A64])) sim2fitman_com_line.cpp:103 89 {*movdi_internal}
     (nil))
(insn 324 323 325 7 (set (reg:QI 0 ax [orig:149 D.6208 ] [149])
        (mem:QI (reg/f:DI 0 ax [orig:148 D.6207 ] [148]) [0 *_136+0 S1 A8])) sim2fitman_com_line.cpp:103 93 {*movqi_internal}
     (nil))
(insn 325 324 326 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:149 D.6208 ] [149])
            (const_int 45 [0x2d]))) sim2fitman_com_line.cpp:103 5 {*cmpqi_1}
     (nil))
(jump_insn 326 325 327 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 353)
            (pc))) sim2fitman_com_line.cpp:103 612 {*jcc_1}
     (nil)
 -> 353)
;;  succ:       8 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 327 326 328 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 328 327 329 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_com_line.cpp:106 7 {*cmpsi_1}
     (nil))
(jump_insn 329 328 330 8 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 334)
            (pc))) sim2fitman_com_line.cpp:106 612 {*jcc_1}
     (nil)
 -> 334)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 330 329 331 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 331 330 1712 9 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -5 [0xfffffffffffffffb])) sim2fitman_com_line.cpp:108 90 {*movsi_internal}
     (nil))
(jump_insn 1712 331 1713 9 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:108 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1713 1712 334)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 421 422 423 424 425 564 565 566 567 568 569
(code_label 334 1713 335 10 6 "" [1 uses])
(note 335 334 336 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 336 335 337 10 (set (reg:SI 0 ax [564])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:111 90 {*movsi_internal}
     (nil))
(insn 337 336 338 10 (set (reg:DI 0 ax [orig:421 D.6204 ] [421])
        (sign_extend:DI (reg:SI 0 ax [564]))) sim2fitman_com_line.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 338 337 339 10 (parallel [
            (set (reg:DI 1 dx [orig:422 D.6204 ] [422])
                (ashift:DI (reg:DI 0 ax [orig:421 D.6204 ] [421])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 512 {*ashldi3_1}
     (nil))
(insn 339 338 340 10 (set (reg/f:DI 0 ax [565])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:111 89 {*movdi_internal}
     (nil))
(insn 340 339 341 10 (parallel [
            (set (reg/f:DI 0 ax [orig:423 D.6206 ] [423])
                (plus:DI (reg/f:DI 0 ax [565])
                    (reg:DI 1 dx [orig:422 D.6204 ] [422])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:422 D.6204 ] [422]))
        (nil)))
(insn 341 340 342 10 (set (reg/f:DI 0 ax [orig:424 D.6207 ] [424])
        (mem/f:DI (reg/f:DI 0 ax [orig:423 D.6206 ] [423]) [0 *_510+0 S8 A64])) sim2fitman_com_line.cpp:111 89 {*movdi_internal}
     (nil))
(insn 342 341 343 10 (parallel [
            (set (reg:DI 1 dx [566])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 218 {*adddi_1}
     (nil))
(insn 343 342 344 10 (set (reg:SI 2 cx [568])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])) sim2fitman_com_line.cpp:111 90 {*movsi_internal}
     (nil))
(insn 344 343 345 10 (set (reg:DI 2 cx [567])
        (sign_extend:DI (reg:SI 2 cx [568]))) sim2fitman_com_line.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 345 344 346 10 (parallel [
            (set (reg:DI 2 cx [569])
                (ashift:DI (reg:DI 2 cx [567])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 512 {*ashldi3_1}
     (nil))
(insn 346 345 347 10 (parallel [
            (set (reg/f:DI 1 dx [orig:425 D.6214 ] [425])
                (plus:DI (reg:DI 1 dx [566])
                    (reg:DI 2 cx [569])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:111 218 {*adddi_1}
     (nil))
(insn 347 346 348 10 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:424 D.6207 ] [424])) sim2fitman_com_line.cpp:111 89 {*movdi_internal}
     (nil))
(insn 348 347 349 10 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:425 D.6214 ] [425])) sim2fitman_com_line.cpp:111 89 {*movdi_internal}
     (nil))
(call_insn 349 348 350 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:111 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 350 349 1714 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:112 217 {*addsi_1}
     (nil))
(jump_insn 1714 350 1715 10 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1715 1714 353)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 150 151 152 153 154 570 571
(code_label 353 1715 354 11 5 "" [1 uses])
(note 354 353 355 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 356 11 (set (reg:SI 0 ax [570])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:117 90 {*movsi_internal}
     (nil))
(insn 356 355 357 11 (set (reg:DI 0 ax [orig:150 D.6204 ] [150])
        (sign_extend:DI (reg:SI 0 ax [570]))) sim2fitman_com_line.cpp:117 142 {*extendsidi2_rex64}
     (nil))
(insn 357 356 358 11 (parallel [
            (set (reg:DI 1 dx [orig:151 D.6204 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.6204 ] [150])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:117 512 {*ashldi3_1}
     (nil))
(insn 358 357 359 11 (set (reg/f:DI 0 ax [571])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:117 89 {*movdi_internal}
     (nil))
(insn 359 358 360 11 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.6206 ] [152])
                (plus:DI (reg/f:DI 0 ax [571])
                    (reg:DI 1 dx [orig:151 D.6204 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:117 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.6204 ] [151]))
        (nil)))
(insn 360 359 361 11 (set (reg/f:DI 0 ax [orig:153 D.6207 ] [153])
        (mem/f:DI (reg/f:DI 0 ax [orig:152 D.6206 ] [152]) [0 *_140+0 S8 A64])) sim2fitman_com_line.cpp:117 89 {*movdi_internal}
     (nil))
(insn 361 360 362 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f9683ed66c0 *.LC2>)) sim2fitman_com_line.cpp:117 89 {*movdi_internal}
     (nil))
(insn 362 361 363 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:153 D.6207 ] [153])) sim2fitman_com_line.cpp:117 89 {*movdi_internal}
     (nil))
(call_insn/i 363 362 364 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:117 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 364 363 365 11 (set (reg:SI 0 ax [orig:154 D.6203 ] [154])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:117 90 {*movsi_internal}
     (nil))
(insn 365 364 366 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:154 D.6203 ] [154])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:117 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 366 365 367 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 393)
            (pc))) sim2fitman_com_line.cpp:117 612 {*jcc_1}
     (nil)
 -> 393)
;;  succ:       14
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 155 156 157 158 159 572 573
(note 367 366 368 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 368 367 369 12 (set (reg:SI 0 ax [572])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:118 90 {*movsi_internal}
     (nil))
(insn 369 368 370 12 (set (reg:DI 0 ax [orig:155 D.6204 ] [155])
        (sign_extend:DI (reg:SI 0 ax [572]))) sim2fitman_com_line.cpp:118 142 {*extendsidi2_rex64}
     (nil))
(insn 370 369 371 12 (parallel [
            (set (reg:DI 1 dx [orig:156 D.6204 ] [156])
                (ashift:DI (reg:DI 0 ax [orig:155 D.6204 ] [155])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:118 512 {*ashldi3_1}
     (nil))
(insn 371 370 372 12 (set (reg/f:DI 0 ax [573])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 372 371 373 12 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.6206 ] [157])
                (plus:DI (reg/f:DI 0 ax [573])
                    (reg:DI 1 dx [orig:156 D.6204 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:118 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:156 D.6204 ] [156]))
        (nil)))
(insn 373 372 374 12 (set (reg/f:DI 0 ax [orig:158 D.6207 ] [158])
        (mem/f:DI (reg/f:DI 0 ax [orig:157 D.6206 ] [157]) [0 *_145+0 S8 A64])) sim2fitman_com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 374 373 375 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f9683ed6750 *.LC3>)) sim2fitman_com_line.cpp:118 89 {*movdi_internal}
     (nil))
(insn 375 374 376 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:158 D.6207 ] [158])) sim2fitman_com_line.cpp:118 89 {*movdi_internal}
     (nil))
(call_insn/i 376 375 377 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:118 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 377 376 378 12 (set (reg:SI 0 ax [orig:159 D.6203 ] [159])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:118 90 {*movsi_internal}
     (nil))
(insn 378 377 379 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:159 D.6203 ] [159])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:117 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 379 378 380 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 393)
            (pc))) sim2fitman_com_line.cpp:117 612 {*jcc_1}
     (nil)
 -> 393)
;;  succ:       14
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 160 161 162 163 164 574 575
(note 380 379 381 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 382 13 (set (reg:SI 0 ax [574])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:119 90 {*movsi_internal}
     (nil))
(insn 382 381 383 13 (set (reg:DI 0 ax [orig:160 D.6204 ] [160])
        (sign_extend:DI (reg:SI 0 ax [574]))) sim2fitman_com_line.cpp:119 142 {*extendsidi2_rex64}
     (nil))
(insn 383 382 384 13 (parallel [
            (set (reg:DI 1 dx [orig:161 D.6204 ] [161])
                (ashift:DI (reg:DI 0 ax [orig:160 D.6204 ] [160])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:119 512 {*ashldi3_1}
     (nil))
(insn 384 383 385 13 (set (reg/f:DI 0 ax [575])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:119 89 {*movdi_internal}
     (nil))
(insn 385 384 386 13 (parallel [
            (set (reg/f:DI 0 ax [orig:162 D.6206 ] [162])
                (plus:DI (reg/f:DI 0 ax [575])
                    (reg:DI 1 dx [orig:161 D.6204 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:119 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:161 D.6204 ] [161]))
        (nil)))
(insn 386 385 387 13 (set (reg/f:DI 0 ax [orig:163 D.6207 ] [163])
        (mem/f:DI (reg/f:DI 0 ax [orig:162 D.6206 ] [162]) [0 *_150+0 S8 A64])) sim2fitman_com_line.cpp:119 89 {*movdi_internal}
     (nil))
(insn 387 386 388 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f9683ed67e0 *.LC4>)) sim2fitman_com_line.cpp:119 89 {*movdi_internal}
     (nil))
(insn 388 387 389 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:163 D.6207 ] [163])) sim2fitman_com_line.cpp:119 89 {*movdi_internal}
     (nil))
(call_insn/i 389 388 390 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:119 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 390 389 391 13 (set (reg:SI 0 ax [orig:164 D.6203 ] [164])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:119 90 {*movsi_internal}
     (nil))
(insn 391 390 392 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:164 D.6203 ] [164])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:118 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 392 391 393 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 742)
            (pc))) sim2fitman_com_line.cpp:118 612 {*jcc_1}
     (nil)
 -> 742)
;;  succ:       14 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 311 576
(code_label 393 392 394 14 9 "" [2 uses])
(note 394 393 395 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 395 394 396 14 (set (reg/f:DI 0 ax [576])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:121 89 {*movdi_internal}
     (nil))
(insn 396 395 397 14 (set (reg:QI 0 ax [orig:311 D.6209 ] [311])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [576])
                (const_int 72 [0x48])) [0 preprocess_52(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:121 93 {*movqi_internal}
     (nil))
(insn 397 396 398 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:311 D.6209 ] [311])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:121 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 398 397 399 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 403)
            (pc))) sim2fitman_com_line.cpp:121 612 {*jcc_1}
     (nil)
 -> 403)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 399 398 400 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 400 399 1716 15 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -7 [0xfffffffffffffff9])) sim2fitman_com_line.cpp:123 90 {*movsi_internal}
     (nil))
(jump_insn 1716 400 1717 15 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:123 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1717 1716 403)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 312 313 314 315 316 577 578 579
(code_label 403 1717 404 16 11 "" [1 uses])
(note 404 403 405 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 405 404 406 16 (set (reg/f:DI 0 ax [577])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:126 89 {*movdi_internal}
     (nil))
(insn 406 405 407 16 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [577])
                (const_int 72 [0x48])) [0 preprocess_52(D)->ecc_present+0 S1 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:126 93 {*movqi_internal}
     (nil))
(insn 407 406 408 16 (set (reg:SI 0 ax [578])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:128 90 {*movsi_internal}
     (nil))
(insn 408 407 409 16 (set (reg:DI 0 ax [orig:312 D.6204 ] [312])
        (sign_extend:DI (reg:SI 0 ax [578]))) sim2fitman_com_line.cpp:128 142 {*extendsidi2_rex64}
     (nil))
(insn 409 408 410 16 (parallel [
            (set (reg:DI 1 dx [orig:313 D.6204 ] [313])
                (ashift:DI (reg:DI 0 ax [orig:312 D.6204 ] [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:128 512 {*ashldi3_1}
     (nil))
(insn 410 409 411 16 (set (reg/f:DI 0 ax [579])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:128 89 {*movdi_internal}
     (nil))
(insn 411 410 412 16 (parallel [
            (set (reg/f:DI 0 ax [orig:314 D.6206 ] [314])
                (plus:DI (reg/f:DI 0 ax [579])
                    (reg:DI 1 dx [orig:313 D.6204 ] [313])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:128 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:313 D.6204 ] [313]))
        (nil)))
(insn 412 411 413 16 (set (reg/f:DI 0 ax [orig:315 D.6207 ] [315])
        (mem/f:DI (reg/f:DI 0 ax [orig:314 D.6206 ] [314]) [0 *_372+0 S8 A64])) sim2fitman_com_line.cpp:128 89 {*movdi_internal}
     (nil))
(insn 413 412 414 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f9683ed66c0 *.LC2>)) sim2fitman_com_line.cpp:128 89 {*movdi_internal}
     (nil))
(insn 414 413 415 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:315 D.6207 ] [315])) sim2fitman_com_line.cpp:128 89 {*movdi_internal}
     (nil))
(call_insn/i 415 414 416 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:128 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 416 415 417 16 (set (reg:SI 0 ax [orig:316 D.6203 ] [316])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:128 90 {*movsi_internal}
     (nil))
(insn 417 416 418 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:316 D.6203 ] [316])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:128 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 418 417 419 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 450)
            (pc))) sim2fitman_com_line.cpp:128 612 {*jcc_1}
     (nil)
 -> 450)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 317 318 319 320 321 322 323 324 580 581 582 583 584 585 586 587 588
(note 419 418 420 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 420 419 421 17 (set (reg/f:DI 0 ax [580])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 421 420 422 17 (set (reg:SI 0 ax [orig:317 D.6203 ] [317])
        (mem:SI (reg/f:DI 0 ax [580]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:129 90 {*movsi_internal}
     (nil))
(insn 422 421 423 17 (set (reg:DI 1 dx [orig:318 D.6204 ] [318])
        (sign_extend:DI (reg:SI 0 ax [orig:317 D.6203 ] [317]))) sim2fitman_com_line.cpp:129 142 {*extendsidi2_rex64}
     (nil))
(insn 423 422 424 17 (set (reg:DI 0 ax [581])
        (reg:DI 1 dx [orig:318 D.6204 ] [318])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 424 423 425 17 (parallel [
            (set (reg:DI 0 ax [581])
                (ashift:DI (reg:DI 0 ax [581])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 512 {*ashldi3_1}
     (nil))
(insn 425 424 426 17 (parallel [
            (set (reg:DI 0 ax [581])
                (plus:DI (reg:DI 0 ax [581])
                    (reg:DI 1 dx [orig:318 D.6204 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:318 D.6204 ] [318])
            (const_int 9 [0x9]))
        (nil)))
(insn 426 425 427 17 (parallel [
            (set (reg:DI 0 ax [581])
                (ashift:DI (reg:DI 0 ax [581])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 512 {*ashldi3_1}
     (nil))
(insn 427 426 428 17 (parallel [
            (set (reg:DI 0 ax [581])
                (plus:DI (reg:DI 0 ax [581])
                    (reg:DI 1 dx [orig:318 D.6204 ] [318])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:318 D.6204 ] [318])
            (const_int 19 [0x13]))
        (nil)))
(insn 428 427 429 17 (parallel [
            (set (reg:DI 0 ax [582])
                (ashift:DI (reg:DI 0 ax [581])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 512 {*ashldi3_1}
     (nil))
(insn 429 428 430 17 (set (reg:DI 0 ax [581])
        (reg:DI 0 ax [582])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 430 429 431 17 (set (reg:DI 1 dx [orig:319 D.6204 ] [319])
        (reg:DI 0 ax [581])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 431 430 432 17 (set (reg/f:DI 0 ax [583])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:129 89 {*movdi_internal}
     (nil))
(insn 432 431 433 17 (parallel [
            (set (reg/f:DI 0 ax [orig:320 D.6205 ] [320])
                (plus:DI (reg/f:DI 0 ax [583])
                    (reg:DI 1 dx [orig:319 D.6204 ] [319])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:129 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:319 D.6204 ] [319]))
        (nil)))
(insn 433 432 434 17 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:320 D.6205 ] [320])
                (const_int 12 [0xc])) [0 _378->pre_ecc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:129 90 {*movsi_internal}
     (nil))
(insn 434 433 435 17 (set (reg/f:DI 0 ax [584])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:130 89 {*movdi_internal}
     (nil))
(insn 435 434 436 17 (set (mem:SI (reg/f:DI 0 ax [584]) [0 *fid_129(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:130 90 {*movsi_internal}
     (nil))
(insn 436 435 437 17 (set (reg/f:DI 0 ax [585])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 437 436 438 17 (set (reg:SI 0 ax [orig:321 D.6203 ] [321])
        (mem:SI (reg/f:DI 0 ax [585]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:131 90 {*movsi_internal}
     (nil))
(insn 438 437 439 17 (set (reg:DI 1 dx [orig:322 D.6204 ] [322])
        (sign_extend:DI (reg:SI 0 ax [orig:321 D.6203 ] [321]))) sim2fitman_com_line.cpp:131 142 {*extendsidi2_rex64}
     (nil))
(insn 439 438 440 17 (set (reg:DI 0 ax [586])
        (reg:DI 1 dx [orig:322 D.6204 ] [322])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 440 439 441 17 (parallel [
            (set (reg:DI 0 ax [586])
                (ashift:DI (reg:DI 0 ax [586])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 512 {*ashldi3_1}
     (nil))
(insn 441 440 442 17 (parallel [
            (set (reg:DI 0 ax [586])
                (plus:DI (reg:DI 0 ax [586])
                    (reg:DI 1 dx [orig:322 D.6204 ] [322])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:322 D.6204 ] [322])
            (const_int 9 [0x9]))
        (nil)))
(insn 442 441 443 17 (parallel [
            (set (reg:DI 0 ax [586])
                (ashift:DI (reg:DI 0 ax [586])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 512 {*ashldi3_1}
     (nil))
(insn 443 442 444 17 (parallel [
            (set (reg:DI 0 ax [586])
                (plus:DI (reg:DI 0 ax [586])
                    (reg:DI 1 dx [orig:322 D.6204 ] [322])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:322 D.6204 ] [322])
            (const_int 19 [0x13]))
        (nil)))
(insn 444 443 445 17 (parallel [
            (set (reg:DI 0 ax [587])
                (ashift:DI (reg:DI 0 ax [586])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 512 {*ashldi3_1}
     (nil))
(insn 445 444 446 17 (set (reg:DI 0 ax [586])
        (reg:DI 0 ax [587])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 446 445 447 17 (set (reg:DI 1 dx [orig:323 D.6204 ] [323])
        (reg:DI 0 ax [586])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 447 446 448 17 (set (reg/f:DI 0 ax [588])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:131 89 {*movdi_internal}
     (nil))
(insn 448 447 449 17 (parallel [
            (set (reg/f:DI 0 ax [orig:324 D.6205 ] [324])
                (plus:DI (reg/f:DI 0 ax [588])
                    (reg:DI 1 dx [orig:323 D.6204 ] [323])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:131 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:323 D.6204 ] [323]))
        (nil)))
(insn 449 448 450 17 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:324 D.6205 ] [324])
                (const_int 12 [0xc])) [0 _384->pre_ecc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:131 90 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 325 326 327 328 329 589 590
(code_label 450 449 451 18 12 "" [1 uses])
(note 451 450 452 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 452 451 453 18 (set (reg:SI 0 ax [589])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:134 90 {*movsi_internal}
     (nil))
(insn 453 452 454 18 (set (reg:DI 0 ax [orig:325 D.6204 ] [325])
        (sign_extend:DI (reg:SI 0 ax [589]))) sim2fitman_com_line.cpp:134 142 {*extendsidi2_rex64}
     (nil))
(insn 454 453 455 18 (parallel [
            (set (reg:DI 1 dx [orig:326 D.6204 ] [326])
                (ashift:DI (reg:DI 0 ax [orig:325 D.6204 ] [325])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:134 512 {*ashldi3_1}
     (nil))
(insn 455 454 456 18 (set (reg/f:DI 0 ax [590])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:134 89 {*movdi_internal}
     (nil))
(insn 456 455 457 18 (parallel [
            (set (reg/f:DI 0 ax [orig:327 D.6206 ] [327])
                (plus:DI (reg/f:DI 0 ax [590])
                    (reg:DI 1 dx [orig:326 D.6204 ] [326])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:134 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:326 D.6204 ] [326]))
        (nil)))
(insn 457 456 458 18 (set (reg/f:DI 0 ax [orig:328 D.6207 ] [328])
        (mem/f:DI (reg/f:DI 0 ax [orig:327 D.6206 ] [327]) [0 *_388+0 S8 A64])) sim2fitman_com_line.cpp:134 89 {*movdi_internal}
     (nil))
(insn 458 457 459 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f9683ed6750 *.LC3>)) sim2fitman_com_line.cpp:134 89 {*movdi_internal}
     (nil))
(insn 459 458 460 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:328 D.6207 ] [328])) sim2fitman_com_line.cpp:134 89 {*movdi_internal}
     (nil))
(call_insn/i 460 459 461 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:134 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 461 460 462 18 (set (reg:SI 0 ax [orig:329 D.6203 ] [329])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:134 90 {*movsi_internal}
     (nil))
(insn 462 461 463 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:329 D.6203 ] [329])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:134 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 463 462 464 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 563)
            (pc))) sim2fitman_com_line.cpp:134 612 {*jcc_1}
     (nil)
 -> 563)
;;  succ:       19 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 330 331 332 333 334 335 336 337 338 591 592 593 594 595 596
(note 464 463 465 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 465 464 466 19 (set (reg/f:DI 0 ax [591])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 466 465 467 19 (set (reg:SI 0 ax [orig:330 D.6203 ] [330])
        (mem:SI (reg/f:DI 0 ax [591]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:135 90 {*movsi_internal}
     (nil))
(insn 467 466 468 19 (set (reg:DI 1 dx [orig:331 D.6204 ] [331])
        (sign_extend:DI (reg:SI 0 ax [orig:330 D.6203 ] [330]))) sim2fitman_com_line.cpp:135 142 {*extendsidi2_rex64}
     (nil))
(insn 468 467 469 19 (set (reg:DI 0 ax [592])
        (reg:DI 1 dx [orig:331 D.6204 ] [331])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 469 468 470 19 (parallel [
            (set (reg:DI 0 ax [592])
                (ashift:DI (reg:DI 0 ax [592])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 512 {*ashldi3_1}
     (nil))
(insn 470 469 471 19 (parallel [
            (set (reg:DI 0 ax [592])
                (plus:DI (reg:DI 0 ax [592])
                    (reg:DI 1 dx [orig:331 D.6204 ] [331])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:331 D.6204 ] [331])
            (const_int 9 [0x9]))
        (nil)))
(insn 471 470 472 19 (parallel [
            (set (reg:DI 0 ax [592])
                (ashift:DI (reg:DI 0 ax [592])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 512 {*ashldi3_1}
     (nil))
(insn 472 471 473 19 (parallel [
            (set (reg:DI 0 ax [592])
                (plus:DI (reg:DI 0 ax [592])
                    (reg:DI 1 dx [orig:331 D.6204 ] [331])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:331 D.6204 ] [331])
            (const_int 19 [0x13]))
        (nil)))
(insn 473 472 474 19 (parallel [
            (set (reg:DI 0 ax [593])
                (ashift:DI (reg:DI 0 ax [592])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 512 {*ashldi3_1}
     (nil))
(insn 474 473 475 19 (set (reg:DI 0 ax [592])
        (reg:DI 0 ax [593])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 475 474 476 19 (set (reg:DI 1 dx [orig:332 D.6204 ] [332])
        (reg:DI 0 ax [592])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 476 475 477 19 (set (reg/f:DI 0 ax [594])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:135 89 {*movdi_internal}
     (nil))
(insn 477 476 478 19 (parallel [
            (set (reg/f:DI 0 ax [orig:333 D.6205 ] [333])
                (plus:DI (reg/f:DI 0 ax [594])
                    (reg:DI 1 dx [orig:332 D.6204 ] [332])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:135 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:332 D.6204 ] [332]))
        (nil)))
(insn 478 477 479 19 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:333 D.6205 ] [333])
                (const_int 36 [0x24])) [0 _394->pre_quality+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:135 90 {*movsi_internal}
     (nil))
(insn 479 478 480 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:136 217 {*addsi_1}
     (nil))
(insn 480 479 481 19 (set (reg:SI 0 ax [595])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:137 90 {*movsi_internal}
     (nil))
(insn 481 480 482 19 (set (reg:DI 0 ax [orig:334 D.6204 ] [334])
        (sign_extend:DI (reg:SI 0 ax [595]))) sim2fitman_com_line.cpp:137 142 {*extendsidi2_rex64}
     (nil))
(insn 482 481 483 19 (parallel [
            (set (reg:DI 1 dx [orig:335 D.6204 ] [335])
                (ashift:DI (reg:DI 0 ax [orig:334 D.6204 ] [334])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:137 512 {*ashldi3_1}
     (nil))
(insn 483 482 484 19 (set (reg/f:DI 0 ax [596])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:137 89 {*movdi_internal}
     (nil))
(insn 484 483 485 19 (parallel [
            (set (reg/f:DI 0 ax [orig:336 D.6206 ] [336])
                (plus:DI (reg/f:DI 0 ax [596])
                    (reg:DI 1 dx [orig:335 D.6204 ] [335])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:137 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:335 D.6204 ] [335]))
        (nil)))
(insn 485 484 486 19 (set (reg/f:DI 0 ax [orig:337 D.6207 ] [337])
        (mem/f:DI (reg/f:DI 0 ax [orig:336 D.6206 ] [336]) [0 *_399+0 S8 A64])) sim2fitman_com_line.cpp:137 89 {*movdi_internal}
     (nil))
(insn 486 485 487 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:337 D.6207 ] [337])) sim2fitman_com_line.cpp:137 89 {*movdi_internal}
     (nil))
(call_insn 487 486 488 19 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x7f9684250438 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:137 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 488 487 489 19 (set (reg:QI 0 ax [orig:338 D.6209 ] [338])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:137 93 {*movqi_internal}
     (nil))
(insn 489 488 490 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:338 D.6209 ] [338])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:137 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 490 489 491 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 558)
            (pc))) sim2fitman_com_line.cpp:137 612 {*jcc_1}
     (nil)
 -> 558)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613
(note 491 490 492 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 492 491 493 20 (set (reg/f:DI 0 ax [597])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 493 492 494 20 (set (reg:SI 0 ax [orig:339 D.6203 ] [339])
        (mem:SI (reg/f:DI 0 ax [597]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:138 90 {*movsi_internal}
     (nil))
(insn 494 493 495 20 (set (reg:DI 1 dx [orig:340 D.6204 ] [340])
        (sign_extend:DI (reg:SI 0 ax [orig:339 D.6203 ] [339]))) sim2fitman_com_line.cpp:138 142 {*extendsidi2_rex64}
     (nil))
(insn 495 494 496 20 (set (reg:DI 0 ax [598])
        (reg:DI 1 dx [orig:340 D.6204 ] [340])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 496 495 497 20 (parallel [
            (set (reg:DI 0 ax [598])
                (ashift:DI (reg:DI 0 ax [598])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 512 {*ashldi3_1}
     (nil))
(insn 497 496 498 20 (parallel [
            (set (reg:DI 0 ax [598])
                (plus:DI (reg:DI 0 ax [598])
                    (reg:DI 1 dx [orig:340 D.6204 ] [340])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:340 D.6204 ] [340])
            (const_int 9 [0x9]))
        (nil)))
(insn 498 497 499 20 (parallel [
            (set (reg:DI 0 ax [598])
                (ashift:DI (reg:DI 0 ax [598])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 512 {*ashldi3_1}
     (nil))
(insn 499 498 500 20 (parallel [
            (set (reg:DI 0 ax [598])
                (plus:DI (reg:DI 0 ax [598])
                    (reg:DI 1 dx [orig:340 D.6204 ] [340])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:340 D.6204 ] [340])
            (const_int 19 [0x13]))
        (nil)))
(insn 500 499 501 20 (parallel [
            (set (reg:DI 0 ax [599])
                (ashift:DI (reg:DI 0 ax [598])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 512 {*ashldi3_1}
     (nil))
(insn 501 500 502 20 (set (reg:DI 0 ax [598])
        (reg:DI 0 ax [599])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 502 501 503 20 (set (reg:DI 1 dx [orig:341 D.6204 ] [341])
        (reg:DI 0 ax [598])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 503 502 504 20 (set (reg/f:DI 0 ax [600])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 504 503 505 20 (parallel [
            (set (reg/f:DI 3 bx [orig:342 D.6205 ] [342])
                (plus:DI (reg:DI 1 dx [orig:341 D.6204 ] [341])
                    (reg/f:DI 0 ax [600])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:341 D.6204 ] [341]))
        (nil)))
(insn 505 504 506 20 (set (reg:SI 0 ax [601])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:138 90 {*movsi_internal}
     (nil))
(insn 506 505 507 20 (set (reg:DI 0 ax [orig:343 D.6204 ] [343])
        (sign_extend:DI (reg:SI 0 ax [601]))) sim2fitman_com_line.cpp:138 142 {*extendsidi2_rex64}
     (nil))
(insn 507 506 508 20 (parallel [
            (set (reg:DI 1 dx [orig:344 D.6204 ] [344])
                (ashift:DI (reg:DI 0 ax [orig:343 D.6204 ] [343])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 512 {*ashldi3_1}
     (nil))
(insn 508 507 509 20 (set (reg/f:DI 0 ax [602])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 509 508 510 20 (parallel [
            (set (reg/f:DI 0 ax [orig:345 D.6206 ] [345])
                (plus:DI (reg/f:DI 0 ax [602])
                    (reg:DI 1 dx [orig:344 D.6204 ] [344])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:138 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:344 D.6204 ] [344]))
        (nil)))
(insn 510 509 511 20 (set (reg/f:DI 0 ax [orig:346 D.6207 ] [346])
        (mem/f:DI (reg/f:DI 0 ax [orig:345 D.6206 ] [345]) [0 *_410+0 S8 A64])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(insn 511 510 512 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:346 D.6207 ] [346])) sim2fitman_com_line.cpp:138 89 {*movdi_internal}
     (nil))
(call_insn/i 512 511 514 20 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f96841d5510 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:138 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 514 512 515 20 (set (reg:SF 21 xmm0 [orig:348 D.6213 ] [348])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:347 D.6212 ] [347]))) sim2fitman_com_line.cpp:138 157 {*truncdfsf_fast_sse}
     (nil))
(insn 515 514 516 20 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:342 D.6205 ] [342])
                (const_int 48 [0x30])) [0 _407->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:348 D.6213 ] [348])) sim2fitman_com_line.cpp:138 129 {*movsf_internal}
     (nil))
(insn 516 515 517 20 (set (reg/f:DI 0 ax [603])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:139 89 {*movdi_internal}
     (nil))
(insn 517 516 518 20 (set (mem:SI (reg/f:DI 0 ax [603]) [0 *fid_129(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:139 90 {*movsi_internal}
     (nil))
(insn 518 517 519 20 (set (reg/f:DI 0 ax [604])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 519 518 520 20 (set (reg:SI 0 ax [orig:349 D.6203 ] [349])
        (mem:SI (reg/f:DI 0 ax [604]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:140 90 {*movsi_internal}
     (nil))
(insn 520 519 521 20 (set (reg:DI 1 dx [orig:350 D.6204 ] [350])
        (sign_extend:DI (reg:SI 0 ax [orig:349 D.6203 ] [349]))) sim2fitman_com_line.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 521 520 522 20 (set (reg:DI 0 ax [605])
        (reg:DI 1 dx [orig:350 D.6204 ] [350])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 522 521 523 20 (parallel [
            (set (reg:DI 0 ax [605])
                (ashift:DI (reg:DI 0 ax [605])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 512 {*ashldi3_1}
     (nil))
(insn 523 522 524 20 (parallel [
            (set (reg:DI 0 ax [605])
                (plus:DI (reg:DI 0 ax [605])
                    (reg:DI 1 dx [orig:350 D.6204 ] [350])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:350 D.6204 ] [350])
            (const_int 9 [0x9]))
        (nil)))
(insn 524 523 525 20 (parallel [
            (set (reg:DI 0 ax [605])
                (ashift:DI (reg:DI 0 ax [605])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 512 {*ashldi3_1}
     (nil))
(insn 525 524 526 20 (parallel [
            (set (reg:DI 0 ax [605])
                (plus:DI (reg:DI 0 ax [605])
                    (reg:DI 1 dx [orig:350 D.6204 ] [350])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:350 D.6204 ] [350])
            (const_int 19 [0x13]))
        (nil)))
(insn 526 525 527 20 (parallel [
            (set (reg:DI 0 ax [606])
                (ashift:DI (reg:DI 0 ax [605])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 512 {*ashldi3_1}
     (nil))
(insn 527 526 528 20 (set (reg:DI 0 ax [605])
        (reg:DI 0 ax [606])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 528 527 529 20 (set (reg:DI 1 dx [orig:351 D.6204 ] [351])
        (reg:DI 0 ax [605])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 529 528 530 20 (set (reg/f:DI 0 ax [607])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 530 529 531 20 (parallel [
            (set (reg/f:DI 3 bx [orig:352 D.6205 ] [352])
                (plus:DI (reg:DI 1 dx [orig:351 D.6204 ] [351])
                    (reg/f:DI 0 ax [607])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:351 D.6204 ] [351]))
        (nil)))
(insn 531 530 532 20 (set (reg:SI 0 ax [608])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:140 90 {*movsi_internal}
     (nil))
(insn 532 531 533 20 (set (reg:DI 0 ax [orig:353 D.6204 ] [353])
        (sign_extend:DI (reg:SI 0 ax [608]))) sim2fitman_com_line.cpp:140 142 {*extendsidi2_rex64}
     (nil))
(insn 533 532 534 20 (parallel [
            (set (reg:DI 1 dx [orig:354 D.6204 ] [354])
                (ashift:DI (reg:DI 0 ax [orig:353 D.6204 ] [353])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 512 {*ashldi3_1}
     (nil))
(insn 534 533 535 20 (set (reg/f:DI 0 ax [609])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 535 534 536 20 (parallel [
            (set (reg/f:DI 0 ax [orig:355 D.6206 ] [355])
                (plus:DI (reg/f:DI 0 ax [609])
                    (reg:DI 1 dx [orig:354 D.6204 ] [354])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:140 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:354 D.6204 ] [354]))
        (nil)))
(insn 536 535 537 20 (set (reg/f:DI 0 ax [orig:356 D.6207 ] [356])
        (mem/f:DI (reg/f:DI 0 ax [orig:355 D.6206 ] [355]) [0 *_422+0 S8 A64])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(insn 537 536 538 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:356 D.6207 ] [356])) sim2fitman_com_line.cpp:140 89 {*movdi_internal}
     (nil))
(call_insn/i 538 537 540 20 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f96841d5510 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:140 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 540 538 541 20 (set (reg:SF 21 xmm0 [orig:358 D.6213 ] [358])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:357 D.6212 ] [357]))) sim2fitman_com_line.cpp:140 157 {*truncdfsf_fast_sse}
     (nil))
(insn 541 540 542 20 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:352 D.6205 ] [352])
                (const_int 48 [0x30])) [0 _419->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:358 D.6213 ] [358])) sim2fitman_com_line.cpp:140 129 {*movsf_internal}
     (nil))
(insn 542 541 543 20 (set (reg/f:DI 0 ax [610])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 543 542 544 20 (set (reg:SI 0 ax [orig:359 D.6203 ] [359])
        (mem:SI (reg/f:DI 0 ax [610]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:141 90 {*movsi_internal}
     (nil))
(insn 544 543 545 20 (set (reg:DI 1 dx [orig:360 D.6204 ] [360])
        (sign_extend:DI (reg:SI 0 ax [orig:359 D.6203 ] [359]))) sim2fitman_com_line.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 545 544 546 20 (set (reg:DI 0 ax [611])
        (reg:DI 1 dx [orig:360 D.6204 ] [360])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 546 545 547 20 (parallel [
            (set (reg:DI 0 ax [611])
                (ashift:DI (reg:DI 0 ax [611])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 512 {*ashldi3_1}
     (nil))
(insn 547 546 548 20 (parallel [
            (set (reg:DI 0 ax [611])
                (plus:DI (reg:DI 0 ax [611])
                    (reg:DI 1 dx [orig:360 D.6204 ] [360])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:360 D.6204 ] [360])
            (const_int 9 [0x9]))
        (nil)))
(insn 548 547 549 20 (parallel [
            (set (reg:DI 0 ax [611])
                (ashift:DI (reg:DI 0 ax [611])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 512 {*ashldi3_1}
     (nil))
(insn 549 548 550 20 (parallel [
            (set (reg:DI 0 ax [611])
                (plus:DI (reg:DI 0 ax [611])
                    (reg:DI 1 dx [orig:360 D.6204 ] [360])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:360 D.6204 ] [360])
            (const_int 19 [0x13]))
        (nil)))
(insn 550 549 551 20 (parallel [
            (set (reg:DI 0 ax [612])
                (ashift:DI (reg:DI 0 ax [611])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 512 {*ashldi3_1}
     (nil))
(insn 551 550 552 20 (set (reg:DI 0 ax [611])
        (reg:DI 0 ax [612])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 552 551 553 20 (set (reg:DI 1 dx [orig:361 D.6204 ] [361])
        (reg:DI 0 ax [611])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 553 552 554 20 (set (reg/f:DI 0 ax [613])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:141 89 {*movdi_internal}
     (nil))
(insn 554 553 555 20 (parallel [
            (set (reg/f:DI 0 ax [orig:362 D.6205 ] [362])
                (plus:DI (reg/f:DI 0 ax [613])
                    (reg:DI 1 dx [orig:361 D.6204 ] [361])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:361 D.6204 ] [361]))
        (nil)))
(insn 555 554 1718 20 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:362 D.6205 ] [362])
                (const_int 36 [0x24])) [0 _430->pre_quality+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:141 90 {*movsi_internal}
     (nil))
(jump_insn 1718 555 1719 20 (set (pc)
        (label_ref 563)) 654 {jump}
     (nil)
 -> 563)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1719 1718 558)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 558 1719 559 21 14 "" [1 uses])
(note 559 558 560 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 560 559 1720 21 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -8 [0xfffffffffffffff8])) sim2fitman_com_line.cpp:143 90 {*movsi_internal}
     (nil))
(jump_insn 1720 560 1721 21 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:143 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1721 1720 563)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;;              20 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 363 364 365 366 367 614 615
(code_label 563 1721 564 22 13 "" [2 uses])
(note 564 563 565 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 565 564 566 22 (set (reg:SI 0 ax [614])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:148 90 {*movsi_internal}
     (nil))
(insn 566 565 567 22 (set (reg:DI 0 ax [orig:363 D.6204 ] [363])
        (sign_extend:DI (reg:SI 0 ax [614]))) sim2fitman_com_line.cpp:148 142 {*extendsidi2_rex64}
     (nil))
(insn 567 566 568 22 (parallel [
            (set (reg:DI 1 dx [orig:364 D.6204 ] [364])
                (ashift:DI (reg:DI 0 ax [orig:363 D.6204 ] [363])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:148 512 {*ashldi3_1}
     (nil))
(insn 568 567 569 22 (set (reg/f:DI 0 ax [615])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:148 89 {*movdi_internal}
     (nil))
(insn 569 568 570 22 (parallel [
            (set (reg/f:DI 0 ax [orig:365 D.6206 ] [365])
                (plus:DI (reg/f:DI 0 ax [615])
                    (reg:DI 1 dx [orig:364 D.6204 ] [364])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:148 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:364 D.6204 ] [364]))
        (nil)))
(insn 570 569 571 22 (set (reg/f:DI 0 ax [orig:366 D.6207 ] [366])
        (mem/f:DI (reg/f:DI 0 ax [orig:365 D.6206 ] [365]) [0 *_435+0 S8 A64])) sim2fitman_com_line.cpp:148 89 {*movdi_internal}
     (nil))
(insn 571 570 572 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f9683ed67e0 *.LC4>)) sim2fitman_com_line.cpp:148 89 {*movdi_internal}
     (nil))
(insn 572 571 573 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:366 D.6207 ] [366])) sim2fitman_com_line.cpp:148 89 {*movdi_internal}
     (nil))
(call_insn/i 573 572 574 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:148 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 574 573 575 22 (set (reg:SI 0 ax [orig:367 D.6203 ] [367])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:148 90 {*movsi_internal}
     (nil))
(insn 575 574 576 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:367 D.6203 ] [367])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:148 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 576 575 577 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1320)
            (pc))) sim2fitman_com_line.cpp:148 612 {*jcc_1}
     (nil)
 -> 1320)
;;  succ:       23 (FALLTHRU)
;;              90
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 368 369 370 371 372 373 374 375 376 616 617 618 619 620 621
(note 577 576 578 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 578 577 579 23 (set (reg/f:DI 0 ax [616])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 579 578 580 23 (set (reg:SI 0 ax [orig:368 D.6203 ] [368])
        (mem:SI (reg/f:DI 0 ax [616]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:149 90 {*movsi_internal}
     (nil))
(insn 580 579 581 23 (set (reg:DI 1 dx [orig:369 D.6204 ] [369])
        (sign_extend:DI (reg:SI 0 ax [orig:368 D.6203 ] [368]))) sim2fitman_com_line.cpp:149 142 {*extendsidi2_rex64}
     (nil))
(insn 581 580 582 23 (set (reg:DI 0 ax [617])
        (reg:DI 1 dx [orig:369 D.6204 ] [369])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 582 581 583 23 (parallel [
            (set (reg:DI 0 ax [617])
                (ashift:DI (reg:DI 0 ax [617])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 512 {*ashldi3_1}
     (nil))
(insn 583 582 584 23 (parallel [
            (set (reg:DI 0 ax [617])
                (plus:DI (reg:DI 0 ax [617])
                    (reg:DI 1 dx [orig:369 D.6204 ] [369])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:369 D.6204 ] [369])
            (const_int 9 [0x9]))
        (nil)))
(insn 584 583 585 23 (parallel [
            (set (reg:DI 0 ax [617])
                (ashift:DI (reg:DI 0 ax [617])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 512 {*ashldi3_1}
     (nil))
(insn 585 584 586 23 (parallel [
            (set (reg:DI 0 ax [617])
                (plus:DI (reg:DI 0 ax [617])
                    (reg:DI 1 dx [orig:369 D.6204 ] [369])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:369 D.6204 ] [369])
            (const_int 19 [0x13]))
        (nil)))
(insn 586 585 587 23 (parallel [
            (set (reg:DI 0 ax [618])
                (ashift:DI (reg:DI 0 ax [617])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 512 {*ashldi3_1}
     (nil))
(insn 587 586 588 23 (set (reg:DI 0 ax [617])
        (reg:DI 0 ax [618])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 588 587 589 23 (set (reg:DI 1 dx [orig:370 D.6204 ] [370])
        (reg:DI 0 ax [617])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 589 588 590 23 (set (reg/f:DI 0 ax [619])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:149 89 {*movdi_internal}
     (nil))
(insn 590 589 591 23 (parallel [
            (set (reg/f:DI 0 ax [orig:371 D.6205 ] [371])
                (plus:DI (reg/f:DI 0 ax [619])
                    (reg:DI 1 dx [orig:370 D.6204 ] [370])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:149 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:370 D.6204 ] [370]))
        (nil)))
(insn 591 590 592 23 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:371 D.6205 ] [371])
                (const_int 40 [0x28])) [0 _441->pre_quecc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:149 90 {*movsi_internal}
     (nil))
(insn 592 591 593 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:150 217 {*addsi_1}
     (nil))
(insn 593 592 594 23 (set (reg:SI 0 ax [620])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:151 90 {*movsi_internal}
     (nil))
(insn 594 593 595 23 (set (reg:DI 0 ax [orig:372 D.6204 ] [372])
        (sign_extend:DI (reg:SI 0 ax [620]))) sim2fitman_com_line.cpp:151 142 {*extendsidi2_rex64}
     (nil))
(insn 595 594 596 23 (parallel [
            (set (reg:DI 1 dx [orig:373 D.6204 ] [373])
                (ashift:DI (reg:DI 0 ax [orig:372 D.6204 ] [372])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:151 512 {*ashldi3_1}
     (nil))
(insn 596 595 597 23 (set (reg/f:DI 0 ax [621])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 597 596 598 23 (parallel [
            (set (reg/f:DI 0 ax [orig:374 D.6206 ] [374])
                (plus:DI (reg/f:DI 0 ax [621])
                    (reg:DI 1 dx [orig:373 D.6204 ] [373])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:151 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:373 D.6204 ] [373]))
        (nil)))
(insn 598 597 599 23 (set (reg/f:DI 0 ax [orig:375 D.6207 ] [375])
        (mem/f:DI (reg/f:DI 0 ax [orig:374 D.6206 ] [374]) [0 *_446+0 S8 A64])) sim2fitman_com_line.cpp:151 89 {*movdi_internal}
     (nil))
(insn 599 598 600 23 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:375 D.6207 ] [375])) sim2fitman_com_line.cpp:151 89 {*movdi_internal}
     (nil))
(call_insn 600 599 601 23 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x7f9684250438 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:151 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 601 600 602 23 (set (reg:QI 0 ax [orig:376 D.6209 ] [376])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:151 93 {*movqi_internal}
     (nil))
(insn 602 601 603 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:376 D.6209 ] [376])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:151 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 603 602 604 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 631)
            (pc))) sim2fitman_com_line.cpp:151 612 {*jcc_1}
     (nil)
 -> 631)
;;  succ:       24 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 622 623 624 625 626 627 628 629
(note 604 603 605 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 605 604 606 24 (set (reg/f:DI 0 ax [622])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 606 605 607 24 (set (reg:SI 0 ax [orig:377 D.6203 ] [377])
        (mem:SI (reg/f:DI 0 ax [622]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:152 90 {*movsi_internal}
     (nil))
(insn 607 606 608 24 (set (reg:DI 1 dx [orig:378 D.6204 ] [378])
        (sign_extend:DI (reg:SI 0 ax [orig:377 D.6203 ] [377]))) sim2fitman_com_line.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 608 607 609 24 (set (reg:DI 0 ax [623])
        (reg:DI 1 dx [orig:378 D.6204 ] [378])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 609 608 610 24 (parallel [
            (set (reg:DI 0 ax [623])
                (ashift:DI (reg:DI 0 ax [623])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 512 {*ashldi3_1}
     (nil))
(insn 610 609 611 24 (parallel [
            (set (reg:DI 0 ax [623])
                (plus:DI (reg:DI 0 ax [623])
                    (reg:DI 1 dx [orig:378 D.6204 ] [378])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:378 D.6204 ] [378])
            (const_int 9 [0x9]))
        (nil)))
(insn 611 610 612 24 (parallel [
            (set (reg:DI 0 ax [623])
                (ashift:DI (reg:DI 0 ax [623])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 512 {*ashldi3_1}
     (nil))
(insn 612 611 613 24 (parallel [
            (set (reg:DI 0 ax [623])
                (plus:DI (reg:DI 0 ax [623])
                    (reg:DI 1 dx [orig:378 D.6204 ] [378])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:378 D.6204 ] [378])
            (const_int 19 [0x13]))
        (nil)))
(insn 613 612 614 24 (parallel [
            (set (reg:DI 0 ax [624])
                (ashift:DI (reg:DI 0 ax [623])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 512 {*ashldi3_1}
     (nil))
(insn 614 613 615 24 (set (reg:DI 0 ax [623])
        (reg:DI 0 ax [624])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 615 614 616 24 (set (reg:DI 1 dx [orig:379 D.6204 ] [379])
        (reg:DI 0 ax [623])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 616 615 617 24 (set (reg/f:DI 0 ax [625])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 617 616 618 24 (parallel [
            (set (reg/f:DI 3 bx [orig:380 D.6205 ] [380])
                (plus:DI (reg:DI 1 dx [orig:379 D.6204 ] [379])
                    (reg/f:DI 0 ax [625])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:379 D.6204 ] [379]))
        (nil)))
(insn 618 617 619 24 (set (reg:SI 0 ax [626])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:152 90 {*movsi_internal}
     (nil))
(insn 619 618 620 24 (set (reg:DI 0 ax [orig:381 D.6204 ] [381])
        (sign_extend:DI (reg:SI 0 ax [626]))) sim2fitman_com_line.cpp:152 142 {*extendsidi2_rex64}
     (nil))
(insn 620 619 621 24 (parallel [
            (set (reg:DI 1 dx [orig:382 D.6204 ] [382])
                (ashift:DI (reg:DI 0 ax [orig:381 D.6204 ] [381])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 512 {*ashldi3_1}
     (nil))
(insn 621 620 622 24 (set (reg/f:DI 0 ax [627])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 622 621 623 24 (parallel [
            (set (reg/f:DI 0 ax [orig:383 D.6206 ] [383])
                (plus:DI (reg/f:DI 0 ax [627])
                    (reg:DI 1 dx [orig:382 D.6204 ] [382])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:382 D.6204 ] [382]))
        (nil)))
(insn 623 622 624 24 (set (reg/f:DI 0 ax [orig:384 D.6207 ] [384])
        (mem/f:DI (reg/f:DI 0 ax [orig:383 D.6206 ] [383]) [0 *_457+0 S8 A64])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(insn 624 623 625 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:384 D.6207 ] [384])) sim2fitman_com_line.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn/i 625 624 626 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("atoi") [flags 0x41]  <function_decl 0x7f96841d55e8 atoi>) [0 atoi S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:152 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 626 625 627 24 (set (reg:SI 0 ax [orig:385 D.6203 ] [385])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:152 90 {*movsi_internal}
     (nil))
(insn 627 626 628 24 (parallel [
            (set (reg:SI 0 ax [orig:386 D.6203 ] [386])
                (ashift:SI (reg:SI 0 ax [orig:385 D.6203 ] [385])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:152 511 {*ashlsi3_1}
     (nil))
(insn 628 627 638 24 (set (mem/j:SI (plus:DI (reg/f:DI 3 bx [orig:380 D.6205 ] [380])
                (const_int 44 [0x2c])) [0 _454->pre_quecc_points+0 S4 A32])
        (reg:SI 0 ax [orig:386 D.6203 ] [386])) sim2fitman_com_line.cpp:152 90 {*movsi_internal}
     (nil))
(insn 638 628 639 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:156 217 {*addsi_1}
     (nil))
(insn 639 638 640 24 (set (reg:SI 0 ax [628])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:157 90 {*movsi_internal}
     (nil))
(insn 640 639 641 24 (set (reg:DI 0 ax [orig:387 D.6204 ] [387])
        (sign_extend:DI (reg:SI 0 ax [628]))) sim2fitman_com_line.cpp:157 142 {*extendsidi2_rex64}
     (nil))
(insn 641 640 642 24 (parallel [
            (set (reg:DI 1 dx [orig:388 D.6204 ] [388])
                (ashift:DI (reg:DI 0 ax [orig:387 D.6204 ] [387])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:157 512 {*ashldi3_1}
     (nil))
(insn 642 641 643 24 (set (reg/f:DI 0 ax [629])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:157 89 {*movdi_internal}
     (nil))
(insn 643 642 644 24 (parallel [
            (set (reg/f:DI 0 ax [orig:389 D.6206 ] [389])
                (plus:DI (reg/f:DI 0 ax [629])
                    (reg:DI 1 dx [orig:388 D.6204 ] [388])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:157 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:388 D.6204 ] [388]))
        (nil)))
(insn 644 643 645 24 (set (reg/f:DI 0 ax [orig:390 D.6207 ] [390])
        (mem/f:DI (reg/f:DI 0 ax [orig:389 D.6206 ] [389]) [0 *_465+0 S8 A64])) sim2fitman_com_line.cpp:157 89 {*movdi_internal}
     (nil))
(insn 645 644 646 24 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:390 D.6207 ] [390])) sim2fitman_com_line.cpp:157 89 {*movdi_internal}
     (nil))
(call_insn 646 645 647 24 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x7f9684250438 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:157 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 647 646 648 24 (set (reg:QI 0 ax [orig:391 D.6209 ] [391])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:157 93 {*movqi_internal}
     (nil))
(insn 648 647 649 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:391 D.6209 ] [391])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:157 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 649 648 1722 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 733)
            (pc))) sim2fitman_com_line.cpp:157 612 {*jcc_1}
     (nil)
 -> 733)
;;  succ:       25 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1722 649 1724 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1724 1722 1725 25 (set (pc)
        (label_ref 1723)) 654 {jump}
     (nil)
 -> 1723)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1725 1724 631)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 631 1725 632 26 16 "" [1 uses])
(note 632 631 633 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 633 632 1726 26 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -8 [0xfffffffffffffff8])) sim2fitman_com_line.cpp:154 90 {*movsi_internal}
     (nil))
(jump_insn 1726 633 1727 26 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:154 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1727 1726 1723)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651
(code_label 1723 1727 650 27 77 "" [1 uses])
(note 650 1723 651 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 651 650 652 27 (set (reg/f:DI 0 ax [630])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 652 651 653 27 (set (reg:SI 0 ax [orig:392 D.6203 ] [392])
        (mem:SI (reg/f:DI 0 ax [630]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:158 90 {*movsi_internal}
     (nil))
(insn 653 652 654 27 (set (reg:DI 1 dx [orig:393 D.6204 ] [393])
        (sign_extend:DI (reg:SI 0 ax [orig:392 D.6203 ] [392]))) sim2fitman_com_line.cpp:158 142 {*extendsidi2_rex64}
     (nil))
(insn 654 653 655 27 (set (reg:DI 0 ax [631])
        (reg:DI 1 dx [orig:393 D.6204 ] [393])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 655 654 656 27 (parallel [
            (set (reg:DI 0 ax [631])
                (ashift:DI (reg:DI 0 ax [631])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 512 {*ashldi3_1}
     (nil))
(insn 656 655 657 27 (parallel [
            (set (reg:DI 0 ax [631])
                (plus:DI (reg:DI 0 ax [631])
                    (reg:DI 1 dx [orig:393 D.6204 ] [393])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:393 D.6204 ] [393])
            (const_int 9 [0x9]))
        (nil)))
(insn 657 656 658 27 (parallel [
            (set (reg:DI 0 ax [631])
                (ashift:DI (reg:DI 0 ax [631])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 512 {*ashldi3_1}
     (nil))
(insn 658 657 659 27 (parallel [
            (set (reg:DI 0 ax [631])
                (plus:DI (reg:DI 0 ax [631])
                    (reg:DI 1 dx [orig:393 D.6204 ] [393])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:393 D.6204 ] [393])
            (const_int 19 [0x13]))
        (nil)))
(insn 659 658 660 27 (parallel [
            (set (reg:DI 0 ax [632])
                (ashift:DI (reg:DI 0 ax [631])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 512 {*ashldi3_1}
     (nil))
(insn 660 659 661 27 (set (reg:DI 0 ax [631])
        (reg:DI 0 ax [632])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 661 660 662 27 (set (reg:DI 1 dx [orig:394 D.6204 ] [394])
        (reg:DI 0 ax [631])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 662 661 663 27 (set (reg/f:DI 0 ax [633])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 663 662 664 27 (parallel [
            (set (reg/f:DI 3 bx [orig:395 D.6205 ] [395])
                (plus:DI (reg:DI 1 dx [orig:394 D.6204 ] [394])
                    (reg/f:DI 0 ax [633])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:394 D.6204 ] [394]))
        (nil)))
(insn 664 663 665 27 (set (reg:SI 0 ax [634])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:158 90 {*movsi_internal}
     (nil))
(insn 665 664 666 27 (set (reg:DI 0 ax [orig:396 D.6204 ] [396])
        (sign_extend:DI (reg:SI 0 ax [634]))) sim2fitman_com_line.cpp:158 142 {*extendsidi2_rex64}
     (nil))
(insn 666 665 667 27 (parallel [
            (set (reg:DI 1 dx [orig:397 D.6204 ] [397])
                (ashift:DI (reg:DI 0 ax [orig:396 D.6204 ] [396])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 512 {*ashldi3_1}
     (nil))
(insn 667 666 668 27 (set (reg/f:DI 0 ax [635])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 668 667 669 27 (parallel [
            (set (reg/f:DI 0 ax [orig:398 D.6206 ] [398])
                (plus:DI (reg/f:DI 0 ax [635])
                    (reg:DI 1 dx [orig:397 D.6204 ] [397])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:158 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:397 D.6204 ] [397]))
        (nil)))
(insn 669 668 670 27 (set (reg/f:DI 0 ax [orig:399 D.6207 ] [399])
        (mem/f:DI (reg/f:DI 0 ax [orig:398 D.6206 ] [398]) [0 *_476+0 S8 A64])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(insn 670 669 671 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:399 D.6207 ] [399])) sim2fitman_com_line.cpp:158 89 {*movdi_internal}
     (nil))
(call_insn/i 671 670 673 27 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f96841d5510 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:158 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 673 671 674 27 (set (reg:SF 21 xmm0 [orig:401 D.6213 ] [401])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:400 D.6212 ] [400]))) sim2fitman_com_line.cpp:158 157 {*truncdfsf_fast_sse}
     (nil))
(insn 674 673 675 27 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:395 D.6205 ] [395])
                (const_int 48 [0x30])) [0 _473->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:401 D.6213 ] [401])) sim2fitman_com_line.cpp:158 129 {*movsf_internal}
     (nil))
(insn 675 674 676 27 (set (reg/f:DI 0 ax [636])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:159 89 {*movdi_internal}
     (nil))
(insn 676 675 677 27 (set (mem:SI (reg/f:DI 0 ax [636]) [0 *fid_129(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:159 90 {*movsi_internal}
     (nil))
(insn 677 676 678 27 (set (reg/f:DI 0 ax [637])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 678 677 679 27 (set (reg:SI 0 ax [orig:402 D.6203 ] [402])
        (mem:SI (reg/f:DI 0 ax [637]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:160 90 {*movsi_internal}
     (nil))
(insn 679 678 680 27 (set (reg:DI 1 dx [orig:403 D.6204 ] [403])
        (sign_extend:DI (reg:SI 0 ax [orig:402 D.6203 ] [402]))) sim2fitman_com_line.cpp:160 142 {*extendsidi2_rex64}
     (nil))
(insn 680 679 681 27 (set (reg:DI 0 ax [638])
        (reg:DI 1 dx [orig:403 D.6204 ] [403])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 681 680 682 27 (parallel [
            (set (reg:DI 0 ax [638])
                (ashift:DI (reg:DI 0 ax [638])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 512 {*ashldi3_1}
     (nil))
(insn 682 681 683 27 (parallel [
            (set (reg:DI 0 ax [638])
                (plus:DI (reg:DI 0 ax [638])
                    (reg:DI 1 dx [orig:403 D.6204 ] [403])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:403 D.6204 ] [403])
            (const_int 9 [0x9]))
        (nil)))
(insn 683 682 684 27 (parallel [
            (set (reg:DI 0 ax [638])
                (ashift:DI (reg:DI 0 ax [638])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 512 {*ashldi3_1}
     (nil))
(insn 684 683 685 27 (parallel [
            (set (reg:DI 0 ax [638])
                (plus:DI (reg:DI 0 ax [638])
                    (reg:DI 1 dx [orig:403 D.6204 ] [403])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:403 D.6204 ] [403])
            (const_int 19 [0x13]))
        (nil)))
(insn 685 684 686 27 (parallel [
            (set (reg:DI 0 ax [639])
                (ashift:DI (reg:DI 0 ax [638])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 512 {*ashldi3_1}
     (nil))
(insn 686 685 687 27 (set (reg:DI 0 ax [638])
        (reg:DI 0 ax [639])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 687 686 688 27 (set (reg:DI 1 dx [orig:404 D.6204 ] [404])
        (reg:DI 0 ax [638])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 688 687 689 27 (set (reg/f:DI 0 ax [640])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 689 688 690 27 (parallel [
            (set (reg/f:DI 1 dx [orig:405 D.6205 ] [405])
                (plus:DI (reg:DI 1 dx [orig:404 D.6204 ] [404])
                    (reg/f:DI 0 ax [640])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:160 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:404 D.6204 ] [404]))
        (nil)))
(insn 690 689 691 27 (set (reg/f:DI 0 ax [641])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:160 89 {*movdi_internal}
     (nil))
(insn 691 690 692 27 (set (reg:SI 0 ax [orig:406 D.6203 ] [406])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [641])
                (const_int 44 [0x2c])) [0 preprocess_52(D)->pre_quecc_points+0 S4 A32])) sim2fitman_com_line.cpp:160 90 {*movsi_internal}
     (nil))
(insn 692 691 693 27 (set (mem/j:SI (plus:DI (reg/f:DI 1 dx [orig:405 D.6205 ] [405])
                (const_int 44 [0x2c])) [0 _485->pre_quecc_points+0 S4 A32])
        (reg:SI 0 ax [orig:406 D.6203 ] [406])) sim2fitman_com_line.cpp:160 90 {*movsi_internal}
     (nil))
(insn 693 692 694 27 (set (reg/f:DI 0 ax [642])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 694 693 695 27 (set (reg:SI 0 ax [orig:407 D.6203 ] [407])
        (mem:SI (reg/f:DI 0 ax [642]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:161 90 {*movsi_internal}
     (nil))
(insn 695 694 696 27 (set (reg:DI 1 dx [orig:408 D.6204 ] [408])
        (sign_extend:DI (reg:SI 0 ax [orig:407 D.6203 ] [407]))) sim2fitman_com_line.cpp:161 142 {*extendsidi2_rex64}
     (nil))
(insn 696 695 697 27 (set (reg:DI 0 ax [643])
        (reg:DI 1 dx [orig:408 D.6204 ] [408])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 697 696 698 27 (parallel [
            (set (reg:DI 0 ax [643])
                (ashift:DI (reg:DI 0 ax [643])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 512 {*ashldi3_1}
     (nil))
(insn 698 697 699 27 (parallel [
            (set (reg:DI 0 ax [643])
                (plus:DI (reg:DI 0 ax [643])
                    (reg:DI 1 dx [orig:408 D.6204 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:408 D.6204 ] [408])
            (const_int 9 [0x9]))
        (nil)))
(insn 699 698 700 27 (parallel [
            (set (reg:DI 0 ax [643])
                (ashift:DI (reg:DI 0 ax [643])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 512 {*ashldi3_1}
     (nil))
(insn 700 699 701 27 (parallel [
            (set (reg:DI 0 ax [643])
                (plus:DI (reg:DI 0 ax [643])
                    (reg:DI 1 dx [orig:408 D.6204 ] [408])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:408 D.6204 ] [408])
            (const_int 19 [0x13]))
        (nil)))
(insn 701 700 702 27 (parallel [
            (set (reg:DI 0 ax [644])
                (ashift:DI (reg:DI 0 ax [643])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 512 {*ashldi3_1}
     (nil))
(insn 702 701 703 27 (set (reg:DI 0 ax [643])
        (reg:DI 0 ax [644])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 703 702 704 27 (set (reg:DI 1 dx [orig:409 D.6204 ] [409])
        (reg:DI 0 ax [643])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 704 703 705 27 (set (reg/f:DI 0 ax [645])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 705 704 706 27 (parallel [
            (set (reg/f:DI 3 bx [orig:410 D.6205 ] [410])
                (plus:DI (reg:DI 1 dx [orig:409 D.6204 ] [409])
                    (reg/f:DI 0 ax [645])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:409 D.6204 ] [409]))
        (nil)))
(insn 706 705 707 27 (set (reg:SI 0 ax [646])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:161 90 {*movsi_internal}
     (nil))
(insn 707 706 708 27 (set (reg:DI 0 ax [orig:411 D.6204 ] [411])
        (sign_extend:DI (reg:SI 0 ax [646]))) sim2fitman_com_line.cpp:161 142 {*extendsidi2_rex64}
     (nil))
(insn 708 707 709 27 (parallel [
            (set (reg:DI 1 dx [orig:412 D.6204 ] [412])
                (ashift:DI (reg:DI 0 ax [orig:411 D.6204 ] [411])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 512 {*ashldi3_1}
     (nil))
(insn 709 708 710 27 (set (reg/f:DI 0 ax [647])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 710 709 711 27 (parallel [
            (set (reg/f:DI 0 ax [orig:413 D.6206 ] [413])
                (plus:DI (reg/f:DI 0 ax [647])
                    (reg:DI 1 dx [orig:412 D.6204 ] [412])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:161 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:412 D.6204 ] [412]))
        (nil)))
(insn 711 710 712 27 (set (reg/f:DI 0 ax [orig:414 D.6207 ] [414])
        (mem/f:DI (reg/f:DI 0 ax [orig:413 D.6206 ] [413]) [0 *_494+0 S8 A64])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(insn 712 711 713 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:414 D.6207 ] [414])) sim2fitman_com_line.cpp:161 89 {*movdi_internal}
     (nil))
(call_insn/i 713 712 715 27 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f96841d5510 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:161 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 715 713 716 27 (set (reg:SF 21 xmm0 [orig:416 D.6213 ] [416])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:415 D.6212 ] [415]))) sim2fitman_com_line.cpp:161 157 {*truncdfsf_fast_sse}
     (nil))
(insn 716 715 717 27 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:410 D.6205 ] [410])
                (const_int 48 [0x30])) [0 _491->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [orig:416 D.6213 ] [416])) sim2fitman_com_line.cpp:161 129 {*movsf_internal}
     (nil))
(insn 717 716 718 27 (set (reg/f:DI 0 ax [648])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 718 717 719 27 (set (reg:SI 0 ax [orig:417 D.6203 ] [417])
        (mem:SI (reg/f:DI 0 ax [648]) [0 *fid_129(D)+0 S4 A32])) sim2fitman_com_line.cpp:162 90 {*movsi_internal}
     (nil))
(insn 719 718 720 27 (set (reg:DI 1 dx [orig:418 D.6204 ] [418])
        (sign_extend:DI (reg:SI 0 ax [orig:417 D.6203 ] [417]))) sim2fitman_com_line.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 720 719 721 27 (set (reg:DI 0 ax [649])
        (reg:DI 1 dx [orig:418 D.6204 ] [418])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 721 720 722 27 (parallel [
            (set (reg:DI 0 ax [649])
                (ashift:DI (reg:DI 0 ax [649])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 512 {*ashldi3_1}
     (nil))
(insn 722 721 723 27 (parallel [
            (set (reg:DI 0 ax [649])
                (plus:DI (reg:DI 0 ax [649])
                    (reg:DI 1 dx [orig:418 D.6204 ] [418])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:418 D.6204 ] [418])
            (const_int 9 [0x9]))
        (nil)))
(insn 723 722 724 27 (parallel [
            (set (reg:DI 0 ax [649])
                (ashift:DI (reg:DI 0 ax [649])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 512 {*ashldi3_1}
     (nil))
(insn 724 723 725 27 (parallel [
            (set (reg:DI 0 ax [649])
                (plus:DI (reg:DI 0 ax [649])
                    (reg:DI 1 dx [orig:418 D.6204 ] [418])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:418 D.6204 ] [418])
            (const_int 19 [0x13]))
        (nil)))
(insn 725 724 726 27 (parallel [
            (set (reg:DI 0 ax [650])
                (ashift:DI (reg:DI 0 ax [649])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 512 {*ashldi3_1}
     (nil))
(insn 726 725 727 27 (set (reg:DI 0 ax [649])
        (reg:DI 0 ax [650])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 727 726 728 27 (set (reg:DI 1 dx [orig:419 D.6204 ] [419])
        (reg:DI 0 ax [649])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 728 727 729 27 (set (reg/f:DI 0 ax [651])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:162 89 {*movdi_internal}
     (nil))
(insn 729 728 730 27 (parallel [
            (set (reg/f:DI 0 ax [orig:420 D.6205 ] [420])
                (plus:DI (reg/f:DI 0 ax [651])
                    (reg:DI 1 dx [orig:419 D.6204 ] [419])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:162 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:419 D.6204 ] [419]))
        (nil)))
(insn 730 729 1728 27 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:420 D.6205 ] [420])
                (const_int 40 [0x28])) [0 _502->pre_quecc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:162 90 {*movsi_internal}
     (nil))
(jump_insn 1728 730 1729 27 (set (pc)
        (label_ref 1320)) sim2fitman_com_line.cpp:148 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1729 1728 733)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 733 1729 734 28 18 "" [1 uses])
(note 734 733 735 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 735 734 1730 28 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -8 [0xfffffffffffffff8])) sim2fitman_com_line.cpp:164 90 {*movsi_internal}
     (nil))
(jump_insn 1730 735 1731 28 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:164 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1731 1730 742)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 165 166 167 168 169 652 653
(code_label 742 1731 743 29 10 "" [1 uses])
(note 743 742 744 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 744 743 745 29 (set (reg:SI 0 ax [652])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:172 90 {*movsi_internal}
     (nil))
(insn 745 744 746 29 (set (reg:DI 0 ax [orig:165 D.6204 ] [165])
        (sign_extend:DI (reg:SI 0 ax [652]))) sim2fitman_com_line.cpp:172 142 {*extendsidi2_rex64}
     (nil))
(insn 746 745 747 29 (parallel [
            (set (reg:DI 1 dx [orig:166 D.6204 ] [166])
                (ashift:DI (reg:DI 0 ax [orig:165 D.6204 ] [165])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:172 512 {*ashldi3_1}
     (nil))
(insn 747 746 748 29 (set (reg/f:DI 0 ax [653])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:172 89 {*movdi_internal}
     (nil))
(insn 748 747 749 29 (parallel [
            (set (reg/f:DI 0 ax [orig:167 D.6206 ] [167])
                (plus:DI (reg/f:DI 0 ax [653])
                    (reg:DI 1 dx [orig:166 D.6204 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:172 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.6204 ] [166]))
        (nil)))
(insn 749 748 750 29 (set (reg/f:DI 0 ax [orig:168 D.6207 ] [168])
        (mem/f:DI (reg/f:DI 0 ax [orig:167 D.6206 ] [167]) [0 *_155+0 S8 A64])) sim2fitman_com_line.cpp:172 89 {*movdi_internal}
     (nil))
(insn 750 749 751 29 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f9683ed6870 *.LC5>)) sim2fitman_com_line.cpp:172 89 {*movdi_internal}
     (nil))
(insn 751 750 752 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:168 D.6207 ] [168])) sim2fitman_com_line.cpp:172 89 {*movdi_internal}
     (nil))
(call_insn/i 752 751 753 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:172 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 753 752 754 29 (set (reg:SI 0 ax [orig:169 D.6203 ] [169])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:172 90 {*movsi_internal}
     (nil))
(insn 754 753 755 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:169 D.6203 ] [169])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:172 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 755 754 756 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 762)
            (pc))) sim2fitman_com_line.cpp:172 612 {*jcc_1}
     (nil)
 -> 762)
;;  succ:       30 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 756 755 757 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 757 756 758 30 (set (reg:SI 5 di)
        (const_int 0 [0])) sim2fitman_com_line.cpp:173 90 {*movsi_internal}
     (nil))
(call_insn 758 757 759 30 (call (mem:QI (symbol_ref:DI ("_Z9disp_helpi") [flags 0x41]  <function_decl 0x7f9684250af8 disp_help>) [0 disp_help S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:173 660 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 759 758 760 30 (set (reg:SI 5 di)
        (const_int 0 [0])) sim2fitman_com_line.cpp:174 90 {*movsi_internal}
     (nil))
(call_insn 760 759 761 30 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f9684373ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:174 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 761 760 762)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 170 171 172 173 174 654 655
(code_label 762 761 763 31 19 "" [1 uses])
(note 763 762 764 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 764 763 765 31 (set (reg:SI 0 ax [654])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:177 90 {*movsi_internal}
     (nil))
(insn 765 764 766 31 (set (reg:DI 0 ax [orig:170 D.6204 ] [170])
        (sign_extend:DI (reg:SI 0 ax [654]))) sim2fitman_com_line.cpp:177 142 {*extendsidi2_rex64}
     (nil))
(insn 766 765 767 31 (parallel [
            (set (reg:DI 1 dx [orig:171 D.6204 ] [171])
                (ashift:DI (reg:DI 0 ax [orig:170 D.6204 ] [170])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:177 512 {*ashldi3_1}
     (nil))
(insn 767 766 768 31 (set (reg/f:DI 0 ax [655])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:177 89 {*movdi_internal}
     (nil))
(insn 768 767 769 31 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.6206 ] [172])
                (plus:DI (reg/f:DI 0 ax [655])
                    (reg:DI 1 dx [orig:171 D.6204 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:177 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:171 D.6204 ] [171]))
        (nil)))
(insn 769 768 770 31 (set (reg/f:DI 0 ax [orig:173 D.6207 ] [173])
        (mem/f:DI (reg/f:DI 0 ax [orig:172 D.6206 ] [172]) [0 *_160+0 S8 A64])) sim2fitman_com_line.cpp:177 89 {*movdi_internal}
     (nil))
(insn 770 769 771 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f9683ed6900 *.LC6>)) sim2fitman_com_line.cpp:177 89 {*movdi_internal}
     (nil))
(insn 771 770 772 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:173 D.6207 ] [173])) sim2fitman_com_line.cpp:177 89 {*movdi_internal}
     (nil))
(call_insn/i 772 771 773 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:177 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 773 772 774 31 (set (reg:SI 0 ax [orig:174 D.6203 ] [174])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:177 90 {*movsi_internal}
     (nil))
(insn 774 773 775 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:174 D.6203 ] [174])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:177 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 775 774 776 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 782)
            (pc))) sim2fitman_com_line.cpp:177 612 {*jcc_1}
     (nil)
 -> 782)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 776 775 777 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 777 776 778 32 (set (reg:SI 5 di)
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:178 90 {*movsi_internal}
     (nil))
(call_insn 778 777 779 32 (call (mem:QI (symbol_ref:DI ("_Z9disp_helpi") [flags 0x41]  <function_decl 0x7f9684250af8 disp_help>) [0 disp_help S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:178 660 {*call}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 779 778 780 32 (set (reg:SI 5 di)
        (const_int 0 [0])) sim2fitman_com_line.cpp:179 90 {*movsi_internal}
     (nil))
(call_insn 780 779 781 32 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f9684373ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:179 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 781 780 782)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 175 176 177 178 179 656 657
(code_label 782 781 783 33 20 "" [1 uses])
(note 783 782 784 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 784 783 785 33 (set (reg:SI 0 ax [656])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:182 90 {*movsi_internal}
     (nil))
(insn 785 784 786 33 (set (reg:DI 0 ax [orig:175 D.6204 ] [175])
        (sign_extend:DI (reg:SI 0 ax [656]))) sim2fitman_com_line.cpp:182 142 {*extendsidi2_rex64}
     (nil))
(insn 786 785 787 33 (parallel [
            (set (reg:DI 1 dx [orig:176 D.6204 ] [176])
                (ashift:DI (reg:DI 0 ax [orig:175 D.6204 ] [175])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:182 512 {*ashldi3_1}
     (nil))
(insn 787 786 788 33 (set (reg/f:DI 0 ax [657])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:182 89 {*movdi_internal}
     (nil))
(insn 788 787 789 33 (parallel [
            (set (reg/f:DI 0 ax [orig:177 D.6206 ] [177])
                (plus:DI (reg/f:DI 0 ax [657])
                    (reg:DI 1 dx [orig:176 D.6204 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:182 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:176 D.6204 ] [176]))
        (nil)))
(insn 789 788 790 33 (set (reg/f:DI 0 ax [orig:178 D.6207 ] [178])
        (mem/f:DI (reg/f:DI 0 ax [orig:177 D.6206 ] [177]) [0 *_165+0 S8 A64])) sim2fitman_com_line.cpp:182 89 {*movdi_internal}
     (nil))
(insn 790 789 791 33 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f9683ed6990 *.LC7>)) sim2fitman_com_line.cpp:182 89 {*movdi_internal}
     (nil))
(insn 791 790 792 33 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:178 D.6207 ] [178])) sim2fitman_com_line.cpp:182 89 {*movdi_internal}
     (nil))
(call_insn/i 792 791 793 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:182 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 793 792 794 33 (set (reg:SI 0 ax [orig:179 D.6203 ] [179])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:182 90 {*movsi_internal}
     (nil))
(insn 794 793 795 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:179 D.6203 ] [179])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:182 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 795 794 796 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 815)
            (pc))) sim2fitman_com_line.cpp:182 612 {*jcc_1}
     (nil)
 -> 815)
;;  succ:       34 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 180 658
(note 796 795 797 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 797 796 798 34 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:184 93 {*movqi_internal}
     (nil))
(insn 798 797 799 34 (set (reg/f:DI 0 ax [658])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:185 89 {*movdi_internal}
     (nil))
(insn 799 798 800 34 (set (reg:SI 0 ax [orig:180 D.6203 ] [180])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [658])
                (const_int 8 [0x8])) [0 preprocess_52(D)->scaleby+0 S4 A32])) sim2fitman_com_line.cpp:185 90 {*movsi_internal}
     (nil))
(insn 800 799 801 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:180 D.6203 ] [180])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:185 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 801 800 802 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 810)
            (pc))) sim2fitman_com_line.cpp:185 612 {*jcc_1}
     (nil)
 -> 810)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 659 660 661
(note 802 801 803 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 803 802 804 35 (set (reg/f:DI 0 ax [659])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:186 89 {*movdi_internal}
     (nil))
(insn 804 803 805 35 (set (mem/j:SI (reg/f:DI 0 ax [659]) [0 preprocess_52(D)->fid_scale+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:186 90 {*movsi_internal}
     (nil))
(insn 805 804 806 35 (set (reg/f:DI 0 ax [660])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:187 89 {*movdi_internal}
     (nil))
(insn 806 805 807 35 (set (reg:SF 21 xmm0 [661])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:187 129 {*movsf_internal}
     (nil))
(insn 807 806 1732 35 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [660])
                (const_int 4 [0x4])) [0 preprocess_52(D)->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [661])) sim2fitman_com_line.cpp:187 129 {*movsf_internal}
     (nil))
(jump_insn 1732 807 1733 35 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1733 1732 810)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 810 1733 811 36 22 "" [1 uses])
(note 811 810 812 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 812 811 1734 36 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_com_line.cpp:190 90 {*movsi_internal}
     (nil))
(jump_insn 1734 812 1735 36 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:190 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1735 1734 815)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 181 182 183 184 185 662 663
(code_label 815 1735 816 37 21 "" [1 uses])
(note 816 815 817 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 817 816 818 37 (set (reg:SI 0 ax [662])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:194 90 {*movsi_internal}
     (nil))
(insn 818 817 819 37 (set (reg:DI 0 ax [orig:181 D.6204 ] [181])
        (sign_extend:DI (reg:SI 0 ax [662]))) sim2fitman_com_line.cpp:194 142 {*extendsidi2_rex64}
     (nil))
(insn 819 818 820 37 (parallel [
            (set (reg:DI 1 dx [orig:182 D.6204 ] [182])
                (ashift:DI (reg:DI 0 ax [orig:181 D.6204 ] [181])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:194 512 {*ashldi3_1}
     (nil))
(insn 820 819 821 37 (set (reg/f:DI 0 ax [663])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 821 820 822 37 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.6206 ] [183])
                (plus:DI (reg/f:DI 0 ax [663])
                    (reg:DI 1 dx [orig:182 D.6204 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:194 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.6204 ] [182]))
        (nil)))
(insn 822 821 823 37 (set (reg/f:DI 0 ax [orig:184 D.6207 ] [184])
        (mem/f:DI (reg/f:DI 0 ax [orig:183 D.6206 ] [183]) [0 *_175+0 S8 A64])) sim2fitman_com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 823 822 824 37 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f9683ed6a20 *.LC8>)) sim2fitman_com_line.cpp:194 89 {*movdi_internal}
     (nil))
(insn 824 823 825 37 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:184 D.6207 ] [184])) sim2fitman_com_line.cpp:194 89 {*movdi_internal}
     (nil))
(call_insn/i 825 824 826 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:194 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 826 825 827 37 (set (reg:SI 0 ax [orig:185 D.6203 ] [185])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:194 90 {*movsi_internal}
     (nil))
(insn 827 826 828 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:185 D.6203 ] [185])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:194 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 828 827 829 37 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 852)
            (pc))) sim2fitman_com_line.cpp:194 612 {*jcc_1}
     (nil)
 -> 852)
;;  succ:       38 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 186 187 664
(note 829 828 830 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 830 829 831 38 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:196 93 {*movqi_internal}
     (nil))
(insn 831 830 832 38 (set (reg/f:DI 0 ax [664])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:197 89 {*movdi_internal}
     (nil))
(insn 832 831 833 38 (parallel [
            (set (reg/f:DI 0 ax [orig:186 D.6205 ] [186])
                (plus:DI (reg/f:DI 0 ax [664])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:197 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 833 832 834 38 (set (reg:SI 0 ax [orig:187 D.6203 ] [187])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:186 D.6205 ] [186])
                (const_int 8 [0x8])) [0 _179->scaleby+0 S4 A32])) sim2fitman_com_line.cpp:197 90 {*movsi_internal}
     (nil))
(insn 834 833 835 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:187 D.6203 ] [187])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:197 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 835 834 836 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 847)
            (pc))) sim2fitman_com_line.cpp:197 612 {*jcc_1}
     (nil)
 -> 847)
;;  succ:       39 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 188 189 665 666 667
(note 836 835 837 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 837 836 838 39 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -827 [0xfffffffffffffcc5])) [0 rscale_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:198 93 {*movqi_internal}
     (nil))
(insn 838 837 839 39 (set (reg/f:DI 0 ax [665])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:199 89 {*movdi_internal}
     (nil))
(insn 839 838 840 39 (parallel [
            (set (reg/f:DI 0 ax [orig:188 D.6205 ] [188])
                (plus:DI (reg/f:DI 0 ax [665])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:199 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 840 839 841 39 (set (mem/j:SI (reg/f:DI 0 ax [orig:188 D.6205 ] [188]) [0 _182->fid_scale+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:199 90 {*movsi_internal}
     (nil))
(insn 841 840 842 39 (set (reg/f:DI 0 ax [666])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:200 89 {*movdi_internal}
     (nil))
(insn 842 841 843 39 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.6205 ] [189])
                (plus:DI (reg/f:DI 0 ax [666])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:200 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 843 842 844 39 (set (reg:SF 21 xmm0 [667])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_com_line.cpp:200 129 {*movsf_internal}
     (nil))
(insn 844 843 1736 39 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:189 D.6205 ] [189])
                (const_int 4 [0x4])) [0 _184->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [667])) sim2fitman_com_line.cpp:200 129 {*movsf_internal}
     (nil))
(jump_insn 1736 844 1737 39 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1737 1736 847)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 847 1737 848 40 24 "" [1 uses])
(note 848 847 849 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 849 848 1738 40 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_com_line.cpp:203 90 {*movsi_internal}
     (nil))
(jump_insn 1738 849 1739 40 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:203 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1739 1738 852)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 190 191 192 193 194 668 669
(code_label 852 1739 853 41 23 "" [1 uses])
(note 853 852 854 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 854 853 855 41 (set (reg:SI 0 ax [668])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:207 90 {*movsi_internal}
     (nil))
(insn 855 854 856 41 (set (reg:DI 0 ax [orig:190 D.6204 ] [190])
        (sign_extend:DI (reg:SI 0 ax [668]))) sim2fitman_com_line.cpp:207 142 {*extendsidi2_rex64}
     (nil))
(insn 856 855 857 41 (parallel [
            (set (reg:DI 1 dx [orig:191 D.6204 ] [191])
                (ashift:DI (reg:DI 0 ax [orig:190 D.6204 ] [190])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:207 512 {*ashldi3_1}
     (nil))
(insn 857 856 858 41 (set (reg/f:DI 0 ax [669])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:207 89 {*movdi_internal}
     (nil))
(insn 858 857 859 41 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.6206 ] [192])
                (plus:DI (reg/f:DI 0 ax [669])
                    (reg:DI 1 dx [orig:191 D.6204 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:207 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:191 D.6204 ] [191]))
        (nil)))
(insn 859 858 860 41 (set (reg/f:DI 0 ax [orig:193 D.6207 ] [193])
        (mem/f:DI (reg/f:DI 0 ax [orig:192 D.6206 ] [192]) [0 *_189+0 S8 A64])) sim2fitman_com_line.cpp:207 89 {*movdi_internal}
     (nil))
(insn 860 859 861 41 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f9683ed6ab0 *.LC9>)) sim2fitman_com_line.cpp:207 89 {*movdi_internal}
     (nil))
(insn 861 860 862 41 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:193 D.6207 ] [193])) sim2fitman_com_line.cpp:207 89 {*movdi_internal}
     (nil))
(call_insn/i 862 861 863 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:207 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 863 862 864 41 (set (reg:SI 0 ax [orig:194 D.6203 ] [194])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:207 90 {*movsi_internal}
     (nil))
(insn 864 863 865 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:194 D.6203 ] [194])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:207 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 865 864 866 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 913)
            (pc))) sim2fitman_com_line.cpp:207 612 {*jcc_1}
     (nil)
 -> 913)
;;  succ:       42 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 195 670
(note 866 865 867 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 867 866 868 42 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:209 93 {*movqi_internal}
     (nil))
(insn 868 867 869 42 (set (reg/f:DI 0 ax [670])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:210 89 {*movdi_internal}
     (nil))
(insn 869 868 870 42 (set (reg:SI 0 ax [orig:195 D.6203 ] [195])
        (mem/j:SI (reg/f:DI 0 ax [670]) [0 preprocess_52(D)->fid_scale+0 S4 A32])) sim2fitman_com_line.cpp:210 90 {*movsi_internal}
     (nil))
(insn 870 869 871 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:195 D.6203 ] [195])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:210 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 871 870 872 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 908)
            (pc))) sim2fitman_com_line.cpp:210 612 {*jcc_1}
     (nil)
 -> 908)
;;  succ:       43 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 196 197 198 199 200 671 672 673
(note 872 871 873 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 873 872 874 43 (set (reg/f:DI 0 ax [671])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:211 89 {*movdi_internal}
     (nil))
(insn 874 873 875 43 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [671])
                (const_int 8 [0x8])) [0 preprocess_52(D)->scaleby+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:211 90 {*movsi_internal}
     (nil))
(insn 875 874 876 43 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:212 217 {*addsi_1}
     (nil))
(insn 876 875 877 43 (set (reg:SI 0 ax [672])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:213 90 {*movsi_internal}
     (nil))
(insn 877 876 878 43 (set (reg:DI 0 ax [orig:196 D.6204 ] [196])
        (sign_extend:DI (reg:SI 0 ax [672]))) sim2fitman_com_line.cpp:213 142 {*extendsidi2_rex64}
     (nil))
(insn 878 877 879 43 (parallel [
            (set (reg:DI 1 dx [orig:197 D.6204 ] [197])
                (ashift:DI (reg:DI 0 ax [orig:196 D.6204 ] [196])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:213 512 {*ashldi3_1}
     (nil))
(insn 879 878 880 43 (set (reg/f:DI 0 ax [673])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 880 879 881 43 (parallel [
            (set (reg/f:DI 0 ax [orig:198 D.6206 ] [198])
                (plus:DI (reg/f:DI 0 ax [673])
                    (reg:DI 1 dx [orig:197 D.6204 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:213 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:197 D.6204 ] [197]))
        (nil)))
(insn 881 880 882 43 (set (reg/f:DI 0 ax [orig:199 D.6207 ] [199])
        (mem/f:DI (reg/f:DI 0 ax [orig:198 D.6206 ] [198]) [0 *_198+0 S8 A64])) sim2fitman_com_line.cpp:213 89 {*movdi_internal}
     (nil))
(insn 882 881 883 43 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:199 D.6207 ] [199])) sim2fitman_com_line.cpp:213 89 {*movdi_internal}
     (nil))
(call_insn 883 882 884 43 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x7f9684250438 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:213 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 884 883 885 43 (set (reg:QI 0 ax [orig:200 D.6209 ] [200])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:213 93 {*movqi_internal}
     (nil))
(insn 885 884 886 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:200 D.6209 ] [200])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:213 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 886 885 887 43 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 903)
            (pc))) sim2fitman_com_line.cpp:213 612 {*jcc_1}
     (nil)
 -> 903)
;;  succ:       44 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 201 202 203 204 205 674 675 676
(note 887 886 888 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 888 887 889 44 (set (reg/f:DI 0 ax [674])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 889 888 890 44 (parallel [
            (set (reg/f:DI 1 dx [orig:201 D.6210 ] [201])
                (plus:DI (reg/f:DI 0 ax [674])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:214 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 890 889 891 44 (set (reg:SI 0 ax [675])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:214 90 {*movsi_internal}
     (nil))
(insn 891 890 892 44 (set (reg:DI 0 ax [orig:202 D.6204 ] [202])
        (sign_extend:DI (reg:SI 0 ax [675]))) sim2fitman_com_line.cpp:214 142 {*extendsidi2_rex64}
     (nil))
(insn 892 891 893 44 (parallel [
            (set (reg:DI 2 cx [orig:203 D.6204 ] [203])
                (ashift:DI (reg:DI 0 ax [orig:202 D.6204 ] [202])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:214 512 {*ashldi3_1}
     (nil))
(insn 893 892 894 44 (set (reg/f:DI 0 ax [676])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 894 893 895 44 (parallel [
            (set (reg/f:DI 0 ax [orig:204 D.6206 ] [204])
                (plus:DI (reg/f:DI 0 ax [676])
                    (reg:DI 2 cx [orig:203 D.6204 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:214 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:203 D.6204 ] [203]))
        (nil)))
(insn 895 894 897 44 (set (reg/f:DI 0 ax [orig:205 D.6207 ] [205])
        (mem/f:DI (reg/f:DI 0 ax [orig:204 D.6206 ] [204]) [0 *_206+0 S8 A64])) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 897 895 898 44 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f9683ed6b40 *.LC10>)) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 898 897 899 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:205 D.6207 ] [205])) sim2fitman_com_line.cpp:214 89 {*movdi_internal}
     (nil))
(insn 899 898 900 44 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_com_line.cpp:214 93 {*movqi_internal}
     (nil))
(call_insn 900 899 1740 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f9684358d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:214 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1740 900 1741 44 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1741 1740 903)
;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 903 1741 904 45 27 "" [1 uses])
(note 904 903 905 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 905 904 1742 45 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -14 [0xfffffffffffffff2])) sim2fitman_com_line.cpp:216 90 {*movsi_internal}
     (nil))
(jump_insn 1742 905 1743 45 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:216 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1743 1742 908)
;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 908 1743 909 46 26 "" [1 uses])
(note 909 908 910 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 910 909 1744 46 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_com_line.cpp:220 90 {*movsi_internal}
     (nil))
(jump_insn 1744 910 1745 46 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:220 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1745 1744 913)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 206 207 208 209 210 677 678
(code_label 913 1745 914 47 25 "" [1 uses])
(note 914 913 915 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 915 914 916 47 (set (reg:SI 0 ax [677])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:224 90 {*movsi_internal}
     (nil))
(insn 916 915 917 47 (set (reg:DI 0 ax [orig:206 D.6204 ] [206])
        (sign_extend:DI (reg:SI 0 ax [677]))) sim2fitman_com_line.cpp:224 142 {*extendsidi2_rex64}
     (nil))
(insn 917 916 918 47 (parallel [
            (set (reg:DI 1 dx [orig:207 D.6204 ] [207])
                (ashift:DI (reg:DI 0 ax [orig:206 D.6204 ] [206])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:224 512 {*ashldi3_1}
     (nil))
(insn 918 917 919 47 (set (reg/f:DI 0 ax [678])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:224 89 {*movdi_internal}
     (nil))
(insn 919 918 920 47 (parallel [
            (set (reg/f:DI 0 ax [orig:208 D.6206 ] [208])
                (plus:DI (reg/f:DI 0 ax [678])
                    (reg:DI 1 dx [orig:207 D.6204 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:224 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:207 D.6204 ] [207]))
        (nil)))
(insn 920 919 921 47 (set (reg/f:DI 0 ax [orig:209 D.6207 ] [209])
        (mem/f:DI (reg/f:DI 0 ax [orig:208 D.6206 ] [208]) [0 *_213+0 S8 A64])) sim2fitman_com_line.cpp:224 89 {*movdi_internal}
     (nil))
(insn 921 920 922 47 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f9683ed6bd0 *.LC11>)) sim2fitman_com_line.cpp:224 89 {*movdi_internal}
     (nil))
(insn 922 921 923 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:209 D.6207 ] [209])) sim2fitman_com_line.cpp:224 89 {*movdi_internal}
     (nil))
(call_insn/i 923 922 924 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:224 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 924 923 925 47 (set (reg:SI 0 ax [orig:210 D.6203 ] [210])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:224 90 {*movsi_internal}
     (nil))
(insn 925 924 926 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:210 D.6203 ] [210])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:224 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 926 925 927 47 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 978)
            (pc))) sim2fitman_com_line.cpp:224 612 {*jcc_1}
     (nil)
 -> 978)
;;  succ:       48 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 211 212 679
(note 927 926 928 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 928 927 929 48 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:226 93 {*movqi_internal}
     (nil))
(insn 929 928 930 48 (set (reg/f:DI 0 ax [679])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:227 89 {*movdi_internal}
     (nil))
(insn 930 929 931 48 (parallel [
            (set (reg/f:DI 0 ax [orig:211 D.6205 ] [211])
                (plus:DI (reg/f:DI 0 ax [679])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:227 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 931 930 932 48 (set (reg:SI 0 ax [orig:212 D.6203 ] [212])
        (mem/j:SI (reg/f:DI 0 ax [orig:211 D.6205 ] [211]) [0 _217->fid_scale+0 S4 A32])) sim2fitman_com_line.cpp:227 90 {*movsi_internal}
     (nil))
(insn 932 931 933 48 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:212 D.6203 ] [212])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:227 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 933 932 934 48 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 973)
            (pc))) sim2fitman_com_line.cpp:227 612 {*jcc_1}
     (nil)
 -> 973)
;;  succ:       49 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 213 214 215 216 217 218 680 681 682
(note 934 933 935 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 935 934 936 49 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -827 [0xfffffffffffffcc5])) [0 rscale_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:228 93 {*movqi_internal}
     (nil))
(insn 936 935 937 49 (set (reg/f:DI 0 ax [680])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:229 89 {*movdi_internal}
     (nil))
(insn 937 936 938 49 (parallel [
            (set (reg/f:DI 0 ax [orig:213 D.6205 ] [213])
                (plus:DI (reg/f:DI 0 ax [680])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:229 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 938 937 939 49 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:213 D.6205 ] [213])
                (const_int 8 [0x8])) [0 _220->scaleby+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:229 90 {*movsi_internal}
     (nil))
(insn 939 938 940 49 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:230 217 {*addsi_1}
     (nil))
(insn 940 939 941 49 (set (reg:SI 0 ax [681])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:231 90 {*movsi_internal}
     (nil))
(insn 941 940 942 49 (set (reg:DI 0 ax [orig:214 D.6204 ] [214])
        (sign_extend:DI (reg:SI 0 ax [681]))) sim2fitman_com_line.cpp:231 142 {*extendsidi2_rex64}
     (nil))
(insn 942 941 943 49 (parallel [
            (set (reg:DI 1 dx [orig:215 D.6204 ] [215])
                (ashift:DI (reg:DI 0 ax [orig:214 D.6204 ] [214])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:231 512 {*ashldi3_1}
     (nil))
(insn 943 942 944 49 (set (reg/f:DI 0 ax [682])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:231 89 {*movdi_internal}
     (nil))
(insn 944 943 945 49 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.6206 ] [216])
                (plus:DI (reg/f:DI 0 ax [682])
                    (reg:DI 1 dx [orig:215 D.6204 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:231 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:215 D.6204 ] [215]))
        (nil)))
(insn 945 944 946 49 (set (reg/f:DI 0 ax [orig:217 D.6207 ] [217])
        (mem/f:DI (reg/f:DI 0 ax [orig:216 D.6206 ] [216]) [0 *_225+0 S8 A64])) sim2fitman_com_line.cpp:231 89 {*movdi_internal}
     (nil))
(insn 946 945 947 49 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:217 D.6207 ] [217])) sim2fitman_com_line.cpp:231 89 {*movdi_internal}
     (nil))
(call_insn 947 946 948 49 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x7f9684250438 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:231 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 948 947 949 49 (set (reg:QI 0 ax [orig:218 D.6209 ] [218])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:231 93 {*movqi_internal}
     (nil))
(insn 949 948 950 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:218 D.6209 ] [218])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:231 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 950 949 951 49 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 968)
            (pc))) sim2fitman_com_line.cpp:231 612 {*jcc_1}
     (nil)
 -> 968)
;;  succ:       50 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 219 220 221 222 223 224 683 684 685
(note 951 950 952 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 952 951 953 50 (set (reg/f:DI 0 ax [683])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 953 952 954 50 (parallel [
            (set (reg/f:DI 0 ax [orig:219 D.6205 ] [219])
                (plus:DI (reg/f:DI 0 ax [683])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:232 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 954 953 955 50 (parallel [
            (set (reg/f:DI 1 dx [orig:220 D.6210 ] [220])
                (plus:DI (reg/f:DI 0 ax [orig:219 D.6205 ] [219])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:232 218 {*adddi_1}
     (nil))
(insn 955 954 956 50 (set (reg:SI 0 ax [684])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:232 90 {*movsi_internal}
     (nil))
(insn 956 955 957 50 (set (reg:DI 0 ax [orig:221 D.6204 ] [221])
        (sign_extend:DI (reg:SI 0 ax [684]))) sim2fitman_com_line.cpp:232 142 {*extendsidi2_rex64}
     (nil))
(insn 957 956 958 50 (parallel [
            (set (reg:DI 2 cx [orig:222 D.6204 ] [222])
                (ashift:DI (reg:DI 0 ax [orig:221 D.6204 ] [221])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:232 512 {*ashldi3_1}
     (nil))
(insn 958 957 959 50 (set (reg/f:DI 0 ax [685])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 959 958 960 50 (parallel [
            (set (reg/f:DI 0 ax [orig:223 D.6206 ] [223])
                (plus:DI (reg/f:DI 0 ax [685])
                    (reg:DI 2 cx [orig:222 D.6204 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:232 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:222 D.6204 ] [222]))
        (nil)))
(insn 960 959 962 50 (set (reg/f:DI 0 ax [orig:224 D.6207 ] [224])
        (mem/f:DI (reg/f:DI 0 ax [orig:223 D.6206 ] [223]) [0 *_234+0 S8 A64])) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 962 960 963 50 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f9683ed6b40 *.LC10>)) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 963 962 964 50 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:224 D.6207 ] [224])) sim2fitman_com_line.cpp:232 89 {*movdi_internal}
     (nil))
(insn 964 963 965 50 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_com_line.cpp:232 93 {*movqi_internal}
     (nil))
(call_insn 965 964 1746 50 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f9684358d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:232 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1746 965 1747 50 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1747 1746 968)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 968 1747 969 51 30 "" [1 uses])
(note 969 968 970 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 970 969 1748 51 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -15 [0xfffffffffffffff1])) sim2fitman_com_line.cpp:234 90 {*movsi_internal}
     (nil))
(jump_insn 1748 970 1749 51 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:234 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1749 1748 973)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 973 1749 974 52 29 "" [1 uses])
(note 974 973 975 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 975 974 1750 52 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_com_line.cpp:238 90 {*movsi_internal}
     (nil))
(jump_insn 1750 975 1751 52 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:238 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1751 1750 978)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 225 226 227 228 229 686 687
(code_label 978 1751 979 53 28 "" [1 uses])
(note 979 978 980 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 980 979 981 53 (set (reg:SI 0 ax [686])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:242 90 {*movsi_internal}
     (nil))
(insn 981 980 982 53 (set (reg:DI 0 ax [orig:225 D.6204 ] [225])
        (sign_extend:DI (reg:SI 0 ax [686]))) sim2fitman_com_line.cpp:242 142 {*extendsidi2_rex64}
     (nil))
(insn 982 981 983 53 (parallel [
            (set (reg:DI 1 dx [orig:226 D.6204 ] [226])
                (ashift:DI (reg:DI 0 ax [orig:225 D.6204 ] [225])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:242 512 {*ashldi3_1}
     (nil))
(insn 983 982 984 53 (set (reg/f:DI 0 ax [687])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:242 89 {*movdi_internal}
     (nil))
(insn 984 983 985 53 (parallel [
            (set (reg/f:DI 0 ax [orig:227 D.6206 ] [227])
                (plus:DI (reg/f:DI 0 ax [687])
                    (reg:DI 1 dx [orig:226 D.6204 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:242 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:226 D.6204 ] [226]))
        (nil)))
(insn 985 984 986 53 (set (reg/f:DI 0 ax [orig:228 D.6207 ] [228])
        (mem/f:DI (reg/f:DI 0 ax [orig:227 D.6206 ] [227]) [0 *_241+0 S8 A64])) sim2fitman_com_line.cpp:242 89 {*movdi_internal}
     (nil))
(insn 986 985 987 53 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f9683ed6c60 *.LC12>)) sim2fitman_com_line.cpp:242 89 {*movdi_internal}
     (nil))
(insn 987 986 988 53 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:228 D.6207 ] [228])) sim2fitman_com_line.cpp:242 89 {*movdi_internal}
     (nil))
(call_insn/i 988 987 989 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:242 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 989 988 990 53 (set (reg:SI 0 ax [orig:229 D.6203 ] [229])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:242 90 {*movsi_internal}
     (nil))
(insn 990 989 991 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:229 D.6203 ] [229])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:242 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 991 990 992 53 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1026)
            (pc))) sim2fitman_com_line.cpp:242 612 {*jcc_1}
     (nil)
 -> 1026)
;;  succ:       54 (FALLTHRU)
;;              57
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 230 231 232 233 234 688 689
(note 992 991 993 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 993 992 994 54 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:243 217 {*addsi_1}
     (nil))
(insn 994 993 995 54 (set (reg:SI 0 ax [688])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:244 90 {*movsi_internal}
     (nil))
(insn 995 994 996 54 (set (reg:DI 0 ax [orig:230 D.6204 ] [230])
        (sign_extend:DI (reg:SI 0 ax [688]))) sim2fitman_com_line.cpp:244 142 {*extendsidi2_rex64}
     (nil))
(insn 996 995 997 54 (parallel [
            (set (reg:DI 1 dx [orig:231 D.6204 ] [231])
                (ashift:DI (reg:DI 0 ax [orig:230 D.6204 ] [230])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:244 512 {*ashldi3_1}
     (nil))
(insn 997 996 998 54 (set (reg/f:DI 0 ax [689])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:244 89 {*movdi_internal}
     (nil))
(insn 998 997 999 54 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.6206 ] [232])
                (plus:DI (reg/f:DI 0 ax [689])
                    (reg:DI 1 dx [orig:231 D.6204 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:244 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:231 D.6204 ] [231]))
        (nil)))
(insn 999 998 1000 54 (set (reg/f:DI 0 ax [orig:233 D.6207 ] [233])
        (mem/f:DI (reg/f:DI 0 ax [orig:232 D.6206 ] [232]) [0 *_247+0 S8 A64])) sim2fitman_com_line.cpp:244 89 {*movdi_internal}
     (nil))
(insn 1000 999 1001 54 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:233 D.6207 ] [233])) sim2fitman_com_line.cpp:244 89 {*movdi_internal}
     (nil))
(call_insn 1001 1000 1002 54 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x7f9684250438 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:244 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1002 1001 1003 54 (set (reg:QI 0 ax [orig:234 D.6209 ] [234])
        (reg:QI 0 ax)) sim2fitman_com_line.cpp:244 93 {*movqi_internal}
     (nil))
(insn 1003 1002 1004 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:234 D.6209 ] [234])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:244 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1004 1003 1005 54 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1021)
            (pc))) sim2fitman_com_line.cpp:244 612 {*jcc_1}
     (nil)
 -> 1021)
;;  succ:       55 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 235 236 237 238 239 690 691 692
(note 1005 1004 1006 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 1006 1005 1007 55 (set (reg/f:DI 0 ax [690])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1007 1006 1008 55 (parallel [
            (set (reg/f:DI 1 dx [orig:235 D.6210 ] [235])
                (plus:DI (reg/f:DI 0 ax [690])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:245 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 28 [0x1c]))
        (nil)))
(insn 1008 1007 1009 55 (set (reg:SI 0 ax [691])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:245 90 {*movsi_internal}
     (nil))
(insn 1009 1008 1010 55 (set (reg:DI 0 ax [orig:236 D.6204 ] [236])
        (sign_extend:DI (reg:SI 0 ax [691]))) sim2fitman_com_line.cpp:245 142 {*extendsidi2_rex64}
     (nil))
(insn 1010 1009 1011 55 (parallel [
            (set (reg:DI 2 cx [orig:237 D.6204 ] [237])
                (ashift:DI (reg:DI 0 ax [orig:236 D.6204 ] [236])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:245 512 {*ashldi3_1}
     (nil))
(insn 1011 1010 1012 55 (set (reg/f:DI 0 ax [692])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1012 1011 1013 55 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.6206 ] [238])
                (plus:DI (reg/f:DI 0 ax [692])
                    (reg:DI 2 cx [orig:237 D.6204 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:245 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 2 cx [orig:237 D.6204 ] [237]))
        (nil)))
(insn 1013 1012 1015 55 (set (reg/f:DI 0 ax [orig:239 D.6207 ] [239])
        (mem/f:DI (reg/f:DI 0 ax [orig:238 D.6206 ] [238]) [0 *_255+0 S8 A64])) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1015 1013 1016 55 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f9683ed6b40 *.LC10>)) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1016 1015 1017 55 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:239 D.6207 ] [239])) sim2fitman_com_line.cpp:245 89 {*movdi_internal}
     (nil))
(insn 1017 1016 1018 55 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_com_line.cpp:245 93 {*movqi_internal}
     (nil))
(call_insn 1018 1017 1752 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sscanf") [flags 0x41]  <function_decl 0x7f9684358d80 sscanf>) [0 __builtin_sscanf S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:245 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 1752 1018 1753 55 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1753 1752 1021)
;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 1021 1753 1022 56 32 "" [1 uses])
(note 1022 1021 1023 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 1023 1022 1754 56 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -16 [0xfffffffffffffff0])) sim2fitman_com_line.cpp:247 90 {*movsi_internal}
     (nil))
(jump_insn 1754 1023 1755 56 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:247 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1755 1754 1026)
;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 240 241 242 243 244 693 694
(code_label 1026 1755 1027 57 31 "" [1 uses])
(note 1027 1026 1028 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 1028 1027 1029 57 (set (reg:SI 0 ax [693])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:251 90 {*movsi_internal}
     (nil))
(insn 1029 1028 1030 57 (set (reg:DI 0 ax [orig:240 D.6204 ] [240])
        (sign_extend:DI (reg:SI 0 ax [693]))) sim2fitman_com_line.cpp:251 142 {*extendsidi2_rex64}
     (nil))
(insn 1030 1029 1031 57 (parallel [
            (set (reg:DI 1 dx [orig:241 D.6204 ] [241])
                (ashift:DI (reg:DI 0 ax [orig:240 D.6204 ] [240])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:251 512 {*ashldi3_1}
     (nil))
(insn 1031 1030 1032 57 (set (reg/f:DI 0 ax [694])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:251 89 {*movdi_internal}
     (nil))
(insn 1032 1031 1033 57 (parallel [
            (set (reg/f:DI 0 ax [orig:242 D.6206 ] [242])
                (plus:DI (reg/f:DI 0 ax [694])
                    (reg:DI 1 dx [orig:241 D.6204 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:251 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:241 D.6204 ] [241]))
        (nil)))
(insn 1033 1032 1034 57 (set (reg/f:DI 0 ax [orig:243 D.6207 ] [243])
        (mem/f:DI (reg/f:DI 0 ax [orig:242 D.6206 ] [242]) [0 *_261+0 S8 A64])) sim2fitman_com_line.cpp:251 89 {*movdi_internal}
     (nil))
(insn 1034 1033 1035 57 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f9683ed6cf0 *.LC13>)) sim2fitman_com_line.cpp:251 89 {*movdi_internal}
     (nil))
(insn 1035 1034 1036 57 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:243 D.6207 ] [243])) sim2fitman_com_line.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn/i 1036 1035 1037 57 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:251 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1037 1036 1038 57 (set (reg:SI 0 ax [orig:244 D.6203 ] [244])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:251 90 {*movsi_internal}
     (nil))
(insn 1038 1037 1039 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:244 D.6203 ] [244])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:251 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1039 1038 1040 57 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1047)
            (pc))) sim2fitman_com_line.cpp:251 612 {*jcc_1}
     (nil)
 -> 1047)
;;  succ:       58 (FALLTHRU)
;;              59
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 695
(note 1040 1039 1041 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 1041 1040 1042 58 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:252 93 {*movqi_internal}
     (nil))
(insn 1042 1041 1043 58 (set (reg/f:DI 0 ax [695])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:253 89 {*movdi_internal}
     (nil))
(insn 1043 1042 1044 58 (parallel [
            (set (reg/f:DI 0 ax [orig:245 D.6205 ] [245])
                (plus:DI (reg/f:DI 0 ax [695])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:253 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 1044 1043 1756 58 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:245 D.6205 ] [245])
                (const_int 32 [0x20])) [0 _265->max_normalize+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:253 90 {*movsi_internal}
     (nil))
(jump_insn 1756 1044 1757 58 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1757 1756 1047)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 246 247 248 249 250 696 697
(code_label 1047 1757 1048 59 33 "" [1 uses])
(note 1048 1047 1049 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 1049 1048 1050 59 (set (reg:SI 0 ax [696])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:256 90 {*movsi_internal}
     (nil))
(insn 1050 1049 1051 59 (set (reg:DI 0 ax [orig:246 D.6204 ] [246])
        (sign_extend:DI (reg:SI 0 ax [696]))) sim2fitman_com_line.cpp:256 142 {*extendsidi2_rex64}
     (nil))
(insn 1051 1050 1052 59 (parallel [
            (set (reg:DI 1 dx [orig:247 D.6204 ] [247])
                (ashift:DI (reg:DI 0 ax [orig:246 D.6204 ] [246])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:256 512 {*ashldi3_1}
     (nil))
(insn 1052 1051 1053 59 (set (reg/f:DI 0 ax [697])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1053 1052 1054 59 (parallel [
            (set (reg/f:DI 0 ax [orig:248 D.6206 ] [248])
                (plus:DI (reg/f:DI 0 ax [697])
                    (reg:DI 1 dx [orig:247 D.6204 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:256 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:247 D.6204 ] [247]))
        (nil)))
(insn 1054 1053 1055 59 (set (reg/f:DI 0 ax [orig:249 D.6207 ] [249])
        (mem/f:DI (reg/f:DI 0 ax [orig:248 D.6206 ] [248]) [0 *_269+0 S8 A64])) sim2fitman_com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1055 1054 1056 59 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f9683ed6d80 *.LC14>)) sim2fitman_com_line.cpp:256 89 {*movdi_internal}
     (nil))
(insn 1056 1055 1057 59 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:249 D.6207 ] [249])) sim2fitman_com_line.cpp:256 89 {*movdi_internal}
     (nil))
(call_insn/i 1057 1056 1058 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:256 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1058 1057 1059 59 (set (reg:SI 0 ax [orig:250 D.6203 ] [250])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:256 90 {*movsi_internal}
     (nil))
(insn 1059 1058 1060 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:250 D.6203 ] [250])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:256 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1060 1059 1061 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1067)
            (pc))) sim2fitman_com_line.cpp:256 612 {*jcc_1}
     (nil)
 -> 1067)
;;  succ:       60 (FALLTHRU)
;;              61
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 698
(note 1061 1060 1062 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 1062 1061 1063 60 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:258 93 {*movqi_internal}
     (nil))
(insn 1063 1062 1064 60 (set (reg/f:DI 0 ax [698])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:259 89 {*movdi_internal}
     (nil))
(insn 1064 1063 1758 60 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [698])
                (const_int 52 [0x34])) [0 preprocess_52(D)->pre_quecc_if+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:259 90 {*movsi_internal}
     (nil))
(jump_insn 1758 1064 1759 60 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1759 1758 1067)
;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 251 252 253 254 255 699 700
(code_label 1067 1759 1068 61 34 "" [1 uses])
(note 1068 1067 1069 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 1069 1068 1070 61 (set (reg:SI 0 ax [699])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:262 90 {*movsi_internal}
     (nil))
(insn 1070 1069 1071 61 (set (reg:DI 0 ax [orig:251 D.6204 ] [251])
        (sign_extend:DI (reg:SI 0 ax [699]))) sim2fitman_com_line.cpp:262 142 {*extendsidi2_rex64}
     (nil))
(insn 1071 1070 1072 61 (parallel [
            (set (reg:DI 1 dx [orig:252 D.6204 ] [252])
                (ashift:DI (reg:DI 0 ax [orig:251 D.6204 ] [251])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:262 512 {*ashldi3_1}
     (nil))
(insn 1072 1071 1073 61 (set (reg/f:DI 0 ax [700])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:262 89 {*movdi_internal}
     (nil))
(insn 1073 1072 1074 61 (parallel [
            (set (reg/f:DI 0 ax [orig:253 D.6206 ] [253])
                (plus:DI (reg/f:DI 0 ax [700])
                    (reg:DI 1 dx [orig:252 D.6204 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:262 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:252 D.6204 ] [252]))
        (nil)))
(insn 1074 1073 1075 61 (set (reg/f:DI 0 ax [orig:254 D.6207 ] [254])
        (mem/f:DI (reg/f:DI 0 ax [orig:253 D.6206 ] [253]) [0 *_276+0 S8 A64])) sim2fitman_com_line.cpp:262 89 {*movdi_internal}
     (nil))
(insn 1075 1074 1076 61 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f9683ed6e10 *.LC15>)) sim2fitman_com_line.cpp:262 89 {*movdi_internal}
     (nil))
(insn 1076 1075 1077 61 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:254 D.6207 ] [254])) sim2fitman_com_line.cpp:262 89 {*movdi_internal}
     (nil))
(call_insn/i 1077 1076 1078 61 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:262 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1078 1077 1079 61 (set (reg:SI 0 ax [orig:255 D.6203 ] [255])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:262 90 {*movsi_internal}
     (nil))
(insn 1079 1078 1080 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:255 D.6203 ] [255])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:262 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1080 1079 1081 61 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1089)
            (pc))) sim2fitman_com_line.cpp:262 612 {*jcc_1}
     (nil)
 -> 1089)
;;  succ:       62 (FALLTHRU)
;;              63
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 256 701
(note 1081 1080 1082 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 1082 1081 1083 62 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:264 93 {*movqi_internal}
     (nil))
(insn 1083 1082 1084 62 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -825 [0xfffffffffffffcc7])) [0 rif_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:265 93 {*movqi_internal}
     (nil))
(insn 1084 1083 1085 62 (set (reg/f:DI 0 ax [701])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:266 89 {*movdi_internal}
     (nil))
(insn 1085 1084 1086 62 (parallel [
            (set (reg/f:DI 0 ax [orig:256 D.6205 ] [256])
                (plus:DI (reg/f:DI 0 ax [701])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:266 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 1086 1085 1760 62 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:256 D.6205 ] [256])
                (const_int 52 [0x34])) [0 _281->pre_quecc_if+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:266 90 {*movsi_internal}
     (nil))
(jump_insn 1760 1086 1761 62 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1761 1760 1089)
;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 257 258 259 260 261 702 703
(code_label 1089 1761 1090 63 35 "" [1 uses])
(note 1090 1089 1091 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 1091 1090 1092 63 (set (reg:SI 0 ax [702])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:269 90 {*movsi_internal}
     (nil))
(insn 1092 1091 1093 63 (set (reg:DI 0 ax [orig:257 D.6204 ] [257])
        (sign_extend:DI (reg:SI 0 ax [702]))) sim2fitman_com_line.cpp:269 142 {*extendsidi2_rex64}
     (nil))
(insn 1093 1092 1094 63 (parallel [
            (set (reg:DI 1 dx [orig:258 D.6204 ] [258])
                (ashift:DI (reg:DI 0 ax [orig:257 D.6204 ] [257])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:269 512 {*ashldi3_1}
     (nil))
(insn 1094 1093 1095 63 (set (reg/f:DI 0 ax [703])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:269 89 {*movdi_internal}
     (nil))
(insn 1095 1094 1096 63 (parallel [
            (set (reg/f:DI 0 ax [orig:259 D.6206 ] [259])
                (plus:DI (reg/f:DI 0 ax [703])
                    (reg:DI 1 dx [orig:258 D.6204 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:269 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:258 D.6204 ] [258]))
        (nil)))
(insn 1096 1095 1097 63 (set (reg/f:DI 0 ax [orig:260 D.6207 ] [260])
        (mem/f:DI (reg/f:DI 0 ax [orig:259 D.6206 ] [259]) [0 *_285+0 S8 A64])) sim2fitman_com_line.cpp:269 89 {*movdi_internal}
     (nil))
(insn 1097 1096 1098 63 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f9683ed6ea0 *.LC16>)) sim2fitman_com_line.cpp:269 89 {*movdi_internal}
     (nil))
(insn 1098 1097 1099 63 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:260 D.6207 ] [260])) sim2fitman_com_line.cpp:269 89 {*movdi_internal}
     (nil))
(call_insn/i 1099 1098 1100 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:269 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1100 1099 1101 63 (set (reg:SI 0 ax [orig:261 D.6203 ] [261])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:269 90 {*movsi_internal}
     (nil))
(insn 1101 1100 1102 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:261 D.6203 ] [261])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:269 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1102 1101 1103 63 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1109)
            (pc))) sim2fitman_com_line.cpp:269 612 {*jcc_1}
     (nil)
 -> 1109)
;;  succ:       64 (FALLTHRU)
;;              65
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 704
(note 1103 1102 1104 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 1104 1103 1105 64 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:271 93 {*movqi_internal}
     (nil))
(insn 1105 1104 1106 64 (set (reg/f:DI 0 ax [704])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:272 89 {*movdi_internal}
     (nil))
(insn 1106 1105 1762 64 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [704])
                (const_int 16 [0x10])) [0 preprocess_52(D)->bc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:272 90 {*movsi_internal}
     (nil))
(jump_insn 1762 1106 1763 64 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1763 1762 1109)
;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 262 263 264 265 266 705 706
(code_label 1109 1763 1110 65 36 "" [1 uses])
(note 1110 1109 1111 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 1111 1110 1112 65 (set (reg:SI 0 ax [705])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:275 90 {*movsi_internal}
     (nil))
(insn 1112 1111 1113 65 (set (reg:DI 0 ax [orig:262 D.6204 ] [262])
        (sign_extend:DI (reg:SI 0 ax [705]))) sim2fitman_com_line.cpp:275 142 {*extendsidi2_rex64}
     (nil))
(insn 1113 1112 1114 65 (parallel [
            (set (reg:DI 1 dx [orig:263 D.6204 ] [263])
                (ashift:DI (reg:DI 0 ax [orig:262 D.6204 ] [262])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:275 512 {*ashldi3_1}
     (nil))
(insn 1114 1113 1115 65 (set (reg/f:DI 0 ax [706])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:275 89 {*movdi_internal}
     (nil))
(insn 1115 1114 1116 65 (parallel [
            (set (reg/f:DI 0 ax [orig:264 D.6206 ] [264])
                (plus:DI (reg/f:DI 0 ax [706])
                    (reg:DI 1 dx [orig:263 D.6204 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:275 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:263 D.6204 ] [263]))
        (nil)))
(insn 1116 1115 1117 65 (set (reg/f:DI 0 ax [orig:265 D.6207 ] [265])
        (mem/f:DI (reg/f:DI 0 ax [orig:264 D.6206 ] [264]) [0 *_292+0 S8 A64])) sim2fitman_com_line.cpp:275 89 {*movdi_internal}
     (nil))
(insn 1117 1116 1118 65 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f9683ed6f30 *.LC17>)) sim2fitman_com_line.cpp:275 89 {*movdi_internal}
     (nil))
(insn 1118 1117 1119 65 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:265 D.6207 ] [265])) sim2fitman_com_line.cpp:275 89 {*movdi_internal}
     (nil))
(call_insn/i 1119 1118 1120 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:275 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1120 1119 1121 65 (set (reg:SI 0 ax [orig:266 D.6203 ] [266])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:275 90 {*movsi_internal}
     (nil))
(insn 1121 1120 1122 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:266 D.6203 ] [266])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:275 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1122 1121 1123 65 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1131)
            (pc))) sim2fitman_com_line.cpp:275 612 {*jcc_1}
     (nil)
 -> 1131)
;;  succ:       66 (FALLTHRU)
;;              67
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 267 707
(note 1123 1122 1124 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 1124 1123 1125 66 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:277 93 {*movqi_internal}
     (nil))
(insn 1125 1124 1126 66 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -826 [0xfffffffffffffcc6])) [0 rbc_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:278 93 {*movqi_internal}
     (nil))
(insn 1126 1125 1127 66 (set (reg/f:DI 0 ax [707])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:279 89 {*movdi_internal}
     (nil))
(insn 1127 1126 1128 66 (parallel [
            (set (reg/f:DI 0 ax [orig:267 D.6205 ] [267])
                (plus:DI (reg/f:DI 0 ax [707])
                    (const_int 76 [0x4c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:279 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -840 [0xfffffffffffffcb8])) [0 preprocess+0 S8 A64])
            (const_int 76 [0x4c]))
        (nil)))
(insn 1128 1127 1764 66 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:267 D.6205 ] [267])
                (const_int 16 [0x10])) [0 _297->bc+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:279 90 {*movsi_internal}
     (nil))
(jump_insn 1764 1128 1765 66 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1765 1764 1131)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 268 269 270 271 272 708 709
(code_label 1131 1765 1132 67 37 "" [1 uses])
(note 1132 1131 1133 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 1133 1132 1134 67 (set (reg:SI 0 ax [708])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:321 90 {*movsi_internal}
     (nil))
(insn 1134 1133 1135 67 (set (reg:DI 0 ax [orig:268 D.6204 ] [268])
        (sign_extend:DI (reg:SI 0 ax [708]))) sim2fitman_com_line.cpp:321 142 {*extendsidi2_rex64}
     (nil))
(insn 1135 1134 1136 67 (parallel [
            (set (reg:DI 1 dx [orig:269 D.6204 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:268 D.6204 ] [268])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:321 512 {*ashldi3_1}
     (nil))
(insn 1136 1135 1137 67 (set (reg/f:DI 0 ax [709])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:321 89 {*movdi_internal}
     (nil))
(insn 1137 1136 1138 67 (parallel [
            (set (reg/f:DI 0 ax [orig:270 D.6206 ] [270])
                (plus:DI (reg/f:DI 0 ax [709])
                    (reg:DI 1 dx [orig:269 D.6204 ] [269])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:321 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:269 D.6204 ] [269]))
        (nil)))
(insn 1138 1137 1139 67 (set (reg/f:DI 0 ax [orig:271 D.6207 ] [271])
        (mem/f:DI (reg/f:DI 0 ax [orig:270 D.6206 ] [270]) [0 *_301+0 S8 A64])) sim2fitman_com_line.cpp:321 89 {*movdi_internal}
     (nil))
(insn 1139 1138 1140 67 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f9683f0f000 *.LC18>)) sim2fitman_com_line.cpp:321 89 {*movdi_internal}
     (nil))
(insn 1140 1139 1141 67 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:271 D.6207 ] [271])) sim2fitman_com_line.cpp:321 89 {*movdi_internal}
     (nil))
(call_insn/i 1141 1140 1142 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:321 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1142 1141 1143 67 (set (reg:SI 0 ax [orig:272 D.6203 ] [272])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:321 90 {*movsi_internal}
     (nil))
(insn 1143 1142 1144 67 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:272 D.6203 ] [272])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:321 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1144 1143 1145 67 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1161)
            (pc))) sim2fitman_com_line.cpp:321 612 {*jcc_1}
     (nil)
 -> 1161)
;;  succ:       68 (FALLTHRU)
;;              71
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 273 710
(note 1145 1144 1146 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 1146 1145 1147 68 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:323 93 {*movqi_internal}
     (nil))
(insn 1147 1146 1148 68 (set (reg/f:DI 0 ax [710])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:324 89 {*movdi_internal}
     (nil))
(insn 1148 1147 1149 68 (set (reg:SI 0 ax [orig:273 D.6203 ] [273])
        (mem:SI (reg/f:DI 0 ax [710]) [0 *forced_swap_305(D)+0 S4 A32])) sim2fitman_com_line.cpp:324 90 {*movsi_internal}
     (nil))
(insn 1149 1148 1150 68 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:273 D.6203 ] [273])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:324 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1150 1149 1151 68 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1155)
            (pc))) sim2fitman_com_line.cpp:324 612 {*jcc_1}
     (nil)
 -> 1155)
;;  succ:       69 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1151 1150 1152 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 1152 1151 1766 69 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -10 [0xfffffffffffffff6])) sim2fitman_com_line.cpp:326 90 {*movsi_internal}
     (nil))
(jump_insn 1766 1152 1767 69 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:326 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1767 1766 1155)
;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 711
(code_label 1155 1767 1156 70 39 "" [1 uses])
(note 1156 1155 1157 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 1157 1156 1158 70 (set (reg/f:DI 0 ax [711])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:328 89 {*movdi_internal}
     (nil))
(insn 1158 1157 1768 70 (set (mem:SI (reg/f:DI 0 ax [711]) [0 *forced_swap_305(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:328 90 {*movsi_internal}
     (nil))
(jump_insn 1768 1158 1769 70 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1769 1768 1161)
;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 274 275 276 277 278 712 713
(code_label 1161 1769 1162 71 38 "" [1 uses])
(note 1162 1161 1163 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 1163 1162 1164 71 (set (reg:SI 0 ax [712])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:332 90 {*movsi_internal}
     (nil))
(insn 1164 1163 1165 71 (set (reg:DI 0 ax [orig:274 D.6204 ] [274])
        (sign_extend:DI (reg:SI 0 ax [712]))) sim2fitman_com_line.cpp:332 142 {*extendsidi2_rex64}
     (nil))
(insn 1165 1164 1166 71 (parallel [
            (set (reg:DI 1 dx [orig:275 D.6204 ] [275])
                (ashift:DI (reg:DI 0 ax [orig:274 D.6204 ] [274])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:332 512 {*ashldi3_1}
     (nil))
(insn 1166 1165 1167 71 (set (reg/f:DI 0 ax [713])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:332 89 {*movdi_internal}
     (nil))
(insn 1167 1166 1168 71 (parallel [
            (set (reg/f:DI 0 ax [orig:276 D.6206 ] [276])
                (plus:DI (reg/f:DI 0 ax [713])
                    (reg:DI 1 dx [orig:275 D.6204 ] [275])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:332 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:275 D.6204 ] [275]))
        (nil)))
(insn 1168 1167 1169 71 (set (reg/f:DI 0 ax [orig:277 D.6207 ] [277])
        (mem/f:DI (reg/f:DI 0 ax [orig:276 D.6206 ] [276]) [0 *_311+0 S8 A64])) sim2fitman_com_line.cpp:332 89 {*movdi_internal}
     (nil))
(insn 1169 1168 1170 71 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f9683f0f090 *.LC19>)) sim2fitman_com_line.cpp:332 89 {*movdi_internal}
     (nil))
(insn 1170 1169 1171 71 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:277 D.6207 ] [277])) sim2fitman_com_line.cpp:332 89 {*movdi_internal}
     (nil))
(call_insn/i 1171 1170 1172 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:332 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1172 1171 1173 71 (set (reg:SI 0 ax [orig:278 D.6203 ] [278])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:332 90 {*movsi_internal}
     (nil))
(insn 1173 1172 1174 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:278 D.6203 ] [278])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:332 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1174 1173 1175 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1193)
            (pc))) sim2fitman_com_line.cpp:332 612 {*jcc_1}
     (nil)
 -> 1193)
;;  succ:       72 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 279 280 714
(note 1175 1174 1176 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 1176 1175 1177 72 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:334 93 {*movqi_internal}
     (nil))
(insn 1177 1176 1178 72 (set (reg/f:DI 0 ax [714])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:335 89 {*movdi_internal}
     (nil))
(insn 1178 1177 1179 72 (parallel [
            (set (reg/f:DI 0 ax [orig:279 D.6211 ] [279])
                (plus:DI (reg/f:DI 0 ax [714])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:335 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -896 [0xfffffffffffffc80])) [0 forced_swap+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 1179 1178 1180 72 (set (reg:SI 0 ax [orig:280 D.6203 ] [280])
        (mem:SI (reg/f:DI 0 ax [orig:279 D.6211 ] [279]) [0 *_315+0 S4 A32])) sim2fitman_com_line.cpp:335 90 {*movsi_internal}
     (nil))
(insn 1180 1179 1181 72 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:280 D.6203 ] [280])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:335 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1181 1180 1182 72 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1186)
            (pc))) sim2fitman_com_line.cpp:335 612 {*jcc_1}
     (nil)
 -> 1186)
;;  succ:       73 (FALLTHRU)
;;              74
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1182 1181 1183 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1183 1182 1770 73 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -10 [0xfffffffffffffff6])) sim2fitman_com_line.cpp:337 90 {*movsi_internal}
     (nil))
(jump_insn 1770 1183 1771 73 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:337 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1771 1770 1186)
;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 281 715
(code_label 1186 1771 1187 74 41 "" [1 uses])
(note 1187 1186 1188 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 1188 1187 1189 74 (set (reg/f:DI 0 ax [715])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:339 89 {*movdi_internal}
     (nil))
(insn 1189 1188 1190 74 (parallel [
            (set (reg/f:DI 0 ax [orig:281 D.6211 ] [281])
                (plus:DI (reg/f:DI 0 ax [715])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:339 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -896 [0xfffffffffffffc80])) [0 forced_swap+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 1190 1189 1772 74 (set (mem:SI (reg/f:DI 0 ax [orig:281 D.6211 ] [281]) [0 *_317+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:339 90 {*movsi_internal}
     (nil))
(jump_insn 1772 1190 1773 74 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1773 1772 1193)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 282 283 284 285 286 716 717
(code_label 1193 1773 1194 75 40 "" [1 uses])
(note 1194 1193 1195 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 1195 1194 1196 75 (set (reg:SI 0 ax [716])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:343 90 {*movsi_internal}
     (nil))
(insn 1196 1195 1197 75 (set (reg:DI 0 ax [orig:282 D.6204 ] [282])
        (sign_extend:DI (reg:SI 0 ax [716]))) sim2fitman_com_line.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 1197 1196 1198 75 (parallel [
            (set (reg:DI 1 dx [orig:283 D.6204 ] [283])
                (ashift:DI (reg:DI 0 ax [orig:282 D.6204 ] [282])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:343 512 {*ashldi3_1}
     (nil))
(insn 1198 1197 1199 75 (set (reg/f:DI 0 ax [717])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:343 89 {*movdi_internal}
     (nil))
(insn 1199 1198 1200 75 (parallel [
            (set (reg/f:DI 0 ax [orig:284 D.6206 ] [284])
                (plus:DI (reg/f:DI 0 ax [717])
                    (reg:DI 1 dx [orig:283 D.6204 ] [283])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:343 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:283 D.6204 ] [283]))
        (nil)))
(insn 1200 1199 1201 75 (set (reg/f:DI 0 ax [orig:285 D.6207 ] [285])
        (mem/f:DI (reg/f:DI 0 ax [orig:284 D.6206 ] [284]) [0 *_322+0 S8 A64])) sim2fitman_com_line.cpp:343 89 {*movdi_internal}
     (nil))
(insn 1201 1200 1202 75 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f9683f0f120 *.LC20>)) sim2fitman_com_line.cpp:343 89 {*movdi_internal}
     (nil))
(insn 1202 1201 1203 75 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:285 D.6207 ] [285])) sim2fitman_com_line.cpp:343 89 {*movdi_internal}
     (nil))
(call_insn/i 1203 1202 1204 75 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:343 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1204 1203 1205 75 (set (reg:SI 0 ax [orig:286 D.6203 ] [286])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:343 90 {*movsi_internal}
     (nil))
(insn 1205 1204 1206 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:286 D.6203 ] [286])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:343 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1206 1205 1207 75 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1223)
            (pc))) sim2fitman_com_line.cpp:343 612 {*jcc_1}
     (nil)
 -> 1223)
;;  succ:       76 (FALLTHRU)
;;              79
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 287 718
(note 1207 1206 1208 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 1208 1207 1209 76 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:345 93 {*movqi_internal}
     (nil))
(insn 1209 1208 1210 76 (set (reg/f:DI 0 ax [718])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:346 89 {*movdi_internal}
     (nil))
(insn 1210 1209 1211 76 (set (reg:SI 0 ax [orig:287 D.6203 ] [287])
        (mem:SI (reg/f:DI 0 ax [718]) [0 *forced_swap_305(D)+0 S4 A32])) sim2fitman_com_line.cpp:346 90 {*movsi_internal}
     (nil))
(insn 1211 1210 1212 76 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:287 D.6203 ] [287])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:346 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1212 1211 1213 76 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1217)
            (pc))) sim2fitman_com_line.cpp:346 612 {*jcc_1}
     (nil)
 -> 1217)
;;  succ:       77 (FALLTHRU)
;;              78
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1213 1212 1214 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1214 1213 1774 77 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -10 [0xfffffffffffffff6])) sim2fitman_com_line.cpp:348 90 {*movsi_internal}
     (nil))
(jump_insn 1774 1214 1775 77 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:348 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1775 1774 1217)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 719
(code_label 1217 1775 1218 78 43 "" [1 uses])
(note 1218 1217 1219 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 1219 1218 1220 78 (set (reg/f:DI 0 ax [719])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:350 89 {*movdi_internal}
     (nil))
(insn 1220 1219 1776 78 (set (mem:SI (reg/f:DI 0 ax [719]) [0 *forced_swap_305(D)+0 S4 A32])
        (const_int 2 [0x2])) sim2fitman_com_line.cpp:350 90 {*movsi_internal}
     (nil))
(jump_insn 1776 1220 1777 78 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1777 1776 1223)
;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 288 289 290 291 292 720 721
(code_label 1223 1777 1224 79 42 "" [1 uses])
(note 1224 1223 1225 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 1225 1224 1226 79 (set (reg:SI 0 ax [720])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:354 90 {*movsi_internal}
     (nil))
(insn 1226 1225 1227 79 (set (reg:DI 0 ax [orig:288 D.6204 ] [288])
        (sign_extend:DI (reg:SI 0 ax [720]))) sim2fitman_com_line.cpp:354 142 {*extendsidi2_rex64}
     (nil))
(insn 1227 1226 1228 79 (parallel [
            (set (reg:DI 1 dx [orig:289 D.6204 ] [289])
                (ashift:DI (reg:DI 0 ax [orig:288 D.6204 ] [288])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:354 512 {*ashldi3_1}
     (nil))
(insn 1228 1227 1229 79 (set (reg/f:DI 0 ax [721])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:354 89 {*movdi_internal}
     (nil))
(insn 1229 1228 1230 79 (parallel [
            (set (reg/f:DI 0 ax [orig:290 D.6206 ] [290])
                (plus:DI (reg/f:DI 0 ax [721])
                    (reg:DI 1 dx [orig:289 D.6204 ] [289])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:354 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:289 D.6204 ] [289]))
        (nil)))
(insn 1230 1229 1231 79 (set (reg/f:DI 0 ax [orig:291 D.6207 ] [291])
        (mem/f:DI (reg/f:DI 0 ax [orig:290 D.6206 ] [290]) [0 *_331+0 S8 A64])) sim2fitman_com_line.cpp:354 89 {*movdi_internal}
     (nil))
(insn 1231 1230 1232 79 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f9683f0f1b0 *.LC21>)) sim2fitman_com_line.cpp:354 89 {*movdi_internal}
     (nil))
(insn 1232 1231 1233 79 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:291 D.6207 ] [291])) sim2fitman_com_line.cpp:354 89 {*movdi_internal}
     (nil))
(call_insn/i 1233 1232 1234 79 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:354 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1234 1233 1235 79 (set (reg:SI 0 ax [orig:292 D.6203 ] [292])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:354 90 {*movsi_internal}
     (nil))
(insn 1235 1234 1236 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:292 D.6203 ] [292])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:354 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1236 1235 1237 79 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1255)
            (pc))) sim2fitman_com_line.cpp:354 612 {*jcc_1}
     (nil)
 -> 1255)
;;  succ:       80 (FALLTHRU)
;;              83
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 293 294 722
(note 1237 1236 1238 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 1238 1237 1239 80 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:356 93 {*movqi_internal}
     (nil))
(insn 1239 1238 1240 80 (set (reg/f:DI 0 ax [722])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:357 89 {*movdi_internal}
     (nil))
(insn 1240 1239 1241 80 (parallel [
            (set (reg/f:DI 0 ax [orig:293 D.6211 ] [293])
                (plus:DI (reg/f:DI 0 ax [722])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:357 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -896 [0xfffffffffffffc80])) [0 forced_swap+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 1241 1240 1242 80 (set (reg:SI 0 ax [orig:294 D.6203 ] [294])
        (mem:SI (reg/f:DI 0 ax [orig:293 D.6211 ] [293]) [0 *_335+0 S4 A32])) sim2fitman_com_line.cpp:357 90 {*movsi_internal}
     (nil))
(insn 1242 1241 1243 80 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:294 D.6203 ] [294])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:357 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1243 1242 1244 80 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 1248)
            (pc))) sim2fitman_com_line.cpp:357 612 {*jcc_1}
     (nil)
 -> 1248)
;;  succ:       81 (FALLTHRU)
;;              82
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1244 1243 1245 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 1245 1244 1778 81 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -10 [0xfffffffffffffff6])) sim2fitman_com_line.cpp:359 90 {*movsi_internal}
     (nil))
(jump_insn 1778 1245 1779 81 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:359 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1779 1778 1248)
;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 295 723
(code_label 1248 1779 1249 82 45 "" [1 uses])
(note 1249 1248 1250 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 1250 1249 1251 82 (set (reg/f:DI 0 ax [723])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -912 [0xfffffffffffffc70])) [0 forced_swap+0 S8 A64])) sim2fitman_com_line.cpp:361 89 {*movdi_internal}
     (nil))
(insn 1251 1250 1252 82 (parallel [
            (set (reg/f:DI 0 ax [orig:295 D.6211 ] [295])
                (plus:DI (reg/f:DI 0 ax [723])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:361 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -896 [0xfffffffffffffc80])) [0 forced_swap+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 1252 1251 1780 82 (set (mem:SI (reg/f:DI 0 ax [orig:295 D.6211 ] [295]) [0 *_337+0 S4 A32])
        (const_int 2 [0x2])) sim2fitman_com_line.cpp:361 90 {*movsi_internal}
     (nil))
(jump_insn 1780 1252 1781 82 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1781 1780 1255)
;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       79
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 296 297 298 299 300 724 725
(code_label 1255 1781 1256 83 44 "" [1 uses])
(note 1256 1255 1257 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 1257 1256 1258 83 (set (reg:SI 0 ax [724])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:365 90 {*movsi_internal}
     (nil))
(insn 1258 1257 1259 83 (set (reg:DI 0 ax [orig:296 D.6204 ] [296])
        (sign_extend:DI (reg:SI 0 ax [724]))) sim2fitman_com_line.cpp:365 142 {*extendsidi2_rex64}
     (nil))
(insn 1259 1258 1260 83 (parallel [
            (set (reg:DI 1 dx [orig:297 D.6204 ] [297])
                (ashift:DI (reg:DI 0 ax [orig:296 D.6204 ] [296])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:365 512 {*ashldi3_1}
     (nil))
(insn 1260 1259 1261 83 (set (reg/f:DI 0 ax [725])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:365 89 {*movdi_internal}
     (nil))
(insn 1261 1260 1262 83 (parallel [
            (set (reg/f:DI 0 ax [orig:298 D.6206 ] [298])
                (plus:DI (reg/f:DI 0 ax [725])
                    (reg:DI 1 dx [orig:297 D.6204 ] [297])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:365 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:297 D.6204 ] [297]))
        (nil)))
(insn 1262 1261 1263 83 (set (reg/f:DI 0 ax [orig:299 D.6207 ] [299])
        (mem/f:DI (reg/f:DI 0 ax [orig:298 D.6206 ] [298]) [0 *_342+0 S8 A64])) sim2fitman_com_line.cpp:365 89 {*movdi_internal}
     (nil))
(insn 1263 1262 1264 83 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f9683f0f240 *.LC22>)) sim2fitman_com_line.cpp:365 89 {*movdi_internal}
     (nil))
(insn 1264 1263 1265 83 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:299 D.6207 ] [299])) sim2fitman_com_line.cpp:365 89 {*movdi_internal}
     (nil))
(call_insn/i 1265 1264 1266 83 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:365 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1266 1265 1267 83 (set (reg:SI 0 ax [orig:300 D.6203 ] [300])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:365 90 {*movsi_internal}
     (nil))
(insn 1267 1266 1268 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:300 D.6203 ] [300])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:365 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1268 1267 1269 83 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1274)
            (pc))) sim2fitman_com_line.cpp:365 612 {*jcc_1}
     (nil)
 -> 1274)
;;  succ:       84 (FALLTHRU)
;;              85
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83 (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 726
(note 1269 1268 1270 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 1270 1269 1271 84 (set (reg/f:DI 0 ax [726])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -920 [0xfffffffffffffc68])) [0 overwrite+0 S8 A64])) sim2fitman_com_line.cpp:366 89 {*movdi_internal}
     (nil))
(insn 1271 1270 1782 84 (set (mem:QI (reg/f:DI 0 ax [726]) [0 *overwrite_345(D)+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:366 93 {*movqi_internal}
     (nil))
(jump_insn 1782 1271 1783 84 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1783 1782 1274)
;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 301 302 303 304 305 727 728
(code_label 1274 1783 1275 85 46 "" [1 uses])
(note 1275 1274 1276 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 1276 1275 1277 85 (set (reg:SI 0 ax [727])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:369 90 {*movsi_internal}
     (nil))
(insn 1277 1276 1278 85 (set (reg:DI 0 ax [orig:301 D.6204 ] [301])
        (sign_extend:DI (reg:SI 0 ax [727]))) sim2fitman_com_line.cpp:369 142 {*extendsidi2_rex64}
     (nil))
(insn 1278 1277 1279 85 (parallel [
            (set (reg:DI 1 dx [orig:302 D.6204 ] [302])
                (ashift:DI (reg:DI 0 ax [orig:301 D.6204 ] [301])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:369 512 {*ashldi3_1}
     (nil))
(insn 1279 1278 1280 85 (set (reg/f:DI 0 ax [728])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:369 89 {*movdi_internal}
     (nil))
(insn 1280 1279 1281 85 (parallel [
            (set (reg/f:DI 0 ax [orig:303 D.6206 ] [303])
                (plus:DI (reg/f:DI 0 ax [728])
                    (reg:DI 1 dx [orig:302 D.6204 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:369 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:302 D.6204 ] [302]))
        (nil)))
(insn 1281 1280 1282 85 (set (reg/f:DI 0 ax [orig:304 D.6207 ] [304])
        (mem/f:DI (reg/f:DI 0 ax [orig:303 D.6206 ] [303]) [0 *_349+0 S8 A64])) sim2fitman_com_line.cpp:369 89 {*movdi_internal}
     (nil))
(insn 1282 1281 1283 85 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f9683f0f2d0 *.LC23>)) sim2fitman_com_line.cpp:369 89 {*movdi_internal}
     (nil))
(insn 1283 1282 1284 85 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:304 D.6207 ] [304])) sim2fitman_com_line.cpp:369 89 {*movdi_internal}
     (nil))
(call_insn/i 1284 1283 1285 85 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:369 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1285 1284 1286 85 (set (reg:SI 0 ax [orig:305 D.6203 ] [305])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:369 90 {*movsi_internal}
     (nil))
(insn 1286 1285 1287 85 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:305 D.6203 ] [305])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:369 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1287 1286 1288 85 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1293)
            (pc))) sim2fitman_com_line.cpp:369 612 {*jcc_1}
     (nil)
 -> 1293)
;;  succ:       86 (FALLTHRU)
;;              87
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85 (FALLTHRU)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 729
(note 1288 1287 1289 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 1289 1288 1290 86 (set (reg/f:DI 0 ax [729])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -928 [0xfffffffffffffc60])) [0 verbose+0 S8 A64])) sim2fitman_com_line.cpp:370 89 {*movdi_internal}
     (nil))
(insn 1290 1289 1784 86 (set (mem:QI (reg/f:DI 0 ax [729]) [0 *verbose_352(D)+0 S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:370 93 {*movqi_internal}
     (nil))
(jump_insn 1784 1290 1785 86 (set (pc)
        (label_ref 1320)) 654 {jump}
     (nil)
 -> 1320)
;;  succ:       90 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1785 1784 1293)
;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       85
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 306 307 308 309 310 730 731
(code_label 1293 1785 1294 87 47 "" [1 uses])
(note 1294 1293 1295 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 1295 1294 1296 87 (set (reg:SI 0 ax [730])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:373 90 {*movsi_internal}
     (nil))
(insn 1296 1295 1297 87 (set (reg:DI 0 ax [orig:306 D.6204 ] [306])
        (sign_extend:DI (reg:SI 0 ax [730]))) sim2fitman_com_line.cpp:373 142 {*extendsidi2_rex64}
     (nil))
(insn 1297 1296 1298 87 (parallel [
            (set (reg:DI 1 dx [orig:307 D.6204 ] [307])
                (ashift:DI (reg:DI 0 ax [orig:306 D.6204 ] [306])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:373 512 {*ashldi3_1}
     (nil))
(insn 1298 1297 1299 87 (set (reg/f:DI 0 ax [731])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -888 [0xfffffffffffffc88])) [0 argv+0 S8 A64])) sim2fitman_com_line.cpp:373 89 {*movdi_internal}
     (nil))
(insn 1299 1298 1300 87 (parallel [
            (set (reg/f:DI 0 ax [orig:308 D.6206 ] [308])
                (plus:DI (reg/f:DI 0 ax [731])
                    (reg:DI 1 dx [orig:307 D.6204 ] [307])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:373 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -872 [0xfffffffffffffc98])) [0 argv+0 S8 A64])
            (reg:DI 1 dx [orig:307 D.6204 ] [307]))
        (nil)))
(insn 1300 1299 1301 87 (set (reg/f:DI 0 ax [orig:309 D.6207 ] [309])
        (mem/f:DI (reg/f:DI 0 ax [orig:308 D.6206 ] [308]) [0 *_356+0 S8 A64])) sim2fitman_com_line.cpp:373 89 {*movdi_internal}
     (nil))
(insn 1301 1300 1302 87 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f9683f0f360 *.LC24>)) sim2fitman_com_line.cpp:373 89 {*movdi_internal}
     (nil))
(insn 1302 1301 1303 87 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:309 D.6207 ] [309])) sim2fitman_com_line.cpp:373 89 {*movdi_internal}
     (nil))
(call_insn/i 1303 1302 1304 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:373 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1304 1303 1305 87 (set (reg:SI 0 ax [orig:310 D.6203 ] [310])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:373 90 {*movsi_internal}
     (nil))
(insn 1305 1304 1306 87 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:310 D.6203 ] [310])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:373 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1306 1305 1307 87 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1312)
            (pc))) sim2fitman_com_line.cpp:373 612 {*jcc_1}
     (nil)
 -> 1312)
;;  succ:       88 (FALLTHRU)
;;              89
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1307 1306 1308 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(call_insn 1308 1307 1309 88 (call (mem:QI (symbol_ref:DI ("_Z13print_versionv") [flags 0x41]  <function_decl 0x7f9684250e58 print_version>) [0 print_version S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:374 660 {*call}
     (nil)
    (nil))
(insn 1309 1308 1310 88 (set (reg:SI 5 di)
        (const_int 0 [0])) sim2fitman_com_line.cpp:375 90 {*movsi_internal}
     (nil))
(call_insn 1310 1309 1311 88 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7f9684373ca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:375 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1311 1310 1312)
;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       87
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 732 733
(code_label 1312 1311 1313 89 48 "" [1 uses])
(note 1313 1312 1314 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 1314 1313 1315 89 (set (reg/f:DI 0 ax [732])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -904 [0xfffffffffffffc78])) [0 arg_read+0 S8 A64])) sim2fitman_com_line.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1315 1314 1316 89 (set (reg:SI 1 dx [733])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])) sim2fitman_com_line.cpp:379 90 {*movsi_internal}
     (nil))
(insn 1316 1315 1317 89 (set (mem:SI (reg/f:DI 0 ax [732]) [0 *arg_read_359(D)+0 S4 A32])
        (reg:SI 1 dx [733])) sim2fitman_com_line.cpp:379 90 {*movsi_internal}
     (nil))
(insn 1317 1316 1786 89 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -2 [0xfffffffffffffffe])) sim2fitman_com_line.cpp:380 90 {*movsi_internal}
     (nil))
(jump_insn 1786 1317 1787 89 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:380 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1787 1786 1320)
;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 91, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              10 [100.0%] 
;;              27 [100.0%] 
;;              35 [100.0%] 
;;              39 [100.0%] 
;;              44 [100.0%] 
;;              50 [100.0%] 
;;              55 [100.0%] 
;;              58 [100.0%] 
;;              60 [100.0%] 
;;              62 [100.0%] 
;;              64 [100.0%] 
;;              66 [100.0%] 
;;              70 [100.0%] 
;;              74 [100.0%] 
;;              78 [100.0%] 
;;              82 [100.0%] 
;;              84 [100.0%] 
;;              86 [100.0%] 
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1320 1787 1321 90 8 "" [19 uses])
(note 1321 1320 1322 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 1322 1321 1788 90 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -820 [0xfffffffffffffccc])) [0 argc_counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:384 217 {*addsi_1}
     (nil))
(jump_insn 1788 1322 1789 90 (set (pc)
        (label_ref 1323)) sim2fitman_com_line.cpp:102 654 {jump}
     (nil)
 -> 1323)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1789 1788 1326)
;; basic block 91, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1326 1789 1327 91 4 "" [1 uses])
(note 1327 1326 1328 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 1328 1327 1329 91 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
            (const_int 3 [0x3]))) sim2fitman_com_line.cpp:391 7 {*cmpsi_1}
     (nil))
(jump_insn 1329 1328 1330 91 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1377)
            (pc))) sim2fitman_com_line.cpp:391 612 {*jcc_1}
     (nil)
 -> 1377)
;;  succ:       92 (FALLTHRU)
;;              101
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 92, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 91, next block 93, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91 (FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1330 1329 1331 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 1331 1330 1332 92 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -829 [0xfffffffffffffcc3])) [0 ir_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:393 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1332 1331 1333 92 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1336)
            (pc))) sim2fitman_com_line.cpp:393 612 {*jcc_1}
     (nil)
 -> 1336)
;;  succ:       94
;;              93 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 93, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 92, next block 94, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       92 (FALLTHRU)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1333 1332 1334 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 1334 1333 1335 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -828 [0xfffffffffffffcc4])) [0 irn_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:393 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1335 1334 1336 93 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1341)
            (pc))) sim2fitman_com_line.cpp:393 612 {*jcc_1}
     (nil)
 -> 1341)
;;  succ:       94 (FALLTHRU)
;;              95
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 94, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 93, next block 95, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       92
;;              93 (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 1336 1335 1337 94 51 "" [1 uses])
(note 1337 1336 1338 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 1338 1337 1790 94 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -12 [0xfffffffffffffff4])) sim2fitman_com_line.cpp:395 90 {*movsi_internal}
     (nil))
(jump_insn 1790 1338 1791 94 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:395 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1791 1790 1341)
;; basic block 95, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 94, next block 96, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 426 734
(code_label 1341 1791 1342 95 52 "" [1 uses])
(note 1342 1341 1343 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 1343 1342 1344 95 (set (reg:QI 0 ax [734])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -829 [0xfffffffffffffcc3])) [0 ir_set+0 S1 A8])) sim2fitman_com_line.cpp:396 93 {*movqi_internal}
     (nil))
(insn 1344 1343 1345 95 (parallel [
            (set (reg:QI 0 ax [orig:426 D.6209 ] [426])
                (xor:QI (reg:QI 0 ax [734])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:396 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1345 1344 1346 95 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:426 D.6209 ] [426])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:396 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1346 1345 1347 95 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1362)
            (pc))) sim2fitman_com_line.cpp:396 612 {*jcc_1}
     (nil)
 -> 1362)
;;  succ:       96 (FALLTHRU)
;;              99
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 95, next block 97, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       95 (FALLTHRU)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 427 735
(note 1347 1346 1348 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 1348 1347 1349 96 (set (reg:QI 0 ax [735])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -828 [0xfffffffffffffcc4])) [0 irn_set+0 S1 A8])) sim2fitman_com_line.cpp:396 93 {*movqi_internal}
     (nil))
(insn 1349 1348 1350 96 (parallel [
            (set (reg:QI 0 ax [orig:427 D.6209 ] [427])
                (xor:QI (reg:QI 0 ax [735])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:396 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1350 1349 1351 96 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:427 D.6209 ] [427])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:396 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1351 1350 1352 96 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1362)
            (pc))) sim2fitman_com_line.cpp:396 612 {*jcc_1}
     (nil)
 -> 1362)
;;  succ:       97 (FALLTHRU)
;;              99
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 97, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 96, next block 98, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       96 (FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 428 429 736
(note 1352 1351 1353 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 1353 1352 1354 97 (set (reg/f:DI 0 ax [736])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:396 89 {*movdi_internal}
     (nil))
(insn 1354 1353 1355 97 (set (reg:QI 0 ax [orig:428 D.6209 ] [428])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [736])
                (const_int 72 [0x48])) [0 preprocess_52(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:396 93 {*movqi_internal}
     (nil))
(insn 1355 1354 1356 97 (parallel [
            (set (reg:QI 0 ax [orig:429 D.6209 ] [429])
                (xor:QI (reg:QI 0 ax [orig:428 D.6209 ] [428])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:396 406 {*xorqi_1}
     (nil))
(insn 1356 1355 1357 97 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:429 D.6209 ] [429])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:396 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1357 1356 1358 97 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1362)
            (pc))) sim2fitman_com_line.cpp:396 612 {*jcc_1}
     (nil)
 -> 1362)
;;  succ:       98 (FALLTHRU)
;;              99
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 98, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 97, next block 99, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       97 (FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1358 1357 1359 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 1359 1358 1792 98 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -6 [0xfffffffffffffffa])) sim2fitman_com_line.cpp:398 90 {*movsi_internal}
     (nil))
(jump_insn 1792 1359 1793 98 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:398 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1793 1792 1362)
;; basic block 99, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 98, next block 100, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       95
;;              96
;;              97
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 430 737 738 739
(code_label 1362 1793 1363 99 53 "" [3 uses])
(note 1363 1362 1364 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 1364 1363 1365 99 (parallel [
            (set (reg:DI 0 ax [737])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:399 218 {*adddi_1}
     (nil))
(insn 1365 1364 1366 99 (parallel [
            (set (reg:DI 1 dx [738])
                (plus:DI (reg:DI 0 ax [737])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:399 218 {*adddi_1}
     (nil))
(insn 1366 1365 1367 99 (parallel [
            (set (reg:DI 0 ax [739])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:399 218 {*adddi_1}
     (nil))
(insn 1367 1366 1368 99 (set (reg:DI 4 si)
        (reg:DI 1 dx [738])) sim2fitman_com_line.cpp:399 89 {*movdi_internal}
     (nil))
(insn 1368 1367 1369 99 (set (reg:DI 5 di)
        (reg:DI 0 ax [739])) sim2fitman_com_line.cpp:399 89 {*movdi_internal}
     (nil))
(call_insn/i 1369 1368 1370 99 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:399 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1370 1369 1371 99 (set (reg:SI 0 ax [orig:430 D.6203 ] [430])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:399 90 {*movsi_internal}
     (nil))
(insn 1371 1370 1372 99 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:430 D.6203 ] [430])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:399 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1372 1371 1373 99 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1537)
            (pc))) sim2fitman_com_line.cpp:399 612 {*jcc_1}
     (nil)
 -> 1537)
;;  succ:       100 (FALLTHRU)
;;              134
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 100, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 99, next block 101, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       99 (FALLTHRU)
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1373 1372 1374 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 1374 1373 1794 100 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -17 [0xffffffffffffffef])) sim2fitman_com_line.cpp:401 90 {*movsi_internal}
     (nil))
(jump_insn 1794 1374 1795 100 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:401 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1795 1794 1377)
;; basic block 101, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 100, next block 102, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1377 1795 1378 101 50 "" [1 uses])
(note 1378 1377 1379 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 1379 1378 1380 101 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_com_line.cpp:407 7 {*cmpsi_1}
     (nil))
(jump_insn 1380 1379 1381 101 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1491)
            (pc))) sim2fitman_com_line.cpp:407 612 {*jcc_1}
     (nil)
 -> 1491)
;;  succ:       102 (FALLTHRU)
;;              124
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 102, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 101, next block 103, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       101 (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 431 740
(note 1381 1380 1382 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 1382 1381 1383 102 (set (reg:QI 0 ax [740])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -829 [0xfffffffffffffcc3])) [0 ir_set+0 S1 A8])) sim2fitman_com_line.cpp:409 93 {*movqi_internal}
     (nil))
(insn 1383 1382 1384 102 (parallel [
            (set (reg:QI 0 ax [orig:431 D.6209 ] [431])
                (xor:QI (reg:QI 0 ax [740])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:409 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1384 1383 1385 102 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:431 D.6209 ] [431])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:409 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1385 1384 1386 102 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1449)
            (pc))) sim2fitman_com_line.cpp:409 612 {*jcc_1}
     (nil)
 -> 1449)
;;  succ:       103 (FALLTHRU)
;;              116
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 103, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 102, next block 104, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102 (FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 432 741
(note 1386 1385 1387 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 1387 1386 1388 103 (set (reg:QI 0 ax [741])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -828 [0xfffffffffffffcc4])) [0 irn_set+0 S1 A8])) sim2fitman_com_line.cpp:409 93 {*movqi_internal}
     (nil))
(insn 1388 1387 1389 103 (parallel [
            (set (reg:QI 0 ax [orig:432 D.6209 ] [432])
                (xor:QI (reg:QI 0 ax [741])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:409 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1389 1388 1390 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:432 D.6209 ] [432])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:409 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1390 1389 1391 103 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1449)
            (pc))) sim2fitman_com_line.cpp:409 612 {*jcc_1}
     (nil)
 -> 1449)
;;  succ:       104 (FALLTHRU)
;;              116
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 104, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 103, next block 105, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103 (FALLTHRU)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 433 434 742
(note 1391 1390 1392 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 1392 1391 1393 104 (set (reg/f:DI 0 ax [742])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:409 89 {*movdi_internal}
     (nil))
(insn 1393 1392 1394 104 (set (reg:QI 0 ax [orig:433 D.6209 ] [433])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [742])
                (const_int 72 [0x48])) [0 preprocess_52(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:409 93 {*movqi_internal}
     (nil))
(insn 1394 1393 1395 104 (parallel [
            (set (reg:QI 0 ax [orig:434 D.6209 ] [434])
                (xor:QI (reg:QI 0 ax [orig:433 D.6209 ] [433])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:409 406 {*xorqi_1}
     (nil))
(insn 1395 1394 1396 104 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:434 D.6209 ] [434])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:409 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1396 1395 1397 104 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1449)
            (pc))) sim2fitman_com_line.cpp:409 612 {*jcc_1}
     (nil)
 -> 1449)
;;  succ:       105 (FALLTHRU)
;;              116
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 105, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 104, next block 106, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       104 (FALLTHRU)
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 435 743 744
(note 1397 1396 1398 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 1398 1397 1399 105 (set (reg/f:DI 0 ax [743])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -896 [0xfffffffffffffc80])) [0 fid+0 S8 A64])) sim2fitman_com_line.cpp:411 89 {*movdi_internal}
     (nil))
(insn 1399 1398 1400 105 (set (mem:SI (reg/f:DI 0 ax [743]) [0 *fid_129(D)+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:411 90 {*movsi_internal}
     (nil))
(insn 1400 1399 1401 105 (set (reg:QI 0 ax [744])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])) sim2fitman_com_line.cpp:412 93 {*movqi_internal}
     (nil))
(insn 1401 1400 1402 105 (parallel [
            (set (reg:QI 0 ax [orig:435 D.6209 ] [435])
                (xor:QI (reg:QI 0 ax [744])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:412 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -817 [0xfffffffffffffccf])) [0 ioption_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1402 1401 1403 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:435 D.6209 ] [435])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:412 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1403 1402 1404 105 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1413)
            (pc))) sim2fitman_com_line.cpp:412 612 {*jcc_1}
     (nil)
 -> 1413)
;;  succ:       106 (FALLTHRU)
;;              108
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 106, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105 (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1404 1403 1405 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 1405 1404 1406 106 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:412 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1406 1405 1407 106 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1413)
            (pc))) sim2fitman_com_line.cpp:412 612 {*jcc_1}
     (nil)
 -> 1413)
;;  succ:       107 (FALLTHRU)
;;              108
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 107, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 106, next block 108, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       106 (FALLTHRU)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1407 1406 1408 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 1408 1407 1409 107 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -830 [0xfffffffffffffcc2])) [0 only_unsuppressed+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:414 93 {*movqi_internal}
     (nil))
(insn 1409 1408 1410 107 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f9683f0f3f0 *.LC25>)) sim2fitman_com_line.cpp:415 89 {*movdi_internal}
     (nil))
(call_insn 1410 1409 1796 107 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f9684358000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:415 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1796 1410 1797 107 (set (pc)
        (label_ref 1445)) sim2fitman_com_line.cpp:415 654 {jump}
     (nil)
 -> 1445)
;;  succ:       115 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1797 1796 1413)
;; basic block 108, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 107, next block 109, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105
;;              106
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1413 1797 1414 108 57 "" [2 uses])
(note 1414 1413 1415 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(insn 1415 1414 1416 108 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -833 [0xfffffffffffffcbf])) [0 ioption_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:416 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1416 1415 1417 108 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1428)
            (pc))) sim2fitman_com_line.cpp:416 612 {*jcc_1}
     (nil)
 -> 1428)
;;  succ:       109 (FALLTHRU)
;;              111
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 109, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 108, next block 110, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       108 (FALLTHRU)
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 436 745
(note 1417 1416 1418 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn 1418 1417 1419 109 (set (reg:QI 0 ax [745])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -832 [0xfffffffffffffcc0])) [0 roption_set+0 S1 A8])) sim2fitman_com_line.cpp:416 93 {*movqi_internal}
     (nil))
(insn 1419 1418 1420 109 (parallel [
            (set (reg:QI 0 ax [orig:436 D.6209 ] [436])
                (xor:QI (reg:QI 0 ax [745])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:416 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -816 [0xfffffffffffffcd0])) [0 roption_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1420 1419 1421 109 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:436 D.6209 ] [436])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:416 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1421 1420 1422 109 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1428)
            (pc))) sim2fitman_com_line.cpp:416 612 {*jcc_1}
     (nil)
 -> 1428)
;;  succ:       110 (FALLTHRU)
;;              111
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 110, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 109, next block 111, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       109 (FALLTHRU)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1422 1421 1423 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(insn 1423 1422 1424 110 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -831 [0xfffffffffffffcc1])) [0 only_suppressed+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:418 93 {*movqi_internal}
     (nil))
(insn 1424 1423 1425 110 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f9683f0f480 *.LC26>)) sim2fitman_com_line.cpp:419 89 {*movdi_internal}
     (nil))
(call_insn 1425 1424 1798 110 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f9684358000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:419 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1798 1425 1799 110 (set (pc)
        (label_ref 1445)) sim2fitman_com_line.cpp:419 654 {jump}
     (nil)
 -> 1445)
;;  succ:       115 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1799 1798 1428)
;; basic block 111, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 110, next block 112, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       108
;;              109
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 437
(code_label 1428 1799 1429 111 59 "" [2 uses])
(note 1429 1428 1430 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(call_insn 1430 1429 1431 111 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z12cond_exit_23v") [flags 0x41]  <function_decl 0x7f968425b510 cond_exit_23>) [0 cond_exit_23 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:422 669 {*call_value}
     (nil)
    (nil))
(insn 1431 1430 1432 111 (set (reg:SI 0 ax [orig:437 D.6203 ] [437])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:422 90 {*movsi_internal}
     (nil))
(insn 1432 1431 1433 111 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -812 [0xfffffffffffffcd4])) [0 s_u_out+0 S4 A32])
        (reg:SI 0 ax [orig:437 D.6203 ] [437])) sim2fitman_com_line.cpp:422 90 {*movsi_internal}
     (nil))
(insn 1433 1432 1434 111 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -812 [0xfffffffffffffcd4])) [0 s_u_out+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_com_line.cpp:423 7 {*cmpsi_1}
     (nil))
(jump_insn 1434 1433 1435 111 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1439)
            (pc))) sim2fitman_com_line.cpp:423 612 {*jcc_1}
     (nil)
 -> 1439)
;;  succ:       112 (FALLTHRU)
;;              113
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 112, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 111, next block 113, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       111 (FALLTHRU)
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1435 1434 1436 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(insn 1436 1435 1800 112 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -831 [0xfffffffffffffcc1])) [0 only_suppressed+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:424 93 {*movqi_internal}
     (nil))
(jump_insn 1800 1436 1801 112 (set (pc)
        (label_ref:DI 1827)) sim2fitman_com_line.cpp:412 654 {jump}
     (nil)
 -> 1827)
;;  succ:       152 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1801 1800 1439)
;; basic block 113, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 112, next block 114, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       111
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1439 1801 1440 113 60 "" [1 uses])
(note 1440 1439 1441 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn 1441 1440 1442 113 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -812 [0xfffffffffffffcd4])) [0 s_u_out+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_com_line.cpp:425 7 {*cmpsi_1}
     (nil))
(jump_insn 1442 1441 1443 113 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1827)
            (pc))) sim2fitman_com_line.cpp:425 612 {*jcc_1}
     (nil)
 -> 1827)
;;  succ:       114 (FALLTHRU)
;;              152
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 114, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 113, next block 115, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       113 (FALLTHRU)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 1443 1442 1444 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(insn 1444 1443 1802 114 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -830 [0xfffffffffffffcc2])) [0 only_unsuppressed+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:426 93 {*movqi_internal}
     (nil))
(jump_insn 1802 1444 1803 114 (set (pc)
        (label_ref:DI 1827)) sim2fitman_com_line.cpp:412 654 {jump}
     (nil)
 -> 1827)
;;  succ:       152 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1803 1802 1445)
;; basic block 115, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 114, next block 116, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       107 [100.0%] 
;;              110 [100.0%] 
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1445 1803 1446 115 58 "" [2 uses])
(note 1446 1445 1804 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(jump_insn 1804 1446 1805 115 (set (pc)
        (label_ref:DI 1827)) sim2fitman_com_line.cpp:412 654 {jump}
     (nil)
 -> 1827)
;;  succ:       152 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1805 1804 1449)
;; basic block 116, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 115, next block 117, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102
;;              103
;;              104
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 438 746
(code_label 1449 1805 1450 116 56 "" [3 uses])
(note 1450 1449 1451 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn 1451 1450 1452 116 (set (reg:QI 0 ax [746])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -829 [0xfffffffffffffcc3])) [0 ir_set+0 S1 A8])) sim2fitman_com_line.cpp:432 93 {*movqi_internal}
     (nil))
(insn 1452 1451 1453 116 (parallel [
            (set (reg:QI 0 ax [orig:438 D.6209 ] [438])
                (xor:QI (reg:QI 0 ax [746])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:432 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1453 1452 1454 116 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:438 D.6209 ] [438])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:432 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1454 1453 1455 116 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1469)
            (pc))) sim2fitman_com_line.cpp:432 612 {*jcc_1}
     (nil)
 -> 1469)
;;  succ:       117 (FALLTHRU)
;;              120
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 117, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 116, next block 118, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       116 (FALLTHRU)
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 439 747
(note 1455 1454 1456 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(insn 1456 1455 1457 117 (set (reg:QI 0 ax [747])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -828 [0xfffffffffffffcc4])) [0 irn_set+0 S1 A8])) sim2fitman_com_line.cpp:432 93 {*movqi_internal}
     (nil))
(insn 1457 1456 1458 117 (parallel [
            (set (reg:QI 0 ax [orig:439 D.6209 ] [439])
                (xor:QI (reg:QI 0 ax [747])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:432 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1458 1457 1459 117 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:439 D.6209 ] [439])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:432 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1459 1458 1460 117 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1469)
            (pc))) sim2fitman_com_line.cpp:432 612 {*jcc_1}
     (nil)
 -> 1469)
;;  succ:       118 (FALLTHRU)
;;              120
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 118, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 117, next block 119, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       117 (FALLTHRU)
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 440 748
(note 1460 1459 1461 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn 1461 1460 1462 118 (set (reg/f:DI 0 ax [748])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:432 89 {*movdi_internal}
     (nil))
(insn 1462 1461 1463 118 (set (reg:QI 0 ax [orig:440 D.6209 ] [440])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [748])
                (const_int 72 [0x48])) [0 preprocess_52(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:432 93 {*movqi_internal}
     (nil))
(insn 1463 1462 1464 118 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:440 D.6209 ] [440])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:432 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1464 1463 1465 118 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1469)
            (pc))) sim2fitman_com_line.cpp:432 612 {*jcc_1}
     (nil)
 -> 1469)
;;  succ:       119 (FALLTHRU)
;;              120
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 119, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 118, next block 120, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       118 (FALLTHRU)
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1465 1464 1466 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(insn 1466 1465 1806 119 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -4 [0xfffffffffffffffc])) sim2fitman_com_line.cpp:434 90 {*movsi_internal}
     (nil))
(jump_insn 1806 1466 1807 119 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:434 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1807 1806 1469)
;; basic block 120, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 119, next block 121, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       116
;;              117
;;              118
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1469 1807 1470 120 62 "" [3 uses])
(note 1470 1469 1471 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn 1471 1470 1472 120 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -829 [0xfffffffffffffcc3])) [0 ir_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:435 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1472 1471 1473 120 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1476)
            (pc))) sim2fitman_com_line.cpp:435 612 {*jcc_1}
     (nil)
 -> 1476)
;;  succ:       122
;;              121 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 121, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 120, next block 122, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       120 (FALLTHRU)
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1473 1472 1474 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn 1474 1473 1475 121 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -828 [0xfffffffffffffcc4])) [0 irn_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:435 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1475 1474 1476 121 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1537)
            (pc))) sim2fitman_com_line.cpp:435 612 {*jcc_1}
     (nil)
 -> 1537)
;;  succ:       122 (FALLTHRU)
;;              134
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 122, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 121, next block 123, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       120
;;              121 (FALLTHRU)
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 441 442 749
(code_label 1476 1475 1477 122 63 "" [1 uses])
(note 1477 1476 1478 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn 1478 1477 1479 122 (set (reg/f:DI 0 ax [749])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:435 89 {*movdi_internal}
     (nil))
(insn 1479 1478 1480 122 (set (reg:QI 0 ax [orig:441 D.6209 ] [441])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [749])
                (const_int 72 [0x48])) [0 preprocess_52(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:435 93 {*movqi_internal}
     (nil))
(insn 1480 1479 1481 122 (parallel [
            (set (reg:QI 0 ax [orig:442 D.6209 ] [442])
                (xor:QI (reg:QI 0 ax [orig:441 D.6209 ] [441])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:435 406 {*xorqi_1}
     (nil))
(insn 1481 1480 1482 122 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:442 D.6209 ] [442])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:435 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1482 1481 1483 122 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1537)
            (pc))) sim2fitman_com_line.cpp:435 612 {*jcc_1}
     (nil)
 -> 1537)
;;  succ:       123 (FALLTHRU)
;;              134
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 123, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 122, next block 124, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       122 (FALLTHRU)
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1483 1482 1484 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(insn 1484 1483 1808 123 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -6 [0xfffffffffffffffa])) sim2fitman_com_line.cpp:437 90 {*movsi_internal}
     (nil))
(jump_insn 1808 1484 1809 123 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:437 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1809 1808 1491)
;; basic block 124, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 123, next block 125, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       101
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1491 1809 1492 124 55 "" [1 uses])
(note 1492 1491 1493 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn 1493 1492 1494 124 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_com_line.cpp:442 7 {*cmpsi_1}
     (nil))
(jump_insn 1494 1493 1495 124 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1537)
            (pc))) sim2fitman_com_line.cpp:442 612 {*jcc_1}
     (nil)
 -> 1537)
;;  succ:       125 (FALLTHRU)
;;              134
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 125, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 124, next block 126, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       124 (FALLTHRU)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 443 750
(note 1495 1494 1496 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(insn 1496 1495 1497 125 (set (reg:QI 0 ax [750])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -829 [0xfffffffffffffcc3])) [0 ir_set+0 S1 A8])) sim2fitman_com_line.cpp:444 93 {*movqi_internal}
     (nil))
(insn 1497 1496 1498 125 (parallel [
            (set (reg:QI 0 ax [orig:443 D.6209 ] [443])
                (xor:QI (reg:QI 0 ax [750])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:444 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -813 [0xfffffffffffffcd3])) [0 ir_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1498 1497 1499 125 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:443 D.6209 ] [443])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:444 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1499 1498 1500 125 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1514)
            (pc))) sim2fitman_com_line.cpp:444 612 {*jcc_1}
     (nil)
 -> 1514)
;;  succ:       126 (FALLTHRU)
;;              129
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 126, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 125, next block 127, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       125 (FALLTHRU)
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 444 751
(note 1500 1499 1501 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(insn 1501 1500 1502 126 (set (reg:QI 0 ax [751])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -828 [0xfffffffffffffcc4])) [0 irn_set+0 S1 A8])) sim2fitman_com_line.cpp:444 93 {*movqi_internal}
     (nil))
(insn 1502 1501 1503 126 (parallel [
            (set (reg:QI 0 ax [orig:444 D.6209 ] [444])
                (xor:QI (reg:QI 0 ax [751])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:444 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -812 [0xfffffffffffffcd4])) [0 irn_set+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 1503 1502 1504 126 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:444 D.6209 ] [444])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:444 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1504 1503 1505 126 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1514)
            (pc))) sim2fitman_com_line.cpp:444 612 {*jcc_1}
     (nil)
 -> 1514)
;;  succ:       127 (FALLTHRU)
;;              129
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 127, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 126, next block 128, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       126 (FALLTHRU)
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 445 752
(note 1505 1504 1506 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn 1506 1505 1507 127 (set (reg/f:DI 0 ax [752])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:444 89 {*movdi_internal}
     (nil))
(insn 1507 1506 1508 127 (set (reg:QI 0 ax [orig:445 D.6209 ] [445])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [752])
                (const_int 72 [0x48])) [0 preprocess_52(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:444 93 {*movqi_internal}
     (nil))
(insn 1508 1507 1509 127 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:445 D.6209 ] [445])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:444 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1509 1508 1510 127 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1514)
            (pc))) sim2fitman_com_line.cpp:444 612 {*jcc_1}
     (nil)
 -> 1514)
;;  succ:       128 (FALLTHRU)
;;              129
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 128, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 127, next block 129, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       127 (FALLTHRU)
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1510 1509 1511 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(insn 1511 1510 1810 128 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -13 [0xfffffffffffffff3])) sim2fitman_com_line.cpp:446 90 {*movsi_internal}
     (nil))
(jump_insn 1810 1511 1811 128 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:446 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1811 1810 1514)
;; basic block 129, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 128, next block 130, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       125
;;              126
;;              127
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1514 1811 1515 129 64 "" [3 uses])
(note 1515 1514 1516 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn 1516 1515 1517 129 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -829 [0xfffffffffffffcc3])) [0 ir_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:447 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1517 1516 1518 129 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1521)
            (pc))) sim2fitman_com_line.cpp:447 612 {*jcc_1}
     (nil)
 -> 1521)
;;  succ:       131
;;              130 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 130, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 129, next block 131, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       129 (FALLTHRU)
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 1518 1517 1519 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(insn 1519 1518 1520 130 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -828 [0xfffffffffffffcc4])) [0 irn_set+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:447 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1520 1519 1521 130 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1532)
            (pc))) sim2fitman_com_line.cpp:447 612 {*jcc_1}
     (nil)
 -> 1532)
;;  succ:       131 (FALLTHRU)
;;              133
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 131, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 130, next block 132, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       129
;;              130 (FALLTHRU)
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 446 447 753
(code_label 1521 1520 1522 131 65 "" [1 uses])
(note 1522 1521 1523 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn 1523 1522 1524 131 (set (reg/f:DI 0 ax [753])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:447 89 {*movdi_internal}
     (nil))
(insn 1524 1523 1525 131 (set (reg:QI 0 ax [orig:446 D.6209 ] [446])
        (mem/j:QI (plus:DI (reg/f:DI 0 ax [753])
                (const_int 72 [0x48])) [0 preprocess_52(D)->ecc_present+0 S1 A32])) sim2fitman_com_line.cpp:447 93 {*movqi_internal}
     (nil))
(insn 1525 1524 1526 131 (parallel [
            (set (reg:QI 0 ax [orig:447 D.6209 ] [447])
                (xor:QI (reg:QI 0 ax [orig:446 D.6209 ] [446])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:447 406 {*xorqi_1}
     (nil))
(insn 1526 1525 1527 131 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:447 D.6209 ] [447])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:447 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1527 1526 1528 131 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1532)
            (pc))) sim2fitman_com_line.cpp:447 612 {*jcc_1}
     (nil)
 -> 1532)
;;  succ:       132 (FALLTHRU)
;;              133
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 132, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 131, next block 133, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       131 (FALLTHRU)
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1528 1527 1529 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn 1529 1528 1812 132 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -6 [0xfffffffffffffffa])) sim2fitman_com_line.cpp:449 90 {*movsi_internal}
     (nil))
(jump_insn 1812 1529 1813 132 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:449 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1813 1812 1532)
;; basic block 133, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 132, next block 152, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       130
;;              131
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 1532 1813 1533 133 66 "" [2 uses])
(note 1533 1532 1534 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(insn 1534 1533 1814 133 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -4 [0xfffffffffffffffc])) sim2fitman_com_line.cpp:452 90 {*movsi_internal}
     (nil))
(jump_insn 1814 1534 1815 133 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:452 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1815 1814 1827)
;; basic block 152, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 133, next block 134, flags: (NEW, RTL, MODIFIED)
;;  pred:       113
;;              112 [100.0%] 
;;              115 [100.0%] 
;;              114 [100.0%] 
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1827 1815 1826 152 78 "" [4 uses])
(note 1826 1827 1828 152 [bb 152] NOTE_INSN_BASIC_BLOCK)
(insn 1828 1826 1537 152 (const_int 0 [0]) sim2fitman_com_line.cpp:412 684 {nop}
     (nil))
;;  succ:       134 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 134, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 152, next block 135, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       99
;;              122
;;              124
;;              121
;;              152 [100.0%]  (FALLTHRU)
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1537 1828 1538 134 54 "" [4 uses])
(note 1538 1537 1539 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(insn 1539 1538 1540 134 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:456 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1540 1539 1541 134 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1646)
            (pc))) sim2fitman_com_line.cpp:456 612 {*jcc_1}
     (nil)
 -> 1646)
;;  succ:       135 (FALLTHRU)
;;              140
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 135, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 134, next block 136, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       134 (FALLTHRU)
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 448 449 450 754 755 756 757
(note 1541 1540 1542 135 [bb 135] NOTE_INSN_BASIC_BLOCK)
(insn 1542 1541 1543 135 (set (reg/f:DI 0 ax [orig:448 D.6214 ] [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:459 89 {*movdi_internal}
     (nil))
(insn 1543 1542 1544 135 (parallel [
            (set (reg:DI 1 dx [754])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:459 218 {*adddi_1}
     (nil))
(insn 1544 1543 1545 135 (set (reg:DI 4 si)
        (reg:DI 1 dx [754])) sim2fitman_com_line.cpp:459 89 {*movdi_internal}
     (nil))
(insn 1545 1544 1546 135 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:448 D.6214 ] [448])) sim2fitman_com_line.cpp:459 89 {*movdi_internal}
     (nil))
(call_insn 1546 1545 1547 135 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:459 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1547 1546 1548 135 (set (reg/f:DI 0 ax [755])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 procpar_info+0 S8 A64])) sim2fitman_com_line.cpp:461 89 {*movdi_internal}
     (nil))
(insn 1548 1547 1549 135 (parallel [
            (set (reg/f:DI 1 dx [orig:449 D.6215 ] [449])
                (plus:DI (reg/f:DI 0 ax [755])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:461 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])
            (const_int 60 [0x3c]))
        (nil)))
(insn 1549 1548 1550 135 (parallel [
            (set (reg:DI 0 ax [756])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:461 218 {*adddi_1}
     (nil))
(insn 1550 1549 1551 135 (set (reg:DI 4 si)
        (reg:DI 0 ax [756])) sim2fitman_com_line.cpp:461 89 {*movdi_internal}
     (nil))
(insn 1551 1550 1552 135 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:449 D.6215 ] [449])) sim2fitman_com_line.cpp:461 89 {*movdi_internal}
     (nil))
(call_insn 1552 1551 1553 135 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:461 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1553 1552 1554 135 (set (reg/f:DI 0 ax [757])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -856 [0xfffffffffffffca8])) [0 preprocess+0 S8 A64])) sim2fitman_com_line.cpp:463 89 {*movdi_internal}
     (nil))
(insn 1554 1553 1555 135 (set (reg:SI 0 ax [orig:450 D.6203 ] [450])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [757])
                (const_int 56 [0x38])) [0 preprocess_52(D)->input_file_type+0 S4 A32])) sim2fitman_com_line.cpp:463 90 {*movsi_internal}
     (nil))
(insn 1555 1554 1556 135 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:450 D.6203 ] [450])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:463 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1556 1555 1557 135 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1564)
            (pc))) sim2fitman_com_line.cpp:463 612 {*jcc_1}
     (nil)
 -> 1564)
;;  succ:       136 (FALLTHRU)
;;              137
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 136, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 135, next block 137, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       135 (FALLTHRU)
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 451 758 759
(note 1557 1556 1558 136 [bb 136] NOTE_INSN_BASIC_BLOCK)
(insn 1558 1557 1559 136 (set (reg/f:DI 0 ax [758])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:464 89 {*movdi_internal}
     (nil))
(insn 1559 1558 1560 136 (parallel [
            (set (reg/f:DI 1 dx [orig:451 D.6214 ] [451])
                (plus:DI (reg/f:DI 0 ax [758])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:464 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 1560 1559 1561 136 (parallel [
            (set (reg:DI 0 ax [759])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:464 218 {*adddi_1}
     (nil))
(insn 1561 1560 1562 136 (set (reg:DI 4 si)
        (reg:DI 0 ax [759])) sim2fitman_com_line.cpp:464 89 {*movdi_internal}
     (nil))
(insn 1562 1561 1563 136 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:451 D.6214 ] [451])) sim2fitman_com_line.cpp:464 89 {*movdi_internal}
     (nil))
(call_insn 1563 1562 1564 136 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:464 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
;;  succ:       137 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 137, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 136, next block 138, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       135
;;              136 (FALLTHRU)
;; bb 137 artificial_defs: { }
;; bb 137 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1564 1563 1565 137 68 "" [1 uses])
(note 1565 1564 1566 137 [bb 137] NOTE_INSN_BASIC_BLOCK)
(insn 1566 1565 1567 137 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -816 [0xfffffffffffffcd0])) [0 num_filenames+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_com_line.cpp:467 7 {*cmpsi_1}
     (nil))
(jump_insn 1567 1566 1568 137 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1606)
            (pc))) sim2fitman_com_line.cpp:467 612 {*jcc_1}
     (nil)
 -> 1606)
;;  succ:       138 (FALLTHRU)
;;              139
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 138, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 137, next block 139, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       137 (FALLTHRU)
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 452 453 454 455 456 457 458 459 460 760 761 762 763 764 765 766 767 768 769 770
(note 1568 1567 1569 138 [bb 138] NOTE_INSN_BASIC_BLOCK)
(insn 1569 1568 1570 138 (set (reg/f:DI 0 ax [orig:452 D.6214 ] [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:471 89 {*movdi_internal}
     (nil))
(insn 1570 1569 1571 138 (set (reg/f:DI 1 dx [760])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:471 89 {*movdi_internal}
     (nil))
(insn 1571 1570 1572 138 (parallel [
            (set (reg/f:DI 1 dx [orig:453 D.6214 ] [453])
                (plus:DI (reg/f:DI 1 dx [760])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:471 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1572 1571 1573 138 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:452 D.6214 ] [452])) sim2fitman_com_line.cpp:471 89 {*movdi_internal}
     (nil))
(insn 1573 1572 1574 138 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:453 D.6214 ] [453])) sim2fitman_com_line.cpp:471 89 {*movdi_internal}
     (nil))
(call_insn 1574 1573 1575 138 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:471 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1575 1574 1576 138 (set (reg/f:DI 0 ax [761])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:473 89 {*movdi_internal}
     (nil))
(insn 1576 1575 1577 138 (parallel [
            (set (reg/f:DI 1 dx [orig:454 D.6214 ] [454])
                (plus:DI (reg/f:DI 0 ax [761])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:473 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 1577 1576 1578 138 (set (reg/f:DI 0 ax [762])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:473 89 {*movdi_internal}
     (nil))
(insn 1578 1577 1579 138 (parallel [
            (set (reg/f:DI 0 ax [orig:455 D.6214 ] [455])
                (plus:DI (reg/f:DI 0 ax [762])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:473 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1579 1578 1580 138 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:454 D.6214 ] [454])) sim2fitman_com_line.cpp:473 89 {*movdi_internal}
     (nil))
(insn 1580 1579 1581 138 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:455 D.6214 ] [455])) sim2fitman_com_line.cpp:473 89 {*movdi_internal}
     (nil))
(call_insn 1581 1580 1582 138 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:473 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1582 1581 1583 138 (set (reg/f:DI 0 ax [763])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 procpar_info+0 S8 A64])) sim2fitman_com_line.cpp:475 89 {*movdi_internal}
     (nil))
(insn 1583 1582 1584 138 (parallel [
            (set (reg/f:DI 1 dx [orig:456 D.6215 ] [456])
                (plus:DI (reg/f:DI 0 ax [763])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:475 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])
            (const_int 60 [0x3c]))
        (nil)))
(insn 1584 1583 1585 138 (set (reg/f:DI 0 ax [764])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 procpar_info+0 S8 A64])) sim2fitman_com_line.cpp:475 89 {*movdi_internal}
     (nil))
(insn 1585 1584 1586 138 (parallel [
            (set (reg/f:DI 0 ax [orig:457 D.6216 ] [457])
                (plus:DI (reg/f:DI 0 ax [764])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:475 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1586 1585 1587 138 (parallel [
            (set (reg/f:DI 0 ax [orig:458 D.6215 ] [458])
                (plus:DI (reg/f:DI 0 ax [orig:457 D.6216 ] [457])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:475 218 {*adddi_1}
     (nil))
(insn 1587 1586 1588 138 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:456 D.6215 ] [456])) sim2fitman_com_line.cpp:475 89 {*movdi_internal}
     (nil))
(insn 1588 1587 1589 138 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:458 D.6215 ] [458])) sim2fitman_com_line.cpp:475 89 {*movdi_internal}
     (nil))
(call_insn 1589 1588 1590 138 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:475 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1590 1589 1591 138 (set (reg/f:DI 0 ax [765])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1591 1590 1592 138 (parallel [
            (set (reg/f:DI 0 ax [orig:459 D.6214 ] [459])
                (plus:DI (reg/f:DI 0 ax [765])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:477 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1592 1591 1593 138 (parallel [
            (set (reg:DI 1 dx [766])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:477 218 {*adddi_1}
     (nil))
(insn 1593 1592 1594 138 (parallel [
            (set (reg:DI 1 dx [767])
                (plus:DI (reg:DI 1 dx [766])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:477 218 {*adddi_1}
     (nil))
(insn 1594 1593 1595 138 (set (reg:DI 4 si)
        (reg:DI 1 dx [767])) sim2fitman_com_line.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1595 1594 1596 138 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:459 D.6214 ] [459])) sim2fitman_com_line.cpp:477 89 {*movdi_internal}
     (nil))
(call_insn 1596 1595 1597 138 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:477 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1597 1596 1598 138 (set (reg/f:DI 0 ax [768])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:478 89 {*movdi_internal}
     (nil))
(insn 1598 1597 1599 138 (parallel [
            (set (reg/f:DI 0 ax [orig:460 D.6214 ] [460])
                (plus:DI (reg/f:DI 0 ax [768])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:478 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1599 1598 1600 138 (parallel [
            (set (reg:DI 1 dx [769])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:478 218 {*adddi_1}
     (nil))
(insn 1600 1599 1601 138 (parallel [
            (set (reg:DI 1 dx [770])
                (plus:DI (reg:DI 1 dx [769])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:478 218 {*adddi_1}
     (nil))
(insn 1601 1600 1602 138 (set (reg:DI 4 si)
        (reg:DI 1 dx [770])) sim2fitman_com_line.cpp:478 89 {*movdi_internal}
     (nil))
(insn 1602 1601 1603 138 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:460 D.6214 ] [460])) sim2fitman_com_line.cpp:478 89 {*movdi_internal}
     (nil))
(call_insn 1603 1602 1816 138 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:478 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 1816 1603 1817 138 (set (pc)
        (label_ref 1646)) 654 {jump}
     (nil)
 -> 1646)
;;  succ:       140 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1817 1816 1606)
;; basic block 139, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 138, next block 140, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       137
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 461 462 463 464 465 466 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785
(code_label 1606 1817 1607 139 69 "" [1 uses])
(note 1607 1606 1608 139 [bb 139] NOTE_INSN_BASIC_BLOCK)
(insn 1608 1607 1609 139 (set (reg/f:DI 0 ax [771])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:482 89 {*movdi_internal}
     (nil))
(insn 1609 1608 1610 139 (parallel [
            (set (reg/f:DI 0 ax [orig:461 D.6214 ] [461])
                (plus:DI (reg/f:DI 0 ax [771])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:482 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 1610 1609 1611 139 (parallel [
            (set (reg:DI 1 dx [772])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:482 218 {*adddi_1}
     (nil))
(insn 1611 1610 1612 139 (parallel [
            (set (reg:DI 1 dx [773])
                (plus:DI (reg:DI 1 dx [772])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:482 218 {*adddi_1}
     (nil))
(insn 1612 1611 1613 139 (set (reg:DI 4 si)
        (reg:DI 1 dx [773])) sim2fitman_com_line.cpp:482 89 {*movdi_internal}
     (nil))
(insn 1613 1612 1614 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:461 D.6214 ] [461])) sim2fitman_com_line.cpp:482 89 {*movdi_internal}
     (nil))
(call_insn 1614 1613 1615 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:482 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1615 1614 1616 139 (set (reg/f:DI 0 ax [774])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:484 89 {*movdi_internal}
     (nil))
(insn 1616 1615 1617 139 (parallel [
            (set (reg/f:DI 0 ax [orig:462 D.6214 ] [462])
                (plus:DI (reg/f:DI 0 ax [774])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:484 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 1617 1616 1618 139 (parallel [
            (set (reg:DI 1 dx [775])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:484 218 {*adddi_1}
     (nil))
(insn 1618 1617 1619 139 (parallel [
            (set (reg:DI 1 dx [776])
                (plus:DI (reg:DI 1 dx [775])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:484 218 {*adddi_1}
     (nil))
(insn 1619 1618 1620 139 (set (reg:DI 4 si)
        (reg:DI 1 dx [776])) sim2fitman_com_line.cpp:484 89 {*movdi_internal}
     (nil))
(insn 1620 1619 1621 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:462 D.6214 ] [462])) sim2fitman_com_line.cpp:484 89 {*movdi_internal}
     (nil))
(call_insn 1621 1620 1622 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:484 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1622 1621 1623 139 (set (reg/f:DI 0 ax [777])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -872 [0xfffffffffffffc98])) [0 procpar_info+0 S8 A64])) sim2fitman_com_line.cpp:486 89 {*movdi_internal}
     (nil))
(insn 1623 1622 1624 139 (parallel [
            (set (reg/f:DI 0 ax [orig:463 D.6216 ] [463])
                (plus:DI (reg/f:DI 0 ax [777])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:486 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -856 [0xfffffffffffffca8])) [0 procpar_info+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1624 1623 1625 139 (parallel [
            (set (reg/f:DI 0 ax [orig:464 D.6215 ] [464])
                (plus:DI (reg/f:DI 0 ax [orig:463 D.6216 ] [463])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:486 218 {*adddi_1}
     (nil))
(insn 1625 1624 1626 139 (parallel [
            (set (reg:DI 1 dx [778])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:486 218 {*adddi_1}
     (nil))
(insn 1626 1625 1627 139 (parallel [
            (set (reg:DI 1 dx [779])
                (plus:DI (reg:DI 1 dx [778])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:486 218 {*adddi_1}
     (nil))
(insn 1627 1626 1628 139 (set (reg:DI 4 si)
        (reg:DI 1 dx [779])) sim2fitman_com_line.cpp:486 89 {*movdi_internal}
     (nil))
(insn 1628 1627 1629 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:464 D.6215 ] [464])) sim2fitman_com_line.cpp:486 89 {*movdi_internal}
     (nil))
(call_insn 1629 1628 1630 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:486 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1630 1629 1631 139 (set (reg/f:DI 0 ax [780])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:488 89 {*movdi_internal}
     (nil))
(insn 1631 1630 1632 139 (parallel [
            (set (reg/f:DI 0 ax [orig:465 D.6214 ] [465])
                (plus:DI (reg/f:DI 0 ax [780])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:488 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1632 1631 1633 139 (parallel [
            (set (reg:DI 1 dx [781])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:488 218 {*adddi_1}
     (nil))
(insn 1633 1632 1634 139 (parallel [
            (set (reg:DI 1 dx [782])
                (plus:DI (reg:DI 1 dx [781])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:488 218 {*adddi_1}
     (nil))
(insn 1634 1633 1635 139 (set (reg:DI 4 si)
        (reg:DI 1 dx [782])) sim2fitman_com_line.cpp:488 89 {*movdi_internal}
     (nil))
(insn 1635 1634 1636 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:465 D.6214 ] [465])) sim2fitman_com_line.cpp:488 89 {*movdi_internal}
     (nil))
(call_insn 1636 1635 1637 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:488 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 1637 1636 1638 139 (set (reg/f:DI 0 ax [783])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:489 89 {*movdi_internal}
     (nil))
(insn 1638 1637 1639 139 (parallel [
            (set (reg/f:DI 0 ax [orig:466 D.6214 ] [466])
                (plus:DI (reg/f:DI 0 ax [783])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:489 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 1639 1638 1640 139 (parallel [
            (set (reg:DI 1 dx [784])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -800 [0xfffffffffffffce0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:489 218 {*adddi_1}
     (nil))
(insn 1640 1639 1641 139 (parallel [
            (set (reg:DI 1 dx [785])
                (plus:DI (reg:DI 1 dx [784])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:489 218 {*adddi_1}
     (nil))
(insn 1641 1640 1642 139 (set (reg:DI 4 si)
        (reg:DI 1 dx [785])) sim2fitman_com_line.cpp:489 89 {*movdi_internal}
     (nil))
(insn 1642 1641 1643 139 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:466 D.6214 ] [466])) sim2fitman_com_line.cpp:489 89 {*movdi_internal}
     (nil))
(call_insn 1643 1642 1646 139 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f968434c5e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:489 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
;;  succ:       140 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 140, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 139, next block 141, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       134
;;              139 (FALLTHRU)
;;              138 [100.0%] 
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 467 468
(code_label 1646 1643 1647 140 67 "" [2 uses])
(note 1647 1646 1648 140 [bb 140] NOTE_INSN_BASIC_BLOCK)
(insn 1648 1647 1649 140 (set (reg/f:DI 0 ax [orig:467 D.6214 ] [467])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:494 89 {*movdi_internal}
     (nil))
(insn 1649 1648 1650 140 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f9683f0f510 *.LC27>)) sim2fitman_com_line.cpp:494 89 {*movdi_internal}
     (nil))
(insn 1650 1649 1651 140 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:467 D.6214 ] [467])) sim2fitman_com_line.cpp:494 89 {*movdi_internal}
     (nil))
(call_insn/i 1651 1650 1652 140 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:494 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1652 1651 1653 140 (set (reg:SI 0 ax [orig:468 D.6203 ] [468])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:494 90 {*movsi_internal}
     (nil))
(insn 1653 1652 1654 140 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:468 D.6203 ] [468])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:494 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1654 1653 1655 140 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1659)
            (pc))) sim2fitman_com_line.cpp:494 612 {*jcc_1}
     (nil)
 -> 1659)
;;  succ:       141 (FALLTHRU)
;;              142
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 141, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 140, next block 142, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       140 (FALLTHRU)
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1655 1654 1656 141 [bb 141] NOTE_INSN_BASIC_BLOCK)
(insn 1656 1655 1818 141 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -3 [0xfffffffffffffffd])) sim2fitman_com_line.cpp:495 90 {*movsi_internal}
     (nil))
(jump_insn 1818 1656 1819 141 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:495 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1819 1818 1659)
;; basic block 142, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 141, next block 143, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       140
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 469 470 786
(code_label 1659 1819 1660 142 71 "" [1 uses])
(note 1660 1659 1661 142 [bb 142] NOTE_INSN_BASIC_BLOCK)
(insn 1661 1660 1662 142 (set (reg/f:DI 0 ax [786])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -864 [0xfffffffffffffca0])) [0 io_filenames+0 S8 A64])) sim2fitman_com_line.cpp:499 89 {*movdi_internal}
     (nil))
(insn 1662 1661 1663 142 (parallel [
            (set (reg/f:DI 0 ax [orig:469 D.6214 ] [469])
                (plus:DI (reg/f:DI 0 ax [786])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_com_line.cpp:499 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -848 [0xfffffffffffffcb0])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 1663 1662 1664 142 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f9683f0f510 *.LC27>)) sim2fitman_com_line.cpp:499 89 {*movdi_internal}
     (nil))
(insn 1664 1663 1665 142 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:469 D.6214 ] [469])) sim2fitman_com_line.cpp:499 89 {*movdi_internal}
     (nil))
(call_insn/i 1665 1664 1666 142 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f968434c360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:499 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 1666 1665 1667 142 (set (reg:SI 0 ax [orig:470 D.6203 ] [470])
        (reg:SI 0 ax)) sim2fitman_com_line.cpp:499 90 {*movsi_internal}
     (nil))
(insn 1667 1666 1668 142 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:470 D.6203 ] [470])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:499 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 1668 1667 1669 142 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1673)
            (pc))) sim2fitman_com_line.cpp:499 612 {*jcc_1}
     (nil)
 -> 1673)
;;  succ:       143 (FALLTHRU)
;;              144
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 143, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 142, next block 144, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       142 (FALLTHRU)
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1669 1668 1670 143 [bb 143] NOTE_INSN_BASIC_BLOCK)
(insn 1670 1669 1820 143 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int -4 [0xfffffffffffffffc])) sim2fitman_com_line.cpp:500 90 {*movsi_internal}
     (nil))
(jump_insn 1820 1670 1821 143 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:500 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1821 1820 1673)
;; basic block 144, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 143, next block 145, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       142
;; bb 144 artificial_defs: { }
;; bb 144 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1673 1821 1674 144 72 "" [1 uses])
(note 1674 1673 1675 144 [bb 144] NOTE_INSN_BASIC_BLOCK)
(insn 1675 1674 1676 144 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -831 [0xfffffffffffffcc1])) [0 only_suppressed+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:503 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1676 1675 1677 144 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1681)
            (pc))) sim2fitman_com_line.cpp:503 612 {*jcc_1}
     (nil)
 -> 1681)
;;  succ:       145 (FALLTHRU)
;;              146
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 145, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 144, next block 146, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       144 (FALLTHRU)
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1677 1676 1678 145 [bb 145] NOTE_INSN_BASIC_BLOCK)
(insn 1678 1677 1822 145 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int 1 [0x1])) sim2fitman_com_line.cpp:505 90 {*movsi_internal}
     (nil))
(jump_insn 1822 1678 1823 145 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:505 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1823 1822 1681)
;; basic block 146, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 145, next block 147, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       144
;; bb 146 artificial_defs: { }
;; bb 146 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1681 1823 1682 146 73 "" [1 uses])
(note 1682 1681 1683 146 [bb 146] NOTE_INSN_BASIC_BLOCK)
(insn 1683 1682 1684 146 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -830 [0xfffffffffffffcc2])) [0 only_unsuppressed+0 S1 A8])
            (const_int 0 [0]))) sim2fitman_com_line.cpp:506 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1684 1683 1685 146 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1689)
            (pc))) sim2fitman_com_line.cpp:506 612 {*jcc_1}
     (nil)
 -> 1689)
;;  succ:       147 (FALLTHRU)
;;              148
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 147, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 146, next block 148, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       146 (FALLTHRU)
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 1685 1684 1686 147 [bb 147] NOTE_INSN_BASIC_BLOCK)
(insn 1686 1685 1824 147 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int 2 [0x2])) sim2fitman_com_line.cpp:508 90 {*movsi_internal}
     (nil))
(jump_insn 1824 1686 1825 147 (set (pc)
        (label_ref 1694)) sim2fitman_com_line.cpp:508 654 {jump}
     (nil)
 -> 1694)
;;  succ:       149 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 1825 1824 1689)
;; basic block 148, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 147, next block 149, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       146
;; bb 148 artificial_defs: { }
;; bb 148 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 1689 1825 1690 148 74 "" [1 uses])
(note 1690 1689 1691 148 [bb 148] NOTE_INSN_BASIC_BLOCK)
(insn 1691 1690 1694 148 (set (reg:SI 0 ax [orig:87 D.6203 ] [87])
        (const_int 0 [0])) sim2fitman_com_line.cpp:511 90 {*movsi_internal}
     (nil))
;;  succ:       149 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 149, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 148, next block 150, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       148 (FALLTHRU)
;;              145 [100.0%] 
;;              9 [100.0%] 
;;              15 [100.0%] 
;;              21 [100.0%] 
;;              26 [100.0%] 
;;              28 [100.0%] 
;;              36 [100.0%] 
;;              40 [100.0%] 
;;              45 [100.0%] 
;;              46 [100.0%] 
;;              51 [100.0%] 
;;              52 [100.0%] 
;;              56 [100.0%] 
;;              69 [100.0%] 
;;              73 [100.0%] 
;;              77 [100.0%] 
;;              81 [100.0%] 
;;              89 [100.0%] 
;;              94 [100.0%] 
;;              98 [100.0%] 
;;              100 [100.0%] 
;;              119 [100.0%] 
;;              123 [100.0%] 
;;              128 [100.0%] 
;;              132 [100.0%] 
;;              133 [100.0%] 
;;              141 [100.0%] 
;;              143 [100.0%] 
;;              147 [100.0%] 
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 471
(code_label 1694 1691 1695 149 75 "" [29 uses])
(note 1695 1694 1696 149 [bb 149] NOTE_INSN_BASIC_BLOCK)
(insn 1696 1695 1700 149 (set (reg:SI 0 ax [orig:471 <retval> ] [471])
        (reg:SI 0 ax [orig:87 D.6203 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 1700 1696 1701 149 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:471 <retval> ] [471])) sim2fitman_com_line.cpp:513 90 {*movsi_internal}
     (nil))
(insn 1701 1700 1702 149 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.6217+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [789]))
        ]) sim2fitman_com_line.cpp:513 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 1702 1701 1708 149 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1705)
            (pc))) sim2fitman_com_line.cpp:513 612 {*jcc_1}
     (nil)
 -> 1705)
;;  succ:       151
;;              150 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 150, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 149, next block 151, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       149 (FALLTHRU)
;; bb 150 artificial_defs: { }
;; bb 150 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 1708 1702 1703 150 [bb 150] NOTE_INSN_BASIC_BLOCK)
(call_insn 1703 1708 1704 150 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f9683ed3288 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) sim2fitman_com_line.cpp:513 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 1704 1703 1705)
;; basic block 151, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 150, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       149
;; bb 151 artificial_defs: { }
;; bb 151 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 1705 1704 1709 151 76 "" [1 uses])
(note 1709 1705 1706 151 [bb 151] NOTE_INSN_BASIC_BLOCK)
(insn 1706 1709 1829 151 (use (reg/i:SI 0 ax)) sim2fitman_com_line.cpp:513 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1829 1706 0 NOTE_INSN_DELETED)
