
;; Function int read_procpar(Procpar_info*, char*, FILE*, bool*, InFile_struct*, Data_file_header*) (_Z12read_procparP12Procpar_infoPcP8_IO_FILEPbP13InFile_structP16Data_file_header, funcdef_no=2, decl_uid=5308, symbol_order=2)

      Creating newreg=342
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=343
Removing SCRATCH in insn #843 (nop 3)
rescanning insn with uid = 843.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=752, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=736, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r342
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 23:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 45:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 50:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 60:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 63:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 72:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 78:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 84:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 91:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 92:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 95:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 103:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 114:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 122:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 128:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 140:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 148:  (0) ?m  (1) rF {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 149:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 150:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 153:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 155:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 159:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=344, assigning class SSE_REGS to r344
  159: r344:SF=float_trunc(r101:DF)
      REG_DEAD r101:DF
    Inserting insn reload after:
  926: [frame:DI-0x294]=r344:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 926:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 160:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 161:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 162:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=345 from oldreg=102, assigning class SSE_REGS to r345
  162: r345:SF=r345:SF/r213:SF
      REG_DEAD r213:SF
      REG_DEAD r212:SF
    Inserting insn reload before:
  927: r345:SF=r212:SF
    Inserting insn reload after:
  928: r102:SF=r345:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 928:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 164:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 165:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 166:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=346 from oldreg=215, assigning class SSE_REGS to r346
  166: r346:SF=r346:SF/[frame:DI-0x294]
      REG_DEAD r216:SF
    Inserting insn reload before:
  929: r346:SF=r216:SF
    Inserting insn reload after:
  930: r215:SF=r346:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 930:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 167:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 173:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 181:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 184:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 186:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 189:  (0) r  (1) Yj {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 191:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 197:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 204:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 205:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 208:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 210:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 220:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 227:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 228:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 231:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 233:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 243:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 250:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 251:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 254:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 255:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 256:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 266:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 273:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 274:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 277:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 279:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 288:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 295:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 296:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 299:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 301:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 309:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 310:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 317:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 318:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 321:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 322:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 323:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 327:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=347 from oldreg=115, assigning class SSE_REGS to r347
  327: r347:SF=float_trunc(r114:DF)
      REG_DEAD r114:DF
    Inserting insn reload after:
  931: r115:SF=r347:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 931:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 329:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 330:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 331:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 332:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 333:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=348 from oldreg=117, assigning class SSE_REGS to r348
  333: r348:SF=r348:SF/r246:SF
      REG_DEAD r246:SF
      REG_DEAD r116:SF
    Inserting insn reload before:
  932: r348:SF=r116:SF
    Inserting insn reload after:
  933: r117:SF=r348:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 933:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 334:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 335:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 341:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 348:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 349:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 352:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 354:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 358:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=349 from oldreg=120, assigning class SSE_REGS to r349
  358: r349:SF=float_trunc(r119:DF)
      REG_DEAD r119:DF
    Inserting insn reload after:
  934: r120:SF=r349:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 934:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 359:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 360:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 361:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 362:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 363:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 364:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=350 from oldreg=122, assigning class SSE_REGS to r350
  364: r350:SF=r350:SF/r253:SF
      REG_DEAD r253:SF
      REG_DEAD r121:SF
    Inserting insn reload before:
  935: r350:SF=r121:SF
    Inserting insn reload after:
  936: r122:SF=r350:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 936:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 366:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 371:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 372:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 379:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 380:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 383:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 385:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 389:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=351 from oldreg=125, assigning class SSE_REGS to r351
  389: r351:SF=float_trunc(r124:DF)
      REG_DEAD r124:DF
    Inserting insn reload after:
  937: r125:SF=r351:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 937:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 390:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 391:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 396:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 397:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 404:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 405:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 408:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 410:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 414:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=352 from oldreg=128, assigning class SSE_REGS to r352
  414: r352:SF=float_trunc(r127:DF)
      REG_DEAD r127:DF
    Inserting insn reload after:
  938: r128:SF=r352:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 938:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 416:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 421:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 422:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 429:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 430:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 433:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 434:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 435:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 439:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=353 from oldreg=131, assigning class SSE_REGS to r353
  439: r353:SF=float_trunc(r130:DF)
      REG_DEAD r130:DF
    Inserting insn reload after:
  939: r131:SF=r353:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 939:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 440:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 441:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 447:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 454:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 455:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 458:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 460:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 464:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=354 from oldreg=134, assigning class SSE_REGS to r354
  464: r354:SF=float_trunc(r133:DF)
      REG_DEAD r133:DF
    Inserting insn reload after:
  940: r134:SF=r354:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 940:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 466:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 472:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 479:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 480:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 483:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 485:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 489:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=355 from oldreg=137, assigning class SSE_REGS to r355
  489: r355:SF=float_trunc(r136:DF)
      REG_DEAD r136:DF
    Inserting insn reload after:
  941: r137:SF=r355:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 941:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 491:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 497:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 504:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 505:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 508:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 510:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 514:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=356 from oldreg=140, assigning class SSE_REGS to r356
  514: r356:SF=float_trunc(r139:DF)
      REG_DEAD r139:DF
    Inserting insn reload after:
  942: r140:SF=r356:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 942:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 516:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 520:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 526:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 540:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) r {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 547:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 548:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 549:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 552:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 557:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) q {*cmpqi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 564:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 565:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 566:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 567:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 568:  (0) m  (1) qn {*movqi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 569:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 571:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 575:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 578:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) rw {*tablejump_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 587:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 588:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 589:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 595:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 596:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 601:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 602:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 603:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 608:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 609:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 610:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 615:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 616:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 617:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 622:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 623:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 624:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 629:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 630:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 631:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 636:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 637:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 638:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 643:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 644:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 645:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 650:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 651:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 652:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 657:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 658:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 664:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 665:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 666:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 671:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 672:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 673:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 676:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 677:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 678:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 679:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 680:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 681:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 682:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 683:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 684:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 685:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 686:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 687:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 688:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 689:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 690:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 691:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 692:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 693:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 694:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 695:  (0) q  (1) qm {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 696:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 697:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 698:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 699:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 700:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 701:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 702:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 703:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 704:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 705:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 706:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 707:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 708:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 709:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 710:  (0) x  (1) r {*floatsisf2_sse}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=18,losers=2 -- refuse
	 Choosing alt 0 in insn 711:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=357 from oldreg=167, assigning class SSE_REGS to r357
  711: r357:SF=r357:SF*[frame:DI-0x294]
      REG_DEAD r166:SF
    Inserting insn reload before:
  943: r357:SF=r166:SF
    Inserting insn reload after:
  944: r167:SF=r357:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 944:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 712:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 713:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 714:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 715:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 716:  (0) ?m  (1) rF {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 717:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 718:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 719:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 720:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 722:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 725:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 726:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) q {*cmpqi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 730:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 731:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 733:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 735:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=358, assigning class SSE_REGS to r358
  735: r358:SF=float_trunc(r170:DF)
      REG_DEAD r170:DF
    Inserting insn reload after:
  945: [frame:DI-0x290]=r358:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 945:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 739:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 740:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 741:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 742:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 744:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 746:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 747:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 749:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 751:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=359, assigning class SSE_REGS to r359
  751: r359:SF=float_trunc(r174:DF)
      REG_DEAD r174:DF
    Inserting insn reload after:
  946: [frame:DI-0x290]=r359:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 946:  (0) m  (1) v {*movsf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 754:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 756:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 758:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) q {*cmpqi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 762:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=4,overall=18,losers=1,rld_nregs=0
            alt=5: Bad operand -- refuse
          alt=6,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=8,overall=12,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=9,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=1216,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=1216,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=13,overall=612,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=1215,losers=2 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
      Creating newreg=360, assigning class NO_REGS to secondary r360
  763: r360:SF=r323:SF
      REG_DEAD r323:SF
    Inserting the sec. move after:
  947: xmm0:SF=r360:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=624,losers=2 -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=7,overall=1,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 947:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 764:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 766:  (0) r {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 770:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 775:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 779:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 782:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 783:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 784:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 787:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 788:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 789:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 790:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 791:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 793:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 795:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 796:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 797:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 798:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 799:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 801:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 803:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 804:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 805:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 806:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 807:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 808:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 809:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 810:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 811:  (0) r  (1) 0  (2) mr {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 812:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 813:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 814:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            alt=2,overall=6,losers=1 -- refuse
	 Choosing alt 2 in insn 815:  (0) r  (1) 0  (2) mr {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 819:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 820
	 Choosing alt 0 in insn 820:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 821:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 822:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 823:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 824:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 825:  (0) r  (1) rm {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 828:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 833:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 843:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r343
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 845:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80

********** Pseudo live ranges #1: **********

  BB 79
   Insn 845: point = 0
  BB 80
   Insn 848: point = 0
  BB 78
   Insn 844: point = 0
   Insn 843: point = 0
   Insn 842: point = 1
   Insn 838: point = 2
  BB 76
   Insn 923: point = 5
   Insn 828: point = 5
  BB 3
   Insn 853: point = 6
   Insn 37: point = 6
  BB 44
   Insn 891: point = 7
   Insn 535: point = 7
  BB 77
   Insn 833: point = 8
  BB 75
   Insn 826: point = 9
   Insn 825: point = 9
   Insn 824: point = 10
   Insn 823: point = 12
   Insn 822: point = 14
   Insn 821: point = 15
   Insn 820: point = 16
   Insn 819: point = 18
   Insn 815: point = 19
   Insn 814: point = 21
   Insn 813: point = 23
   Insn 812: point = 25
   Insn 811: point = 26
   Insn 810: point = 28
   Insn 809: point = 30
   Insn 808: point = 32
   Insn 807: point = 33
   Insn 806: point = 35
   Insn 805: point = 36
   Insn 804: point = 37
   Insn 803: point = 38
   Insn 802: point = 40
   Insn 801: point = 41
   Insn 800: point = 41
   Insn 799: point = 42
   Insn 798: point = 43
   Insn 797: point = 44
   Insn 796: point = 46
   Insn 795: point = 47
   Insn 794: point = 47
   Insn 793: point = 48
   Insn 792: point = 48
   Insn 791: point = 48
   Insn 790: point = 49
   Insn 789: point = 50
   Insn 788: point = 51
   Insn 787: point = 52
  BB 74
   Insn 784: point = 53
   Insn 783: point = 54
   Insn 782: point = 55
  BB 73
   Insn 780: point = 56
   Insn 779: point = 56
  BB 71
   Insn 921: point = 58
   Insn 770: point = 58
  BB 72
   Insn 775: point = 59
  BB 70
   Insn 767: point = 60
   Insn 766: point = 60
   Insn 765: point = 61
   Insn 764: point = 62
   Insn 947: point = 62
	Hard reg 21 is preferable by r360 with profit 1
   Insn 763: point = 63
	Hard reg 21 is preferable by r360 with profit 1
	Hard reg 0 is preferable by r360 with profit 1
   Insn 762: point = 65
  BB 69
   Insn 760: point = 66
   Insn 759: point = 66
   Insn 758: point = 67
   Insn 757: point = 69
   Insn 756: point = 70
   Insn 755: point = 70
   Insn 754: point = 71
  BB 66
   Insn 919: point = 72
   Insn 945: point = 72
   Insn 735: point = 73
   Insn 734: point = 75
   Insn 733: point = 76
   Insn 732: point = 76
   Insn 731: point = 77
   Insn 730: point = 77
  BB 68
   Insn 946: point = 78
   Insn 751: point = 79
   Insn 750: point = 81
   Insn 749: point = 82
   Insn 748: point = 82
   Insn 747: point = 83
   Insn 746: point = 83
  BB 67
   Insn 744: point = 84
   Insn 743: point = 84
   Insn 742: point = 85
   Insn 741: point = 86
   Insn 740: point = 86
   Insn 739: point = 86
  BB 65
   Insn 728: point = 86
   Insn 727: point = 86
   Insn 726: point = 87
   Insn 725: point = 89
   Insn 724: point = 90
   Insn 723: point = 90
   Insn 722: point = 91
   Insn 721: point = 92
   Insn 720: point = 92
   Insn 719: point = 92
   Insn 718: point = 92
   Insn 717: point = 92
   Insn 716: point = 92
   Insn 715: point = 93
   Insn 714: point = 94
   Insn 713: point = 95
   Insn 712: point = 96
   Insn 944: point = 97
	Hard reg 0 is preferable by r357 with profit 1
   Insn 711: point = 99
   Insn 943: point = 99
	Hard reg 0 is preferable by r357 with profit 1
	Hard reg 21 is preferable by r357 with profit 1
   Insn 710: point = 101
   Insn 709: point = 103
   Insn 708: point = 105
   Insn 707: point = 106
   Insn 706: point = 107
   Insn 705: point = 108
   Insn 704: point = 109
   Insn 703: point = 110
   Insn 702: point = 111
   Insn 701: point = 112
   Insn 700: point = 113
   Insn 699: point = 114
   Insn 698: point = 115
   Insn 697: point = 116
   Insn 696: point = 117
   Insn 695: point = 118
   Insn 694: point = 119
   Insn 693: point = 120
   Insn 692: point = 121
   Insn 691: point = 122
   Insn 690: point = 123
   Insn 689: point = 124
   Insn 688: point = 125
   Insn 687: point = 126
   Insn 686: point = 127
   Insn 685: point = 128
   Insn 684: point = 129
   Insn 683: point = 130
   Insn 682: point = 131
   Insn 681: point = 132
   Insn 680: point = 133
   Insn 679: point = 134
   Insn 678: point = 135
   Insn 677: point = 136
   Insn 676: point = 137
  BB 63
   Insn 917: point = 138
   Insn 666: point = 138
   Insn 665: point = 139
   Insn 664: point = 141
  BB 62
   Insn 915: point = 142
   Insn 659: point = 142
   Insn 658: point = 143
   Insn 657: point = 145
  BB 61
   Insn 913: point = 146
   Insn 652: point = 146
   Insn 651: point = 147
   Insn 650: point = 149
  BB 60
   Insn 911: point = 150
   Insn 645: point = 150
   Insn 644: point = 151
   Insn 643: point = 153
  BB 59
   Insn 909: point = 154
   Insn 638: point = 154
   Insn 637: point = 155
   Insn 636: point = 157
  BB 58
   Insn 907: point = 158
   Insn 631: point = 158
   Insn 630: point = 159
   Insn 629: point = 161
  BB 57
   Insn 905: point = 162
   Insn 624: point = 162
   Insn 623: point = 163
   Insn 622: point = 165
  BB 56
   Insn 903: point = 166
   Insn 617: point = 166
   Insn 616: point = 167
   Insn 615: point = 169
  BB 55
   Insn 901: point = 170
   Insn 610: point = 170
   Insn 609: point = 171
   Insn 608: point = 173
  BB 54
   Insn 899: point = 174
   Insn 603: point = 174
   Insn 602: point = 175
   Insn 601: point = 177
  BB 53
   Insn 897: point = 178
   Insn 596: point = 178
   Insn 595: point = 179
   Insn 594: point = 181
  BB 52
   Insn 895: point = 182
   Insn 589: point = 182
   Insn 588: point = 183
   Insn 587: point = 185
  BB 64
   Insn 673: point = 186
   Insn 672: point = 187
   Insn 671: point = 189
  BB 51
   Insn 580: point = 190
   Insn 579: point = 191
   Insn 578: point = 193
  BB 50
   Insn 577: point = 194
   Insn 576: point = 194
   Insn 575: point = 194
   Insn 574: point = 195
   Insn 573: point = 196
   Insn 572: point = 196
   Insn 571: point = 197
   Insn 570: point = 197
   Insn 569: point = 197
   Insn 568: point = 198
   Insn 567: point = 198
   Insn 566: point = 199
   Insn 565: point = 200
   Insn 564: point = 201
  BB 49
   Insn 562: point = 202
   Insn 561: point = 202
  BB 47
   Insn 893: point = 204
   Insn 552: point = 204
  BB 48
   Insn 557: point = 205
  BB 46
   Insn 550: point = 206
   Insn 549: point = 206
   Insn 548: point = 207
   Insn 547: point = 209
  BB 45
   Insn 545: point = 210
   Insn 544: point = 210
   Insn 543: point = 211
   Insn 542: point = 212
   Insn 541: point = 212
   Insn 540: point = 213
  BB 4
   Insn 855: point = 214
  BB 2
   Insn 35: point = 214
   Insn 34: point = 214
   Insn 33: point = 215
   Insn 32: point = 216
   Insn 31: point = 217
   Insn 30: point = 218
   Insn 29: point = 218
   Insn 28: point = 219
   Insn 27: point = 220
   Insn 26: point = 220
   Insn 25: point = 221
   Insn 24: point = 221
   Insn 23: point = 222
   Insn 22: point = 223
   Insn 21: point = 224
   Insn 20: point = 224
   Insn 19: point = 224
   Insn 18: point = 224
   Insn 17: point = 224
   Insn 16: point = 224
   Insn 15: point = 224
   Insn 14: point = 224
   Insn 13: point = 225
   Insn 12: point = 226
   Insn 9: point = 226
   Insn 7: point = 228
   Insn 6: point = 228
   Insn 5: point = 228
   Insn 4: point = 228
   Insn 3: point = 228
   Insn 2: point = 228
  BB 43
   Insn 533: point = 228
   Insn 532: point = 228
   Insn 531: point = 229
   Insn 530: point = 230
   Insn 529: point = 231
   Insn 528: point = 232
   Insn 527: point = 232
   Insn 526: point = 233
  BB 42
   Insn 524: point = 234
   Insn 523: point = 234
   Insn 522: point = 235
   Insn 521: point = 235
   Insn 520: point = 236
   Insn 519: point = 237
  BB 39
   Insn 889: point = 238
   Insn 491: point = 238
   Insn 490: point = 239
   Insn 941: point = 240
	Hard reg 0 is preferable by r355 with profit 1
   Insn 489: point = 242
   Insn 488: point = 244
   Insn 487: point = 245
   Insn 486: point = 245
   Insn 485: point = 246
   Insn 484: point = 246
   Insn 483: point = 247
   Insn 482: point = 248
   Insn 481: point = 249
   Insn 480: point = 249
   Insn 479: point = 249
  BB 41
   Insn 516: point = 249
   Insn 515: point = 250
   Insn 942: point = 251
	Hard reg 0 is preferable by r356 with profit 1
   Insn 514: point = 253
   Insn 513: point = 255
   Insn 512: point = 256
   Insn 511: point = 256
   Insn 510: point = 257
   Insn 509: point = 257
   Insn 508: point = 258
   Insn 507: point = 259
   Insn 506: point = 260
   Insn 505: point = 260
   Insn 504: point = 260
  BB 40
   Insn 502: point = 260
   Insn 501: point = 260
   Insn 500: point = 261
   Insn 499: point = 262
   Insn 498: point = 262
   Insn 497: point = 263
   Insn 496: point = 263
  BB 38
   Insn 477: point = 264
   Insn 476: point = 264
   Insn 475: point = 265
   Insn 474: point = 266
   Insn 473: point = 266
   Insn 472: point = 267
   Insn 471: point = 267
  BB 37
   Insn 887: point = 268
   Insn 466: point = 268
   Insn 465: point = 269
   Insn 940: point = 270
	Hard reg 0 is preferable by r354 with profit 1
   Insn 464: point = 272
   Insn 463: point = 274
   Insn 462: point = 275
   Insn 461: point = 275
   Insn 460: point = 276
   Insn 459: point = 276
   Insn 458: point = 277
   Insn 457: point = 278
   Insn 456: point = 279
   Insn 455: point = 279
   Insn 454: point = 279
  BB 36
   Insn 452: point = 279
   Insn 451: point = 279
   Insn 450: point = 280
   Insn 449: point = 281
   Insn 448: point = 281
   Insn 447: point = 282
   Insn 446: point = 282
  BB 35
   Insn 885: point = 283
   Insn 441: point = 283
   Insn 440: point = 284
   Insn 939: point = 285
	Hard reg 0 is preferable by r353 with profit 1
   Insn 439: point = 287
   Insn 438: point = 289
   Insn 437: point = 290
   Insn 436: point = 290
   Insn 435: point = 291
   Insn 434: point = 291
   Insn 433: point = 292
   Insn 432: point = 293
   Insn 431: point = 294
   Insn 430: point = 294
   Insn 429: point = 294
  BB 34
   Insn 427: point = 294
   Insn 426: point = 294
   Insn 425: point = 295
   Insn 424: point = 296
   Insn 423: point = 296
   Insn 422: point = 297
   Insn 421: point = 297
  BB 33
   Insn 883: point = 298
   Insn 416: point = 298
   Insn 415: point = 299
   Insn 938: point = 300
	Hard reg 0 is preferable by r352 with profit 1
   Insn 414: point = 302
   Insn 413: point = 304
   Insn 412: point = 305
   Insn 411: point = 305
   Insn 410: point = 306
   Insn 409: point = 306
   Insn 408: point = 307
   Insn 407: point = 308
   Insn 406: point = 309
   Insn 405: point = 309
   Insn 404: point = 309
  BB 32
   Insn 402: point = 309
   Insn 401: point = 309
   Insn 400: point = 310
   Insn 399: point = 311
   Insn 398: point = 311
   Insn 397: point = 312
   Insn 396: point = 312
  BB 31
   Insn 881: point = 313
   Insn 391: point = 313
   Insn 390: point = 314
   Insn 937: point = 315
	Hard reg 0 is preferable by r351 with profit 1
   Insn 389: point = 317
   Insn 388: point = 319
   Insn 387: point = 320
   Insn 386: point = 320
   Insn 385: point = 321
   Insn 384: point = 321
   Insn 383: point = 322
   Insn 382: point = 323
   Insn 381: point = 324
   Insn 380: point = 324
   Insn 379: point = 324
  BB 30
   Insn 377: point = 324
   Insn 376: point = 324
   Insn 375: point = 325
   Insn 374: point = 326
   Insn 373: point = 326
   Insn 372: point = 327
   Insn 371: point = 327
  BB 29
   Insn 879: point = 328
   Insn 366: point = 328
   Insn 365: point = 329
   Insn 936: point = 330
	Hard reg 0 is preferable by r350 with profit 1
   Insn 364: point = 332
   Insn 935: point = 333
	Hard reg 0 is preferable by r350 with profit 1
	Hard reg 21 is preferable by r350 with profit 1
   Insn 363: point = 335
   Insn 362: point = 336
   Insn 361: point = 338
   Insn 360: point = 339
   Insn 359: point = 340
   Insn 934: point = 341
	Hard reg 0 is preferable by r349 with profit 1
   Insn 358: point = 343
   Insn 357: point = 345
   Insn 356: point = 346
   Insn 355: point = 346
   Insn 354: point = 347
   Insn 353: point = 347
   Insn 352: point = 348
   Insn 351: point = 349
   Insn 350: point = 350
   Insn 349: point = 350
   Insn 348: point = 350
  BB 28
   Insn 346: point = 350
   Insn 345: point = 350
   Insn 344: point = 351
   Insn 343: point = 352
   Insn 342: point = 352
   Insn 341: point = 353
   Insn 340: point = 353
  BB 27
   Insn 877: point = 354
   Insn 335: point = 354
   Insn 334: point = 355
   Insn 933: point = 356
	Hard reg 0 is preferable by r348 with profit 1
   Insn 333: point = 358
   Insn 932: point = 359
	Hard reg 0 is preferable by r348 with profit 1
	Hard reg 21 is preferable by r348 with profit 1
   Insn 332: point = 361
   Insn 331: point = 362
   Insn 330: point = 364
   Insn 329: point = 365
   Insn 328: point = 366
   Insn 931: point = 367
	Hard reg 0 is preferable by r347 with profit 1
   Insn 327: point = 369
   Insn 326: point = 371
   Insn 325: point = 372
   Insn 324: point = 372
   Insn 323: point = 373
   Insn 322: point = 373
   Insn 321: point = 374
   Insn 320: point = 375
   Insn 319: point = 376
   Insn 318: point = 376
   Insn 317: point = 376
  BB 26
   Insn 315: point = 376
   Insn 314: point = 376
   Insn 313: point = 377
   Insn 312: point = 378
   Insn 311: point = 378
   Insn 310: point = 379
   Insn 309: point = 379
  BB 25
   Insn 875: point = 380
   Insn 304: point = 380
   Insn 303: point = 380
   Insn 302: point = 381
   Insn 301: point = 382
   Insn 300: point = 383
   Insn 299: point = 384
   Insn 298: point = 385
   Insn 297: point = 386
   Insn 296: point = 386
   Insn 295: point = 386
  BB 24
   Insn 293: point = 386
   Insn 292: point = 386
   Insn 291: point = 387
   Insn 290: point = 388
   Insn 289: point = 388
   Insn 288: point = 389
   Insn 287: point = 389
  BB 23
   Insn 873: point = 390
   Insn 282: point = 390
   Insn 281: point = 390
   Insn 280: point = 391
   Insn 279: point = 392
   Insn 278: point = 393
   Insn 277: point = 394
   Insn 276: point = 395
   Insn 275: point = 396
   Insn 274: point = 396
   Insn 273: point = 396
  BB 22
   Insn 271: point = 396
   Insn 270: point = 396
   Insn 269: point = 397
   Insn 268: point = 398
   Insn 267: point = 398
   Insn 266: point = 399
   Insn 265: point = 399
  BB 21
   Insn 871: point = 400
   Insn 260: point = 400
   Insn 259: point = 400
   Insn 258: point = 401
   Insn 257: point = 402
   Insn 256: point = 403
   Insn 255: point = 405
   Insn 254: point = 406
   Insn 253: point = 407
   Insn 252: point = 408
   Insn 251: point = 408
   Insn 250: point = 408
  BB 20
   Insn 248: point = 408
   Insn 247: point = 408
   Insn 246: point = 409
   Insn 245: point = 410
   Insn 244: point = 410
   Insn 243: point = 411
   Insn 242: point = 411
  BB 19
   Insn 869: point = 412
   Insn 237: point = 412
   Insn 236: point = 412
   Insn 235: point = 413
   Insn 234: point = 414
   Insn 233: point = 415
   Insn 232: point = 417
   Insn 231: point = 418
   Insn 230: point = 419
   Insn 229: point = 420
   Insn 228: point = 420
   Insn 227: point = 420
  BB 18
   Insn 225: point = 420
   Insn 224: point = 420
   Insn 223: point = 421
   Insn 222: point = 422
   Insn 221: point = 422
   Insn 220: point = 423
   Insn 219: point = 423
  BB 17
   Insn 867: point = 424
   Insn 214: point = 424
   Insn 213: point = 424
   Insn 212: point = 425
   Insn 211: point = 426
   Insn 210: point = 427
   Insn 209: point = 429
   Insn 208: point = 430
   Insn 207: point = 431
   Insn 206: point = 432
   Insn 205: point = 432
   Insn 204: point = 432
  BB 16
   Insn 202: point = 432
   Insn 201: point = 432
   Insn 200: point = 433
   Insn 199: point = 434
   Insn 198: point = 434
   Insn 197: point = 435
   Insn 196: point = 435
  BB 15
   Insn 865: point = 436
   Insn 191: point = 436
   Insn 190: point = 437
   Insn 189: point = 438
   Insn 188: point = 439
   Insn 187: point = 439
   Insn 186: point = 440
   Insn 185: point = 440
   Insn 184: point = 441
   Insn 183: point = 442
   Insn 182: point = 443
   Insn 181: point = 443
   Insn 180: point = 443
  BB 14
   Insn 178: point = 443
   Insn 177: point = 443
   Insn 176: point = 444
   Insn 175: point = 445
   Insn 174: point = 445
   Insn 173: point = 446
   Insn 172: point = 446
  BB 13
   Insn 863: point = 447
   Insn 167: point = 447
   Insn 930: point = 448
	Hard reg 0 is preferable by r346 with profit 1
   Insn 166: point = 450
   Insn 929: point = 450
	Hard reg 0 is preferable by r346 with profit 1
	Hard reg 21 is preferable by r346 with profit 1
   Insn 165: point = 452
   Insn 164: point = 453
   Insn 163: point = 454
   Insn 928: point = 455
	Hard reg 0 is preferable by r345 with profit 1
   Insn 162: point = 457
   Insn 927: point = 458
	Hard reg 0 is preferable by r345 with profit 1
	Hard reg 21 is preferable by r345 with profit 1
   Insn 161: point = 460
   Insn 160: point = 461
   Insn 926: point = 462
   Insn 159: point = 463
   Insn 158: point = 465
   Insn 157: point = 466
   Insn 156: point = 466
   Insn 155: point = 467
   Insn 154: point = 467
   Insn 153: point = 468
   Insn 152: point = 469
   Insn 151: point = 470
   Insn 150: point = 470
   Insn 149: point = 470
   Insn 148: point = 470
   Insn 147: point = 471
  BB 12
   Insn 145: point = 472
   Insn 144: point = 472
   Insn 143: point = 473
   Insn 142: point = 474
   Insn 141: point = 474
   Insn 140: point = 475
   Insn 139: point = 475
  BB 11
   Insn 861: point = 476
   Insn 134: point = 476
   Insn 133: point = 477
   Insn 132: point = 478
   Insn 131: point = 480
   Insn 130: point = 481
   Insn 129: point = 481
   Insn 128: point = 482
   Insn 127: point = 482
   Insn 126: point = 482
   Insn 125: point = 483
   Insn 124: point = 484
   Insn 123: point = 485
   Insn 122: point = 485
   Insn 121: point = 485
  BB 10
   Insn 119: point = 485
   Insn 118: point = 485
   Insn 117: point = 486
   Insn 116: point = 487
   Insn 115: point = 487
   Insn 114: point = 488
   Insn 113: point = 488
  BB 9
   Insn 859: point = 489
   Insn 108: point = 489
   Insn 107: point = 490
   Insn 106: point = 491
   Insn 105: point = 493
   Insn 104: point = 495
   Insn 103: point = 496
   Insn 102: point = 497
   Insn 101: point = 498
   Insn 100: point = 499
   Insn 99: point = 499
   Insn 98: point = 500
   Insn 97: point = 500
   Insn 96: point = 500
   Insn 95: point = 501
   Insn 94: point = 502
   Insn 93: point = 503
   Insn 92: point = 503
   Insn 91: point = 503
  BB 8
   Insn 89: point = 503
   Insn 88: point = 503
   Insn 87: point = 504
   Insn 86: point = 505
   Insn 85: point = 505
   Insn 84: point = 506
   Insn 83: point = 506
  BB 7
   Insn 857: point = 507
   Insn 78: point = 507
   Insn 77: point = 508
   Insn 76: point = 509
   Insn 75: point = 510
   Insn 74: point = 510
   Insn 73: point = 511
   Insn 72: point = 512
  BB 6
   Insn 70: point = 512
   Insn 69: point = 512
   Insn 68: point = 513
   Insn 67: point = 514
   Insn 66: point = 514
   Insn 65: point = 515
   Insn 64: point = 515
   Insn 63: point = 516
   Insn 62: point = 517
   Insn 61: point = 518
   Insn 60: point = 518
   Insn 59: point = 518
  BB 5
   Insn 57: point = 518
   Insn 56: point = 518
   Insn 55: point = 519
   Insn 54: point = 520
   Insn 53: point = 520
   Insn 52: point = 521
   Insn 51: point = 521
   Insn 50: point = 522
   Insn 49: point = 523
   Insn 48: point = 524
   Insn 47: point = 524
   Insn 46: point = 525
   Insn 45: point = 525
 r83: [3..8]
 r84: [202..205]
 r85: [56..59]
 r86: [216..217]
 r87: [214..215]
 r88: [210..211]
 r89: [206..207]
 r90: [518..519]
 r91: [512..513]
 r92: [507..509]
 r93: [503..504]
 r94: [496..498]
 r95: [492..493]
 r96: [489..491]
 r97: [485..486]
 r98: [479..480]
 r99: [476..478]
 r100: [472..473]
 r101: [464..465]
 r102: [453..455]
 r103: [443..444]
 r104: [436..438]
 r105: [432..433]
 r106: [424..427]
 r107: [420..421]
 r108: [412..415]
 r109: [408..409]
 r110: [400..403]
 r111: [396..397]
 r112: [386..387]
 r113: [376..377]
 r114: [370..371]
 r115: [365..367]
 r116: [360..362]
 r117: [354..356]
 r118: [350..351]
 r119: [344..345]
 r120: [339..341]
 r121: [334..336]
 r122: [328..330]
 r123: [324..325]
 r124: [318..319]
 r125: [313..315]
 r126: [309..310]
 r127: [303..304]
 r128: [298..300]
 r129: [294..295]
 r130: [288..289]
 r131: [283..285]
 r132: [279..280]
 r133: [273..274]
 r134: [268..270]
 r135: [264..265]
 r136: [243..244]
 r137: [238..240]
 r138: [260..261]
 r139: [254..255]
 r140: [249..251]
 r141: [230..231]
 r142: [228..229]
 r143: [200..201]
 r144: [198..199]
 r145: [194..195]
 r146: [182..183]
 r147: [178..179]
 r148: [174..175]
 r149: [170..171]
 r150: [166..167]
 r151: [162..163]
 r152: [158..159]
 r153: [154..155]
 r154: [150..151]
 r155: [146..147]
 r156: [142..143]
 r157: [138..139]
 r158: [186..187]
 r159: [133..135]
 r160: [130..132]
 r161: [125..127]
 r162: [122..124]
 r163: [119..121]
 r164: [116..118]
 r165: [102..103]
 r166: [100..101]
 r167: [95..97]
 r168: [88..89]
 r169: [86..87]
 r170: [74..75]
 r171: [68..69]
 r172: [66..67]
 r173: [60..61]
 r174: [80..81]
 r175: [39..40]
 r176: [36..38]
 r177: [27..33]
 r178: [29..30]
 r179: [27..28]
 r180: [20..26]
 r181: [22..23]
 r182: [20..21]
 r183: [17..19]
 r184: [11..12]
 r185: [9..10]
 r186: [1..2]
 r187: [224..225]
 r188: [221..223]
 r189: [220..222]
 r190: [218..219]
 r191: [524..525]
 r192: [522..523]
 r193: [520..521]
 r194: [516..517]
 r195: [514..515]
 r196: [510..511]
 r197: [507..508]
 r198: [505..506]
 r199: [501..502]
 r200: [499..500]
 r201: [496..497]
 r202: [494..495]
 r203: [489..490]
 r204: [487..488]
 r205: [483..484]
 r206: [481..482]
 r207: [476..477]
 r208: [474..475]
 r209: [470..471]
 r210: [468..469]
 r211: [466..467]
 r212: [459..461]
 r213: [457..460]
 r214: [453..454]
 r215: [447..448]
 r216: [451..452]
 r217: [445..446]
 r218: [441..442]
 r219: [439..440]
 r220: [436..437]
 r221: [434..435]
 r222: [430..431]
 r223: [428..429]
 r224: [425..426]
 r225: [422..423]
 r226: [418..419]
 r227: [416..417]
 r228: [413..414]
 r229: [410..411]
 r230: [406..407]
 r231: [404..405]
 r232: [401..402]
 r233: [398..399]
 r234: [394..395]
 r235: [391..393]
 r236: [390..392]
 r237: [388..389]
 r238: [384..385]
 r239: [381..383]
 r240: [380..382]
 r241: [378..379]
 r242: [374..375]
 r243: [372..373]
 r244: [365..366]
 r245: [363..364]
 r246: [358..361]
 r247: [354..355]
 r248: [352..353]
 r249: [348..349]
 r250: [346..347]
 r251: [339..340]
 r252: [337..338]
 r253: [332..335]
 r254: [328..329]
 r255: [326..327]
 r256: [322..323]
 r257: [320..321]
 r258: [313..314]
 r259: [311..312]
 r260: [307..308]
 r261: [305..306]
 r262: [298..299]
 r263: [296..297]
 r264: [292..293]
 r265: [290..291]
 r266: [283..284]
 r267: [281..282]
 r268: [277..278]
 r269: [275..276]
 r270: [268..269]
 r271: [266..267]
 r272: [247..248]
 r273: [245..246]
 r274: [238..239]
 r275: [262..263]
 r276: [258..259]
 r277: [256..257]
 r278: [249..250]
 r279: [235..237]
 r280: [234..236]
 r281: [232..233]
 r282: [212..213]
 r283: [208..209]
 r284: [196..197]
 r285: [192..193]
 r286: [190..191]
 r287: [184..185]
 r288: [180..181]
 r289: [176..177]
 r290: [172..173]
 r291: [168..169]
 r292: [164..165]
 r293: [160..161]
 r294: [156..157]
 r295: [152..153]
 r296: [148..149]
 r297: [144..145]
 r298: [140..141]
 r299: [188..189]
 r300: [136..137]
 r301: [133..134]
 r302: [130..131]
 r303: [128..129]
 r304: [125..126]
 r305: [122..123]
 r306: [119..120]
 r307: [116..117]
 r308: [114..115]
 r309: [111..113]
 r310: [111..112]
 r311: [109..110]
 r312: [106..108]
 r313: [106..107]
 r314: [104..105]
 r315: [95..96]
 r316: [92..94]
 r317: [92..93]
 r318: [90..91]
 r319: [76..77]
 r320: [84..85]
 r321: [82..83]
 r322: [70..71]
 r323: [64..65]
 r324: [53..55]
 r325: [53..54]
 r326: [51..52]
 r327: [49..50]
 r328: [47..48]
 r329: [45..46]
 r330: [43..44]
 r331: [41..42]
 r332: [36..37]
 r333: [34..35]
 r334: [31..32]
 r335: [24..25]
 r338: [15..16]
 r339: [17..18]
 r340: [13..14]
 r342: [226..227]
 r343: [0..0]
 r344: [462..463]
 r345: [456..458]
 r346: [449..450]
 r347: [368..369]
 r348: [357..359]
 r349: [342..343]
 r350: [331..333]
 r351: [316..317]
 r352: [301..302]
 r353: [286..287]
 r354: [271..272]
 r355: [241..242]
 r356: [252..253]
 r357: [98..99]
 r358: [72..73]
 r359: [78..79]
 r360: [62..63]
Compressing live ranges: from 526 to 467 - 88%
Ranges after the compression:
 r83: [3..4]
 r84: [181..182]
 r85: [47..48]
 r86: [193..194]
 r87: [191..192]
 r88: [187..188]
 r89: [183..184]
 r90: [459..460]
 r91: [453..454]
 r92: [449..450]
 r93: [445..446]
 r94: [439..440]
 r95: [435..436]
 r96: [433..434]
 r97: [429..430]
 r98: [423..424]
 r99: [421..422]
 r100: [417..418]
 r101: [409..410]
 r102: [401..402]
 r103: [391..392]
 r104: [385..386]
 r105: [381..382]
 r106: [375..376]
 r107: [371..372]
 r108: [365..366]
 r109: [361..362]
 r110: [355..356]
 r111: [351..352]
 r112: [343..344]
 r113: [335..336]
 r114: [329..330]
 r115: [325..326]
 r116: [321..322]
 r117: [317..318]
 r118: [313..314]
 r119: [307..308]
 r120: [303..304]
 r121: [299..300]
 r122: [295..296]
 r123: [291..292]
 r124: [285..286]
 r125: [281..282]
 r126: [277..278]
 r127: [271..272]
 r128: [267..268]
 r129: [263..264]
 r130: [257..258]
 r131: [253..254]
 r132: [249..250]
 r133: [243..244]
 r134: [239..240]
 r135: [235..236]
 r136: [215..216]
 r137: [211..212]
 r138: [231..232]
 r139: [225..226]
 r140: [221..222]
 r141: [205..206]
 r142: [203..204]
 r143: [179..180]
 r144: [177..178]
 r145: [173..174]
 r146: [161..162]
 r147: [157..158]
 r148: [153..154]
 r149: [149..150]
 r150: [145..146]
 r151: [141..142]
 r152: [137..138]
 r153: [133..134]
 r154: [129..130]
 r155: [125..126]
 r156: [121..122]
 r157: [117..118]
 r158: [165..166]
 r159: [113..114]
 r160: [111..112]
 r161: [107..108]
 r162: [105..106]
 r163: [103..104]
 r164: [101..102]
 r165: [89..90]
 r166: [87..88]
 r167: [83..84]
 r168: [77..78]
 r169: [75..76]
 r170: [63..64]
 r171: [57..58]
 r172: [55..56]
 r173: [49..50]
 r174: [69..70]
 r175: [31..32]
 r176: [29..30]
 r177: [21..26]
 r178: [23..24]
 r179: [21..22]
 r180: [15..20]
 r181: [17..18]
 r182: [15..16]
 r183: [13..14]
 r184: [7..8]
 r185: [5..6]
 r186: [1..2]
 r187: [199..200]
 r188: [197..198]
 r189: [197..198]
 r190: [195..196]
 r191: [465..466]
 r192: [463..464]
 r193: [461..462]
 r194: [457..458]
 r195: [455..456]
 r196: [451..452]
 r197: [449..450]
 r198: [447..448]
 r199: [443..444]
 r200: [441..442]
 r201: [439..440]
 r202: [437..438]
 r203: [433..434]
 r204: [431..432]
 r205: [427..428]
 r206: [425..426]
 r207: [421..422]
 r208: [419..420]
 r209: [415..416]
 r210: [413..414]
 r211: [411..412]
 r212: [405..406]
 r213: [403..406]
 r214: [401..402]
 r215: [395..396]
 r216: [399..400]
 r217: [393..394]
 r218: [389..390]
 r219: [387..388]
 r220: [385..386]
 r221: [383..384]
 r222: [379..380]
 r223: [377..378]
 r224: [375..376]
 r225: [373..374]
 r226: [369..370]
 r227: [367..368]
 r228: [365..366]
 r229: [363..364]
 r230: [359..360]
 r231: [357..358]
 r232: [355..356]
 r233: [353..354]
 r234: [349..350]
 r235: [347..348]
 r236: [347..348]
 r237: [345..346]
 r238: [341..342]
 r239: [339..340]
 r240: [339..340]
 r241: [337..338]
 r242: [333..334]
 r243: [331..332]
 r244: [325..326]
 r245: [323..324]
 r246: [319..322]
 r247: [317..318]
 r248: [315..316]
 r249: [311..312]
 r250: [309..310]
 r251: [303..304]
 r252: [301..302]
 r253: [297..300]
 r254: [295..296]
 r255: [293..294]
 r256: [289..290]
 r257: [287..288]
 r258: [281..282]
 r259: [279..280]
 r260: [275..276]
 r261: [273..274]
 r262: [267..268]
 r263: [265..266]
 r264: [261..262]
 r265: [259..260]
 r266: [253..254]
 r267: [251..252]
 r268: [247..248]
 r269: [245..246]
 r270: [239..240]
 r271: [237..238]
 r272: [219..220]
 r273: [217..218]
 r274: [211..212]
 r275: [233..234]
 r276: [229..230]
 r277: [227..228]
 r278: [221..222]
 r279: [209..210]
 r280: [209..210]
 r281: [207..208]
 r282: [189..190]
 r283: [185..186]
 r284: [175..176]
 r285: [171..172]
 r286: [169..170]
 r287: [163..164]
 r288: [159..160]
 r289: [155..156]
 r290: [151..152]
 r291: [147..148]
 r292: [143..144]
 r293: [139..140]
 r294: [135..136]
 r295: [131..132]
 r296: [127..128]
 r297: [123..124]
 r298: [119..120]
 r299: [167..168]
 r300: [115..116]
 r301: [113..114]
 r302: [111..112]
 r303: [109..110]
 r304: [107..108]
 r305: [105..106]
 r306: [103..104]
 r307: [101..102]
 r308: [99..100]
 r309: [97..98]
 r310: [97..98]
 r311: [95..96]
 r312: [93..94]
 r313: [93..94]
 r314: [91..92]
 r315: [83..84]
 r316: [81..82]
 r317: [81..82]
 r318: [79..80]
 r319: [65..66]
 r320: [73..74]
 r321: [71..72]
 r322: [59..60]
 r323: [53..54]
 r324: [45..46]
 r325: [45..46]
 r326: [43..44]
 r327: [41..42]
 r328: [39..40]
 r329: [37..38]
 r330: [35..36]
 r331: [33..34]
 r332: [29..30]
 r333: [27..28]
 r334: [25..26]
 r335: [19..20]
 r338: [11..12]
 r339: [13..14]
 r340: [9..10]
 r342: [201..202]
 r343: [0..0]
 r344: [407..408]
 r345: [403..404]
 r346: [397..398]
 r347: [327..328]
 r348: [319..320]
 r349: [305..306]
 r350: [297..298]
 r351: [283..284]
 r352: [269..270]
 r353: [255..256]
 r354: [241..242]
 r355: [213..214]
 r356: [223..224]
 r357: [85..86]
 r358: [61..62]
 r359: [67..68]
 r360: [51..52]

********** Assignment #1: **********

	 Assigning to 342 (cl=INDEX_REGS, orig=342, freq=1, tfirst=342, tfreq=1)...
	   Assign 0 to reload r342 (freq=1)
	 Assigning to 343 (cl=INDEX_REGS, orig=343, freq=1, tfirst=343, tfreq=1)...
	   Assign 2 to reload r343 (freq=1)
	 Assigning to 345 (cl=SSE_REGS, orig=102, freq=3, tfirst=345, tfreq=3)...
	   Assign 21 to reload r345 (freq=3)
	 Assigning to 346 (cl=SSE_REGS, orig=215, freq=3, tfirst=346, tfreq=3)...
	   Assign 21 to reload r346 (freq=3)
	 Assigning to 348 (cl=SSE_REGS, orig=117, freq=3, tfirst=348, tfreq=3)...
	   Assign 21 to reload r348 (freq=3)
	 Assigning to 350 (cl=SSE_REGS, orig=122, freq=3, tfirst=350, tfreq=3)...
	   Assign 21 to reload r350 (freq=3)
	 Assigning to 357 (cl=SSE_REGS, orig=167, freq=3, tfirst=357, tfreq=3)...
	   Assign 21 to reload r357 (freq=3)
	 Assigning to 344 (cl=SSE_REGS, orig=344, freq=2, tfirst=344, tfreq=2)...
	   Assign 23 to reload r344 (freq=2)
	 Assigning to 347 (cl=SSE_REGS, orig=115, freq=2, tfirst=347, tfreq=2)...
	   Assign 24 to reload r347 (freq=2)
	 Assigning to 349 (cl=SSE_REGS, orig=120, freq=2, tfirst=349, tfreq=2)...
	   Assign 25 to reload r349 (freq=2)
	 Assigning to 351 (cl=SSE_REGS, orig=125, freq=2, tfirst=351, tfreq=2)...
	   Assign 26 to reload r351 (freq=2)
	 Assigning to 352 (cl=SSE_REGS, orig=128, freq=2, tfirst=352, tfreq=2)...
	   Assign 27 to reload r352 (freq=2)
	 Assigning to 353 (cl=SSE_REGS, orig=131, freq=2, tfirst=353, tfreq=2)...
	   Assign 28 to reload r353 (freq=2)
	 Assigning to 354 (cl=SSE_REGS, orig=134, freq=2, tfirst=354, tfreq=2)...
	   Assign 23 to reload r354 (freq=2)
	 Assigning to 355 (cl=SSE_REGS, orig=137, freq=2, tfirst=355, tfreq=2)...
	   Assign 24 to reload r355 (freq=2)
	 Assigning to 356 (cl=SSE_REGS, orig=140, freq=2, tfirst=356, tfreq=2)...
	   Assign 25 to reload r356 (freq=2)
	 Assigning to 358 (cl=SSE_REGS, orig=358, freq=2, tfirst=358, tfreq=2)...
	   Assign 26 to reload r358 (freq=2)
	 Assigning to 359 (cl=SSE_REGS, orig=359, freq=2, tfirst=359, tfreq=2)...
	   Assign 27 to reload r359 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 4):	 360
Changing spilled pseudos to memory in insn #763
Changing spilled pseudos to memory in insn #947
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 7 for insn #947
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 947:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 763:  (0) ?m  (1) rF {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=768, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=752, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 833
changing reg in insn 828
changing reg in insn 535
changing reg in insn 37
changing reg in insn 838
changing reg in insn 557
changing reg in insn 552
changing reg in insn 561
changing reg in insn 775
changing reg in insn 770
changing reg in insn 779
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 543
changing reg in insn 544
changing reg in insn 548
changing reg in insn 549
changing reg in insn 55
changing reg in insn 56
changing reg in insn 68
changing reg in insn 69
changing reg in insn 76
changing reg in insn 78
changing reg in insn 87
changing reg in insn 88
changing reg in insn 101
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 117
changing reg in insn 118
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 143
changing reg in insn 144
changing reg in insn 158
changing reg in insn 159
changing reg in insn 164
changing reg in insn 176
changing reg in insn 177
changing reg in insn 189
changing reg in insn 191
changing reg in insn 200
changing reg in insn 201
changing reg in insn 210
changing reg in insn 213
changing reg in insn 223
changing reg in insn 224
changing reg in insn 233
changing reg in insn 236
changing reg in insn 246
changing reg in insn 247
changing reg in insn 256
changing reg in insn 259
changing reg in insn 269
changing reg in insn 270
changing reg in insn 291
changing reg in insn 292
changing reg in insn 313
changing reg in insn 314
changing reg in insn 326
changing reg in insn 327
changing reg in insn 329
changing reg in insn 331
changing reg in insn 335
changing reg in insn 344
changing reg in insn 345
changing reg in insn 357
changing reg in insn 358
changing reg in insn 360
changing reg in insn 362
changing reg in insn 366
changing reg in insn 375
changing reg in insn 376
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 400
changing reg in insn 401
changing reg in insn 413
changing reg in insn 414
changing reg in insn 416
changing reg in insn 425
changing reg in insn 426
changing reg in insn 438
changing reg in insn 439
changing reg in insn 441
changing reg in insn 450
changing reg in insn 451
changing reg in insn 463
changing reg in insn 464
changing reg in insn 466
changing reg in insn 475
changing reg in insn 476
changing reg in insn 488
changing reg in insn 489
changing reg in insn 491
changing reg in insn 500
changing reg in insn 501
changing reg in insn 513
changing reg in insn 514
changing reg in insn 516
changing reg in insn 529
changing reg in insn 530
changing reg in insn 531
changing reg in insn 532
changing reg in insn 564
changing reg in insn 565
changing reg in insn 566
changing reg in insn 567
changing reg in insn 574
changing reg in insn 588
changing reg in insn 589
changing reg in insn 595
changing reg in insn 596
changing reg in insn 602
changing reg in insn 603
changing reg in insn 609
changing reg in insn 610
changing reg in insn 616
changing reg in insn 617
changing reg in insn 623
changing reg in insn 624
changing reg in insn 630
changing reg in insn 631
changing reg in insn 637
changing reg in insn 638
changing reg in insn 644
changing reg in insn 645
changing reg in insn 651
changing reg in insn 652
changing reg in insn 658
changing reg in insn 659
changing reg in insn 665
changing reg in insn 666
changing reg in insn 672
changing reg in insn 673
changing reg in insn 678
changing reg in insn 680
changing reg in insn 681
changing reg in insn 683
changing reg in insn 686
changing reg in insn 688
changing reg in insn 689
changing reg in insn 691
changing reg in insn 692
changing reg in insn 694
changing reg in insn 695
changing reg in insn 697
changing reg in insn 709
changing reg in insn 710
changing reg in insn 710
changing reg in insn 713
changing reg in insn 725
changing reg in insn 726
changing reg in insn 726
changing reg in insn 727
changing reg in insn 734
changing reg in insn 735
changing reg in insn 757
changing reg in insn 758
changing reg in insn 758
changing reg in insn 759
changing reg in insn 765
changing reg in insn 766
changing reg in insn 750
changing reg in insn 751
changing reg in insn 802
changing reg in insn 803
changing reg in insn 805
changing reg in insn 807
changing reg in insn 811
changing reg in insn 809
changing reg in insn 810
changing reg in insn 810
changing reg in insn 811
changing reg in insn 811
changing reg in insn 815
changing reg in insn 813
changing reg in insn 814
changing reg in insn 814
changing reg in insn 815
changing reg in insn 815
changing reg in insn 820
changing reg in insn 823
changing reg in insn 824
changing reg in insn 824
changing reg in insn 825
changing reg in insn 838
changing reg in insn 842
changing reg in insn 13
changing reg in insn 14
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 73
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 83
changing reg in insn 85
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 99
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 113
changing reg in insn 115
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 133
changing reg in insn 134
changing reg in insn 139
changing reg in insn 141
changing reg in insn 147
changing reg in insn 148
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 165
changing reg in insn 172
changing reg in insn 174
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 198
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 219
changing reg in insn 221
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 242
changing reg in insn 244
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 265
changing reg in insn 267
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 279
changing reg in insn 281
changing reg in insn 287
changing reg in insn 289
changing reg in insn 298
changing reg in insn 299
changing reg in insn 300
changing reg in insn 302
changing reg in insn 301
changing reg in insn 303
changing reg in insn 309
changing reg in insn 311
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 324
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 334
changing reg in insn 335
changing reg in insn 340
changing reg in insn 342
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 355
changing reg in insn 359
changing reg in insn 360
changing reg in insn 361
changing reg in insn 362
changing reg in insn 363
changing reg in insn 364
changing reg in insn 365
changing reg in insn 366
changing reg in insn 371
changing reg in insn 373
changing reg in insn 382
changing reg in insn 383
changing reg in insn 384
changing reg in insn 386
changing reg in insn 390
changing reg in insn 391
changing reg in insn 396
changing reg in insn 398
changing reg in insn 407
changing reg in insn 408
changing reg in insn 409
changing reg in insn 411
changing reg in insn 415
changing reg in insn 416
changing reg in insn 421
changing reg in insn 423
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 436
changing reg in insn 440
changing reg in insn 441
changing reg in insn 446
changing reg in insn 448
changing reg in insn 457
changing reg in insn 458
changing reg in insn 459
changing reg in insn 461
changing reg in insn 465
changing reg in insn 466
changing reg in insn 471
changing reg in insn 473
changing reg in insn 482
changing reg in insn 483
changing reg in insn 484
changing reg in insn 486
changing reg in insn 490
changing reg in insn 491
changing reg in insn 496
changing reg in insn 498
changing reg in insn 507
changing reg in insn 508
changing reg in insn 509
changing reg in insn 511
changing reg in insn 515
changing reg in insn 516
changing reg in insn 519
changing reg in insn 521
changing reg in insn 520
changing reg in insn 523
changing reg in insn 526
changing reg in insn 527
changing reg in insn 540
changing reg in insn 541
changing reg in insn 547
changing reg in insn 548
changing reg in insn 569
changing reg in insn 572
changing reg in insn 578
changing reg in insn 579
changing reg in insn 579
changing reg in insn 580
changing reg in insn 587
changing reg in insn 588
changing reg in insn 594
changing reg in insn 595
changing reg in insn 601
changing reg in insn 602
changing reg in insn 608
changing reg in insn 609
changing reg in insn 615
changing reg in insn 616
changing reg in insn 622
changing reg in insn 623
changing reg in insn 629
changing reg in insn 630
changing reg in insn 636
changing reg in insn 637
changing reg in insn 643
changing reg in insn 644
changing reg in insn 650
changing reg in insn 651
changing reg in insn 657
changing reg in insn 658
changing reg in insn 664
changing reg in insn 665
changing reg in insn 671
changing reg in insn 672
changing reg in insn 676
changing reg in insn 677
changing reg in insn 679
changing reg in insn 680
changing reg in insn 682
changing reg in insn 683
changing reg in insn 684
changing reg in insn 685
changing reg in insn 687
changing reg in insn 688
changing reg in insn 690
changing reg in insn 691
changing reg in insn 693
changing reg in insn 694
changing reg in insn 696
changing reg in insn 697
changing reg in insn 698
changing reg in insn 699
changing reg in insn 700
changing reg in insn 702
changing reg in insn 701
changing reg in insn 702
changing reg in insn 703
changing reg in insn 704
changing reg in insn 705
changing reg in insn 707
changing reg in insn 706
changing reg in insn 707
changing reg in insn 708
changing reg in insn 709
changing reg in insn 712
changing reg in insn 713
changing reg in insn 714
changing reg in insn 716
changing reg in insn 715
changing reg in insn 716
changing reg in insn 722
changing reg in insn 723
changing reg in insn 730
changing reg in insn 732
changing reg in insn 742
changing reg in insn 743
changing reg in insn 746
changing reg in insn 748
changing reg in insn 754
changing reg in insn 755
changing reg in insn 762
changing reg in insn 763
changing reg in insn 782
changing reg in insn 784
changing reg in insn 783
changing reg in insn 784
changing reg in insn 787
changing reg in insn 788
changing reg in insn 789
changing reg in insn 790
changing reg in insn 791
changing reg in insn 794
changing reg in insn 796
changing reg in insn 797
changing reg in insn 797
changing reg in insn 798
changing reg in insn 799
changing reg in insn 800
changing reg in insn 804
changing reg in insn 805
changing reg in insn 806
changing reg in insn 807
changing reg in insn 808
changing reg in insn 809
changing reg in insn 812
changing reg in insn 813
changing reg in insn 820
changing reg in insn 821
changing reg in insn 819
changing reg in insn 822
changing reg in insn 823
changing reg in insn 9
changing reg in insn 843
deleting insn with uid = 24.
deleting insn with uid = 158.
deleting insn with uid = 927.
deleting insn with uid = 929.
deleting insn with uid = 326.
deleting insn with uid = 932.
deleting insn with uid = 357.
deleting insn with uid = 935.
deleting insn with uid = 388.
deleting insn with uid = 413.
deleting insn with uid = 438.
deleting insn with uid = 463.
deleting insn with uid = 488.
deleting insn with uid = 513.
deleting insn with uid = 521.
deleting insn with uid = 943.
deleting insn with uid = 734.
deleting insn with uid = 750.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 151.
verify found no changes in insn with uid = 157.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 188.
verify found no changes in insn with uid = 199.
verify found no changes in insn with uid = 206.
verify found no changes in insn with uid = 214.
verify found no changes in insn with uid = 222.
verify found no changes in insn with uid = 229.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 245.
verify found no changes in insn with uid = 252.
verify found no changes in insn with uid = 260.
verify found no changes in insn with uid = 268.
verify found no changes in insn with uid = 275.
verify found no changes in insn with uid = 282.
verify found no changes in insn with uid = 290.
verify found no changes in insn with uid = 297.
verify found no changes in insn with uid = 304.
verify found no changes in insn with uid = 312.
verify found no changes in insn with uid = 319.
verify found no changes in insn with uid = 325.
verify found no changes in insn with uid = 343.
verify found no changes in insn with uid = 350.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 374.
verify found no changes in insn with uid = 381.
verify found no changes in insn with uid = 387.
verify found no changes in insn with uid = 399.
verify found no changes in insn with uid = 406.
verify found no changes in insn with uid = 412.
verify found no changes in insn with uid = 424.
verify found no changes in insn with uid = 431.
verify found no changes in insn with uid = 437.
verify found no changes in insn with uid = 449.
verify found no changes in insn with uid = 456.
verify found no changes in insn with uid = 462.
verify found no changes in insn with uid = 474.
verify found no changes in insn with uid = 481.
verify found no changes in insn with uid = 487.
verify found no changes in insn with uid = 499.
verify found no changes in insn with uid = 506.
verify found no changes in insn with uid = 512.
verify found no changes in insn with uid = 524.
verify found no changes in insn with uid = 528.
verify found no changes in insn with uid = 542.
verify found no changes in insn with uid = 573.
verify found no changes in insn with uid = 718.
verify found no changes in insn with uid = 721.
verify found no changes in insn with uid = 724.
verify found no changes in insn with uid = 733.
verify found no changes in insn with uid = 741.
verify found no changes in insn with uid = 744.
verify found no changes in insn with uid = 749.
verify found no changes in insn with uid = 756.
verify found no changes in insn with uid = 764.
verify found no changes in insn with uid = 795.
verify found no changes in insn with uid = 801.
verify found no changes in insn with uid = 845.


int read_procpar(Procpar_info*, char*, FILE*, bool*, InFile_struct*, Data_file_header*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8] 38[r9]
;;  ref usage 	r0={283d,251u} r1={117d,43u,1e} r2={76d,1u} r4={136d,62u} r5={147d,73u} r6={1d,263u} r7={1d,154u} r8={74d} r9={74d} r10={74d} r11={74d} r12={74d} r13={74d} r14={74d} r15={74d} r17={141d,33u} r18={74d} r19={74d} r20={1d,1u,18e} r21={86d,23u} r22={78d,3u} r23={77d,2u} r24={77d,2u} r25={77d,2u} r26={77d,2u} r27={77d,2u} r28={76d,1u} r29={74d} r30={74d} r31={74d} r32={74d} r33={74d} r34={74d} r35={74d} r36={74d} r37={75d,1u} r38={75d,1u} r39={74d} r40={74d} r45={74d} r46={74d} r47={74d} r48={74d} r49={74d} r50={74d} r51={74d} r52={74d} r53={74d} r54={74d} r55={74d} r56={74d} r57={74d} r58={74d} r59={74d} r60={74d} r61={74d} r62={74d} r63={74d} r64={74d} r65={74d} r66={74d} r67={74d} r68={74d} r69={74d} r70={74d} r71={74d} r72={74d} r73={74d} r74={74d} r75={74d} r76={74d} 
;;    total ref usage 6465{5526d,920u,19e} in 678{604 regular + 74 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 86 87 187 188 189 190
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
        (reg:DI 5 di [ procpar_info ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [0 procpar_string+0 S8 A64])
        (reg:DI 4 si [ procpar_string ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])
        (reg:DI 1 dx [ in_file ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -720 [0xfffffffffffffd30])) [0 swap_bytes+0 S8 A64])
        (reg:DI 2 cx [ swap_bytes ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])
        (reg:DI 37 r8 [ infile_struct ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])
        (reg:DI 38 r9 [ main_header ])) sim2fitman_read_procpar.cpp:26 89 {*movdi_internal}
     (nil))
(note 8 7 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 8 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.5756+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [342])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:26 964 {stack_tls_protect_set_di}
     (nil))
(insn 12 9 13 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -648 [0xfffffffffffffd78])) [0 date_stamp+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:28 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SF 0 ax [187])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:29 129 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -660 [0xfffffffffffffd6c])) [0 dwell+0 S4 A32])
        (reg:SF 0 ax [187])) sim2fitman_read_procpar.cpp:29 129 {*movsf_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -640 [0xfffffffffffffd80])) [0 calc_filesize+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:30 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -632 [0xfffffffffffffd88])) [0 te_offset+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:31 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -624 [0xfffffffffffffd90])) [0 tr_offset+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:32 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -616 [0xfffffffffffffd98])) [0 pulse_name_offset+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:33 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [0 header_size+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:35 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:48 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -673 [0xfffffffffffffd5f])) [0 done_hdr+0 S1 A8])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:49 93 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 1 dx [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:66 89 {*movdi_internal}
     (nil))
(insn 23 22 25 2 (parallel [
            (set (reg:DI 0 ax [189])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:66 221 {*adddi_1}
     (nil))
(insn 25 23 26 2 (set (reg:SI 4 si)
        (const_int 255 [0xff])) sim2fitman_read_procpar.cpp:66 90 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [189])) sim2fitman_read_procpar.cpp:66 89 {*movdi_internal}
     (nil))
(call_insn 27 26 28 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b695e972c00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:66 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 28 27 29 2 (set (reg:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:67 89 {*movdi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [190])) sim2fitman_read_procpar.cpp:67 89 {*movdi_internal}
     (nil))
(call_insn 30 29 31 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b695e97ac00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:67 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 2 (set (reg:SI 0 ax [orig:86 D.5744 ] [86])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:67 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:86 D.5744 ] [86])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:67 3 {*cmpsi_ccno_1}
     (nil))
(insn 33 32 34 2 (set (reg:QI 0 ax [orig:87 D.5745 ] [87])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:67 592 {*setcc_qi}
     (nil))
(insn 34 33 35 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 D.5745 ] [87])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:67 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 35 34 36 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) sim2fitman_read_procpar.cpp:67 596 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 36 35 37 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 853 3 (set (reg:SI 0 ax [orig:83 D.5744 ] [83])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_read_procpar.cpp:68 90 {*movsi_internal}
     (nil))
(jump_insn 853 37 854 3 (set (pc)
        (label_ref 836)) sim2fitman_read_procpar.cpp:68 636 {jump}
     (nil)
 -> 836)
;;  succ:       78 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 854 853 40)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 40 854 41 4 2 "" [1 uses])
(note 41 40 855 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 855 41 856 4 (set (pc)
        (label_ref 538)) sim2fitman_read_procpar.cpp:76 636 {jump}
     (nil)
 -> 538)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 856 855 560)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 90 191 192 193
(code_label 560 856 44 5 25 "" [1 uses])
(note 44 560 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 5 (parallel [
            (set (reg:DI 0 ax [191])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:79 221 {*adddi_1}
     (nil))
(insn 46 45 47 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b695eafd428 *.LC1>)) sim2fitman_read_procpar.cpp:79 89 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [191])) sim2fitman_read_procpar.cpp:79 89 {*movdi_internal}
     (nil))
(call_insn 48 47 49 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:79 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 49 48 50 5 (set (reg:DI 0 ax [192])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:79 89 {*movdi_internal}
     (nil))
(insn 50 49 51 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [192])) sim2fitman_read_procpar.cpp:79 89 {*movdi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:82 89 {*movdi_internal}
     (nil))
(insn 52 51 53 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b695eafd4c0 *.LC2>)) sim2fitman_read_procpar.cpp:82 89 {*movdi_internal}
     (nil))
(insn 53 52 54 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [193])) sim2fitman_read_procpar.cpp:82 89 {*movdi_internal}
     (nil))
(call_insn/i 54 53 55 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:82 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 55 54 56 5 (set (reg:SI 0 ax [orig:90 D.5744 ] [90])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:82 90 {*movsi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:90 D.5744 ] [90])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:82 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 57 56 58 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) sim2fitman_read_procpar.cpp:82 596 {*jcc_1}
     (nil)
 -> 81)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 91 194 195
(note 58 57 59 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b695eafd558 *.LC3>)) sim2fitman_read_procpar.cpp:83 89 {*movdi_internal}
     (nil))
(insn 60 59 61 6 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:83 89 {*movdi_internal}
     (nil))
(call_insn 61 60 62 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:83 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 62 61 63 6 (set (reg:DI 0 ax [194])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:83 89 {*movdi_internal}
     (nil))
(insn 63 62 64 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [194])) sim2fitman_read_procpar.cpp:83 89 {*movdi_internal}
     (nil))
(insn 64 63 65 6 (set (reg:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:84 89 {*movdi_internal}
     (nil))
(insn 65 64 66 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b695eafd5f0 *.LC4>)) sim2fitman_read_procpar.cpp:84 89 {*movdi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [195])) sim2fitman_read_procpar.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn/i 67 66 68 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:84 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 68 67 69 6 (set (reg:SI 0 ax [orig:91 D.5744 ] [91])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:84 90 {*movsi_internal}
     (nil))
(insn 69 68 70 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 D.5744 ] [91])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:84 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 70 69 71 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 517)
            (pc))) sim2fitman_read_procpar.cpp:84 596 {*jcc_1}
     (nil)
 -> 517)
;;  succ:       7 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 92 196 197
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 7 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -673 [0xfffffffffffffd5f])) [0 done_hdr+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:85 93 {*movqi_internal}
     (nil))
(insn 73 72 74 7 (set (reg:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(insn 74 73 75 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [196])) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(call_insn 75 74 76 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ftell") [flags 0x41]  <function_decl 0x2b695e97a000 ftell>) [0 ftell S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:86 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 76 75 77 7 (set (reg:DI 1 dx [orig:92 D.5746 ] [92])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(insn 77 76 78 7 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(insn 78 77 857 7 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [197])
                (const_int 24 [0x18])) [0 infile_struct_34(D)->hdr_offset+0 S8 A64])
        (reg:DI 1 dx [orig:92 D.5746 ] [92])) sim2fitman_read_procpar.cpp:86 89 {*movdi_internal}
     (nil))
(jump_insn 857 78 858 7 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 858 857 81)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 93 198
(code_label 81 858 82 8 5 "" [1 uses])
(note 82 81 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 8 (set (reg:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(insn 84 83 85 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b695eafd688 *.LC5>)) sim2fitman_read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(insn 85 84 86 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [198])) sim2fitman_read_procpar.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn/i 86 85 87 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:92 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 87 86 88 8 (set (reg:SI 0 ax [orig:93 D.5744 ] [93])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:92 90 {*movsi_internal}
     (nil))
(insn 88 87 89 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:93 D.5744 ] [93])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:92 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 89 88 90 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) sim2fitman_read_procpar.cpp:92 596 {*jcc_1}
     (nil)
 -> 111)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 94 95 96 199 200 201 202 203
(note 90 89 91 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:94 89 {*movdi_internal}
     (nil))
(insn 92 91 93 9 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:94 89 {*movdi_internal}
     (nil))
(call_insn 93 92 94 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:94 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 94 93 95 9 (set (reg:DI 0 ax [199])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:94 89 {*movdi_internal}
     (nil))
(insn 95 94 96 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [199])) sim2fitman_read_procpar.cpp:94 89 {*movdi_internal}
     (nil))
(insn 96 95 97 9 (set (reg:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 97 96 98 9 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) sim2fitman_read_procpar.cpp:95 90 {*movsi_internal}
     (nil))
(insn 98 97 99 9 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 99 98 100 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(call_insn 100 99 101 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x2b695ea34300 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:95 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 101 100 102 9 (set (reg:DI 1 dx [orig:94 D.5746 ] [94])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 102 101 103 9 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 103 102 104 9 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [201])
                (const_int 16 [0x10])) [0 main_header_38(D)->np.number+0 S8 A64])
        (reg:DI 1 dx [orig:94 D.5746 ] [94])) sim2fitman_read_procpar.cpp:95 89 {*movdi_internal}
     (nil))
(insn 104 103 105 9 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])) sim2fitman_read_procpar.cpp:96 89 {*movdi_internal}
     (nil))
(insn 105 104 106 9 (set (reg:DI 0 ax [orig:95 D.5746 ] [95])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [202])
                (const_int 16 [0x10])) [0 main_header_38(D)->np.number+0 S8 A64])) sim2fitman_read_procpar.cpp:96 89 {*movdi_internal}
     (nil))
(insn 106 105 107 9 (set (reg:SI 1 dx [orig:96 D.5744 ] [96])
        (reg:SI 0 ax [orig:95 D.5746 ] [95])) sim2fitman_read_procpar.cpp:96 90 {*movsi_internal}
     (nil))
(insn 107 106 108 9 (set (reg/f:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:96 89 {*movdi_internal}
     (nil))
(insn 108 107 859 9 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [203])
                (const_int 328 [0x148])) [0 procpar_info_41(D)->num_points+0 S4 A64])
        (reg:SI 1 dx [orig:96 D.5744 ] [96])) sim2fitman_read_procpar.cpp:96 90 {*movsi_internal}
     (nil))
(jump_insn 859 108 860 9 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 860 859 111)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 97 204
(code_label 111 860 112 10 7 "" [1 uses])
(note 112 111 113 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 10 (set (reg:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:100 89 {*movdi_internal}
     (nil))
(insn 114 113 115 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b695eafd7b8 *.LC7>)) sim2fitman_read_procpar.cpp:100 89 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [204])) sim2fitman_read_procpar.cpp:100 89 {*movdi_internal}
     (nil))
(call_insn/i 116 115 117 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:100 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 117 116 118 10 (set (reg:SI 0 ax [orig:97 D.5744 ] [97])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:100 90 {*movsi_internal}
     (nil))
(insn 118 117 119 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 D.5744 ] [97])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:100 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 119 118 120 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) sim2fitman_read_procpar.cpp:100 596 {*jcc_1}
     (nil)
 -> 137)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 98 99 205 206 207
(note 120 119 121 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:102 89 {*movdi_internal}
     (nil))
(insn 122 121 123 11 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:102 89 {*movdi_internal}
     (nil))
(call_insn 123 122 124 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:102 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 124 123 125 11 (set (reg:DI 0 ax [205])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:102 89 {*movdi_internal}
     (nil))
(insn 125 124 126 11 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [205])) sim2fitman_read_procpar.cpp:102 89 {*movdi_internal}
     (nil))
(insn 126 125 127 11 (set (reg:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 127 126 128 11 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) sim2fitman_read_procpar.cpp:106 90 {*movsi_internal}
     (nil))
(insn 128 127 129 11 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 129 128 130 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [206])) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(call_insn 130 129 131 11 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x2b695ea34300 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:106 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 131 130 132 11 (set (reg:DI 0 ax [orig:98 D.5746 ] [98])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 132 131 133 11 (set (reg:SI 1 dx [orig:99 D.5744 ] [99])
        (reg:SI 0 ax [orig:98 D.5746 ] [98])) sim2fitman_read_procpar.cpp:106 90 {*movsi_internal}
     (nil))
(insn 133 132 134 11 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:106 89 {*movdi_internal}
     (nil))
(insn 134 133 861 11 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [207])
                (const_int 508 [0x1fc])) [0 procpar_info_41(D)->nex+0 S4 A32])
        (reg:SI 1 dx [orig:99 D.5744 ] [99])) sim2fitman_read_procpar.cpp:106 90 {*movsi_internal}
     (nil))
(jump_insn 861 134 862 11 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 862 861 137)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 100 208
(code_label 137 862 138 12 8 "" [1 uses])
(note 138 137 139 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 12 (set (reg:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:111 89 {*movdi_internal}
     (nil))
(insn 140 139 141 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b695eafd850 *.LC8>)) sim2fitman_read_procpar.cpp:111 89 {*movdi_internal}
     (nil))
(insn 141 140 142 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [208])) sim2fitman_read_procpar.cpp:111 89 {*movdi_internal}
     (nil))
(call_insn/i 142 141 143 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:111 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 143 142 144 12 (set (reg:SI 0 ax [orig:100 D.5744 ] [100])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:111 90 {*movsi_internal}
     (nil))
(insn 144 143 145 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:100 D.5744 ] [100])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:111 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 145 144 146 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 170)
            (pc))) sim2fitman_read_procpar.cpp:111 596 {*jcc_1}
     (nil)
 -> 170)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 101 102 209 210 211 212 213 214 215 216
(note 146 145 147 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 13 (set (reg:SF 0 ax [209])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:112 129 {*movsf_internal}
     (nil))
(insn 148 147 149 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -660 [0xfffffffffffffd6c])) [0 dwell+0 S4 A32])
        (reg:SF 0 ax [209])) sim2fitman_read_procpar.cpp:112 129 {*movsf_internal}
     (nil))
(insn 149 148 150 13 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:114 89 {*movdi_internal}
     (nil))
(insn 150 149 151 13 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn 151 150 152 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:114 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 152 151 153 13 (set (reg:DI 0 ax [210])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:114 89 {*movdi_internal}
     (nil))
(insn 153 152 154 13 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [210])) sim2fitman_read_procpar.cpp:114 89 {*movdi_internal}
     (nil))
(insn 154 153 155 13 (set (reg:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 155 154 156 13 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(insn 156 155 157 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [211])) sim2fitman_read_procpar.cpp:115 89 {*movdi_internal}
     (nil))
(call_insn 157 156 159 13 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:115 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 159 157 926 13 (set (reg:SF 23 xmm2 [344])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:101 D.5747 ] [101]))) sim2fitman_read_procpar.cpp:115 157 {*truncdfsf_fast_sse}
     (nil))
(insn 926 159 160 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -660 [0xfffffffffffffd6c])) [0 dwell+0 S4 A32])
        (reg:SF 23 xmm2 [344])) sim2fitman_read_procpar.cpp:115 129 {*movsf_internal}
     (nil))
(insn 160 926 161 13 (set (reg:SF 21 xmm0 [212])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -660 [0xfffffffffffffd6c])) [0 dwell+0 S4 A32])) sim2fitman_read_procpar.cpp:118 129 {*movsf_internal}
     (nil))
(insn 161 160 162 13 (set (reg:SF 22 xmm1 [213])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:118 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 162 161 928 13 (set (reg:SF 21 xmm0 [orig:102 D.5748 ] [102])
        (div:SF (reg:SF 21 xmm0 [orig:102 D.5748 ] [102])
            (reg:SF 22 xmm1 [213]))) sim2fitman_read_procpar.cpp:118 782 {*fop_sf_1_sse}
     (nil))
(insn 928 162 163 13 (set (reg:SF 0 ax [orig:102 D.5748 ] [102])
        (reg:SF 21 xmm0 [orig:102 D.5748 ] [102])) sim2fitman_read_procpar.cpp:118 129 {*movsf_internal}
     (nil))
(insn 163 928 164 13 (set (reg/f:DI 1 dx [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:118 89 {*movdi_internal}
     (nil))
(insn 164 163 165 13 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [214])
                (const_int 4 [0x4])) [0 procpar_info_41(D)->dwell_time+0 S4 A32])
        (reg:SF 0 ax [orig:102 D.5748 ] [102])) sim2fitman_read_procpar.cpp:118 129 {*movsf_internal}
     (nil))
(insn 165 164 166 13 (set (reg:SF 21 xmm0 [216])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC10") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:120 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 166 165 930 13 (set (reg:SF 21 xmm0 [215])
        (div:SF (reg:SF 21 xmm0 [215])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -660 [0xfffffffffffffd6c])) [0 dwell+0 S4 A32]))) sim2fitman_read_procpar.cpp:120 782 {*fop_sf_1_sse}
     (nil))
(insn 930 166 167 13 (set (reg:SF 0 ax [215])
        (reg:SF 21 xmm0 [215])) sim2fitman_read_procpar.cpp:120 129 {*movsf_internal}
     (nil))
(insn 167 930 863 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -660 [0xfffffffffffffd6c])) [0 dwell+0 S4 A32])
        (reg:SF 0 ax [215])) sim2fitman_read_procpar.cpp:120 129 {*movsf_internal}
     (nil))
(jump_insn 863 167 864 13 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 864 863 170)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 103 217
(code_label 170 864 171 14 9 "" [1 uses])
(note 171 170 172 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 14 (set (reg:DI 0 ax [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:129 89 {*movdi_internal}
     (nil))
(insn 173 172 174 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b695eafd8e8 *.LC11>)) sim2fitman_read_procpar.cpp:129 89 {*movdi_internal}
     (nil))
(insn 174 173 175 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [217])) sim2fitman_read_procpar.cpp:129 89 {*movdi_internal}
     (nil))
(call_insn/i 175 174 176 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:129 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 176 175 177 14 (set (reg:SI 0 ax [orig:103 D.5744 ] [103])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:129 90 {*movsi_internal}
     (nil))
(insn 177 176 178 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:103 D.5744 ] [103])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:129 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 178 177 179 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) sim2fitman_read_procpar.cpp:129 596 {*jcc_1}
     (nil)
 -> 194)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 104 218 219 220
(note 179 178 180 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 15 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:131 89 {*movdi_internal}
     (nil))
(insn 181 180 182 15 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:131 89 {*movdi_internal}
     (nil))
(call_insn 182 181 183 15 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:131 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 183 182 184 15 (set (reg:DI 0 ax [218])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:131 89 {*movdi_internal}
     (nil))
(insn 184 183 185 15 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [218])) sim2fitman_read_procpar.cpp:131 89 {*movdi_internal}
     (nil))
(insn 185 184 186 15 (set (reg:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 186 185 187 15 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 187 186 188 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [219])) sim2fitman_read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(call_insn 188 187 189 15 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:132 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 189 188 190 15 (set (reg:DF 1 dx [orig:104 D.5747 ] [104])
        (reg:DF 21 xmm0)) sim2fitman_read_procpar.cpp:132 128 {*movdf_internal}
     (nil))
(insn 190 189 191 15 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:132 89 {*movdi_internal}
     (nil))
(insn 191 190 865 15 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [220])
                (const_int 336 [0x150])) [0 procpar_info_41(D)->main_frequency+0 S8 A64])
        (reg:DF 1 dx [orig:104 D.5747 ] [104])) sim2fitman_read_procpar.cpp:132 128 {*movdf_internal}
     (nil))
(jump_insn 865 191 866 15 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 866 865 194)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 105 221
(code_label 194 866 195 16 10 "" [1 uses])
(note 195 194 196 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 16 (set (reg:DI 0 ax [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(insn 197 196 198 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b695eafd980 *.LC12>)) sim2fitman_read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(insn 198 197 199 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [221])) sim2fitman_read_procpar.cpp:136 89 {*movdi_internal}
     (nil))
(call_insn/i 199 198 200 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:136 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 200 199 201 16 (set (reg:SI 0 ax [orig:105 D.5744 ] [105])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:136 90 {*movsi_internal}
     (nil))
(insn 201 200 202 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:105 D.5744 ] [105])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:136 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 202 201 203 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 217)
            (pc))) sim2fitman_read_procpar.cpp:136 596 {*jcc_1}
     (nil)
 -> 217)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 106 222 223 224
(note 203 202 204 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 204 203 205 17 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b695eafda18 *.LC13>)) sim2fitman_read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(insn 205 204 206 17 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(call_insn 206 205 207 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:138 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 207 206 208 17 (set (reg:DI 0 ax [222])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(insn 208 207 209 17 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [222])) sim2fitman_read_procpar.cpp:138 89 {*movdi_internal}
     (nil))
(insn 209 208 210 17 (set (reg/f:DI 0 ax [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(insn 210 209 211 17 (parallel [
            (set (reg/f:DI 1 dx [orig:106 D.5749 ] [106])
                (plus:DI (reg/f:DI 0 ax [223])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:139 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 404 [0x194]))
        (nil)))
(insn 211 210 212 17 (set (reg:DI 0 ax [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(insn 212 211 213 17 (set (reg:DI 4 si)
        (reg:DI 0 ax [224])) sim2fitman_read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(insn 213 212 214 17 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:106 D.5749 ] [106])) sim2fitman_read_procpar.cpp:139 89 {*movdi_internal}
     (nil))
(call_insn 214 213 867 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b695e7a2600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:139 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 867 214 868 17 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 868 867 217)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 107 225
(code_label 217 868 218 18 11 "" [1 uses])
(note 218 217 219 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 18 (set (reg:DI 0 ax [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:143 89 {*movdi_internal}
     (nil))
(insn 220 219 221 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2b695eafdab0 *.LC14>)) sim2fitman_read_procpar.cpp:143 89 {*movdi_internal}
     (nil))
(insn 221 220 222 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [225])) sim2fitman_read_procpar.cpp:143 89 {*movdi_internal}
     (nil))
(call_insn/i 222 221 223 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:143 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 223 222 224 18 (set (reg:SI 0 ax [orig:107 D.5744 ] [107])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:143 90 {*movsi_internal}
     (nil))
(insn 224 223 225 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:107 D.5744 ] [107])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:143 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 225 224 226 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) sim2fitman_read_procpar.cpp:143 596 {*jcc_1}
     (nil)
 -> 240)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 108 226 227 228
(note 226 225 227 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 19 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b695eafda18 *.LC13>)) sim2fitman_read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 228 227 229 19 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(call_insn 229 228 230 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:145 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 230 229 231 19 (set (reg:DI 0 ax [226])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 231 230 232 19 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [226])) sim2fitman_read_procpar.cpp:145 89 {*movdi_internal}
     (nil))
(insn 232 231 233 19 (set (reg/f:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 233 232 234 19 (parallel [
            (set (reg/f:DI 1 dx [orig:108 D.5750 ] [108])
                (plus:DI (reg/f:DI 0 ax [227])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:146 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 440 [0x1b8]))
        (nil)))
(insn 234 233 235 19 (set (reg:DI 0 ax [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 235 234 236 19 (set (reg:DI 4 si)
        (reg:DI 0 ax [228])) sim2fitman_read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(insn 236 235 237 19 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:108 D.5750 ] [108])) sim2fitman_read_procpar.cpp:146 89 {*movdi_internal}
     (nil))
(call_insn 237 236 869 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b695e7a2600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:146 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 869 237 870 19 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 870 869 240)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 109 229
(code_label 240 870 241 20 12 "" [1 uses])
(note 241 240 242 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 20 (set (reg:DI 0 ax [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:150 89 {*movdi_internal}
     (nil))
(insn 243 242 244 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2b695eafdb48 *.LC15>)) sim2fitman_read_procpar.cpp:150 89 {*movdi_internal}
     (nil))
(insn 244 243 245 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [229])) sim2fitman_read_procpar.cpp:150 89 {*movdi_internal}
     (nil))
(call_insn/i 245 244 246 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:150 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 246 245 247 20 (set (reg:SI 0 ax [orig:109 D.5744 ] [109])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:150 90 {*movsi_internal}
     (nil))
(insn 247 246 248 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:109 D.5744 ] [109])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:150 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 248 247 249 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 263)
            (pc))) sim2fitman_read_procpar.cpp:150 596 {*jcc_1}
     (nil)
 -> 263)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 110 230 231 232
(note 249 248 250 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b695eafda18 *.LC13>)) sim2fitman_read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(insn 251 250 252 21 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(call_insn 252 251 253 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:152 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 253 252 254 21 (set (reg:DI 0 ax [230])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(insn 254 253 255 21 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [230])) sim2fitman_read_procpar.cpp:152 89 {*movdi_internal}
     (nil))
(insn 255 254 256 21 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(insn 256 255 257 21 (parallel [
            (set (reg/f:DI 1 dx [orig:110 D.5751 ] [110])
                (plus:DI (reg/f:DI 0 ax [231])
                    (const_int 468 [0x1d4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:153 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 468 [0x1d4]))
        (nil)))
(insn 257 256 258 21 (set (reg:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(insn 258 257 259 21 (set (reg:DI 4 si)
        (reg:DI 0 ax [232])) sim2fitman_read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(insn 259 258 260 21 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:110 D.5751 ] [110])) sim2fitman_read_procpar.cpp:153 89 {*movdi_internal}
     (nil))
(call_insn 260 259 871 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b695e7a2600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:153 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 871 260 872 21 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 872 871 263)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 111 233
(code_label 263 872 264 22 13 "" [1 uses])
(note 264 263 265 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 22 (set (reg:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(insn 266 265 267 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b695eafdbe0 *.LC16>)) sim2fitman_read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(insn 267 266 268 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [233])) sim2fitman_read_procpar.cpp:158 89 {*movdi_internal}
     (nil))
(call_insn/i 268 267 269 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:158 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 269 268 270 22 (set (reg:SI 0 ax [orig:111 D.5744 ] [111])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:158 90 {*movsi_internal}
     (nil))
(insn 270 269 271 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:111 D.5744 ] [111])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:158 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 271 270 272 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) sim2fitman_read_procpar.cpp:158 596 {*jcc_1}
     (nil)
 -> 285)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 234 235 236
(note 272 271 273 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 273 272 274 23 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b695eafda18 *.LC13>)) sim2fitman_read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 274 273 275 23 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(call_insn 275 274 276 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:160 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 276 275 277 23 (set (reg:DI 0 ax [234])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 277 276 278 23 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [234])) sim2fitman_read_procpar.cpp:160 89 {*movdi_internal}
     (nil))
(insn 278 277 279 23 (set (reg:DI 1 dx [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:161 89 {*movdi_internal}
     (nil))
(insn 279 278 280 23 (parallel [
            (set (reg:DI 0 ax [236])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -592 [0xfffffffffffffdb0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:161 221 {*adddi_1}
     (nil))
(insn 280 279 281 23 (set (reg:DI 4 si)
        (reg:DI 1 dx [235])) sim2fitman_read_procpar.cpp:161 89 {*movdi_internal}
     (nil))
(insn 281 280 282 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [236])) sim2fitman_read_procpar.cpp:161 89 {*movdi_internal}
     (nil))
(call_insn 282 281 873 23 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b695e7a2600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:161 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 873 282 874 23 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 874 873 285)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 112 237
(code_label 285 874 286 24 14 "" [1 uses])
(note 286 285 287 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 24 (set (reg:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(insn 288 287 289 24 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b695eafdc78 *.LC17>)) sim2fitman_read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(insn 289 288 290 24 (set (reg:DI 5 di)
        (reg:DI 0 ax [237])) sim2fitman_read_procpar.cpp:165 89 {*movdi_internal}
     (nil))
(call_insn/i 290 289 291 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:165 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 291 290 292 24 (set (reg:SI 0 ax [orig:112 D.5744 ] [112])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:165 90 {*movsi_internal}
     (nil))
(insn 292 291 293 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:112 D.5744 ] [112])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:165 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 293 292 294 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 307)
            (pc))) sim2fitman_read_procpar.cpp:165 596 {*jcc_1}
     (nil)
 -> 307)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 238 239 240
(note 294 293 295 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 296 25 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b695eafda18 *.LC13>)) sim2fitman_read_procpar.cpp:167 89 {*movdi_internal}
     (nil))
(insn 296 295 297 25 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:167 89 {*movdi_internal}
     (nil))
(call_insn 297 296 298 25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:167 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 298 297 299 25 (set (reg:DI 0 ax [238])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:167 89 {*movdi_internal}
     (nil))
(insn 299 298 300 25 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [238])) sim2fitman_read_procpar.cpp:167 89 {*movdi_internal}
     (nil))
(insn 300 299 301 25 (set (reg:DI 1 dx [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:168 89 {*movdi_internal}
     (nil))
(insn 301 300 302 25 (parallel [
            (set (reg:DI 0 ax [240])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -560 [0xfffffffffffffdd0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:168 221 {*adddi_1}
     (nil))
(insn 302 301 303 25 (set (reg:DI 4 si)
        (reg:DI 1 dx [239])) sim2fitman_read_procpar.cpp:168 89 {*movdi_internal}
     (nil))
(insn 303 302 304 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [240])) sim2fitman_read_procpar.cpp:168 89 {*movdi_internal}
     (nil))
(call_insn 304 303 875 25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2b695e7a2600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:168 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(jump_insn 875 304 876 25 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 876 875 307)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 113 241
(code_label 307 876 308 26 15 "" [1 uses])
(note 308 307 309 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 309 308 310 26 (set (reg:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(insn 310 309 311 26 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b695eafdd10 *.LC18>)) sim2fitman_read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(insn 311 310 312 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [241])) sim2fitman_read_procpar.cpp:172 89 {*movdi_internal}
     (nil))
(call_insn/i 312 311 313 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:172 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 313 312 314 26 (set (reg:SI 0 ax [orig:113 D.5744 ] [113])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:172 90 {*movsi_internal}
     (nil))
(insn 314 313 315 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:113 D.5744 ] [113])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:172 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 315 314 316 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 338)
            (pc))) sim2fitman_read_procpar.cpp:172 596 {*jcc_1}
     (nil)
 -> 338)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 114 115 116 117 242 243 244 245 246 247
(note 316 315 317 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 317 316 318 27 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:174 89 {*movdi_internal}
     (nil))
(insn 318 317 319 27 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:174 89 {*movdi_internal}
     (nil))
(call_insn 319 318 320 27 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:174 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 320 319 321 27 (set (reg:DI 0 ax [242])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:174 89 {*movdi_internal}
     (nil))
(insn 321 320 322 27 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [242])) sim2fitman_read_procpar.cpp:174 89 {*movdi_internal}
     (nil))
(insn 322 321 323 27 (set (reg:DI 0 ax [243])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 323 322 324 27 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 324 323 325 27 (set (reg:DI 5 di)
        (reg:DI 0 ax [243])) sim2fitman_read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(call_insn 325 324 327 27 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:175 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 327 325 931 27 (set (reg:SF 24 xmm3 [orig:115 D.5748 ] [115])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:114 D.5747 ] [114]))) sim2fitman_read_procpar.cpp:175 157 {*truncdfsf_fast_sse}
     (nil))
(insn 931 327 328 27 (set (reg:SF 0 ax [orig:115 D.5748 ] [115])
        (reg:SF 24 xmm3 [orig:115 D.5748 ] [115])) sim2fitman_read_procpar.cpp:175 129 {*movsf_internal}
     (nil))
(insn 328 931 329 27 (set (reg/f:DI 1 dx [244])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:175 89 {*movdi_internal}
     (nil))
(insn 329 328 330 27 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [244])
                (const_int 352 [0x160])) [0 procpar_info_41(D)->te+0 S4 A64])
        (reg:SF 0 ax [orig:115 D.5748 ] [115])) sim2fitman_read_procpar.cpp:175 129 {*movsf_internal}
     (nil))
(insn 330 329 331 27 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:177 89 {*movdi_internal}
     (nil))
(insn 331 330 332 27 (set (reg:SF 21 xmm0 [orig:116 D.5748 ] [116])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [245])
                (const_int 352 [0x160])) [0 procpar_info_41(D)->te+0 S4 A64])) sim2fitman_read_procpar.cpp:177 129 {*movsf_internal}
     (nil))
(insn 332 331 333 27 (set (reg:SF 22 xmm1 [246])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:177 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+3 [0x0.fap+10])
        (nil)))
(insn 333 332 933 27 (set (reg:SF 21 xmm0 [orig:117 D.5748 ] [117])
        (div:SF (reg:SF 21 xmm0 [orig:117 D.5748 ] [117])
            (reg:SF 22 xmm1 [246]))) sim2fitman_read_procpar.cpp:177 782 {*fop_sf_1_sse}
     (nil))
(insn 933 333 334 27 (set (reg:SF 0 ax [orig:117 D.5748 ] [117])
        (reg:SF 21 xmm0 [orig:117 D.5748 ] [117])) sim2fitman_read_procpar.cpp:177 129 {*movsf_internal}
     (nil))
(insn 334 933 335 27 (set (reg/f:DI 1 dx [247])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:177 89 {*movdi_internal}
     (nil))
(insn 335 334 877 27 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [247])
                (const_int 352 [0x160])) [0 procpar_info_41(D)->te+0 S4 A64])
        (reg:SF 0 ax [orig:117 D.5748 ] [117])) sim2fitman_read_procpar.cpp:177 129 {*movsf_internal}
     (nil))
(jump_insn 877 335 878 27 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 878 877 338)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 118 248
(code_label 338 878 339 28 16 "" [1 uses])
(note 339 338 340 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 340 339 341 28 (set (reg:DI 0 ax [248])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:181 89 {*movdi_internal}
     (nil))
(insn 341 340 342 28 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2b695eafdda8 *.LC20>)) sim2fitman_read_procpar.cpp:181 89 {*movdi_internal}
     (nil))
(insn 342 341 343 28 (set (reg:DI 5 di)
        (reg:DI 0 ax [248])) sim2fitman_read_procpar.cpp:181 89 {*movdi_internal}
     (nil))
(call_insn/i 343 342 344 28 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:181 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 344 343 345 28 (set (reg:SI 0 ax [orig:118 D.5744 ] [118])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:181 90 {*movsi_internal}
     (nil))
(insn 345 344 346 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:118 D.5744 ] [118])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:181 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 346 345 347 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 369)
            (pc))) sim2fitman_read_procpar.cpp:181 596 {*jcc_1}
     (nil)
 -> 369)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 119 120 121 122 249 250 251 252 253 254
(note 347 346 348 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 348 347 349 29 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:183 89 {*movdi_internal}
     (nil))
(insn 349 348 350 29 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:183 89 {*movdi_internal}
     (nil))
(call_insn 350 349 351 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:183 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 351 350 352 29 (set (reg:DI 0 ax [249])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:183 89 {*movdi_internal}
     (nil))
(insn 352 351 353 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [249])) sim2fitman_read_procpar.cpp:183 89 {*movdi_internal}
     (nil))
(insn 353 352 354 29 (set (reg:DI 0 ax [250])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 354 353 355 29 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 355 354 356 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [250])) sim2fitman_read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(call_insn 356 355 358 29 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:184 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 358 356 934 29 (set (reg:SF 25 xmm4 [orig:120 D.5748 ] [120])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:119 D.5747 ] [119]))) sim2fitman_read_procpar.cpp:184 157 {*truncdfsf_fast_sse}
     (nil))
(insn 934 358 359 29 (set (reg:SF 0 ax [orig:120 D.5748 ] [120])
        (reg:SF 25 xmm4 [orig:120 D.5748 ] [120])) sim2fitman_read_procpar.cpp:184 129 {*movsf_internal}
     (nil))
(insn 359 934 360 29 (set (reg/f:DI 1 dx [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:184 89 {*movdi_internal}
     (nil))
(insn 360 359 361 29 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [251])
                (const_int 356 [0x164])) [0 procpar_info_41(D)->tr+0 S4 A32])
        (reg:SF 0 ax [orig:120 D.5748 ] [120])) sim2fitman_read_procpar.cpp:184 129 {*movsf_internal}
     (nil))
(insn 361 360 362 29 (set (reg/f:DI 0 ax [252])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 362 361 363 29 (set (reg:SF 21 xmm0 [orig:121 D.5748 ] [121])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [252])
                (const_int 356 [0x164])) [0 procpar_info_41(D)->tr+0 S4 A32])) sim2fitman_read_procpar.cpp:186 129 {*movsf_internal}
     (nil))
(insn 363 362 364 29 (set (reg:SF 22 xmm1 [253])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:186 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+3 [0x0.fap+10])
        (nil)))
(insn 364 363 936 29 (set (reg:SF 21 xmm0 [orig:122 D.5748 ] [122])
        (div:SF (reg:SF 21 xmm0 [orig:122 D.5748 ] [122])
            (reg:SF 22 xmm1 [253]))) sim2fitman_read_procpar.cpp:186 782 {*fop_sf_1_sse}
     (nil))
(insn 936 364 365 29 (set (reg:SF 0 ax [orig:122 D.5748 ] [122])
        (reg:SF 21 xmm0 [orig:122 D.5748 ] [122])) sim2fitman_read_procpar.cpp:186 129 {*movsf_internal}
     (nil))
(insn 365 936 366 29 (set (reg/f:DI 1 dx [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:186 89 {*movdi_internal}
     (nil))
(insn 366 365 879 29 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [254])
                (const_int 356 [0x164])) [0 procpar_info_41(D)->tr+0 S4 A32])
        (reg:SF 0 ax [orig:122 D.5748 ] [122])) sim2fitman_read_procpar.cpp:186 129 {*movsf_internal}
     (nil))
(jump_insn 879 366 880 29 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 880 879 369)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 123 255
(code_label 369 880 370 30 17 "" [1 uses])
(note 370 369 371 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 371 370 372 30 (set (reg:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(insn 372 371 373 30 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2b695eafde40 *.LC21>)) sim2fitman_read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(insn 373 372 374 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [255])) sim2fitman_read_procpar.cpp:191 89 {*movdi_internal}
     (nil))
(call_insn/i 374 373 375 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:191 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 375 374 376 30 (set (reg:SI 0 ax [orig:123 D.5744 ] [123])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:191 90 {*movsi_internal}
     (nil))
(insn 376 375 377 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:123 D.5744 ] [123])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:191 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 377 376 378 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 394)
            (pc))) sim2fitman_read_procpar.cpp:191 596 {*jcc_1}
     (nil)
 -> 394)
;;  succ:       31 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 124 125 256 257 258
(note 378 377 379 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 379 378 380 31 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:193 89 {*movdi_internal}
     (nil))
(insn 380 379 381 31 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:193 89 {*movdi_internal}
     (nil))
(call_insn 381 380 382 31 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:193 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 382 381 383 31 (set (reg:DI 0 ax [256])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:193 89 {*movdi_internal}
     (nil))
(insn 383 382 384 31 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [256])) sim2fitman_read_procpar.cpp:193 89 {*movdi_internal}
     (nil))
(insn 384 383 385 31 (set (reg:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:194 89 {*movdi_internal}
     (nil))
(insn 385 384 386 31 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:194 89 {*movdi_internal}
     (nil))
(insn 386 385 387 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [257])) sim2fitman_read_procpar.cpp:194 89 {*movdi_internal}
     (nil))
(call_insn 387 386 389 31 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:194 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 389 387 937 31 (set (reg:SF 26 xmm5 [orig:125 D.5748 ] [125])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:124 D.5747 ] [124]))) sim2fitman_read_procpar.cpp:194 157 {*truncdfsf_fast_sse}
     (nil))
(insn 937 389 390 31 (set (reg:SF 0 ax [orig:125 D.5748 ] [125])
        (reg:SF 26 xmm5 [orig:125 D.5748 ] [125])) sim2fitman_read_procpar.cpp:194 129 {*movsf_internal}
     (nil))
(insn 390 937 391 31 (set (reg/f:DI 1 dx [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:194 89 {*movdi_internal}
     (nil))
(insn 391 390 881 31 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [258])
                (const_int 364 [0x16c])) [0 procpar_info_41(D)->pos1+0 S4 A32])
        (reg:SF 0 ax [orig:125 D.5748 ] [125])) sim2fitman_read_procpar.cpp:194 129 {*movsf_internal}
     (nil))
(jump_insn 881 391 882 31 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 882 881 394)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 126 259
(code_label 394 882 395 32 18 "" [1 uses])
(note 395 394 396 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 396 395 397 32 (set (reg:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:196 89 {*movdi_internal}
     (nil))
(insn 397 396 398 32 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b695eafded8 *.LC22>)) sim2fitman_read_procpar.cpp:196 89 {*movdi_internal}
     (nil))
(insn 398 397 399 32 (set (reg:DI 5 di)
        (reg:DI 0 ax [259])) sim2fitman_read_procpar.cpp:196 89 {*movdi_internal}
     (nil))
(call_insn/i 399 398 400 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:196 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 400 399 401 32 (set (reg:SI 0 ax [orig:126 D.5744 ] [126])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:196 90 {*movsi_internal}
     (nil))
(insn 401 400 402 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:126 D.5744 ] [126])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:196 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 402 401 403 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 419)
            (pc))) sim2fitman_read_procpar.cpp:196 596 {*jcc_1}
     (nil)
 -> 419)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 127 128 260 261 262
(note 403 402 404 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 404 403 405 33 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 405 404 406 33 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(call_insn 406 405 407 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:198 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 407 406 408 33 (set (reg:DI 0 ax [260])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 408 407 409 33 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [260])) sim2fitman_read_procpar.cpp:198 89 {*movdi_internal}
     (nil))
(insn 409 408 410 33 (set (reg:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 410 409 411 33 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 411 410 412 33 (set (reg:DI 5 di)
        (reg:DI 0 ax [261])) sim2fitman_read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(call_insn 412 411 414 33 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:199 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 414 412 938 33 (set (reg:SF 27 xmm6 [orig:128 D.5748 ] [128])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:127 D.5747 ] [127]))) sim2fitman_read_procpar.cpp:199 157 {*truncdfsf_fast_sse}
     (nil))
(insn 938 414 415 33 (set (reg:SF 0 ax [orig:128 D.5748 ] [128])
        (reg:SF 27 xmm6 [orig:128 D.5748 ] [128])) sim2fitman_read_procpar.cpp:199 129 {*movsf_internal}
     (nil))
(insn 415 938 416 33 (set (reg/f:DI 1 dx [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:199 89 {*movdi_internal}
     (nil))
(insn 416 415 883 33 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [262])
                (const_int 368 [0x170])) [0 procpar_info_41(D)->pos2+0 S4 A64])
        (reg:SF 0 ax [orig:128 D.5748 ] [128])) sim2fitman_read_procpar.cpp:199 129 {*movsf_internal}
     (nil))
(jump_insn 883 416 884 33 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 884 883 419)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 129 263
(code_label 419 884 420 34 19 "" [1 uses])
(note 420 419 421 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 421 420 422 34 (set (reg:DI 0 ax [263])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(insn 422 421 423 34 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b695eb14000 *.LC23>)) sim2fitman_read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(insn 423 422 424 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [263])) sim2fitman_read_procpar.cpp:201 89 {*movdi_internal}
     (nil))
(call_insn/i 424 423 425 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:201 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 425 424 426 34 (set (reg:SI 0 ax [orig:129 D.5744 ] [129])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:201 90 {*movsi_internal}
     (nil))
(insn 426 425 427 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:129 D.5744 ] [129])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:201 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 427 426 428 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 444)
            (pc))) sim2fitman_read_procpar.cpp:201 596 {*jcc_1}
     (nil)
 -> 444)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 130 131 264 265 266
(note 428 427 429 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 429 428 430 35 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(insn 430 429 431 35 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(call_insn 431 430 432 35 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:203 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 432 431 433 35 (set (reg:DI 0 ax [264])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(insn 433 432 434 35 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [264])) sim2fitman_read_procpar.cpp:203 89 {*movdi_internal}
     (nil))
(insn 434 433 435 35 (set (reg:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(insn 435 434 436 35 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(insn 436 435 437 35 (set (reg:DI 5 di)
        (reg:DI 0 ax [265])) sim2fitman_read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(call_insn 437 436 439 35 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:204 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 439 437 939 35 (set (reg:SF 28 xmm7 [orig:131 D.5748 ] [131])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:130 D.5747 ] [130]))) sim2fitman_read_procpar.cpp:204 157 {*truncdfsf_fast_sse}
     (nil))
(insn 939 439 440 35 (set (reg:SF 0 ax [orig:131 D.5748 ] [131])
        (reg:SF 28 xmm7 [orig:131 D.5748 ] [131])) sim2fitman_read_procpar.cpp:204 129 {*movsf_internal}
     (nil))
(insn 440 939 441 35 (set (reg/f:DI 1 dx [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:204 89 {*movdi_internal}
     (nil))
(insn 441 440 885 35 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [266])
                (const_int 372 [0x174])) [0 procpar_info_41(D)->pos3+0 S4 A32])
        (reg:SF 0 ax [orig:131 D.5748 ] [131])) sim2fitman_read_procpar.cpp:204 129 {*movsf_internal}
     (nil))
(jump_insn 885 441 886 35 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 886 885 444)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 132 267
(code_label 444 886 445 36 20 "" [1 uses])
(note 445 444 446 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 446 445 447 36 (set (reg:DI 0 ax [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:206 89 {*movdi_internal}
     (nil))
(insn 447 446 448 36 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b695eb14098 *.LC24>)) sim2fitman_read_procpar.cpp:206 89 {*movdi_internal}
     (nil))
(insn 448 447 449 36 (set (reg:DI 5 di)
        (reg:DI 0 ax [267])) sim2fitman_read_procpar.cpp:206 89 {*movdi_internal}
     (nil))
(call_insn/i 449 448 450 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:206 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 450 449 451 36 (set (reg:SI 0 ax [orig:132 D.5744 ] [132])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:206 90 {*movsi_internal}
     (nil))
(insn 451 450 452 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:132 D.5744 ] [132])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:206 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 452 451 453 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 469)
            (pc))) sim2fitman_read_procpar.cpp:206 596 {*jcc_1}
     (nil)
 -> 469)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 133 134 268 269 270
(note 453 452 454 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 454 453 455 37 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:208 89 {*movdi_internal}
     (nil))
(insn 455 454 456 37 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:208 89 {*movdi_internal}
     (nil))
(call_insn 456 455 457 37 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:208 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 457 456 458 37 (set (reg:DI 0 ax [268])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:208 89 {*movdi_internal}
     (nil))
(insn 458 457 459 37 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [268])) sim2fitman_read_procpar.cpp:208 89 {*movdi_internal}
     (nil))
(insn 459 458 460 37 (set (reg:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:209 89 {*movdi_internal}
     (nil))
(insn 460 459 461 37 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:209 89 {*movdi_internal}
     (nil))
(insn 461 460 462 37 (set (reg:DI 5 di)
        (reg:DI 0 ax [269])) sim2fitman_read_procpar.cpp:209 89 {*movdi_internal}
     (nil))
(call_insn 462 461 464 37 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:209 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 464 462 940 37 (set (reg:SF 23 xmm2 [orig:134 D.5748 ] [134])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:133 D.5747 ] [133]))) sim2fitman_read_procpar.cpp:209 157 {*truncdfsf_fast_sse}
     (nil))
(insn 940 464 465 37 (set (reg:SF 0 ax [orig:134 D.5748 ] [134])
        (reg:SF 23 xmm2 [orig:134 D.5748 ] [134])) sim2fitman_read_procpar.cpp:209 129 {*movsf_internal}
     (nil))
(insn 465 940 466 37 (set (reg/f:DI 1 dx [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:209 89 {*movdi_internal}
     (nil))
(insn 466 465 887 37 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [270])
                (const_int 376 [0x178])) [0 procpar_info_41(D)->vox1+0 S4 A64])
        (reg:SF 0 ax [orig:134 D.5748 ] [134])) sim2fitman_read_procpar.cpp:209 129 {*movsf_internal}
     (nil))
(jump_insn 887 466 888 37 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 888 887 469)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 135 271
(code_label 469 888 470 38 21 "" [1 uses])
(note 470 469 471 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 471 470 472 38 (set (reg:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:213 89 {*movdi_internal}
     (nil))
(insn 472 471 473 38 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2b695eb14130 *.LC25>)) sim2fitman_read_procpar.cpp:213 89 {*movdi_internal}
     (nil))
(insn 473 472 474 38 (set (reg:DI 5 di)
        (reg:DI 0 ax [271])) sim2fitman_read_procpar.cpp:213 89 {*movdi_internal}
     (nil))
(call_insn/i 474 473 475 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:213 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 475 474 476 38 (set (reg:SI 0 ax [orig:135 D.5744 ] [135])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:213 90 {*movsi_internal}
     (nil))
(insn 476 475 477 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:135 D.5744 ] [135])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:213 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 477 476 478 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 494)
            (pc))) sim2fitman_read_procpar.cpp:213 596 {*jcc_1}
     (nil)
 -> 494)
;;  succ:       39 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 136 137 272 273 274
(note 478 477 479 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 479 478 480 39 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:215 89 {*movdi_internal}
     (nil))
(insn 480 479 481 39 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:215 89 {*movdi_internal}
     (nil))
(call_insn 481 480 482 39 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:215 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 482 481 483 39 (set (reg:DI 0 ax [272])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:215 89 {*movdi_internal}
     (nil))
(insn 483 482 484 39 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [272])) sim2fitman_read_procpar.cpp:215 89 {*movdi_internal}
     (nil))
(insn 484 483 485 39 (set (reg:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(insn 485 484 486 39 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(insn 486 485 487 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [273])) sim2fitman_read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(call_insn 487 486 489 39 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:216 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 489 487 941 39 (set (reg:SF 24 xmm3 [orig:137 D.5748 ] [137])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:136 D.5747 ] [136]))) sim2fitman_read_procpar.cpp:216 157 {*truncdfsf_fast_sse}
     (nil))
(insn 941 489 490 39 (set (reg:SF 0 ax [orig:137 D.5748 ] [137])
        (reg:SF 24 xmm3 [orig:137 D.5748 ] [137])) sim2fitman_read_procpar.cpp:216 129 {*movsf_internal}
     (nil))
(insn 490 941 491 39 (set (reg/f:DI 1 dx [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:216 89 {*movdi_internal}
     (nil))
(insn 491 490 889 39 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [274])
                (const_int 380 [0x17c])) [0 procpar_info_41(D)->vox2+0 S4 A32])
        (reg:SF 0 ax [orig:137 D.5748 ] [137])) sim2fitman_read_procpar.cpp:216 129 {*movsf_internal}
     (nil))
(jump_insn 889 491 890 39 (set (pc)
        (label_ref 517)) 636 {jump}
     (nil)
 -> 517)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 890 889 494)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 138 275
(code_label 494 890 495 40 22 "" [1 uses])
(note 495 494 496 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 496 495 497 40 (set (reg:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:221 89 {*movdi_internal}
     (nil))
(insn 497 496 498 40 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x2b695eb141c8 *.LC26>)) sim2fitman_read_procpar.cpp:221 89 {*movdi_internal}
     (nil))
(insn 498 497 499 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [275])) sim2fitman_read_procpar.cpp:221 89 {*movdi_internal}
     (nil))
(call_insn/i 499 498 500 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2b695e7a2300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:221 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 500 499 501 40 (set (reg:SI 0 ax [orig:138 D.5744 ] [138])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:221 90 {*movsi_internal}
     (nil))
(insn 501 500 502 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:138 D.5744 ] [138])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:221 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 502 501 503 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 517)
            (pc))) sim2fitman_read_procpar.cpp:221 596 {*jcc_1}
     (nil)
 -> 517)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 139 140 276 277 278
(note 503 502 504 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 504 503 505 41 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b695eafd720 *.LC6>)) sim2fitman_read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 505 504 506 41 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(call_insn 506 505 507 41 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2b695e9e2a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:223 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 507 506 508 41 (set (reg:DI 0 ax [276])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 508 507 509 41 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])
        (reg:DI 0 ax [276])) sim2fitman_read_procpar.cpp:223 89 {*movdi_internal}
     (nil))
(insn 509 508 510 41 (set (reg:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -600 [0xfffffffffffffda8])) [0 token+0 S8 A64])) sim2fitman_read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 510 509 511 41 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 511 510 512 41 (set (reg:DI 5 di)
        (reg:DI 0 ax [277])) sim2fitman_read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(call_insn 512 511 514 41 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:224 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 514 512 942 41 (set (reg:SF 25 xmm4 [orig:140 D.5748 ] [140])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:139 D.5747 ] [139]))) sim2fitman_read_procpar.cpp:224 157 {*truncdfsf_fast_sse}
     (nil))
(insn 942 514 515 41 (set (reg:SF 0 ax [orig:140 D.5748 ] [140])
        (reg:SF 25 xmm4 [orig:140 D.5748 ] [140])) sim2fitman_read_procpar.cpp:224 129 {*movsf_internal}
     (nil))
(insn 515 942 516 41 (set (reg/f:DI 1 dx [278])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:224 89 {*movdi_internal}
     (nil))
(insn 516 515 517 41 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [278])
                (const_int 384 [0x180])) [0 procpar_info_41(D)->vox3+0 S4 A64])
        (reg:SF 0 ax [orig:140 D.5748 ] [140])) sim2fitman_read_procpar.cpp:224 129 {*movsf_internal}
     (nil))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 [100.0%] 
;;              9 [100.0%] 
;;              11 [100.0%] 
;;              13 [100.0%] 
;;              15 [100.0%] 
;;              17 [100.0%] 
;;              19 [100.0%] 
;;              21 [100.0%] 
;;              23 [100.0%] 
;;              25 [100.0%] 
;;              27 [100.0%] 
;;              29 [100.0%] 
;;              31 [100.0%] 
;;              33 [100.0%] 
;;              35 [100.0%] 
;;              37 [100.0%] 
;;              40
;;              41 (FALLTHRU)
;;              39 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 279 280
(code_label 517 516 518 42 6 "" [19 uses])
(note 518 517 519 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 519 518 520 42 (set (reg:DI 1 dx [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(insn 520 519 522 42 (parallel [
            (set (reg:DI 0 ax [280])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:250 221 {*adddi_1}
     (nil))
(insn 522 520 523 42 (set (reg:SI 4 si)
        (const_int 255 [0xff])) sim2fitman_read_procpar.cpp:250 90 {*movsi_internal}
     (nil))
(insn 523 522 524 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [280])) sim2fitman_read_procpar.cpp:250 89 {*movdi_internal}
     (nil))
(call_insn 524 523 525 42 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x2b695e972c00 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:250 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 141 142 281
(note 525 524 526 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 526 525 527 43 (set (reg:DI 0 ax [281])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(insn 527 526 528 43 (set (reg:DI 5 di)
        (reg:DI 0 ax [281])) sim2fitman_read_procpar.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn 528 527 529 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ferror") [flags 0x41]  <function_decl 0x2b695e97ac00 ferror>) [0 ferror S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:251 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 529 528 530 43 (set (reg:SI 0 ax [orig:141 D.5744 ] [141])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:251 90 {*movsi_internal}
     (nil))
(insn 530 529 531 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:141 D.5744 ] [141])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:251 3 {*cmpsi_ccno_1}
     (nil))
(insn 531 530 532 43 (set (reg:QI 0 ax [orig:142 D.5745 ] [142])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:251 592 {*setcc_qi}
     (nil))
(insn 532 531 533 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:142 D.5745 ] [142])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:251 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 533 532 534 43 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 538)
            (pc))) sim2fitman_read_procpar.cpp:251 596 {*jcc_1}
     (nil)
 -> 538)
;;  succ:       44 (FALLTHRU)
;;              45 (DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 534 533 535 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 535 534 891 44 (set (reg:SI 0 ax [orig:83 D.5744 ] [83])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_read_procpar.cpp:252 90 {*movsi_internal}
     (nil))
(jump_insn 891 535 892 44 (set (pc)
        (label_ref 836)) sim2fitman_read_procpar.cpp:252 636 {jump}
     (nil)
 -> 836)
;;  succ:       78 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 892 891 538)
;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (DFS_BACK)
;;              4 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 88 282
(code_label 538 892 539 45 4 "" [2 uses])
(note 539 538 540 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 45 (set (reg:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:76 89 {*movdi_internal}
     (nil))
(insn 541 540 542 45 (set (reg:DI 5 di)
        (reg:DI 0 ax [282])) sim2fitman_read_procpar.cpp:76 89 {*movdi_internal}
     (nil))
(call_insn 542 541 543 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("feof") [flags 0x41]  <function_decl 0x2b695e97ab00 feof>) [0 feof S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:76 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 543 542 544 45 (set (reg:SI 0 ax [orig:88 D.5744 ] [88])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:76 90 {*movsi_internal}
     (nil))
(insn 544 543 545 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.5744 ] [88])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:76 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 545 544 546 45 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 555)
            (pc))) sim2fitman_read_procpar.cpp:76 596 {*jcc_1}
     (nil)
 -> 555)
;;  succ:       46 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 283
(note 546 545 547 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 547 546 548 46 (set (reg:QI 0 ax [283])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -673 [0xfffffffffffffd5f])) [0 done_hdr+0 S1 A8])) sim2fitman_read_procpar.cpp:76 93 {*movqi_internal}
     (nil))
(insn 548 547 549 46 (parallel [
            (set (reg:QI 0 ax [orig:89 D.5745 ] [89])
                (xor:QI (reg:QI 0 ax [283])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:76 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -673 [0xfffffffffffffd5f])) [0 done_hdr+0 S1 A8])
            (const_int 1 [0x1]))
        (nil)))
(insn 549 548 550 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.5745 ] [89])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:76 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 550 549 551 46 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 555)
            (pc))) sim2fitman_read_procpar.cpp:76 596 {*jcc_1}
     (nil)
 -> 555)
;;  succ:       47 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 84
(note 551 550 552 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 552 551 893 47 (set (reg:QI 0 ax [orig:84 D.5745 ] [84])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:76 93 {*movqi_internal}
     (nil))
(jump_insn 893 552 894 47 (set (pc)
        (label_ref 558)) sim2fitman_read_procpar.cpp:76 636 {jump}
     (nil)
 -> 558)
;;  succ:       49 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84

(barrier 894 893 555)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45
;;              46
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 84
(code_label 555 894 556 48 23 "" [2 uses])
(note 556 555 557 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 557 556 558 48 (set (reg:QI 0 ax [orig:84 D.5745 ] [84])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:76 93 {*movqi_internal}
     (nil))
;;  succ:       49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;;              47 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 84
;; lr  def 	 17 [flags]
(code_label 558 557 559 49 24 "" [1 uses])
(note 559 558 561 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 561 559 562 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.5745 ] [84])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:76 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 562 561 563 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 560)
            (pc))) sim2fitman_read_procpar.cpp:76 596 {*jcc_1}
     (nil)
 -> 560)
;;  succ:       5
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 143 144 145 284
(note 563 562 564 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 564 563 565 50 (set (reg:QI 0 ax [orig:143 D.5752 ] [143])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -588 [0xfffffffffffffdb4])) [0 date_temp+4 S1 A32])) sim2fitman_read_procpar.cpp:261 93 {*movqi_internal}
     (nil))
(insn 565 564 566 50 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -672 [0xfffffffffffffd60])) [0 month_temp+0 S1 A64])
        (reg:QI 0 ax [orig:143 D.5752 ] [143])) sim2fitman_read_procpar.cpp:261 93 {*movqi_internal}
     (nil))
(insn 566 565 567 50 (set (reg:QI 0 ax [orig:144 D.5752 ] [144])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -587 [0xfffffffffffffdb5])) [0 date_temp+5 S1 A8])) sim2fitman_read_procpar.cpp:262 93 {*movqi_internal}
     (nil))
(insn 567 566 568 50 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -671 [0xfffffffffffffd61])) [0 month_temp+1 S1 A8])
        (reg:QI 0 ax [orig:144 D.5752 ] [144])) sim2fitman_read_procpar.cpp:262 93 {*movqi_internal}
     (nil))
(insn 568 567 569 50 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -670 [0xfffffffffffffd62])) [0 month_temp+2 S1 A16])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:263 93 {*movqi_internal}
     (nil))
(insn 569 568 570 50 (parallel [
            (set (reg:DI 0 ax [284])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -672 [0xfffffffffffffd60])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:264 221 {*adddi_1}
     (nil))
(insn 570 569 571 50 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) sim2fitman_read_procpar.cpp:264 90 {*movsi_internal}
     (nil))
(insn 571 570 572 50 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 572 571 573 50 (set (reg:DI 5 di)
        (reg:DI 0 ax [284])) sim2fitman_read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(call_insn 573 572 574 50 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtol") [flags 0x41]  <function_decl 0x2b695ea34300 strtol>) [0 strtol S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:264 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 574 573 575 50 (set (reg:DI 0 ax [orig:145 D.5746 ] [145])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:264 89 {*movdi_internal}
     (nil))
(insn 575 574 576 50 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -652 [0xfffffffffffffd74])) [0 month_temp_int+0 S4 A32])
        (reg:SI 0 ax [orig:145 D.5746 ] [145])) sim2fitman_read_procpar.cpp:264 90 {*movsi_internal}
     (nil))
(insn 576 575 577 50 (set (reg:CC 17 flags)
        (compare:CC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -652 [0xfffffffffffffd74])) [0 month_temp_int+0 S4 A32])
            (const_int 12 [0xc]))) sim2fitman_read_procpar.cpp:265 7 {*cmpsi_1}
     (nil))
(jump_insn 577 576 850 50 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 669)
            (pc))) sim2fitman_read_procpar.cpp:265 596 {*jcc_1}
     (nil)
 -> 669)
;;  succ:       64
;;              51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 285 286
(note 850 577 578 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 578 850 579 51 (set (reg:DI 0 ax [285])
        (zero_extend:DI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -652 [0xfffffffffffffd74])) [0 month_temp_int+0 S4 A32]))) sim2fitman_read_procpar.cpp:265 133 {*zero_extendsidi2}
     (nil))
(insn 579 578 580 51 (set (reg:DI 0 ax [286])
        (mem/u/c:DI (plus:DI (ashift:DI (reg:DI 0 ax [285])
                    (const_int 3 [0x3]))
                (label_ref:DI 582)) [0  S8 A8])) sim2fitman_read_procpar.cpp:265 89 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 582 (nil)))
(jump_insn 580 579 581 51 (parallel [
            (set (pc)
                (reg:DI 0 ax [286]))
            (use (label_ref 582))
        ]) sim2fitman_read_procpar.cpp:265 640 {*tablejump_1}
     (nil)
 -> 582)
;;  succ:       64
;;              52
;;              53
;;              54
;;              55
;;              56
;;              57
;;              58
;;              59
;;              60
;;              61
;;              62
;;              63
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 581 580 582)
;; Insn is not within a basic block
(code_label 582 581 583 28 "" [2 uses])
;; Insn is not within a basic block
(jump_table_data 583 582 584 (addr_vec:DI [
            (label_ref:DI 669)
            (label_ref:DI 585)
            (label_ref:DI 592)
            (label_ref:DI 599)
            (label_ref:DI 606)
            (label_ref:DI 613)
            (label_ref:DI 620)
            (label_ref:DI 627)
            (label_ref:DI 634)
            (label_ref:DI 641)
            (label_ref:DI 648)
            (label_ref:DI 655)
            (label_ref:DI 662)
        ]))
(barrier 584 583 585)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 287
(code_label 585 584 586 52 27 "" [1 uses])
(note 586 585 587 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 587 586 588 52 (set (reg/f:DI 0 ax [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:266 89 {*movdi_internal}
     (nil))
(insn 588 587 589 52 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.5753 ] [146])
                (plus:DI (reg/f:DI 0 ax [287])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:266 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 589 588 895 52 (set (mem:SI (reg/f:DI 0 ax [orig:146 D.5753 ] [146]) [0 MEM[(void *)_112]+0 S4 A8])
        (const_int 7233866 [0x6e614a])) sim2fitman_read_procpar.cpp:266 90 {*movsi_internal}
     (nil))
(jump_insn 895 589 896 52 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:266 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 896 895 592)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 288
(code_label 592 896 593 53 29 "" [1 uses])
(note 593 592 594 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 594 593 595 53 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:267 89 {*movdi_internal}
     (nil))
(insn 595 594 596 53 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.5753 ] [147])
                (plus:DI (reg/f:DI 0 ax [288])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:267 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 596 595 897 53 (set (mem:SI (reg/f:DI 0 ax [orig:147 D.5753 ] [147]) [0 MEM[(void *)_113]+0 S4 A8])
        (const_int 6448454 [0x626546])) sim2fitman_read_procpar.cpp:267 90 {*movsi_internal}
     (nil))
(jump_insn 897 596 898 53 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:267 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 898 897 599)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 289
(code_label 599 898 600 54 30 "" [1 uses])
(note 600 599 601 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 601 600 602 54 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:268 89 {*movdi_internal}
     (nil))
(insn 602 601 603 54 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.5753 ] [148])
                (plus:DI (reg/f:DI 0 ax [289])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:268 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 603 602 899 54 (set (mem:SI (reg/f:DI 0 ax [orig:148 D.5753 ] [148]) [0 MEM[(void *)_114]+0 S4 A8])
        (const_int 7496013 [0x72614d])) sim2fitman_read_procpar.cpp:268 90 {*movsi_internal}
     (nil))
(jump_insn 899 603 900 54 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:268 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 900 899 606)
;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 290
(code_label 606 900 607 55 31 "" [1 uses])
(note 607 606 608 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 608 607 609 55 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:269 89 {*movdi_internal}
     (nil))
(insn 609 608 610 55 (parallel [
            (set (reg/f:DI 0 ax [orig:149 D.5753 ] [149])
                (plus:DI (reg/f:DI 0 ax [290])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:269 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 610 609 901 55 (set (mem:SI (reg/f:DI 0 ax [orig:149 D.5753 ] [149]) [0 MEM[(void *)_115]+0 S4 A8])
        (const_int 7499841 [0x727041])) sim2fitman_read_procpar.cpp:269 90 {*movsi_internal}
     (nil))
(jump_insn 901 610 902 55 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:269 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 902 901 613)
;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 291
(code_label 613 902 614 56 32 "" [1 uses])
(note 614 613 615 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 615 614 616 56 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:270 89 {*movdi_internal}
     (nil))
(insn 616 615 617 56 (parallel [
            (set (reg/f:DI 0 ax [orig:150 D.5753 ] [150])
                (plus:DI (reg/f:DI 0 ax [291])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:270 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 617 616 903 56 (set (mem:SI (reg/f:DI 0 ax [orig:150 D.5753 ] [150]) [0 MEM[(void *)_116]+0 S4 A8])
        (const_int 7954765 [0x79614d])) sim2fitman_read_procpar.cpp:270 90 {*movsi_internal}
     (nil))
(jump_insn 903 617 904 56 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:270 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 904 903 620)
;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 292
(code_label 620 904 621 57 33 "" [1 uses])
(note 621 620 622 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 622 621 623 57 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:271 89 {*movdi_internal}
     (nil))
(insn 623 622 624 57 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.5753 ] [151])
                (plus:DI (reg/f:DI 0 ax [292])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:271 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 624 623 905 57 (set (mem:SI (reg/f:DI 0 ax [orig:151 D.5753 ] [151]) [0 MEM[(void *)_117]+0 S4 A8])
        (const_int 7238986 [0x6e754a])) sim2fitman_read_procpar.cpp:271 90 {*movsi_internal}
     (nil))
(jump_insn 905 624 906 57 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:271 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 906 905 627)
;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 293
(code_label 627 906 628 58 34 "" [1 uses])
(note 628 627 629 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 629 628 630 58 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:272 89 {*movdi_internal}
     (nil))
(insn 630 629 631 58 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.5753 ] [152])
                (plus:DI (reg/f:DI 0 ax [293])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:272 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 631 630 907 58 (set (mem:SI (reg/f:DI 0 ax [orig:152 D.5753 ] [152]) [0 MEM[(void *)_118]+0 S4 A8])
        (const_int 7107914 [0x6c754a])) sim2fitman_read_procpar.cpp:272 90 {*movsi_internal}
     (nil))
(jump_insn 907 631 908 58 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:272 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 908 907 634)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 294
(code_label 634 908 635 59 35 "" [1 uses])
(note 635 634 636 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 636 635 637 59 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:273 89 {*movdi_internal}
     (nil))
(insn 637 636 638 59 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.5753 ] [153])
                (plus:DI (reg/f:DI 0 ax [294])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:273 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 638 637 909 59 (set (mem:SI (reg/f:DI 0 ax [orig:153 D.5753 ] [153]) [0 MEM[(void *)_119]+0 S4 A8])
        (const_int 6780225 [0x677541])) sim2fitman_read_procpar.cpp:273 90 {*movsi_internal}
     (nil))
(jump_insn 909 638 910 59 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:273 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 910 909 641)
;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 295
(code_label 641 910 642 60 36 "" [1 uses])
(note 642 641 643 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 643 642 644 60 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:274 89 {*movdi_internal}
     (nil))
(insn 644 643 645 60 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.5753 ] [154])
                (plus:DI (reg/f:DI 0 ax [295])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:274 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 645 644 911 60 (set (mem:SI (reg/f:DI 0 ax [orig:154 D.5753 ] [154]) [0 MEM[(void *)_120]+0 S4 A8])
        (const_int 7365971 [0x706553])) sim2fitman_read_procpar.cpp:274 90 {*movsi_internal}
     (nil))
(jump_insn 911 645 912 60 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:274 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 912 911 648)
;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 155 296
(code_label 648 912 649 61 37 "" [1 uses])
(note 649 648 650 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 650 649 651 61 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:275 89 {*movdi_internal}
     (nil))
(insn 651 650 652 61 (parallel [
            (set (reg/f:DI 0 ax [orig:155 D.5753 ] [155])
                (plus:DI (reg/f:DI 0 ax [296])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:275 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 652 651 913 61 (set (mem:SI (reg/f:DI 0 ax [orig:155 D.5753 ] [155]) [0 MEM[(void *)_121]+0 S4 A8])
        (const_int 7627599 [0x74634f])) sim2fitman_read_procpar.cpp:275 90 {*movsi_internal}
     (nil))
(jump_insn 913 652 914 61 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:275 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 914 913 655)
;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 156 297
(code_label 655 914 656 62 38 "" [1 uses])
(note 656 655 657 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 657 656 658 62 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:276 89 {*movdi_internal}
     (nil))
(insn 658 657 659 62 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.5753 ] [156])
                (plus:DI (reg/f:DI 0 ax [297])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:276 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 659 658 915 62 (set (mem:SI (reg/f:DI 0 ax [orig:156 D.5753 ] [156]) [0 MEM[(void *)_122]+0 S4 A8])
        (const_int 7761742 [0x766f4e])) sim2fitman_read_procpar.cpp:276 90 {*movsi_internal}
     (nil))
(jump_insn 915 659 916 62 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:276 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 916 915 662)
;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 298
(code_label 662 916 663 63 39 "" [1 uses])
(note 663 662 664 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 664 663 665 63 (set (reg/f:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:277 89 {*movdi_internal}
     (nil))
(insn 665 664 666 63 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.5753 ] [157])
                (plus:DI (reg/f:DI 0 ax [298])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:277 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 666 665 917 63 (set (mem:SI (reg/f:DI 0 ax [orig:157 D.5753 ] [157]) [0 MEM[(void *)_123]+0 S4 A8])
        (const_int 6513988 [0x636544])) sim2fitman_read_procpar.cpp:277 90 {*movsi_internal}
     (nil))
(jump_insn 917 666 918 63 (set (pc)
        (label_ref 674)) sim2fitman_read_procpar.cpp:277 636 {jump}
     (nil)
 -> 674)
;;  succ:       65 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 918 917 669)
;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;;              50
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 299
(code_label 669 918 670 64 26 "" [2 uses])
(note 670 669 671 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 671 670 672 64 (set (reg/f:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:278 89 {*movdi_internal}
     (nil))
(insn 672 671 673 64 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.5753 ] [158])
                (plus:DI (reg/f:DI 0 ax [299])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:278 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 673 672 674 64 (set (mem:SI (reg/f:DI 0 ax [orig:158 D.5753 ] [158]) [0 MEM[(void *)_124]+0 S4 A8])
        (const_int 2105376 [0x202020])) sim2fitman_read_procpar.cpp:278 90 {*movsi_internal}
     (nil))
;;  succ:       65 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU)
;;              52 [100.0%] 
;;              53 [100.0%] 
;;              54 [100.0%] 
;;              55 [100.0%] 
;;              56 [100.0%] 
;;              57 [100.0%] 
;;              58 [100.0%] 
;;              59 [100.0%] 
;;              60 [100.0%] 
;;              61 [100.0%] 
;;              62 [100.0%] 
;;              63 [100.0%] 
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 159 160 161 162 163 164 165 166 167 168 169 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318
(code_label 674 673 675 65 40 "" [12 uses])
(note 675 674 676 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 676 675 677 65 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:280 89 {*movdi_internal}
     (nil))
(insn 677 676 678 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [300])
                (const_int 11 [0xb])) [0 procpar_info_41(D)->ex_datetime+3 S1 A8])
        (const_int 32 [0x20])) sim2fitman_read_procpar.cpp:280 93 {*movqi_internal}
     (nil))
(insn 678 677 679 65 (set (reg:QI 1 dx [orig:159 D.5752 ] [159])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -586 [0xfffffffffffffdb6])) [0 date_temp+6 S1 A16])) sim2fitman_read_procpar.cpp:281 93 {*movqi_internal}
     (nil))
(insn 679 678 680 65 (set (reg/f:DI 0 ax [301])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:281 89 {*movdi_internal}
     (nil))
(insn 680 679 681 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [301])
                (const_int 12 [0xc])) [0 procpar_info_41(D)->ex_datetime+4 S1 A32])
        (reg:QI 1 dx [orig:159 D.5752 ] [159])) sim2fitman_read_procpar.cpp:281 93 {*movqi_internal}
     (nil))
(insn 681 680 682 65 (set (reg:QI 1 dx [orig:160 D.5752 ] [160])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -585 [0xfffffffffffffdb7])) [0 date_temp+7 S1 A8])) sim2fitman_read_procpar.cpp:282 93 {*movqi_internal}
     (nil))
(insn 682 681 683 65 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:282 89 {*movdi_internal}
     (nil))
(insn 683 682 684 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [302])
                (const_int 13 [0xd])) [0 procpar_info_41(D)->ex_datetime+5 S1 A8])
        (reg:QI 1 dx [orig:160 D.5752 ] [160])) sim2fitman_read_procpar.cpp:282 93 {*movqi_internal}
     (nil))
(insn 684 683 685 65 (set (reg/f:DI 0 ax [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:283 89 {*movdi_internal}
     (nil))
(insn 685 684 686 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [303])
                (const_int 14 [0xe])) [0 procpar_info_41(D)->ex_datetime+6 S1 A16])
        (const_int 32 [0x20])) sim2fitman_read_procpar.cpp:283 93 {*movqi_internal}
     (nil))
(insn 686 685 687 65 (set (reg:QI 1 dx [orig:161 D.5752 ] [161])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -592 [0xfffffffffffffdb0])) [0 date_temp+0 S1 A64])) sim2fitman_read_procpar.cpp:306 93 {*movqi_internal}
     (nil))
(insn 687 686 688 65 (set (reg/f:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:306 89 {*movdi_internal}
     (nil))
(insn 688 687 689 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [304])
                (const_int 15 [0xf])) [0 procpar_info_41(D)->ex_datetime+7 S1 A8])
        (reg:QI 1 dx [orig:161 D.5752 ] [161])) sim2fitman_read_procpar.cpp:306 93 {*movqi_internal}
     (nil))
(insn 689 688 690 65 (set (reg:QI 1 dx [orig:162 D.5752 ] [162])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -591 [0xfffffffffffffdb1])) [0 date_temp+1 S1 A8])) sim2fitman_read_procpar.cpp:307 93 {*movqi_internal}
     (nil))
(insn 690 689 691 65 (set (reg/f:DI 0 ax [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:307 89 {*movdi_internal}
     (nil))
(insn 691 690 692 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [305])
                (const_int 16 [0x10])) [0 procpar_info_41(D)->ex_datetime+8 S1 A64])
        (reg:QI 1 dx [orig:162 D.5752 ] [162])) sim2fitman_read_procpar.cpp:307 93 {*movqi_internal}
     (nil))
(insn 692 691 693 65 (set (reg:QI 1 dx [orig:163 D.5752 ] [163])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -590 [0xfffffffffffffdb2])) [0 date_temp+2 S1 A16])) sim2fitman_read_procpar.cpp:308 93 {*movqi_internal}
     (nil))
(insn 693 692 694 65 (set (reg/f:DI 0 ax [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:308 89 {*movdi_internal}
     (nil))
(insn 694 693 695 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [306])
                (const_int 17 [0x11])) [0 procpar_info_41(D)->ex_datetime+9 S1 A8])
        (reg:QI 1 dx [orig:163 D.5752 ] [163])) sim2fitman_read_procpar.cpp:308 93 {*movqi_internal}
     (nil))
(insn 695 694 696 65 (set (reg:QI 1 dx [orig:164 D.5752 ] [164])
        (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -589 [0xfffffffffffffdb3])) [0 date_temp+3 S1 A8])) sim2fitman_read_procpar.cpp:309 93 {*movqi_internal}
     (nil))
(insn 696 695 697 65 (set (reg/f:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:309 89 {*movdi_internal}
     (nil))
(insn 697 696 698 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [307])
                (const_int 18 [0x12])) [0 procpar_info_41(D)->ex_datetime+10 S1 A16])
        (reg:QI 1 dx [orig:164 D.5752 ] [164])) sim2fitman_read_procpar.cpp:309 93 {*movqi_internal}
     (nil))
(insn 698 697 699 65 (set (reg/f:DI 0 ax [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:312 89 {*movdi_internal}
     (nil))
(insn 699 698 700 65 (set (mem/j:QI (plus:DI (reg/f:DI 0 ax [308])
                (const_int 19 [0x13])) [0 procpar_info_41(D)->ex_datetime+11 S1 A8])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:312 93 {*movqi_internal}
     (nil))
(insn 700 699 701 65 (set (reg/f:DI 1 dx [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:315 89 {*movdi_internal}
     (nil))
(insn 701 700 702 65 (set (reg:DF 0 ax [310])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC27") [flags 0x2]) [0  S8 A64])) sim2fitman_read_procpar.cpp:315 128 {*movdf_internal}
     (nil))
(insn 702 701 703 65 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [309])
                (const_int 344 [0x158])) [0 procpar_info_41(D)->offset_frequency+0 S8 A64])
        (reg:DF 0 ax [310])) sim2fitman_read_procpar.cpp:315 128 {*movdf_internal}
     (nil))
(insn 703 702 704 65 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:317 89 {*movdi_internal}
     (nil))
(insn 704 703 705 65 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [311])
                (const_int 324 [0x144])) [0 procpar_info_41(D)->num_transients+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:317 90 {*movsi_internal}
     (nil))
(insn 705 704 706 65 (set (reg/f:DI 1 dx [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:319 89 {*movdi_internal}
     (nil))
(insn 706 705 707 65 (set (reg:SF 0 ax [313])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:319 129 {*movsf_internal}
     (nil))
(insn 707 706 708 65 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [312])
                (const_int 400 [0x190])) [0 procpar_info_41(D)->vtheta+0 S4 A64])
        (reg:SF 0 ax [313])) sim2fitman_read_procpar.cpp:319 129 {*movsf_internal}
     (nil))
(insn 708 707 709 65 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:321 89 {*movdi_internal}
     (nil))
(insn 709 708 710 65 (set (reg:SI 0 ax [orig:165 D.5744 ] [165])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [314])
                (const_int 328 [0x148])) [0 procpar_info_41(D)->num_points+0 S4 A64])) sim2fitman_read_procpar.cpp:321 90 {*movsi_internal}
     (nil))
(insn 710 709 711 65 (set (reg:SF 21 xmm0 [orig:166 D.5748 ] [166])
        (float:SF (reg:SI 0 ax [orig:165 D.5744 ] [165]))) sim2fitman_read_procpar.cpp:321 199 {*floatsisf2_sse}
     (nil))
(insn 711 710 944 65 (set (reg:SF 21 xmm0 [orig:167 D.5748 ] [167])
        (mult:SF (reg:SF 21 xmm0 [orig:167 D.5748 ] [167])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -660 [0xfffffffffffffd6c])) [0 dwell+0 S4 A32]))) sim2fitman_read_procpar.cpp:321 775 {*fop_sf_comm_sse}
     (nil))
(insn 944 711 712 65 (set (reg:SF 0 ax [orig:167 D.5748 ] [167])
        (reg:SF 21 xmm0 [orig:167 D.5748 ] [167])) sim2fitman_read_procpar.cpp:321 129 {*movsf_internal}
     (nil))
(insn 712 944 713 65 (set (reg/f:DI 1 dx [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:321 89 {*movdi_internal}
     (nil))
(insn 713 712 714 65 (set (mem/j:SF (reg/f:DI 1 dx [315]) [0 procpar_info_41(D)->acquision_time+0 S4 A64])
        (reg:SF 0 ax [orig:167 D.5748 ] [167])) sim2fitman_read_procpar.cpp:321 129 {*movsf_internal}
     (nil))
(insn 714 713 715 65 (set (reg/f:DI 1 dx [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:377 89 {*movdi_internal}
     (nil))
(insn 715 714 716 65 (set (reg:SF 0 ax [317])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) sim2fitman_read_procpar.cpp:377 129 {*movsf_internal}
     (nil))
(insn 716 715 717 65 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [316])
                (const_int 360 [0x168])) [0 procpar_info_41(D)->gain+0 S4 A64])
        (reg:SF 0 ax [317])) sim2fitman_read_procpar.cpp:377 129 {*movsf_internal}
     (nil))
(insn 717 716 718 65 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x2b695eb14260 *.LC28>)) sim2fitman_read_procpar.cpp:378 89 {*movdi_internal}
     (nil))
(call_insn 718 717 719 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b695e7af900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:378 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 719 718 720 65 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x2b695eb142f8 *.LC29>)) sim2fitman_read_procpar.cpp:379 89 {*movdi_internal}
     (nil))
(insn 720 719 721 65 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:379 93 {*movqi_internal}
     (nil))
(call_insn 721 720 722 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b695e7ace00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:379 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 722 721 723 65 (parallel [
            (set (reg:DI 0 ax [318])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:380 221 {*adddi_1}
     (nil))
(insn 723 722 724 65 (set (reg:DI 5 di)
        (reg:DI 0 ax [318])) sim2fitman_read_procpar.cpp:380 89 {*movdi_internal}
     (nil))
(call_insn 724 723 725 65 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("gets") [flags 0x41]  <function_decl 0x2b695e972d00 gets>) [0 gets S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:380 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 725 724 726 65 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.5754 ] [168])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:381 221 {*adddi_1}
     (nil))
(insn 726 725 727 65 (set (reg:QI 0 ax [orig:169 D.5755 ] [169])
        (mem:QI (reg/f:DI 0 ax [orig:168 D.5754 ] [168]) [0 MEM[(const unsigned char * {ref-all})_134]+0 S1 A8])) sim2fitman_read_procpar.cpp:381 93 {*movqi_internal}
     (nil))
(insn 727 726 728 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:169 D.5755 ] [169])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:381 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 728 727 729 65 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 785)
            (pc))) sim2fitman_read_procpar.cpp:381 596 {*jcc_1}
     (nil)
 -> 785)
;;  succ:       66 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 170 319
(note 729 728 730 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 730 729 731 66 (parallel [
            (set (reg:DI 0 ax [319])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:382 221 {*adddi_1}
     (nil))
(insn 731 730 732 66 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:382 89 {*movdi_internal}
     (nil))
(insn 732 731 733 66 (set (reg:DI 5 di)
        (reg:DI 0 ax [319])) sim2fitman_read_procpar.cpp:382 89 {*movdi_internal}
     (nil))
(call_insn 733 732 735 66 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:382 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 735 733 945 66 (set (reg:SF 26 xmm5 [358])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:170 D.5747 ] [170]))) sim2fitman_read_procpar.cpp:382 157 {*truncdfsf_fast_sse}
     (nil))
(insn 945 735 919 66 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -656 [0xfffffffffffffd70])) [0 temp_float+0 S4 A32])
        (reg:SF 26 xmm5 [358])) sim2fitman_read_procpar.cpp:382 129 {*movsf_internal}
     (nil))
(jump_insn 919 945 920 66 (set (pc)
        (label_ref 752)) sim2fitman_read_procpar.cpp:383 636 {jump}
     (nil)
 -> 752)
;;  succ:       69 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 920 919 778)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 320
(code_label 778 920 738 67 46 "" [1 uses])
(note 738 778 739 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 739 738 740 67 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x2b695eb14390 *.LC30>)) sim2fitman_read_procpar.cpp:384 89 {*movdi_internal}
     (nil))
(insn 740 739 741 67 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:384 93 {*movqi_internal}
     (nil))
(call_insn 741 740 742 67 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b695e7ace00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:384 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 742 741 743 67 (parallel [
            (set (reg:DI 0 ax [320])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:385 221 {*adddi_1}
     (nil))
(insn 743 742 744 67 (set (reg:DI 5 di)
        (reg:DI 0 ax [320])) sim2fitman_read_procpar.cpp:385 89 {*movdi_internal}
     (nil))
(call_insn 744 743 745 67 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("gets") [flags 0x41]  <function_decl 0x2b695e972d00 gets>) [0 gets S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:385 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       68 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 174 321
(note 745 744 746 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 746 745 747 68 (parallel [
            (set (reg:DI 0 ax [321])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:386 221 {*adddi_1}
     (nil))
(insn 747 746 748 68 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:386 89 {*movdi_internal}
     (nil))
(insn 748 747 749 68 (set (reg:DI 5 di)
        (reg:DI 0 ax [321])) sim2fitman_read_procpar.cpp:386 89 {*movdi_internal}
     (nil))
(call_insn 749 748 751 68 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("strtod") [flags 0x41]  <function_decl 0x2b695ea34000 strtod>) [0 strtod S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:386 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 751 749 946 68 (set (reg:SF 27 xmm6 [359])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:174 D.5747 ] [174]))) sim2fitman_read_procpar.cpp:386 157 {*truncdfsf_fast_sse}
     (nil))
(insn 946 751 752 68 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -656 [0xfffffffffffffd70])) [0 temp_float+0 S4 A32])
        (reg:SF 27 xmm6 [359])) sim2fitman_read_procpar.cpp:386 129 {*movsf_internal}
     (nil))
;;  succ:       69 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU,DFS_BACK)
;;              66 [100.0%] 
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 171 172 322
(code_label 752 946 753 69 42 "" [1 uses])
(note 753 752 754 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 754 753 755 69 (parallel [
            (set (reg:DI 0 ax [322])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -528 [0xfffffffffffffdf0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:383 221 {*adddi_1}
     (nil))
(insn 755 754 756 69 (set (reg:DI 5 di)
        (reg:DI 0 ax [322])) sim2fitman_read_procpar.cpp:383 89 {*movdi_internal}
     (nil))
(call_insn 756 755 757 69 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z8isNumberPc") [flags 0x41]  <function_decl 0x2b695eaa8000 isNumber>) [0 isNumber S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 757 756 758 69 (set (reg:QI 0 ax [orig:171 D.5745 ] [171])
        (reg:QI 0 ax)) sim2fitman_read_procpar.cpp:383 93 {*movqi_internal}
     (nil))
(insn 758 757 759 69 (parallel [
            (set (reg:QI 0 ax [orig:172 D.5745 ] [172])
                (xor:QI (reg:QI 0 ax [orig:171 D.5745 ] [171])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:383 395 {*xorqi_1}
     (nil))
(insn 759 758 760 69 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:172 D.5745 ] [172])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 760 759 761 69 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 768)
            (pc))) sim2fitman_read_procpar.cpp:383 596 {*jcc_1}
     (nil)
 -> 768)
;;  succ:       71
;;              70 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69 (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 173 323
(note 761 760 762 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 762 761 763 70 (set (reg:SF 0 ax [323])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -656 [0xfffffffffffffd70])) [0 temp_float+0 S4 A32])) sim2fitman_read_procpar.cpp:383 129 {*movsf_internal}
     (nil))
(insn 763 762 947 70 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -740 [0xfffffffffffffd1c])) [0 %sfp+-740 S4 A32])
        (reg:SF 0 ax [323])) sim2fitman_read_procpar.cpp:383 129 {*movsf_internal}
     (nil))
(insn 947 763 764 70 (set (reg:SF 21 xmm0)
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -740 [0xfffffffffffffd1c])) [0 %sfp+-740 S4 A32])) sim2fitman_read_procpar.cpp:383 129 {*movsf_internal}
     (nil))
(call_insn 764 947 765 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5isNANf") [flags 0x41]  <function_decl 0x2b695eaa8700 isNAN>) [0 isNAN S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 649 {*call_value}
     (nil)
    (expr_list:SF (use (reg:SF 21 xmm0))
        (nil)))
(insn 765 764 766 70 (set (reg:SI 0 ax [orig:173 D.5744 ] [173])
        (reg:SI 0 ax)) sim2fitman_read_procpar.cpp:383 90 {*movsi_internal}
     (nil))
(insn 766 765 767 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:173 D.5744 ] [173])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 767 766 768 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 773)
            (pc))) sim2fitman_read_procpar.cpp:383 596 {*jcc_1}
     (nil)
 -> 773)
;;  succ:       71 (FALLTHRU)
;;              72
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69
;;              70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 85
(code_label 768 767 769 71 43 "" [1 uses])
(note 769 768 770 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 770 769 921 71 (set (reg:QI 0 ax [orig:85 D.5745 ] [85])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:383 93 {*movqi_internal}
     (nil))
(jump_insn 921 770 922 71 (set (pc)
        (label_ref 776)) sim2fitman_read_procpar.cpp:383 636 {jump}
     (nil)
 -> 776)
;;  succ:       73 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85

(barrier 922 921 773)
;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 85
(code_label 773 922 774 72 44 "" [1 uses])
(note 774 773 775 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 775 774 776 72 (set (reg:QI 0 ax [orig:85 D.5745 ] [85])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:383 93 {*movqi_internal}
     (nil))
;;  succ:       73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;;              71 [100.0%] 
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 85
;; lr  def 	 17 [flags]
(code_label 776 775 777 73 45 "" [1 uses])
(note 777 776 779 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 779 777 780 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:85 D.5745 ] [85])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:383 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 780 779 781 73 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 778)
            (pc))) sim2fitman_read_procpar.cpp:383 596 {*jcc_1}
     (nil)
 -> 778)
;;  succ:       67
;;              74 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 324 325
(note 781 780 782 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 782 781 783 74 (set (reg/f:DI 1 dx [324])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:388 89 {*movdi_internal}
     (nil))
(insn 783 782 784 74 (set (reg:SF 0 ax [325])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -656 [0xfffffffffffffd70])) [0 temp_float+0 S4 A32])) sim2fitman_read_procpar.cpp:388 129 {*movsf_internal}
     (nil))
(insn 784 783 785 74 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [324])
                (const_int 360 [0x168])) [0 procpar_info_41(D)->gain+0 S4 A64])
        (reg:SF 0 ax [325])) sim2fitman_read_procpar.cpp:388 129 {*movsf_internal}
     (nil))
;;  succ:       75 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65
;;              74 (FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 175 176 177 178 179 180 181 182 183 184 185 326 327 328 329 330 331 332 333 334 335 338 339 340
(code_label 785 784 786 75 41 "" [1 uses])
(note 786 785 787 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 787 786 788 75 (set (reg/f:DI 0 ax [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:395 89 {*movdi_internal}
     (nil))
(insn 788 787 789 75 (set (mem/j:SI (reg/f:DI 0 ax [326]) [0 infile_struct_34(D)->num_datasets+0 S4 A64])
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:395 90 {*movsi_internal}
     (nil))
(insn 789 788 790 75 (set (reg/f:DI 0 ax [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])) sim2fitman_read_procpar.cpp:397 89 {*movdi_internal}
     (nil))
(insn 790 789 791 75 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [327])
                (const_int 24 [0x18])) [0 main_header_38(D)->ebytes.number+0 S8 A64])
        (const_int 16 [0x10])) sim2fitman_read_procpar.cpp:397 89 {*movdi_internal}
     (nil))
(insn 791 790 792 75 (set (reg:DI 0 ax [328])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:402 89 {*movdi_internal}
     (nil))
(insn 792 791 793 75 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) sim2fitman_read_procpar.cpp:402 90 {*movsi_internal}
     (nil))
(insn 793 792 794 75 (set (reg:DI 4 si)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:402 89 {*movdi_internal}
     (nil))
(insn 794 793 795 75 (set (reg:DI 5 di)
        (reg:DI 0 ax [328])) sim2fitman_read_procpar.cpp:402 89 {*movdi_internal}
     (nil))
(call_insn 795 794 796 75 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b695e972700 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:402 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 796 795 797 75 (set (reg/f:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:403 89 {*movdi_internal}
     (nil))
(insn 797 796 798 75 (set (reg:DI 0 ax [330])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [329])
                (const_int 24 [0x18])) [0 infile_struct_34(D)->hdr_offset+0 S8 A64])) sim2fitman_read_procpar.cpp:403 89 {*movdi_internal}
     (nil))
(insn 798 797 799 75 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [0 header_size+0 S8 A64])
        (reg:DI 0 ax [330])) sim2fitman_read_procpar.cpp:403 89 {*movdi_internal}
     (nil))
(insn 799 798 800 75 (set (reg:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -712 [0xfffffffffffffd38])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:404 89 {*movdi_internal}
     (nil))
(insn 800 799 801 75 (set (reg:DI 5 di)
        (reg:DI 0 ax [331])) sim2fitman_read_procpar.cpp:404 89 {*movdi_internal}
     (nil))
(call_insn 801 800 802 75 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ftell") [flags 0x41]  <function_decl 0x2b695e97a000 ftell>) [0 ftell S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:404 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 802 801 803 75 (set (reg:DI 0 ax [orig:175 D.5746 ] [175])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:404 89 {*movdi_internal}
     (nil))
(insn 803 802 804 75 (set (reg:SI 1 dx [orig:176 D.5744 ] [176])
        (reg:SI 0 ax [orig:175 D.5746 ] [175])) sim2fitman_read_procpar.cpp:404 90 {*movsi_internal}
     (nil))
(insn 804 803 805 75 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:404 89 {*movdi_internal}
     (nil))
(insn 805 804 806 75 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [332])
                (const_int 8 [0x8])) [0 infile_struct_34(D)->file_size+0 S4 A64])
        (reg:SI 1 dx [orig:176 D.5744 ] [176])) sim2fitman_read_procpar.cpp:404 90 {*movsi_internal}
     (nil))
(insn 806 805 807 75 (set (reg/f:DI 0 ax [333])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -736 [0xfffffffffffffd20])) [0 main_header+0 S8 A64])) sim2fitman_read_procpar.cpp:405 89 {*movdi_internal}
     (nil))
(insn 807 806 808 75 (set (reg:DI 1 dx [orig:177 D.5746 ] [177])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [333])
                (const_int 24 [0x18])) [0 main_header_38(D)->ebytes.number+0 S8 A64])) sim2fitman_read_procpar.cpp:405 89 {*movdi_internal}
     (nil))
(insn 808 807 809 75 (set (reg/f:DI 0 ax [334])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 procpar_info+0 S8 A64])) sim2fitman_read_procpar.cpp:405 89 {*movdi_internal}
     (nil))
(insn 809 808 810 75 (set (reg:SI 0 ax [orig:178 D.5744 ] [178])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [334])
                (const_int 328 [0x148])) [0 procpar_info_41(D)->num_points+0 S4 A64])) sim2fitman_read_procpar.cpp:405 90 {*movsi_internal}
     (nil))
(insn 810 809 811 75 (set (reg:DI 0 ax [orig:179 D.5746 ] [179])
        (sign_extend:DI (reg:SI 0 ax [orig:178 D.5744 ] [178]))) sim2fitman_read_procpar.cpp:405 142 {*extendsidi2_rex64}
     (nil))
(insn 811 810 812 75 (parallel [
            (set (reg:DI 1 dx [orig:180 D.5746 ] [180])
                (mult:DI (reg:DI 1 dx [orig:177 D.5746 ] [177])
                    (reg:DI 0 ax [orig:179 D.5746 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:405 307 {*muldi3_1}
     (nil))
(insn 812 811 813 75 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:406 89 {*movdi_internal}
     (nil))
(insn 813 812 814 75 (set (reg:SI 0 ax [orig:181 D.5744 ] [181])
        (mem/j:SI (reg/f:DI 0 ax [335]) [0 infile_struct_34(D)->num_datasets+0 S4 A64])) sim2fitman_read_procpar.cpp:406 90 {*movsi_internal}
     (nil))
(insn 814 813 815 75 (set (reg:DI 0 ax [orig:182 D.5746 ] [182])
        (sign_extend:DI (reg:SI 0 ax [orig:181 D.5744 ] [181]))) sim2fitman_read_procpar.cpp:406 142 {*extendsidi2_rex64}
     (nil))
(insn 815 814 819 75 (parallel [
            (set (reg:DI 1 dx [orig:183 D.5746 ] [183])
                (mult:DI (reg:DI 1 dx [orig:180 D.5746 ] [180])
                    (reg:DI 0 ax [orig:182 D.5746 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:406 307 {*muldi3_1}
     (nil))
(insn 819 815 820 75 (set (reg:DI 0 ax [339])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -608 [0xfffffffffffffda0])) [0 header_size+0 S8 A64])) sim2fitman_read_procpar.cpp:406 89 {*movdi_internal}
     (nil))
(insn 820 819 821 75 (parallel [
            (set (reg:DI 0 ax [338])
                (plus:DI (reg:DI 0 ax [339])
                    (reg:DI 1 dx [orig:183 D.5746 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_read_procpar.cpp:406 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg:DI 1 dx [orig:183 D.5746 ] [183])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -608 [0xfffffffffffffda0])) [0 header_size+0 S8 A64]))
        (nil)))
(insn 821 820 822 75 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -640 [0xfffffffffffffd80])) [0 calc_filesize+0 S8 A64])
        (reg:DI 0 ax [338])) sim2fitman_read_procpar.cpp:406 89 {*movdi_internal}
     (nil))
(insn 822 821 823 75 (set (reg/f:DI 0 ax [340])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -728 [0xfffffffffffffd28])) [0 infile_struct+0 S8 A64])) sim2fitman_read_procpar.cpp:407 89 {*movdi_internal}
     (nil))
(insn 823 822 824 75 (set (reg:SI 0 ax [orig:184 D.5744 ] [184])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [340])
                (const_int 8 [0x8])) [0 infile_struct_34(D)->file_size+0 S4 A64])) sim2fitman_read_procpar.cpp:407 90 {*movsi_internal}
     (nil))
(insn 824 823 825 75 (set (reg:DI 0 ax [orig:185 D.5746 ] [185])
        (sign_extend:DI (reg:SI 0 ax [orig:184 D.5744 ] [184]))) sim2fitman_read_procpar.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 825 824 826 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:185 D.5746 ] [185])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -640 [0xfffffffffffffd80])) [0 calc_filesize+0 S8 A64]))) sim2fitman_read_procpar.cpp:407 8 {*cmpdi_1}
     (nil))
(jump_insn 826 825 827 75 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 831)
            (pc))) sim2fitman_read_procpar.cpp:407 596 {*jcc_1}
     (nil)
 -> 831)
;;  succ:       76 (FALLTHRU)
;;              77
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 827 826 828 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 828 827 923 76 (set (reg:SI 0 ax [orig:83 D.5744 ] [83])
        (const_int -3 [0xfffffffffffffffd])) sim2fitman_read_procpar.cpp:408 90 {*movsi_internal}
     (nil))
(jump_insn 923 828 924 76 (set (pc)
        (label_ref 836)) sim2fitman_read_procpar.cpp:408 636 {jump}
     (nil)
 -> 836)
;;  succ:       78 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 924 923 831)
;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 831 924 832 77 47 "" [1 uses])
(note 832 831 833 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 833 832 836 77 (set (reg:SI 0 ax [orig:83 D.5744 ] [83])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:413 90 {*movsi_internal}
     (nil))
;;  succ:       78 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       77 (FALLTHRU)
;;              44 [100.0%] 
;;              3 [100.0%] 
;;              76 [100.0%] 
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 17 [flags] 186
(code_label 836 833 837 78 48 "" [3 uses])
(note 837 836 838 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 838 837 842 78 (set (reg:SI 0 ax [orig:186 <retval> ] [186])
        (reg:SI 0 ax [orig:83 D.5744 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 842 838 843 78 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:186 <retval> ] [186])) sim2fitman_read_procpar.cpp:415 90 {*movsi_internal}
     (nil))
(insn 843 842 844 78 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.5756+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [343]))
        ]) sim2fitman_read_procpar.cpp:415 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 844 843 851 78 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 847)
            (pc))) sim2fitman_read_procpar.cpp:415 596 {*jcc_1}
     (nil)
 -> 847)
;;  succ:       80
;;              79 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 851 844 845 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(call_insn 845 851 846 79 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b695eaf4a00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:415 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 846 845 847)
;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 847 846 852 80 49 "" [1 uses])
(note 852 847 848 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 848 852 925 80 (use (reg/i:SI 0 ax)) sim2fitman_read_procpar.cpp:415 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 925 848 0 NOTE_INSN_DELETED)

;; Function int read_field(FILE*, char*, int, long int, int, bool) (_Z10read_fieldP8_IO_FILEPcilib, funcdef_no=3, decl_uid=5315, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 8:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 24:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 50
changing reg in insn 35
changing reg in insn 53
changing reg in insn 19
changing reg in insn 23
changing reg in insn 27
changing reg in insn 30
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 53
changing reg in insn 57
changing reg in insn 7
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 43
changing reg in insn 45
changing reg in insn 44
changing reg in insn 46
deleting insn with uid = 22.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns


int read_field(FILE*, char*, int, long int, int, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={16d,13u} r1={8d,5u} r2={6d,3u} r4={7d,4u} r5={7d,4u} r6={1d,22u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d,3u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d,1u} r38={4d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} 
;;    total ref usage 316{249d,67u,0e} in 40{37 regular + 3 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85 86 87 89 90 91 92 93 94 95
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 in_file+0 S8 A64])
        (reg:DI 5 di [ in_file ])) sim2fitman_read_procpar.cpp:420 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 var_pointer+0 S8 A64])
        (reg:DI 4 si [ var_pointer ])) sim2fitman_read_procpar.cpp:420 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 var_size+0 S4 A32])
        (reg:SI 1 dx [ var_size ])) sim2fitman_read_procpar.cpp:420 90 {*movsi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 hdr_field_offset+0 S8 A64])
        (reg:DI 2 cx [ hdr_field_offset ])) sim2fitman_read_procpar.cpp:420 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 hdr_field_size+0 S4 A32])
        (reg:SI 37 r8 [ hdr_field_size ])) sim2fitman_read_procpar.cpp:420 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 ax [89])
        (reg:SI 38 r9 [ swap_bytes ])) sim2fitman_read_procpar.cpp:420 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 swap_bytes+0 S1 A32])
        (reg:QI 0 ax [89])) sim2fitman_read_procpar.cpp:420 93 {*movqi_internal}
     (nil))
(note 9 8 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg:DI 2 cx [90])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 hdr_field_offset+0 S8 A64])) sim2fitman_read_procpar.cpp:422 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:422 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:422 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 2 cx [90])) sim2fitman_read_procpar.cpp:422 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) sim2fitman_read_procpar.cpp:422 89 {*movdi_internal}
     (nil))
(call_insn 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x2b695e972700 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:422 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 18 17 19 2 (set (reg:SI 0 ax [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 hdr_field_size+0 S4 A32])) sim2fitman_read_procpar.cpp:423 90 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 1 dx [orig:84 D.5787 ] [84])
        (sign_extend:DI (reg:SI 0 ax [92]))) sim2fitman_read_procpar.cpp:423 142 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 2 (set (reg:DI 2 cx [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 in_file+0 S8 A64])) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(insn 21 20 24 2 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 var_pointer+0 S8 A64])) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(insn 24 21 25 2 (set (reg:DI 4 si)
        (const_int 1 [0x1])) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x2b695e972900 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:423 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 27 26 28 2 (set (reg:DI 1 dx [orig:85 D.5787 ] [85])
        (reg:DI 0 ax)) sim2fitman_read_procpar.cpp:423 89 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 hdr_field_size+0 S4 A32])) sim2fitman_read_procpar.cpp:423 90 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DI 0 ax [orig:86 D.5787 ] [86])
        (sign_extend:DI (reg:SI 0 ax [95]))) sim2fitman_read_procpar.cpp:423 142 {*extendsidi2_rex64}
     (nil))
(insn 30 29 31 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 1 dx [orig:85 D.5787 ] [85])
            (reg:DI 0 ax [orig:86 D.5787 ] [86]))) sim2fitman_read_procpar.cpp:423 8 {*cmpdi_1}
     (nil))
(insn 31 30 32 2 (set (reg:QI 0 ax [orig:87 D.5788 ] [87])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:423 592 {*setcc_qi}
     (nil))
(insn 32 31 33 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:87 D.5788 ] [87])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:423 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 33 32 34 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) sim2fitman_read_procpar.cpp:423 596 {*jcc_1}
     (nil)
 -> 38)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 34 33 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 60 3 (set (reg:SI 0 ax [orig:83 D.5786 ] [83])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_read_procpar.cpp:424 90 {*movsi_internal}
     (nil))
(jump_insn 60 35 61 3 (set (pc)
        (label_ref 51)) sim2fitman_read_procpar.cpp:424 636 {jump}
     (nil)
 -> 51)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 61 60 38)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 38 61 39 4 51 "" [1 uses])
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 swap_bytes+0 S1 A32])
            (const_int 0 [0]))) sim2fitman_read_procpar.cpp:430 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 41 40 42 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) sim2fitman_read_procpar.cpp:430 596 {*jcc_1}
     (nil)
 -> 48)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 96 97
(note 42 41 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 5 (set (reg:SI 1 dx [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 var_size+0 S4 A32])) sim2fitman_read_procpar.cpp:431 90 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 var_pointer+0 S8 A64])) sim2fitman_read_procpar.cpp:431 89 {*movdi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:SI 4 si)
        (reg:SI 1 dx [96])) sim2fitman_read_procpar.cpp:431 90 {*movsi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) sim2fitman_read_procpar.cpp:431 89 {*movdi_internal}
     (nil))
(call_insn 47 46 48 5 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x2b695eaa8400 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:431 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 48 47 49 6 53 "" [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:SI 0 ax [orig:83 D.5786 ] [83])
        (const_int 0 [0])) sim2fitman_read_procpar.cpp:438 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 88
(code_label 51 50 52 7 52 "" [1 uses])
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 57 7 (set (reg:SI 0 ax [orig:88 <retval> ] [88])
        (reg:SI 0 ax [orig:83 D.5786 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 57 53 58 7 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:88 <retval> ] [88])) sim2fitman_read_procpar.cpp:440 90 {*movsi_internal}
     (nil))
(insn 58 57 62 7 (use (reg/i:SI 0 ax)) sim2fitman_read_procpar.cpp:440 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 62 58 0 NOTE_INSN_DELETED)
