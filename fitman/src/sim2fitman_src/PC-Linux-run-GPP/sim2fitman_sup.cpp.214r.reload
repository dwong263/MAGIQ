
;; Function void endianCheck_system(Endian_Check*, bool) (_Z18endianCheck_systemP12Endian_Checkb, funcdef_no=2, decl_uid=5386, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 3
changing reg in insn 15
changing reg in insn 16
changing reg in insn 26
changing reg in insn 27
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


void endianCheck_system(Endian_Check*, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={8d,5u} r1={4d} r2={4d} r4={4d,1u} r5={6d,3u} r6={1d,13u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={7d,4u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} 
;;    total ref usage 269{232d,37u,0e} in 21{18 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])
        (reg:DI 5 di [ endian_check ])) sim2fitman_sup.cpp:21 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:SI 0 ax [85])
        (reg:SI 4 si [ verbose ])) sim2fitman_sup.cpp:21 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
        (reg:QI 0 ax [85])) sim2fitman_sup.cpp:21 93 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 8 5 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11isBigEndianv") [flags 0x3]  <function_decl 0x2adf295f5100 isBigEndian>) [0 isBigEndian S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:24 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 10 8 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 D.6379 ] [83])
            (const_int 0 [0]))) sim2fitman_sup.cpp:24 3 {*cmpsi_ccno_1}
     (nil))
(insn 11 10 12 2 (set (reg:QI 0 ax [orig:84 D.6380 ] [84])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_sup.cpp:24 592 {*setcc_qi}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.6380 ] [84])
            (const_int 0 [0]))) sim2fitman_sup.cpp:24 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) sim2fitman_sup.cpp:24 596 {*jcc_1}
     (nil)
 -> 24)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:DI 0 ax [86])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])) sim2fitman_sup.cpp:25 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (mem/j:SI (reg/f:DI 0 ax [86]) [0 endian_check_3(D)->systemStruct+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_sup.cpp:25 90 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:26 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) sim2fitman_sup.cpp:26 596 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2adf297b9558 *.LC0>)) sim2fitman_sup.cpp:27 89 {*movdi_internal}
     (nil))
(call_insn 21 20 37 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:27 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 37 21 38 4 (set (pc)
        (label_ref 35)) 636 {jump}
     (nil)
 -> 35)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 38 37 24)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87
(code_label 24 38 25 5 2 "" [1 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg/f:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])) sim2fitman_sup.cpp:31 89 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (set (mem/j:SI (reg/f:DI 0 ax [87]) [0 endian_check_3(D)->systemStruct+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:31 90 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:32 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 29 28 30 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) sim2fitman_sup.cpp:32 596 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2adf297b95f0 *.LC1>)) sim2fitman_sup.cpp:33 89 {*movdi_internal}
     (nil))
(call_insn 32 31 35 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:33 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              3
;;              5
;;              4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 35 32 36 7 1 "" [3 uses])
(note 36 35 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 39 36 0 NOTE_INSN_DELETED)

;; Function int endianCheck_file(FILE*, Endian_Check*, bool*, char*, bool) (_Z16endianCheck_fileP8_IO_FILEP12Endian_CheckPbPcb, funcdef_no=3, decl_uid=5392, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 38:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 51:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 26
changing reg in insn 27
changing reg in insn 54
changing reg in insn 57
changing reg in insn 57
changing reg in insn 61
changing reg in insn 6
changing reg in insn 14
changing reg in insn 15
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 37
changing reg in insn 38
changing reg in insn 50
changing reg in insn 51
starting the processing of deferred insns
ending the processing of deferred insns


int endianCheck_file(FILE*, Endian_Check*, bool*, char*, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={16d,12u} r1={5d,1u} r2={5d,1u} r4={6d,2u} r5={9d,5u} r6={1d,24u} r7={1d,15u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={8d,4u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d,1u} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} 
;;    total ref usage 376{310d,66u,0e} in 38{34 regular + 4 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 17 [flags] 86
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 in_file+0 S8 A64])
        (reg:DI 5 di [ in_file ])) sim2fitman_sup.cpp:44 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 endian_check+0 S8 A64])
        (reg:DI 4 si [ endian_check ])) sim2fitman_sup.cpp:44 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 swap_bytes+0 S8 A64])
        (reg:DI 1 dx [ swap_bytes ])) sim2fitman_sup.cpp:44 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 filename+0 S8 A64])
        (reg:DI 2 cx [ filename ])) sim2fitman_sup.cpp:44 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [86])
        (reg:SI 37 r8 [ verbose ])) sim2fitman_sup.cpp:44 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 verbose+0 S1 A32])
        (reg:QI 0 ax [86])) sim2fitman_sup.cpp:44 93 {*movqi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:53 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) sim2fitman_sup.cpp:53 596 {*jcc_1}
     (nil)
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:DI 0 ax [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 filename+0 S8 A64])) sim2fitman_sup.cpp:54 89 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 4 si)
        (reg:DI 0 ax [87])) sim2fitman_sup.cpp:54 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2adf297b9d10 *.LC2>)) sim2fitman_sup.cpp:54 89 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:54 93 {*movqi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:54 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2adf297b9da8 *.LC3>)) sim2fitman_sup.cpp:55 89 {*movdi_internal}
     (nil))
(call_insn 20 19 21 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:55 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 88 89
(code_label 21 20 22 4 5 "" [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:DI 0 ax [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 endian_check+0 S8 A64])) sim2fitman_sup.cpp:57 89 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [88])
                (const_int 4 [0x4])) [0 endian_check_3(D)->fileStruct+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:57 90 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 endian_check+0 S8 A64])) sim2fitman_sup.cpp:59 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 0 ax [orig:83 D.6383 ] [83])
        (mem/j:SI (reg/f:DI 0 ax [89]) [0 endian_check_3(D)->systemStruct+0 S4 A32])) sim2fitman_sup.cpp:59 90 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 D.6383 ] [83])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:59 7 {*cmpsi_1}
     (nil))
(jump_insn 28 27 29 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) sim2fitman_sup.cpp:59 596 {*jcc_1}
     (nil)
 -> 41)
;;  succ:       5 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:61 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 31 30 32 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) sim2fitman_sup.cpp:61 596 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2adf297b9e40 *.LC4>)) sim2fitman_sup.cpp:62 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:62 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90
(code_label 35 34 36 7 7 "" [1 uses])
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 swap_bytes+0 S8 A64])) sim2fitman_sup.cpp:64 89 {*movdi_internal}
     (nil))
(insn 38 37 64 7 (set (mem:QI (reg/f:DI 0 ax [90]) [0 *swap_bytes_5(D)+0 S1 A8])
        (const_int 1 [0x1])) sim2fitman_sup.cpp:64 93 {*movqi_internal}
     (nil))
(jump_insn 64 38 65 7 (set (pc)
        (label_ref 52)) 636 {jump}
     (nil)
 -> 52)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 65 64 41)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 41 65 42 8 6 "" [1 uses])
(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:67 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 44 43 45 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) sim2fitman_sup.cpp:67 596 {*jcc_1}
     (nil)
 -> 48)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 45 44 46 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2adf297b9ed8 *.LC5>)) sim2fitman_sup.cpp:68 89 {*movdi_internal}
     (nil))
(call_insn 47 46 48 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:68 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 91
(code_label 48 47 49 10 9 "" [1 uses])
(note 49 48 50 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 10 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 swap_bytes+0 S8 A64])) sim2fitman_sup.cpp:70 89 {*movdi_internal}
     (nil))
(insn 51 50 52 10 (set (mem:QI (reg/f:DI 0 ax [91]) [0 *swap_bytes_5(D)+0 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:70 93 {*movqi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              7 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 84 85
(code_label 52 51 53 11 8 "" [1 uses])
(note 53 52 54 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 57 11 (set (reg:SI 0 ax [orig:84 D.6383 ] [84])
        (const_int 0 [0])) sim2fitman_sup.cpp:74 90 {*movsi_internal}
     (nil))
(insn 57 54 61 11 (set (reg:SI 0 ax [orig:85 <retval> ] [85])
        (reg:SI 0 ax [orig:84 D.6383 ] [84])) sim2fitman_sup.cpp:74 90 {*movsi_internal}
     (nil))
(insn 61 57 62 11 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:85 <retval> ] [85])) sim2fitman_sup.cpp:75 90 {*movsi_internal}
     (nil))
(insn 62 61 66 11 (use (reg/i:SI 0 ax)) sim2fitman_sup.cpp:75 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 66 62 0 NOTE_INSN_DELETED)

;; Function int isBigEndian() (_Z11isBigEndianv, funcdef_no=4, decl_uid=5383, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 11
changing reg in insn 21
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 21
changing reg in insn 25
starting the processing of deferred insns
ending the processing of deferred insns


int isBigEndian()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 17[flags]
;;  ref usage 	r0={7d,6u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,7u} r7={1d,5u} r17={2d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 46{26d,20u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 word+0 S2 A16])
        (const_int 17185 [0x4321])) sim2fitman_sup.cpp:83 92 {*movhi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg/f:DI 0 ax [orig:84 D.6389 ] [84])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:84 221 {*adddi_1}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax [orig:85 D.6390 ] [85])
        (mem:QI (reg/f:DI 0 ax [orig:84 D.6389 ] [84]) [0 MEM[(char *)_2]+0 S1 A8])) sim2fitman_sup.cpp:84 93 {*movqi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:85 D.6390 ] [85])
            (const_int 33 [0x21]))) sim2fitman_sup.cpp:84 5 {*cmpqi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) sim2fitman_sup.cpp:84 596 {*jcc_1}
     (nil)
 -> 14)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 28 3 (set (reg:SI 0 ax [orig:83 D.6388 ] [83])
        (const_int 1 [0x1])) sim2fitman_sup.cpp:85 90 {*movsi_internal}
     (nil))
(jump_insn 28 11 29 3 (set (pc)
        (label_ref 19)) sim2fitman_sup.cpp:85 636 {jump}
     (nil)
 -> 19)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 29 28 14)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 14 29 15 4 12 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 19 4 (set (reg:SI 0 ax [orig:83 D.6388 ] [83])
        (const_int 0 [0])) sim2fitman_sup.cpp:87 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 86
(code_label 19 16 20 5 14 "" [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 25 5 (set (reg:SI 0 ax [orig:86 <retval> ] [86])
        (reg:SI 0 ax [orig:83 D.6388 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 25 21 26 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:86 <retval> ] [86])) sim2fitman_sup.cpp:89 90 {*movsi_internal}
     (nil))
(insn 26 25 30 5 (use (reg/i:SI 0 ax)) sim2fitman_sup.cpp:89 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 30 26 0 NOTE_INSN_DELETED)

;; Function bool isNumber(char*) (_Z8isNumberPc, funcdef_no=5, decl_uid=5382, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 16
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) ?mr {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 52:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) q  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20

********** Pseudo live ranges #1: **********

  BB 20
   Insn 103: point = 0
   Insn 102: point = 0
   Insn 98: point = 1
  BB 18
   Insn 115: point = 4
   Insn 90: point = 4
  BB 17
   Insn 113: point = 5
   Insn 85: point = 5
  BB 16
   Insn 83: point = 6
   Insn 82: point = 6
   Insn 81: point = 7
   Insn 80: point = 9
  BB 15
   Insn 78: point = 10
   Insn 77: point = 10
  BB 14
   Insn 111: point = 10
   Insn 72: point = 10
  BB 13
   Insn 70: point = 11
   Insn 69: point = 11
   Insn 68: point = 12
   Insn 67: point = 14
  BB 12
   Insn 65: point = 15
   Insn 64: point = 15
  BB 9
   Insn 109: point = 15
   Insn 47: point = 15
  BB 7
   Insn 107: point = 16
   Insn 32: point = 16
  BB 6
   Insn 30: point = 17
   Insn 29: point = 17
  BB 5
   Insn 27: point = 17
   Insn 26: point = 17
   Insn 25: point = 18
   Insn 24: point = 20
   Insn 23: point = 22
   Insn 22: point = 23
   Insn 21: point = 25
  BB 4
   Insn 19: point = 26
   Insn 18: point = 26
   Insn 17: point = 27
   Insn 16: point = 29
   Insn 15: point = 31
   Insn 14: point = 32
   Insn 13: point = 34
  BB 11
   Insn 62: point = 35
   Insn 61: point = 35
   Insn 59: point = 36
   Insn 58: point = 38
   Insn 57: point = 40
   Insn 56: point = 41
   Insn 55: point = 43
  BB 3
   Insn 105: point = 44
  BB 10
   Insn 52: point = 44
  BB 8
   Insn 45: point = 44
   Insn 44: point = 44
   Insn 43: point = 45
   Insn 42: point = 47
   Insn 41: point = 49
   Insn 40: point = 51
   Insn 39: point = 53
   Insn 38: point = 54
   Insn 37: point = 56
  BB 19
   Insn 95: point = 57
  BB 2
   Insn 8: point = 58
   Insn 7: point = 58
   Insn 6: point = 58
   Insn 2: point = 58
 r83: [57..57] [15..16] [10..10] [2..5]
 r84: [39..41]
 r85: [37..38]
 r86: [35..36]
 r87: [30..32]
 r88: [28..29]
 r89: [26..27]
 r90: [21..23]
 r91: [19..20]
 r92: [17..18]
 r93: [52..54]
 r94: [50..51]
 r95: [48..49]
 r96: [46..47]
 r97: [44..45]
 r98: [11..12]
 r99: [6..7]
 r100: [0..1]
 r101: [33..34]
 r102: [30..31]
 r103: [24..25]
 r104: [21..22]
 r105: [55..56]
 r106: [52..53]
 r107: [42..43]
 r108: [39..40]
 r109: [13..14]
 r110: [8..9]
Compressing live ranges: from 58 to 52 - 89%
Ranges after the compression:
 r83: [51..51] [13..14] [8..8] [2..3]
 r84: [35..36]
 r85: [33..34]
 r86: [31..32]
 r87: [27..28]
 r88: [25..26]
 r89: [23..24]
 r90: [19..20]
 r91: [17..18]
 r92: [15..16]
 r93: [47..48]
 r94: [45..46]
 r95: [43..44]
 r96: [41..42]
 r97: [39..40]
 r98: [9..10]
 r99: [4..5]
 r100: [0..1]
 r101: [29..30]
 r102: [27..28]
 r103: [21..22]
 r104: [19..20]
 r105: [49..50]
 r106: [47..48]
 r107: [37..38]
 r108: [35..36]
 r109: [11..12]
 r110: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 95
changing reg in insn 90
changing reg in insn 85
changing reg in insn 72
changing reg in insn 47
changing reg in insn 32
changing reg in insn 98
changing reg in insn 56
changing reg in insn 58
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 14
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 68
changing reg in insn 69
changing reg in insn 81
changing reg in insn 82
changing reg in insn 98
changing reg in insn 102
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 67
changing reg in insn 68
changing reg in insn 80
changing reg in insn 81
starting the processing of deferred insns
ending the processing of deferred insns


bool isNumber(char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={31d,26u} r1={5d,4u,4e} r2={1d} r4={1d} r5={1d,1u} r6={1d,38u} r7={1d,20u} r17={16d,10u} r20={1d,1u,4e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 176{68d,100u,8e} in 64{64 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
        (reg:DI 5 di [ string ])) sim2fitman_sup.cpp:94 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:95 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_sup.cpp:97 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 93)
            (pc))) sim2fitman_sup.cpp:97 596 {*jcc_1}
     (nil)
 -> 93)
;;  succ:       3 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 9 8 105 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 105 9 106 3 (set (pc)
        (label_ref 53)) sim2fitman_sup.cpp:98 636 {jump}
     (nil)
 -> 53)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 60)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 101 102
(code_label 60 106 12 4 21 "" [1 uses])
(note 12 60 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:99 90 {*movsi_internal}
     (nil))
(insn 14 13 15 4 (set (reg:DI 1 dx [orig:87 D.6392 ] [87])
        (sign_extend:DI (reg:SI 0 ax [101]))) sim2fitman_sup.cpp:99 142 {*extendsidi2_rex64}
     (nil))
(insn 15 14 16 4 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) sim2fitman_sup.cpp:99 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.6393 ] [88])
                (plus:DI (reg/f:DI 0 ax [102])
                    (reg:DI 1 dx [orig:87 D.6392 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:99 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:87 D.6392 ] [87]))
        (nil)))
(insn 17 16 18 4 (set (reg:QI 0 ax [orig:89 D.6394 ] [89])
        (mem:QI (reg/f:DI 0 ax [orig:88 D.6393 ] [88]) [0 *_9+0 S1 A8])) sim2fitman_sup.cpp:99 93 {*movqi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.6394 ] [89])
            (const_int 46 [0x2e]))) sim2fitman_sup.cpp:99 5 {*cmpqi_1}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) sim2fitman_sup.cpp:99 596 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       10
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 103 104
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (set (reg:SI 0 ax [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:101 90 {*movsi_internal}
     (nil))
(insn 22 21 23 5 (set (reg:DI 1 dx [orig:90 D.6392 ] [90])
        (sign_extend:DI (reg:SI 0 ax [103]))) sim2fitman_sup.cpp:101 142 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 5 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) sim2fitman_sup.cpp:101 89 {*movdi_internal}
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6393 ] [91])
                (plus:DI (reg/f:DI 0 ax [104])
                    (reg:DI 1 dx [orig:90 D.6392 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:101 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6392 ] [90]))
        (nil)))
(insn 25 24 26 5 (set (reg:QI 0 ax [orig:92 D.6394 ] [92])
        (mem:QI (reg/f:DI 0 ax [orig:91 D.6393 ] [91]) [0 *_13+0 S1 A8])) sim2fitman_sup.cpp:101 93 {*movqi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:92 D.6394 ] [92])
            (const_int 45 [0x2d]))) sim2fitman_sup.cpp:101 5 {*cmpqi_1}
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) sim2fitman_sup.cpp:101 596 {*jcc_1}
     (nil)
 -> 35)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:102 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 30 29 31 6 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) sim2fitman_sup.cpp:102 596 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 107 7 (set (reg:QI 0 ax [orig:83 D.6391 ] [83])
        (const_int 0 [0])) sim2fitman_sup.cpp:103 93 {*movqi_internal}
     (nil))
(jump_insn 107 32 108 7 (set (pc)
        (label_ref 96)) sim2fitman_sup.cpp:103 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 108 107 35)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 105 106
(code_label 35 108 36 8 19 "" [1 uses])
(note 36 35 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 8 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:105 90 {*movsi_internal}
     (nil))
(insn 38 37 39 8 (set (reg:DI 1 dx [orig:93 D.6392 ] [93])
        (sign_extend:DI (reg:SI 0 ax [105]))) sim2fitman_sup.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 8 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) sim2fitman_sup.cpp:105 89 {*movdi_internal}
     (nil))
(insn 40 39 41 8 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.6393 ] [94])
                (plus:DI (reg/f:DI 0 ax [106])
                    (reg:DI 1 dx [orig:93 D.6392 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:105 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.6392 ] [93]))
        (nil)))
(insn 41 40 42 8 (set (reg:QI 0 ax [orig:95 D.6394 ] [95])
        (mem:QI (reg/f:DI 0 ax [orig:94 D.6393 ] [94]) [0 *_16+0 S1 A8])) sim2fitman_sup.cpp:105 93 {*movqi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:SI 0 ax [orig:96 D.6395 ] [96])
        (sign_extend:SI (reg:QI 0 ax [orig:95 D.6394 ] [95]))) sim2fitman_sup.cpp:105 148 {extendqisi2}
     (nil))
(insn 43 42 44 8 (parallel [
            (set (reg:SI 0 ax [orig:97 D.6395 ] [97])
                (plus:SI (reg:SI 0 ax [orig:96 D.6395 ] [96])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:105 220 {*addsi_1}
     (nil))
(insn 44 43 45 8 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:97 D.6395 ] [97])
            (const_int 9 [0x9]))) sim2fitman_sup.cpp:105 7 {*cmpsi_1}
     (nil))
(jump_insn 45 44 46 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) sim2fitman_sup.cpp:105 596 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 46 45 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 109 9 (set (reg:QI 0 ax [orig:83 D.6391 ] [83])
        (const_int 0 [0])) sim2fitman_sup.cpp:106 93 {*movqi_internal}
     (nil))
(jump_insn 109 47 110 9 (set (pc)
        (label_ref 96)) sim2fitman_sup.cpp:106 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 110 109 50)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              6
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 50 110 51 10 18 "" [3 uses])
(note 51 50 52 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:108 220 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 107 108
(code_label 53 52 54 11 17 "" [1 uses])
(note 54 53 55 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 11 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:98 90 {*movsi_internal}
     (nil))
(insn 56 55 57 11 (set (reg:DI 1 dx [orig:84 D.6392 ] [84])
        (sign_extend:DI (reg:SI 0 ax [107]))) sim2fitman_sup.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 57 56 58 11 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) sim2fitman_sup.cpp:98 89 {*movdi_internal}
     (nil))
(insn 58 57 59 11 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.6393 ] [85])
                (plus:DI (reg/f:DI 0 ax [108])
                    (reg:DI 1 dx [orig:84 D.6392 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.6392 ] [84]))
        (nil)))
(insn 59 58 61 11 (set (reg:QI 0 ax [orig:86 D.6394 ] [86])
        (mem:QI (reg/f:DI 0 ax [orig:85 D.6393 ] [85]) [0 *_6+0 S1 A8])) sim2fitman_sup.cpp:98 93 {*movqi_internal}
     (nil))
(insn 61 59 62 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:86 D.6394 ] [86])
            (const_int 0 [0]))) sim2fitman_sup.cpp:98 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 62 61 63 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) sim2fitman_sup.cpp:98 596 {*jcc_1}
     (nil)
 -> 60)
;;  succ:       4
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 63 62 64 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:110 7 {*cmpsi_1}
     (nil))
(jump_insn 65 64 66 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) sim2fitman_sup.cpp:110 596 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 109
(note 66 65 67 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 13 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) sim2fitman_sup.cpp:110 89 {*movdi_internal}
     (nil))
(insn 68 67 69 13 (set (reg:QI 0 ax [orig:98 D.6394 ] [98])
        (mem:QI (reg/f:DI 0 ax [109]) [0 *string_4(D)+0 S1 A8])) sim2fitman_sup.cpp:110 93 {*movqi_internal}
     (nil))
(insn 69 68 70 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:98 D.6394 ] [98])
            (const_int 45 [0x2d]))) sim2fitman_sup.cpp:110 5 {*cmpqi_1}
     (nil))
(jump_insn 70 69 71 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) sim2fitman_sup.cpp:110 596 {*jcc_1}
     (nil)
 -> 75)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 71 70 72 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 111 14 (set (reg:QI 0 ax [orig:83 D.6391 ] [83])
        (const_int 0 [0])) sim2fitman_sup.cpp:111 93 {*movqi_internal}
     (nil))
(jump_insn 111 72 112 14 (set (pc)
        (label_ref 96)) sim2fitman_sup.cpp:111 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 112 111 75)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 75 112 76 15 22 "" [2 uses])
(note 76 75 77 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:112 7 {*cmpsi_1}
     (nil))
(jump_insn 78 77 79 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) sim2fitman_sup.cpp:112 596 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 110
(note 79 78 80 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 16 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) sim2fitman_sup.cpp:112 89 {*movdi_internal}
     (nil))
(insn 81 80 82 16 (set (reg:QI 0 ax [orig:99 D.6394 ] [99])
        (mem:QI (reg/f:DI 0 ax [110]) [0 *string_4(D)+0 S1 A8])) sim2fitman_sup.cpp:112 93 {*movqi_internal}
     (nil))
(insn 82 81 83 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 D.6394 ] [99])
            (const_int 46 [0x2e]))) sim2fitman_sup.cpp:112 5 {*cmpqi_1}
     (nil))
(jump_insn 83 82 84 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) sim2fitman_sup.cpp:112 596 {*jcc_1}
     (nil)
 -> 88)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 84 83 85 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 113 17 (set (reg:QI 0 ax [orig:83 D.6391 ] [83])
        (const_int 0 [0])) sim2fitman_sup.cpp:113 93 {*movqi_internal}
     (nil))
(jump_insn 113 85 114 17 (set (pc)
        (label_ref 96)) sim2fitman_sup.cpp:113 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 114 113 88)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;;              16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 88 114 89 18 23 "" [2 uses])
(note 89 88 90 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 115 18 (set (reg:QI 0 ax [orig:83 D.6391 ] [83])
        (const_int 1 [0x1])) sim2fitman_sup.cpp:115 93 {*movqi_internal}
     (nil))
(jump_insn 115 90 116 18 (set (pc)
        (label_ref 96)) sim2fitman_sup.cpp:115 636 {jump}
     (nil)
 -> 96)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 116 115 93)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 93 116 94 19 16 "" [1 uses])
(note 94 93 95 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 19 (set (reg:QI 0 ax [orig:83 D.6391 ] [83])
        (const_int 0 [0])) sim2fitman_sup.cpp:118 93 {*movqi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              7 [100.0%] 
;;              9 [100.0%] 
;;              14 [100.0%] 
;;              17 [100.0%] 
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 100
(code_label 96 95 97 20 20 "" [5 uses])
(note 97 96 98 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 102 20 (set (reg:QI 0 ax [orig:100 <retval> ] [100])
        (reg:QI 0 ax [orig:83 D.6391 ] [83])) 93 {*movqi_internal}
     (nil))
(insn 102 98 103 20 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:100 <retval> ] [100])) sim2fitman_sup.cpp:121 93 {*movqi_internal}
     (nil))
(insn 103 102 117 20 (use (reg/i:QI 0 ax)) sim2fitman_sup.cpp:121 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 117 103 0 NOTE_INSN_DELETED)

;; Function int isNAN(float) (_Z5isNANf, funcdef_no=6, decl_uid=5399, symbol_order=6)

      Creating newreg=96
Removing SCRATCH in insn #4 (nop 2)
rescanning insn with uid = 4.
      Creating newreg=97
Removing SCRATCH in insn #62 (nop 3)
rescanning insn with uid = 62.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1225,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=615,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=3,overall=1223,losers=2 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=4,overall=614,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=20,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 2:  (0) m  (1) v {*movsf_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r96
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =x  (1) xm {*extendsfdf2_sse}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 8:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 14:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 38:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r97
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 9
   Insn 64: point = 0
  BB 10
   Insn 67: point = 0
  BB 8
   Insn 63: point = 0
   Insn 62: point = 0
   Insn 61: point = 1
   Insn 57: point = 2
  BB 6
   Insn 71: point = 5
   Insn 47: point = 5
  BB 7
   Insn 52: point = 6
  BB 5
   Insn 44: point = 7
   Insn 43: point = 7
   Insn 42: point = 8
   Insn 41: point = 9
   Insn 40: point = 9
   Insn 39: point = 10
   Insn 38: point = 10
  BB 4
   Insn 36: point = 11
   Insn 35: point = 11
   Insn 34: point = 12
   Insn 33: point = 13
   Insn 32: point = 13
   Insn 31: point = 14
   Insn 30: point = 14
  BB 3
   Insn 28: point = 15
   Insn 27: point = 15
   Insn 26: point = 16
   Insn 25: point = 17
   Insn 24: point = 17
   Insn 23: point = 18
   Insn 22: point = 18
  BB 2
   Insn 20: point = 19
   Insn 19: point = 19
   Insn 18: point = 20
   Insn 17: point = 21
   Insn 16: point = 21
   Insn 15: point = 22
   Insn 14: point = 22
   Insn 13: point = 23
   Insn 12: point = 23
   Insn 11: point = 23
   Insn 10: point = 24
   Insn 9: point = 24
   Insn 8: point = 25
   Insn 7: point = 26
   Insn 4: point = 27
   Insn 2: point = 29
 r83: [3..6]
 r84: [24..26]
 r85: [19..20]
 r86: [15..16]
 r87: [11..12]
 r88: [7..8]
 r89: [1..2]
 r90: [23..25]
 r91: [21..22]
 r92: [17..18]
 r93: [13..14]
 r94: [9..10]
 r96: [27..28]
 r97: [0..0]
Compressing live ranges: from 29 to 25 - 86%
Ranges after the compression:
 r83: [3..4]
 r84: [21..22]
 r85: [17..18]
 r86: [13..14]
 r87: [9..10]
 r88: [5..6]
 r89: [1..2]
 r90: [21..22]
 r91: [19..20]
 r92: [15..16]
 r93: [11..12]
 r94: [7..8]
 r96: [23..24]
 r97: [0..0]

********** Assignment #1: **********

	 Assigning to 96 (cl=INDEX_REGS, orig=96, freq=1, tfirst=96, tfreq=1)...
	   Assign 0 to reload r96 (freq=1)
	 Assigning to 97 (cl=INDEX_REGS, orig=97, freq=1, tfirst=97, tfreq=1)...
	   Assign 1 to reload r97 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 52
changing reg in insn 47
changing reg in insn 57
changing reg in insn 7
changing reg in insn 9
changing reg in insn 18
changing reg in insn 19
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 42
changing reg in insn 43
changing reg in insn 57
changing reg in insn 61
changing reg in insn 8
changing reg in insn 11
changing reg in insn 14
changing reg in insn 16
changing reg in insn 22
changing reg in insn 24
changing reg in insn 30
changing reg in insn 32
changing reg in insn 38
changing reg in insn 40
changing reg in insn 4
changing reg in insn 62
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 64.


int isNAN(float)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0]
;;  ref usage 	r0={22d,18u} r1={8d} r2={7d} r4={12d,5u} r5={12d,5u} r6={1d,19u} r7={1d,16u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={17d,5u} r18={6d} r19={6d} r20={1d,1u} r21={8d,2u} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} 
;;    total ref usage 535{464d,71u,0e} in 45{39 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85 90 91
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 float_value+0 S4 A32])
        (reg:SF 21 xmm0 [ float_value ])) sim2fitman_sup.cpp:128 129 {*movsf_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6398+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [96])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:128 964 {stack_tls_protect_set_di}
     (nil))
(insn 7 4 8 2 (set (reg:DF 21 xmm0 [orig:84 D.6397 ] [84])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 float_value+0 S4 A32]))) sim2fitman_sup.cpp:142 152 {*extendsfdf2_sse}
     (nil))
(insn 8 7 10 2 (parallel [
            (set (reg:DI 0 ax [90])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:142 221 {*adddi_1}
     (nil))
(insn 10 8 11 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2adf297e1428 *.LC6>)) sim2fitman_sup.cpp:142 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) sim2fitman_sup.cpp:142 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) sim2fitman_sup.cpp:142 93 {*movqi_internal}
     (nil))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41]  <function_decl 0x2adf292fe600 sprintf>) [0 __builtin_sprintf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:142 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 0 ax [91])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:143 221 {*adddi_1}
     (nil))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2adf297e14c0 *.LC7>)) sim2fitman_sup.cpp:143 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) sim2fitman_sup.cpp:143 89 {*movdi_internal}
     (nil))
(call_insn/i 17 16 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:143 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (set (reg:SI 0 ax [orig:85 D.6396 ] [85])
        (reg:SI 0 ax)) sim2fitman_sup.cpp:143 90 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:85 D.6396 ] [85])
            (const_int 0 [0]))) sim2fitman_sup.cpp:143 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) sim2fitman_sup.cpp:143 596 {*jcc_1}
     (nil)
 -> 45)
;;  succ:       6
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 86 92
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (parallel [
            (set (reg:DI 0 ax [92])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:144 221 {*adddi_1}
     (nil))
(insn 23 22 24 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2adf297e1558 *.LC8>)) sim2fitman_sup.cpp:144 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) sim2fitman_sup.cpp:144 89 {*movdi_internal}
     (nil))
(call_insn/i 25 24 26 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:144 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 26 25 27 3 (set (reg:SI 0 ax [orig:86 D.6396 ] [86])
        (reg:SI 0 ax)) sim2fitman_sup.cpp:144 90 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:86 D.6396 ] [86])
            (const_int 0 [0]))) sim2fitman_sup.cpp:143 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 28 27 29 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) sim2fitman_sup.cpp:143 596 {*jcc_1}
     (nil)
 -> 45)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87 93
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (parallel [
            (set (reg:DI 0 ax [93])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:145 221 {*adddi_1}
     (nil))
(insn 31 30 32 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2adf297e15f0 *.LC9>)) sim2fitman_sup.cpp:145 89 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) sim2fitman_sup.cpp:145 89 {*movdi_internal}
     (nil))
(call_insn/i 33 32 34 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:145 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 34 33 35 4 (set (reg:SI 0 ax [orig:87 D.6396 ] [87])
        (reg:SI 0 ax)) sim2fitman_sup.cpp:145 90 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 D.6396 ] [87])
            (const_int 0 [0]))) sim2fitman_sup.cpp:144 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 36 35 37 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) sim2fitman_sup.cpp:144 596 {*jcc_1}
     (nil)
 -> 45)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 88 94
(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 5 (parallel [
            (set (reg:DI 0 ax [94])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:146 221 {*adddi_1}
     (nil))
(insn 39 38 40 5 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2adf297e1688 *.LC10>)) sim2fitman_sup.cpp:146 89 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) sim2fitman_sup.cpp:146 89 {*movdi_internal}
     (nil))
(call_insn/i 41 40 42 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:146 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 42 41 43 5 (set (reg:SI 0 ax [orig:88 D.6396 ] [88])
        (reg:SI 0 ax)) sim2fitman_sup.cpp:146 90 {*movsi_internal}
     (nil))
(insn 43 42 44 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.6396 ] [88])
            (const_int 0 [0]))) sim2fitman_sup.cpp:145 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 44 43 45 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) sim2fitman_sup.cpp:145 596 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 45 44 46 6 25 "" [3 uses])
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 71 6 (set (reg:SI 0 ax [orig:83 D.6396 ] [83])
        (const_int 1 [0x1])) sim2fitman_sup.cpp:147 90 {*movsi_internal}
     (nil))
(jump_insn 71 47 72 6 (set (pc)
        (label_ref 55)) sim2fitman_sup.cpp:147 636 {jump}
     (nil)
 -> 55)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 72 71 50)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 50 72 51 7 26 "" [1 uses])
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 55 7 (set (reg:SI 0 ax [orig:83 D.6396 ] [83])
        (const_int 0 [0])) sim2fitman_sup.cpp:149 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 17 [flags] 89
(code_label 55 52 56 8 28 "" [1 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 61 8 (set (reg:SI 0 ax [orig:89 <retval> ] [89])
        (reg:SI 0 ax [orig:83 D.6396 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 61 57 62 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:89 <retval> ] [89])) sim2fitman_sup.cpp:153 90 {*movsi_internal}
     (nil))
(insn 62 61 63 8 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6398+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 1 dx [97]))
        ]) sim2fitman_sup.cpp:153 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 63 62 69 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) sim2fitman_sup.cpp:153 596 {*jcc_1}
     (nil)
 -> 66)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 69 63 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 64 69 65 9 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2adf297c8e00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:153 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 65 64 66)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 66 65 70 10 29 "" [1 uses])
(note 70 66 67 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 67 70 73 10 (use (reg/i:SI 0 ax)) sim2fitman_sup.cpp:153 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 73 67 0 NOTE_INSN_DELETED)

;; Function void swapBytes(char*, int) (_Z9swapBytesPci, funcdef_no=7, decl_uid=5395, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 32:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 36:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 37:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 41:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=111 from oldreg=108, assigning class GENERAL_REGS to r111
   41: {r111:SI=r111:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   54: r111:SI=r107:SI
    Inserting insn reload after:
   55: r108:SI=r111:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) rm {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 4
   Insn 47: point = 0
   Insn 46: point = 0
   Insn 44: point = 1
   Insn 43: point = 3
   Insn 42: point = 5
   Insn 55: point = 7
	Hard reg 1 is preferable by r111 with profit 1
   Insn 41: point = 9
   Insn 54: point = 9
   Insn 40: point = 10
  BB 2
   Insn 51: point = 11
   Insn 7: point = 11
   Insn 3: point = 11
   Insn 2: point = 11
  BB 3
   Insn 37: point = 11
   Insn 36: point = 11
   Insn 35: point = 12
   Insn 34: point = 13
   Insn 33: point = 15
   Insn 32: point = 16
   Insn 31: point = 18
   Insn 30: point = 20
   Insn 29: point = 22
   Insn 28: point = 23
   Insn 27: point = 24
   Insn 26: point = 26
   Insn 25: point = 28
   Insn 24: point = 29
   Insn 23: point = 31
   Insn 22: point = 33
   Insn 21: point = 35
   Insn 20: point = 36
   Insn 19: point = 38
   Insn 18: point = 39
   Insn 17: point = 41
   Insn 16: point = 42
   Insn 15: point = 43
   Insn 14: point = 45
   Insn 13: point = 47
   Insn 12: point = 48
   Insn 11: point = 50
 r83: [0..1]
 r84: [46..48]
 r85: [44..45]
 r86: [37..39]
 r87: [23..36]
 r88: [32..33]
 r89: [30..31]
 r90: [27..29]
 r91: [25..26]
 r92: [23..24]
 r93: [19..20]
 r94: [17..18]
 r95: [14..16]
 r96: [11..13]
 r97: [49..50]
 r98: [46..47]
 r99: [42..43]
 r100: [40..41]
 r101: [37..38]
 r102: [34..35]
 r103: [27..28]
 r104: [21..22]
 r105: [14..15]
 r106: [11..12]
 r107: [6..10]
 r108: [6..7]
 r109: [4..5]
 r110: [2..3]
 r111: [8..9]
Compressing live ranges: from 51 to 44 - 86%
Ranges after the compression:
 r83: [0..1]
 r84: [40..41]
 r85: [38..39]
 r86: [32..33]
 r87: [20..31]
 r88: [28..29]
 r89: [26..27]
 r90: [24..25]
 r91: [22..23]
 r92: [20..21]
 r93: [16..17]
 r94: [14..15]
 r95: [12..13]
 r96: [10..11]
 r97: [42..43]
 r98: [40..41]
 r99: [36..37]
 r100: [34..35]
 r101: [32..33]
 r102: [30..31]
 r103: [24..25]
 r104: [18..19]
 r105: [12..13]
 r106: [10..11]
 r107: [6..9]
 r108: [6..7]
 r109: [4..5]
 r110: [2..3]
 r111: [8..9]

********** Assignment #1: **********

	 Assigning to 111 (cl=GENERAL_REGS, orig=108, freq=3, tfirst=111, tfreq=3)...
	   Assign 1 to reload r111 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 44
changing reg in insn 46
changing reg in insn 12
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 28
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
deleting insn with uid = 55.
deleting insn with uid = 44.
starting the processing of deferred insns
ending the processing of deferred insns


void swapBytes(char*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={21d,21u} r1={8d,7u,3e} r2={2d,1u,1e} r4={1d,1u} r5={1d,1u} r6={1d,24u} r7={1d,5u} r17={13d,1u} r20={1d,1u,8e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 133{59d,62u,12e} in 38{38 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
        (reg:DI 5 di [ theVarChar ])) sim2fitman_sup.cpp:158 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
        (reg:SI 4 si [ size ])) sim2fitman_sup.cpp:158 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 51 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:169 90 {*movsi_internal}
     (nil))
(jump_insn 51 7 52 2 (set (pc)
        (label_ref 38)) sim2fitman_sup.cpp:169 636 {jump}
     (nil)
 -> 38)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 52 51 45)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106
(code_label 45 52 10 3 32 "" [1 uses])
(note 10 45 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:170 90 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:DI 1 dx [orig:84 D.6407 ] [84])
        (sign_extend:DI (reg:SI 0 ax [97]))) sim2fitman_sup.cpp:170 142 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) sim2fitman_sup.cpp:170 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.6408 ] [85])
                (plus:DI (reg/f:DI 0 ax [98])
                    (reg:DI 1 dx [orig:84 D.6407 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:170 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.6407 ] [84]))
        (nil)))
(insn 15 14 16 3 (set (reg:QI 0 ax [99])
        (mem:QI (reg/f:DI 0 ax [orig:85 D.6408 ] [85]) [0 *_7+0 S1 A8])) sim2fitman_sup.cpp:170 93 {*movqi_internal}
     (nil))
(insn 16 15 17 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5 [0xfffffffffffffffb])) [0 tempChar+0 S1 A8])
        (reg:QI 0 ax [99])) sim2fitman_sup.cpp:170 93 {*movqi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:SI 0 ax [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:171 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 1 dx [orig:86 D.6407 ] [86])
        (sign_extend:DI (reg:SI 0 ax [100]))) sim2fitman_sup.cpp:171 142 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) sim2fitman_sup.cpp:171 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (parallel [
            (set (reg/f:DI 1 dx [orig:87 D.6408 ] [87])
                (plus:DI (reg:DI 1 dx [orig:86 D.6407 ] [86])
                    (reg/f:DI 0 ax [101])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:171 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:86 D.6407 ] [86]))
        (nil)))
(insn 21 20 22 3 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) sim2fitman_sup.cpp:171 90 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:SI 0 ax [orig:88 D.6406 ] [88])
                (minus:SI (reg:SI 0 ax [102])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:171 263 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))
        (nil)))
(insn 23 22 24 3 (set (reg:DI 0 ax [orig:89 D.6407 ] [89])
        (sign_extend:DI (reg:SI 0 ax [orig:88 D.6406 ] [88]))) sim2fitman_sup.cpp:171 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg:DI 2 cx [orig:90 D.6407 ] [90])
                (plus:DI (reg:DI 0 ax [orig:89 D.6407 ] [89])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:171 221 {*adddi_1}
     (nil))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) sim2fitman_sup.cpp:171 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6408 ] [91])
                (plus:DI (reg/f:DI 0 ax [103])
                    (reg:DI 2 cx [orig:90 D.6407 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:171 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 2 cx [orig:90 D.6407 ] [90]))
        (nil)))
(insn 27 26 28 3 (set (reg:QI 0 ax [orig:92 D.6409 ] [92])
        (mem:QI (reg/f:DI 0 ax [orig:91 D.6408 ] [91]) [0 *_14+0 S1 A8])) sim2fitman_sup.cpp:171 93 {*movqi_internal}
     (nil))
(insn 28 27 29 3 (set (mem:QI (reg/f:DI 1 dx [orig:87 D.6408 ] [87]) [0 *_10+0 S1 A8])
        (reg:QI 0 ax [orig:92 D.6409 ] [92])) sim2fitman_sup.cpp:171 93 {*movqi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) sim2fitman_sup.cpp:172 90 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (parallel [
            (set (reg:SI 0 ax [orig:93 D.6406 ] [93])
                (minus:SI (reg:SI 0 ax [104])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:172 263 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))
        (nil)))
(insn 31 30 32 3 (set (reg:DI 0 ax [orig:94 D.6407 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.6406 ] [93]))) sim2fitman_sup.cpp:172 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:DI 1 dx [orig:95 D.6407 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 D.6407 ] [94])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:172 221 {*adddi_1}
     (nil))
(insn 33 32 34 3 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) sim2fitman_sup.cpp:172 89 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg/f:DI 1 dx [orig:96 D.6408 ] [96])
                (plus:DI (reg:DI 1 dx [orig:95 D.6407 ] [95])
                    (reg/f:DI 0 ax [105])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:172 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.6407 ] [95]))
        (nil)))
(insn 35 34 36 3 (set (reg:QI 0 ax [106])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5 [0xfffffffffffffffb])) [0 tempChar+0 S1 A8])) sim2fitman_sup.cpp:172 93 {*movqi_internal}
     (nil))
(insn 36 35 37 3 (set (mem:QI (reg/f:DI 1 dx [orig:96 D.6408 ] [96]) [0 *_19+0 S1 A8])
        (reg:QI 0 ax [106])) sim2fitman_sup.cpp:172 93 {*movqi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:169 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 107 108 109 110
(code_label 38 37 39 4 31 "" [1 uses])
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 54 4 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) sim2fitman_sup.cpp:169 90 {*movsi_internal}
     (nil))
(insn 54 40 41 4 (set (reg:SI 1 dx [108])
        (reg:SI 0 ax [107])) sim2fitman_sup.cpp:169 90 {*movsi_internal}
     (nil))
(insn 41 54 42 4 (parallel [
            (set (reg:SI 1 dx [108])
                (lshiftrt:SI (reg:SI 1 dx [108])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:169 529 {*lshrsi3_1}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg:SI 0 ax [109])
                (plus:SI (reg:SI 0 ax [107])
                    (reg:SI 1 dx [108])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:169 220 {*addsi_1}
     (nil))
(insn 43 42 46 4 (parallel [
            (set (reg:SI 0 ax [110])
                (ashiftrt:SI (reg:SI 0 ax [109])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:169 530 {*ashrsi3_1}
     (nil))
(insn 46 43 47 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.6406 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) sim2fitman_sup.cpp:169 7 {*cmpsi_1}
     (nil))
(jump_insn 47 46 48 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) sim2fitman_sup.cpp:169 596 {*jcc_1}
     (nil)
 -> 45)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 48 47 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 53 48 0 NOTE_INSN_DELETED)

;; Function bool promptYN() (_Z8promptYNv, funcdef_no=8, decl_uid=5396, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) q  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 46
changing reg in insn 41
changing reg in insn 62
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 23
changing reg in insn 35
changing reg in insn 33
changing reg in insn 28
changing reg in insn 26
changing reg in insn 24
changing reg in insn 62
changing reg in insn 66
starting the processing of deferred insns
ending the processing of deferred insns


bool promptYN()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={17d,17u} r1={6d} r2={6d} r4={6d} r5={11d,5u} r6={1d,20u} r7={1d,21u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={11d,6u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} 
;;    total ref usage 450{380d,70u,0e} in 41{36 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 57 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              14 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85
(code_label 57 2 4 3 40 "" [1 uses])
(note 4 57 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 4 6 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2adf297ec7b8 *.LC11>)) sim2fitman_sup.cpp:192 89 {*movdi_internal}
     (nil))
(insn 6 5 7 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:192 93 {*movqi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:192 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 8 7 9 3 (set (reg/f:DI 0 ax [orig:84 D.6411 ] [84])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x2adf294b1000 stdin>) [0 stdin+0 S8 A64])) sim2fitman_sup.cpp:193 89 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:84 D.6411 ] [84])) sim2fitman_sup.cpp:193 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2adf294ac200 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:193 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:85 D.6412 ] [85])
        (reg:SI 0 ax)) sim2fitman_sup.cpp:193 90 {*movsi_internal}
     (nil))
(insn 12 11 19 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8])
        (reg:QI 0 ax [orig:85 D.6412 ] [85])) sim2fitman_sup.cpp:193 93 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              4 (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 86 87
(code_label 19 12 13 4 34 "" [1 uses])
(note 13 19 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:DI 0 ax [orig:86 D.6411 ] [86])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x2adf294b1000 stdin>) [0 stdin+0 S8 A64])) sim2fitman_sup.cpp:195 89 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:86 D.6411 ] [86])) sim2fitman_sup.cpp:195 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2adf294ac200 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:195 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 4 (set (reg:SI 0 ax [orig:87 D.6412 ] [87])
        (reg:SI 0 ax)) sim2fitman_sup.cpp:195 90 {*movsi_internal}
     (nil))
(insn 18 17 20 4 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
        (reg:QI 0 ax [orig:87 D.6412 ] [87])) sim2fitman_sup.cpp:195 93 {*movqi_internal}
     (nil))
(insn 20 18 21 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
            (const_int 10 [0xa]))) sim2fitman_sup.cpp:194 5 {*cmpqi_1}
     (nil))
(jump_insn 21 20 22 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) sim2fitman_sup.cpp:194 596 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       4 (DFS_BACK)
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 0 ax [orig:88 D.6412 ] [88])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8]))) sim2fitman_sup.cpp:198 148 {extendqisi2}
     (nil))
(insn 24 23 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.6412 ] [88])
            (const_int 89 [0x59]))) sim2fitman_sup.cpp:198 7 {*cmpsi_1}
     (nil))
(jump_insn 25 24 69 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) sim2fitman_sup.cpp:198 596 {*jcc_1}
     (nil)
 -> 39)
;;  succ:       11
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(note 69 25 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 69 27 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:88 D.6412 ] [88])
            (const_int 89 [0x59]))) sim2fitman_sup.cpp:198 7 {*cmpsi_1}
     (nil))
(jump_insn 27 26 70 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) sim2fitman_sup.cpp:198 596 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       9
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(note 70 27 28 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 28 70 29 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.6412 ] [88])
            (const_int 78 [0x4e]))) sim2fitman_sup.cpp:198 7 {*cmpsi_1}
     (nil))
(jump_insn 29 28 75 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) sim2fitman_sup.cpp:198 596 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       12
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 75 29 76 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 76 75 77 8 (set (pc)
        (label_ref 49)) sim2fitman_sup.cpp:198 636 {jump}
     (nil)
 -> 49)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 77 76 32)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(code_label 32 77 72 9 37 "" [1 uses])
(note 72 32 33 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 33 72 34 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.6412 ] [88])
            (const_int 110 [0x6e]))) sim2fitman_sup.cpp:198 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 73 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) sim2fitman_sup.cpp:198 596 {*jcc_1}
     (nil)
 -> 44)
;;  succ:       12
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags]
(note 73 34 35 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 35 73 36 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.6412 ] [88])
            (const_int 121 [0x79]))) sim2fitman_sup.cpp:198 7 {*cmpsi_1}
     (nil))
(jump_insn 36 35 39 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 49)
            (pc))) sim2fitman_sup.cpp:198 596 {*jcc_1}
     (nil)
 -> 49)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 39 36 40 11 36 "" [1 uses])
(note 40 39 41 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 78 11 (set (reg:QI 0 ax [orig:83 D.6410 ] [83])
        (const_int 1 [0x1])) sim2fitman_sup.cpp:201 93 {*movqi_internal}
     (nil))
(jump_insn 78 41 79 11 (set (pc)
        (label_ref 60)) sim2fitman_sup.cpp:201 636 {jump}
     (nil)
 -> 60)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 79 78 44)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              9
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 44 79 45 12 38 "" [2 uses])
(note 45 44 46 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 80 12 (set (reg:QI 0 ax [orig:83 D.6410 ] [83])
        (const_int 0 [0])) sim2fitman_sup.cpp:205 93 {*movqi_internal}
     (nil))
(jump_insn 80 46 81 12 (set (pc)
        (label_ref 60)) sim2fitman_sup.cpp:205 636 {jump}
     (nil)
 -> 60)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 81 80 49)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;;              8 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 49 81 50 13 35 "" [2 uses])
(note 50 49 51 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2adf297ec850 *.LC12>)) sim2fitman_sup.cpp:208 89 {*movdi_internal}
     (nil))
(insn 52 51 53 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:208 93 {*movqi_internal}
     (nil))
(call_insn 53 52 54 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:208 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 54 53 55 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2adf297ec8e8 *.LC13>)) sim2fitman_sup.cpp:209 89 {*movdi_internal}
     (nil))
(call_insn 55 54 84 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:209 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 14, flags: (NEW, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 84 55 85 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 56 16 (const_int 0 [0]) sim2fitman_sup.cpp:210 662 {nop}
     (nil))
;;  succ:       14 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 [100.0%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 56 85 82 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 82 56 83 14 (set (pc)
        (label_ref 57)) sim2fitman_sup.cpp:212 636 {jump}
     (nil)
 -> 57)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 83 82 60)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%] 
;;              12 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 89
(code_label 60 83 61 15 39 "" [2 uses])
(note 61 60 62 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 66 15 (set (reg:QI 0 ax [orig:89 <retval> ] [89])
        (reg:QI 0 ax [orig:83 D.6410 ] [83])) 93 {*movqi_internal}
     (nil))
(insn 66 62 67 15 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:89 <retval> ] [89])) sim2fitman_sup.cpp:213 93 {*movqi_internal}
     (nil))
(insn 67 66 86 15 (use (reg/i:QI 0 ax)) sim2fitman_sup.cpp:213 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 86 67 0 NOTE_INSN_DELETED)

;; Function int promptSUBN() (_Z10promptSUBNv, funcdef_no=9, decl_uid=5397, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rw {*tablejump_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 46
changing reg in insn 41
changing reg in insn 36
changing reg in insn 62
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 23
changing reg in insn 24
changing reg in insn 62
changing reg in insn 66
changing reg in insn 24
changing reg in insn 27
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
starting the processing of deferred insns
ending the processing of deferred insns


int promptSUBN()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={21d,17u} r1={6d} r2={6d} r4={6d} r5={11d,5u} r6={1d,17u} r7={1d,18u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={8d,2u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} 
;;    total ref usage 441{381d,60u,0e} in 38{33 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 57 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              11 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85
(code_label 57 2 4 3 49 "" [1 uses])
(note 4 57 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 4 6 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x2adf297f85f0 *.LC14>)) sim2fitman_sup.cpp:223 89 {*movdi_internal}
     (nil))
(insn 6 5 7 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:223 93 {*movqi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:223 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 8 7 9 3 (set (reg/f:DI 0 ax [orig:84 D.6418 ] [84])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x2adf294b1000 stdin>) [0 stdin+0 S8 A64])) sim2fitman_sup.cpp:224 89 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:84 D.6418 ] [84])) sim2fitman_sup.cpp:224 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2adf294ac200 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:224 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:85 D.6417 ] [85])
        (reg:SI 0 ax)) sim2fitman_sup.cpp:224 90 {*movsi_internal}
     (nil))
(insn 12 11 19 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8])
        (reg:QI 0 ax [orig:85 D.6417 ] [85])) sim2fitman_sup.cpp:224 93 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              4 (DFS_BACK)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 86 87
(code_label 19 12 13 4 42 "" [1 uses])
(note 13 19 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:DI 0 ax [orig:86 D.6418 ] [86])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x2adf294b1000 stdin>) [0 stdin+0 S8 A64])) sim2fitman_sup.cpp:226 89 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:86 D.6418 ] [86])) sim2fitman_sup.cpp:226 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x2adf294ac200 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:226 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 4 (set (reg:SI 0 ax [orig:87 D.6417 ] [87])
        (reg:SI 0 ax)) sim2fitman_sup.cpp:226 90 {*movsi_internal}
     (nil))
(insn 18 17 20 4 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
        (reg:QI 0 ax [orig:87 D.6417 ] [87])) sim2fitman_sup.cpp:226 93 {*movqi_internal}
     (nil))
(insn 20 18 21 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
            (const_int 10 [0xa]))) sim2fitman_sup.cpp:225 5 {*cmpqi_1}
     (nil))
(jump_insn 21 20 22 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) sim2fitman_sup.cpp:225 596 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       4 (DFS_BACK)
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 90
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 0 ax [orig:88 D.6417 ] [88])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8]))) sim2fitman_sup.cpp:229 148 {extendqisi2}
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg:SI 0 ax [90])
                (plus:SI (reg:SI 0 ax [orig:88 D.6417 ] [88])
                    (const_int -78 [0xffffffffffffffb2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:229 220 {*addsi_1}
     (nil))
(insn 25 24 26 5 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [90])
            (const_int 39 [0x27]))) sim2fitman_sup.cpp:229 7 {*cmpsi_1}
     (nil))
(jump_insn 26 25 69 5 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) sim2fitman_sup.cpp:229 596 {*jcc_1}
     (nil)
 -> 49)
;;  succ:       10
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90
;; lr  def 	 91 92
(note 69 26 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 69 28 6 (set (reg:DI 0 ax [91])
        (zero_extend:DI (reg:SI 0 ax [90]))) sim2fitman_sup.cpp:229 133 {*zero_extendsidi2}
     (nil))
(insn 28 27 29 6 (set (reg:DI 0 ax [92])
        (mem/u/c:DI (plus:DI (ashift:DI (reg:DI 0 ax [91])
                    (const_int 3 [0x3]))
                (label_ref:DI 31)) [0  S8 A8])) sim2fitman_sup.cpp:229 89 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 31 (nil)))
(jump_insn 29 28 30 6 (parallel [
            (set (pc)
                (reg:DI 0 ax [92]))
            (use (label_ref 31))
        ]) sim2fitman_sup.cpp:229 640 {*tablejump_1}
     (nil)
 -> 31)
;;  succ:       10
;;              9
;;              7
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 30 29 31)
;; Insn is not within a basic block
(code_label 31 30 32 45 "" [2 uses])
;; Insn is not within a basic block
(jump_table_data 32 31 33 (addr_vec:DI [
            (label_ref:DI 44)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 34)
            (label_ref:DI 49)
            (label_ref:DI 39)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 44)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 49)
            (label_ref:DI 34)
            (label_ref:DI 49)
            (label_ref:DI 39)
        ]))
(barrier 33 32 34)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 34 33 35 7 46 "" [2 uses])
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 70 7 (set (reg:SI 0 ax [orig:83 D.6417 ] [83])
        (const_int 1 [0x1])) sim2fitman_sup.cpp:232 90 {*movsi_internal}
     (nil))
(jump_insn 70 36 71 7 (set (pc)
        (label_ref 60)) sim2fitman_sup.cpp:232 636 {jump}
     (nil)
 -> 60)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 71 70 39)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 39 71 40 8 47 "" [2 uses])
(note 40 39 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 72 8 (set (reg:SI 0 ax [orig:83 D.6417 ] [83])
        (const_int 2 [0x2])) sim2fitman_sup.cpp:236 90 {*movsi_internal}
     (nil))
(jump_insn 72 41 73 8 (set (pc)
        (label_ref 60)) sim2fitman_sup.cpp:236 636 {jump}
     (nil)
 -> 60)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 73 72 44)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 44 73 45 9 44 "" [2 uses])
(note 45 44 46 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 74 9 (set (reg:SI 0 ax [orig:83 D.6417 ] [83])
        (const_int -1 [0xffffffffffffffff])) sim2fitman_sup.cpp:240 90 {*movsi_internal}
     (nil))
(jump_insn 74 46 75 9 (set (pc)
        (label_ref 60)) sim2fitman_sup.cpp:240 636 {jump}
     (nil)
 -> 60)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 75 74 49)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              5
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 49 75 50 10 43 "" [35 uses])
(note 50 49 51 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2adf297ec850 *.LC12>)) sim2fitman_sup.cpp:243 89 {*movdi_internal}
     (nil))
(insn 52 51 53 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:243 93 {*movqi_internal}
     (nil))
(call_insn 53 52 54 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:243 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 54 53 55 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x2adf297f8688 *.LC15>)) sim2fitman_sup.cpp:244 89 {*movdi_internal}
     (nil))
(call_insn 55 54 78 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:244 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 11, flags: (NEW, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 78 55 79 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 56 13 (const_int 0 [0]) sim2fitman_sup.cpp:245 662 {nop}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 [100.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 56 79 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 76 56 77 11 (set (pc)
        (label_ref 57)) sim2fitman_sup.cpp:247 636 {jump}
     (nil)
 -> 57)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 77 76 60)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 [100.0%] 
;;              7 [100.0%] 
;;              9 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 89
(code_label 60 77 61 12 48 "" [3 uses])
(note 61 60 62 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 66 12 (set (reg:SI 0 ax [orig:89 <retval> ] [89])
        (reg:SI 0 ax [orig:83 D.6417 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 66 62 67 12 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:89 <retval> ] [89])) sim2fitman_sup.cpp:248 90 {*movsi_internal}
     (nil))
(insn 67 66 80 12 (use (reg/i:SI 0 ax)) sim2fitman_sup.cpp:248 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 80 67 0 NOTE_INSN_DELETED)

;; Function void init(Data_file_header*, Data_block_header*, Procpar_info*, Preprocess*, IOFiles*, InFile_struct*) (_Z4initP16Data_file_headerP17Data_block_headerP12Procpar_infoP10PreprocessP7IOFilesP13InFile_struct, funcdef_no=10, decl_uid=5408, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 17:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=537 from oldreg=84, assigning class GENERAL_REGS to r537
   17: {r537:DI=r537:DI<<0x9;clobber flags:CC;}
      REG_DEAD r83:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  776: r537:DI=r83:DI
    Inserting insn reload after:
  777: r84:DI=r537:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 24:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=538 from oldreg=87, assigning class GENERAL_REGS to r538
   24: {r538:DI=r538:DI<<0x9;clobber flags:CC;}
      REG_DEAD r86:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  778: r538:DI=r86:DI
    Inserting insn reload after:
  779: r87:DI=r538:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 31:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=539 from oldreg=90, assigning class GENERAL_REGS to r539
   31: {r539:DI=r539:DI<<0x9;clobber flags:CC;}
      REG_DEAD r89:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  780: r539:DI=r89:DI
    Inserting insn reload after:
  781: r90:DI=r539:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 33
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 37:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=540 from oldreg=93, assigning class GENERAL_REGS to r540
   37: {r540:DI=r540:DI<<0x9;clobber flags:CC;}
      REG_DEAD r92:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  782: r540:DI=r92:DI
    Inserting insn reload after:
  783: r93:DI=r540:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=541 from oldreg=96, assigning class GENERAL_REGS to r541
   43: {r541:DI=r541:DI<<0x9;clobber flags:CC;}
      REG_DEAD r95:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  784: r541:DI=r95:DI
    Inserting insn reload after:
  785: r96:DI=r541:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 46:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 47:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 50:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=542 from oldreg=99, assigning class GENERAL_REGS to r542
   50: {r542:DI=r542:DI<<0x9;clobber flags:CC;}
      REG_DEAD r98:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  786: r542:DI=r98:DI
    Inserting insn reload after:
  787: r99:DI=r542:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 53:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 54:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=543 from oldreg=102, assigning class GENERAL_REGS to r543
   57: {r543:DI=r543:DI<<0x9;clobber flags:CC;}
      REG_DEAD r101:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  788: r543:DI=r101:DI
    Inserting insn reload after:
  789: r102:DI=r543:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 64:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=544 from oldreg=105, assigning class GENERAL_REGS to r544
   64: {r544:DI=r544:DI<<0x9;clobber flags:CC;}
      REG_DEAD r104:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  790: r544:DI=r104:DI
    Inserting insn reload after:
  791: r105:DI=r544:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 71:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=545 from oldreg=108, assigning class GENERAL_REGS to r545
   71: {r545:DI=r545:DI<<0x9;clobber flags:CC;}
      REG_DEAD r107:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  792: r545:DI=r107:DI
    Inserting insn reload after:
  793: r108:DI=r545:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=546 from oldreg=111, assigning class GENERAL_REGS to r546
   78: {r546:DI=r546:DI<<0x9;clobber flags:CC;}
      REG_DEAD r110:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  794: r546:DI=r110:DI
    Inserting insn reload after:
  795: r111:DI=r546:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=547 from oldreg=114, assigning class GENERAL_REGS to r547
   85: {r547:DI=r547:DI<<0x9;clobber flags:CC;}
      REG_DEAD r113:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  796: r547:DI=r113:DI
    Inserting insn reload after:
  797: r114:DI=r547:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 92:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=548 from oldreg=117, assigning class GENERAL_REGS to r548
   92: {r548:DI=r548:DI<<0x9;clobber flags:CC;}
      REG_DEAD r116:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  798: r548:DI=r116:DI
    Inserting insn reload after:
  799: r117:DI=r548:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 96:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 99:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=549 from oldreg=120, assigning class GENERAL_REGS to r549
   99: {r549:DI=r549:DI<<0x9;clobber flags:CC;}
      REG_DEAD r119:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  800: r549:DI=r119:DI
    Inserting insn reload after:
  801: r120:DI=r549:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 106:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=550 from oldreg=123, assigning class GENERAL_REGS to r550
  106: {r550:DI=r550:DI<<0x9;clobber flags:CC;}
      REG_DEAD r122:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  802: r550:DI=r122:DI
    Inserting insn reload after:
  803: r123:DI=r550:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 113:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=551 from oldreg=126, assigning class GENERAL_REGS to r551
  113: {r551:DI=r551:DI<<0x9;clobber flags:CC;}
      REG_DEAD r125:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  804: r551:DI=r125:DI
    Inserting insn reload after:
  805: r126:DI=r551:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 120:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=552 from oldreg=129, assigning class GENERAL_REGS to r552
  120: {r552:DI=r552:DI<<0x9;clobber flags:CC;}
      REG_DEAD r128:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  806: r552:DI=r128:DI
    Inserting insn reload after:
  807: r129:DI=r552:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 123:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 124:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 127:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=553 from oldreg=132, assigning class GENERAL_REGS to r553
  127: {r553:DI=r553:DI<<0x9;clobber flags:CC;}
      REG_DEAD r131:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  808: r553:DI=r131:DI
    Inserting insn reload after:
  809: r132:DI=r553:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 131:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 134:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=554 from oldreg=135, assigning class GENERAL_REGS to r554
  134: {r554:DI=r554:DI<<0x9;clobber flags:CC;}
      REG_DEAD r134:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  810: r554:DI=r134:DI
    Inserting insn reload after:
  811: r135:DI=r554:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 136
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 144:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=555 from oldreg=139, assigning class GENERAL_REGS to r555
  144: {r555:DI=r555:DI<<0x9;clobber flags:CC;}
      REG_DEAD r138:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  812: r555:DI=r138:DI
    Inserting insn reload after:
  813: r139:DI=r555:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 149:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 150:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 165:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=556 from oldreg=143, assigning class GENERAL_REGS to r556
  165: {r556:DI=r556:DI<<0x9;clobber flags:CC;}
      REG_DEAD r142:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  814: r556:DI=r142:DI
    Inserting insn reload after:
  815: r143:DI=r556:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 166:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 170:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 171:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 182:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=557 from oldreg=146, assigning class GENERAL_REGS to r557
  182: {r557:DI=r557:DI<<0x9;clobber flags:CC;}
      REG_DEAD r145:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  816: r557:DI=r145:DI
    Inserting insn reload after:
  817: r146:DI=r557:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 186:  (0) r  (1) i {*movdi_internal}
      Creating newreg=558, assigning class GENERAL_REGS to r558
  186: r558:DI=0x2065746144206f4e
    Inserting insn reload after:
  818: [r148:DI]=r558:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 818:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 187:  (0) r  (1) i {*movdi_internal}
      Creating newreg=559, assigning class GENERAL_REGS to r559
  187: r559:DI=0x6c62616c69617641
    Inserting insn reload after:
  819: [r148:DI+0x8]=r559:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 819:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 195:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=560 from oldreg=151, assigning class GENERAL_REGS to r560
  195: {r560:DI=r560:DI<<0x9;clobber flags:CC;}
      REG_DEAD r150:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  820: r560:DI=r150:DI
    Inserting insn reload after:
  821: r151:DI=r560:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 200:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 201:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 212:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=561 from oldreg=154, assigning class GENERAL_REGS to r561
  212: {r561:DI=r561:DI<<0x9;clobber flags:CC;}
      REG_DEAD r153:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  822: r561:DI=r153:DI
    Inserting insn reload after:
  823: r154:DI=r561:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 214
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 216:  (0) r  (1) i {*movdi_internal}
      Creating newreg=562, assigning class GENERAL_REGS to r562
  216: r562:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  824: [r156:DI]=r562:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 824:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 217:  (0) r  (1) i {*movdi_internal}
      Creating newreg=563, assigning class GENERAL_REGS to r563
  217: r563:DI=0x6961764120656d61
    Inserting insn reload after:
  825: [r156:DI+0x8]=r563:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 825:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=564 from oldreg=159, assigning class GENERAL_REGS to r564
  226: {r564:DI=r564:DI<<0x9;clobber flags:CC;}
      REG_DEAD r158:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  826: r564:DI=r158:DI
    Inserting insn reload after:
  827: r159:DI=r564:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 231:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 232:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 243:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=565 from oldreg=162, assigning class GENERAL_REGS to r565
  243: {r565:DI=r565:DI<<0x9;clobber flags:CC;}
      REG_DEAD r161:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  828: r565:DI=r161:DI
    Inserting insn reload after:
  829: r162:DI=r565:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 245
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 247:  (0) r  (1) i {*movdi_internal}
      Creating newreg=566, assigning class GENERAL_REGS to r566
  247: r566:DI=0x6970736f48206f4e
    Inserting insn reload after:
  830: [r164:DI]=r566:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 830:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 248:  (0) r  (1) i {*movdi_internal}
      Creating newreg=567, assigning class GENERAL_REGS to r567
  248: r567:DI=0x656d614e206c6174
    Inserting insn reload after:
  831: [r164:DI+0x8]=r567:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 831:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 249:  (0) r  (1) i {*movdi_internal}
      Creating newreg=568, assigning class GENERAL_REGS to r568
  249: r568:DI=0x62616c6961764120
    Inserting insn reload after:
  832: [r164:DI+0x10]=r568:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 832:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 251:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 258:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=569 from oldreg=167, assigning class GENERAL_REGS to r569
  258: {r569:DI=r569:DI<<0x9;clobber flags:CC;}
      REG_DEAD r166:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  833: r569:DI=r166:DI
    Inserting insn reload after:
  834: r167:DI=r569:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 263:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 264:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 275:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=570 from oldreg=170, assigning class GENERAL_REGS to r570
  275: {r570:DI=r570:DI<<0x9;clobber flags:CC;}
      REG_DEAD r169:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  835: r570:DI=r169:DI
    Inserting insn reload after:
  836: r170:DI=r570:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 277
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 278:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 279:  (0) r  (1) i {*movdi_internal}
      Creating newreg=571, assigning class GENERAL_REGS to r571
  279: r571:DI=0x6569746150206f4e
    Inserting insn reload after:
  837: [r172:DI]=r571:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 837:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 280:  (0) r  (1) i {*movdi_internal}
      Creating newreg=572, assigning class GENERAL_REGS to r572
  280: r572:DI=0x20656d614e20746e
    Inserting insn reload after:
  838: [r172:DI+0x8]=r572:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 838:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 281:  (0) r  (1) i {*movdi_internal}
      Creating newreg=573, assigning class GENERAL_REGS to r573
  281: r573:DI=0x6c62616c69617641
    Inserting insn reload after:
  839: [r172:DI+0x10]=r573:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 839:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 282:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 289:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=574 from oldreg=175, assigning class GENERAL_REGS to r574
  289: {r574:DI=r574:DI<<0x9;clobber flags:CC;}
      REG_DEAD r174:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  840: r574:DI=r174:DI
    Inserting insn reload after:
  841: r175:DI=r574:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 294:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 295:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=575 from oldreg=178, assigning class GENERAL_REGS to r575
  306: {r575:DI=r575:DI<<0x9;clobber flags:CC;}
      REG_DEAD r177:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  842: r575:DI=r177:DI
    Inserting insn reload after:
  843: r178:DI=r575:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 308
	 Choosing alt 0 in insn 308:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 310:  (0) r  (1) i {*movdi_internal}
      Creating newreg=576, assigning class GENERAL_REGS to r576
  310: r576:DI=0x65736c7550206f4e
    Inserting insn reload after:
  844: [r180:DI]=r576:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 844:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 311:  (0) r  (1) i {*movdi_internal}
      Creating newreg=577, assigning class GENERAL_REGS to r577
  311: r577:DI=0x636e657571655320
    Inserting insn reload after:
  845: [r180:DI+0x8]=r577:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 845:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 312:  (0) r  (1) i {*movdi_internal}
      Creating newreg=578, assigning class GENERAL_REGS to r578
  312: r578:DI=0x4120656d614e2065
    Inserting insn reload after:
  846: [r180:DI+0x10]=r578:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 846:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 313:  (0) r  (1) i {*movdi_internal}
      Creating newreg=579, assigning class GENERAL_REGS to r579
  313: r579:DI=0x656c62616c696176
    Inserting insn reload after:
  847: [r180:DI+0x18]=r579:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 847:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 314:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 316:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 326
	 Choosing alt 0 in insn 326:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 327:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 329:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 341:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 343:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 353
	 Choosing alt 0 in insn 353:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 356:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 366
	 Choosing alt 0 in insn 366:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 367:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 369:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 378:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 379
	 Choosing alt 0 in insn 379:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 380:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 382:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 392
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 393:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 395:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 404:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 405
	 Choosing alt 0 in insn 405:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 408:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 417:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 419:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 420:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 422:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 432
	 Choosing alt 0 in insn 432:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 445
	 Choosing alt 0 in insn 445:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 446:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 448:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 458
	 Choosing alt 0 in insn 458:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 459:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 461:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 470:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 471
	 Choosing alt 0 in insn 471:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 472:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 474:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 486:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 498
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 501:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 510:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 511
	 Choosing alt 0 in insn 511:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 512:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 514:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 523:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 524
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 525:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 527:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 536:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 537
	 Choosing alt 0 in insn 537:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 538:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 540:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 549:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 550
	 Choosing alt 0 in insn 550:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 551:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 554:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=580 from oldreg=236, assigning class GENERAL_REGS to r580
  554: {r580:DI=r580:DI<<0x6;clobber flags:CC;}
      REG_DEAD r235:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  848: r580:DI=r235:DI
    Inserting insn reload after:
  849: r236:DI=r580:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 555:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 556
	 Choosing alt 0 in insn 556:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 557:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 560:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=581 from oldreg=239, assigning class GENERAL_REGS to r581
  560: {r581:DI=r581:DI<<0x6;clobber flags:CC;}
      REG_DEAD r238:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  850: r581:DI=r238:DI
    Inserting insn reload after:
  851: r239:DI=r581:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 562
	 Choosing alt 0 in insn 562:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 563:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 566:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=582 from oldreg=242, assigning class GENERAL_REGS to r582
  566: {r582:DI=r582:DI<<0x6;clobber flags:CC;}
      REG_DEAD r241:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  852: r582:DI=r241:DI
    Inserting insn reload after:
  853: r242:DI=r582:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 567:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 568
	 Choosing alt 0 in insn 568:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 569:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 572:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=583 from oldreg=245, assigning class GENERAL_REGS to r583
  572: {r583:DI=r583:DI<<0x6;clobber flags:CC;}
      REG_DEAD r244:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  854: r583:DI=r244:DI
    Inserting insn reload after:
  855: r245:DI=r583:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 573:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 574
	 Choosing alt 0 in insn 574:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 575:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 578:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=584 from oldreg=248, assigning class GENERAL_REGS to r584
  578: {r584:DI=r584:DI<<0x6;clobber flags:CC;}
      REG_DEAD r247:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  856: r584:DI=r247:DI
    Inserting insn reload after:
  857: r248:DI=r584:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 580
	 Choosing alt 0 in insn 580:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 581:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 584:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=585 from oldreg=251, assigning class GENERAL_REGS to r585
  584: {r585:DI=r585:DI<<0x6;clobber flags:CC;}
      REG_DEAD r250:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  858: r585:DI=r250:DI
    Inserting insn reload after:
  859: r251:DI=r585:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 585:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 586
	 Choosing alt 0 in insn 586:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 587:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 590:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=586 from oldreg=254, assigning class GENERAL_REGS to r586
  590: {r586:DI=r586:DI<<0x6;clobber flags:CC;}
      REG_DEAD r253:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  860: r586:DI=r253:DI
    Inserting insn reload after:
  861: r254:DI=r586:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 591:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 592
	 Choosing alt 0 in insn 592:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 593:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 596:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=587 from oldreg=257, assigning class GENERAL_REGS to r587
  596: {r587:DI=r587:DI<<0x6;clobber flags:CC;}
      REG_DEAD r256:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  862: r587:DI=r256:DI
    Inserting insn reload after:
  863: r257:DI=r587:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 597:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 598
	 Choosing alt 0 in insn 598:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 599:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 602:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=588 from oldreg=260, assigning class GENERAL_REGS to r588
  602: {r588:DI=r588:DI<<0x6;clobber flags:CC;}
      REG_DEAD r259:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  864: r588:DI=r259:DI
    Inserting insn reload after:
  865: r260:DI=r588:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 603:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 604
	 Choosing alt 0 in insn 604:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 605:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 606:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 608:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=589 from oldreg=263, assigning class GENERAL_REGS to r589
  608: {r589:DI=r589:DI<<0x5;clobber flags:CC;}
      REG_DEAD r262:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  866: r589:DI=r262:DI
    Inserting insn reload after:
  867: r263:DI=r589:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 609:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 610
	 Choosing alt 0 in insn 610:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 611:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 614:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=590 from oldreg=266, assigning class GENERAL_REGS to r590
  614: {r590:DI=r590:DI<<0x5;clobber flags:CC;}
      REG_DEAD r265:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  868: r590:DI=r265:DI
    Inserting insn reload after:
  869: r266:DI=r590:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 615:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 616
	 Choosing alt 0 in insn 616:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 617:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 620:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=591 from oldreg=269, assigning class GENERAL_REGS to r591
  620: {r591:DI=r591:DI<<0x5;clobber flags:CC;}
      REG_DEAD r268:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  870: r591:DI=r268:DI
    Inserting insn reload after:
  871: r269:DI=r591:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 621:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 622
	 Choosing alt 0 in insn 622:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 623:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 625:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 626:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=592 from oldreg=272, assigning class GENERAL_REGS to r592
  626: {r592:DI=r592:DI<<0x5;clobber flags:CC;}
      REG_DEAD r271:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  872: r592:DI=r271:DI
    Inserting insn reload after:
  873: r272:DI=r592:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 627:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 628
	 Choosing alt 0 in insn 628:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 629:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 630:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 632:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=593 from oldreg=275, assigning class GENERAL_REGS to r593
  632: {r593:DI=r593:DI<<0x5;clobber flags:CC;}
      REG_DEAD r274:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  874: r593:DI=r274:DI
    Inserting insn reload after:
  875: r275:DI=r593:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 633:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 634
	 Choosing alt 0 in insn 634:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 635:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 638:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=594 from oldreg=278, assigning class GENERAL_REGS to r594
  638: {r594:DI=r594:DI<<0x5;clobber flags:CC;}
      REG_DEAD r277:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  876: r594:DI=r277:DI
    Inserting insn reload after:
  877: r278:DI=r594:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 639:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 641:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 642:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 645:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=595 from oldreg=281, assigning class GENERAL_REGS to r595
  645: {r595:DI=r595:DI<<0x5;clobber flags:CC;}
      REG_DEAD r280:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  878: r595:DI=r280:DI
    Inserting insn reload after:
  879: r281:DI=r595:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 646:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 648:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 649:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 650:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 652:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=596 from oldreg=284, assigning class GENERAL_REGS to r596
  652: {r596:DI=r596:DI<<0x5;clobber flags:CC;}
      REG_DEAD r283:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  880: r596:DI=r283:DI
    Inserting insn reload after:
  881: r284:DI=r596:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 653:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 655:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 656:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 657:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 659:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=597 from oldreg=287, assigning class GENERAL_REGS to r597
  659: {r597:DI=r597:DI<<0x5;clobber flags:CC;}
      REG_DEAD r286:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  882: r597:DI=r286:DI
    Inserting insn reload after:
  883: r287:DI=r597:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 660:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 661:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 663:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 666:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=598 from oldreg=290, assigning class GENERAL_REGS to r598
  666: {r598:DI=r598:DI<<0x5;clobber flags:CC;}
      REG_DEAD r289:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  884: r598:DI=r289:DI
    Inserting insn reload after:
  885: r290:DI=r598:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 667:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 668
	 Choosing alt 0 in insn 668:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 669:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 672:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=599 from oldreg=293, assigning class GENERAL_REGS to r599
  672: {r599:DI=r599:DI<<0x5;clobber flags:CC;}
      REG_DEAD r292:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  886: r599:DI=r292:DI
    Inserting insn reload after:
  887: r293:DI=r599:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 673:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 674
	 Choosing alt 0 in insn 674:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 676:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 678:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=600 from oldreg=296, assigning class GENERAL_REGS to r600
  678: {r600:DI=r600:DI<<0x5;clobber flags:CC;}
      REG_DEAD r295:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  888: r600:DI=r295:DI
    Inserting insn reload after:
  889: r296:DI=r600:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 679:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 680
	 Choosing alt 0 in insn 680:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 681:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 682:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 683:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 684:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=601 from oldreg=299, assigning class GENERAL_REGS to r601
  684: {r601:DI=r601:DI<<0x5;clobber flags:CC;}
      REG_DEAD r298:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  890: r601:DI=r298:DI
    Inserting insn reload after:
  891: r299:DI=r601:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 685:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 686
	 Choosing alt 0 in insn 686:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 687:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 688:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 693:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 694:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=602 from oldreg=303, assigning class GENERAL_REGS to r602
  694: {r602:DI=r602:DI<<0x5;clobber flags:CC;}
      REG_DEAD r302:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  892: r602:DI=r302:DI
    Inserting insn reload after:
  893: r303:DI=r602:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 696:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 698:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 699:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 700:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 704:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 706:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 709:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 716:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 717:  (0) r  (1) i {*movdi_internal}
      Creating newreg=603, assigning class GENERAL_REGS to r603
  717: r603:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  894: [r305:DI]=r603:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 894:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 718:  (0) r  (1) i {*movdi_internal}
      Creating newreg=604, assigning class GENERAL_REGS to r604
  718: r604:DI=0x6961764120656d61
    Inserting insn reload after:
  895: [r305:DI+0x8]=r604:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 895:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 719:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 720:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 721:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 722:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 723:  (0) r  (1) i {*movdi_internal}
      Creating newreg=605, assigning class GENERAL_REGS to r605
  723: r605:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  896: [r306:DI]=r605:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 896:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 724:  (0) r  (1) i {*movdi_internal}
      Creating newreg=606, assigning class GENERAL_REGS to r606
  724: r606:DI=0x6961764120656d61
    Inserting insn reload after:
  897: [r306:DI+0x8]=r606:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 897:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 725:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 726:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 727:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 728:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 729:  (0) r  (1) i {*movdi_internal}
      Creating newreg=607, assigning class GENERAL_REGS to r607
  729: r607:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  898: [r307:DI]=r607:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 898:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 730:  (0) r  (1) i {*movdi_internal}
      Creating newreg=608, assigning class GENERAL_REGS to r608
  730: r608:DI=0x6961764120656d61
    Inserting insn reload after:
  899: [r307:DI+0x8]=r608:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 899:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 731:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 732:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 733:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 734:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 735:  (0) r  (1) i {*movdi_internal}
      Creating newreg=609, assigning class GENERAL_REGS to r609
  735: r609:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  900: [r308:DI]=r609:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 900:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 736:  (0) r  (1) i {*movdi_internal}
      Creating newreg=610, assigning class GENERAL_REGS to r610
  736: r610:DI=0x6961764120656d61
    Inserting insn reload after:
  901: [r308:DI+0x8]=r610:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 901:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 737:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 738:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 739:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 740:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 741:  (0) r  (1) i {*movdi_internal}
      Creating newreg=611, assigning class GENERAL_REGS to r611
  741: r611:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  902: [r309:DI]=r611:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 902:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 742:  (0) r  (1) i {*movdi_internal}
      Creating newreg=612, assigning class GENERAL_REGS to r612
  742: r612:DI=0x6961764120656d61
    Inserting insn reload after:
  903: [r309:DI+0x8]=r612:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 903:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 743:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 744:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 745:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 746:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 747:  (0) r  (1) i {*movdi_internal}
      Creating newreg=613, assigning class GENERAL_REGS to r613
  747: r613:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  904: [r310:DI]=r613:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 904:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 748:  (0) r  (1) i {*movdi_internal}
      Creating newreg=614, assigning class GENERAL_REGS to r614
  748: r614:DI=0x6961764120656d61
    Inserting insn reload after:
  905: [r310:DI+0x8]=r614:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 905:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 749:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 750:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 751:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 752:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 753:  (0) r  (1) i {*movdi_internal}
      Creating newreg=615, assigning class GENERAL_REGS to r615
  753: r615:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  906: [r311:DI]=r615:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 906:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 754:  (0) r  (1) i {*movdi_internal}
      Creating newreg=616, assigning class GENERAL_REGS to r616
  754: r616:DI=0x6961764120656d61
    Inserting insn reload after:
  907: [r311:DI+0x8]=r616:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 907:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 755:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 756:  (0) m  (1) rn {*movhi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26

********** Pseudo live ranges #1: **********

  BB 26
   Insn 756: point = 0
   Insn 755: point = 1
   Insn 907: point = 1
   Insn 754: point = 2
   Insn 906: point = 3
   Insn 753: point = 4
   Insn 752: point = 5
   Insn 751: point = 7
   Insn 750: point = 8
   Insn 749: point = 9
   Insn 905: point = 9
   Insn 748: point = 10
   Insn 904: point = 11
   Insn 747: point = 12
   Insn 746: point = 13
   Insn 745: point = 15
   Insn 744: point = 16
   Insn 743: point = 17
   Insn 903: point = 17
   Insn 742: point = 18
   Insn 902: point = 19
   Insn 741: point = 20
   Insn 740: point = 21
   Insn 739: point = 23
   Insn 738: point = 24
   Insn 737: point = 25
   Insn 901: point = 25
   Insn 736: point = 26
   Insn 900: point = 27
   Insn 735: point = 28
   Insn 734: point = 29
   Insn 733: point = 31
   Insn 732: point = 32
   Insn 731: point = 33
   Insn 899: point = 33
   Insn 730: point = 34
   Insn 898: point = 35
   Insn 729: point = 36
   Insn 728: point = 37
   Insn 727: point = 39
   Insn 726: point = 40
   Insn 725: point = 41
   Insn 897: point = 41
   Insn 724: point = 42
   Insn 896: point = 43
   Insn 723: point = 44
   Insn 722: point = 45
   Insn 721: point = 47
   Insn 720: point = 48
   Insn 719: point = 49
   Insn 895: point = 49
   Insn 718: point = 50
   Insn 894: point = 51
   Insn 717: point = 52
   Insn 716: point = 53
  BB 25
   Insn 714: point = 54
   Insn 713: point = 54
  BB 2
   Insn 759: point = 54
   Insn 11: point = 54
   Insn 7: point = 54
   Insn 6: point = 54
   Insn 5: point = 54
   Insn 4: point = 54
   Insn 3: point = 54
   Insn 2: point = 54
  BB 24
   Insn 709: point = 54
  BB 23
   Insn 707: point = 54
   Insn 706: point = 54
   Insn 704: point = 55
   Insn 703: point = 57
  BB 21
   Insn 773: point = 58
   Insn 688: point = 58
   Insn 687: point = 58
   Insn 686: point = 59
   Insn 685: point = 61
   Insn 891: point = 62
	Hard reg 1 is preferable by r601 with profit 1
   Insn 684: point = 64
   Insn 890: point = 64
	Hard reg 1 is preferable by r601 with profit 1
	Hard reg 0 is preferable by r601 with profit 1
   Insn 683: point = 66
   Insn 682: point = 68
   Insn 681: point = 69
   Insn 680: point = 70
   Insn 679: point = 72
   Insn 889: point = 73
	Hard reg 1 is preferable by r600 with profit 1
   Insn 678: point = 75
   Insn 888: point = 75
	Hard reg 1 is preferable by r600 with profit 1
	Hard reg 0 is preferable by r600 with profit 1
   Insn 677: point = 77
   Insn 676: point = 79
   Insn 675: point = 80
   Insn 674: point = 81
   Insn 673: point = 83
   Insn 887: point = 84
	Hard reg 1 is preferable by r599 with profit 1
   Insn 672: point = 86
   Insn 886: point = 86
	Hard reg 1 is preferable by r599 with profit 1
	Hard reg 0 is preferable by r599 with profit 1
   Insn 671: point = 88
   Insn 670: point = 90
   Insn 669: point = 91
   Insn 668: point = 92
   Insn 667: point = 94
   Insn 885: point = 95
	Hard reg 1 is preferable by r598 with profit 1
   Insn 666: point = 97
   Insn 884: point = 97
	Hard reg 1 is preferable by r598 with profit 1
	Hard reg 0 is preferable by r598 with profit 1
   Insn 665: point = 99
   Insn 664: point = 101
   Insn 663: point = 102
   Insn 662: point = 103
   Insn 661: point = 104
   Insn 660: point = 106
   Insn 883: point = 107
	Hard reg 1 is preferable by r597 with profit 1
   Insn 659: point = 109
   Insn 882: point = 109
	Hard reg 1 is preferable by r597 with profit 1
	Hard reg 0 is preferable by r597 with profit 1
   Insn 658: point = 111
   Insn 657: point = 113
   Insn 656: point = 114
   Insn 655: point = 115
   Insn 654: point = 116
   Insn 653: point = 118
   Insn 881: point = 119
	Hard reg 1 is preferable by r596 with profit 1
   Insn 652: point = 121
   Insn 880: point = 121
	Hard reg 1 is preferable by r596 with profit 1
	Hard reg 0 is preferable by r596 with profit 1
   Insn 651: point = 123
   Insn 650: point = 125
   Insn 649: point = 126
   Insn 648: point = 127
   Insn 647: point = 128
   Insn 646: point = 130
   Insn 879: point = 131
	Hard reg 1 is preferable by r595 with profit 1
   Insn 645: point = 133
   Insn 878: point = 133
	Hard reg 1 is preferable by r595 with profit 1
	Hard reg 0 is preferable by r595 with profit 1
   Insn 644: point = 135
   Insn 643: point = 137
   Insn 642: point = 138
   Insn 641: point = 139
   Insn 640: point = 140
   Insn 639: point = 142
   Insn 877: point = 143
	Hard reg 1 is preferable by r594 with profit 1
   Insn 638: point = 145
   Insn 876: point = 145
	Hard reg 1 is preferable by r594 with profit 1
	Hard reg 0 is preferable by r594 with profit 1
   Insn 637: point = 147
   Insn 636: point = 149
   Insn 635: point = 150
   Insn 634: point = 151
   Insn 633: point = 153
   Insn 875: point = 154
	Hard reg 1 is preferable by r593 with profit 1
   Insn 632: point = 156
   Insn 874: point = 156
	Hard reg 1 is preferable by r593 with profit 1
	Hard reg 0 is preferable by r593 with profit 1
   Insn 631: point = 158
   Insn 630: point = 160
   Insn 629: point = 161
   Insn 628: point = 162
   Insn 627: point = 164
   Insn 873: point = 165
	Hard reg 1 is preferable by r592 with profit 1
   Insn 626: point = 167
   Insn 872: point = 167
	Hard reg 1 is preferable by r592 with profit 1
	Hard reg 0 is preferable by r592 with profit 1
   Insn 625: point = 169
   Insn 624: point = 171
   Insn 623: point = 172
   Insn 622: point = 173
   Insn 621: point = 175
   Insn 871: point = 176
	Hard reg 1 is preferable by r591 with profit 1
   Insn 620: point = 178
   Insn 870: point = 178
	Hard reg 1 is preferable by r591 with profit 1
	Hard reg 0 is preferable by r591 with profit 1
   Insn 619: point = 180
   Insn 618: point = 182
   Insn 617: point = 183
   Insn 616: point = 184
   Insn 615: point = 186
   Insn 869: point = 187
	Hard reg 1 is preferable by r590 with profit 1
   Insn 614: point = 189
   Insn 868: point = 189
	Hard reg 1 is preferable by r590 with profit 1
	Hard reg 0 is preferable by r590 with profit 1
   Insn 613: point = 191
   Insn 612: point = 193
   Insn 611: point = 194
   Insn 610: point = 195
   Insn 609: point = 197
   Insn 867: point = 198
	Hard reg 1 is preferable by r589 with profit 1
   Insn 608: point = 200
   Insn 866: point = 200
	Hard reg 1 is preferable by r589 with profit 1
	Hard reg 0 is preferable by r589 with profit 1
   Insn 607: point = 202
   Insn 606: point = 204
   Insn 605: point = 205
   Insn 604: point = 206
   Insn 603: point = 208
   Insn 865: point = 209
	Hard reg 1 is preferable by r588 with profit 1
   Insn 602: point = 211
   Insn 864: point = 211
	Hard reg 1 is preferable by r588 with profit 1
	Hard reg 0 is preferable by r588 with profit 1
   Insn 601: point = 213
   Insn 600: point = 215
   Insn 599: point = 216
   Insn 598: point = 217
   Insn 597: point = 219
   Insn 863: point = 220
	Hard reg 1 is preferable by r587 with profit 1
   Insn 596: point = 222
   Insn 862: point = 222
	Hard reg 1 is preferable by r587 with profit 1
	Hard reg 0 is preferable by r587 with profit 1
   Insn 595: point = 224
   Insn 594: point = 226
   Insn 593: point = 227
   Insn 592: point = 228
   Insn 591: point = 230
   Insn 861: point = 231
	Hard reg 1 is preferable by r586 with profit 1
   Insn 590: point = 233
   Insn 860: point = 233
	Hard reg 1 is preferable by r586 with profit 1
	Hard reg 0 is preferable by r586 with profit 1
   Insn 589: point = 235
   Insn 588: point = 237
   Insn 587: point = 238
   Insn 586: point = 239
   Insn 585: point = 241
   Insn 859: point = 242
	Hard reg 1 is preferable by r585 with profit 1
   Insn 584: point = 244
   Insn 858: point = 244
	Hard reg 1 is preferable by r585 with profit 1
	Hard reg 0 is preferable by r585 with profit 1
   Insn 583: point = 246
   Insn 582: point = 248
   Insn 581: point = 249
   Insn 580: point = 250
   Insn 579: point = 252
   Insn 857: point = 253
	Hard reg 1 is preferable by r584 with profit 1
   Insn 578: point = 255
   Insn 856: point = 255
	Hard reg 1 is preferable by r584 with profit 1
	Hard reg 0 is preferable by r584 with profit 1
   Insn 577: point = 257
   Insn 576: point = 259
   Insn 575: point = 260
   Insn 574: point = 261
   Insn 573: point = 263
   Insn 855: point = 264
	Hard reg 1 is preferable by r583 with profit 1
   Insn 572: point = 266
   Insn 854: point = 266
	Hard reg 1 is preferable by r583 with profit 1
	Hard reg 0 is preferable by r583 with profit 1
   Insn 571: point = 268
   Insn 570: point = 270
   Insn 569: point = 271
   Insn 568: point = 272
   Insn 567: point = 274
   Insn 853: point = 275
	Hard reg 1 is preferable by r582 with profit 1
   Insn 566: point = 277
   Insn 852: point = 277
	Hard reg 1 is preferable by r582 with profit 1
	Hard reg 0 is preferable by r582 with profit 1
   Insn 565: point = 279
   Insn 564: point = 281
   Insn 563: point = 282
   Insn 562: point = 283
   Insn 561: point = 285
   Insn 851: point = 286
	Hard reg 1 is preferable by r581 with profit 1
   Insn 560: point = 288
   Insn 850: point = 288
	Hard reg 1 is preferable by r581 with profit 1
	Hard reg 0 is preferable by r581 with profit 1
   Insn 559: point = 290
   Insn 558: point = 292
   Insn 557: point = 293
   Insn 556: point = 294
   Insn 555: point = 296
   Insn 849: point = 297
	Hard reg 1 is preferable by r580 with profit 1
   Insn 554: point = 299
   Insn 848: point = 299
	Hard reg 1 is preferable by r580 with profit 1
	Hard reg 0 is preferable by r580 with profit 1
   Insn 553: point = 301
   Insn 552: point = 303
   Insn 551: point = 304
   Insn 550: point = 305
   Insn 549: point = 307
   Insn 548: point = 308
   Insn 547: point = 310
   Insn 546: point = 312
   Insn 545: point = 314
   Insn 544: point = 315
   Insn 543: point = 315
   Insn 542: point = 315
   Insn 541: point = 315
   Insn 540: point = 316
   Insn 539: point = 318
   Insn 538: point = 319
   Insn 537: point = 320
   Insn 536: point = 322
   Insn 535: point = 323
   Insn 534: point = 325
   Insn 533: point = 327
   Insn 532: point = 329
   Insn 531: point = 330
   Insn 530: point = 330
   Insn 529: point = 330
   Insn 528: point = 330
   Insn 527: point = 331
   Insn 526: point = 333
   Insn 525: point = 334
   Insn 524: point = 335
   Insn 523: point = 337
   Insn 522: point = 338
   Insn 521: point = 340
   Insn 520: point = 342
   Insn 519: point = 344
   Insn 518: point = 345
   Insn 517: point = 345
   Insn 516: point = 345
   Insn 515: point = 345
   Insn 514: point = 346
   Insn 513: point = 348
   Insn 512: point = 349
   Insn 511: point = 350
   Insn 510: point = 352
   Insn 509: point = 353
   Insn 508: point = 355
   Insn 507: point = 357
   Insn 506: point = 359
   Insn 505: point = 360
   Insn 504: point = 360
   Insn 503: point = 360
   Insn 502: point = 360
   Insn 501: point = 361
   Insn 500: point = 363
   Insn 499: point = 364
   Insn 498: point = 365
   Insn 497: point = 367
   Insn 496: point = 368
   Insn 495: point = 370
   Insn 494: point = 372
   Insn 493: point = 374
   Insn 492: point = 375
   Insn 491: point = 375
   Insn 490: point = 375
   Insn 489: point = 375
   Insn 488: point = 376
   Insn 487: point = 378
   Insn 486: point = 379
   Insn 485: point = 380
   Insn 484: point = 381
   Insn 483: point = 383
   Insn 482: point = 384
   Insn 481: point = 386
   Insn 480: point = 388
   Insn 479: point = 390
   Insn 478: point = 391
   Insn 477: point = 391
   Insn 476: point = 391
   Insn 475: point = 391
   Insn 474: point = 392
   Insn 473: point = 394
   Insn 472: point = 395
   Insn 471: point = 396
   Insn 470: point = 398
   Insn 469: point = 399
   Insn 468: point = 401
   Insn 467: point = 403
   Insn 466: point = 405
   Insn 465: point = 406
   Insn 464: point = 406
   Insn 463: point = 406
   Insn 462: point = 406
   Insn 461: point = 407
   Insn 460: point = 409
   Insn 459: point = 410
   Insn 458: point = 411
   Insn 457: point = 413
   Insn 456: point = 414
   Insn 455: point = 416
   Insn 454: point = 418
   Insn 453: point = 420
   Insn 452: point = 421
   Insn 451: point = 421
   Insn 450: point = 421
   Insn 449: point = 421
   Insn 448: point = 422
   Insn 447: point = 424
   Insn 446: point = 425
   Insn 445: point = 426
   Insn 444: point = 428
   Insn 443: point = 429
   Insn 442: point = 431
   Insn 441: point = 433
   Insn 440: point = 435
   Insn 439: point = 436
   Insn 438: point = 436
   Insn 437: point = 436
   Insn 436: point = 436
   Insn 435: point = 437
   Insn 434: point = 439
   Insn 433: point = 440
   Insn 432: point = 441
   Insn 431: point = 443
   Insn 430: point = 444
   Insn 429: point = 446
   Insn 428: point = 448
   Insn 427: point = 450
   Insn 426: point = 451
   Insn 425: point = 451
   Insn 424: point = 451
   Insn 423: point = 451
   Insn 422: point = 452
   Insn 421: point = 454
   Insn 420: point = 455
   Insn 419: point = 456
   Insn 418: point = 457
   Insn 417: point = 459
   Insn 416: point = 460
   Insn 415: point = 462
   Insn 414: point = 464
   Insn 413: point = 466
   Insn 412: point = 467
   Insn 411: point = 467
   Insn 410: point = 467
   Insn 409: point = 467
   Insn 408: point = 468
   Insn 407: point = 470
   Insn 406: point = 471
   Insn 405: point = 472
   Insn 404: point = 474
   Insn 403: point = 475
   Insn 402: point = 477
   Insn 401: point = 479
   Insn 400: point = 481
   Insn 399: point = 482
   Insn 398: point = 482
   Insn 397: point = 482
   Insn 396: point = 482
   Insn 395: point = 483
   Insn 394: point = 485
   Insn 393: point = 486
   Insn 392: point = 487
   Insn 391: point = 489
   Insn 390: point = 490
   Insn 389: point = 492
   Insn 388: point = 494
   Insn 387: point = 496
   Insn 386: point = 497
   Insn 385: point = 497
   Insn 384: point = 497
   Insn 383: point = 497
   Insn 382: point = 498
   Insn 381: point = 500
   Insn 380: point = 501
   Insn 379: point = 502
   Insn 378: point = 504
   Insn 377: point = 505
   Insn 376: point = 507
   Insn 375: point = 509
   Insn 374: point = 511
   Insn 373: point = 512
   Insn 372: point = 512
   Insn 371: point = 512
   Insn 370: point = 512
   Insn 369: point = 513
   Insn 368: point = 515
   Insn 367: point = 516
   Insn 366: point = 517
   Insn 365: point = 519
   Insn 364: point = 520
   Insn 363: point = 522
   Insn 362: point = 524
   Insn 361: point = 526
   Insn 360: point = 527
   Insn 359: point = 527
   Insn 358: point = 527
   Insn 357: point = 527
   Insn 356: point = 528
   Insn 355: point = 530
   Insn 354: point = 531
   Insn 353: point = 532
   Insn 352: point = 534
   Insn 351: point = 535
   Insn 350: point = 537
   Insn 349: point = 539
   Insn 348: point = 541
   Insn 347: point = 542
   Insn 346: point = 542
   Insn 345: point = 542
   Insn 344: point = 542
   Insn 343: point = 543
   Insn 342: point = 545
   Insn 341: point = 546
   Insn 340: point = 547
   Insn 339: point = 548
   Insn 338: point = 550
   Insn 337: point = 551
   Insn 336: point = 553
   Insn 335: point = 555
   Insn 334: point = 557
   Insn 333: point = 558
   Insn 332: point = 558
   Insn 331: point = 558
   Insn 330: point = 558
   Insn 329: point = 559
   Insn 328: point = 561
   Insn 327: point = 562
   Insn 326: point = 563
   Insn 325: point = 565
   Insn 324: point = 566
   Insn 323: point = 568
   Insn 322: point = 570
   Insn 321: point = 572
   Insn 320: point = 573
   Insn 319: point = 573
   Insn 318: point = 573
   Insn 317: point = 573
   Insn 316: point = 574
   Insn 315: point = 576
   Insn 314: point = 577
   Insn 847: point = 578
   Insn 313: point = 579
   Insn 846: point = 580
   Insn 312: point = 581
   Insn 845: point = 582
   Insn 311: point = 583
   Insn 844: point = 584
   Insn 310: point = 585
   Insn 309: point = 586
   Insn 308: point = 588
   Insn 307: point = 590
   Insn 843: point = 591
	Hard reg 1 is preferable by r575 with profit 1
   Insn 306: point = 593
   Insn 842: point = 593
	Hard reg 1 is preferable by r575 with profit 1
	Hard reg 0 is preferable by r575 with profit 1
   Insn 305: point = 595
   Insn 304: point = 597
  BB 20
   Insn 302: point = 598
   Insn 301: point = 598
   Insn 299: point = 599
   Insn 298: point = 601
  BB 18
   Insn 771: point = 602
   Insn 283: point = 602
   Insn 282: point = 602
   Insn 839: point = 603
   Insn 281: point = 604
   Insn 838: point = 605
   Insn 280: point = 606
   Insn 837: point = 607
   Insn 279: point = 608
   Insn 278: point = 609
   Insn 277: point = 611
   Insn 276: point = 613
   Insn 836: point = 614
	Hard reg 1 is preferable by r570 with profit 1
   Insn 275: point = 616
   Insn 835: point = 616
	Hard reg 1 is preferable by r570 with profit 1
	Hard reg 0 is preferable by r570 with profit 1
   Insn 274: point = 618
   Insn 273: point = 620
  BB 17
   Insn 271: point = 621
   Insn 270: point = 621
   Insn 268: point = 622
   Insn 267: point = 624
  BB 15
   Insn 769: point = 625
   Insn 252: point = 625
   Insn 251: point = 625
   Insn 250: point = 626
   Insn 832: point = 626
   Insn 249: point = 627
   Insn 831: point = 628
   Insn 248: point = 629
   Insn 830: point = 630
   Insn 247: point = 631
   Insn 246: point = 632
   Insn 245: point = 634
   Insn 244: point = 636
   Insn 829: point = 637
	Hard reg 1 is preferable by r565 with profit 1
   Insn 243: point = 639
   Insn 828: point = 639
	Hard reg 1 is preferable by r565 with profit 1
	Hard reg 0 is preferable by r565 with profit 1
   Insn 242: point = 641
   Insn 241: point = 643
  BB 14
   Insn 239: point = 644
   Insn 238: point = 644
   Insn 236: point = 645
   Insn 235: point = 647
  BB 12
   Insn 767: point = 648
   Insn 220: point = 648
   Insn 219: point = 648
   Insn 218: point = 649
   Insn 825: point = 649
   Insn 217: point = 650
   Insn 824: point = 651
   Insn 216: point = 652
   Insn 215: point = 653
   Insn 214: point = 655
   Insn 213: point = 657
   Insn 823: point = 658
	Hard reg 1 is preferable by r561 with profit 1
   Insn 212: point = 660
   Insn 822: point = 660
	Hard reg 1 is preferable by r561 with profit 1
	Hard reg 0 is preferable by r561 with profit 1
   Insn 211: point = 662
   Insn 210: point = 664
  BB 11
   Insn 208: point = 665
   Insn 207: point = 665
   Insn 205: point = 666
   Insn 204: point = 668
  BB 9
   Insn 765: point = 669
   Insn 189: point = 669
   Insn 188: point = 669
   Insn 819: point = 670
   Insn 187: point = 671
   Insn 818: point = 672
   Insn 186: point = 673
   Insn 185: point = 674
   Insn 184: point = 676
   Insn 183: point = 678
   Insn 817: point = 679
	Hard reg 1 is preferable by r557 with profit 1
   Insn 182: point = 681
   Insn 816: point = 681
	Hard reg 1 is preferable by r557 with profit 1
	Hard reg 0 is preferable by r557 with profit 1
   Insn 181: point = 683
   Insn 180: point = 685
  BB 8
   Insn 178: point = 686
   Insn 177: point = 686
   Insn 175: point = 687
   Insn 174: point = 689
  BB 6
   Insn 763: point = 690
   Insn 159: point = 690
  BB 5
   Insn 157: point = 690
   Insn 156: point = 690
   Insn 154: point = 691
   Insn 153: point = 693
  BB 3
   Insn 761: point = 694
   Insn 138: point = 694
   Insn 137: point = 694
   Insn 136: point = 695
   Insn 135: point = 697
   Insn 811: point = 698
	Hard reg 1 is preferable by r554 with profit 1
   Insn 134: point = 700
   Insn 810: point = 700
	Hard reg 1 is preferable by r554 with profit 1
	Hard reg 0 is preferable by r554 with profit 1
   Insn 133: point = 702
   Insn 132: point = 704
   Insn 131: point = 705
   Insn 130: point = 706
   Insn 129: point = 707
   Insn 128: point = 709
   Insn 809: point = 710
	Hard reg 1 is preferable by r553 with profit 1
   Insn 127: point = 712
   Insn 808: point = 712
	Hard reg 1 is preferable by r553 with profit 1
	Hard reg 0 is preferable by r553 with profit 1
   Insn 126: point = 714
   Insn 125: point = 716
   Insn 124: point = 717
   Insn 123: point = 718
   Insn 122: point = 719
   Insn 121: point = 721
   Insn 807: point = 722
	Hard reg 1 is preferable by r552 with profit 1
   Insn 120: point = 724
   Insn 806: point = 724
	Hard reg 1 is preferable by r552 with profit 1
	Hard reg 0 is preferable by r552 with profit 1
   Insn 119: point = 726
   Insn 118: point = 728
   Insn 117: point = 729
   Insn 116: point = 730
   Insn 115: point = 731
   Insn 114: point = 733
   Insn 805: point = 734
	Hard reg 1 is preferable by r551 with profit 1
   Insn 113: point = 736
   Insn 804: point = 736
	Hard reg 1 is preferable by r551 with profit 1
	Hard reg 0 is preferable by r551 with profit 1
   Insn 112: point = 738
   Insn 111: point = 740
   Insn 110: point = 741
   Insn 109: point = 742
   Insn 108: point = 743
   Insn 107: point = 745
   Insn 803: point = 746
	Hard reg 1 is preferable by r550 with profit 1
   Insn 106: point = 748
   Insn 802: point = 748
	Hard reg 1 is preferable by r550 with profit 1
	Hard reg 0 is preferable by r550 with profit 1
   Insn 105: point = 750
   Insn 104: point = 752
   Insn 103: point = 753
   Insn 102: point = 754
   Insn 101: point = 755
   Insn 100: point = 757
   Insn 801: point = 758
	Hard reg 1 is preferable by r549 with profit 1
   Insn 99: point = 760
   Insn 800: point = 760
	Hard reg 1 is preferable by r549 with profit 1
	Hard reg 0 is preferable by r549 with profit 1
   Insn 98: point = 762
   Insn 97: point = 764
   Insn 96: point = 765
   Insn 95: point = 766
   Insn 94: point = 767
   Insn 93: point = 769
   Insn 799: point = 770
	Hard reg 1 is preferable by r548 with profit 1
   Insn 92: point = 772
   Insn 798: point = 772
	Hard reg 1 is preferable by r548 with profit 1
	Hard reg 0 is preferable by r548 with profit 1
   Insn 91: point = 774
   Insn 90: point = 776
   Insn 89: point = 777
   Insn 88: point = 778
   Insn 87: point = 779
   Insn 86: point = 781
   Insn 797: point = 782
	Hard reg 1 is preferable by r547 with profit 1
   Insn 85: point = 784
   Insn 796: point = 784
	Hard reg 1 is preferable by r547 with profit 1
	Hard reg 0 is preferable by r547 with profit 1
   Insn 84: point = 786
   Insn 83: point = 788
   Insn 82: point = 789
   Insn 81: point = 790
   Insn 80: point = 791
   Insn 79: point = 793
   Insn 795: point = 794
	Hard reg 1 is preferable by r546 with profit 1
   Insn 78: point = 796
   Insn 794: point = 796
	Hard reg 1 is preferable by r546 with profit 1
	Hard reg 0 is preferable by r546 with profit 1
   Insn 77: point = 798
   Insn 76: point = 800
   Insn 75: point = 801
   Insn 74: point = 802
   Insn 73: point = 803
   Insn 72: point = 805
   Insn 793: point = 806
	Hard reg 1 is preferable by r545 with profit 1
   Insn 71: point = 808
   Insn 792: point = 808
	Hard reg 1 is preferable by r545 with profit 1
	Hard reg 0 is preferable by r545 with profit 1
   Insn 70: point = 810
   Insn 69: point = 812
   Insn 68: point = 813
   Insn 67: point = 814
   Insn 66: point = 815
   Insn 65: point = 817
   Insn 791: point = 818
	Hard reg 1 is preferable by r544 with profit 1
   Insn 64: point = 820
   Insn 790: point = 820
	Hard reg 1 is preferable by r544 with profit 1
	Hard reg 0 is preferable by r544 with profit 1
   Insn 63: point = 822
   Insn 62: point = 824
   Insn 61: point = 825
   Insn 60: point = 826
   Insn 59: point = 827
   Insn 58: point = 829
   Insn 789: point = 830
	Hard reg 1 is preferable by r543 with profit 1
   Insn 57: point = 832
   Insn 788: point = 832
	Hard reg 1 is preferable by r543 with profit 1
	Hard reg 0 is preferable by r543 with profit 1
   Insn 56: point = 834
   Insn 55: point = 836
   Insn 54: point = 837
   Insn 53: point = 838
   Insn 52: point = 839
   Insn 51: point = 841
   Insn 787: point = 842
	Hard reg 1 is preferable by r542 with profit 1
   Insn 50: point = 844
   Insn 786: point = 844
	Hard reg 1 is preferable by r542 with profit 1
	Hard reg 0 is preferable by r542 with profit 1
   Insn 49: point = 846
   Insn 48: point = 848
   Insn 47: point = 849
   Insn 46: point = 850
   Insn 45: point = 851
   Insn 44: point = 853
   Insn 785: point = 854
	Hard reg 1 is preferable by r541 with profit 1
   Insn 43: point = 856
   Insn 784: point = 856
	Hard reg 1 is preferable by r541 with profit 1
	Hard reg 0 is preferable by r541 with profit 1
   Insn 42: point = 858
   Insn 41: point = 860
   Insn 40: point = 861
   Insn 39: point = 862
   Insn 38: point = 864
   Insn 783: point = 865
	Hard reg 1 is preferable by r540 with profit 1
   Insn 37: point = 867
   Insn 782: point = 867
	Hard reg 1 is preferable by r540 with profit 1
	Hard reg 0 is preferable by r540 with profit 1
   Insn 36: point = 869
   Insn 35: point = 871
   Insn 34: point = 872
   Insn 33: point = 873
   Insn 32: point = 875
   Insn 781: point = 876
	Hard reg 1 is preferable by r539 with profit 1
   Insn 31: point = 878
   Insn 780: point = 878
	Hard reg 1 is preferable by r539 with profit 1
	Hard reg 0 is preferable by r539 with profit 1
   Insn 30: point = 880
   Insn 29: point = 882
   Insn 28: point = 883
   Insn 27: point = 884
   Insn 26: point = 885
   Insn 25: point = 887
   Insn 779: point = 888
	Hard reg 1 is preferable by r538 with profit 1
   Insn 24: point = 890
   Insn 778: point = 890
	Hard reg 1 is preferable by r538 with profit 1
	Hard reg 0 is preferable by r538 with profit 1
   Insn 23: point = 892
   Insn 22: point = 894
   Insn 21: point = 895
   Insn 20: point = 896
   Insn 19: point = 897
   Insn 18: point = 899
   Insn 777: point = 900
	Hard reg 1 is preferable by r537 with profit 1
   Insn 17: point = 902
   Insn 776: point = 902
	Hard reg 1 is preferable by r537 with profit 1
	Hard reg 0 is preferable by r537 with profit 1
   Insn 16: point = 904
   Insn 15: point = 906
  BB 4
   Insn 150: point = 907
   Insn 149: point = 907
   Insn 148: point = 908
   Insn 147: point = 910
   Insn 146: point = 911
   Insn 145: point = 913
   Insn 813: point = 914
	Hard reg 1 is preferable by r555 with profit 1
   Insn 144: point = 916
   Insn 812: point = 916
	Hard reg 1 is preferable by r555 with profit 1
	Hard reg 0 is preferable by r555 with profit 1
   Insn 143: point = 918
   Insn 142: point = 920
  BB 7
   Insn 171: point = 921
   Insn 170: point = 921
   Insn 169: point = 922
   Insn 168: point = 924
   Insn 167: point = 925
   Insn 166: point = 927
   Insn 815: point = 928
	Hard reg 1 is preferable by r556 with profit 1
   Insn 165: point = 930
   Insn 814: point = 930
	Hard reg 1 is preferable by r556 with profit 1
	Hard reg 0 is preferable by r556 with profit 1
   Insn 164: point = 932
   Insn 163: point = 934
  BB 10
   Insn 201: point = 935
   Insn 200: point = 935
   Insn 199: point = 936
   Insn 198: point = 938
   Insn 197: point = 939
   Insn 196: point = 941
   Insn 821: point = 942
	Hard reg 1 is preferable by r560 with profit 1
   Insn 195: point = 944
   Insn 820: point = 944
	Hard reg 1 is preferable by r560 with profit 1
	Hard reg 0 is preferable by r560 with profit 1
   Insn 194: point = 946
   Insn 193: point = 948
  BB 13
   Insn 232: point = 949
   Insn 231: point = 949
   Insn 230: point = 950
   Insn 229: point = 952
   Insn 228: point = 953
   Insn 227: point = 955
   Insn 827: point = 956
	Hard reg 1 is preferable by r564 with profit 1
   Insn 226: point = 958
   Insn 826: point = 958
	Hard reg 1 is preferable by r564 with profit 1
	Hard reg 0 is preferable by r564 with profit 1
   Insn 225: point = 960
   Insn 224: point = 962
  BB 16
   Insn 264: point = 963
   Insn 263: point = 963
   Insn 262: point = 964
   Insn 261: point = 966
   Insn 260: point = 967
   Insn 259: point = 969
   Insn 834: point = 970
	Hard reg 1 is preferable by r569 with profit 1
   Insn 258: point = 972
   Insn 833: point = 972
	Hard reg 1 is preferable by r569 with profit 1
	Hard reg 0 is preferable by r569 with profit 1
   Insn 257: point = 974
   Insn 256: point = 976
  BB 19
   Insn 295: point = 977
   Insn 294: point = 977
   Insn 293: point = 978
   Insn 292: point = 980
   Insn 291: point = 981
   Insn 290: point = 983
   Insn 841: point = 984
	Hard reg 1 is preferable by r574 with profit 1
   Insn 289: point = 986
   Insn 840: point = 986
	Hard reg 1 is preferable by r574 with profit 1
	Hard reg 0 is preferable by r574 with profit 1
   Insn 288: point = 988
   Insn 287: point = 990
  BB 22
   Insn 700: point = 991
   Insn 699: point = 991
   Insn 698: point = 992
   Insn 697: point = 994
   Insn 696: point = 995
   Insn 695: point = 997
   Insn 893: point = 998
	Hard reg 1 is preferable by r602 with profit 1
   Insn 694: point = 1000
   Insn 892: point = 1000
	Hard reg 1 is preferable by r602 with profit 1
	Hard reg 0 is preferable by r602 with profit 1
   Insn 693: point = 1002
   Insn 692: point = 1004
 r83: [903..904]
 r84: [898..900]
 r85: [895..897]
 r86: [891..892]
 r87: [886..888]
 r88: [883..885]
 r89: [879..880]
 r90: [874..876]
 r91: [872..873]
 r92: [868..869]
 r93: [863..865]
 r94: [861..862]
 r95: [857..858]
 r96: [852..854]
 r97: [849..851]
 r98: [845..846]
 r99: [840..842]
 r100: [837..839]
 r101: [833..834]
 r102: [828..830]
 r103: [825..827]
 r104: [821..822]
 r105: [816..818]
 r106: [813..815]
 r107: [809..810]
 r108: [804..806]
 r109: [801..803]
 r110: [797..798]
 r111: [792..794]
 r112: [789..791]
 r113: [785..786]
 r114: [780..782]
 r115: [777..779]
 r116: [773..774]
 r117: [768..770]
 r118: [765..767]
 r119: [761..762]
 r120: [756..758]
 r121: [753..755]
 r122: [749..750]
 r123: [744..746]
 r124: [741..743]
 r125: [737..738]
 r126: [732..734]
 r127: [729..731]
 r128: [725..726]
 r129: [720..722]
 r130: [717..719]
 r131: [713..714]
 r132: [708..710]
 r133: [705..707]
 r134: [701..702]
 r135: [696..698]
 r136: [694..695]
 r137: [690..691]
 r138: [917..918]
 r139: [912..914]
 r140: [907..911]
 r141: [686..687]
 r142: [931..932]
 r143: [926..928]
 r144: [921..925]
 r145: [682..683]
 r146: [677..679]
 r147: [675..676]
 r148: [669..674]
 r149: [665..666]
 r150: [945..946]
 r151: [940..942]
 r152: [935..939]
 r153: [661..662]
 r154: [656..658]
 r155: [654..655]
 r156: [648..653]
 r157: [644..645]
 r158: [959..960]
 r159: [954..956]
 r160: [949..953]
 r161: [640..641]
 r162: [635..637]
 r163: [633..634]
 r164: [625..632]
 r165: [621..622]
 r166: [973..974]
 r167: [968..970]
 r168: [963..967]
 r169: [617..618]
 r170: [612..614]
 r171: [610..611]
 r172: [602..609]
 r173: [598..599]
 r174: [987..988]
 r175: [982..984]
 r176: [977..981]
 r177: [594..595]
 r178: [589..591]
 r179: [587..588]
 r180: [577..586]
 r181: [572..574]
 r182: [564..566]
 r183: [562..563]
 r184: [557..559]
 r185: [549..551]
 r186: [546..548]
 r187: [541..543]
 r188: [533..535]
 r189: [531..532]
 r190: [526..528]
 r191: [518..520]
 r192: [516..517]
 r193: [511..513]
 r194: [503..505]
 r195: [501..502]
 r196: [496..498]
 r197: [488..490]
 r198: [486..487]
 r199: [481..483]
 r200: [473..475]
 r201: [471..472]
 r202: [466..468]
 r203: [458..460]
 r204: [455..457]
 r205: [450..452]
 r206: [442..444]
 r207: [440..441]
 r208: [435..437]
 r209: [427..429]
 r210: [425..426]
 r211: [420..422]
 r212: [412..414]
 r213: [410..411]
 r214: [405..407]
 r215: [397..399]
 r216: [395..396]
 r217: [390..392]
 r218: [382..384]
 r219: [379..381]
 r220: [374..376]
 r221: [366..368]
 r222: [364..365]
 r223: [359..361]
 r224: [351..353]
 r225: [349..350]
 r226: [344..346]
 r227: [336..338]
 r228: [334..335]
 r229: [329..331]
 r230: [321..323]
 r231: [319..320]
 r232: [314..316]
 r233: [306..308]
 r234: [304..305]
 r235: [300..301]
 r236: [295..297]
 r237: [293..294]
 r238: [289..290]
 r239: [284..286]
 r240: [282..283]
 r241: [278..279]
 r242: [273..275]
 r243: [271..272]
 r244: [267..268]
 r245: [262..264]
 r246: [260..261]
 r247: [256..257]
 r248: [251..253]
 r249: [249..250]
 r250: [245..246]
 r251: [240..242]
 r252: [238..239]
 r253: [234..235]
 r254: [229..231]
 r255: [227..228]
 r256: [223..224]
 r257: [218..220]
 r258: [216..217]
 r259: [212..213]
 r260: [207..209]
 r261: [205..206]
 r262: [201..202]
 r263: [196..198]
 r264: [194..195]
 r265: [190..191]
 r266: [185..187]
 r267: [183..184]
 r268: [179..180]
 r269: [174..176]
 r270: [172..173]
 r271: [168..169]
 r272: [163..165]
 r273: [161..162]
 r274: [157..158]
 r275: [152..154]
 r276: [150..151]
 r277: [146..147]
 r278: [141..143]
 r279: [138..140]
 r280: [134..135]
 r281: [129..131]
 r282: [126..128]
 r283: [122..123]
 r284: [117..119]
 r285: [114..116]
 r286: [110..111]
 r287: [105..107]
 r288: [102..104]
 r289: [98..99]
 r290: [93..95]
 r291: [91..92]
 r292: [87..88]
 r293: [82..84]
 r294: [80..81]
 r295: [76..77]
 r296: [71..73]
 r297: [69..70]
 r298: [65..66]
 r299: [60..62]
 r300: [58..59]
 r301: [54..55]
 r302: [1001..1002]
 r303: [996..998]
 r304: [991..995]
 r305: [48..53]
 r306: [40..45]
 r307: [32..37]
 r308: [24..29]
 r309: [16..21]
 r310: [8..13]
 r311: [0..5]
 r312: [905..906]
 r313: [898..899]
 r314: [895..896]
 r315: [893..894]
 r316: [886..887]
 r317: [883..884]
 r318: [881..882]
 r319: [874..875]
 r320: [870..871]
 r321: [863..864]
 r322: [859..860]
 r323: [852..853]
 r324: [849..850]
 r325: [847..848]
 r326: [840..841]
 r327: [837..838]
 r328: [835..836]
 r329: [828..829]
 r330: [825..826]
 r331: [823..824]
 r332: [816..817]
 r333: [813..814]
 r334: [811..812]
 r335: [804..805]
 r336: [801..802]
 r337: [799..800]
 r338: [792..793]
 r339: [789..790]
 r340: [787..788]
 r341: [780..781]
 r342: [777..778]
 r343: [775..776]
 r344: [768..769]
 r345: [765..766]
 r346: [763..764]
 r347: [756..757]
 r348: [753..754]
 r349: [751..752]
 r350: [744..745]
 r351: [741..742]
 r352: [739..740]
 r353: [732..733]
 r354: [729..730]
 r355: [727..728]
 r356: [720..721]
 r357: [717..718]
 r358: [715..716]
 r359: [708..709]
 r360: [705..706]
 r361: [703..704]
 r362: [696..697]
 r363: [919..920]
 r364: [912..913]
 r365: [907..908]
 r366: [909..910]
 r367: [692..693]
 r368: [933..934]
 r369: [926..927]
 r370: [921..922]
 r371: [923..924]
 r372: [688..689]
 r373: [684..685]
 r374: [677..678]
 r375: [947..948]
 r376: [940..941]
 r377: [935..936]
 r378: [937..938]
 r379: [667..668]
 r380: [663..664]
 r381: [656..657]
 r382: [961..962]
 r383: [954..955]
 r384: [949..950]
 r385: [951..952]
 r386: [646..647]
 r387: [642..643]
 r388: [635..636]
 r389: [975..976]
 r390: [968..969]
 r391: [963..964]
 r392: [965..966]
 r393: [623..624]
 r394: [619..620]
 r395: [612..613]
 r396: [989..990]
 r397: [982..983]
 r398: [977..978]
 r399: [979..980]
 r400: [600..601]
 r401: [596..597]
 r402: [589..590]
 r403: [575..576]
 r404: [571..573] [567..568]
 r405: [569..570]
 r406: [564..565]
 r407: [560..561]
 r408: [556..558] [552..553]
 r409: [554..555]
 r410: [549..550]
 r411: [546..547]
 r412: [544..545]
 r413: [540..542] [536..537]
 r414: [538..539]
 r415: [533..534]
 r416: [529..530]
 r417: [525..527] [521..522]
 r418: [523..524]
 r419: [518..519]
 r420: [514..515]
 r421: [510..512] [506..507]
 r422: [508..509]
 r423: [503..504]
 r424: [499..500]
 r425: [495..497] [491..492]
 r426: [493..494]
 r427: [488..489]
 r428: [484..485]
 r429: [480..482] [476..477]
 r430: [478..479]
 r431: [473..474]
 r432: [469..470]
 r433: [465..467] [461..462]
 r434: [463..464]
 r435: [458..459]
 r436: [455..456]
 r437: [453..454]
 r438: [449..451] [445..446]
 r439: [447..448]
 r440: [442..443]
 r441: [438..439]
 r442: [434..436] [430..431]
 r443: [432..433]
 r444: [427..428]
 r445: [423..424]
 r446: [419..421] [415..416]
 r447: [417..418]
 r448: [412..413]
 r449: [408..409]
 r450: [404..406] [400..401]
 r451: [402..403]
 r452: [397..398]
 r453: [393..394]
 r454: [389..391] [385..386]
 r455: [387..388]
 r456: [382..383]
 r457: [379..380]
 r458: [377..378]
 r459: [373..375] [369..370]
 r460: [371..372]
 r461: [366..367]
 r462: [362..363]
 r463: [358..360] [354..355]
 r464: [356..357]
 r465: [351..352]
 r466: [347..348]
 r467: [343..345] [339..340]
 r468: [341..342]
 r469: [336..337]
 r470: [332..333]
 r471: [328..330] [324..325]
 r472: [326..327]
 r473: [321..322]
 r474: [317..318]
 r475: [313..315] [309..310]
 r476: [311..312]
 r477: [306..307]
 r478: [302..303]
 r479: [295..296]
 r480: [291..292]
 r481: [284..285]
 r482: [280..281]
 r483: [273..274]
 r484: [269..270]
 r485: [262..263]
 r486: [258..259]
 r487: [251..252]
 r488: [247..248]
 r489: [240..241]
 r490: [236..237]
 r491: [229..230]
 r492: [225..226]
 r493: [218..219]
 r494: [214..215]
 r495: [207..208]
 r496: [203..204]
 r497: [196..197]
 r498: [192..193]
 r499: [185..186]
 r500: [181..182]
 r501: [174..175]
 r502: [170..171]
 r503: [163..164]
 r504: [159..160]
 r505: [152..153]
 r506: [148..149]
 r507: [141..142]
 r508: [138..139]
 r509: [136..137]
 r510: [129..130]
 r511: [126..127]
 r512: [124..125]
 r513: [117..118]
 r514: [114..115]
 r515: [112..113]
 r516: [105..106]
 r517: [102..103]
 r518: [100..101]
 r519: [93..94]
 r520: [89..90]
 r521: [82..83]
 r522: [78..79]
 r523: [71..72]
 r524: [67..68]
 r525: [60..61]
 r526: [1003..1004]
 r527: [996..997]
 r528: [991..992]
 r529: [993..994]
 r530: [56..57]
 r531: [46..47]
 r532: [38..39]
 r533: [30..31]
 r534: [22..23]
 r535: [14..15]
 r536: [6..7]
 r537: [901..902]
 r538: [889..890]
 r539: [877..878]
 r540: [866..867]
 r541: [855..856]
 r542: [843..844]
 r543: [831..832]
 r544: [819..820]
 r545: [807..808]
 r546: [795..796]
 r547: [783..784]
 r548: [771..772]
 r549: [759..760]
 r550: [747..748]
 r551: [735..736]
 r552: [723..724]
 r553: [711..712]
 r554: [699..700]
 r555: [915..916]
 r556: [929..930]
 r557: [680..681]
 r558: [672..673]
 r559: [670..671]
 r560: [943..944]
 r561: [659..660]
 r562: [651..652]
 r563: [649..650]
 r564: [957..958]
 r565: [638..639]
 r566: [630..631]
 r567: [628..629]
 r568: [626..627]
 r569: [971..972]
 r570: [615..616]
 r571: [607..608]
 r572: [605..606]
 r573: [603..604]
 r574: [985..986]
 r575: [592..593]
 r576: [584..585]
 r577: [582..583]
 r578: [580..581]
 r579: [578..579]
 r580: [298..299]
 r581: [287..288]
 r582: [276..277]
 r583: [265..266]
 r584: [254..255]
 r585: [243..244]
 r586: [232..233]
 r587: [221..222]
 r588: [210..211]
 r589: [199..200]
 r590: [188..189]
 r591: [177..178]
 r592: [166..167]
 r593: [155..156]
 r594: [144..145]
 r595: [132..133]
 r596: [120..121]
 r597: [108..109]
 r598: [96..97]
 r599: [85..86]
 r600: [74..75]
 r601: [63..64]
 r602: [999..1000]
 r603: [51..52]
 r604: [49..50]
 r605: [43..44]
 r606: [41..42]
 r607: [35..36]
 r608: [33..34]
 r609: [27..28]
 r610: [25..26]
 r611: [19..20]
 r612: [17..18]
 r613: [11..12]
 r614: [9..10]
 r615: [3..4]
 r616: [1..2]
Compressing live ranges: from 1005 to 846 - 84%
Ranges after the compression:
 r83: [758..759]
 r84: [754..755]
 r85: [752..753]
 r86: [748..749]
 r87: [744..745]
 r88: [742..743]
 r89: [738..739]
 r90: [734..735]
 r91: [732..733]
 r92: [728..729]
 r93: [724..725]
 r94: [722..723]
 r95: [718..719]
 r96: [714..715]
 r97: [712..713]
 r98: [708..709]
 r99: [704..705]
 r100: [702..703]
 r101: [698..699]
 r102: [694..695]
 r103: [692..693]
 r104: [688..689]
 r105: [684..685]
 r106: [682..683]
 r107: [678..679]
 r108: [674..675]
 r109: [672..673]
 r110: [668..669]
 r111: [664..665]
 r112: [662..663]
 r113: [658..659]
 r114: [654..655]
 r115: [652..653]
 r116: [648..649]
 r117: [644..645]
 r118: [642..643]
 r119: [638..639]
 r120: [634..635]
 r121: [632..633]
 r122: [628..629]
 r123: [624..625]
 r124: [622..623]
 r125: [618..619]
 r126: [614..615]
 r127: [612..613]
 r128: [608..609]
 r129: [604..605]
 r130: [602..603]
 r131: [598..599]
 r132: [594..595]
 r133: [592..593]
 r134: [588..589]
 r135: [584..585]
 r136: [582..583]
 r137: [578..579]
 r138: [770..771]
 r139: [766..767]
 r140: [762..765]
 r141: [574..575]
 r142: [782..783]
 r143: [778..779]
 r144: [774..777]
 r145: [570..571]
 r146: [566..567]
 r147: [564..565]
 r148: [560..563]
 r149: [556..557]
 r150: [794..795]
 r151: [790..791]
 r152: [786..789]
 r153: [552..553]
 r154: [548..549]
 r155: [546..547]
 r156: [542..545]
 r157: [538..539]
 r158: [806..807]
 r159: [802..803]
 r160: [798..801]
 r161: [534..535]
 r162: [530..531]
 r163: [528..529]
 r164: [522..527]
 r165: [518..519]
 r166: [818..819]
 r167: [814..815]
 r168: [810..813]
 r169: [514..515]
 r170: [510..511]
 r171: [508..509]
 r172: [502..507]
 r173: [498..499]
 r174: [830..831]
 r175: [826..827]
 r176: [822..825]
 r177: [494..495]
 r178: [490..491]
 r179: [488..489]
 r180: [480..487]
 r181: [476..477]
 r182: [470..471]
 r183: [468..469]
 r184: [464..465]
 r185: [458..459]
 r186: [456..457]
 r187: [452..453]
 r188: [446..447]
 r189: [444..445]
 r190: [440..441]
 r191: [434..435]
 r192: [432..433]
 r193: [428..429]
 r194: [422..423]
 r195: [420..421]
 r196: [416..417]
 r197: [410..411]
 r198: [408..409]
 r199: [404..405]
 r200: [398..399]
 r201: [396..397]
 r202: [392..393]
 r203: [386..387]
 r204: [384..385]
 r205: [380..381]
 r206: [374..375]
 r207: [372..373]
 r208: [368..369]
 r209: [362..363]
 r210: [360..361]
 r211: [356..357]
 r212: [350..351]
 r213: [348..349]
 r214: [344..345]
 r215: [338..339]
 r216: [336..337]
 r217: [332..333]
 r218: [326..327]
 r219: [324..325]
 r220: [320..321]
 r221: [314..315]
 r222: [312..313]
 r223: [308..309]
 r224: [302..303]
 r225: [300..301]
 r226: [296..297]
 r227: [290..291]
 r228: [288..289]
 r229: [284..285]
 r230: [278..279]
 r231: [276..277]
 r232: [272..273]
 r233: [266..267]
 r234: [264..265]
 r235: [260..261]
 r236: [256..257]
 r237: [254..255]
 r238: [250..251]
 r239: [246..247]
 r240: [244..245]
 r241: [240..241]
 r242: [236..237]
 r243: [234..235]
 r244: [230..231]
 r245: [226..227]
 r246: [224..225]
 r247: [220..221]
 r248: [216..217]
 r249: [214..215]
 r250: [210..211]
 r251: [206..207]
 r252: [204..205]
 r253: [200..201]
 r254: [196..197]
 r255: [194..195]
 r256: [190..191]
 r257: [186..187]
 r258: [184..185]
 r259: [180..181]
 r260: [176..177]
 r261: [174..175]
 r262: [170..171]
 r263: [166..167]
 r264: [164..165]
 r265: [160..161]
 r266: [156..157]
 r267: [154..155]
 r268: [150..151]
 r269: [146..147]
 r270: [144..145]
 r271: [140..141]
 r272: [136..137]
 r273: [134..135]
 r274: [130..131]
 r275: [126..127]
 r276: [124..125]
 r277: [120..121]
 r278: [116..117]
 r279: [114..115]
 r280: [110..111]
 r281: [106..107]
 r282: [104..105]
 r283: [100..101]
 r284: [96..97]
 r285: [94..95]
 r286: [90..91]
 r287: [86..87]
 r288: [84..85]
 r289: [80..81]
 r290: [76..77]
 r291: [74..75]
 r292: [70..71]
 r293: [66..67]
 r294: [64..65]
 r295: [60..61]
 r296: [56..57]
 r297: [54..55]
 r298: [50..51]
 r299: [46..47]
 r300: [44..45]
 r301: [40..41]
 r302: [842..843]
 r303: [838..839]
 r304: [834..837]
 r305: [36..39]
 r306: [30..33]
 r307: [24..27]
 r308: [18..21]
 r309: [12..15]
 r310: [6..9]
 r311: [0..3]
 r312: [760..761]
 r313: [754..755]
 r314: [752..753]
 r315: [750..751]
 r316: [744..745]
 r317: [742..743]
 r318: [740..741]
 r319: [734..735]
 r320: [730..731]
 r321: [724..725]
 r322: [720..721]
 r323: [714..715]
 r324: [712..713]
 r325: [710..711]
 r326: [704..705]
 r327: [702..703]
 r328: [700..701]
 r329: [694..695]
 r330: [692..693]
 r331: [690..691]
 r332: [684..685]
 r333: [682..683]
 r334: [680..681]
 r335: [674..675]
 r336: [672..673]
 r337: [670..671]
 r338: [664..665]
 r339: [662..663]
 r340: [660..661]
 r341: [654..655]
 r342: [652..653]
 r343: [650..651]
 r344: [644..645]
 r345: [642..643]
 r346: [640..641]
 r347: [634..635]
 r348: [632..633]
 r349: [630..631]
 r350: [624..625]
 r351: [622..623]
 r352: [620..621]
 r353: [614..615]
 r354: [612..613]
 r355: [610..611]
 r356: [604..605]
 r357: [602..603]
 r358: [600..601]
 r359: [594..595]
 r360: [592..593]
 r361: [590..591]
 r362: [584..585]
 r363: [772..773]
 r364: [766..767]
 r365: [762..763]
 r366: [764..765]
 r367: [580..581]
 r368: [784..785]
 r369: [778..779]
 r370: [774..775]
 r371: [776..777]
 r372: [576..577]
 r373: [572..573]
 r374: [566..567]
 r375: [796..797]
 r376: [790..791]
 r377: [786..787]
 r378: [788..789]
 r379: [558..559]
 r380: [554..555]
 r381: [548..549]
 r382: [808..809]
 r383: [802..803]
 r384: [798..799]
 r385: [800..801]
 r386: [540..541]
 r387: [536..537]
 r388: [530..531]
 r389: [820..821]
 r390: [814..815]
 r391: [810..811]
 r392: [812..813]
 r393: [520..521]
 r394: [516..517]
 r395: [510..511]
 r396: [832..833]
 r397: [826..827]
 r398: [822..823]
 r399: [824..825]
 r400: [500..501]
 r401: [496..497]
 r402: [490..491]
 r403: [478..479]
 r404: [476..477] [472..473]
 r405: [474..475]
 r406: [470..471]
 r407: [466..467]
 r408: [464..465] [460..461]
 r409: [462..463]
 r410: [458..459]
 r411: [456..457]
 r412: [454..455]
 r413: [452..453] [448..449]
 r414: [450..451]
 r415: [446..447]
 r416: [442..443]
 r417: [440..441] [436..437]
 r418: [438..439]
 r419: [434..435]
 r420: [430..431]
 r421: [428..429] [424..425]
 r422: [426..427]
 r423: [422..423]
 r424: [418..419]
 r425: [416..417] [412..413]
 r426: [414..415]
 r427: [410..411]
 r428: [406..407]
 r429: [404..405] [400..401]
 r430: [402..403]
 r431: [398..399]
 r432: [394..395]
 r433: [392..393] [388..389]
 r434: [390..391]
 r435: [386..387]
 r436: [384..385]
 r437: [382..383]
 r438: [380..381] [376..377]
 r439: [378..379]
 r440: [374..375]
 r441: [370..371]
 r442: [368..369] [364..365]
 r443: [366..367]
 r444: [362..363]
 r445: [358..359]
 r446: [356..357] [352..353]
 r447: [354..355]
 r448: [350..351]
 r449: [346..347]
 r450: [344..345] [340..341]
 r451: [342..343]
 r452: [338..339]
 r453: [334..335]
 r454: [332..333] [328..329]
 r455: [330..331]
 r456: [326..327]
 r457: [324..325]
 r458: [322..323]
 r459: [320..321] [316..317]
 r460: [318..319]
 r461: [314..315]
 r462: [310..311]
 r463: [308..309] [304..305]
 r464: [306..307]
 r465: [302..303]
 r466: [298..299]
 r467: [296..297] [292..293]
 r468: [294..295]
 r469: [290..291]
 r470: [286..287]
 r471: [284..285] [280..281]
 r472: [282..283]
 r473: [278..279]
 r474: [274..275]
 r475: [272..273] [268..269]
 r476: [270..271]
 r477: [266..267]
 r478: [262..263]
 r479: [256..257]
 r480: [252..253]
 r481: [246..247]
 r482: [242..243]
 r483: [236..237]
 r484: [232..233]
 r485: [226..227]
 r486: [222..223]
 r487: [216..217]
 r488: [212..213]
 r489: [206..207]
 r490: [202..203]
 r491: [196..197]
 r492: [192..193]
 r493: [186..187]
 r494: [182..183]
 r495: [176..177]
 r496: [172..173]
 r497: [166..167]
 r498: [162..163]
 r499: [156..157]
 r500: [152..153]
 r501: [146..147]
 r502: [142..143]
 r503: [136..137]
 r504: [132..133]
 r505: [126..127]
 r506: [122..123]
 r507: [116..117]
 r508: [114..115]
 r509: [112..113]
 r510: [106..107]
 r511: [104..105]
 r512: [102..103]
 r513: [96..97]
 r514: [94..95]
 r515: [92..93]
 r516: [86..87]
 r517: [84..85]
 r518: [82..83]
 r519: [76..77]
 r520: [72..73]
 r521: [66..67]
 r522: [62..63]
 r523: [56..57]
 r524: [52..53]
 r525: [46..47]
 r526: [844..845]
 r527: [838..839]
 r528: [834..835]
 r529: [836..837]
 r530: [42..43]
 r531: [34..35]
 r532: [28..29]
 r533: [22..23]
 r534: [16..17]
 r535: [10..11]
 r536: [4..5]
 r537: [756..757]
 r538: [746..747]
 r539: [736..737]
 r540: [726..727]
 r541: [716..717]
 r542: [706..707]
 r543: [696..697]
 r544: [686..687]
 r545: [676..677]
 r546: [666..667]
 r547: [656..657]
 r548: [646..647]
 r549: [636..637]
 r550: [626..627]
 r551: [616..617]
 r552: [606..607]
 r553: [596..597]
 r554: [586..587]
 r555: [768..769]
 r556: [780..781]
 r557: [568..569]
 r558: [562..563]
 r559: [560..561]
 r560: [792..793]
 r561: [550..551]
 r562: [544..545]
 r563: [542..543]
 r564: [804..805]
 r565: [532..533]
 r566: [526..527]
 r567: [524..525]
 r568: [522..523]
 r569: [816..817]
 r570: [512..513]
 r571: [506..507]
 r572: [504..505]
 r573: [502..503]
 r574: [828..829]
 r575: [492..493]
 r576: [486..487]
 r577: [484..485]
 r578: [482..483]
 r579: [480..481]
 r580: [258..259]
 r581: [248..249]
 r582: [238..239]
 r583: [228..229]
 r584: [218..219]
 r585: [208..209]
 r586: [198..199]
 r587: [188..189]
 r588: [178..179]
 r589: [168..169]
 r590: [158..159]
 r591: [148..149]
 r592: [138..139]
 r593: [128..129]
 r594: [118..119]
 r595: [108..109]
 r596: [98..99]
 r597: [88..89]
 r598: [78..79]
 r599: [68..69]
 r600: [58..59]
 r601: [48..49]
 r602: [840..841]
 r603: [38..39]
 r604: [36..37]
 r605: [32..33]
 r606: [30..31]
 r607: [26..27]
 r608: [24..25]
 r609: [20..21]
 r610: [18..19]
 r611: [14..15]
 r612: [12..13]
 r613: [8..9]
 r614: [6..7]
 r615: [2..3]
 r616: [0..1]

********** Assignment #1: **********

	 Assigning to 537 (cl=GENERAL_REGS, orig=84, freq=3, tfirst=537, tfreq=3)...
	   Assign 0 to reload r537 (freq=3)
	 Assigning to 538 (cl=GENERAL_REGS, orig=87, freq=3, tfirst=538, tfreq=3)...
	   Assign 0 to reload r538 (freq=3)
	 Assigning to 539 (cl=GENERAL_REGS, orig=90, freq=3, tfirst=539, tfreq=3)...
	   Assign 0 to reload r539 (freq=3)
	 Assigning to 540 (cl=GENERAL_REGS, orig=93, freq=3, tfirst=540, tfreq=3)...
	   Assign 0 to reload r540 (freq=3)
	 Assigning to 541 (cl=GENERAL_REGS, orig=96, freq=3, tfirst=541, tfreq=3)...
	   Assign 0 to reload r541 (freq=3)
	 Assigning to 542 (cl=GENERAL_REGS, orig=99, freq=3, tfirst=542, tfreq=3)...
	   Assign 0 to reload r542 (freq=3)
	 Assigning to 543 (cl=GENERAL_REGS, orig=102, freq=3, tfirst=543, tfreq=3)...
	   Assign 0 to reload r543 (freq=3)
	 Assigning to 544 (cl=GENERAL_REGS, orig=105, freq=3, tfirst=544, tfreq=3)...
	   Assign 0 to reload r544 (freq=3)
	 Assigning to 545 (cl=GENERAL_REGS, orig=108, freq=3, tfirst=545, tfreq=3)...
	   Assign 0 to reload r545 (freq=3)
	 Assigning to 546 (cl=GENERAL_REGS, orig=111, freq=3, tfirst=546, tfreq=3)...
	   Assign 0 to reload r546 (freq=3)
	 Assigning to 547 (cl=GENERAL_REGS, orig=114, freq=3, tfirst=547, tfreq=3)...
	   Assign 0 to reload r547 (freq=3)
	 Assigning to 548 (cl=GENERAL_REGS, orig=117, freq=3, tfirst=548, tfreq=3)...
	   Assign 0 to reload r548 (freq=3)
	 Assigning to 549 (cl=GENERAL_REGS, orig=120, freq=3, tfirst=549, tfreq=3)...
	   Assign 0 to reload r549 (freq=3)
	 Assigning to 550 (cl=GENERAL_REGS, orig=123, freq=3, tfirst=550, tfreq=3)...
	   Assign 0 to reload r550 (freq=3)
	 Assigning to 551 (cl=GENERAL_REGS, orig=126, freq=3, tfirst=551, tfreq=3)...
	   Assign 0 to reload r551 (freq=3)
	 Assigning to 552 (cl=GENERAL_REGS, orig=129, freq=3, tfirst=552, tfreq=3)...
	   Assign 0 to reload r552 (freq=3)
	 Assigning to 553 (cl=GENERAL_REGS, orig=132, freq=3, tfirst=553, tfreq=3)...
	   Assign 0 to reload r553 (freq=3)
	 Assigning to 554 (cl=GENERAL_REGS, orig=135, freq=3, tfirst=554, tfreq=3)...
	   Assign 0 to reload r554 (freq=3)
	 Assigning to 555 (cl=GENERAL_REGS, orig=139, freq=3, tfirst=555, tfreq=3)...
	   Assign 0 to reload r555 (freq=3)
	 Assigning to 556 (cl=GENERAL_REGS, orig=143, freq=3, tfirst=556, tfreq=3)...
	   Assign 0 to reload r556 (freq=3)
	 Assigning to 557 (cl=GENERAL_REGS, orig=146, freq=3, tfirst=557, tfreq=3)...
	   Assign 0 to reload r557 (freq=3)
	 Assigning to 560 (cl=GENERAL_REGS, orig=151, freq=3, tfirst=560, tfreq=3)...
	   Assign 0 to reload r560 (freq=3)
	 Assigning to 561 (cl=GENERAL_REGS, orig=154, freq=3, tfirst=561, tfreq=3)...
	   Assign 0 to reload r561 (freq=3)
	 Assigning to 564 (cl=GENERAL_REGS, orig=159, freq=3, tfirst=564, tfreq=3)...
	   Assign 0 to reload r564 (freq=3)
	 Assigning to 565 (cl=GENERAL_REGS, orig=162, freq=3, tfirst=565, tfreq=3)...
	   Assign 0 to reload r565 (freq=3)
	 Assigning to 569 (cl=GENERAL_REGS, orig=167, freq=3, tfirst=569, tfreq=3)...
	   Assign 0 to reload r569 (freq=3)
	 Assigning to 570 (cl=GENERAL_REGS, orig=170, freq=3, tfirst=570, tfreq=3)...
	   Assign 0 to reload r570 (freq=3)
	 Assigning to 574 (cl=GENERAL_REGS, orig=175, freq=3, tfirst=574, tfreq=3)...
	   Assign 0 to reload r574 (freq=3)
	 Assigning to 575 (cl=GENERAL_REGS, orig=178, freq=3, tfirst=575, tfreq=3)...
	   Assign 0 to reload r575 (freq=3)
	 Assigning to 580 (cl=GENERAL_REGS, orig=236, freq=3, tfirst=580, tfreq=3)...
	   Assign 0 to reload r580 (freq=3)
	 Assigning to 581 (cl=GENERAL_REGS, orig=239, freq=3, tfirst=581, tfreq=3)...
	   Assign 0 to reload r581 (freq=3)
	 Assigning to 582 (cl=GENERAL_REGS, orig=242, freq=3, tfirst=582, tfreq=3)...
	   Assign 0 to reload r582 (freq=3)
	 Assigning to 583 (cl=GENERAL_REGS, orig=245, freq=3, tfirst=583, tfreq=3)...
	   Assign 0 to reload r583 (freq=3)
	 Assigning to 584 (cl=GENERAL_REGS, orig=248, freq=3, tfirst=584, tfreq=3)...
	   Assign 0 to reload r584 (freq=3)
	 Assigning to 585 (cl=GENERAL_REGS, orig=251, freq=3, tfirst=585, tfreq=3)...
	   Assign 0 to reload r585 (freq=3)
	 Assigning to 586 (cl=GENERAL_REGS, orig=254, freq=3, tfirst=586, tfreq=3)...
	   Assign 0 to reload r586 (freq=3)
	 Assigning to 587 (cl=GENERAL_REGS, orig=257, freq=3, tfirst=587, tfreq=3)...
	   Assign 0 to reload r587 (freq=3)
	 Assigning to 588 (cl=GENERAL_REGS, orig=260, freq=3, tfirst=588, tfreq=3)...
	   Assign 0 to reload r588 (freq=3)
	 Assigning to 589 (cl=GENERAL_REGS, orig=263, freq=3, tfirst=589, tfreq=3)...
	   Assign 0 to reload r589 (freq=3)
	 Assigning to 590 (cl=GENERAL_REGS, orig=266, freq=3, tfirst=590, tfreq=3)...
	   Assign 0 to reload r590 (freq=3)
	 Assigning to 591 (cl=GENERAL_REGS, orig=269, freq=3, tfirst=591, tfreq=3)...
	   Assign 0 to reload r591 (freq=3)
	 Assigning to 592 (cl=GENERAL_REGS, orig=272, freq=3, tfirst=592, tfreq=3)...
	   Assign 0 to reload r592 (freq=3)
	 Assigning to 593 (cl=GENERAL_REGS, orig=275, freq=3, tfirst=593, tfreq=3)...
	   Assign 0 to reload r593 (freq=3)
	 Assigning to 594 (cl=GENERAL_REGS, orig=278, freq=3, tfirst=594, tfreq=3)...
	   Assign 0 to reload r594 (freq=3)
	 Assigning to 595 (cl=GENERAL_REGS, orig=281, freq=3, tfirst=595, tfreq=3)...
	   Assign 0 to reload r595 (freq=3)
	 Assigning to 596 (cl=GENERAL_REGS, orig=284, freq=3, tfirst=596, tfreq=3)...
	   Assign 0 to reload r596 (freq=3)
	 Assigning to 597 (cl=GENERAL_REGS, orig=287, freq=3, tfirst=597, tfreq=3)...
	   Assign 0 to reload r597 (freq=3)
	 Assigning to 598 (cl=GENERAL_REGS, orig=290, freq=3, tfirst=598, tfreq=3)...
	   Assign 0 to reload r598 (freq=3)
	 Assigning to 599 (cl=GENERAL_REGS, orig=293, freq=3, tfirst=599, tfreq=3)...
	   Assign 0 to reload r599 (freq=3)
	 Assigning to 600 (cl=GENERAL_REGS, orig=296, freq=3, tfirst=600, tfreq=3)...
	   Assign 0 to reload r600 (freq=3)
	 Assigning to 601 (cl=GENERAL_REGS, orig=299, freq=3, tfirst=601, tfreq=3)...
	   Assign 0 to reload r601 (freq=3)
	 Assigning to 602 (cl=GENERAL_REGS, orig=303, freq=3, tfirst=602, tfreq=3)...
	   Assign 0 to reload r602 (freq=3)
	 Assigning to 558 (cl=GENERAL_REGS, orig=558, freq=2, tfirst=558, tfreq=2)...
	   Assign 2 to reload r558 (freq=2)
	 Assigning to 559 (cl=GENERAL_REGS, orig=559, freq=2, tfirst=559, tfreq=2)...
	   Assign 4 to reload r559 (freq=2)
	 Assigning to 562 (cl=GENERAL_REGS, orig=562, freq=2, tfirst=562, tfreq=2)...
	   Assign 5 to reload r562 (freq=2)
	 Assigning to 563 (cl=GENERAL_REGS, orig=563, freq=2, tfirst=563, tfreq=2)...
	   Assign 2 to reload r563 (freq=2)
	 Assigning to 566 (cl=GENERAL_REGS, orig=566, freq=2, tfirst=566, tfreq=2)...
	   Assign 4 to reload r566 (freq=2)
	 Assigning to 567 (cl=GENERAL_REGS, orig=567, freq=2, tfirst=567, tfreq=2)...
	   Assign 5 to reload r567 (freq=2)
	 Assigning to 568 (cl=GENERAL_REGS, orig=568, freq=2, tfirst=568, tfreq=2)...
	   Assign 2 to reload r568 (freq=2)
	 Assigning to 571 (cl=GENERAL_REGS, orig=571, freq=2, tfirst=571, tfreq=2)...
	   Assign 4 to reload r571 (freq=2)
	 Assigning to 572 (cl=GENERAL_REGS, orig=572, freq=2, tfirst=572, tfreq=2)...
	   Assign 5 to reload r572 (freq=2)
	 Assigning to 573 (cl=GENERAL_REGS, orig=573, freq=2, tfirst=573, tfreq=2)...
	   Assign 2 to reload r573 (freq=2)
	 Assigning to 576 (cl=GENERAL_REGS, orig=576, freq=2, tfirst=576, tfreq=2)...
	   Assign 4 to reload r576 (freq=2)
	 Assigning to 577 (cl=GENERAL_REGS, orig=577, freq=2, tfirst=577, tfreq=2)...
	   Assign 5 to reload r577 (freq=2)
	 Assigning to 578 (cl=GENERAL_REGS, orig=578, freq=2, tfirst=578, tfreq=2)...
	   Assign 2 to reload r578 (freq=2)
	 Assigning to 579 (cl=GENERAL_REGS, orig=579, freq=2, tfirst=579, tfreq=2)...
	   Assign 4 to reload r579 (freq=2)
	 Assigning to 603 (cl=GENERAL_REGS, orig=603, freq=2, tfirst=603, tfreq=2)...
	   Assign 5 to reload r603 (freq=2)
	 Assigning to 604 (cl=GENERAL_REGS, orig=604, freq=2, tfirst=604, tfreq=2)...
	   Assign 2 to reload r604 (freq=2)
	 Assigning to 605 (cl=GENERAL_REGS, orig=605, freq=2, tfirst=605, tfreq=2)...
	   Assign 4 to reload r605 (freq=2)
	 Assigning to 606 (cl=GENERAL_REGS, orig=606, freq=2, tfirst=606, tfreq=2)...
	   Assign 5 to reload r606 (freq=2)
	 Assigning to 607 (cl=GENERAL_REGS, orig=607, freq=2, tfirst=607, tfreq=2)...
	   Assign 2 to reload r607 (freq=2)
	 Assigning to 608 (cl=GENERAL_REGS, orig=608, freq=2, tfirst=608, tfreq=2)...
	   Assign 4 to reload r608 (freq=2)
	 Assigning to 609 (cl=GENERAL_REGS, orig=609, freq=2, tfirst=609, tfreq=2)...
	   Assign 5 to reload r609 (freq=2)
	 Assigning to 610 (cl=GENERAL_REGS, orig=610, freq=2, tfirst=610, tfreq=2)...
	   Assign 2 to reload r610 (freq=2)
	 Assigning to 611 (cl=GENERAL_REGS, orig=611, freq=2, tfirst=611, tfreq=2)...
	   Assign 4 to reload r611 (freq=2)
	 Assigning to 612 (cl=GENERAL_REGS, orig=612, freq=2, tfirst=612, tfreq=2)...
	   Assign 5 to reload r612 (freq=2)
	 Assigning to 613 (cl=GENERAL_REGS, orig=613, freq=2, tfirst=613, tfreq=2)...
	   Assign 2 to reload r613 (freq=2)
	 Assigning to 614 (cl=GENERAL_REGS, orig=614, freq=2, tfirst=614, tfreq=2)...
	   Assign 4 to reload r614 (freq=2)
	 Assigning to 615 (cl=GENERAL_REGS, orig=615, freq=2, tfirst=615, tfreq=2)...
	   Assign 5 to reload r615 (freq=2)
	 Assigning to 616 (cl=GENERAL_REGS, orig=616, freq=2, tfirst=616, tfreq=2)...
	   Assign 2 to reload r616 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 19
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 45
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 52
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 56
changing reg in insn 59
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 63
changing reg in insn 66
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 70
changing reg in insn 73
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 80
changing reg in insn 80
changing reg in insn 82
changing reg in insn 84
changing reg in insn 87
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 91
changing reg in insn 94
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 98
changing reg in insn 101
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 105
changing reg in insn 108
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 112
changing reg in insn 115
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 119
changing reg in insn 122
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 126
changing reg in insn 129
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 133
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 154
changing reg in insn 156
changing reg in insn 143
changing reg in insn 146
changing reg in insn 146
changing reg in insn 146
changing reg in insn 149
changing reg in insn 175
changing reg in insn 177
changing reg in insn 164
changing reg in insn 167
changing reg in insn 167
changing reg in insn 167
changing reg in insn 170
changing reg in insn 181
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 188
changing reg in insn 187
changing reg in insn 186
changing reg in insn 205
changing reg in insn 207
changing reg in insn 194
changing reg in insn 197
changing reg in insn 197
changing reg in insn 197
changing reg in insn 200
changing reg in insn 211
changing reg in insn 214
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 219
changing reg in insn 218
changing reg in insn 217
changing reg in insn 216
changing reg in insn 236
changing reg in insn 238
changing reg in insn 225
changing reg in insn 228
changing reg in insn 228
changing reg in insn 228
changing reg in insn 231
changing reg in insn 242
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 251
changing reg in insn 250
changing reg in insn 249
changing reg in insn 248
changing reg in insn 247
changing reg in insn 268
changing reg in insn 270
changing reg in insn 257
changing reg in insn 260
changing reg in insn 260
changing reg in insn 260
changing reg in insn 263
changing reg in insn 274
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 282
changing reg in insn 281
changing reg in insn 280
changing reg in insn 279
changing reg in insn 299
changing reg in insn 301
changing reg in insn 288
changing reg in insn 291
changing reg in insn 291
changing reg in insn 291
changing reg in insn 294
changing reg in insn 305
changing reg in insn 308
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 314
changing reg in insn 313
changing reg in insn 312
changing reg in insn 311
changing reg in insn 310
changing reg in insn 316
changing reg in insn 321
changing reg in insn 319
changing reg in insn 317
changing reg in insn 321
changing reg in insn 319
changing reg in insn 324
changing reg in insn 326
changing reg in insn 326
changing reg in insn 327
changing reg in insn 329
changing reg in insn 334
changing reg in insn 332
changing reg in insn 330
changing reg in insn 334
changing reg in insn 332
changing reg in insn 337
changing reg in insn 339
changing reg in insn 339
changing reg in insn 339
changing reg in insn 341
changing reg in insn 343
changing reg in insn 348
changing reg in insn 346
changing reg in insn 344
changing reg in insn 348
changing reg in insn 346
changing reg in insn 351
changing reg in insn 353
changing reg in insn 353
changing reg in insn 354
changing reg in insn 356
changing reg in insn 361
changing reg in insn 359
changing reg in insn 357
changing reg in insn 361
changing reg in insn 359
changing reg in insn 364
changing reg in insn 366
changing reg in insn 366
changing reg in insn 367
changing reg in insn 369
changing reg in insn 374
changing reg in insn 372
changing reg in insn 370
changing reg in insn 374
changing reg in insn 372
changing reg in insn 377
changing reg in insn 379
changing reg in insn 379
changing reg in insn 380
changing reg in insn 382
changing reg in insn 387
changing reg in insn 385
changing reg in insn 383
changing reg in insn 387
changing reg in insn 385
changing reg in insn 390
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 395
changing reg in insn 400
changing reg in insn 398
changing reg in insn 396
changing reg in insn 400
changing reg in insn 398
changing reg in insn 403
changing reg in insn 405
changing reg in insn 405
changing reg in insn 406
changing reg in insn 408
changing reg in insn 413
changing reg in insn 411
changing reg in insn 409
changing reg in insn 413
changing reg in insn 411
changing reg in insn 416
changing reg in insn 418
changing reg in insn 418
changing reg in insn 418
changing reg in insn 420
changing reg in insn 422
changing reg in insn 427
changing reg in insn 425
changing reg in insn 423
changing reg in insn 427
changing reg in insn 425
changing reg in insn 430
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 435
changing reg in insn 440
changing reg in insn 438
changing reg in insn 436
changing reg in insn 440
changing reg in insn 438
changing reg in insn 443
changing reg in insn 445
changing reg in insn 445
changing reg in insn 446
changing reg in insn 448
changing reg in insn 453
changing reg in insn 451
changing reg in insn 449
changing reg in insn 453
changing reg in insn 451
changing reg in insn 456
changing reg in insn 458
changing reg in insn 458
changing reg in insn 459
changing reg in insn 461
changing reg in insn 466
changing reg in insn 464
changing reg in insn 462
changing reg in insn 466
changing reg in insn 464
changing reg in insn 469
changing reg in insn 471
changing reg in insn 471
changing reg in insn 472
changing reg in insn 474
changing reg in insn 479
changing reg in insn 477
changing reg in insn 475
changing reg in insn 479
changing reg in insn 477
changing reg in insn 482
changing reg in insn 484
changing reg in insn 484
changing reg in insn 484
changing reg in insn 486
changing reg in insn 488
changing reg in insn 493
changing reg in insn 491
changing reg in insn 489
changing reg in insn 493
changing reg in insn 491
changing reg in insn 496
changing reg in insn 498
changing reg in insn 498
changing reg in insn 499
changing reg in insn 501
changing reg in insn 506
changing reg in insn 504
changing reg in insn 502
changing reg in insn 506
changing reg in insn 504
changing reg in insn 509
changing reg in insn 511
changing reg in insn 511
changing reg in insn 512
changing reg in insn 514
changing reg in insn 519
changing reg in insn 517
changing reg in insn 515
changing reg in insn 519
changing reg in insn 517
changing reg in insn 522
changing reg in insn 524
changing reg in insn 524
changing reg in insn 525
changing reg in insn 527
changing reg in insn 532
changing reg in insn 530
changing reg in insn 528
changing reg in insn 532
changing reg in insn 530
changing reg in insn 535
changing reg in insn 537
changing reg in insn 537
changing reg in insn 538
changing reg in insn 540
changing reg in insn 545
changing reg in insn 543
changing reg in insn 541
changing reg in insn 545
changing reg in insn 543
changing reg in insn 548
changing reg in insn 550
changing reg in insn 550
changing reg in insn 551
changing reg in insn 553
changing reg in insn 556
changing reg in insn 556
changing reg in insn 557
changing reg in insn 559
changing reg in insn 562
changing reg in insn 562
changing reg in insn 563
changing reg in insn 565
changing reg in insn 568
changing reg in insn 568
changing reg in insn 569
changing reg in insn 571
changing reg in insn 574
changing reg in insn 574
changing reg in insn 575
changing reg in insn 577
changing reg in insn 580
changing reg in insn 580
changing reg in insn 581
changing reg in insn 583
changing reg in insn 586
changing reg in insn 586
changing reg in insn 587
changing reg in insn 589
changing reg in insn 592
changing reg in insn 592
changing reg in insn 593
changing reg in insn 595
changing reg in insn 598
changing reg in insn 598
changing reg in insn 599
changing reg in insn 601
changing reg in insn 604
changing reg in insn 604
changing reg in insn 605
changing reg in insn 607
changing reg in insn 610
changing reg in insn 610
changing reg in insn 611
changing reg in insn 613
changing reg in insn 616
changing reg in insn 616
changing reg in insn 617
changing reg in insn 619
changing reg in insn 622
changing reg in insn 622
changing reg in insn 623
changing reg in insn 625
changing reg in insn 628
changing reg in insn 628
changing reg in insn 629
changing reg in insn 631
changing reg in insn 634
changing reg in insn 634
changing reg in insn 635
changing reg in insn 637
changing reg in insn 640
changing reg in insn 640
changing reg in insn 640
changing reg in insn 642
changing reg in insn 644
changing reg in insn 647
changing reg in insn 647
changing reg in insn 647
changing reg in insn 649
changing reg in insn 651
changing reg in insn 654
changing reg in insn 654
changing reg in insn 654
changing reg in insn 656
changing reg in insn 658
changing reg in insn 661
changing reg in insn 661
changing reg in insn 661
changing reg in insn 663
changing reg in insn 665
changing reg in insn 668
changing reg in insn 668
changing reg in insn 669
changing reg in insn 671
changing reg in insn 674
changing reg in insn 674
changing reg in insn 675
changing reg in insn 677
changing reg in insn 680
changing reg in insn 680
changing reg in insn 681
changing reg in insn 683
changing reg in insn 686
changing reg in insn 686
changing reg in insn 687
changing reg in insn 704
changing reg in insn 706
changing reg in insn 693
changing reg in insn 696
changing reg in insn 696
changing reg in insn 696
changing reg in insn 699
changing reg in insn 716
changing reg in insn 720
changing reg in insn 719
changing reg in insn 718
changing reg in insn 717
changing reg in insn 722
changing reg in insn 726
changing reg in insn 725
changing reg in insn 724
changing reg in insn 723
changing reg in insn 728
changing reg in insn 732
changing reg in insn 731
changing reg in insn 730
changing reg in insn 729
changing reg in insn 734
changing reg in insn 738
changing reg in insn 737
changing reg in insn 736
changing reg in insn 735
changing reg in insn 740
changing reg in insn 744
changing reg in insn 743
changing reg in insn 742
changing reg in insn 741
changing reg in insn 746
changing reg in insn 750
changing reg in insn 749
changing reg in insn 748
changing reg in insn 747
changing reg in insn 752
changing reg in insn 756
changing reg in insn 755
changing reg in insn 754
changing reg in insn 753
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 147
changing reg in insn 148
changing reg in insn 153
changing reg in insn 154
changing reg in insn 163
changing reg in insn 164
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 168
changing reg in insn 169
changing reg in insn 174
changing reg in insn 175
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 198
changing reg in insn 199
changing reg in insn 204
changing reg in insn 205
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 224
changing reg in insn 225
changing reg in insn 227
changing reg in insn 228
changing reg in insn 230
changing reg in insn 231
changing reg in insn 229
changing reg in insn 230
changing reg in insn 235
changing reg in insn 236
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 256
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 262
changing reg in insn 263
changing reg in insn 261
changing reg in insn 262
changing reg in insn 267
changing reg in insn 268
changing reg in insn 273
changing reg in insn 274
changing reg in insn 276
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 292
changing reg in insn 293
changing reg in insn 298
changing reg in insn 299
changing reg in insn 304
changing reg in insn 305
changing reg in insn 307
changing reg in insn 315
changing reg in insn 316
changing reg in insn 323
changing reg in insn 321
changing reg in insn 320
changing reg in insn 319
changing reg in insn 318
changing reg in insn 317
changing reg in insn 324
changing reg in insn 322
changing reg in insn 321
changing reg in insn 320
changing reg in insn 319
changing reg in insn 318
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 328
changing reg in insn 329
changing reg in insn 336
changing reg in insn 334
changing reg in insn 333
changing reg in insn 332
changing reg in insn 331
changing reg in insn 330
changing reg in insn 337
changing reg in insn 335
changing reg in insn 334
changing reg in insn 333
changing reg in insn 332
changing reg in insn 331
changing reg in insn 335
changing reg in insn 336
changing reg in insn 338
changing reg in insn 339
changing reg in insn 340
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 350
changing reg in insn 348
changing reg in insn 347
changing reg in insn 346
changing reg in insn 345
changing reg in insn 344
changing reg in insn 351
changing reg in insn 349
changing reg in insn 348
changing reg in insn 347
changing reg in insn 346
changing reg in insn 345
changing reg in insn 349
changing reg in insn 350
changing reg in insn 352
changing reg in insn 355
changing reg in insn 356
changing reg in insn 363
changing reg in insn 361
changing reg in insn 360
changing reg in insn 359
changing reg in insn 358
changing reg in insn 357
changing reg in insn 364
changing reg in insn 362
changing reg in insn 361
changing reg in insn 360
changing reg in insn 359
changing reg in insn 358
changing reg in insn 362
changing reg in insn 363
changing reg in insn 365
changing reg in insn 368
changing reg in insn 369
changing reg in insn 376
changing reg in insn 374
changing reg in insn 373
changing reg in insn 372
changing reg in insn 371
changing reg in insn 370
changing reg in insn 377
changing reg in insn 375
changing reg in insn 374
changing reg in insn 373
changing reg in insn 372
changing reg in insn 371
changing reg in insn 375
changing reg in insn 376
changing reg in insn 378
changing reg in insn 381
changing reg in insn 382
changing reg in insn 389
changing reg in insn 387
changing reg in insn 386
changing reg in insn 385
changing reg in insn 384
changing reg in insn 383
changing reg in insn 390
changing reg in insn 388
changing reg in insn 387
changing reg in insn 386
changing reg in insn 385
changing reg in insn 384
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 394
changing reg in insn 395
changing reg in insn 402
changing reg in insn 400
changing reg in insn 399
changing reg in insn 398
changing reg in insn 397
changing reg in insn 396
changing reg in insn 403
changing reg in insn 401
changing reg in insn 400
changing reg in insn 399
changing reg in insn 398
changing reg in insn 397
changing reg in insn 401
changing reg in insn 402
changing reg in insn 404
changing reg in insn 407
changing reg in insn 408
changing reg in insn 415
changing reg in insn 413
changing reg in insn 412
changing reg in insn 411
changing reg in insn 410
changing reg in insn 409
changing reg in insn 416
changing reg in insn 414
changing reg in insn 413
changing reg in insn 412
changing reg in insn 411
changing reg in insn 410
changing reg in insn 414
changing reg in insn 415
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 420
changing reg in insn 421
changing reg in insn 422
changing reg in insn 429
changing reg in insn 427
changing reg in insn 426
changing reg in insn 425
changing reg in insn 424
changing reg in insn 423
changing reg in insn 430
changing reg in insn 428
changing reg in insn 427
changing reg in insn 426
changing reg in insn 425
changing reg in insn 424
changing reg in insn 428
changing reg in insn 429
changing reg in insn 431
changing reg in insn 434
changing reg in insn 435
changing reg in insn 442
changing reg in insn 440
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 436
changing reg in insn 443
changing reg in insn 441
changing reg in insn 440
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 441
changing reg in insn 442
changing reg in insn 444
changing reg in insn 447
changing reg in insn 448
changing reg in insn 455
changing reg in insn 453
changing reg in insn 452
changing reg in insn 451
changing reg in insn 450
changing reg in insn 449
changing reg in insn 456
changing reg in insn 454
changing reg in insn 453
changing reg in insn 452
changing reg in insn 451
changing reg in insn 450
changing reg in insn 454
changing reg in insn 455
changing reg in insn 457
changing reg in insn 460
changing reg in insn 461
changing reg in insn 468
changing reg in insn 466
changing reg in insn 465
changing reg in insn 464
changing reg in insn 463
changing reg in insn 462
changing reg in insn 469
changing reg in insn 467
changing reg in insn 466
changing reg in insn 465
changing reg in insn 464
changing reg in insn 463
changing reg in insn 467
changing reg in insn 468
changing reg in insn 470
changing reg in insn 473
changing reg in insn 474
changing reg in insn 481
changing reg in insn 479
changing reg in insn 478
changing reg in insn 477
changing reg in insn 476
changing reg in insn 475
changing reg in insn 482
changing reg in insn 480
changing reg in insn 479
changing reg in insn 478
changing reg in insn 477
changing reg in insn 476
changing reg in insn 480
changing reg in insn 481
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 487
changing reg in insn 488
changing reg in insn 495
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 489
changing reg in insn 496
changing reg in insn 494
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 500
changing reg in insn 501
changing reg in insn 508
changing reg in insn 506
changing reg in insn 505
changing reg in insn 504
changing reg in insn 503
changing reg in insn 502
changing reg in insn 509
changing reg in insn 507
changing reg in insn 506
changing reg in insn 505
changing reg in insn 504
changing reg in insn 503
changing reg in insn 507
changing reg in insn 508
changing reg in insn 510
changing reg in insn 513
changing reg in insn 514
changing reg in insn 521
changing reg in insn 519
changing reg in insn 518
changing reg in insn 517
changing reg in insn 516
changing reg in insn 515
changing reg in insn 522
changing reg in insn 520
changing reg in insn 519
changing reg in insn 518
changing reg in insn 517
changing reg in insn 516
changing reg in insn 520
changing reg in insn 521
changing reg in insn 523
changing reg in insn 526
changing reg in insn 527
changing reg in insn 534
changing reg in insn 532
changing reg in insn 531
changing reg in insn 530
changing reg in insn 529
changing reg in insn 528
changing reg in insn 535
changing reg in insn 533
changing reg in insn 532
changing reg in insn 531
changing reg in insn 530
changing reg in insn 529
changing reg in insn 533
changing reg in insn 534
changing reg in insn 536
changing reg in insn 539
changing reg in insn 540
changing reg in insn 547
changing reg in insn 545
changing reg in insn 544
changing reg in insn 543
changing reg in insn 542
changing reg in insn 541
changing reg in insn 548
changing reg in insn 546
changing reg in insn 545
changing reg in insn 544
changing reg in insn 543
changing reg in insn 542
changing reg in insn 546
changing reg in insn 547
changing reg in insn 549
changing reg in insn 552
changing reg in insn 553
changing reg in insn 555
changing reg in insn 558
changing reg in insn 559
changing reg in insn 561
changing reg in insn 564
changing reg in insn 565
changing reg in insn 567
changing reg in insn 570
changing reg in insn 571
changing reg in insn 573
changing reg in insn 576
changing reg in insn 577
changing reg in insn 579
changing reg in insn 582
changing reg in insn 583
changing reg in insn 585
changing reg in insn 588
changing reg in insn 589
changing reg in insn 591
changing reg in insn 594
changing reg in insn 595
changing reg in insn 597
changing reg in insn 600
changing reg in insn 601
changing reg in insn 603
changing reg in insn 606
changing reg in insn 607
changing reg in insn 609
changing reg in insn 612
changing reg in insn 613
changing reg in insn 615
changing reg in insn 618
changing reg in insn 619
changing reg in insn 621
changing reg in insn 624
changing reg in insn 625
changing reg in insn 627
changing reg in insn 630
changing reg in insn 631
changing reg in insn 633
changing reg in insn 636
changing reg in insn 637
changing reg in insn 639
changing reg in insn 640
changing reg in insn 641
changing reg in insn 642
changing reg in insn 643
changing reg in insn 644
changing reg in insn 646
changing reg in insn 647
changing reg in insn 648
changing reg in insn 649
changing reg in insn 650
changing reg in insn 651
changing reg in insn 653
changing reg in insn 654
changing reg in insn 655
changing reg in insn 656
changing reg in insn 657
changing reg in insn 658
changing reg in insn 660
changing reg in insn 661
changing reg in insn 662
changing reg in insn 663
changing reg in insn 664
changing reg in insn 665
changing reg in insn 667
changing reg in insn 670
changing reg in insn 671
changing reg in insn 673
changing reg in insn 676
changing reg in insn 677
changing reg in insn 679
changing reg in insn 682
changing reg in insn 683
changing reg in insn 685
changing reg in insn 692
changing reg in insn 693
changing reg in insn 695
changing reg in insn 696
changing reg in insn 698
changing reg in insn 699
changing reg in insn 697
changing reg in insn 698
changing reg in insn 703
changing reg in insn 704
changing reg in insn 721
changing reg in insn 722
changing reg in insn 727
changing reg in insn 728
changing reg in insn 733
changing reg in insn 734
changing reg in insn 739
changing reg in insn 740
changing reg in insn 745
changing reg in insn 746
changing reg in insn 751
changing reg in insn 752
deleting insn with uid = 776.
deleting insn with uid = 778.
deleting insn with uid = 780.
deleting insn with uid = 782.
deleting insn with uid = 784.
deleting insn with uid = 786.
deleting insn with uid = 788.
deleting insn with uid = 790.
deleting insn with uid = 792.
deleting insn with uid = 794.
deleting insn with uid = 796.
deleting insn with uid = 798.
deleting insn with uid = 800.
deleting insn with uid = 802.
deleting insn with uid = 804.
deleting insn with uid = 806.
deleting insn with uid = 808.
deleting insn with uid = 810.
deleting insn with uid = 812.
deleting insn with uid = 814.
deleting insn with uid = 816.
deleting insn with uid = 820.
deleting insn with uid = 822.
deleting insn with uid = 826.
deleting insn with uid = 828.
deleting insn with uid = 833.
deleting insn with uid = 835.
deleting insn with uid = 840.
deleting insn with uid = 842.
deleting insn with uid = 323.
deleting insn with uid = 336.
deleting insn with uid = 350.
deleting insn with uid = 363.
deleting insn with uid = 376.
deleting insn with uid = 389.
deleting insn with uid = 402.
deleting insn with uid = 415.
deleting insn with uid = 429.
deleting insn with uid = 442.
deleting insn with uid = 455.
deleting insn with uid = 468.
deleting insn with uid = 481.
deleting insn with uid = 495.
deleting insn with uid = 508.
deleting insn with uid = 521.
deleting insn with uid = 534.
deleting insn with uid = 547.
deleting insn with uid = 848.
deleting insn with uid = 850.
deleting insn with uid = 852.
deleting insn with uid = 854.
deleting insn with uid = 856.
deleting insn with uid = 858.
deleting insn with uid = 860.
deleting insn with uid = 862.
deleting insn with uid = 864.
deleting insn with uid = 866.
deleting insn with uid = 868.
deleting insn with uid = 870.
deleting insn with uid = 872.
deleting insn with uid = 874.
deleting insn with uid = 876.
deleting insn with uid = 878.
deleting insn with uid = 880.
deleting insn with uid = 882.
deleting insn with uid = 884.
deleting insn with uid = 886.
deleting insn with uid = 888.
deleting insn with uid = 890.
deleting insn with uid = 892.
starting the processing of deferred insns
ending the processing of deferred insns


void init(Data_file_header*, Data_block_header*, Procpar_info*, Preprocess*, IOFiles*, InFile_struct*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={462d,498u} r1={118d,154u,106e} r2={11d,11u} r4={10d,10u} r5={10d,10u} r6={1d,218u} r7={1d,26u} r17={239d,8u} r20={1d,1u,76e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d,1u} 
;;    total ref usage 1983{863d,938u,182e} in 766{766 regular + 0 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
        (reg:DI 5 di [ main_header ])) sim2fitman_sup.cpp:256 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
        (reg:DI 4 si [ block_header ])) sim2fitman_sup.cpp:256 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) sim2fitman_sup.cpp:256 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) sim2fitman_sup.cpp:256 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
        (reg:DI 37 r8 [ io_filenames ])) sim2fitman_sup.cpp:256 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
        (reg:DI 38 r9 [ infile_struct ])) sim2fitman_sup.cpp:256 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 759 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:260 90 {*movsi_internal}
     (nil))
(jump_insn 759 11 760 2 (set (pc)
        (label_ref 710)) sim2fitman_sup.cpp:260 636 {jump}
     (nil)
 -> 710)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 760 759 712)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362
(code_label 712 760 14 3 66 "" [1 uses])
(note 14 712 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 0 ax [312])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:263 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 0 ax [orig:83 D.6421 ] [83])
        (sign_extend:DI (reg:SI 0 ax [312]))) sim2fitman_sup.cpp:263 142 {*extendsidi2_rex64}
     (nil))
(insn 17 16 777 3 (parallel [
            (set (reg:DI 0 ax [orig:84 D.6421 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:84 D.6421 ] [84])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:263 497 {*ashldi3_1}
     (nil))
(insn 777 17 18 3 (set (reg:DI 1 dx [orig:84 D.6421 ] [84])
        (reg:DI 0 ax [orig:84 D.6421 ] [84])) sim2fitman_sup.cpp:263 89 {*movdi_internal}
     (nil))
(insn 18 777 19 3 (set (reg/f:DI 0 ax [313])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:263 89 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg/f:DI 1 dx [orig:85 D.6422 ] [85])
                (plus:DI (reg:DI 1 dx [orig:84 D.6421 ] [84])
                    (reg/f:DI 0 ax [313])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:263 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.6421 ] [84]))
        (nil)))
(insn 20 19 21 3 (set (reg:SF 0 ax [314])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:263 129 {*movsf_internal}
     (nil))
(insn 21 20 22 3 (set (mem/j:SF (reg/f:DI 1 dx [orig:85 D.6422 ] [85]) [0 _13->acquision_time+0 S4 A64])
        (reg:SF 0 ax [314])) sim2fitman_sup.cpp:263 129 {*movsf_internal}
     (nil))
(insn 22 21 23 3 (set (reg:SI 0 ax [315])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:264 90 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 0 ax [orig:86 D.6421 ] [86])
        (sign_extend:DI (reg:SI 0 ax [315]))) sim2fitman_sup.cpp:264 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 779 3 (parallel [
            (set (reg:DI 0 ax [orig:87 D.6421 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:87 D.6421 ] [87])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:264 497 {*ashldi3_1}
     (nil))
(insn 779 24 25 3 (set (reg:DI 1 dx [orig:87 D.6421 ] [87])
        (reg:DI 0 ax [orig:87 D.6421 ] [87])) sim2fitman_sup.cpp:264 89 {*movdi_internal}
     (nil))
(insn 25 779 26 3 (set (reg/f:DI 0 ax [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:264 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 1 dx [orig:88 D.6422 ] [88])
                (plus:DI (reg:DI 1 dx [orig:87 D.6421 ] [87])
                    (reg/f:DI 0 ax [316])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:264 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:87 D.6421 ] [87]))
        (nil)))
(insn 27 26 28 3 (set (reg:SF 0 ax [317])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:264 129 {*movsf_internal}
     (nil))
(insn 28 27 29 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:88 D.6422 ] [88])
                (const_int 320 [0x140])) [0 _16->filter+0 S4 A64])
        (reg:SF 0 ax [317])) sim2fitman_sup.cpp:264 129 {*movsf_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 0 ax [318])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:265 90 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:DI 0 ax [orig:89 D.6421 ] [89])
        (sign_extend:DI (reg:SI 0 ax [318]))) sim2fitman_sup.cpp:265 142 {*extendsidi2_rex64}
     (nil))
(insn 31 30 781 3 (parallel [
            (set (reg:DI 0 ax [orig:90 D.6421 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:90 D.6421 ] [90])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:265 497 {*ashldi3_1}
     (nil))
(insn 781 31 32 3 (set (reg:DI 1 dx [orig:90 D.6421 ] [90])
        (reg:DI 0 ax [orig:90 D.6421 ] [90])) sim2fitman_sup.cpp:265 89 {*movdi_internal}
     (nil))
(insn 32 781 33 3 (set (reg/f:DI 0 ax [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:265 89 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6422 ] [91])
                (plus:DI (reg/f:DI 0 ax [319])
                    (reg:DI 1 dx [orig:90 D.6421 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:265 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6421 ] [90]))
        (nil)))
(insn 34 33 35 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:91 D.6422 ] [91])
                (const_int 324 [0x144])) [0 _19->num_transients+0 S4 A32])
        (const_int 1 [0x1])) sim2fitman_sup.cpp:265 90 {*movsi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:SI 0 ax [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:266 90 {*movsi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:DI 0 ax [orig:92 D.6421 ] [92])
        (sign_extend:DI (reg:SI 0 ax [320]))) sim2fitman_sup.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 37 36 783 3 (parallel [
            (set (reg:DI 0 ax [orig:93 D.6421 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:93 D.6421 ] [93])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:266 497 {*ashldi3_1}
     (nil))
(insn 783 37 38 3 (set (reg:DI 1 dx [orig:93 D.6421 ] [93])
        (reg:DI 0 ax [orig:93 D.6421 ] [93])) sim2fitman_sup.cpp:266 89 {*movdi_internal}
     (nil))
(insn 38 783 39 3 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:266 89 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.6422 ] [94])
                (plus:DI (reg/f:DI 0 ax [321])
                    (reg:DI 1 dx [orig:93 D.6421 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:266 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.6421 ] [93]))
        (nil)))
(insn 40 39 41 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:94 D.6422 ] [94])
                (const_int 328 [0x148])) [0 _22->num_points+0 S4 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:266 90 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:267 90 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:DI 0 ax [orig:95 D.6421 ] [95])
        (sign_extend:DI (reg:SI 0 ax [322]))) sim2fitman_sup.cpp:267 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 785 3 (parallel [
            (set (reg:DI 0 ax [orig:96 D.6421 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:96 D.6421 ] [96])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:267 497 {*ashldi3_1}
     (nil))
(insn 785 43 44 3 (set (reg:DI 1 dx [orig:96 D.6421 ] [96])
        (reg:DI 0 ax [orig:96 D.6421 ] [96])) sim2fitman_sup.cpp:267 89 {*movdi_internal}
     (nil))
(insn 44 785 45 3 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:267 89 {*movdi_internal}
     (nil))
(insn 45 44 46 3 (parallel [
            (set (reg/f:DI 1 dx [orig:97 D.6422 ] [97])
                (plus:DI (reg:DI 1 dx [orig:96 D.6421 ] [96])
                    (reg/f:DI 0 ax [323])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:267 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.6421 ] [96]))
        (nil)))
(insn 46 45 47 3 (set (reg:DF 0 ax [324])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) sim2fitman_sup.cpp:267 128 {*movdf_internal}
     (nil))
(insn 47 46 48 3 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [orig:97 D.6422 ] [97])
                (const_int 336 [0x150])) [0 _25->main_frequency+0 S8 A64])
        (reg:DF 0 ax [324])) sim2fitman_sup.cpp:267 128 {*movdf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:SI 0 ax [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:268 90 {*movsi_internal}
     (nil))
(insn 49 48 50 3 (set (reg:DI 0 ax [orig:98 D.6421 ] [98])
        (sign_extend:DI (reg:SI 0 ax [325]))) sim2fitman_sup.cpp:268 142 {*extendsidi2_rex64}
     (nil))
(insn 50 49 787 3 (parallel [
            (set (reg:DI 0 ax [orig:99 D.6421 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:99 D.6421 ] [99])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:268 497 {*ashldi3_1}
     (nil))
(insn 787 50 51 3 (set (reg:DI 1 dx [orig:99 D.6421 ] [99])
        (reg:DI 0 ax [orig:99 D.6421 ] [99])) sim2fitman_sup.cpp:268 89 {*movdi_internal}
     (nil))
(insn 51 787 52 3 (set (reg/f:DI 0 ax [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:268 89 {*movdi_internal}
     (nil))
(insn 52 51 53 3 (parallel [
            (set (reg/f:DI 1 dx [orig:100 D.6422 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 D.6421 ] [99])
                    (reg/f:DI 0 ax [326])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:268 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.6421 ] [99]))
        (nil)))
(insn 53 52 54 3 (set (reg:DF 0 ax [327])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) sim2fitman_sup.cpp:268 128 {*movdf_internal}
     (nil))
(insn 54 53 55 3 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [orig:100 D.6422 ] [100])
                (const_int 344 [0x158])) [0 _28->offset_frequency+0 S8 A64])
        (reg:DF 0 ax [327])) sim2fitman_sup.cpp:268 128 {*movdf_internal}
     (nil))
(insn 55 54 56 3 (set (reg:SI 0 ax [328])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:269 90 {*movsi_internal}
     (nil))
(insn 56 55 57 3 (set (reg:DI 0 ax [orig:101 D.6421 ] [101])
        (sign_extend:DI (reg:SI 0 ax [328]))) sim2fitman_sup.cpp:269 142 {*extendsidi2_rex64}
     (nil))
(insn 57 56 789 3 (parallel [
            (set (reg:DI 0 ax [orig:102 D.6421 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6421 ] [102])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:269 497 {*ashldi3_1}
     (nil))
(insn 789 57 58 3 (set (reg:DI 1 dx [orig:102 D.6421 ] [102])
        (reg:DI 0 ax [orig:102 D.6421 ] [102])) sim2fitman_sup.cpp:269 89 {*movdi_internal}
     (nil))
(insn 58 789 59 3 (set (reg/f:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:269 89 {*movdi_internal}
     (nil))
(insn 59 58 60 3 (parallel [
            (set (reg/f:DI 1 dx [orig:103 D.6422 ] [103])
                (plus:DI (reg:DI 1 dx [orig:102 D.6421 ] [102])
                    (reg/f:DI 0 ax [329])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:269 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.6421 ] [102]))
        (nil)))
(insn 60 59 61 3 (set (reg:SF 0 ax [330])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:269 129 {*movsf_internal}
     (nil))
(insn 61 60 62 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:103 D.6422 ] [103])
                (const_int 352 [0x160])) [0 _31->te+0 S4 A64])
        (reg:SF 0 ax [330])) sim2fitman_sup.cpp:269 129 {*movsf_internal}
     (nil))
(insn 62 61 63 3 (set (reg:SI 0 ax [331])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:270 90 {*movsi_internal}
     (nil))
(insn 63 62 64 3 (set (reg:DI 0 ax [orig:104 D.6421 ] [104])
        (sign_extend:DI (reg:SI 0 ax [331]))) sim2fitman_sup.cpp:270 142 {*extendsidi2_rex64}
     (nil))
(insn 64 63 791 3 (parallel [
            (set (reg:DI 0 ax [orig:105 D.6421 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:105 D.6421 ] [105])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:270 497 {*ashldi3_1}
     (nil))
(insn 791 64 65 3 (set (reg:DI 1 dx [orig:105 D.6421 ] [105])
        (reg:DI 0 ax [orig:105 D.6421 ] [105])) sim2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 65 791 66 3 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 66 65 67 3 (parallel [
            (set (reg/f:DI 1 dx [orig:106 D.6422 ] [106])
                (plus:DI (reg:DI 1 dx [orig:105 D.6421 ] [105])
                    (reg/f:DI 0 ax [332])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:270 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:105 D.6421 ] [105]))
        (nil)))
(insn 67 66 68 3 (set (reg:SF 0 ax [333])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:270 129 {*movsf_internal}
     (nil))
(insn 68 67 69 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:106 D.6422 ] [106])
                (const_int 356 [0x164])) [0 _34->tr+0 S4 A32])
        (reg:SF 0 ax [333])) sim2fitman_sup.cpp:270 129 {*movsf_internal}
     (nil))
(insn 69 68 70 3 (set (reg:SI 0 ax [334])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:271 90 {*movsi_internal}
     (nil))
(insn 70 69 71 3 (set (reg:DI 0 ax [orig:107 D.6421 ] [107])
        (sign_extend:DI (reg:SI 0 ax [334]))) sim2fitman_sup.cpp:271 142 {*extendsidi2_rex64}
     (nil))
(insn 71 70 793 3 (parallel [
            (set (reg:DI 0 ax [orig:108 D.6421 ] [108])
                (ashift:DI (reg:DI 0 ax [orig:108 D.6421 ] [108])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:271 497 {*ashldi3_1}
     (nil))
(insn 793 71 72 3 (set (reg:DI 1 dx [orig:108 D.6421 ] [108])
        (reg:DI 0 ax [orig:108 D.6421 ] [108])) sim2fitman_sup.cpp:271 89 {*movdi_internal}
     (nil))
(insn 72 793 73 3 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:271 89 {*movdi_internal}
     (nil))
(insn 73 72 74 3 (parallel [
            (set (reg/f:DI 1 dx [orig:109 D.6422 ] [109])
                (plus:DI (reg:DI 1 dx [orig:108 D.6421 ] [108])
                    (reg/f:DI 0 ax [335])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:271 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:108 D.6421 ] [108]))
        (nil)))
(insn 74 73 75 3 (set (reg:SF 0 ax [336])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:271 129 {*movsf_internal}
     (nil))
(insn 75 74 76 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:109 D.6422 ] [109])
                (const_int 360 [0x168])) [0 _37->gain+0 S4 A64])
        (reg:SF 0 ax [336])) sim2fitman_sup.cpp:271 129 {*movsf_internal}
     (nil))
(insn 76 75 77 3 (set (reg:SI 0 ax [337])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:272 90 {*movsi_internal}
     (nil))
(insn 77 76 78 3 (set (reg:DI 0 ax [orig:110 D.6421 ] [110])
        (sign_extend:DI (reg:SI 0 ax [337]))) sim2fitman_sup.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 795 3 (parallel [
            (set (reg:DI 0 ax [orig:111 D.6421 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:111 D.6421 ] [111])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:272 497 {*ashldi3_1}
     (nil))
(insn 795 78 79 3 (set (reg:DI 1 dx [orig:111 D.6421 ] [111])
        (reg:DI 0 ax [orig:111 D.6421 ] [111])) sim2fitman_sup.cpp:272 89 {*movdi_internal}
     (nil))
(insn 79 795 80 3 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:272 89 {*movdi_internal}
     (nil))
(insn 80 79 81 3 (parallel [
            (set (reg/f:DI 1 dx [orig:112 D.6422 ] [112])
                (plus:DI (reg:DI 1 dx [orig:111 D.6421 ] [111])
                    (reg/f:DI 0 ax [338])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:272 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.6421 ] [111]))
        (nil)))
(insn 81 80 82 3 (set (reg:SF 0 ax [339])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:272 129 {*movsf_internal}
     (nil))
(insn 82 81 83 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:112 D.6422 ] [112])
                (const_int 364 [0x16c])) [0 _40->pos1+0 S4 A32])
        (reg:SF 0 ax [339])) sim2fitman_sup.cpp:272 129 {*movsf_internal}
     (nil))
(insn 83 82 84 3 (set (reg:SI 0 ax [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:273 90 {*movsi_internal}
     (nil))
(insn 84 83 85 3 (set (reg:DI 0 ax [orig:113 D.6421 ] [113])
        (sign_extend:DI (reg:SI 0 ax [340]))) sim2fitman_sup.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 797 3 (parallel [
            (set (reg:DI 0 ax [orig:114 D.6421 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:114 D.6421 ] [114])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:273 497 {*ashldi3_1}
     (nil))
(insn 797 85 86 3 (set (reg:DI 1 dx [orig:114 D.6421 ] [114])
        (reg:DI 0 ax [orig:114 D.6421 ] [114])) sim2fitman_sup.cpp:273 89 {*movdi_internal}
     (nil))
(insn 86 797 87 3 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:273 89 {*movdi_internal}
     (nil))
(insn 87 86 88 3 (parallel [
            (set (reg/f:DI 1 dx [orig:115 D.6422 ] [115])
                (plus:DI (reg:DI 1 dx [orig:114 D.6421 ] [114])
                    (reg/f:DI 0 ax [341])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:273 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.6421 ] [114]))
        (nil)))
(insn 88 87 89 3 (set (reg:SF 0 ax [342])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:273 129 {*movsf_internal}
     (nil))
(insn 89 88 90 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:115 D.6422 ] [115])
                (const_int 368 [0x170])) [0 _43->pos2+0 S4 A64])
        (reg:SF 0 ax [342])) sim2fitman_sup.cpp:273 129 {*movsf_internal}
     (nil))
(insn 90 89 91 3 (set (reg:SI 0 ax [343])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:274 90 {*movsi_internal}
     (nil))
(insn 91 90 92 3 (set (reg:DI 0 ax [orig:116 D.6421 ] [116])
        (sign_extend:DI (reg:SI 0 ax [343]))) sim2fitman_sup.cpp:274 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 799 3 (parallel [
            (set (reg:DI 0 ax [orig:117 D.6421 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:117 D.6421 ] [117])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:274 497 {*ashldi3_1}
     (nil))
(insn 799 92 93 3 (set (reg:DI 1 dx [orig:117 D.6421 ] [117])
        (reg:DI 0 ax [orig:117 D.6421 ] [117])) sim2fitman_sup.cpp:274 89 {*movdi_internal}
     (nil))
(insn 93 799 94 3 (set (reg/f:DI 0 ax [344])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:274 89 {*movdi_internal}
     (nil))
(insn 94 93 95 3 (parallel [
            (set (reg/f:DI 1 dx [orig:118 D.6422 ] [118])
                (plus:DI (reg:DI 1 dx [orig:117 D.6421 ] [117])
                    (reg/f:DI 0 ax [344])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:274 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:117 D.6421 ] [117]))
        (nil)))
(insn 95 94 96 3 (set (reg:SF 0 ax [345])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:274 129 {*movsf_internal}
     (nil))
(insn 96 95 97 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:118 D.6422 ] [118])
                (const_int 372 [0x174])) [0 _46->pos3+0 S4 A32])
        (reg:SF 0 ax [345])) sim2fitman_sup.cpp:274 129 {*movsf_internal}
     (nil))
(insn 97 96 98 3 (set (reg:SI 0 ax [346])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:275 90 {*movsi_internal}
     (nil))
(insn 98 97 99 3 (set (reg:DI 0 ax [orig:119 D.6421 ] [119])
        (sign_extend:DI (reg:SI 0 ax [346]))) sim2fitman_sup.cpp:275 142 {*extendsidi2_rex64}
     (nil))
(insn 99 98 801 3 (parallel [
            (set (reg:DI 0 ax [orig:120 D.6421 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:120 D.6421 ] [120])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:275 497 {*ashldi3_1}
     (nil))
(insn 801 99 100 3 (set (reg:DI 1 dx [orig:120 D.6421 ] [120])
        (reg:DI 0 ax [orig:120 D.6421 ] [120])) sim2fitman_sup.cpp:275 89 {*movdi_internal}
     (nil))
(insn 100 801 101 3 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:275 89 {*movdi_internal}
     (nil))
(insn 101 100 102 3 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.6422 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 D.6421 ] [120])
                    (reg/f:DI 0 ax [347])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:275 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.6421 ] [120]))
        (nil)))
(insn 102 101 103 3 (set (reg:SF 0 ax [348])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:275 129 {*movsf_internal}
     (nil))
(insn 103 102 104 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:121 D.6422 ] [121])
                (const_int 376 [0x178])) [0 _49->vox1+0 S4 A64])
        (reg:SF 0 ax [348])) sim2fitman_sup.cpp:275 129 {*movsf_internal}
     (nil))
(insn 104 103 105 3 (set (reg:SI 0 ax [349])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:276 90 {*movsi_internal}
     (nil))
(insn 105 104 106 3 (set (reg:DI 0 ax [orig:122 D.6421 ] [122])
        (sign_extend:DI (reg:SI 0 ax [349]))) sim2fitman_sup.cpp:276 142 {*extendsidi2_rex64}
     (nil))
(insn 106 105 803 3 (parallel [
            (set (reg:DI 0 ax [orig:123 D.6421 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:123 D.6421 ] [123])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:276 497 {*ashldi3_1}
     (nil))
(insn 803 106 107 3 (set (reg:DI 1 dx [orig:123 D.6421 ] [123])
        (reg:DI 0 ax [orig:123 D.6421 ] [123])) sim2fitman_sup.cpp:276 89 {*movdi_internal}
     (nil))
(insn 107 803 108 3 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:276 89 {*movdi_internal}
     (nil))
(insn 108 107 109 3 (parallel [
            (set (reg/f:DI 1 dx [orig:124 D.6422 ] [124])
                (plus:DI (reg:DI 1 dx [orig:123 D.6421 ] [123])
                    (reg/f:DI 0 ax [350])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:276 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.6421 ] [123]))
        (nil)))
(insn 109 108 110 3 (set (reg:SF 0 ax [351])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:276 129 {*movsf_internal}
     (nil))
(insn 110 109 111 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:124 D.6422 ] [124])
                (const_int 380 [0x17c])) [0 _52->vox2+0 S4 A32])
        (reg:SF 0 ax [351])) sim2fitman_sup.cpp:276 129 {*movsf_internal}
     (nil))
(insn 111 110 112 3 (set (reg:SI 0 ax [352])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:277 90 {*movsi_internal}
     (nil))
(insn 112 111 113 3 (set (reg:DI 0 ax [orig:125 D.6421 ] [125])
        (sign_extend:DI (reg:SI 0 ax [352]))) sim2fitman_sup.cpp:277 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 805 3 (parallel [
            (set (reg:DI 0 ax [orig:126 D.6421 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:126 D.6421 ] [126])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:277 497 {*ashldi3_1}
     (nil))
(insn 805 113 114 3 (set (reg:DI 1 dx [orig:126 D.6421 ] [126])
        (reg:DI 0 ax [orig:126 D.6421 ] [126])) sim2fitman_sup.cpp:277 89 {*movdi_internal}
     (nil))
(insn 114 805 115 3 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:277 89 {*movdi_internal}
     (nil))
(insn 115 114 116 3 (parallel [
            (set (reg/f:DI 1 dx [orig:127 D.6422 ] [127])
                (plus:DI (reg:DI 1 dx [orig:126 D.6421 ] [126])
                    (reg/f:DI 0 ax [353])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:277 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6421 ] [126]))
        (nil)))
(insn 116 115 117 3 (set (reg:SF 0 ax [354])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:277 129 {*movsf_internal}
     (nil))
(insn 117 116 118 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:127 D.6422 ] [127])
                (const_int 384 [0x180])) [0 _55->vox3+0 S4 A64])
        (reg:SF 0 ax [354])) sim2fitman_sup.cpp:277 129 {*movsf_internal}
     (nil))
(insn 118 117 119 3 (set (reg:SI 0 ax [355])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:278 90 {*movsi_internal}
     (nil))
(insn 119 118 120 3 (set (reg:DI 0 ax [orig:128 D.6421 ] [128])
        (sign_extend:DI (reg:SI 0 ax [355]))) sim2fitman_sup.cpp:278 142 {*extendsidi2_rex64}
     (nil))
(insn 120 119 807 3 (parallel [
            (set (reg:DI 0 ax [orig:129 D.6421 ] [129])
                (ashift:DI (reg:DI 0 ax [orig:129 D.6421 ] [129])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:278 497 {*ashldi3_1}
     (nil))
(insn 807 120 121 3 (set (reg:DI 1 dx [orig:129 D.6421 ] [129])
        (reg:DI 0 ax [orig:129 D.6421 ] [129])) sim2fitman_sup.cpp:278 89 {*movdi_internal}
     (nil))
(insn 121 807 122 3 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:278 89 {*movdi_internal}
     (nil))
(insn 122 121 123 3 (parallel [
            (set (reg/f:DI 1 dx [orig:130 D.6422 ] [130])
                (plus:DI (reg:DI 1 dx [orig:129 D.6421 ] [129])
                    (reg/f:DI 0 ax [356])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:278 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.6421 ] [129]))
        (nil)))
(insn 123 122 124 3 (set (reg:DF 0 ax [357])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC17") [flags 0x2]) [0  S8 A64])) sim2fitman_sup.cpp:278 128 {*movdf_internal}
     (nil))
(insn 124 123 125 3 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [orig:130 D.6422 ] [130])
                (const_int 392 [0x188])) [0 _58->span+0 S8 A64])
        (reg:DF 0 ax [357])) sim2fitman_sup.cpp:278 128 {*movdf_internal}
     (nil))
(insn 125 124 126 3 (set (reg:SI 0 ax [358])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:279 90 {*movsi_internal}
     (nil))
(insn 126 125 127 3 (set (reg:DI 0 ax [orig:131 D.6421 ] [131])
        (sign_extend:DI (reg:SI 0 ax [358]))) sim2fitman_sup.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 127 126 809 3 (parallel [
            (set (reg:DI 0 ax [orig:132 D.6421 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6421 ] [132])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:279 497 {*ashldi3_1}
     (nil))
(insn 809 127 128 3 (set (reg:DI 1 dx [orig:132 D.6421 ] [132])
        (reg:DI 0 ax [orig:132 D.6421 ] [132])) sim2fitman_sup.cpp:279 89 {*movdi_internal}
     (nil))
(insn 128 809 129 3 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:279 89 {*movdi_internal}
     (nil))
(insn 129 128 130 3 (parallel [
            (set (reg/f:DI 1 dx [orig:133 D.6422 ] [133])
                (plus:DI (reg:DI 1 dx [orig:132 D.6421 ] [132])
                    (reg/f:DI 0 ax [359])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:279 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:132 D.6421 ] [132]))
        (nil)))
(insn 130 129 131 3 (set (reg:SF 0 ax [360])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:279 129 {*movsf_internal}
     (nil))
(insn 131 130 132 3 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:133 D.6422 ] [133])
                (const_int 400 [0x190])) [0 _61->vtheta+0 S4 A64])
        (reg:SF 0 ax [360])) sim2fitman_sup.cpp:279 129 {*movsf_internal}
     (nil))
(insn 132 131 133 3 (set (reg:SI 0 ax [361])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:280 90 {*movsi_internal}
     (nil))
(insn 133 132 134 3 (set (reg:DI 0 ax [orig:134 D.6421 ] [134])
        (sign_extend:DI (reg:SI 0 ax [361]))) sim2fitman_sup.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 134 133 811 3 (parallel [
            (set (reg:DI 0 ax [orig:135 D.6421 ] [135])
                (ashift:DI (reg:DI 0 ax [orig:135 D.6421 ] [135])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:280 497 {*ashldi3_1}
     (nil))
(insn 811 134 135 3 (set (reg:DI 1 dx [orig:135 D.6421 ] [135])
        (reg:DI 0 ax [orig:135 D.6421 ] [135])) sim2fitman_sup.cpp:280 89 {*movdi_internal}
     (nil))
(insn 135 811 136 3 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:280 89 {*movdi_internal}
     (nil))
(insn 136 135 137 3 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.6422 ] [136])
                (plus:DI (reg/f:DI 0 ax [362])
                    (reg:DI 1 dx [orig:135 D.6421 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:280 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.6421 ] [135]))
        (nil)))
(insn 137 136 138 3 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:136 D.6422 ] [136])
                (const_int 508 [0x1fc])) [0 _64->nex+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:280 90 {*movsi_internal}
     (nil))
(insn 138 137 761 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:285 90 {*movsi_internal}
     (nil))
(jump_insn 761 138 762 3 (set (pc)
        (label_ref 151)) sim2fitman_sup.cpp:285 636 {jump}
     (nil)
 -> 151)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 762 761 155)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 363 364 365 366
(code_label 155 762 141 4 53 "" [1 uses])
(note 141 155 142 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 143 4 (set (reg:SI 0 ax [363])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:286 90 {*movsi_internal}
     (nil))
(insn 143 142 144 4 (set (reg:DI 0 ax [orig:138 D.6421 ] [138])
        (sign_extend:DI (reg:SI 0 ax [363]))) sim2fitman_sup.cpp:286 142 {*extendsidi2_rex64}
     (nil))
(insn 144 143 813 4 (parallel [
            (set (reg:DI 0 ax [orig:139 D.6421 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:139 D.6421 ] [139])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:286 497 {*ashldi3_1}
     (nil))
(insn 813 144 145 4 (set (reg:DI 1 dx [orig:139 D.6421 ] [139])
        (reg:DI 0 ax [orig:139 D.6421 ] [139])) sim2fitman_sup.cpp:286 89 {*movdi_internal}
     (nil))
(insn 145 813 146 4 (set (reg/f:DI 0 ax [364])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:286 89 {*movdi_internal}
     (nil))
(insn 146 145 147 4 (parallel [
            (set (reg/f:DI 1 dx [orig:140 D.6422 ] [140])
                (plus:DI (reg:DI 1 dx [orig:139 D.6421 ] [139])
                    (reg/f:DI 0 ax [364])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:286 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.6421 ] [139]))
        (nil)))
(insn 147 146 148 4 (set (reg:SI 0 ax [366])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:286 90 {*movsi_internal}
     (nil))
(insn 148 147 149 4 (set (reg:DI 0 ax [365])
        (sign_extend:DI (reg:SI 0 ax [366]))) sim2fitman_sup.cpp:286 142 {*extendsidi2_rex64}
     (nil))
(insn 149 148 150 4 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:140 D.6422 ] [140])
                    (reg:DI 0 ax [365]))
                (const_int 388 [0x184])) [0 _69->padding_1 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:286 93 {*movqi_internal}
     (nil))
(insn 150 149 151 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:285 220 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 367
(code_label 151 150 152 5 52 "" [1 uses])
(note 152 151 153 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 153 152 154 5 (set (reg:SI 0 ax [367])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:285 90 {*movsi_internal}
     (nil))
(insn 154 153 156 5 (set (reg:DI 0 ax [orig:137 D.6421 ] [137])
        (sign_extend:DI (reg:SI 0 ax [367]))) sim2fitman_sup.cpp:285 142 {*extendsidi2_rex64}
     (nil))
(insn 156 154 157 5 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:137 D.6421 ] [137])
            (const_int 4 [0x4]))) sim2fitman_sup.cpp:285 8 {*cmpdi_1}
     (nil))
(jump_insn 157 156 158 5 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 155)
            (pc))) sim2fitman_sup.cpp:285 596 {*jcc_1}
     (nil)
 -> 155)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 158 157 159 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 763 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:290 90 {*movsi_internal}
     (nil))
(jump_insn 763 159 764 6 (set (pc)
        (label_ref 172)) sim2fitman_sup.cpp:290 636 {jump}
     (nil)
 -> 172)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 764 763 176)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 144 368 369 370 371
(code_label 176 764 162 7 55 "" [1 uses])
(note 162 176 163 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 7 (set (reg:SI 0 ax [368])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:291 90 {*movsi_internal}
     (nil))
(insn 164 163 165 7 (set (reg:DI 0 ax [orig:142 D.6421 ] [142])
        (sign_extend:DI (reg:SI 0 ax [368]))) sim2fitman_sup.cpp:291 142 {*extendsidi2_rex64}
     (nil))
(insn 165 164 815 7 (parallel [
            (set (reg:DI 0 ax [orig:143 D.6421 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:143 D.6421 ] [143])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:291 497 {*ashldi3_1}
     (nil))
(insn 815 165 166 7 (set (reg:DI 1 dx [orig:143 D.6421 ] [143])
        (reg:DI 0 ax [orig:143 D.6421 ] [143])) sim2fitman_sup.cpp:291 89 {*movdi_internal}
     (nil))
(insn 166 815 167 7 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:291 89 {*movdi_internal}
     (nil))
(insn 167 166 168 7 (parallel [
            (set (reg/f:DI 1 dx [orig:144 D.6422 ] [144])
                (plus:DI (reg:DI 1 dx [orig:143 D.6421 ] [143])
                    (reg/f:DI 0 ax [369])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:291 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.6421 ] [143]))
        (nil)))
(insn 168 167 169 7 (set (reg:SI 0 ax [371])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:291 90 {*movsi_internal}
     (nil))
(insn 169 168 170 7 (set (reg:DI 0 ax [370])
        (sign_extend:DI (reg:SI 0 ax [371]))) sim2fitman_sup.cpp:291 142 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 7 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:144 D.6422 ] [144])
                    (reg:DI 0 ax [370]))
                (const_int 8 [0x8])) [0 _75->ex_datetime S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:291 93 {*movqi_internal}
     (nil))
(insn 171 170 172 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:290 220 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 372
(code_label 172 171 173 8 54 "" [1 uses])
(note 173 172 174 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 8 (set (reg:SI 0 ax [372])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:290 90 {*movsi_internal}
     (nil))
(insn 175 174 177 8 (set (reg:DI 0 ax [orig:141 D.6421 ] [141])
        (sign_extend:DI (reg:SI 0 ax [372]))) sim2fitman_sup.cpp:290 142 {*extendsidi2_rex64}
     (nil))
(insn 177 175 178 8 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:141 D.6421 ] [141])
            (const_int 52 [0x34]))) sim2fitman_sup.cpp:290 8 {*cmpdi_1}
     (nil))
(jump_insn 178 177 179 8 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 176)
            (pc))) sim2fitman_sup.cpp:290 596 {*jcc_1}
     (nil)
 -> 176)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 146 147 148 373 374
(note 179 178 180 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 9 (set (reg:SI 0 ax [373])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:293 90 {*movsi_internal}
     (nil))
(insn 181 180 182 9 (set (reg:DI 0 ax [orig:145 D.6421 ] [145])
        (sign_extend:DI (reg:SI 0 ax [373]))) sim2fitman_sup.cpp:293 142 {*extendsidi2_rex64}
     (nil))
(insn 182 181 817 9 (parallel [
            (set (reg:DI 0 ax [orig:146 D.6421 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:146 D.6421 ] [146])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:293 497 {*ashldi3_1}
     (nil))
(insn 817 182 183 9 (set (reg:DI 1 dx [orig:146 D.6421 ] [146])
        (reg:DI 0 ax [orig:146 D.6421 ] [146])) sim2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 183 817 184 9 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 184 183 185 9 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6422 ] [147])
                (plus:DI (reg/f:DI 0 ax [374])
                    (reg:DI 1 dx [orig:146 D.6421 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:293 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:146 D.6421 ] [146]))
        (nil)))
(insn 185 184 186 9 (parallel [
            (set (reg/f:DI 0 ax [orig:148 D.6423 ] [148])
                (plus:DI (reg/f:DI 0 ax [orig:147 D.6422 ] [147])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:293 221 {*adddi_1}
     (nil))
(insn 186 185 818 9 (set (reg:DI 2 cx [558])
        (const_int 2334399942965096270 [0x2065746144206f4e])) sim2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 818 186 187 9 (set (mem:DI (reg/f:DI 0 ax [orig:148 D.6423 ] [148]) [0 MEM[(void *)_80]+0 S8 A8])
        (reg:DI 2 cx [558])) sim2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 187 818 819 9 (set (reg:DI 4 si [559])
        (const_int 7809911822066218561 [0x6c62616c69617641])) sim2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 819 187 188 9 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:148 D.6423 ] [148])
                (const_int 8 [0x8])) [0 MEM[(void *)_80]+8 S8 A8])
        (reg:DI 4 si [559])) sim2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 188 819 189 9 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:148 D.6423 ] [148])
                (const_int 16 [0x10])) [0 MEM[(void *)_80]+16 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:293 92 {*movhi_internal}
     (nil))
(insn 189 188 765 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:296 90 {*movsi_internal}
     (nil))
(jump_insn 765 189 766 9 (set (pc)
        (label_ref 202)) sim2fitman_sup.cpp:296 636 {jump}
     (nil)
 -> 202)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 766 765 206)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 152 375 376 377 378
(code_label 206 766 192 10 57 "" [1 uses])
(note 192 206 193 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 193 192 194 10 (set (reg:SI 0 ax [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:297 90 {*movsi_internal}
     (nil))
(insn 194 193 195 10 (set (reg:DI 0 ax [orig:150 D.6421 ] [150])
        (sign_extend:DI (reg:SI 0 ax [375]))) sim2fitman_sup.cpp:297 142 {*extendsidi2_rex64}
     (nil))
(insn 195 194 821 10 (parallel [
            (set (reg:DI 0 ax [orig:151 D.6421 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:151 D.6421 ] [151])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:297 497 {*ashldi3_1}
     (nil))
(insn 821 195 196 10 (set (reg:DI 1 dx [orig:151 D.6421 ] [151])
        (reg:DI 0 ax [orig:151 D.6421 ] [151])) sim2fitman_sup.cpp:297 89 {*movdi_internal}
     (nil))
(insn 196 821 197 10 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:297 89 {*movdi_internal}
     (nil))
(insn 197 196 198 10 (parallel [
            (set (reg/f:DI 1 dx [orig:152 D.6422 ] [152])
                (plus:DI (reg:DI 1 dx [orig:151 D.6421 ] [151])
                    (reg/f:DI 0 ax [376])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:297 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.6421 ] [151]))
        (nil)))
(insn 198 197 199 10 (set (reg:SI 0 ax [378])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:297 90 {*movsi_internal}
     (nil))
(insn 199 198 200 10 (set (reg:DI 0 ax [377])
        (sign_extend:DI (reg:SI 0 ax [378]))) sim2fitman_sup.cpp:297 142 {*extendsidi2_rex64}
     (nil))
(insn 200 199 201 10 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:152 D.6422 ] [152])
                    (reg:DI 0 ax [377]))
                (const_int 60 [0x3c])) [0 _85->file_name S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:297 93 {*movqi_internal}
     (nil))
(insn 201 200 202 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:296 220 {*addsi_1}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 379
(code_label 202 201 203 11 56 "" [1 uses])
(note 203 202 204 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 204 203 205 11 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:296 90 {*movsi_internal}
     (nil))
(insn 205 204 207 11 (set (reg:DI 0 ax [orig:149 D.6421 ] [149])
        (sign_extend:DI (reg:SI 0 ax [379]))) sim2fitman_sup.cpp:296 142 {*extendsidi2_rex64}
     (nil))
(insn 207 205 208 11 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:149 D.6421 ] [149])
            (const_int 260 [0x104]))) sim2fitman_sup.cpp:296 8 {*cmpdi_1}
     (nil))
(jump_insn 208 207 209 11 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) sim2fitman_sup.cpp:296 596 {*jcc_1}
     (nil)
 -> 206)
;;  succ:       10
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 154 155 156 380 381
(note 209 208 210 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 12 (set (reg:SI 0 ax [380])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:299 90 {*movsi_internal}
     (nil))
(insn 211 210 212 12 (set (reg:DI 0 ax [orig:153 D.6421 ] [153])
        (sign_extend:DI (reg:SI 0 ax [380]))) sim2fitman_sup.cpp:299 142 {*extendsidi2_rex64}
     (nil))
(insn 212 211 823 12 (parallel [
            (set (reg:DI 0 ax [orig:154 D.6421 ] [154])
                (ashift:DI (reg:DI 0 ax [orig:154 D.6421 ] [154])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:299 497 {*ashldi3_1}
     (nil))
(insn 823 212 213 12 (set (reg:DI 1 dx [orig:154 D.6421 ] [154])
        (reg:DI 0 ax [orig:154 D.6421 ] [154])) sim2fitman_sup.cpp:299 89 {*movdi_internal}
     (nil))
(insn 213 823 214 12 (set (reg/f:DI 0 ax [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:299 89 {*movdi_internal}
     (nil))
(insn 214 213 215 12 (parallel [
            (set (reg/f:DI 0 ax [orig:155 D.6422 ] [155])
                (plus:DI (reg/f:DI 0 ax [381])
                    (reg:DI 1 dx [orig:154 D.6421 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:299 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:154 D.6421 ] [154]))
        (nil)))
(insn 215 214 216 12 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.6424 ] [156])
                (plus:DI (reg/f:DI 0 ax [orig:155 D.6422 ] [155])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:299 221 {*adddi_1}
     (nil))
(insn 216 215 824 12 (set (reg:DI 5 di [562])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_sup.cpp:299 89 {*movdi_internal}
     (nil))
(insn 824 216 217 12 (set (mem:DI (reg/f:DI 0 ax [orig:156 D.6424 ] [156]) [0 MEM[(void *)_90]+0 S8 A8])
        (reg:DI 5 di [562])) sim2fitman_sup.cpp:299 89 {*movdi_internal}
     (nil))
(insn 217 824 825 12 (set (reg:DI 2 cx [563])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_sup.cpp:299 89 {*movdi_internal}
     (nil))
(insn 825 217 218 12 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:156 D.6424 ] [156])
                (const_int 8 [0x8])) [0 MEM[(void *)_90]+8 S8 A8])
        (reg:DI 2 cx [563])) sim2fitman_sup.cpp:299 89 {*movdi_internal}
     (nil))
(insn 218 825 219 12 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:156 D.6424 ] [156])
                (const_int 16 [0x10])) [0 MEM[(void *)_90]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_sup.cpp:299 90 {*movsi_internal}
     (nil))
(insn 219 218 220 12 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:156 D.6424 ] [156])
                (const_int 20 [0x14])) [0 MEM[(void *)_90]+20 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:299 92 {*movhi_internal}
     (nil))
(insn 220 219 767 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:302 90 {*movsi_internal}
     (nil))
(jump_insn 767 220 768 12 (set (pc)
        (label_ref 233)) sim2fitman_sup.cpp:302 636 {jump}
     (nil)
 -> 233)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 768 767 237)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 160 382 383 384 385
(code_label 237 768 223 13 59 "" [1 uses])
(note 223 237 224 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 13 (set (reg:SI 0 ax [382])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:303 90 {*movsi_internal}
     (nil))
(insn 225 224 226 13 (set (reg:DI 0 ax [orig:158 D.6421 ] [158])
        (sign_extend:DI (reg:SI 0 ax [382]))) sim2fitman_sup.cpp:303 142 {*extendsidi2_rex64}
     (nil))
(insn 226 225 827 13 (parallel [
            (set (reg:DI 0 ax [orig:159 D.6421 ] [159])
                (ashift:DI (reg:DI 0 ax [orig:159 D.6421 ] [159])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:303 497 {*ashldi3_1}
     (nil))
(insn 827 226 227 13 (set (reg:DI 1 dx [orig:159 D.6421 ] [159])
        (reg:DI 0 ax [orig:159 D.6421 ] [159])) sim2fitman_sup.cpp:303 89 {*movdi_internal}
     (nil))
(insn 227 827 228 13 (set (reg/f:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:303 89 {*movdi_internal}
     (nil))
(insn 228 227 229 13 (parallel [
            (set (reg/f:DI 1 dx [orig:160 D.6422 ] [160])
                (plus:DI (reg:DI 1 dx [orig:159 D.6421 ] [159])
                    (reg/f:DI 0 ax [383])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:303 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.6421 ] [159]))
        (nil)))
(insn 229 228 230 13 (set (reg:SI 0 ax [385])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:303 90 {*movsi_internal}
     (nil))
(insn 230 229 231 13 (set (reg:DI 0 ax [384])
        (sign_extend:DI (reg:SI 0 ax [385]))) sim2fitman_sup.cpp:303 142 {*extendsidi2_rex64}
     (nil))
(insn 231 230 232 13 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:160 D.6422 ] [160])
                    (reg:DI 0 ax [384]))
                (const_int 404 [0x194])) [0 _95->hospname S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:303 93 {*movqi_internal}
     (nil))
(insn 232 231 233 13 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:302 220 {*addsi_1}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 386
(code_label 233 232 234 14 58 "" [1 uses])
(note 234 233 235 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 235 234 236 14 (set (reg:SI 0 ax [386])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:302 90 {*movsi_internal}
     (nil))
(insn 236 235 238 14 (set (reg:DI 0 ax [orig:157 D.6421 ] [157])
        (sign_extend:DI (reg:SI 0 ax [386]))) sim2fitman_sup.cpp:302 142 {*extendsidi2_rex64}
     (nil))
(insn 238 236 239 14 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:157 D.6421 ] [157])
            (const_int 36 [0x24]))) sim2fitman_sup.cpp:302 8 {*cmpdi_1}
     (nil))
(jump_insn 239 238 240 14 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 237)
            (pc))) sim2fitman_sup.cpp:302 596 {*jcc_1}
     (nil)
 -> 237)
;;  succ:       13
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 161 162 163 164 387 388
(note 240 239 241 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 15 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:305 90 {*movsi_internal}
     (nil))
(insn 242 241 243 15 (set (reg:DI 0 ax [orig:161 D.6421 ] [161])
        (sign_extend:DI (reg:SI 0 ax [387]))) sim2fitman_sup.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 243 242 829 15 (parallel [
            (set (reg:DI 0 ax [orig:162 D.6421 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:162 D.6421 ] [162])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:305 497 {*ashldi3_1}
     (nil))
(insn 829 243 244 15 (set (reg:DI 1 dx [orig:162 D.6421 ] [162])
        (reg:DI 0 ax [orig:162 D.6421 ] [162])) sim2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 244 829 245 15 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 245 244 246 15 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.6422 ] [163])
                (plus:DI (reg/f:DI 0 ax [388])
                    (reg:DI 1 dx [orig:162 D.6421 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:305 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.6421 ] [162]))
        (nil)))
(insn 246 245 247 15 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.6425 ] [164])
                (plus:DI (reg/f:DI 0 ax [orig:163 D.6422 ] [163])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:305 221 {*adddi_1}
     (nil))
(insn 247 246 830 15 (set (reg:DI 4 si [566])
        (const_int 7597699493162676046 [0x6970736f48206f4e])) sim2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 830 247 248 15 (set (mem:DI (reg/f:DI 0 ax [orig:164 D.6425 ] [164]) [0 MEM[(void *)_100]+0 S8 A8])
        (reg:DI 4 si [566])) sim2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 248 830 831 15 (set (reg:DI 5 di [567])
        (const_int 7308604758471500148 [0x656d614e206c6174])) sim2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 831 248 249 15 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:164 D.6425 ] [164])
                (const_int 8 [0x8])) [0 MEM[(void *)_100]+8 S8 A8])
        (reg:DI 5 di [567])) sim2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 249 831 832 15 (set (reg:DI 2 cx [568])
        (const_int 7089066488320377120 [0x62616c6961764120])) sim2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 832 249 250 15 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:164 D.6425 ] [164])
                (const_int 16 [0x10])) [0 MEM[(void *)_100]+16 S8 A8])
        (reg:DI 2 cx [568])) sim2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 250 832 251 15 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:164 D.6425 ] [164])
                (const_int 24 [0x18])) [0 MEM[(void *)_100]+24 S2 A8])
        (const_int 25964 [0x656c])) sim2fitman_sup.cpp:305 92 {*movhi_internal}
     (nil))
(insn 251 250 252 15 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:164 D.6425 ] [164])
                (const_int 26 [0x1a])) [0 MEM[(void *)_100]+26 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:305 93 {*movqi_internal}
     (nil))
(insn 252 251 769 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:308 90 {*movsi_internal}
     (nil))
(jump_insn 769 252 770 15 (set (pc)
        (label_ref 265)) sim2fitman_sup.cpp:308 636 {jump}
     (nil)
 -> 265)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 770 769 269)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 167 168 389 390 391 392
(code_label 269 770 255 16 61 "" [1 uses])
(note 255 269 256 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 16 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:309 90 {*movsi_internal}
     (nil))
(insn 257 256 258 16 (set (reg:DI 0 ax [orig:166 D.6421 ] [166])
        (sign_extend:DI (reg:SI 0 ax [389]))) sim2fitman_sup.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 258 257 834 16 (parallel [
            (set (reg:DI 0 ax [orig:167 D.6421 ] [167])
                (ashift:DI (reg:DI 0 ax [orig:167 D.6421 ] [167])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:309 497 {*ashldi3_1}
     (nil))
(insn 834 258 259 16 (set (reg:DI 1 dx [orig:167 D.6421 ] [167])
        (reg:DI 0 ax [orig:167 D.6421 ] [167])) sim2fitman_sup.cpp:309 89 {*movdi_internal}
     (nil))
(insn 259 834 260 16 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:309 89 {*movdi_internal}
     (nil))
(insn 260 259 261 16 (parallel [
            (set (reg/f:DI 1 dx [orig:168 D.6422 ] [168])
                (plus:DI (reg:DI 1 dx [orig:167 D.6421 ] [167])
                    (reg/f:DI 0 ax [390])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:309 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:167 D.6421 ] [167]))
        (nil)))
(insn 261 260 262 16 (set (reg:SI 0 ax [392])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:309 90 {*movsi_internal}
     (nil))
(insn 262 261 263 16 (set (reg:DI 0 ax [391])
        (sign_extend:DI (reg:SI 0 ax [392]))) sim2fitman_sup.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 263 262 264 16 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:168 D.6422 ] [168])
                    (reg:DI 0 ax [391]))
                (const_int 440 [0x1b8])) [0 _105->patname S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:309 93 {*movqi_internal}
     (nil))
(insn 264 263 265 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:308 220 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              15 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165 393
(code_label 265 264 266 17 60 "" [1 uses])
(note 266 265 267 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 17 (set (reg:SI 0 ax [393])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:308 90 {*movsi_internal}
     (nil))
(insn 268 267 270 17 (set (reg:DI 0 ax [orig:165 D.6421 ] [165])
        (sign_extend:DI (reg:SI 0 ax [393]))) sim2fitman_sup.cpp:308 142 {*extendsidi2_rex64}
     (nil))
(insn 270 268 271 17 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:165 D.6421 ] [165])
            (const_int 28 [0x1c]))) sim2fitman_sup.cpp:308 8 {*cmpdi_1}
     (nil))
(jump_insn 271 270 272 17 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 269)
            (pc))) sim2fitman_sup.cpp:308 596 {*jcc_1}
     (nil)
 -> 269)
;;  succ:       16
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169 170 171 172 394 395
(note 272 271 273 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 273 272 274 18 (set (reg:SI 0 ax [394])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:311 90 {*movsi_internal}
     (nil))
(insn 274 273 275 18 (set (reg:DI 0 ax [orig:169 D.6421 ] [169])
        (sign_extend:DI (reg:SI 0 ax [394]))) sim2fitman_sup.cpp:311 142 {*extendsidi2_rex64}
     (nil))
(insn 275 274 836 18 (parallel [
            (set (reg:DI 0 ax [orig:170 D.6421 ] [170])
                (ashift:DI (reg:DI 0 ax [orig:170 D.6421 ] [170])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:311 497 {*ashldi3_1}
     (nil))
(insn 836 275 276 18 (set (reg:DI 1 dx [orig:170 D.6421 ] [170])
        (reg:DI 0 ax [orig:170 D.6421 ] [170])) sim2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 276 836 277 18 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 277 276 278 18 (parallel [
            (set (reg/f:DI 0 ax [orig:171 D.6422 ] [171])
                (plus:DI (reg/f:DI 0 ax [395])
                    (reg:DI 1 dx [orig:170 D.6421 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:311 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:170 D.6421 ] [170]))
        (nil)))
(insn 278 277 279 18 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.6426 ] [172])
                (plus:DI (reg/f:DI 0 ax [orig:171 D.6422 ] [171])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:311 221 {*adddi_1}
     (nil))
(insn 279 278 837 18 (set (reg:DI 4 si [571])
        (const_int 7307499831690293070 [0x6569746150206f4e])) sim2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 837 279 280 18 (set (mem:DI (reg/f:DI 0 ax [orig:172 D.6426 ] [172]) [0 MEM[(void *)_110]+0 S8 A8])
        (reg:DI 4 si [571])) sim2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 280 837 838 18 (set (reg:DI 5 di [572])
        (const_int 2334392246551475310 [0x20656d614e20746e])) sim2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 838 280 281 18 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:172 D.6426 ] [172])
                (const_int 8 [0x8])) [0 MEM[(void *)_110]+8 S8 A8])
        (reg:DI 5 di [572])) sim2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 281 838 839 18 (set (reg:DI 2 cx [573])
        (const_int 7809911822066218561 [0x6c62616c69617641])) sim2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 839 281 282 18 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:172 D.6426 ] [172])
                (const_int 16 [0x10])) [0 MEM[(void *)_110]+16 S8 A8])
        (reg:DI 2 cx [573])) sim2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 282 839 283 18 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:172 D.6426 ] [172])
                (const_int 24 [0x18])) [0 MEM[(void *)_110]+24 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:311 92 {*movhi_internal}
     (nil))
(insn 283 282 771 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:314 90 {*movsi_internal}
     (nil))
(jump_insn 771 283 772 18 (set (pc)
        (label_ref 296)) sim2fitman_sup.cpp:314 636 {jump}
     (nil)
 -> 296)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 772 771 300)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 174 175 176 396 397 398 399
(code_label 300 772 286 19 63 "" [1 uses])
(note 286 300 287 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 287 286 288 19 (set (reg:SI 0 ax [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:315 90 {*movsi_internal}
     (nil))
(insn 288 287 289 19 (set (reg:DI 0 ax [orig:174 D.6421 ] [174])
        (sign_extend:DI (reg:SI 0 ax [396]))) sim2fitman_sup.cpp:315 142 {*extendsidi2_rex64}
     (nil))
(insn 289 288 841 19 (parallel [
            (set (reg:DI 0 ax [orig:175 D.6421 ] [175])
                (ashift:DI (reg:DI 0 ax [orig:175 D.6421 ] [175])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:315 497 {*ashldi3_1}
     (nil))
(insn 841 289 290 19 (set (reg:DI 1 dx [orig:175 D.6421 ] [175])
        (reg:DI 0 ax [orig:175 D.6421 ] [175])) sim2fitman_sup.cpp:315 89 {*movdi_internal}
     (nil))
(insn 290 841 291 19 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:315 89 {*movdi_internal}
     (nil))
(insn 291 290 292 19 (parallel [
            (set (reg/f:DI 1 dx [orig:176 D.6422 ] [176])
                (plus:DI (reg:DI 1 dx [orig:175 D.6421 ] [175])
                    (reg/f:DI 0 ax [397])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:315 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.6421 ] [175]))
        (nil)))
(insn 292 291 293 19 (set (reg:SI 0 ax [399])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:315 90 {*movsi_internal}
     (nil))
(insn 293 292 294 19 (set (reg:DI 0 ax [398])
        (sign_extend:DI (reg:SI 0 ax [399]))) sim2fitman_sup.cpp:315 142 {*extendsidi2_rex64}
     (nil))
(insn 294 293 295 19 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:176 D.6422 ] [176])
                    (reg:DI 0 ax [398]))
                (const_int 468 [0x1d4])) [0 _115->psdname S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:315 93 {*movqi_internal}
     (nil))
(insn 295 294 296 19 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:314 220 {*addsi_1}
     (nil))
;;  succ:       20 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU,DFS_BACK)
;;              18 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 173 400
(code_label 296 295 297 20 62 "" [1 uses])
(note 297 296 298 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 20 (set (reg:SI 0 ax [400])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:314 90 {*movsi_internal}
     (nil))
(insn 299 298 301 20 (set (reg:DI 0 ax [orig:173 D.6421 ] [173])
        (sign_extend:DI (reg:SI 0 ax [400]))) sim2fitman_sup.cpp:314 142 {*extendsidi2_rex64}
     (nil))
(insn 301 299 302 20 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:173 D.6421 ] [173])
            (const_int 40 [0x28]))) sim2fitman_sup.cpp:314 8 {*cmpdi_1}
     (nil))
(jump_insn 302 301 303 20 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 300)
            (pc))) sim2fitman_sup.cpp:314 596 {*jcc_1}
     (nil)
 -> 300)
;;  succ:       19
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525
(note 303 302 304 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 21 (set (reg:SI 0 ax [401])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:317 90 {*movsi_internal}
     (nil))
(insn 305 304 306 21 (set (reg:DI 0 ax [orig:177 D.6421 ] [177])
        (sign_extend:DI (reg:SI 0 ax [401]))) sim2fitman_sup.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 306 305 843 21 (parallel [
            (set (reg:DI 0 ax [orig:178 D.6421 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:178 D.6421 ] [178])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:317 497 {*ashldi3_1}
     (nil))
(insn 843 306 307 21 (set (reg:DI 1 dx [orig:178 D.6421 ] [178])
        (reg:DI 0 ax [orig:178 D.6421 ] [178])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 307 843 308 21 (set (reg/f:DI 0 ax [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 308 307 309 21 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.6422 ] [179])
                (plus:DI (reg/f:DI 0 ax [402])
                    (reg:DI 1 dx [orig:178 D.6421 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:317 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:178 D.6421 ] [178]))
        (nil)))
(insn 309 308 310 21 (parallel [
            (set (reg/f:DI 0 ax [orig:180 D.6427 ] [180])
                (plus:DI (reg/f:DI 0 ax [orig:179 D.6422 ] [179])
                    (const_int 468 [0x1d4])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:317 221 {*adddi_1}
     (nil))
(insn 310 309 844 21 (set (reg:DI 4 si [576])
        (const_int 7310305871263723342 [0x65736c7550206f4e])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 844 310 311 21 (set (mem:DI (reg/f:DI 0 ax [orig:180 D.6427 ] [180]) [0 MEM[(void *)_120]+0 S8 A8])
        (reg:DI 4 si [576])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 311 844 845 21 (set (reg:DI 5 di [577])
        (const_int 7164775612281082656 [0x636e657571655320])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 845 311 312 21 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:180 D.6427 ] [180])
                (const_int 8 [0x8])) [0 MEM[(void *)_120]+8 S8 A8])
        (reg:DI 5 di [577])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 312 845 846 21 (set (reg:DI 2 cx [578])
        (const_int 4692862332178407525 [0x4120656d614e2065])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 846 312 313 21 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:180 D.6427 ] [180])
                (const_int 16 [0x10])) [0 MEM[(void *)_120]+16 S8 A8])
        (reg:DI 2 cx [578])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 313 846 847 21 (set (reg:DI 4 si [579])
        (const_int 7308324465885667702 [0x656c62616c696176])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 847 313 314 21 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:180 D.6427 ] [180])
                (const_int 24 [0x18])) [0 MEM[(void *)_120]+24 S8 A8])
        (reg:DI 4 si [579])) sim2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 314 847 315 21 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:180 D.6427 ] [180])
                (const_int 32 [0x20])) [0 MEM[(void *)_120]+32 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:317 93 {*movqi_internal}
     (nil))
(insn 315 314 316 21 (set (reg:SI 0 ax [403])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:321 90 {*movsi_internal}
     (nil))
(insn 316 315 317 21 (set (reg:DI 1 dx [orig:181 D.6421 ] [181])
        (sign_extend:DI (reg:SI 0 ax [403]))) sim2fitman_sup.cpp:321 142 {*extendsidi2_rex64}
     (nil))
(insn 317 316 318 21 (set (reg:DI 0 ax [404])
        (reg:DI 1 dx [orig:181 D.6421 ] [181])) sim2fitman_sup.cpp:321 89 {*movdi_internal}
     (nil))
(insn 318 317 319 21 (parallel [
            (set (reg:DI 0 ax [404])
                (ashift:DI (reg:DI 0 ax [404])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:321 497 {*ashldi3_1}
     (nil))
(insn 319 318 320 21 (parallel [
            (set (reg:DI 0 ax [404])
                (plus:DI (reg:DI 0 ax [404])
                    (reg:DI 1 dx [orig:181 D.6421 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:321 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:181 D.6421 ] [181])
            (const_int 9 [0x9]))
        (nil)))
(insn 320 319 321 21 (parallel [
            (set (reg:DI 0 ax [404])
                (ashift:DI (reg:DI 0 ax [404])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:321 497 {*ashldi3_1}
     (nil))
(insn 321 320 322 21 (parallel [
            (set (reg:DI 0 ax [404])
                (plus:DI (reg:DI 0 ax [404])
                    (reg:DI 1 dx [orig:181 D.6421 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:321 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:181 D.6421 ] [181])
            (const_int 19 [0x13]))
        (nil)))
(insn 322 321 324 21 (parallel [
            (set (reg:DI 0 ax [405])
                (ashift:DI (reg:DI 0 ax [404])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:321 497 {*ashldi3_1}
     (nil))
(insn 324 322 325 21 (set (reg:DI 1 dx [orig:182 D.6421 ] [182])
        (reg:DI 0 ax [404])) sim2fitman_sup.cpp:321 89 {*movdi_internal}
     (nil))
(insn 325 324 326 21 (set (reg/f:DI 0 ax [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:321 89 {*movdi_internal}
     (nil))
(insn 326 325 327 21 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.6428 ] [183])
                (plus:DI (reg/f:DI 0 ax [406])
                    (reg:DI 1 dx [orig:182 D.6421 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:321 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.6421 ] [182]))
        (nil)))
(insn 327 326 328 21 (set (mem/j:SI (reg/f:DI 0 ax [orig:183 D.6428 ] [183]) [0 _124->fid_scale+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:321 90 {*movsi_internal}
     (nil))
(insn 328 327 329 21 (set (reg:SI 0 ax [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:322 90 {*movsi_internal}
     (nil))
(insn 329 328 330 21 (set (reg:DI 1 dx [orig:184 D.6421 ] [184])
        (sign_extend:DI (reg:SI 0 ax [407]))) sim2fitman_sup.cpp:322 142 {*extendsidi2_rex64}
     (nil))
(insn 330 329 331 21 (set (reg:DI 0 ax [408])
        (reg:DI 1 dx [orig:184 D.6421 ] [184])) sim2fitman_sup.cpp:322 89 {*movdi_internal}
     (nil))
(insn 331 330 332 21 (parallel [
            (set (reg:DI 0 ax [408])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:322 497 {*ashldi3_1}
     (nil))
(insn 332 331 333 21 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg:DI 0 ax [408])
                    (reg:DI 1 dx [orig:184 D.6421 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:322 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:184 D.6421 ] [184])
            (const_int 9 [0x9]))
        (nil)))
(insn 333 332 334 21 (parallel [
            (set (reg:DI 0 ax [408])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:322 497 {*ashldi3_1}
     (nil))
(insn 334 333 335 21 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg:DI 0 ax [408])
                    (reg:DI 1 dx [orig:184 D.6421 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:322 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:184 D.6421 ] [184])
            (const_int 19 [0x13]))
        (nil)))
(insn 335 334 337 21 (parallel [
            (set (reg:DI 0 ax [409])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:322 497 {*ashldi3_1}
     (nil))
(insn 337 335 338 21 (set (reg:DI 1 dx [orig:185 D.6421 ] [185])
        (reg:DI 0 ax [408])) sim2fitman_sup.cpp:322 89 {*movdi_internal}
     (nil))
(insn 338 337 339 21 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:322 89 {*movdi_internal}
     (nil))
(insn 339 338 340 21 (parallel [
            (set (reg/f:DI 1 dx [orig:186 D.6428 ] [186])
                (plus:DI (reg:DI 1 dx [orig:185 D.6421 ] [185])
                    (reg/f:DI 0 ax [410])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:322 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:185 D.6421 ] [185]))
        (nil)))
(insn 340 339 341 21 (set (reg:SF 0 ax [411])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:322 129 {*movsf_internal}
     (nil))
(insn 341 340 342 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:186 D.6428 ] [186])
                (const_int 4 [0x4])) [0 _127->scale_factor+0 S4 A32])
        (reg:SF 0 ax [411])) sim2fitman_sup.cpp:322 129 {*movsf_internal}
     (nil))
(insn 342 341 343 21 (set (reg:SI 0 ax [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:323 90 {*movsi_internal}
     (nil))
(insn 343 342 344 21 (set (reg:DI 1 dx [orig:187 D.6421 ] [187])
        (sign_extend:DI (reg:SI 0 ax [412]))) sim2fitman_sup.cpp:323 142 {*extendsidi2_rex64}
     (nil))
(insn 344 343 345 21 (set (reg:DI 0 ax [413])
        (reg:DI 1 dx [orig:187 D.6421 ] [187])) sim2fitman_sup.cpp:323 89 {*movdi_internal}
     (nil))
(insn 345 344 346 21 (parallel [
            (set (reg:DI 0 ax [413])
                (ashift:DI (reg:DI 0 ax [413])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:323 497 {*ashldi3_1}
     (nil))
(insn 346 345 347 21 (parallel [
            (set (reg:DI 0 ax [413])
                (plus:DI (reg:DI 0 ax [413])
                    (reg:DI 1 dx [orig:187 D.6421 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:323 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:187 D.6421 ] [187])
            (const_int 9 [0x9]))
        (nil)))
(insn 347 346 348 21 (parallel [
            (set (reg:DI 0 ax [413])
                (ashift:DI (reg:DI 0 ax [413])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:323 497 {*ashldi3_1}
     (nil))
(insn 348 347 349 21 (parallel [
            (set (reg:DI 0 ax [413])
                (plus:DI (reg:DI 0 ax [413])
                    (reg:DI 1 dx [orig:187 D.6421 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:323 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:187 D.6421 ] [187])
            (const_int 19 [0x13]))
        (nil)))
(insn 349 348 351 21 (parallel [
            (set (reg:DI 0 ax [414])
                (ashift:DI (reg:DI 0 ax [413])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:323 497 {*ashldi3_1}
     (nil))
(insn 351 349 352 21 (set (reg:DI 1 dx [orig:188 D.6421 ] [188])
        (reg:DI 0 ax [413])) sim2fitman_sup.cpp:323 89 {*movdi_internal}
     (nil))
(insn 352 351 353 21 (set (reg/f:DI 0 ax [415])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:323 89 {*movdi_internal}
     (nil))
(insn 353 352 354 21 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.6428 ] [189])
                (plus:DI (reg/f:DI 0 ax [415])
                    (reg:DI 1 dx [orig:188 D.6421 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:323 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:188 D.6421 ] [188]))
        (nil)))
(insn 354 353 355 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:189 D.6428 ] [189])
                (const_int 8 [0x8])) [0 _130->scaleby+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:323 90 {*movsi_internal}
     (nil))
(insn 355 354 356 21 (set (reg:SI 0 ax [416])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:324 90 {*movsi_internal}
     (nil))
(insn 356 355 357 21 (set (reg:DI 1 dx [orig:190 D.6421 ] [190])
        (sign_extend:DI (reg:SI 0 ax [416]))) sim2fitman_sup.cpp:324 142 {*extendsidi2_rex64}
     (nil))
(insn 357 356 358 21 (set (reg:DI 0 ax [417])
        (reg:DI 1 dx [orig:190 D.6421 ] [190])) sim2fitman_sup.cpp:324 89 {*movdi_internal}
     (nil))
(insn 358 357 359 21 (parallel [
            (set (reg:DI 0 ax [417])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:324 497 {*ashldi3_1}
     (nil))
(insn 359 358 360 21 (parallel [
            (set (reg:DI 0 ax [417])
                (plus:DI (reg:DI 0 ax [417])
                    (reg:DI 1 dx [orig:190 D.6421 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:324 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:190 D.6421 ] [190])
            (const_int 9 [0x9]))
        (nil)))
(insn 360 359 361 21 (parallel [
            (set (reg:DI 0 ax [417])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:324 497 {*ashldi3_1}
     (nil))
(insn 361 360 362 21 (parallel [
            (set (reg:DI 0 ax [417])
                (plus:DI (reg:DI 0 ax [417])
                    (reg:DI 1 dx [orig:190 D.6421 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:324 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:190 D.6421 ] [190])
            (const_int 19 [0x13]))
        (nil)))
(insn 362 361 364 21 (parallel [
            (set (reg:DI 0 ax [418])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:324 497 {*ashldi3_1}
     (nil))
(insn 364 362 365 21 (set (reg:DI 1 dx [orig:191 D.6421 ] [191])
        (reg:DI 0 ax [417])) sim2fitman_sup.cpp:324 89 {*movdi_internal}
     (nil))
(insn 365 364 366 21 (set (reg/f:DI 0 ax [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:324 89 {*movdi_internal}
     (nil))
(insn 366 365 367 21 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.6428 ] [192])
                (plus:DI (reg/f:DI 0 ax [419])
                    (reg:DI 1 dx [orig:191 D.6421 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:324 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:191 D.6421 ] [191]))
        (nil)))
(insn 367 366 368 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:192 D.6428 ] [192])
                (const_int 12 [0xc])) [0 _133->pre_ecc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:324 90 {*movsi_internal}
     (nil))
(insn 368 367 369 21 (set (reg:SI 0 ax [420])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:325 90 {*movsi_internal}
     (nil))
(insn 369 368 370 21 (set (reg:DI 1 dx [orig:193 D.6421 ] [193])
        (sign_extend:DI (reg:SI 0 ax [420]))) sim2fitman_sup.cpp:325 142 {*extendsidi2_rex64}
     (nil))
(insn 370 369 371 21 (set (reg:DI 0 ax [421])
        (reg:DI 1 dx [orig:193 D.6421 ] [193])) sim2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 371 370 372 21 (parallel [
            (set (reg:DI 0 ax [421])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:325 497 {*ashldi3_1}
     (nil))
(insn 372 371 373 21 (parallel [
            (set (reg:DI 0 ax [421])
                (plus:DI (reg:DI 0 ax [421])
                    (reg:DI 1 dx [orig:193 D.6421 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:325 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:193 D.6421 ] [193])
            (const_int 9 [0x9]))
        (nil)))
(insn 373 372 374 21 (parallel [
            (set (reg:DI 0 ax [421])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:325 497 {*ashldi3_1}
     (nil))
(insn 374 373 375 21 (parallel [
            (set (reg:DI 0 ax [421])
                (plus:DI (reg:DI 0 ax [421])
                    (reg:DI 1 dx [orig:193 D.6421 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:325 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:193 D.6421 ] [193])
            (const_int 19 [0x13]))
        (nil)))
(insn 375 374 377 21 (parallel [
            (set (reg:DI 0 ax [422])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:325 497 {*ashldi3_1}
     (nil))
(insn 377 375 378 21 (set (reg:DI 1 dx [orig:194 D.6421 ] [194])
        (reg:DI 0 ax [421])) sim2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 378 377 379 21 (set (reg/f:DI 0 ax [423])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 379 378 380 21 (parallel [
            (set (reg/f:DI 0 ax [orig:195 D.6428 ] [195])
                (plus:DI (reg/f:DI 0 ax [423])
                    (reg:DI 1 dx [orig:194 D.6421 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:325 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:194 D.6421 ] [194]))
        (nil)))
(insn 380 379 381 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:195 D.6428 ] [195])
                (const_int 16 [0x10])) [0 _136->bc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:325 90 {*movsi_internal}
     (nil))
(insn 381 380 382 21 (set (reg:SI 0 ax [424])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:326 90 {*movsi_internal}
     (nil))
(insn 382 381 383 21 (set (reg:DI 1 dx [orig:196 D.6421 ] [196])
        (sign_extend:DI (reg:SI 0 ax [424]))) sim2fitman_sup.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 383 382 384 21 (set (reg:DI 0 ax [425])
        (reg:DI 1 dx [orig:196 D.6421 ] [196])) sim2fitman_sup.cpp:326 89 {*movdi_internal}
     (nil))
(insn 384 383 385 21 (parallel [
            (set (reg:DI 0 ax [425])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:326 497 {*ashldi3_1}
     (nil))
(insn 385 384 386 21 (parallel [
            (set (reg:DI 0 ax [425])
                (plus:DI (reg:DI 0 ax [425])
                    (reg:DI 1 dx [orig:196 D.6421 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:326 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:196 D.6421 ] [196])
            (const_int 9 [0x9]))
        (nil)))
(insn 386 385 387 21 (parallel [
            (set (reg:DI 0 ax [425])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:326 497 {*ashldi3_1}
     (nil))
(insn 387 386 388 21 (parallel [
            (set (reg:DI 0 ax [425])
                (plus:DI (reg:DI 0 ax [425])
                    (reg:DI 1 dx [orig:196 D.6421 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:326 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:196 D.6421 ] [196])
            (const_int 19 [0x13]))
        (nil)))
(insn 388 387 390 21 (parallel [
            (set (reg:DI 0 ax [426])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:326 497 {*ashldi3_1}
     (nil))
(insn 390 388 391 21 (set (reg:DI 1 dx [orig:197 D.6421 ] [197])
        (reg:DI 0 ax [425])) sim2fitman_sup.cpp:326 89 {*movdi_internal}
     (nil))
(insn 391 390 392 21 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:326 89 {*movdi_internal}
     (nil))
(insn 392 391 393 21 (parallel [
            (set (reg/f:DI 0 ax [orig:198 D.6428 ] [198])
                (plus:DI (reg/f:DI 0 ax [427])
                    (reg:DI 1 dx [orig:197 D.6421 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:326 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:197 D.6421 ] [197]))
        (nil)))
(insn 393 392 394 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:198 D.6428 ] [198])
                (const_int 20 [0x14])) [0 _139->file_type+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:326 90 {*movsi_internal}
     (nil))
(insn 394 393 395 21 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:327 90 {*movsi_internal}
     (nil))
(insn 395 394 396 21 (set (reg:DI 1 dx [orig:199 D.6421 ] [199])
        (sign_extend:DI (reg:SI 0 ax [428]))) sim2fitman_sup.cpp:327 142 {*extendsidi2_rex64}
     (nil))
(insn 396 395 397 21 (set (reg:DI 0 ax [429])
        (reg:DI 1 dx [orig:199 D.6421 ] [199])) sim2fitman_sup.cpp:327 89 {*movdi_internal}
     (nil))
(insn 397 396 398 21 (parallel [
            (set (reg:DI 0 ax [429])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:327 497 {*ashldi3_1}
     (nil))
(insn 398 397 399 21 (parallel [
            (set (reg:DI 0 ax [429])
                (plus:DI (reg:DI 0 ax [429])
                    (reg:DI 1 dx [orig:199 D.6421 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:327 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:199 D.6421 ] [199])
            (const_int 9 [0x9]))
        (nil)))
(insn 399 398 400 21 (parallel [
            (set (reg:DI 0 ax [429])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:327 497 {*ashldi3_1}
     (nil))
(insn 400 399 401 21 (parallel [
            (set (reg:DI 0 ax [429])
                (plus:DI (reg:DI 0 ax [429])
                    (reg:DI 1 dx [orig:199 D.6421 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:327 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:199 D.6421 ] [199])
            (const_int 19 [0x13]))
        (nil)))
(insn 401 400 403 21 (parallel [
            (set (reg:DI 0 ax [430])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:327 497 {*ashldi3_1}
     (nil))
(insn 403 401 404 21 (set (reg:DI 1 dx [orig:200 D.6421 ] [200])
        (reg:DI 0 ax [429])) sim2fitman_sup.cpp:327 89 {*movdi_internal}
     (nil))
(insn 404 403 405 21 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:327 89 {*movdi_internal}
     (nil))
(insn 405 404 406 21 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.6428 ] [201])
                (plus:DI (reg/f:DI 0 ax [431])
                    (reg:DI 1 dx [orig:200 D.6421 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:327 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:200 D.6421 ] [200]))
        (nil)))
(insn 406 405 407 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:201 D.6428 ] [201])
                (const_int 24 [0x18])) [0 _142->data_zero_fill+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:327 90 {*movsi_internal}
     (nil))
(insn 407 406 408 21 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:328 90 {*movsi_internal}
     (nil))
(insn 408 407 409 21 (set (reg:DI 1 dx [orig:202 D.6421 ] [202])
        (sign_extend:DI (reg:SI 0 ax [432]))) sim2fitman_sup.cpp:328 142 {*extendsidi2_rex64}
     (nil))
(insn 409 408 410 21 (set (reg:DI 0 ax [433])
        (reg:DI 1 dx [orig:202 D.6421 ] [202])) sim2fitman_sup.cpp:328 89 {*movdi_internal}
     (nil))
(insn 410 409 411 21 (parallel [
            (set (reg:DI 0 ax [433])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:328 497 {*ashldi3_1}
     (nil))
(insn 411 410 412 21 (parallel [
            (set (reg:DI 0 ax [433])
                (plus:DI (reg:DI 0 ax [433])
                    (reg:DI 1 dx [orig:202 D.6421 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:328 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:202 D.6421 ] [202])
            (const_int 9 [0x9]))
        (nil)))
(insn 412 411 413 21 (parallel [
            (set (reg:DI 0 ax [433])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:328 497 {*ashldi3_1}
     (nil))
(insn 413 412 414 21 (parallel [
            (set (reg:DI 0 ax [433])
                (plus:DI (reg:DI 0 ax [433])
                    (reg:DI 1 dx [orig:202 D.6421 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:328 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:202 D.6421 ] [202])
            (const_int 19 [0x13]))
        (nil)))
(insn 414 413 416 21 (parallel [
            (set (reg:DI 0 ax [434])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:328 497 {*ashldi3_1}
     (nil))
(insn 416 414 417 21 (set (reg:DI 1 dx [orig:203 D.6421 ] [203])
        (reg:DI 0 ax [433])) sim2fitman_sup.cpp:328 89 {*movdi_internal}
     (nil))
(insn 417 416 418 21 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:328 89 {*movdi_internal}
     (nil))
(insn 418 417 419 21 (parallel [
            (set (reg/f:DI 1 dx [orig:204 D.6428 ] [204])
                (plus:DI (reg:DI 1 dx [orig:203 D.6421 ] [203])
                    (reg/f:DI 0 ax [435])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:328 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:203 D.6421 ] [203]))
        (nil)))
(insn 419 418 420 21 (set (reg:SF 0 ax [436])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:328 129 {*movsf_internal}
     (nil))
(insn 420 419 421 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:204 D.6428 ] [204])
                (const_int 28 [0x1c])) [0 _145->comp_filter+0 S4 A32])
        (reg:SF 0 ax [436])) sim2fitman_sup.cpp:328 129 {*movsf_internal}
     (nil))
(insn 421 420 422 21 (set (reg:SI 0 ax [437])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:329 90 {*movsi_internal}
     (nil))
(insn 422 421 423 21 (set (reg:DI 1 dx [orig:205 D.6421 ] [205])
        (sign_extend:DI (reg:SI 0 ax [437]))) sim2fitman_sup.cpp:329 142 {*extendsidi2_rex64}
     (nil))
(insn 423 422 424 21 (set (reg:DI 0 ax [438])
        (reg:DI 1 dx [orig:205 D.6421 ] [205])) sim2fitman_sup.cpp:329 89 {*movdi_internal}
     (nil))
(insn 424 423 425 21 (parallel [
            (set (reg:DI 0 ax [438])
                (ashift:DI (reg:DI 0 ax [438])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:329 497 {*ashldi3_1}
     (nil))
(insn 425 424 426 21 (parallel [
            (set (reg:DI 0 ax [438])
                (plus:DI (reg:DI 0 ax [438])
                    (reg:DI 1 dx [orig:205 D.6421 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:329 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:205 D.6421 ] [205])
            (const_int 9 [0x9]))
        (nil)))
(insn 426 425 427 21 (parallel [
            (set (reg:DI 0 ax [438])
                (ashift:DI (reg:DI 0 ax [438])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:329 497 {*ashldi3_1}
     (nil))
(insn 427 426 428 21 (parallel [
            (set (reg:DI 0 ax [438])
                (plus:DI (reg:DI 0 ax [438])
                    (reg:DI 1 dx [orig:205 D.6421 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:329 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:205 D.6421 ] [205])
            (const_int 19 [0x13]))
        (nil)))
(insn 428 427 430 21 (parallel [
            (set (reg:DI 0 ax [439])
                (ashift:DI (reg:DI 0 ax [438])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:329 497 {*ashldi3_1}
     (nil))
(insn 430 428 431 21 (set (reg:DI 1 dx [orig:206 D.6421 ] [206])
        (reg:DI 0 ax [438])) sim2fitman_sup.cpp:329 89 {*movdi_internal}
     (nil))
(insn 431 430 432 21 (set (reg/f:DI 0 ax [440])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:329 89 {*movdi_internal}
     (nil))
(insn 432 431 433 21 (parallel [
            (set (reg/f:DI 0 ax [orig:207 D.6428 ] [207])
                (plus:DI (reg/f:DI 0 ax [440])
                    (reg:DI 1 dx [orig:206 D.6421 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:329 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:206 D.6421 ] [206]))
        (nil)))
(insn 433 432 434 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:207 D.6428 ] [207])
                (const_int 32 [0x20])) [0 _148->max_normalize+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:329 90 {*movsi_internal}
     (nil))
(insn 434 433 435 21 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:330 90 {*movsi_internal}
     (nil))
(insn 435 434 436 21 (set (reg:DI 1 dx [orig:208 D.6421 ] [208])
        (sign_extend:DI (reg:SI 0 ax [441]))) sim2fitman_sup.cpp:330 142 {*extendsidi2_rex64}
     (nil))
(insn 436 435 437 21 (set (reg:DI 0 ax [442])
        (reg:DI 1 dx [orig:208 D.6421 ] [208])) sim2fitman_sup.cpp:330 89 {*movdi_internal}
     (nil))
(insn 437 436 438 21 (parallel [
            (set (reg:DI 0 ax [442])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:330 497 {*ashldi3_1}
     (nil))
(insn 438 437 439 21 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg:DI 0 ax [442])
                    (reg:DI 1 dx [orig:208 D.6421 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:330 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:208 D.6421 ] [208])
            (const_int 9 [0x9]))
        (nil)))
(insn 439 438 440 21 (parallel [
            (set (reg:DI 0 ax [442])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:330 497 {*ashldi3_1}
     (nil))
(insn 440 439 441 21 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg:DI 0 ax [442])
                    (reg:DI 1 dx [orig:208 D.6421 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:330 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:208 D.6421 ] [208])
            (const_int 19 [0x13]))
        (nil)))
(insn 441 440 443 21 (parallel [
            (set (reg:DI 0 ax [443])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:330 497 {*ashldi3_1}
     (nil))
(insn 443 441 444 21 (set (reg:DI 1 dx [orig:209 D.6421 ] [209])
        (reg:DI 0 ax [442])) sim2fitman_sup.cpp:330 89 {*movdi_internal}
     (nil))
(insn 444 443 445 21 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:330 89 {*movdi_internal}
     (nil))
(insn 445 444 446 21 (parallel [
            (set (reg/f:DI 0 ax [orig:210 D.6428 ] [210])
                (plus:DI (reg/f:DI 0 ax [444])
                    (reg:DI 1 dx [orig:209 D.6421 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:330 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:209 D.6421 ] [209]))
        (nil)))
(insn 446 445 447 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:210 D.6428 ] [210])
                (const_int 36 [0x24])) [0 _151->pre_quality+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:330 90 {*movsi_internal}
     (nil))
(insn 447 446 448 21 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:331 90 {*movsi_internal}
     (nil))
(insn 448 447 449 21 (set (reg:DI 1 dx [orig:211 D.6421 ] [211])
        (sign_extend:DI (reg:SI 0 ax [445]))) sim2fitman_sup.cpp:331 142 {*extendsidi2_rex64}
     (nil))
(insn 449 448 450 21 (set (reg:DI 0 ax [446])
        (reg:DI 1 dx [orig:211 D.6421 ] [211])) sim2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 450 449 451 21 (parallel [
            (set (reg:DI 0 ax [446])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:331 497 {*ashldi3_1}
     (nil))
(insn 451 450 452 21 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg:DI 0 ax [446])
                    (reg:DI 1 dx [orig:211 D.6421 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:331 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:211 D.6421 ] [211])
            (const_int 9 [0x9]))
        (nil)))
(insn 452 451 453 21 (parallel [
            (set (reg:DI 0 ax [446])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:331 497 {*ashldi3_1}
     (nil))
(insn 453 452 454 21 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg:DI 0 ax [446])
                    (reg:DI 1 dx [orig:211 D.6421 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:331 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:211 D.6421 ] [211])
            (const_int 19 [0x13]))
        (nil)))
(insn 454 453 456 21 (parallel [
            (set (reg:DI 0 ax [447])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:331 497 {*ashldi3_1}
     (nil))
(insn 456 454 457 21 (set (reg:DI 1 dx [orig:212 D.6421 ] [212])
        (reg:DI 0 ax [446])) sim2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 457 456 458 21 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 458 457 459 21 (parallel [
            (set (reg/f:DI 0 ax [orig:213 D.6428 ] [213])
                (plus:DI (reg/f:DI 0 ax [448])
                    (reg:DI 1 dx [orig:212 D.6421 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:331 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:212 D.6421 ] [212]))
        (nil)))
(insn 459 458 460 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:213 D.6428 ] [213])
                (const_int 40 [0x28])) [0 _154->pre_quecc+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:331 90 {*movsi_internal}
     (nil))
(insn 460 459 461 21 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:332 90 {*movsi_internal}
     (nil))
(insn 461 460 462 21 (set (reg:DI 1 dx [orig:214 D.6421 ] [214])
        (sign_extend:DI (reg:SI 0 ax [449]))) sim2fitman_sup.cpp:332 142 {*extendsidi2_rex64}
     (nil))
(insn 462 461 463 21 (set (reg:DI 0 ax [450])
        (reg:DI 1 dx [orig:214 D.6421 ] [214])) sim2fitman_sup.cpp:332 89 {*movdi_internal}
     (nil))
(insn 463 462 464 21 (parallel [
            (set (reg:DI 0 ax [450])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:332 497 {*ashldi3_1}
     (nil))
(insn 464 463 465 21 (parallel [
            (set (reg:DI 0 ax [450])
                (plus:DI (reg:DI 0 ax [450])
                    (reg:DI 1 dx [orig:214 D.6421 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:332 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:214 D.6421 ] [214])
            (const_int 9 [0x9]))
        (nil)))
(insn 465 464 466 21 (parallel [
            (set (reg:DI 0 ax [450])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:332 497 {*ashldi3_1}
     (nil))
(insn 466 465 467 21 (parallel [
            (set (reg:DI 0 ax [450])
                (plus:DI (reg:DI 0 ax [450])
                    (reg:DI 1 dx [orig:214 D.6421 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:332 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:214 D.6421 ] [214])
            (const_int 19 [0x13]))
        (nil)))
(insn 467 466 469 21 (parallel [
            (set (reg:DI 0 ax [451])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:332 497 {*ashldi3_1}
     (nil))
(insn 469 467 470 21 (set (reg:DI 1 dx [orig:215 D.6421 ] [215])
        (reg:DI 0 ax [450])) sim2fitman_sup.cpp:332 89 {*movdi_internal}
     (nil))
(insn 470 469 471 21 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:332 89 {*movdi_internal}
     (nil))
(insn 471 470 472 21 (parallel [
            (set (reg/f:DI 0 ax [orig:216 D.6428 ] [216])
                (plus:DI (reg/f:DI 0 ax [452])
                    (reg:DI 1 dx [orig:215 D.6421 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:332 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:215 D.6421 ] [215]))
        (nil)))
(insn 472 471 473 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:216 D.6428 ] [216])
                (const_int 44 [0x2c])) [0 _157->pre_quecc_points+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:332 90 {*movsi_internal}
     (nil))
(insn 473 472 474 21 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:333 90 {*movsi_internal}
     (nil))
(insn 474 473 475 21 (set (reg:DI 1 dx [orig:217 D.6421 ] [217])
        (sign_extend:DI (reg:SI 0 ax [453]))) sim2fitman_sup.cpp:333 142 {*extendsidi2_rex64}
     (nil))
(insn 475 474 476 21 (set (reg:DI 0 ax [454])
        (reg:DI 1 dx [orig:217 D.6421 ] [217])) sim2fitman_sup.cpp:333 89 {*movdi_internal}
     (nil))
(insn 476 475 477 21 (parallel [
            (set (reg:DI 0 ax [454])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:333 497 {*ashldi3_1}
     (nil))
(insn 477 476 478 21 (parallel [
            (set (reg:DI 0 ax [454])
                (plus:DI (reg:DI 0 ax [454])
                    (reg:DI 1 dx [orig:217 D.6421 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:333 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:217 D.6421 ] [217])
            (const_int 9 [0x9]))
        (nil)))
(insn 478 477 479 21 (parallel [
            (set (reg:DI 0 ax [454])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:333 497 {*ashldi3_1}
     (nil))
(insn 479 478 480 21 (parallel [
            (set (reg:DI 0 ax [454])
                (plus:DI (reg:DI 0 ax [454])
                    (reg:DI 1 dx [orig:217 D.6421 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:333 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:217 D.6421 ] [217])
            (const_int 19 [0x13]))
        (nil)))
(insn 480 479 482 21 (parallel [
            (set (reg:DI 0 ax [455])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:333 497 {*ashldi3_1}
     (nil))
(insn 482 480 483 21 (set (reg:DI 1 dx [orig:218 D.6421 ] [218])
        (reg:DI 0 ax [454])) sim2fitman_sup.cpp:333 89 {*movdi_internal}
     (nil))
(insn 483 482 484 21 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:333 89 {*movdi_internal}
     (nil))
(insn 484 483 485 21 (parallel [
            (set (reg/f:DI 1 dx [orig:219 D.6428 ] [219])
                (plus:DI (reg:DI 1 dx [orig:218 D.6421 ] [218])
                    (reg/f:DI 0 ax [456])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:333 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.6421 ] [218]))
        (nil)))
(insn 485 484 486 21 (set (reg:SF 0 ax [457])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:333 129 {*movsf_internal}
     (nil))
(insn 486 485 487 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:219 D.6428 ] [219])
                (const_int 48 [0x30])) [0 _160->pre_delay_time+0 S4 A32])
        (reg:SF 0 ax [457])) sim2fitman_sup.cpp:333 129 {*movsf_internal}
     (nil))
(insn 487 486 488 21 (set (reg:SI 0 ax [458])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:334 90 {*movsi_internal}
     (nil))
(insn 488 487 489 21 (set (reg:DI 1 dx [orig:220 D.6421 ] [220])
        (sign_extend:DI (reg:SI 0 ax [458]))) sim2fitman_sup.cpp:334 142 {*extendsidi2_rex64}
     (nil))
(insn 489 488 490 21 (set (reg:DI 0 ax [459])
        (reg:DI 1 dx [orig:220 D.6421 ] [220])) sim2fitman_sup.cpp:334 89 {*movdi_internal}
     (nil))
(insn 490 489 491 21 (parallel [
            (set (reg:DI 0 ax [459])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:334 497 {*ashldi3_1}
     (nil))
(insn 491 490 492 21 (parallel [
            (set (reg:DI 0 ax [459])
                (plus:DI (reg:DI 0 ax [459])
                    (reg:DI 1 dx [orig:220 D.6421 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:334 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:220 D.6421 ] [220])
            (const_int 9 [0x9]))
        (nil)))
(insn 492 491 493 21 (parallel [
            (set (reg:DI 0 ax [459])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:334 497 {*ashldi3_1}
     (nil))
(insn 493 492 494 21 (parallel [
            (set (reg:DI 0 ax [459])
                (plus:DI (reg:DI 0 ax [459])
                    (reg:DI 1 dx [orig:220 D.6421 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:334 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:220 D.6421 ] [220])
            (const_int 19 [0x13]))
        (nil)))
(insn 494 493 496 21 (parallel [
            (set (reg:DI 0 ax [460])
                (ashift:DI (reg:DI 0 ax [459])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:334 497 {*ashldi3_1}
     (nil))
(insn 496 494 497 21 (set (reg:DI 1 dx [orig:221 D.6421 ] [221])
        (reg:DI 0 ax [459])) sim2fitman_sup.cpp:334 89 {*movdi_internal}
     (nil))
(insn 497 496 498 21 (set (reg/f:DI 0 ax [461])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:334 89 {*movdi_internal}
     (nil))
(insn 498 497 499 21 (parallel [
            (set (reg/f:DI 0 ax [orig:222 D.6428 ] [222])
                (plus:DI (reg/f:DI 0 ax [461])
                    (reg:DI 1 dx [orig:221 D.6421 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:334 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:221 D.6421 ] [221]))
        (nil)))
(insn 499 498 500 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:222 D.6428 ] [222])
                (const_int 52 [0x34])) [0 _163->pre_quecc_if+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:334 90 {*movsi_internal}
     (nil))
(insn 500 499 501 21 (set (reg:SI 0 ax [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:335 90 {*movsi_internal}
     (nil))
(insn 501 500 502 21 (set (reg:DI 1 dx [orig:223 D.6421 ] [223])
        (sign_extend:DI (reg:SI 0 ax [462]))) sim2fitman_sup.cpp:335 142 {*extendsidi2_rex64}
     (nil))
(insn 502 501 503 21 (set (reg:DI 0 ax [463])
        (reg:DI 1 dx [orig:223 D.6421 ] [223])) sim2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 503 502 504 21 (parallel [
            (set (reg:DI 0 ax [463])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:335 497 {*ashldi3_1}
     (nil))
(insn 504 503 505 21 (parallel [
            (set (reg:DI 0 ax [463])
                (plus:DI (reg:DI 0 ax [463])
                    (reg:DI 1 dx [orig:223 D.6421 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:223 D.6421 ] [223])
            (const_int 9 [0x9]))
        (nil)))
(insn 505 504 506 21 (parallel [
            (set (reg:DI 0 ax [463])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:335 497 {*ashldi3_1}
     (nil))
(insn 506 505 507 21 (parallel [
            (set (reg:DI 0 ax [463])
                (plus:DI (reg:DI 0 ax [463])
                    (reg:DI 1 dx [orig:223 D.6421 ] [223])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:223 D.6421 ] [223])
            (const_int 19 [0x13]))
        (nil)))
(insn 507 506 509 21 (parallel [
            (set (reg:DI 0 ax [464])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:335 497 {*ashldi3_1}
     (nil))
(insn 509 507 510 21 (set (reg:DI 1 dx [orig:224 D.6421 ] [224])
        (reg:DI 0 ax [463])) sim2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 510 509 511 21 (set (reg/f:DI 0 ax [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 511 510 512 21 (parallel [
            (set (reg/f:DI 0 ax [orig:225 D.6428 ] [225])
                (plus:DI (reg/f:DI 0 ax [465])
                    (reg:DI 1 dx [orig:224 D.6421 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:335 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:224 D.6421 ] [224]))
        (nil)))
(insn 512 511 513 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:225 D.6428 ] [225])
                (const_int 56 [0x38])) [0 _166->input_file_type+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:335 90 {*movsi_internal}
     (nil))
(insn 513 512 514 21 (set (reg:SI 0 ax [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:336 90 {*movsi_internal}
     (nil))
(insn 514 513 515 21 (set (reg:DI 1 dx [orig:226 D.6421 ] [226])
        (sign_extend:DI (reg:SI 0 ax [466]))) sim2fitman_sup.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 515 514 516 21 (set (reg:DI 0 ax [467])
        (reg:DI 1 dx [orig:226 D.6421 ] [226])) sim2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 516 515 517 21 (parallel [
            (set (reg:DI 0 ax [467])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 517 516 518 21 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg:DI 0 ax [467])
                    (reg:DI 1 dx [orig:226 D.6421 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:226 D.6421 ] [226])
            (const_int 9 [0x9]))
        (nil)))
(insn 518 517 519 21 (parallel [
            (set (reg:DI 0 ax [467])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 519 518 520 21 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg:DI 0 ax [467])
                    (reg:DI 1 dx [orig:226 D.6421 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:226 D.6421 ] [226])
            (const_int 19 [0x13]))
        (nil)))
(insn 520 519 522 21 (parallel [
            (set (reg:DI 0 ax [468])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:336 497 {*ashldi3_1}
     (nil))
(insn 522 520 523 21 (set (reg:DI 1 dx [orig:227 D.6421 ] [227])
        (reg:DI 0 ax [467])) sim2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 523 522 524 21 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 524 523 525 21 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.6428 ] [228])
                (plus:DI (reg/f:DI 0 ax [469])
                    (reg:DI 1 dx [orig:227 D.6421 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:336 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:227 D.6421 ] [227]))
        (nil)))
(insn 525 524 526 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:228 D.6428 ] [228])
                (const_int 60 [0x3c])) [0 _169->ref_file_argument+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:336 90 {*movsi_internal}
     (nil))
(insn 526 525 527 21 (set (reg:SI 0 ax [470])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:337 90 {*movsi_internal}
     (nil))
(insn 527 526 528 21 (set (reg:DI 1 dx [orig:229 D.6421 ] [229])
        (sign_extend:DI (reg:SI 0 ax [470]))) sim2fitman_sup.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 528 527 529 21 (set (reg:DI 0 ax [471])
        (reg:DI 1 dx [orig:229 D.6421 ] [229])) sim2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 529 528 530 21 (parallel [
            (set (reg:DI 0 ax [471])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 530 529 531 21 (parallel [
            (set (reg:DI 0 ax [471])
                (plus:DI (reg:DI 0 ax [471])
                    (reg:DI 1 dx [orig:229 D.6421 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:229 D.6421 ] [229])
            (const_int 9 [0x9]))
        (nil)))
(insn 531 530 532 21 (parallel [
            (set (reg:DI 0 ax [471])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 532 531 533 21 (parallel [
            (set (reg:DI 0 ax [471])
                (plus:DI (reg:DI 0 ax [471])
                    (reg:DI 1 dx [orig:229 D.6421 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:229 D.6421 ] [229])
            (const_int 19 [0x13]))
        (nil)))
(insn 533 532 535 21 (parallel [
            (set (reg:DI 0 ax [472])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:337 497 {*ashldi3_1}
     (nil))
(insn 535 533 536 21 (set (reg:DI 1 dx [orig:230 D.6421 ] [230])
        (reg:DI 0 ax [471])) sim2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 536 535 537 21 (set (reg/f:DI 0 ax [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 537 536 538 21 (parallel [
            (set (reg/f:DI 0 ax [orig:231 D.6428 ] [231])
                (plus:DI (reg/f:DI 0 ax [473])
                    (reg:DI 1 dx [orig:230 D.6421 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:337 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:230 D.6421 ] [230]))
        (nil)))
(insn 538 537 539 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:231 D.6428 ] [231])
                (const_int 64 [0x40])) [0 _172->csi_reorder+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:337 90 {*movsi_internal}
     (nil))
(insn 539 538 540 21 (set (reg:SI 0 ax [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:338 90 {*movsi_internal}
     (nil))
(insn 540 539 541 21 (set (reg:DI 1 dx [orig:232 D.6421 ] [232])
        (sign_extend:DI (reg:SI 0 ax [474]))) sim2fitman_sup.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 541 540 542 21 (set (reg:DI 0 ax [475])
        (reg:DI 1 dx [orig:232 D.6421 ] [232])) sim2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 542 541 543 21 (parallel [
            (set (reg:DI 0 ax [475])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 543 542 544 21 (parallel [
            (set (reg:DI 0 ax [475])
                (plus:DI (reg:DI 0 ax [475])
                    (reg:DI 1 dx [orig:232 D.6421 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:232 D.6421 ] [232])
            (const_int 9 [0x9]))
        (nil)))
(insn 544 543 545 21 (parallel [
            (set (reg:DI 0 ax [475])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 545 544 546 21 (parallel [
            (set (reg:DI 0 ax [475])
                (plus:DI (reg:DI 0 ax [475])
                    (reg:DI 1 dx [orig:232 D.6421 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:232 D.6421 ] [232])
            (const_int 19 [0x13]))
        (nil)))
(insn 546 545 548 21 (parallel [
            (set (reg:DI 0 ax [476])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:338 497 {*ashldi3_1}
     (nil))
(insn 548 546 549 21 (set (reg:DI 1 dx [orig:233 D.6421 ] [233])
        (reg:DI 0 ax [475])) sim2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 549 548 550 21 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) sim2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 550 549 551 21 (parallel [
            (set (reg/f:DI 0 ax [orig:234 D.6428 ] [234])
                (plus:DI (reg/f:DI 0 ax [477])
                    (reg:DI 1 dx [orig:233 D.6421 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:338 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:233 D.6421 ] [233]))
        (nil)))
(insn 551 550 552 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:234 D.6428 ] [234])
                (const_int 68 [0x44])) [0 _175->tilt+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:338 90 {*movsi_internal}
     (nil))
(insn 552 551 553 21 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:341 90 {*movsi_internal}
     (nil))
(insn 553 552 554 21 (set (reg:DI 0 ax [orig:235 D.6421 ] [235])
        (sign_extend:DI (reg:SI 0 ax [478]))) sim2fitman_sup.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 554 553 849 21 (parallel [
            (set (reg:DI 0 ax [orig:236 D.6421 ] [236])
                (ashift:DI (reg:DI 0 ax [orig:236 D.6421 ] [236])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:341 497 {*ashldi3_1}
     (nil))
(insn 849 554 555 21 (set (reg:DI 1 dx [orig:236 D.6421 ] [236])
        (reg:DI 0 ax [orig:236 D.6421 ] [236])) sim2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 555 849 556 21 (set (reg/f:DI 0 ax [479])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 556 555 557 21 (parallel [
            (set (reg/f:DI 0 ax [orig:237 D.6429 ] [237])
                (plus:DI (reg/f:DI 0 ax [479])
                    (reg:DI 1 dx [orig:236 D.6421 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:341 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:236 D.6421 ] [236]))
        (nil)))
(insn 557 556 558 21 (set (mem/j:DI (reg/f:DI 0 ax [orig:237 D.6429 ] [237]) [0 _179->nblocks.number+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 558 557 559 21 (set (reg:SI 0 ax [480])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:342 90 {*movsi_internal}
     (nil))
(insn 559 558 560 21 (set (reg:DI 0 ax [orig:238 D.6421 ] [238])
        (sign_extend:DI (reg:SI 0 ax [480]))) sim2fitman_sup.cpp:342 142 {*extendsidi2_rex64}
     (nil))
(insn 560 559 851 21 (parallel [
            (set (reg:DI 0 ax [orig:239 D.6421 ] [239])
                (ashift:DI (reg:DI 0 ax [orig:239 D.6421 ] [239])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:342 497 {*ashldi3_1}
     (nil))
(insn 851 560 561 21 (set (reg:DI 1 dx [orig:239 D.6421 ] [239])
        (reg:DI 0 ax [orig:239 D.6421 ] [239])) sim2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 561 851 562 21 (set (reg/f:DI 0 ax [481])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 562 561 563 21 (parallel [
            (set (reg/f:DI 0 ax [orig:240 D.6429 ] [240])
                (plus:DI (reg/f:DI 0 ax [481])
                    (reg:DI 1 dx [orig:239 D.6421 ] [239])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:342 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:239 D.6421 ] [239]))
        (nil)))
(insn 563 562 564 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:240 D.6429 ] [240])
                (const_int 8 [0x8])) [0 _182->ntraces.number+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 564 563 565 21 (set (reg:SI 0 ax [482])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:343 90 {*movsi_internal}
     (nil))
(insn 565 564 566 21 (set (reg:DI 0 ax [orig:241 D.6421 ] [241])
        (sign_extend:DI (reg:SI 0 ax [482]))) sim2fitman_sup.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 566 565 853 21 (parallel [
            (set (reg:DI 0 ax [orig:242 D.6421 ] [242])
                (ashift:DI (reg:DI 0 ax [orig:242 D.6421 ] [242])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:343 497 {*ashldi3_1}
     (nil))
(insn 853 566 567 21 (set (reg:DI 1 dx [orig:242 D.6421 ] [242])
        (reg:DI 0 ax [orig:242 D.6421 ] [242])) sim2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 567 853 568 21 (set (reg/f:DI 0 ax [483])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 568 567 569 21 (parallel [
            (set (reg/f:DI 0 ax [orig:243 D.6429 ] [243])
                (plus:DI (reg/f:DI 0 ax [483])
                    (reg:DI 1 dx [orig:242 D.6421 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:343 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:242 D.6421 ] [242]))
        (nil)))
(insn 569 568 570 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:243 D.6429 ] [243])
                (const_int 16 [0x10])) [0 _185->np.number+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 570 569 571 21 (set (reg:SI 0 ax [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:344 90 {*movsi_internal}
     (nil))
(insn 571 570 572 21 (set (reg:DI 0 ax [orig:244 D.6421 ] [244])
        (sign_extend:DI (reg:SI 0 ax [484]))) sim2fitman_sup.cpp:344 142 {*extendsidi2_rex64}
     (nil))
(insn 572 571 855 21 (parallel [
            (set (reg:DI 0 ax [orig:245 D.6421 ] [245])
                (ashift:DI (reg:DI 0 ax [orig:245 D.6421 ] [245])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:344 497 {*ashldi3_1}
     (nil))
(insn 855 572 573 21 (set (reg:DI 1 dx [orig:245 D.6421 ] [245])
        (reg:DI 0 ax [orig:245 D.6421 ] [245])) sim2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 573 855 574 21 (set (reg/f:DI 0 ax [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 574 573 575 21 (parallel [
            (set (reg/f:DI 0 ax [orig:246 D.6429 ] [246])
                (plus:DI (reg/f:DI 0 ax [485])
                    (reg:DI 1 dx [orig:245 D.6421 ] [245])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:344 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:245 D.6421 ] [245]))
        (nil)))
(insn 575 574 576 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:246 D.6429 ] [246])
                (const_int 24 [0x18])) [0 _188->ebytes.number+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 576 575 577 21 (set (reg:SI 0 ax [486])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:345 90 {*movsi_internal}
     (nil))
(insn 577 576 578 21 (set (reg:DI 0 ax [orig:247 D.6421 ] [247])
        (sign_extend:DI (reg:SI 0 ax [486]))) sim2fitman_sup.cpp:345 142 {*extendsidi2_rex64}
     (nil))
(insn 578 577 857 21 (parallel [
            (set (reg:DI 0 ax [orig:248 D.6421 ] [248])
                (ashift:DI (reg:DI 0 ax [orig:248 D.6421 ] [248])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:345 497 {*ashldi3_1}
     (nil))
(insn 857 578 579 21 (set (reg:DI 1 dx [orig:248 D.6421 ] [248])
        (reg:DI 0 ax [orig:248 D.6421 ] [248])) sim2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 579 857 580 21 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 580 579 581 21 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.6429 ] [249])
                (plus:DI (reg/f:DI 0 ax [487])
                    (reg:DI 1 dx [orig:248 D.6421 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:345 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:248 D.6421 ] [248]))
        (nil)))
(insn 581 580 582 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:249 D.6429 ] [249])
                (const_int 32 [0x20])) [0 _191->tbytes.number+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 582 581 583 21 (set (reg:SI 0 ax [488])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:346 90 {*movsi_internal}
     (nil))
(insn 583 582 584 21 (set (reg:DI 0 ax [orig:250 D.6421 ] [250])
        (sign_extend:DI (reg:SI 0 ax [488]))) sim2fitman_sup.cpp:346 142 {*extendsidi2_rex64}
     (nil))
(insn 584 583 859 21 (parallel [
            (set (reg:DI 0 ax [orig:251 D.6421 ] [251])
                (ashift:DI (reg:DI 0 ax [orig:251 D.6421 ] [251])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:346 497 {*ashldi3_1}
     (nil))
(insn 859 584 585 21 (set (reg:DI 1 dx [orig:251 D.6421 ] [251])
        (reg:DI 0 ax [orig:251 D.6421 ] [251])) sim2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 585 859 586 21 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 586 585 587 21 (parallel [
            (set (reg/f:DI 0 ax [orig:252 D.6429 ] [252])
                (plus:DI (reg/f:DI 0 ax [489])
                    (reg:DI 1 dx [orig:251 D.6421 ] [251])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:346 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:251 D.6421 ] [251]))
        (nil)))
(insn 587 586 588 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:252 D.6429 ] [252])
                (const_int 40 [0x28])) [0 _194->bbytes.number+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 588 587 589 21 (set (reg:SI 0 ax [490])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:347 90 {*movsi_internal}
     (nil))
(insn 589 588 590 21 (set (reg:DI 0 ax [orig:253 D.6421 ] [253])
        (sign_extend:DI (reg:SI 0 ax [490]))) sim2fitman_sup.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 590 589 861 21 (parallel [
            (set (reg:DI 0 ax [orig:254 D.6421 ] [254])
                (ashift:DI (reg:DI 0 ax [orig:254 D.6421 ] [254])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:347 497 {*ashldi3_1}
     (nil))
(insn 861 590 591 21 (set (reg:DI 1 dx [orig:254 D.6421 ] [254])
        (reg:DI 0 ax [orig:254 D.6421 ] [254])) sim2fitman_sup.cpp:347 89 {*movdi_internal}
     (nil))
(insn 591 861 592 21 (set (reg/f:DI 0 ax [491])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:347 89 {*movdi_internal}
     (nil))
(insn 592 591 593 21 (parallel [
            (set (reg/f:DI 0 ax [orig:255 D.6429 ] [255])
                (plus:DI (reg/f:DI 0 ax [491])
                    (reg:DI 1 dx [orig:254 D.6421 ] [254])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:347 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:254 D.6421 ] [254]))
        (nil)))
(insn 593 592 594 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:255 D.6429 ] [255])
                (const_int 48 [0x30])) [0 _197->transf.number+0 S2 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:347 92 {*movhi_internal}
     (nil))
(insn 594 593 595 21 (set (reg:SI 0 ax [492])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:348 90 {*movsi_internal}
     (nil))
(insn 595 594 596 21 (set (reg:DI 0 ax [orig:256 D.6421 ] [256])
        (sign_extend:DI (reg:SI 0 ax [492]))) sim2fitman_sup.cpp:348 142 {*extendsidi2_rex64}
     (nil))
(insn 596 595 863 21 (parallel [
            (set (reg:DI 0 ax [orig:257 D.6421 ] [257])
                (ashift:DI (reg:DI 0 ax [orig:257 D.6421 ] [257])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:348 497 {*ashldi3_1}
     (nil))
(insn 863 596 597 21 (set (reg:DI 1 dx [orig:257 D.6421 ] [257])
        (reg:DI 0 ax [orig:257 D.6421 ] [257])) sim2fitman_sup.cpp:348 89 {*movdi_internal}
     (nil))
(insn 597 863 598 21 (set (reg/f:DI 0 ax [493])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:348 89 {*movdi_internal}
     (nil))
(insn 598 597 599 21 (parallel [
            (set (reg/f:DI 0 ax [orig:258 D.6429 ] [258])
                (plus:DI (reg/f:DI 0 ax [493])
                    (reg:DI 1 dx [orig:257 D.6421 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:348 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:257 D.6421 ] [257]))
        (nil)))
(insn 599 598 600 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:258 D.6429 ] [258])
                (const_int 50 [0x32])) [0 _200->status.number+0 S2 A16])
        (const_int 0 [0])) sim2fitman_sup.cpp:348 92 {*movhi_internal}
     (nil))
(insn 600 599 601 21 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:349 90 {*movsi_internal}
     (nil))
(insn 601 600 602 21 (set (reg:DI 0 ax [orig:259 D.6421 ] [259])
        (sign_extend:DI (reg:SI 0 ax [494]))) sim2fitman_sup.cpp:349 142 {*extendsidi2_rex64}
     (nil))
(insn 602 601 865 21 (parallel [
            (set (reg:DI 0 ax [orig:260 D.6421 ] [260])
                (ashift:DI (reg:DI 0 ax [orig:260 D.6421 ] [260])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:349 497 {*ashldi3_1}
     (nil))
(insn 865 602 603 21 (set (reg:DI 1 dx [orig:260 D.6421 ] [260])
        (reg:DI 0 ax [orig:260 D.6421 ] [260])) sim2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 603 865 604 21 (set (reg/f:DI 0 ax [495])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 604 603 605 21 (parallel [
            (set (reg/f:DI 0 ax [orig:261 D.6429 ] [261])
                (plus:DI (reg/f:DI 0 ax [495])
                    (reg:DI 1 dx [orig:260 D.6421 ] [260])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:349 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:260 D.6421 ] [260]))
        (nil)))
(insn 605 604 606 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:261 D.6429 ] [261])
                (const_int 56 [0x38])) [0 _203->spare1.number+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 606 605 607 21 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:352 90 {*movsi_internal}
     (nil))
(insn 607 606 608 21 (set (reg:DI 0 ax [orig:262 D.6421 ] [262])
        (sign_extend:DI (reg:SI 0 ax [496]))) sim2fitman_sup.cpp:352 142 {*extendsidi2_rex64}
     (nil))
(insn 608 607 867 21 (parallel [
            (set (reg:DI 0 ax [orig:263 D.6421 ] [263])
                (ashift:DI (reg:DI 0 ax [orig:263 D.6421 ] [263])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:352 497 {*ashldi3_1}
     (nil))
(insn 867 608 609 21 (set (reg:DI 1 dx [orig:263 D.6421 ] [263])
        (reg:DI 0 ax [orig:263 D.6421 ] [263])) sim2fitman_sup.cpp:352 89 {*movdi_internal}
     (nil))
(insn 609 867 610 21 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:352 89 {*movdi_internal}
     (nil))
(insn 610 609 611 21 (parallel [
            (set (reg/f:DI 0 ax [orig:264 D.6430 ] [264])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:263 D.6421 ] [263])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:352 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:263 D.6421 ] [263]))
        (nil)))
(insn 611 610 612 21 (set (mem/j:HI (reg/f:DI 0 ax [orig:264 D.6430 ] [264]) [0 _207->scale.number+0 S2 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:352 92 {*movhi_internal}
     (nil))
(insn 612 611 613 21 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:353 90 {*movsi_internal}
     (nil))
(insn 613 612 614 21 (set (reg:DI 0 ax [orig:265 D.6421 ] [265])
        (sign_extend:DI (reg:SI 0 ax [498]))) sim2fitman_sup.cpp:353 142 {*extendsidi2_rex64}
     (nil))
(insn 614 613 869 21 (parallel [
            (set (reg:DI 0 ax [orig:266 D.6421 ] [266])
                (ashift:DI (reg:DI 0 ax [orig:266 D.6421 ] [266])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:353 497 {*ashldi3_1}
     (nil))
(insn 869 614 615 21 (set (reg:DI 1 dx [orig:266 D.6421 ] [266])
        (reg:DI 0 ax [orig:266 D.6421 ] [266])) sim2fitman_sup.cpp:353 89 {*movdi_internal}
     (nil))
(insn 615 869 616 21 (set (reg/f:DI 0 ax [499])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:353 89 {*movdi_internal}
     (nil))
(insn 616 615 617 21 (parallel [
            (set (reg/f:DI 0 ax [orig:267 D.6430 ] [267])
                (plus:DI (reg/f:DI 0 ax [499])
                    (reg:DI 1 dx [orig:266 D.6421 ] [266])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:353 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:266 D.6421 ] [266]))
        (nil)))
(insn 617 616 618 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:267 D.6430 ] [267])
                (const_int 2 [0x2])) [0 _210->status.number+0 S2 A16])
        (const_int 0 [0])) sim2fitman_sup.cpp:353 92 {*movhi_internal}
     (nil))
(insn 618 617 619 21 (set (reg:SI 0 ax [500])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:354 90 {*movsi_internal}
     (nil))
(insn 619 618 620 21 (set (reg:DI 0 ax [orig:268 D.6421 ] [268])
        (sign_extend:DI (reg:SI 0 ax [500]))) sim2fitman_sup.cpp:354 142 {*extendsidi2_rex64}
     (nil))
(insn 620 619 871 21 (parallel [
            (set (reg:DI 0 ax [orig:269 D.6421 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:269 D.6421 ] [269])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:354 497 {*ashldi3_1}
     (nil))
(insn 871 620 621 21 (set (reg:DI 1 dx [orig:269 D.6421 ] [269])
        (reg:DI 0 ax [orig:269 D.6421 ] [269])) sim2fitman_sup.cpp:354 89 {*movdi_internal}
     (nil))
(insn 621 871 622 21 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:354 89 {*movdi_internal}
     (nil))
(insn 622 621 623 21 (parallel [
            (set (reg/f:DI 0 ax [orig:270 D.6430 ] [270])
                (plus:DI (reg/f:DI 0 ax [501])
                    (reg:DI 1 dx [orig:269 D.6421 ] [269])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:354 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:269 D.6421 ] [269]))
        (nil)))
(insn 623 622 624 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:270 D.6430 ] [270])
                (const_int 4 [0x4])) [0 _213->index.number+0 S2 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:354 92 {*movhi_internal}
     (nil))
(insn 624 623 625 21 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:355 90 {*movsi_internal}
     (nil))
(insn 625 624 626 21 (set (reg:DI 0 ax [orig:271 D.6421 ] [271])
        (sign_extend:DI (reg:SI 0 ax [502]))) sim2fitman_sup.cpp:355 142 {*extendsidi2_rex64}
     (nil))
(insn 626 625 873 21 (parallel [
            (set (reg:DI 0 ax [orig:272 D.6421 ] [272])
                (ashift:DI (reg:DI 0 ax [orig:272 D.6421 ] [272])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:355 497 {*ashldi3_1}
     (nil))
(insn 873 626 627 21 (set (reg:DI 1 dx [orig:272 D.6421 ] [272])
        (reg:DI 0 ax [orig:272 D.6421 ] [272])) sim2fitman_sup.cpp:355 89 {*movdi_internal}
     (nil))
(insn 627 873 628 21 (set (reg/f:DI 0 ax [503])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:355 89 {*movdi_internal}
     (nil))
(insn 628 627 629 21 (parallel [
            (set (reg/f:DI 0 ax [orig:273 D.6430 ] [273])
                (plus:DI (reg/f:DI 0 ax [503])
                    (reg:DI 1 dx [orig:272 D.6421 ] [272])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:355 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:272 D.6421 ] [272]))
        (nil)))
(insn 629 628 630 21 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:273 D.6430 ] [273])
                (const_int 6 [0x6])) [0 _216->spare3.number+0 S2 A16])
        (const_int 0 [0])) sim2fitman_sup.cpp:355 92 {*movhi_internal}
     (nil))
(insn 630 629 631 21 (set (reg:SI 0 ax [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:356 90 {*movsi_internal}
     (nil))
(insn 631 630 632 21 (set (reg:DI 0 ax [orig:274 D.6421 ] [274])
        (sign_extend:DI (reg:SI 0 ax [504]))) sim2fitman_sup.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 632 631 875 21 (parallel [
            (set (reg:DI 0 ax [orig:275 D.6421 ] [275])
                (ashift:DI (reg:DI 0 ax [orig:275 D.6421 ] [275])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:356 497 {*ashldi3_1}
     (nil))
(insn 875 632 633 21 (set (reg:DI 1 dx [orig:275 D.6421 ] [275])
        (reg:DI 0 ax [orig:275 D.6421 ] [275])) sim2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 633 875 634 21 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 634 633 635 21 (parallel [
            (set (reg/f:DI 0 ax [orig:276 D.6430 ] [276])
                (plus:DI (reg/f:DI 0 ax [505])
                    (reg:DI 1 dx [orig:275 D.6421 ] [275])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:356 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:275 D.6421 ] [275]))
        (nil)))
(insn 635 634 636 21 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:276 D.6430 ] [276])
                (const_int 8 [0x8])) [0 _219->ctcount.number+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 636 635 637 21 (set (reg:SI 0 ax [506])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:357 90 {*movsi_internal}
     (nil))
(insn 637 636 638 21 (set (reg:DI 0 ax [orig:277 D.6421 ] [277])
        (sign_extend:DI (reg:SI 0 ax [506]))) sim2fitman_sup.cpp:357 142 {*extendsidi2_rex64}
     (nil))
(insn 638 637 877 21 (parallel [
            (set (reg:DI 0 ax [orig:278 D.6421 ] [278])
                (ashift:DI (reg:DI 0 ax [orig:278 D.6421 ] [278])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:357 497 {*ashldi3_1}
     (nil))
(insn 877 638 639 21 (set (reg:DI 1 dx [orig:278 D.6421 ] [278])
        (reg:DI 0 ax [orig:278 D.6421 ] [278])) sim2fitman_sup.cpp:357 89 {*movdi_internal}
     (nil))
(insn 639 877 640 21 (set (reg/f:DI 0 ax [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:357 89 {*movdi_internal}
     (nil))
(insn 640 639 641 21 (parallel [
            (set (reg/f:DI 1 dx [orig:279 D.6430 ] [279])
                (plus:DI (reg:DI 1 dx [orig:278 D.6421 ] [278])
                    (reg/f:DI 0 ax [507])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:357 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:278 D.6421 ] [278]))
        (nil)))
(insn 641 640 642 21 (set (reg:SF 0 ax [508])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:357 129 {*movsf_internal}
     (nil))
(insn 642 641 643 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:279 D.6430 ] [279])
                (const_int 16 [0x10])) [0 _222->lpval.number+0 S4 A64])
        (reg:SF 0 ax [508])) sim2fitman_sup.cpp:357 129 {*movsf_internal}
     (nil))
(insn 643 642 644 21 (set (reg:SI 0 ax [509])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:358 90 {*movsi_internal}
     (nil))
(insn 644 643 645 21 (set (reg:DI 0 ax [orig:280 D.6421 ] [280])
        (sign_extend:DI (reg:SI 0 ax [509]))) sim2fitman_sup.cpp:358 142 {*extendsidi2_rex64}
     (nil))
(insn 645 644 879 21 (parallel [
            (set (reg:DI 0 ax [orig:281 D.6421 ] [281])
                (ashift:DI (reg:DI 0 ax [orig:281 D.6421 ] [281])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:358 497 {*ashldi3_1}
     (nil))
(insn 879 645 646 21 (set (reg:DI 1 dx [orig:281 D.6421 ] [281])
        (reg:DI 0 ax [orig:281 D.6421 ] [281])) sim2fitman_sup.cpp:358 89 {*movdi_internal}
     (nil))
(insn 646 879 647 21 (set (reg/f:DI 0 ax [510])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:358 89 {*movdi_internal}
     (nil))
(insn 647 646 648 21 (parallel [
            (set (reg/f:DI 1 dx [orig:282 D.6430 ] [282])
                (plus:DI (reg:DI 1 dx [orig:281 D.6421 ] [281])
                    (reg/f:DI 0 ax [510])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:358 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:281 D.6421 ] [281]))
        (nil)))
(insn 648 647 649 21 (set (reg:SF 0 ax [511])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:358 129 {*movsf_internal}
     (nil))
(insn 649 648 650 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:282 D.6430 ] [282])
                (const_int 20 [0x14])) [0 _225->rpval.number+0 S4 A32])
        (reg:SF 0 ax [511])) sim2fitman_sup.cpp:358 129 {*movsf_internal}
     (nil))
(insn 650 649 651 21 (set (reg:SI 0 ax [512])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:359 90 {*movsi_internal}
     (nil))
(insn 651 650 652 21 (set (reg:DI 0 ax [orig:283 D.6421 ] [283])
        (sign_extend:DI (reg:SI 0 ax [512]))) sim2fitman_sup.cpp:359 142 {*extendsidi2_rex64}
     (nil))
(insn 652 651 881 21 (parallel [
            (set (reg:DI 0 ax [orig:284 D.6421 ] [284])
                (ashift:DI (reg:DI 0 ax [orig:284 D.6421 ] [284])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:359 497 {*ashldi3_1}
     (nil))
(insn 881 652 653 21 (set (reg:DI 1 dx [orig:284 D.6421 ] [284])
        (reg:DI 0 ax [orig:284 D.6421 ] [284])) sim2fitman_sup.cpp:359 89 {*movdi_internal}
     (nil))
(insn 653 881 654 21 (set (reg/f:DI 0 ax [513])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:359 89 {*movdi_internal}
     (nil))
(insn 654 653 655 21 (parallel [
            (set (reg/f:DI 1 dx [orig:285 D.6430 ] [285])
                (plus:DI (reg:DI 1 dx [orig:284 D.6421 ] [284])
                    (reg/f:DI 0 ax [513])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:359 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:284 D.6421 ] [284]))
        (nil)))
(insn 655 654 656 21 (set (reg:SF 0 ax [514])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:359 129 {*movsf_internal}
     (nil))
(insn 656 655 657 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:285 D.6430 ] [285])
                (const_int 24 [0x18])) [0 _228->lvl.number+0 S4 A64])
        (reg:SF 0 ax [514])) sim2fitman_sup.cpp:359 129 {*movsf_internal}
     (nil))
(insn 657 656 658 21 (set (reg:SI 0 ax [515])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:360 90 {*movsi_internal}
     (nil))
(insn 658 657 659 21 (set (reg:DI 0 ax [orig:286 D.6421 ] [286])
        (sign_extend:DI (reg:SI 0 ax [515]))) sim2fitman_sup.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 659 658 883 21 (parallel [
            (set (reg:DI 0 ax [orig:287 D.6421 ] [287])
                (ashift:DI (reg:DI 0 ax [orig:287 D.6421 ] [287])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 883 659 660 21 (set (reg:DI 1 dx [orig:287 D.6421 ] [287])
        (reg:DI 0 ax [orig:287 D.6421 ] [287])) sim2fitman_sup.cpp:360 89 {*movdi_internal}
     (nil))
(insn 660 883 661 21 (set (reg/f:DI 0 ax [516])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) sim2fitman_sup.cpp:360 89 {*movdi_internal}
     (nil))
(insn 661 660 662 21 (parallel [
            (set (reg/f:DI 1 dx [orig:288 D.6430 ] [288])
                (plus:DI (reg:DI 1 dx [orig:287 D.6421 ] [287])
                    (reg/f:DI 0 ax [516])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:287 D.6421 ] [287]))
        (nil)))
(insn 662 661 663 21 (set (reg:SF 0 ax [517])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S4 A32])) sim2fitman_sup.cpp:360 129 {*movsf_internal}
     (nil))
(insn 663 662 664 21 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [orig:288 D.6430 ] [288])
                (const_int 28 [0x1c])) [0 _231->tlt.number+0 S4 A32])
        (reg:SF 0 ax [517])) sim2fitman_sup.cpp:360 129 {*movsf_internal}
     (nil))
(insn 664 663 665 21 (set (reg:SI 0 ax [518])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:363 90 {*movsi_internal}
     (nil))
(insn 665 664 666 21 (set (reg:DI 0 ax [orig:289 D.6421 ] [289])
        (sign_extend:DI (reg:SI 0 ax [518]))) sim2fitman_sup.cpp:363 142 {*extendsidi2_rex64}
     (nil))
(insn 666 665 885 21 (parallel [
            (set (reg:DI 0 ax [orig:290 D.6421 ] [290])
                (ashift:DI (reg:DI 0 ax [orig:290 D.6421 ] [290])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:363 497 {*ashldi3_1}
     (nil))
(insn 885 666 667 21 (set (reg:DI 1 dx [orig:290 D.6421 ] [290])
        (reg:DI 0 ax [orig:290 D.6421 ] [290])) sim2fitman_sup.cpp:363 89 {*movdi_internal}
     (nil))
(insn 667 885 668 21 (set (reg/f:DI 0 ax [519])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:363 89 {*movdi_internal}
     (nil))
(insn 668 667 669 21 (parallel [
            (set (reg/f:DI 0 ax [orig:291 D.6431 ] [291])
                (plus:DI (reg/f:DI 0 ax [519])
                    (reg:DI 1 dx [orig:290 D.6421 ] [290])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:363 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:290 D.6421 ] [290]))
        (nil)))
(insn 669 668 670 21 (set (mem/j:SI (reg/f:DI 0 ax [orig:291 D.6431 ] [291]) [0 _235->num_datasets+0 S4 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:363 90 {*movsi_internal}
     (nil))
(insn 670 669 671 21 (set (reg:SI 0 ax [520])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:364 90 {*movsi_internal}
     (nil))
(insn 671 670 672 21 (set (reg:DI 0 ax [orig:292 D.6421 ] [292])
        (sign_extend:DI (reg:SI 0 ax [520]))) sim2fitman_sup.cpp:364 142 {*extendsidi2_rex64}
     (nil))
(insn 672 671 887 21 (parallel [
            (set (reg:DI 0 ax [orig:293 D.6421 ] [293])
                (ashift:DI (reg:DI 0 ax [orig:293 D.6421 ] [293])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:364 497 {*ashldi3_1}
     (nil))
(insn 887 672 673 21 (set (reg:DI 1 dx [orig:293 D.6421 ] [293])
        (reg:DI 0 ax [orig:293 D.6421 ] [293])) sim2fitman_sup.cpp:364 89 {*movdi_internal}
     (nil))
(insn 673 887 674 21 (set (reg/f:DI 0 ax [521])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:364 89 {*movdi_internal}
     (nil))
(insn 674 673 675 21 (parallel [
            (set (reg/f:DI 0 ax [orig:294 D.6431 ] [294])
                (plus:DI (reg/f:DI 0 ax [521])
                    (reg:DI 1 dx [orig:293 D.6421 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:364 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:293 D.6421 ] [293]))
        (nil)))
(insn 675 674 676 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:294 D.6431 ] [294])
                (const_int 4 [0x4])) [0 _238->num_unsup_sets+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:364 90 {*movsi_internal}
     (nil))
(insn 676 675 677 21 (set (reg:SI 0 ax [522])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:365 90 {*movsi_internal}
     (nil))
(insn 677 676 678 21 (set (reg:DI 0 ax [orig:295 D.6421 ] [295])
        (sign_extend:DI (reg:SI 0 ax [522]))) sim2fitman_sup.cpp:365 142 {*extendsidi2_rex64}
     (nil))
(insn 678 677 889 21 (parallel [
            (set (reg:DI 0 ax [orig:296 D.6421 ] [296])
                (ashift:DI (reg:DI 0 ax [orig:296 D.6421 ] [296])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:365 497 {*ashldi3_1}
     (nil))
(insn 889 678 679 21 (set (reg:DI 1 dx [orig:296 D.6421 ] [296])
        (reg:DI 0 ax [orig:296 D.6421 ] [296])) sim2fitman_sup.cpp:365 89 {*movdi_internal}
     (nil))
(insn 679 889 680 21 (set (reg/f:DI 0 ax [523])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:365 89 {*movdi_internal}
     (nil))
(insn 680 679 681 21 (parallel [
            (set (reg/f:DI 0 ax [orig:297 D.6431 ] [297])
                (plus:DI (reg/f:DI 0 ax [523])
                    (reg:DI 1 dx [orig:296 D.6421 ] [296])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:365 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:296 D.6421 ] [296]))
        (nil)))
(insn 681 680 682 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:297 D.6431 ] [297])
                (const_int 8 [0x8])) [0 _241->file_size+0 S4 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:365 90 {*movsi_internal}
     (nil))
(insn 682 681 683 21 (set (reg:SI 0 ax [524])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:366 90 {*movsi_internal}
     (nil))
(insn 683 682 684 21 (set (reg:DI 0 ax [orig:298 D.6421 ] [298])
        (sign_extend:DI (reg:SI 0 ax [524]))) sim2fitman_sup.cpp:366 142 {*extendsidi2_rex64}
     (nil))
(insn 684 683 891 21 (parallel [
            (set (reg:DI 0 ax [orig:299 D.6421 ] [299])
                (ashift:DI (reg:DI 0 ax [orig:299 D.6421 ] [299])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:366 497 {*ashldi3_1}
     (nil))
(insn 891 684 685 21 (set (reg:DI 1 dx [orig:299 D.6421 ] [299])
        (reg:DI 0 ax [orig:299 D.6421 ] [299])) sim2fitman_sup.cpp:366 89 {*movdi_internal}
     (nil))
(insn 685 891 686 21 (set (reg/f:DI 0 ax [525])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:366 89 {*movdi_internal}
     (nil))
(insn 686 685 687 21 (parallel [
            (set (reg/f:DI 0 ax [orig:300 D.6431 ] [300])
                (plus:DI (reg/f:DI 0 ax [525])
                    (reg:DI 1 dx [orig:299 D.6421 ] [299])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:366 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:299 D.6421 ] [299]))
        (nil)))
(insn 687 686 688 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:300 D.6431 ] [300])
                (const_int 12 [0xc])) [0 _244->total_data_size+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:366 90 {*movsi_internal}
     (nil))
(insn 688 687 773 21 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:367 90 {*movsi_internal}
     (nil))
(jump_insn 773 688 774 21 (set (pc)
        (label_ref 701)) sim2fitman_sup.cpp:367 636 {jump}
     (nil)
 -> 701)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 774 773 705)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 302 303 304 526 527 528 529
(code_label 705 774 691 22 65 "" [1 uses])
(note 691 705 692 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 692 691 693 22 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:368 90 {*movsi_internal}
     (nil))
(insn 693 692 694 22 (set (reg:DI 0 ax [orig:302 D.6421 ] [302])
        (sign_extend:DI (reg:SI 0 ax [526]))) sim2fitman_sup.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 694 693 893 22 (parallel [
            (set (reg:DI 0 ax [orig:303 D.6421 ] [303])
                (ashift:DI (reg:DI 0 ax [orig:303 D.6421 ] [303])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:368 497 {*ashldi3_1}
     (nil))
(insn 893 694 695 22 (set (reg:DI 1 dx [orig:303 D.6421 ] [303])
        (reg:DI 0 ax [orig:303 D.6421 ] [303])) sim2fitman_sup.cpp:368 89 {*movdi_internal}
     (nil))
(insn 695 893 696 22 (set (reg/f:DI 0 ax [527])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:368 89 {*movdi_internal}
     (nil))
(insn 696 695 697 22 (parallel [
            (set (reg/f:DI 1 dx [orig:304 D.6431 ] [304])
                (plus:DI (reg:DI 1 dx [orig:303 D.6421 ] [303])
                    (reg/f:DI 0 ax [527])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:368 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:303 D.6421 ] [303]))
        (nil)))
(insn 697 696 698 22 (set (reg:SI 0 ax [529])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:368 90 {*movsi_internal}
     (nil))
(insn 698 697 699 22 (set (reg:DI 0 ax [528])
        (sign_extend:DI (reg:SI 0 ax [529]))) sim2fitman_sup.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 699 698 700 22 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:304 D.6431 ] [304])
                    (reg:DI 0 ax [528]))
                (const_int 16 [0x10])) [0 _249->version S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:368 93 {*movqi_internal}
     (nil))
(insn 700 699 701 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:367 220 {*addsi_1}
     (nil))
;;  succ:       23 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU,DFS_BACK)
;;              21 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 301 530
(code_label 701 700 702 23 64 "" [1 uses])
(note 702 701 703 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 703 702 704 23 (set (reg:SI 0 ax [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) sim2fitman_sup.cpp:367 90 {*movsi_internal}
     (nil))
(insn 704 703 706 23 (set (reg:DI 0 ax [orig:301 D.6421 ] [301])
        (sign_extend:DI (reg:SI 0 ax [530]))) sim2fitman_sup.cpp:367 142 {*extendsidi2_rex64}
     (nil))
(insn 706 704 707 23 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:301 D.6421 ] [301])
            (const_int 4 [0x4]))) sim2fitman_sup.cpp:367 8 {*cmpdi_1}
     (nil))
(jump_insn 707 706 708 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 705)
            (pc))) sim2fitman_sup.cpp:367 596 {*jcc_1}
     (nil)
 -> 705)
;;  succ:       22
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 708 707 709 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 709 708 710 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:260 220 {*addsi_1}
     (nil))
;;  succ:       25 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 710 709 711 25 51 "" [1 uses])
(note 711 710 713 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 713 711 714 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:260 7 {*cmpsi_1}
     (nil))
(jump_insn 714 713 715 25 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 712)
            (pc))) sim2fitman_sup.cpp:260 596 {*jcc_1}
     (nil)
 -> 712)
;;  succ:       3
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 305 306 307 308 309 310 311 531 532 533 534 535 536
(note 715 714 716 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 716 715 717 26 (set (reg/f:DI 0 ax [orig:305 D.6432 ] [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 717 716 894 26 (set (reg:DI 5 di [603])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 894 717 718 26 (set (mem:DI (reg/f:DI 0 ax [orig:305 D.6432 ] [305]) [0 MEM[(void *)_253]+0 S8 A8])
        (reg:DI 5 di [603])) sim2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 718 894 895 26 (set (reg:DI 2 cx [604])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 895 718 719 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:305 D.6432 ] [305])
                (const_int 8 [0x8])) [0 MEM[(void *)_253]+8 S8 A8])
        (reg:DI 2 cx [604])) sim2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 719 895 720 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:305 D.6432 ] [305])
                (const_int 16 [0x10])) [0 MEM[(void *)_253]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_sup.cpp:373 90 {*movsi_internal}
     (nil))
(insn 720 719 721 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:305 D.6432 ] [305])
                (const_int 20 [0x14])) [0 MEM[(void *)_253]+20 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:373 92 {*movhi_internal}
     (nil))
(insn 721 720 722 26 (set (reg/f:DI 0 ax [531])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 722 721 723 26 (parallel [
            (set (reg/f:DI 0 ax [orig:306 D.6432 ] [306])
                (plus:DI (reg/f:DI 0 ax [531])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:374 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 723 722 896 26 (set (reg:DI 4 si [605])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 896 723 724 26 (set (mem:DI (reg/f:DI 0 ax [orig:306 D.6432 ] [306]) [0 MEM[(void *)_254]+0 S8 A8])
        (reg:DI 4 si [605])) sim2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 724 896 897 26 (set (reg:DI 5 di [606])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 897 724 725 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:306 D.6432 ] [306])
                (const_int 8 [0x8])) [0 MEM[(void *)_254]+8 S8 A8])
        (reg:DI 5 di [606])) sim2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 725 897 726 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:306 D.6432 ] [306])
                (const_int 16 [0x10])) [0 MEM[(void *)_254]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_sup.cpp:374 90 {*movsi_internal}
     (nil))
(insn 726 725 727 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:306 D.6432 ] [306])
                (const_int 20 [0x14])) [0 MEM[(void *)_254]+20 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:374 92 {*movhi_internal}
     (nil))
(insn 727 726 728 26 (set (reg/f:DI 0 ax [532])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:375 89 {*movdi_internal}
     (nil))
(insn 728 727 729 26 (parallel [
            (set (reg/f:DI 0 ax [orig:307 D.6432 ] [307])
                (plus:DI (reg/f:DI 0 ax [532])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:375 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 729 728 898 26 (set (reg:DI 2 cx [607])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_sup.cpp:375 89 {*movdi_internal}
     (nil))
(insn 898 729 730 26 (set (mem:DI (reg/f:DI 0 ax [orig:307 D.6432 ] [307]) [0 MEM[(void *)_255]+0 S8 A8])
        (reg:DI 2 cx [607])) sim2fitman_sup.cpp:375 89 {*movdi_internal}
     (nil))
(insn 730 898 899 26 (set (reg:DI 4 si [608])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_sup.cpp:375 89 {*movdi_internal}
     (nil))
(insn 899 730 731 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:307 D.6432 ] [307])
                (const_int 8 [0x8])) [0 MEM[(void *)_255]+8 S8 A8])
        (reg:DI 4 si [608])) sim2fitman_sup.cpp:375 89 {*movdi_internal}
     (nil))
(insn 731 899 732 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:307 D.6432 ] [307])
                (const_int 16 [0x10])) [0 MEM[(void *)_255]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_sup.cpp:375 90 {*movsi_internal}
     (nil))
(insn 732 731 733 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:307 D.6432 ] [307])
                (const_int 20 [0x14])) [0 MEM[(void *)_255]+20 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:375 92 {*movhi_internal}
     (nil))
(insn 733 732 734 26 (set (reg/f:DI 0 ax [533])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:376 89 {*movdi_internal}
     (nil))
(insn 734 733 735 26 (parallel [
            (set (reg/f:DI 0 ax [orig:308 D.6432 ] [308])
                (plus:DI (reg/f:DI 0 ax [533])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:376 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 735 734 900 26 (set (reg:DI 5 di [609])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_sup.cpp:376 89 {*movdi_internal}
     (nil))
(insn 900 735 736 26 (set (mem:DI (reg/f:DI 0 ax [orig:308 D.6432 ] [308]) [0 MEM[(void *)_256]+0 S8 A8])
        (reg:DI 5 di [609])) sim2fitman_sup.cpp:376 89 {*movdi_internal}
     (nil))
(insn 736 900 901 26 (set (reg:DI 2 cx [610])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_sup.cpp:376 89 {*movdi_internal}
     (nil))
(insn 901 736 737 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:308 D.6432 ] [308])
                (const_int 8 [0x8])) [0 MEM[(void *)_256]+8 S8 A8])
        (reg:DI 2 cx [610])) sim2fitman_sup.cpp:376 89 {*movdi_internal}
     (nil))
(insn 737 901 738 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:308 D.6432 ] [308])
                (const_int 16 [0x10])) [0 MEM[(void *)_256]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_sup.cpp:376 90 {*movsi_internal}
     (nil))
(insn 738 737 739 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:308 D.6432 ] [308])
                (const_int 20 [0x14])) [0 MEM[(void *)_256]+20 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:376 92 {*movhi_internal}
     (nil))
(insn 739 738 740 26 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 740 739 741 26 (parallel [
            (set (reg/f:DI 0 ax [orig:309 D.6432 ] [309])
                (plus:DI (reg/f:DI 0 ax [534])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:377 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 741 740 902 26 (set (reg:DI 4 si [611])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 902 741 742 26 (set (mem:DI (reg/f:DI 0 ax [orig:309 D.6432 ] [309]) [0 MEM[(void *)_257]+0 S8 A8])
        (reg:DI 4 si [611])) sim2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 742 902 903 26 (set (reg:DI 5 di [612])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 903 742 743 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:309 D.6432 ] [309])
                (const_int 8 [0x8])) [0 MEM[(void *)_257]+8 S8 A8])
        (reg:DI 5 di [612])) sim2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 743 903 744 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:309 D.6432 ] [309])
                (const_int 16 [0x10])) [0 MEM[(void *)_257]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_sup.cpp:377 90 {*movsi_internal}
     (nil))
(insn 744 743 745 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:309 D.6432 ] [309])
                (const_int 20 [0x14])) [0 MEM[(void *)_257]+20 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:377 92 {*movhi_internal}
     (nil))
(insn 745 744 746 26 (set (reg/f:DI 0 ax [535])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 746 745 747 26 (parallel [
            (set (reg/f:DI 0 ax [orig:310 D.6432 ] [310])
                (plus:DI (reg/f:DI 0 ax [535])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:378 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 747 746 904 26 (set (reg:DI 2 cx [613])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 904 747 748 26 (set (mem:DI (reg/f:DI 0 ax [orig:310 D.6432 ] [310]) [0 MEM[(void *)_258]+0 S8 A8])
        (reg:DI 2 cx [613])) sim2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 748 904 905 26 (set (reg:DI 4 si [614])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 905 748 749 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:310 D.6432 ] [310])
                (const_int 8 [0x8])) [0 MEM[(void *)_258]+8 S8 A8])
        (reg:DI 4 si [614])) sim2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 749 905 750 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:310 D.6432 ] [310])
                (const_int 16 [0x10])) [0 MEM[(void *)_258]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_sup.cpp:378 90 {*movsi_internal}
     (nil))
(insn 750 749 751 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:310 D.6432 ] [310])
                (const_int 20 [0x14])) [0 MEM[(void *)_258]+20 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:378 92 {*movhi_internal}
     (nil))
(insn 751 750 752 26 (set (reg/f:DI 0 ax [536])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 752 751 753 26 (parallel [
            (set (reg/f:DI 0 ax [orig:311 D.6432 ] [311])
                (plus:DI (reg/f:DI 0 ax [536])
                    (const_int 1536 [0x600])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:379 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1536 [0x600]))
        (nil)))
(insn 753 752 906 26 (set (reg:DI 5 di [615])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) sim2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 906 753 754 26 (set (mem:DI (reg/f:DI 0 ax [orig:311 D.6432 ] [311]) [0 MEM[(void *)_259]+0 S8 A8])
        (reg:DI 5 di [615])) sim2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 754 906 907 26 (set (reg:DI 2 cx [616])
        (const_int 7593480468811836769 [0x6961764120656d61])) sim2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 907 754 755 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:311 D.6432 ] [311])
                (const_int 8 [0x8])) [0 MEM[(void *)_259]+8 S8 A8])
        (reg:DI 2 cx [616])) sim2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 755 907 756 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:311 D.6432 ] [311])
                (const_int 16 [0x10])) [0 MEM[(void *)_259]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) sim2fitman_sup.cpp:379 90 {*movsi_internal}
     (nil))
(insn 756 755 775 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:311 D.6432 ] [311])
                (const_int 20 [0x14])) [0 MEM[(void *)_259]+20 S2 A8])
        (const_int 101 [0x65])) sim2fitman_sup.cpp:379 92 {*movhi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 775 756 0 NOTE_INSN_DELETED)

;; Function void disp_help(int) (_Z9disp_helpi, funcdef_no=11, decl_uid=5401, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 69:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 83:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 85:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void disp_help(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={38d} r1={38d} r2={38d} r4={38d} r5={75d,38u} r6={1d,7u} r7={1d,42u} r8={37d} r9={37d} r10={37d} r11={37d} r12={37d} r13={37d} r14={37d} r15={37d} r17={38d,1u} r18={37d} r19={37d} r20={1d,1u} r21={38d} r22={38d} r23={38d} r24={38d} r25={38d} r26={38d} r27={38d} r28={38d} r29={37d} r30={37d} r31={37d} r32={37d} r33={37d} r34={37d} r35={37d} r36={37d} r37={38d} r38={38d} r39={37d} r40={37d} r45={37d} r46={37d} r47={37d} r48={37d} r49={37d} r50={37d} r51={37d} r52={37d} r53={37d} r54={37d} r55={37d} r56={37d} r57={37d} r58={37d} r59={37d} r60={37d} r61={37d} r62={37d} r63={37d} r64={37d} r65={37d} r66={37d} r67={37d} r68={37d} r69={37d} r70={37d} r71={37d} r72={37d} r73={37d} r74={37d} r75={37d} r76={37d} 
;;    total ref usage 2661{2572d,89u,0e} in 78{41 regular + 37 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 version+0 S4 A32])
        (reg:SI 5 di [ version ])) sim2fitman_sup.cpp:387 90 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 version+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:389 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) sim2fitman_sup.cpp:389 596 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2adf2983c098 *.LC18>)) sim2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:390 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2adf2983c130 *.LC19>)) sim2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(call_insn 12 11 13 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:391 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2adf2983c1c8 *.LC20>)) sim2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:393 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2adf2983c260 *.LC21>)) sim2fitman_sup.cpp:394 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:394 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2adf2983c2f8 *.LC22>)) sim2fitman_sup.cpp:395 89 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:395 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2adf2983c390 *.LC23>)) sim2fitman_sup.cpp:396 89 {*movdi_internal}
     (nil))
(call_insn 20 19 21 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:396 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2adf2983c428 *.LC24>)) sim2fitman_sup.cpp:397 89 {*movdi_internal}
     (nil))
(call_insn 22 21 91 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:397 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 91 22 92 3 (set (pc)
        (label_ref 89)) 636 {jump}
     (nil)
 -> 89)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 92 91 25)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 25 92 26 4 68 "" [1 uses])
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x2adf2983c4c0 *.LC25>)) sim2fitman_sup.cpp:410 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:410 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x2adf2983c558 *.LC26>)) sim2fitman_sup.cpp:411 89 {*movdi_internal}
     (nil))
(call_insn 30 29 31 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:411 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2adf2983c130 *.LC19>)) sim2fitman_sup.cpp:412 89 {*movdi_internal}
     (nil))
(call_insn 32 31 33 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:412 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 33 32 34 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x2adf2983c5f0 *.LC27>)) sim2fitman_sup.cpp:416 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:416 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x2adf2983c688 *.LC28>)) sim2fitman_sup.cpp:418 89 {*movdi_internal}
     (nil))
(call_insn 36 35 37 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:418 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 37 36 38 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x2adf2983c720 *.LC29>)) sim2fitman_sup.cpp:419 89 {*movdi_internal}
     (nil))
(call_insn 38 37 39 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:419 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 40 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x2adf2983c7b8 *.LC30>)) sim2fitman_sup.cpp:420 89 {*movdi_internal}
     (nil))
(call_insn 40 39 41 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:420 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 41 40 42 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x2adf2983c850 *.LC31>)) sim2fitman_sup.cpp:421 89 {*movdi_internal}
     (nil))
(call_insn 42 41 43 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:421 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 43 42 44 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x2adf2983c8e8 *.LC32>)) sim2fitman_sup.cpp:422 89 {*movdi_internal}
     (nil))
(call_insn 44 43 45 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:422 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2adf2983c1c8 *.LC20>)) sim2fitman_sup.cpp:424 89 {*movdi_internal}
     (nil))
(call_insn 46 45 47 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:424 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 47 46 48 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x2adf2983c980 *.LC33>)) sim2fitman_sup.cpp:425 89 {*movdi_internal}
     (nil))
(call_insn 48 47 49 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:425 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 49 48 50 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x2adf2983ca18 *.LC34>)) sim2fitman_sup.cpp:426 89 {*movdi_internal}
     (nil))
(call_insn 50 49 51 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:426 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 51 50 52 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x2adf2983cab0 *.LC35>)) sim2fitman_sup.cpp:427 89 {*movdi_internal}
     (nil))
(call_insn 52 51 53 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:427 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x2adf2983cb48 *.LC36>)) sim2fitman_sup.cpp:428 89 {*movdi_internal}
     (nil))
(call_insn 54 53 55 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:428 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 55 54 56 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x2adf2983cbe0 *.LC37>)) sim2fitman_sup.cpp:429 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:429 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 57 56 58 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2adf2983c2f8 *.LC22>)) sim2fitman_sup.cpp:431 89 {*movdi_internal}
     (nil))
(call_insn 58 57 59 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:431 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 59 58 60 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x2adf2983cc78 *.LC38>)) sim2fitman_sup.cpp:432 89 {*movdi_internal}
     (nil))
(call_insn 60 59 61 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:432 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x2adf2983cd10 *.LC39>)) sim2fitman_sup.cpp:433 89 {*movdi_internal}
     (nil))
(call_insn 62 61 63 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:433 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 63 62 64 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x2adf2983cda8 *.LC40>)) sim2fitman_sup.cpp:434 89 {*movdi_internal}
     (nil))
(call_insn 64 63 65 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:434 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 65 64 66 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC41") [flags 0x2]  <var_decl 0x2adf2983ce40 *.LC41>)) sim2fitman_sup.cpp:435 89 {*movdi_internal}
     (nil))
(call_insn 66 65 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:435 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 67 66 68 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC42") [flags 0x2]  <var_decl 0x2adf2983ced8 *.LC42>)) sim2fitman_sup.cpp:436 89 {*movdi_internal}
     (nil))
(call_insn 68 67 69 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:436 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC43") [flags 0x2]  <var_decl 0x2adf29844000 *.LC43>)) sim2fitman_sup.cpp:437 89 {*movdi_internal}
     (nil))
(call_insn 70 69 71 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:437 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x2adf29844098 *.LC44>)) sim2fitman_sup.cpp:438 89 {*movdi_internal}
     (nil))
(call_insn 72 71 73 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:438 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 73 72 74 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC45") [flags 0x2]  <var_decl 0x2adf29844130 *.LC45>)) sim2fitman_sup.cpp:456 89 {*movdi_internal}
     (nil))
(call_insn 74 73 75 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:456 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 75 74 76 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC46") [flags 0x2]  <var_decl 0x2adf298441c8 *.LC46>)) sim2fitman_sup.cpp:457 89 {*movdi_internal}
     (nil))
(call_insn 76 75 77 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:457 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 77 76 78 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC47") [flags 0x2]  <var_decl 0x2adf29844260 *.LC47>)) sim2fitman_sup.cpp:458 89 {*movdi_internal}
     (nil))
(call_insn 78 77 79 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:458 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 79 78 80 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC48") [flags 0x2]  <var_decl 0x2adf298442f8 *.LC48>)) sim2fitman_sup.cpp:460 89 {*movdi_internal}
     (nil))
(call_insn 80 79 81 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:460 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC49") [flags 0x2]  <var_decl 0x2adf29844390 *.LC49>)) sim2fitman_sup.cpp:468 89 {*movdi_internal}
     (nil))
(call_insn 82 81 83 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:468 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 83 82 84 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC50") [flags 0x2]  <var_decl 0x2adf29844428 *.LC50>)) sim2fitman_sup.cpp:469 89 {*movdi_internal}
     (nil))
(call_insn 84 83 85 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:469 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 85 84 86 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC51") [flags 0x2]  <var_decl 0x2adf298444c0 *.LC51>)) sim2fitman_sup.cpp:471 89 {*movdi_internal}
     (nil))
(call_insn 86 85 89 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:471 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 89 86 90 5 67 "" [1 uses])
(note 90 89 93 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 93 90 0 NOTE_INSN_DELETED)

;; Function void check_outfile(IOFiles*, bool, int) (_Z13check_outfileP7IOFilesbi, funcdef_no=12, decl_uid=5412, symbol_order=12)

      Creating newreg=430
Removing SCRATCH in insn #7 (nop 2)
rescanning insn with uid = 7.
      Creating newreg=431
Removing SCRATCH in insn #882 (nop 3)
rescanning insn with uid = 882.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r430
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 11:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 13:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 17:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 23:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 25:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 26:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 27:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 29:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 62:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 70:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 71:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 89:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 101:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 102:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 110:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 126:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 140:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 148:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 149:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 170:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 178:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 179:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 204:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 212:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 213:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 229:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 232:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 242:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 244:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 246:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 254:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 255:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 266:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 272:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 276:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 284:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 285:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 306:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 310:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 318:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 319:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 327:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 328:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 343:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 353:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 357:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 365:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 366:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 383:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 387:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 395:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 396:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 419:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 421:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 429:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 430:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 446:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 449:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 453:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 459:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 461:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 463:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 471:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 472:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 483:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 489:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 493:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 501:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 502:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 523:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 525:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 527:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 535:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 536:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 544:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 551:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 552:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 559:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 560:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 562:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 568:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 570:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 574:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 575
	 Choosing alt 0 in insn 575:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 576:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 581:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 582:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 590:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 592:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 596:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 597
	 Choosing alt 0 in insn 597:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 598:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 604:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 606:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 610:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 611
	 Choosing alt 0 in insn 611:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 612:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 619:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 620:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 628:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 630:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 634:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 635
	 Choosing alt 0 in insn 635:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 636:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 641:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 642:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 646:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 649:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 650:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 652:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 656:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 657
	 Choosing alt 0 in insn 657:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 658:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 663:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 665:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 669:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 670
	 Choosing alt 0 in insn 670:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 671:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 674:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 676:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 677:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 678:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 679:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 683:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 684:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 685:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 689:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 690:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 696:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 697:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 703:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 706:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 711:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 714:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 718:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 719:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 720:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 722:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 727:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 728:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 730:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 732:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 736:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 737:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 738:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 742:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 743
	 Choosing alt 0 in insn 743:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 744:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 749:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 750:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 752:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 754:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 758:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 759:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 760:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 764:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 765
	 Choosing alt 0 in insn 765:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 766:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 771:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 772:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 774:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 778:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 779
	 Choosing alt 0 in insn 779:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 780:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 787:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 788:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 790:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 795:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 796:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 797:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 798:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 802:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 803
	 Choosing alt 0 in insn 803:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 804:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 809:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 810:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 812:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 814:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 817:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 818:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 819:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 820:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 824:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 825
	 Choosing alt 0 in insn 825:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 826:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 831:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 832:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 833:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 837:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 838
	 Choosing alt 0 in insn 838:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 839:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 842:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 843:  (0) r  (1) i {*movdi_internal}
      Creating newreg=432, assigning class GENERAL_REGS to r432
  843: r432:DI=0x7461642e736e755f
    Inserting insn reload after:
  969: [r424:DI]=r432:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 969:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 844:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 845:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 848:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 849:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 850:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 853:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 854:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 855:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 857:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 859:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 860:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 861:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 862:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 865:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 866:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 867:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 870:  (0) rzw {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 873:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 876:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 878:  (1) rzw {*call_value}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 882:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r431
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 884:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 97
EBB 98
EBB 99
EBB 100
EBB 101
EBB 102
EBB 103
EBB 104
EBB 105
EBB 106
EBB 107
EBB 108
EBB 109

********** Pseudo live ranges #1: **********

  BB 108
   Insn 884: point = 0
  BB 109
  BB 107
   Insn 883: point = 0
   Insn 882: point = 0
  BB 106
   Insn 878: point = 1
   Insn 877: point = 1
   Insn 876: point = 2
  BB 105
   Insn 874: point = 3
   Insn 873: point = 3
  BB 104
   Insn 870: point = 3
   Insn 869: point = 3
   Insn 868: point = 4
   Insn 867: point = 5
   Insn 866: point = 6
   Insn 865: point = 8
  BB 103
   Insn 863: point = 9
   Insn 862: point = 9
   Insn 861: point = 10
   Insn 860: point = 11
   Insn 859: point = 11
   Insn 858: point = 12
   Insn 857: point = 13
   Insn 856: point = 13
   Insn 855: point = 14
   Insn 854: point = 14
   Insn 853: point = 16
  BB 102
   Insn 851: point = 17
   Insn 850: point = 17
   Insn 849: point = 18
   Insn 848: point = 20
  BB 101
   Insn 846: point = 21
   Insn 845: point = 21
   Insn 844: point = 21
   Insn 969: point = 22
   Insn 843: point = 23
   Insn 842: point = 24
  BB 99
   Insn 966: point = 25
   Insn 826: point = 25
   Insn 825: point = 26
   Insn 824: point = 28
   Insn 820: point = 29
   Insn 819: point = 31
   Insn 818: point = 33
   Insn 817: point = 35
  BB 92
   Insn 958: point = 36
   Insn 744: point = 36
   Insn 743: point = 37
   Insn 742: point = 39
   Insn 738: point = 40
   Insn 737: point = 42
   Insn 736: point = 44
   Insn 735: point = 46
  BB 100
   Insn 839: point = 47
   Insn 838: point = 48
   Insn 837: point = 50
   Insn 833: point = 51
   Insn 832: point = 53
   Insn 831: point = 55
  BB 98
   Insn 815: point = 56
   Insn 814: point = 56
   Insn 813: point = 57
   Insn 812: point = 58
   Insn 811: point = 58
   Insn 810: point = 59
   Insn 809: point = 59
  BB 97
   Insn 964: point = 60
   Insn 804: point = 60
   Insn 803: point = 61
   Insn 802: point = 63
   Insn 798: point = 64
   Insn 797: point = 66
   Insn 796: point = 68
   Insn 795: point = 70
  BB 96
   Insn 793: point = 71
   Insn 792: point = 71
   Insn 791: point = 72
   Insn 790: point = 73
   Insn 789: point = 73
   Insn 788: point = 74
   Insn 787: point = 74
  BB 95
   Insn 962: point = 75
   Insn 780: point = 75
   Insn 779: point = 76
   Insn 778: point = 78
   Insn 774: point = 79
   Insn 773: point = 81
   Insn 772: point = 83
   Insn 771: point = 85
  BB 94
   Insn 960: point = 86
   Insn 766: point = 86
   Insn 765: point = 87
   Insn 764: point = 89
   Insn 760: point = 90
   Insn 759: point = 92
   Insn 758: point = 94
   Insn 757: point = 96
  BB 93
   Insn 755: point = 97
   Insn 754: point = 97
   Insn 753: point = 98
   Insn 752: point = 99
   Insn 751: point = 99
   Insn 750: point = 100
   Insn 749: point = 100
  BB 91
   Insn 733: point = 101
   Insn 732: point = 101
   Insn 731: point = 102
   Insn 730: point = 103
   Insn 729: point = 103
   Insn 728: point = 104
   Insn 727: point = 104
  BB 90
   Insn 725: point = 105
   Insn 724: point = 105
   Insn 723: point = 106
   Insn 722: point = 107
   Insn 721: point = 107
   Insn 720: point = 108
   Insn 719: point = 108
   Insn 718: point = 109
  BB 89
   Insn 715: point = 109
   Insn 714: point = 109
  BB 88
   Insn 712: point = 109
   Insn 711: point = 109
  BB 87
   Insn 708: point = 109
   Insn 707: point = 109
   Insn 706: point = 110
  BB 86
   Insn 704: point = 111
   Insn 703: point = 111
  BB 85
   Insn 700: point = 111
   Insn 699: point = 111
   Insn 698: point = 112
   Insn 697: point = 113
   Insn 696: point = 114
   Insn 695: point = 116
  BB 84
   Insn 693: point = 117
   Insn 692: point = 117
   Insn 691: point = 118
   Insn 690: point = 119
   Insn 689: point = 119
   Insn 688: point = 120
   Insn 687: point = 121
   Insn 686: point = 121
   Insn 685: point = 122
   Insn 684: point = 122
   Insn 683: point = 124
  BB 83
   Insn 681: point = 125
   Insn 680: point = 125
   Insn 679: point = 126
   Insn 678: point = 128
   Insn 677: point = 129
   Insn 676: point = 130
   Insn 675: point = 130
   Insn 674: point = 130
  BB 81
   Insn 956: point = 131
   Insn 658: point = 131
   Insn 657: point = 132
   Insn 656: point = 134
   Insn 652: point = 135
   Insn 651: point = 137
   Insn 650: point = 139
   Insn 649: point = 141
  BB 74
   Insn 948: point = 142
   Insn 576: point = 142
   Insn 575: point = 143
   Insn 574: point = 145
   Insn 570: point = 146
   Insn 569: point = 148
   Insn 568: point = 150
   Insn 567: point = 152
  BB 82
   Insn 671: point = 153
   Insn 670: point = 154
   Insn 669: point = 156
   Insn 665: point = 157
   Insn 664: point = 159
   Insn 663: point = 161
  BB 80
   Insn 647: point = 162
   Insn 646: point = 162
   Insn 645: point = 163
   Insn 644: point = 164
   Insn 643: point = 164
   Insn 642: point = 165
   Insn 641: point = 165
  BB 79
   Insn 954: point = 166
   Insn 636: point = 166
   Insn 635: point = 167
   Insn 634: point = 169
   Insn 630: point = 170
   Insn 629: point = 172
   Insn 628: point = 174
   Insn 627: point = 176
  BB 78
   Insn 625: point = 177
   Insn 624: point = 177
   Insn 623: point = 178
   Insn 622: point = 179
   Insn 621: point = 179
   Insn 620: point = 180
   Insn 619: point = 180
  BB 77
   Insn 952: point = 181
   Insn 612: point = 181
   Insn 611: point = 182
   Insn 610: point = 184
   Insn 606: point = 185
   Insn 605: point = 187
   Insn 604: point = 189
   Insn 603: point = 191
  BB 76
   Insn 950: point = 192
   Insn 598: point = 192
   Insn 597: point = 193
   Insn 596: point = 195
   Insn 592: point = 196
   Insn 591: point = 198
   Insn 590: point = 200
   Insn 589: point = 202
  BB 75
   Insn 587: point = 203
   Insn 586: point = 203
   Insn 585: point = 204
   Insn 584: point = 205
   Insn 583: point = 205
   Insn 582: point = 206
   Insn 581: point = 206
  BB 73
   Insn 565: point = 207
   Insn 564: point = 207
   Insn 563: point = 208
   Insn 562: point = 209
   Insn 561: point = 209
   Insn 560: point = 210
   Insn 559: point = 210
  BB 72
   Insn 557: point = 211
   Insn 556: point = 211
   Insn 555: point = 212
   Insn 554: point = 213
   Insn 553: point = 213
   Insn 552: point = 214
   Insn 551: point = 214
  BB 71
   Insn 548: point = 215
   Insn 547: point = 215
  BB 70
   Insn 545: point = 215
   Insn 544: point = 215
  BB 65
   Insn 944: point = 215
  BB 64
   Insn 507: point = 215
   Insn 506: point = 215
  BB 62
   Insn 941: point = 215
   Insn 483: point = 215
  BB 63
   Insn 502: point = 215
   Insn 501: point = 215
   Insn 500: point = 216
   Insn 499: point = 218
   Insn 498: point = 219
   Insn 497: point = 221
   Insn 496: point = 222
   Insn 495: point = 222
   Insn 494: point = 223
   Insn 493: point = 225
   Insn 492: point = 227
   Insn 491: point = 229
   Insn 490: point = 230
   Insn 489: point = 232
   Insn 488: point = 234
   Insn 487: point = 235
  BB 46
   Insn 924: point = 236
  BB 45
   Insn 371: point = 236
   Insn 370: point = 236
  BB 43
   Insn 921: point = 236
   Insn 347: point = 236
  BB 44
   Insn 366: point = 236
   Insn 365: point = 236
   Insn 364: point = 237
   Insn 363: point = 239
   Insn 362: point = 240
   Insn 361: point = 242
   Insn 360: point = 243
   Insn 359: point = 243
   Insn 358: point = 244
   Insn 357: point = 246
   Insn 356: point = 248
   Insn 355: point = 250
   Insn 354: point = 251
   Insn 353: point = 253
   Insn 352: point = 255
   Insn 351: point = 256
  BB 50
   Insn 929: point = 257
  BB 49
   Insn 401: point = 257
   Insn 400: point = 257
  BB 47
   Insn 926: point = 257
   Insn 377: point = 257
  BB 42
   Insn 345: point = 257
   Insn 344: point = 257
   Insn 343: point = 258
   Insn 342: point = 260
   Insn 341: point = 262
   Insn 340: point = 263
   Insn 339: point = 265
  BB 48
   Insn 396: point = 266
   Insn 395: point = 266
   Insn 394: point = 267
   Insn 393: point = 269
   Insn 392: point = 270
   Insn 391: point = 272
   Insn 390: point = 273
   Insn 389: point = 273
   Insn 388: point = 274
   Insn 387: point = 276
   Insn 386: point = 278
   Insn 385: point = 280
   Insn 384: point = 281
   Insn 383: point = 283
   Insn 382: point = 285
   Insn 381: point = 286
  BB 61
   Insn 939: point = 287
  BB 60
   Insn 477: point = 287
   Insn 476: point = 287
  BB 58
   Insn 936: point = 287
   Insn 453: point = 287
  BB 57
   Insn 451: point = 287
   Insn 450: point = 287
   Insn 449: point = 288
   Insn 448: point = 290
   Insn 447: point = 292
   Insn 446: point = 293
   Insn 445: point = 295
  BB 59
   Insn 472: point = 296
   Insn 471: point = 296
   Insn 470: point = 297
   Insn 469: point = 299
   Insn 468: point = 300
   Insn 467: point = 302
   Insn 466: point = 303
   Insn 465: point = 303
   Insn 464: point = 304
   Insn 463: point = 306
   Insn 462: point = 308
   Insn 461: point = 310
   Insn 460: point = 311
   Insn 459: point = 313
   Insn 458: point = 315
   Insn 457: point = 316
  BB 69
   Insn 541: point = 317
   Insn 540: point = 317
  BB 67
   Insn 946: point = 317
   Insn 517: point = 317
  BB 68
   Insn 536: point = 317
   Insn 535: point = 317
   Insn 534: point = 318
   Insn 533: point = 320
   Insn 532: point = 321
   Insn 531: point = 323
   Insn 530: point = 324
   Insn 529: point = 324
   Insn 528: point = 325
   Insn 527: point = 327
   Insn 526: point = 329
   Insn 525: point = 331
   Insn 524: point = 332
   Insn 523: point = 334
   Insn 522: point = 336
   Insn 521: point = 337
  BB 66
   Insn 515: point = 338
   Insn 514: point = 338
   Insn 513: point = 339
  BB 56
   Insn 443: point = 340
   Insn 442: point = 340
   Insn 441: point = 341
  BB 55
   Insn 934: point = 342
  BB 54
   Insn 435: point = 342
   Insn 434: point = 342
  BB 52
   Insn 931: point = 342
   Insn 411: point = 342
  BB 53
   Insn 430: point = 342
   Insn 429: point = 342
   Insn 428: point = 343
   Insn 427: point = 345
   Insn 426: point = 346
   Insn 425: point = 348
   Insn 424: point = 349
   Insn 423: point = 349
   Insn 422: point = 350
   Insn 421: point = 352
   Insn 420: point = 354
   Insn 419: point = 356
   Insn 418: point = 357
   Insn 417: point = 359
   Insn 416: point = 361
   Insn 415: point = 362
  BB 51
   Insn 409: point = 363
   Insn 408: point = 363
   Insn 407: point = 364
  BB 41
   Insn 337: point = 365
   Insn 336: point = 365
   Insn 335: point = 366
  BB 40
   Insn 333: point = 367
   Insn 332: point = 367
   Insn 331: point = 368
   Insn 330: point = 369
   Insn 329: point = 369
   Insn 328: point = 370
   Insn 327: point = 370
  BB 35
   Insn 917: point = 371
  BB 34
   Insn 290: point = 371
   Insn 289: point = 371
  BB 32
   Insn 914: point = 371
   Insn 266: point = 371
  BB 33
   Insn 285: point = 371
   Insn 284: point = 371
   Insn 283: point = 372
   Insn 282: point = 374
   Insn 281: point = 375
   Insn 280: point = 377
   Insn 279: point = 378
   Insn 278: point = 378
   Insn 277: point = 379
   Insn 276: point = 381
   Insn 275: point = 383
   Insn 274: point = 385
   Insn 273: point = 386
   Insn 272: point = 388
   Insn 271: point = 390
   Insn 270: point = 391
  BB 16
   Insn 897: point = 392
  BB 15
   Insn 154: point = 392
   Insn 153: point = 392
  BB 13
   Insn 894: point = 392
   Insn 130: point = 392
  BB 14
   Insn 149: point = 392
   Insn 148: point = 392
   Insn 147: point = 393
   Insn 146: point = 395
   Insn 145: point = 396
   Insn 144: point = 398
   Insn 143: point = 399
   Insn 142: point = 399
   Insn 141: point = 400
   Insn 140: point = 402
   Insn 139: point = 404
   Insn 138: point = 406
   Insn 137: point = 407
   Insn 136: point = 409
   Insn 135: point = 411
   Insn 134: point = 412
  BB 20
   Insn 902: point = 413
  BB 19
   Insn 184: point = 413
   Insn 183: point = 413
  BB 17
   Insn 899: point = 413
   Insn 160: point = 413
  BB 12
   Insn 128: point = 413
   Insn 127: point = 413
   Insn 126: point = 414
   Insn 125: point = 416
   Insn 124: point = 418
   Insn 123: point = 419
   Insn 122: point = 421
  BB 18
   Insn 179: point = 422
   Insn 178: point = 422
   Insn 177: point = 423
   Insn 176: point = 425
   Insn 175: point = 426
   Insn 174: point = 428
   Insn 173: point = 429
   Insn 172: point = 429
   Insn 171: point = 430
   Insn 170: point = 432
   Insn 169: point = 434
   Insn 168: point = 436
   Insn 167: point = 437
   Insn 166: point = 439
   Insn 165: point = 441
   Insn 164: point = 442
  BB 31
   Insn 912: point = 443
  BB 30
   Insn 260: point = 443
   Insn 259: point = 443
  BB 28
   Insn 909: point = 443
   Insn 236: point = 443
  BB 27
   Insn 234: point = 443
   Insn 233: point = 443
   Insn 232: point = 444
   Insn 231: point = 446
   Insn 230: point = 448
   Insn 229: point = 449
   Insn 228: point = 451
  BB 29
   Insn 255: point = 452
   Insn 254: point = 452
   Insn 253: point = 453
   Insn 252: point = 455
   Insn 251: point = 456
   Insn 250: point = 458
   Insn 249: point = 459
   Insn 248: point = 459
   Insn 247: point = 460
   Insn 246: point = 462
   Insn 245: point = 464
   Insn 244: point = 466
   Insn 243: point = 467
   Insn 242: point = 469
   Insn 241: point = 471
   Insn 240: point = 472
  BB 39
   Insn 324: point = 473
   Insn 323: point = 473
  BB 37
   Insn 919: point = 473
   Insn 300: point = 473
  BB 38
   Insn 319: point = 473
   Insn 318: point = 473
   Insn 317: point = 474
   Insn 316: point = 476
   Insn 315: point = 477
   Insn 314: point = 479
   Insn 313: point = 480
   Insn 312: point = 480
   Insn 311: point = 481
   Insn 310: point = 483
   Insn 309: point = 485
   Insn 308: point = 487
   Insn 307: point = 488
   Insn 306: point = 490
   Insn 305: point = 492
   Insn 304: point = 493
  BB 36
   Insn 298: point = 494
   Insn 297: point = 494
   Insn 296: point = 495
  BB 26
   Insn 226: point = 496
   Insn 225: point = 496
   Insn 224: point = 497
  BB 25
   Insn 907: point = 498
  BB 24
   Insn 218: point = 498
   Insn 217: point = 498
  BB 22
   Insn 904: point = 498
   Insn 194: point = 498
  BB 23
   Insn 213: point = 498
   Insn 212: point = 498
   Insn 211: point = 499
   Insn 210: point = 501
   Insn 209: point = 502
   Insn 208: point = 504
   Insn 207: point = 505
   Insn 206: point = 505
   Insn 205: point = 506
   Insn 204: point = 508
   Insn 203: point = 510
   Insn 202: point = 512
   Insn 201: point = 513
   Insn 200: point = 515
   Insn 199: point = 517
   Insn 198: point = 518
  BB 21
   Insn 192: point = 519
   Insn 191: point = 519
   Insn 190: point = 520
  BB 11
   Insn 120: point = 521
   Insn 119: point = 521
   Insn 118: point = 522
  BB 10
   Insn 116: point = 523
   Insn 115: point = 523
   Insn 114: point = 524
   Insn 113: point = 525
   Insn 112: point = 525
   Insn 111: point = 526
   Insn 110: point = 526
  BB 9
   Insn 107: point = 527
   Insn 106: point = 527
  BB 7
   Insn 892: point = 527
   Insn 83: point = 527
  BB 8
   Insn 102: point = 527
   Insn 101: point = 527
   Insn 100: point = 528
   Insn 99: point = 530
   Insn 98: point = 531
   Insn 97: point = 533
   Insn 96: point = 534
   Insn 95: point = 534
   Insn 94: point = 535
   Insn 93: point = 537
   Insn 92: point = 539
   Insn 91: point = 541
   Insn 90: point = 542
   Insn 89: point = 544
   Insn 88: point = 546
   Insn 87: point = 547
  BB 6
   Insn 81: point = 548
   Insn 80: point = 548
   Insn 79: point = 549
  BB 5
   Insn 76: point = 550
   Insn 75: point = 550
  BB 3
   Insn 890: point = 550
   Insn 52: point = 550
  BB 4
   Insn 71: point = 550
   Insn 70: point = 550
   Insn 69: point = 551
   Insn 68: point = 553
   Insn 67: point = 554
   Insn 66: point = 556
   Insn 65: point = 557
   Insn 64: point = 557
   Insn 63: point = 558
   Insn 62: point = 560
   Insn 61: point = 562
   Insn 60: point = 564
   Insn 59: point = 565
   Insn 58: point = 567
   Insn 57: point = 569
   Insn 56: point = 570
  BB 2
   Insn 50: point = 571
   Insn 49: point = 571
   Insn 48: point = 572
   Insn 47: point = 573
   Insn 46: point = 574
   Insn 45: point = 576
   Insn 44: point = 577
   Insn 43: point = 577
   Insn 42: point = 578
   Insn 41: point = 580
   Insn 40: point = 581
   Insn 39: point = 582
   Insn 38: point = 584
   Insn 37: point = 585
   Insn 36: point = 585
   Insn 35: point = 586
   Insn 34: point = 588
   Insn 33: point = 589
   Insn 32: point = 589
   Insn 31: point = 589
   Insn 30: point = 589
   Insn 29: point = 589
   Insn 28: point = 589
   Insn 27: point = 589
   Insn 26: point = 589
   Insn 25: point = 589
   Insn 24: point = 589
   Insn 23: point = 589
   Insn 22: point = 589
   Insn 21: point = 589
   Insn 20: point = 589
   Insn 19: point = 589
   Insn 18: point = 589
   Insn 17: point = 589
   Insn 16: point = 589
   Insn 15: point = 589
   Insn 14: point = 589
   Insn 13: point = 589
   Insn 12: point = 589
   Insn 11: point = 589
   Insn 10: point = 589
   Insn 7: point = 589
   Insn 4: point = 591
   Insn 5: point = 592
   Insn 3: point = 592
   Insn 2: point = 593
 r83: [585..586]
 r84: [583..584]
 r85: [581..582]
 r86: [577..578]
 r87: [575..576]
 r88: [573..574]
 r89: [571..572]
 r90: [566..570]
 r91: [566..567]
 r92: [563..565]
 r93: [559..560]
 r94: [557..558]
 r95: [555..556]
 r96: [550..554]
 r97: [548..549]
 r98: [543..547]
 r99: [543..544]
 r100: [540..542]
 r101: [536..537]
 r102: [534..535]
 r103: [532..533]
 r104: [527..531]
 r105: [523..524]
 r106: [521..522]
 r107: [519..520]
 r108: [514..518]
 r109: [514..515]
 r110: [511..513]
 r111: [507..508]
 r112: [505..506]
 r113: [503..504]
 r114: [498..502]
 r115: [420..421]
 r116: [417..419]
 r117: [413..414]
 r118: [438..442]
 r119: [438..439]
 r120: [435..437]
 r121: [431..432]
 r122: [429..430]
 r123: [427..428]
 r124: [422..426]
 r125: [408..412]
 r126: [408..409]
 r127: [405..407]
 r128: [401..402]
 r129: [399..400]
 r130: [397..398]
 r131: [392..396]
 r132: [496..497]
 r133: [450..451]
 r134: [447..449]
 r135: [443..444]
 r136: [387..391]
 r137: [387..388]
 r138: [384..386]
 r139: [380..381]
 r140: [378..379]
 r141: [376..377]
 r142: [371..375]
 r143: [468..472]
 r144: [468..469]
 r145: [465..467]
 r146: [461..462]
 r147: [459..460]
 r148: [457..458]
 r149: [452..456]
 r150: [494..495]
 r151: [489..493]
 r152: [489..490]
 r153: [486..488]
 r154: [482..483]
 r155: [480..481]
 r156: [478..479]
 r157: [473..477]
 r158: [367..368]
 r159: [365..366]
 r160: [363..364]
 r161: [358..362]
 r162: [358..359]
 r163: [355..357]
 r164: [351..352]
 r165: [349..350]
 r166: [347..348]
 r167: [342..346]
 r168: [264..265]
 r169: [261..263]
 r170: [257..258]
 r171: [282..286]
 r172: [282..283]
 r173: [279..281]
 r174: [275..276]
 r175: [273..274]
 r176: [271..272]
 r177: [266..270]
 r178: [252..256]
 r179: [252..253]
 r180: [249..251]
 r181: [245..246]
 r182: [243..244]
 r183: [241..242]
 r184: [236..240]
 r185: [340..341]
 r186: [294..295]
 r187: [291..293]
 r188: [287..288]
 r189: [231..235]
 r190: [231..232]
 r191: [228..230]
 r192: [224..225]
 r193: [222..223]
 r194: [220..221]
 r195: [215..219]
 r196: [312..316]
 r197: [312..313]
 r198: [309..311]
 r199: [305..306]
 r200: [303..304]
 r201: [301..302]
 r202: [296..300]
 r203: [338..339]
 r204: [333..337]
 r205: [333..334]
 r206: [330..332]
 r207: [326..327]
 r208: [324..325]
 r209: [322..323]
 r210: [317..321]
 r211: [211..212]
 r212: [207..208]
 r213: [151..152]
 r214: [149..150]
 r215: [203..204]
 r216: [201..202]
 r217: [199..200]
 r218: [190..191]
 r219: [188..189]
 r220: [177..178]
 r221: [175..176]
 r222: [173..174]
 r223: [162..163]
 r224: [140..141]
 r225: [138..139]
 r226: [160..161]
 r227: [125..126]
 r228: [121..122]
 r229: [119..120]
 r230: [117..118]
 r231: [111..114]
 r232: [105..106]
 r233: [101..102]
 r234: [45..46]
 r235: [43..44]
 r236: [97..98]
 r237: [95..96]
 r238: [93..94]
 r239: [84..85]
 r240: [82..83]
 r241: [71..72]
 r242: [69..70]
 r243: [67..68]
 r244: [56..57]
 r245: [34..35]
 r246: [32..33]
 r247: [54..55]
 r248: [17..18]
 r249: [13..14]
 r250: [11..12]
 r251: [9..10]
 r252: [3..6]
 r253: [591..592]
 r254: [587..588]
 r255: [579..580]
 r256: [568..569]
 r257: [561..564]
 r258: [561..562]
 r259: [550..551]
 r260: [552..553]
 r261: [545..546]
 r262: [538..541]
 r263: [538..539]
 r264: [527..528]
 r265: [529..530]
 r266: [525..526]
 r267: [415..418]
 r268: [415..416]
 r269: [410..411]
 r270: [403..406]
 r271: [403..404]
 r272: [392..393]
 r273: [394..395]
 r274: [440..441]
 r275: [433..436]
 r276: [433..434]
 r277: [422..423]
 r278: [424..425]
 r279: [516..517]
 r280: [509..512]
 r281: [509..510]
 r282: [498..499]
 r283: [500..501]
 r284: [445..448]
 r285: [445..446]
 r286: [470..471]
 r287: [463..466]
 r288: [463..464]
 r289: [452..453]
 r290: [454..455]
 r291: [389..390]
 r292: [382..385]
 r293: [382..383]
 r294: [371..372]
 r295: [373..374]
 r296: [491..492]
 r297: [484..487]
 r298: [484..485]
 r299: [473..474]
 r300: [475..476]
 r301: [369..370]
 r302: [259..262]
 r303: [259..260]
 r304: [254..255]
 r305: [247..250]
 r306: [247..248]
 r307: [236..237]
 r308: [238..239]
 r309: [284..285]
 r310: [277..280]
 r311: [277..278]
 r312: [266..267]
 r313: [268..269]
 r314: [360..361]
 r315: [353..356]
 r316: [353..354]
 r317: [342..343]
 r318: [344..345]
 r319: [289..292]
 r320: [289..290]
 r321: [314..315]
 r322: [307..310]
 r323: [307..308]
 r324: [296..297]
 r325: [298..299]
 r326: [233..234]
 r327: [226..229]
 r328: [226..227]
 r329: [215..216]
 r330: [217..218]
 r331: [335..336]
 r332: [328..331]
 r333: [328..329]
 r334: [317..318]
 r335: [319..320]
 r336: [213..214]
 r337: [209..210]
 r338: [147..148]
 r339: [144..146]
 r342: [142..143]
 r343: [144..145]
 r344: [205..206]
 r345: [197..198]
 r346: [194..196]
 r349: [192..193]
 r350: [194..195]
 r351: [186..187]
 r352: [183..185]
 r355: [181..182]
 r356: [183..184]
 r357: [179..180]
 r358: [171..172]
 r359: [168..170]
 r362: [166..167]
 r363: [168..169]
 r364: [164..165]
 r365: [136..137]
 r366: [133..135]
 r369: [131..132]
 r370: [133..134]
 r371: [158..159]
 r372: [155..157]
 r375: [153..154]
 r376: [155..156]
 r377: [129..130]
 r378: [127..128]
 r379: [123..124]
 r380: [115..116]
 r381: [112..113]
 r382: [109..110]
 r383: [107..108]
 r384: [103..104]
 r385: [41..42]
 r386: [38..40]
 r389: [36..37]
 r390: [38..39]
 r391: [99..100]
 r392: [91..92]
 r393: [88..90]
 r396: [86..87]
 r397: [88..89]
 r398: [80..81]
 r399: [77..79]
 r402: [75..76]
 r403: [77..78]
 r404: [73..74]
 r405: [65..66]
 r406: [62..64]
 r409: [60..61]
 r410: [62..63]
 r411: [58..59]
 r412: [30..31]
 r413: [27..29]
 r416: [25..26]
 r417: [27..28]
 r418: [52..53]
 r419: [49..51]
 r422: [47..48]
 r423: [49..50]
 r424: [21..24]
 r425: [19..20]
 r426: [15..16]
 r427: [7..8]
 r428: [4..5]
 r429: [1..2]
 r430: [589..590]
 r431: [0..0]
 r432: [22..23]
Compressing live ranges: from 593 to 529 - 89%
Ranges after the compression:
 r83: [521..522]
 r84: [519..520]
 r85: [517..518]
 r86: [513..514]
 r87: [511..512]
 r88: [509..510]
 r89: [507..508]
 r90: [503..506]
 r91: [503..504]
 r92: [501..502]
 r93: [497..498]
 r94: [495..496]
 r95: [493..494]
 r96: [489..492]
 r97: [487..488]
 r98: [483..486]
 r99: [483..484]
 r100: [481..482]
 r101: [477..478]
 r102: [475..476]
 r103: [473..474]
 r104: [469..472]
 r105: [465..466]
 r106: [463..464]
 r107: [461..462]
 r108: [457..460]
 r109: [457..458]
 r110: [455..456]
 r111: [451..452]
 r112: [449..450]
 r113: [447..448]
 r114: [443..446]
 r115: [375..376]
 r116: [373..374]
 r117: [369..370]
 r118: [391..394]
 r119: [391..392]
 r120: [389..390]
 r121: [385..386]
 r122: [383..384]
 r123: [381..382]
 r124: [377..380]
 r125: [365..368]
 r126: [365..366]
 r127: [363..364]
 r128: [359..360]
 r129: [357..358]
 r130: [355..356]
 r131: [351..354]
 r132: [441..442]
 r133: [401..402]
 r134: [399..400]
 r135: [395..396]
 r136: [347..350]
 r137: [347..348]
 r138: [345..346]
 r139: [341..342]
 r140: [339..340]
 r141: [337..338]
 r142: [333..336]
 r143: [417..420]
 r144: [417..418]
 r145: [415..416]
 r146: [411..412]
 r147: [409..410]
 r148: [407..408]
 r149: [403..406]
 r150: [439..440]
 r151: [435..438]
 r152: [435..436]
 r153: [433..434]
 r154: [429..430]
 r155: [427..428]
 r156: [425..426]
 r157: [421..424]
 r158: [329..330]
 r159: [327..328]
 r160: [325..326]
 r161: [321..324]
 r162: [321..322]
 r163: [319..320]
 r164: [315..316]
 r165: [313..314]
 r166: [311..312]
 r167: [307..310]
 r168: [239..240]
 r169: [237..238]
 r170: [233..234]
 r171: [255..258]
 r172: [255..256]
 r173: [253..254]
 r174: [249..250]
 r175: [247..248]
 r176: [245..246]
 r177: [241..244]
 r178: [229..232]
 r179: [229..230]
 r180: [227..228]
 r181: [223..224]
 r182: [221..222]
 r183: [219..220]
 r184: [215..218]
 r185: [305..306]
 r186: [265..266]
 r187: [263..264]
 r188: [259..260]
 r189: [211..214]
 r190: [211..212]
 r191: [209..210]
 r192: [205..206]
 r193: [203..204]
 r194: [201..202]
 r195: [197..200]
 r196: [281..284]
 r197: [281..282]
 r198: [279..280]
 r199: [275..276]
 r200: [273..274]
 r201: [271..272]
 r202: [267..270]
 r203: [303..304]
 r204: [299..302]
 r205: [299..300]
 r206: [297..298]
 r207: [293..294]
 r208: [291..292]
 r209: [289..290]
 r210: [285..288]
 r211: [193..194]
 r212: [189..190]
 r213: [137..138]
 r214: [135..136]
 r215: [185..186]
 r216: [183..184]
 r217: [181..182]
 r218: [173..174]
 r219: [171..172]
 r220: [161..162]
 r221: [159..160]
 r222: [157..158]
 r223: [147..148]
 r224: [127..128]
 r225: [125..126]
 r226: [145..146]
 r227: [113..114]
 r228: [109..110]
 r229: [107..108]
 r230: [105..106]
 r231: [101..102]
 r232: [95..96]
 r233: [91..92]
 r234: [39..40]
 r235: [37..38]
 r236: [87..88]
 r237: [85..86]
 r238: [83..84]
 r239: [75..76]
 r240: [73..74]
 r241: [63..64]
 r242: [61..62]
 r243: [59..60]
 r244: [49..50]
 r245: [29..30]
 r246: [27..28]
 r247: [47..48]
 r248: [15..16]
 r249: [11..12]
 r250: [9..10]
 r251: [7..8]
 r252: [3..4]
 r253: [527..528]
 r254: [523..524]
 r255: [515..516]
 r256: [505..506]
 r257: [499..502]
 r258: [499..500]
 r259: [489..490]
 r260: [491..492]
 r261: [485..486]
 r262: [479..482]
 r263: [479..480]
 r264: [469..470]
 r265: [471..472]
 r266: [467..468]
 r267: [371..374]
 r268: [371..372]
 r269: [367..368]
 r270: [361..364]
 r271: [361..362]
 r272: [351..352]
 r273: [353..354]
 r274: [393..394]
 r275: [387..390]
 r276: [387..388]
 r277: [377..378]
 r278: [379..380]
 r279: [459..460]
 r280: [453..456]
 r281: [453..454]
 r282: [443..444]
 r283: [445..446]
 r284: [397..400]
 r285: [397..398]
 r286: [419..420]
 r287: [413..416]
 r288: [413..414]
 r289: [403..404]
 r290: [405..406]
 r291: [349..350]
 r292: [343..346]
 r293: [343..344]
 r294: [333..334]
 r295: [335..336]
 r296: [437..438]
 r297: [431..434]
 r298: [431..432]
 r299: [421..422]
 r300: [423..424]
 r301: [331..332]
 r302: [235..238]
 r303: [235..236]
 r304: [231..232]
 r305: [225..228]
 r306: [225..226]
 r307: [215..216]
 r308: [217..218]
 r309: [257..258]
 r310: [251..254]
 r311: [251..252]
 r312: [241..242]
 r313: [243..244]
 r314: [323..324]
 r315: [317..320]
 r316: [317..318]
 r317: [307..308]
 r318: [309..310]
 r319: [261..264]
 r320: [261..262]
 r321: [283..284]
 r322: [277..280]
 r323: [277..278]
 r324: [267..268]
 r325: [269..270]
 r326: [213..214]
 r327: [207..210]
 r328: [207..208]
 r329: [197..198]
 r330: [199..200]
 r331: [301..302]
 r332: [295..298]
 r333: [295..296]
 r334: [285..286]
 r335: [287..288]
 r336: [195..196]
 r337: [191..192]
 r338: [133..134]
 r339: [131..132]
 r342: [129..130]
 r343: [131..132]
 r344: [187..188]
 r345: [179..180]
 r346: [177..178]
 r349: [175..176]
 r350: [177..178]
 r351: [169..170]
 r352: [167..168]
 r355: [165..166]
 r356: [167..168]
 r357: [163..164]
 r358: [155..156]
 r359: [153..154]
 r362: [151..152]
 r363: [153..154]
 r364: [149..150]
 r365: [123..124]
 r366: [121..122]
 r369: [119..120]
 r370: [121..122]
 r371: [143..144]
 r372: [141..142]
 r375: [139..140]
 r376: [141..142]
 r377: [117..118]
 r378: [115..116]
 r379: [111..112]
 r380: [103..104]
 r381: [101..102]
 r382: [99..100]
 r383: [97..98]
 r384: [93..94]
 r385: [35..36]
 r386: [33..34]
 r389: [31..32]
 r390: [33..34]
 r391: [89..90]
 r392: [81..82]
 r393: [79..80]
 r396: [77..78]
 r397: [79..80]
 r398: [71..72]
 r399: [69..70]
 r402: [67..68]
 r403: [69..70]
 r404: [65..66]
 r405: [57..58]
 r406: [55..56]
 r409: [53..54]
 r410: [55..56]
 r411: [51..52]
 r412: [25..26]
 r413: [23..24]
 r416: [21..22]
 r417: [23..24]
 r418: [45..46]
 r419: [43..44]
 r422: [41..42]
 r423: [43..44]
 r424: [19..20]
 r425: [17..18]
 r426: [13..14]
 r427: [5..6]
 r428: [3..4]
 r429: [1..2]
 r430: [525..526]
 r431: [0..0]
 r432: [19..20]

********** Assignment #1: **********

	 Assigning to 432 (cl=GENERAL_REGS, orig=432, freq=2, tfirst=432, tfreq=2)...
	   Assign 2 to reload r432 (freq=2)
	 Assigning to 430 (cl=INDEX_REGS, orig=430, freq=1, tfirst=430, tfreq=1)...
	   Assign 0 to reload r430 (freq=1)
	 Assigning to 431 (cl=INDEX_REGS, orig=431, freq=1, tfirst=431, tfreq=1)...
	   Assign 0 to reload r431 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 56
changing reg in insn 59
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 70
changing reg in insn 79
changing reg in insn 80
changing reg in insn 87
changing reg in insn 90
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 101
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
changing reg in insn 190
changing reg in insn 191
changing reg in insn 198
changing reg in insn 201
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 209
changing reg in insn 212
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 164
changing reg in insn 167
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 178
changing reg in insn 134
changing reg in insn 137
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 224
changing reg in insn 225
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 270
changing reg in insn 273
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 284
changing reg in insn 240
changing reg in insn 243
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 254
changing reg in insn 296
changing reg in insn 297
changing reg in insn 304
changing reg in insn 307
changing reg in insn 306
changing reg in insn 307
changing reg in insn 307
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 311
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 318
changing reg in insn 331
changing reg in insn 332
changing reg in insn 335
changing reg in insn 336
changing reg in insn 407
changing reg in insn 408
changing reg in insn 415
changing reg in insn 418
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 420
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 423
changing reg in insn 425
changing reg in insn 426
changing reg in insn 429
changing reg in insn 339
changing reg in insn 340
changing reg in insn 340
changing reg in insn 342
changing reg in insn 343
changing reg in insn 344
changing reg in insn 381
changing reg in insn 384
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 386
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 392
changing reg in insn 395
changing reg in insn 351
changing reg in insn 354
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 356
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 359
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 441
changing reg in insn 442
changing reg in insn 445
changing reg in insn 446
changing reg in insn 446
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 487
changing reg in insn 490
changing reg in insn 489
changing reg in insn 490
changing reg in insn 490
changing reg in insn 492
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 498
changing reg in insn 501
changing reg in insn 457
changing reg in insn 460
changing reg in insn 459
changing reg in insn 460
changing reg in insn 460
changing reg in insn 462
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 465
changing reg in insn 467
changing reg in insn 468
changing reg in insn 471
changing reg in insn 513
changing reg in insn 514
changing reg in insn 521
changing reg in insn 524
changing reg in insn 523
changing reg in insn 524
changing reg in insn 524
changing reg in insn 526
changing reg in insn 527
changing reg in insn 528
changing reg in insn 528
changing reg in insn 529
changing reg in insn 531
changing reg in insn 532
changing reg in insn 535
changing reg in insn 555
changing reg in insn 556
changing reg in insn 563
changing reg in insn 564
changing reg in insn 567
changing reg in insn 568
changing reg in insn 568
changing reg in insn 569
changing reg in insn 585
changing reg in insn 586
changing reg in insn 589
changing reg in insn 590
changing reg in insn 590
changing reg in insn 591
changing reg in insn 603
changing reg in insn 604
changing reg in insn 604
changing reg in insn 605
changing reg in insn 623
changing reg in insn 624
changing reg in insn 627
changing reg in insn 628
changing reg in insn 628
changing reg in insn 629
changing reg in insn 645
changing reg in insn 646
changing reg in insn 649
changing reg in insn 650
changing reg in insn 650
changing reg in insn 651
changing reg in insn 663
changing reg in insn 664
changing reg in insn 679
changing reg in insn 680
changing reg in insn 684
changing reg in insn 686
changing reg in insn 688
changing reg in insn 689
changing reg in insn 691
changing reg in insn 692
changing reg in insn 696
changing reg in insn 699
changing reg in insn 723
changing reg in insn 724
changing reg in insn 731
changing reg in insn 732
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 737
changing reg in insn 753
changing reg in insn 754
changing reg in insn 757
changing reg in insn 758
changing reg in insn 758
changing reg in insn 759
changing reg in insn 771
changing reg in insn 772
changing reg in insn 772
changing reg in insn 773
changing reg in insn 791
changing reg in insn 792
changing reg in insn 795
changing reg in insn 796
changing reg in insn 796
changing reg in insn 797
changing reg in insn 813
changing reg in insn 814
changing reg in insn 817
changing reg in insn 818
changing reg in insn 818
changing reg in insn 819
changing reg in insn 831
changing reg in insn 832
changing reg in insn 849
changing reg in insn 850
changing reg in insn 854
changing reg in insn 856
changing reg in insn 858
changing reg in insn 859
changing reg in insn 861
changing reg in insn 862
changing reg in insn 866
changing reg in insn 869
changing reg in insn 3
changing reg in insn 34
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 69
changing reg in insn 70
changing reg in insn 68
changing reg in insn 69
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 110
changing reg in insn 112
changing reg in insn 124
changing reg in insn 126
changing reg in insn 125
changing reg in insn 126
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 140
changing reg in insn 139
changing reg in insn 140
changing reg in insn 147
changing reg in insn 148
changing reg in insn 146
changing reg in insn 147
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 170
changing reg in insn 169
changing reg in insn 170
changing reg in insn 177
changing reg in insn 178
changing reg in insn 176
changing reg in insn 177
changing reg in insn 199
changing reg in insn 200
changing reg in insn 202
changing reg in insn 204
changing reg in insn 203
changing reg in insn 204
changing reg in insn 211
changing reg in insn 212
changing reg in insn 210
changing reg in insn 211
changing reg in insn 230
changing reg in insn 232
changing reg in insn 231
changing reg in insn 232
changing reg in insn 241
changing reg in insn 242
changing reg in insn 244
changing reg in insn 246
changing reg in insn 245
changing reg in insn 246
changing reg in insn 253
changing reg in insn 254
changing reg in insn 252
changing reg in insn 253
changing reg in insn 271
changing reg in insn 272
changing reg in insn 274
changing reg in insn 276
changing reg in insn 275
changing reg in insn 276
changing reg in insn 283
changing reg in insn 284
changing reg in insn 282
changing reg in insn 283
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 310
changing reg in insn 309
changing reg in insn 310
changing reg in insn 317
changing reg in insn 318
changing reg in insn 316
changing reg in insn 317
changing reg in insn 327
changing reg in insn 329
changing reg in insn 341
changing reg in insn 343
changing reg in insn 342
changing reg in insn 343
changing reg in insn 352
changing reg in insn 353
changing reg in insn 355
changing reg in insn 357
changing reg in insn 356
changing reg in insn 357
changing reg in insn 364
changing reg in insn 365
changing reg in insn 363
changing reg in insn 364
changing reg in insn 382
changing reg in insn 383
changing reg in insn 385
changing reg in insn 387
changing reg in insn 386
changing reg in insn 387
changing reg in insn 394
changing reg in insn 395
changing reg in insn 393
changing reg in insn 394
changing reg in insn 416
changing reg in insn 417
changing reg in insn 419
changing reg in insn 421
changing reg in insn 420
changing reg in insn 421
changing reg in insn 428
changing reg in insn 429
changing reg in insn 427
changing reg in insn 428
changing reg in insn 447
changing reg in insn 449
changing reg in insn 448
changing reg in insn 449
changing reg in insn 458
changing reg in insn 459
changing reg in insn 461
changing reg in insn 463
changing reg in insn 462
changing reg in insn 463
changing reg in insn 470
changing reg in insn 471
changing reg in insn 469
changing reg in insn 470
changing reg in insn 488
changing reg in insn 489
changing reg in insn 491
changing reg in insn 493
changing reg in insn 492
changing reg in insn 493
changing reg in insn 500
changing reg in insn 501
changing reg in insn 499
changing reg in insn 500
changing reg in insn 522
changing reg in insn 523
changing reg in insn 525
changing reg in insn 527
changing reg in insn 526
changing reg in insn 527
changing reg in insn 534
changing reg in insn 535
changing reg in insn 533
changing reg in insn 534
changing reg in insn 551
changing reg in insn 553
changing reg in insn 559
changing reg in insn 561
changing reg in insn 569
changing reg in insn 570
changing reg in insn 570
changing reg in insn 575
changing reg in insn 575
changing reg in insn 576
changing reg in insn 574
changing reg in insn 581
changing reg in insn 583
changing reg in insn 591
changing reg in insn 592
changing reg in insn 592
changing reg in insn 597
changing reg in insn 597
changing reg in insn 598
changing reg in insn 596
changing reg in insn 605
changing reg in insn 606
changing reg in insn 606
changing reg in insn 611
changing reg in insn 611
changing reg in insn 612
changing reg in insn 610
changing reg in insn 619
changing reg in insn 621
changing reg in insn 629
changing reg in insn 630
changing reg in insn 630
changing reg in insn 635
changing reg in insn 635
changing reg in insn 636
changing reg in insn 634
changing reg in insn 641
changing reg in insn 643
changing reg in insn 651
changing reg in insn 652
changing reg in insn 652
changing reg in insn 657
changing reg in insn 657
changing reg in insn 658
changing reg in insn 656
changing reg in insn 664
changing reg in insn 665
changing reg in insn 665
changing reg in insn 670
changing reg in insn 670
changing reg in insn 671
changing reg in insn 669
changing reg in insn 674
changing reg in insn 677
changing reg in insn 676
changing reg in insn 675
changing reg in insn 678
changing reg in insn 679
changing reg in insn 683
changing reg in insn 684
changing reg in insn 695
changing reg in insn 696
changing reg in insn 697
changing reg in insn 698
changing reg in insn 706
changing reg in insn 707
changing reg in insn 719
changing reg in insn 721
changing reg in insn 727
changing reg in insn 729
changing reg in insn 737
changing reg in insn 738
changing reg in insn 738
changing reg in insn 743
changing reg in insn 743
changing reg in insn 744
changing reg in insn 742
changing reg in insn 749
changing reg in insn 751
changing reg in insn 759
changing reg in insn 760
changing reg in insn 760
changing reg in insn 765
changing reg in insn 765
changing reg in insn 766
changing reg in insn 764
changing reg in insn 773
changing reg in insn 774
changing reg in insn 774
changing reg in insn 779
changing reg in insn 779
changing reg in insn 780
changing reg in insn 778
changing reg in insn 787
changing reg in insn 789
changing reg in insn 797
changing reg in insn 798
changing reg in insn 798
changing reg in insn 803
changing reg in insn 803
changing reg in insn 804
changing reg in insn 802
changing reg in insn 809
changing reg in insn 811
changing reg in insn 819
changing reg in insn 820
changing reg in insn 820
changing reg in insn 825
changing reg in insn 825
changing reg in insn 826
changing reg in insn 824
changing reg in insn 832
changing reg in insn 833
changing reg in insn 833
changing reg in insn 838
changing reg in insn 838
changing reg in insn 839
changing reg in insn 837
changing reg in insn 842
changing reg in insn 844
changing reg in insn 843
changing reg in insn 848
changing reg in insn 849
changing reg in insn 853
changing reg in insn 854
changing reg in insn 865
changing reg in insn 866
changing reg in insn 867
changing reg in insn 868
changing reg in insn 876
changing reg in insn 877
changing reg in insn 7
changing reg in insn 882
deleting insn with uid = 38.
deleting insn with uid = 45.
deleting insn with uid = 66.
deleting insn with uid = 97.
deleting insn with uid = 114.
deleting insn with uid = 144.
deleting insn with uid = 174.
deleting insn with uid = 208.
deleting insn with uid = 250.
deleting insn with uid = 280.
deleting insn with uid = 314.
deleting insn with uid = 331.
deleting insn with uid = 361.
deleting insn with uid = 391.
deleting insn with uid = 425.
deleting insn with uid = 467.
deleting insn with uid = 497.
deleting insn with uid = 531.
deleting insn with uid = 555.
deleting insn with uid = 563.
deleting insn with uid = 585.
deleting insn with uid = 623.
deleting insn with uid = 645.
deleting insn with uid = 688.
deleting insn with uid = 723.
deleting insn with uid = 731.
deleting insn with uid = 753.
deleting insn with uid = 791.
deleting insn with uid = 813.
deleting insn with uid = 858.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 173.
verify found no changes in insn with uid = 207.
verify found no changes in insn with uid = 249.
verify found no changes in insn with uid = 279.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 330.
verify found no changes in insn with uid = 360.
verify found no changes in insn with uid = 390.
verify found no changes in insn with uid = 424.
verify found no changes in insn with uid = 466.
verify found no changes in insn with uid = 496.
verify found no changes in insn with uid = 530.
verify found no changes in insn with uid = 554.
verify found no changes in insn with uid = 562.
verify found no changes in insn with uid = 584.
verify found no changes in insn with uid = 622.
verify found no changes in insn with uid = 644.
verify found no changes in insn with uid = 687.
verify found no changes in insn with uid = 700.
verify found no changes in insn with uid = 708.
verify found no changes in insn with uid = 722.
verify found no changes in insn with uid = 730.
verify found no changes in insn with uid = 752.
verify found no changes in insn with uid = 790.
verify found no changes in insn with uid = 812.
verify found no changes in insn with uid = 857.
verify found no changes in insn with uid = 870.
verify found no changes in insn with uid = 878.
verify found no changes in insn with uid = 884.


void check_outfile(IOFiles*, bool, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={257d,252u} r1={110d,75u,12e} r2={37d,1u} r4={52d,17u} r5={70d,35u} r6={1d,358u} r7={1d,144u} r8={35d} r9={35d} r10={35d} r11={35d} r12={35d} r13={35d} r14={35d} r15={35d} r17={190d,54u} r18={35d} r19={35d} r20={1d,1u,34e} r21={36d} r22={36d} r23={36d} r24={36d} r25={36d} r26={36d} r27={36d} r28={36d} r29={35d} r30={35d} r31={35d} r32={35d} r33={35d} r34={35d} r35={35d} r36={35d} r37={36d} r38={36d} r39={35d} r40={35d} r45={35d} r46={35d} r47={35d} r48={35d} r49={35d} r50={35d} r51={35d} r52={35d} r53={35d} r54={35d} r55={35d} r56={35d} r57={35d} r58={35d} r59={35d} r60={35d} r61={35d} r62={35d} r63={35d} r64={35d} r65={35d} r66={35d} r67={35d} r68={35d} r69={35d} r70={35d} r71={35d} r72={35d} r73={35d} r74={35d} r75={35d} r76={35d} 
;;    total ref usage 3882{2899d,937u,46e} in 611{576 regular + 35 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 87 88 89 253 254 255
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
        (reg:DI 5 di [ io_filenames ])) sim2fitman_sup.cpp:482 89 {*movdi_internal}
     (nil))
(insn 3 2 5 2 (set (reg:SI 0 ax [253])
        (reg:SI 4 si [ overwrite ])) sim2fitman_sup.cpp:482 90 {*movsi_internal}
     (nil))
(insn 5 3 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
        (reg:SI 1 dx [ s_u_out ])) sim2fitman_sup.cpp:482 90 {*movsi_internal}
     (nil))
(insn 4 5 6 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
        (reg:QI 0 ax [253])) sim2fitman_sup.cpp:482 93 {*movqi_internal}
     (nil))
(note 6 4 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 6 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.6473+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [430])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:482 964 {stack_tls_protect_set_di}
     (nil))
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 found_extension+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:483 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sup_ext+0 S1 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:486 93 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -63 [0xffffffffffffffc1])) [0 sup_ext+1 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:486 93 {*movqi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -62 [0xffffffffffffffc2])) [0 sup_ext+2 S1 A16])
        (const_int 0 [0])) sim2fitman_sup.cpp:486 93 {*movqi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -61 [0xffffffffffffffc3])) [0 sup_ext+3 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:486 93 {*movqi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 sup_ext+4 S1 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:486 93 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf+0 S1 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:487 93 {*movqi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -47 [0xffffffffffffffd1])) [0 sup_suf+1 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:487 93 {*movqi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0 sup_suf+2 S1 A16])
        (const_int 0 [0])) sim2fitman_sup.cpp:487 93 {*movqi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -45 [0xffffffffffffffd3])) [0 sup_suf+3 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:487 93 {*movqi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 sup_suf+4 S1 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:487 93 {*movqi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 uns_ext+0 S1 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:488 93 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -31 [0xffffffffffffffe1])) [0 uns_ext+1 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:488 93 {*movqi_internal}
     (nil))
(insn 23 22 24 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -30 [0xffffffffffffffe2])) [0 uns_ext+2 S1 A16])
        (const_int 0 [0])) sim2fitman_sup.cpp:488 93 {*movqi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -29 [0xffffffffffffffe3])) [0 uns_ext+3 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:488 93 {*movqi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 uns_ext+4 S1 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:488 93 {*movqi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf+0 S1 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:489 93 {*movqi_internal}
     (nil))
(insn 27 26 28 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -15 [0xfffffffffffffff1])) [0 uns_suf+1 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:489 93 {*movqi_internal}
     (nil))
(insn 28 27 29 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 uns_suf+2 S1 A16])
        (const_int 0 [0])) sim2fitman_sup.cpp:489 93 {*movqi_internal}
     (nil))
(insn 29 28 30 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 uns_suf+3 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:489 93 {*movqi_internal}
     (nil))
(insn 30 29 31 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 uns_suf+4 S1 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:489 93 {*movqi_internal}
     (nil))
(insn 31 30 32 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:491 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:491 90 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:494 89 {*movdi_internal}
     (nil))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [254])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:496 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.6467 ] [83])
                (plus:DI (reg/f:DI 0 ax [254])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:496 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 36 35 37 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 D.6467 ] [83])) sim2fitman_sup.cpp:496 89 {*movdi_internal}
     (nil))
(call_insn/i 37 36 39 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2adf292f3200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:496 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 37 40 2 (set (reg:SI 0 ax [orig:85 D.6469 ] [85])
        (reg:SI 0 ax [orig:84 D.6468 ] [84])) sim2fitman_sup.cpp:496 90 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])
        (reg:SI 0 ax [orig:85 D.6469 ] [85])) sim2fitman_sup.cpp:496 90 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:497 89 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.6467 ] [86])
                (plus:DI (reg/f:DI 0 ax [255])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:497 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 43 42 44 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:86 D.6467 ] [86])) sim2fitman_sup.cpp:497 89 {*movdi_internal}
     (nil))
(call_insn/i 44 43 46 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2adf292f3200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:497 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 46 44 47 2 (set (reg:SI 0 ax [orig:88 D.6469 ] [88])
        (reg:SI 0 ax [orig:87 D.6468 ] [87])) sim2fitman_sup.cpp:497 90 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])
        (reg:SI 0 ax [orig:88 D.6469 ] [88])) sim2fitman_sup.cpp:497 90 {*movsi_internal}
     (nil))
(insn 48 47 49 2 (set (reg:SI 0 ax [orig:89 D.6469 ] [89])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:499 90 {*movsi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 D.6469 ] [89])
            (const_int 4 [0x4]))) sim2fitman_sup.cpp:499 7 {*cmpsi_1}
     (nil))
(jump_insn 50 49 51 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) sim2fitman_sup.cpp:499 596 {*jcc_1}
     (nil)
 -> 77)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 51 50 52 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 890 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:500 90 {*movsi_internal}
     (nil))
(jump_insn 890 52 891 3 (set (pc)
        (label_ref 72)) sim2fitman_sup.cpp:500 636 {jump}
     (nil)
 -> 72)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 891 890 74)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 90 91 92 93 94 95 96 256 257 258 259 260
(code_label 74 891 55 4 73 "" [1 uses])
(note 55 74 56 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 4 (set (reg:SI 0 ax [orig:90 D.6469 ] [90])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:501 90 {*movsi_internal}
     (nil))
(insn 57 56 58 4 (set (reg:SI 1 dx [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:501 90 {*movsi_internal}
     (nil))
(insn 58 57 59 4 (parallel [
            (set (reg:SI 1 dx [orig:91 D.6469 ] [91])
                (plus:SI (reg:SI 1 dx [256])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:501 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 59 58 60 4 (parallel [
            (set (reg:SI 0 ax [orig:92 D.6469 ] [92])
                (plus:SI (reg:SI 0 ax [orig:90 D.6469 ] [90])
                    (reg:SI 1 dx [orig:91 D.6469 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:501 220 {*addsi_1}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 1 dx [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:501 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 0 ax [258])
        (sign_extend:DI (reg:SI 0 ax [orig:92 D.6469 ] [92]))) sim2fitman_sup.cpp:501 142 {*extendsidi2_rex64}
     (nil))
(insn 62 61 63 4 (set (reg:QI 0 ax [orig:93 D.6470 ] [93])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [257])
                    (reg:DI 0 ax [258]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:501 93 {*movqi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:SI 0 ax [orig:94 D.6469 ] [94])
        (sign_extend:SI (reg:QI 0 ax [orig:93 D.6470 ] [93]))) sim2fitman_sup.cpp:501 148 {extendqisi2}
     (nil))
(insn 64 63 65 4 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:94 D.6469 ] [94])) sim2fitman_sup.cpp:501 90 {*movsi_internal}
     (nil))
(call_insn/i 65 64 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:501 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 67 65 68 4 (set (reg:QI 1 dx [orig:96 D.6470 ] [96])
        (reg:QI 0 ax [orig:95 D.6469 ] [95])) sim2fitman_sup.cpp:501 93 {*movqi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:SI 0 ax [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:501 90 {*movsi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:DI 0 ax [259])
        (sign_extend:DI (reg:SI 0 ax [260]))) sim2fitman_sup.cpp:501 142 {*extendsidi2_rex64}
     (nil))
(insn 70 69 71 4 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [259]))
                (const_int -64 [0xffffffffffffffc0])) [0 sup_ext S1 A8])
        (reg:QI 1 dx [orig:96 D.6470 ] [96])) sim2fitman_sup.cpp:501 93 {*movqi_internal}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:500 220 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 72 71 73 5 72 "" [1 uses])
(note 73 72 75 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 75 73 76 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) sim2fitman_sup.cpp:500 7 {*cmpsi_1}
     (nil))
(jump_insn 76 75 77 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) sim2fitman_sup.cpp:500 596 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97
(code_label 77 76 78 6 71 "" [1 uses])
(note 78 77 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 6 (set (reg:SI 0 ax [orig:97 D.6469 ] [97])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:505 90 {*movsi_internal}
     (nil))
(insn 80 79 81 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:97 D.6469 ] [97])
            (const_int 4 [0x4]))) sim2fitman_sup.cpp:505 7 {*cmpsi_1}
     (nil))
(jump_insn 81 80 82 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) sim2fitman_sup.cpp:505 596 {*jcc_1}
     (nil)
 -> 108)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 82 81 83 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 892 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:506 90 {*movsi_internal}
     (nil))
(jump_insn 892 83 893 7 (set (pc)
        (label_ref 103)) sim2fitman_sup.cpp:506 636 {jump}
     (nil)
 -> 103)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 893 892 105)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 98 99 100 101 102 103 104 261 262 263 264 265
(code_label 105 893 86 8 76 "" [1 uses])
(note 86 105 87 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 8 (set (reg:SI 0 ax [orig:98 D.6469 ] [98])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:507 90 {*movsi_internal}
     (nil))
(insn 88 87 89 8 (set (reg:SI 1 dx [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:507 90 {*movsi_internal}
     (nil))
(insn 89 88 90 8 (parallel [
            (set (reg:SI 1 dx [orig:99 D.6469 ] [99])
                (plus:SI (reg:SI 1 dx [261])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:507 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 90 89 91 8 (parallel [
            (set (reg:SI 0 ax [orig:100 D.6469 ] [100])
                (plus:SI (reg:SI 0 ax [orig:98 D.6469 ] [98])
                    (reg:SI 1 dx [orig:99 D.6469 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:507 220 {*addsi_1}
     (nil))
(insn 91 90 92 8 (set (reg/f:DI 1 dx [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:507 89 {*movdi_internal}
     (nil))
(insn 92 91 93 8 (set (reg:DI 0 ax [263])
        (sign_extend:DI (reg:SI 0 ax [orig:100 D.6469 ] [100]))) sim2fitman_sup.cpp:507 142 {*extendsidi2_rex64}
     (nil))
(insn 93 92 94 8 (set (reg:QI 0 ax [orig:101 D.6470 ] [101])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [262])
                    (reg:DI 0 ax [263]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:507 93 {*movqi_internal}
     (nil))
(insn 94 93 95 8 (set (reg:SI 0 ax [orig:102 D.6469 ] [102])
        (sign_extend:SI (reg:QI 0 ax [orig:101 D.6470 ] [101]))) sim2fitman_sup.cpp:507 148 {extendqisi2}
     (nil))
(insn 95 94 96 8 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:102 D.6469 ] [102])) sim2fitman_sup.cpp:507 90 {*movsi_internal}
     (nil))
(call_insn/i 96 95 98 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:507 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 98 96 99 8 (set (reg:QI 1 dx [orig:104 D.6470 ] [104])
        (reg:QI 0 ax [orig:103 D.6469 ] [103])) sim2fitman_sup.cpp:507 93 {*movqi_internal}
     (nil))
(insn 99 98 100 8 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:507 90 {*movsi_internal}
     (nil))
(insn 100 99 101 8 (set (reg:DI 0 ax [264])
        (sign_extend:DI (reg:SI 0 ax [265]))) sim2fitman_sup.cpp:507 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 8 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [264]))
                (const_int -32 [0xffffffffffffffe0])) [0 uns_ext S1 A8])
        (reg:QI 1 dx [orig:104 D.6470 ] [104])) sim2fitman_sup.cpp:507 93 {*movqi_internal}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:506 220 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 103 102 104 9 75 "" [1 uses])
(note 104 103 106 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 106 104 107 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) sim2fitman_sup.cpp:506 7 {*cmpsi_1}
     (nil))
(jump_insn 107 106 108 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 105)
            (pc))) sim2fitman_sup.cpp:506 596 {*jcc_1}
     (nil)
 -> 105)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 105 266
(code_label 108 107 109 10 74 "" [1 uses])
(note 109 108 110 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 10 (parallel [
            (set (reg:DI 0 ax [266])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:512 221 {*adddi_1}
     (nil))
(insn 111 110 112 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC52") [flags 0x2]  <var_decl 0x2adf29855000 *.LC52>)) sim2fitman_sup.cpp:512 89 {*movdi_internal}
     (nil))
(insn 112 111 113 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [266])) sim2fitman_sup.cpp:512 89 {*movdi_internal}
     (nil))
(call_insn/i 113 112 115 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:512 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 115 113 116 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:105 D.6469 ] [105])
            (const_int 0 [0]))) sim2fitman_sup.cpp:512 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 116 115 117 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) sim2fitman_sup.cpp:512 596 {*jcc_1}
     (nil)
 -> 222)
;;  succ:       11 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106
(note 117 116 118 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 11 (set (reg:SI 0 ax [orig:106 D.6469 ] [106])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:513 90 {*movsi_internal}
     (nil))
(insn 119 118 120 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:106 D.6469 ] [106])
            (const_int 8 [0x8]))) sim2fitman_sup.cpp:513 7 {*cmpsi_1}
     (nil))
(jump_insn 120 119 121 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 188)
            (pc))) sim2fitman_sup.cpp:513 596 {*jcc_1}
     (nil)
 -> 188)
;;  succ:       12 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 267 268
(note 121 120 122 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 12 (set (reg:SI 0 ax [orig:115 D.6469 ] [115])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:514 90 {*movsi_internal}
     (nil))
(insn 123 122 124 12 (parallel [
            (set (reg:SI 0 ax [orig:116 D.6469 ] [116])
                (plus:SI (reg:SI 0 ax [orig:115 D.6469 ] [115])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:514 220 {*addsi_1}
     (nil))
(insn 124 123 125 12 (set (reg/f:DI 1 dx [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:514 89 {*movdi_internal}
     (nil))
(insn 125 124 126 12 (set (reg:DI 0 ax [268])
        (sign_extend:DI (reg:SI 0 ax [orig:116 D.6469 ] [116]))) sim2fitman_sup.cpp:514 142 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 12 (set (reg:QI 0 ax [orig:117 D.6470 ] [117])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [267])
                    (reg:DI 0 ax [268]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:514 93 {*movqi_internal}
     (nil))
(insn 127 126 128 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 D.6470 ] [117])
            (const_int 95 [0x5f]))) sim2fitman_sup.cpp:514 5 {*cmpqi_1}
     (nil))
(jump_insn 128 127 129 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) sim2fitman_sup.cpp:514 596 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       13 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 129 128 130 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 894 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:516 90 {*movsi_internal}
     (nil))
(jump_insn 894 130 895 13 (set (pc)
        (label_ref 150)) sim2fitman_sup.cpp:516 636 {jump}
     (nil)
 -> 150)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 895 894 152)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 125 126 127 128 129 130 131 269 270 271 272 273
(code_label 152 895 133 14 81 "" [1 uses])
(note 133 152 134 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 14 (set (reg:SI 0 ax [orig:125 D.6469 ] [125])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:517 90 {*movsi_internal}
     (nil))
(insn 135 134 136 14 (set (reg:SI 1 dx [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:517 90 {*movsi_internal}
     (nil))
(insn 136 135 137 14 (parallel [
            (set (reg:SI 1 dx [orig:126 D.6469 ] [126])
                (plus:SI (reg:SI 1 dx [269])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:517 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -6 [0xfffffffffffffffa]))
        (nil)))
(insn 137 136 138 14 (parallel [
            (set (reg:SI 0 ax [orig:127 D.6469 ] [127])
                (plus:SI (reg:SI 0 ax [orig:125 D.6469 ] [125])
                    (reg:SI 1 dx [orig:126 D.6469 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:517 220 {*addsi_1}
     (nil))
(insn 138 137 139 14 (set (reg/f:DI 1 dx [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:517 89 {*movdi_internal}
     (nil))
(insn 139 138 140 14 (set (reg:DI 0 ax [271])
        (sign_extend:DI (reg:SI 0 ax [orig:127 D.6469 ] [127]))) sim2fitman_sup.cpp:517 142 {*extendsidi2_rex64}
     (nil))
(insn 140 139 141 14 (set (reg:QI 0 ax [orig:128 D.6470 ] [128])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [270])
                    (reg:DI 0 ax [271]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:517 93 {*movqi_internal}
     (nil))
(insn 141 140 142 14 (set (reg:SI 0 ax [orig:129 D.6469 ] [129])
        (sign_extend:SI (reg:QI 0 ax [orig:128 D.6470 ] [128]))) sim2fitman_sup.cpp:517 148 {extendqisi2}
     (nil))
(insn 142 141 143 14 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:129 D.6469 ] [129])) sim2fitman_sup.cpp:517 90 {*movsi_internal}
     (nil))
(call_insn/i 143 142 145 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:517 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 145 143 146 14 (set (reg:QI 1 dx [orig:131 D.6470 ] [131])
        (reg:QI 0 ax [orig:130 D.6469 ] [130])) sim2fitman_sup.cpp:517 93 {*movqi_internal}
     (nil))
(insn 146 145 147 14 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:517 90 {*movsi_internal}
     (nil))
(insn 147 146 148 14 (set (reg:DI 0 ax [272])
        (sign_extend:DI (reg:SI 0 ax [273]))) sim2fitman_sup.cpp:517 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 14 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [272]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:131 D.6470 ] [131])) sim2fitman_sup.cpp:517 93 {*movqi_internal}
     (nil))
(insn 149 148 150 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:516 220 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 150 149 151 15 80 "" [1 uses])
(note 151 150 153 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 153 151 154 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:516 7 {*cmpsi_1}
     (nil))
(jump_insn 154 153 896 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 152)
            (pc))) sim2fitman_sup.cpp:516 596 {*jcc_1}
     (nil)
 -> 152)
;;  succ:       14
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 896 154 897 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(jump_insn 897 896 898 16 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 898 897 158)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 158 898 159 17 79 "" [1 uses])
(note 159 158 160 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 899 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:521 90 {*movsi_internal}
     (nil))
(jump_insn 899 160 900 17 (set (pc)
        (label_ref 180)) sim2fitman_sup.cpp:521 636 {jump}
     (nil)
 -> 180)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 900 899 182)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 118 119 120 121 122 123 124 274 275 276 277 278
(code_label 182 900 163 18 84 "" [1 uses])
(note 163 182 164 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 18 (set (reg:SI 0 ax [orig:118 D.6469 ] [118])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:522 90 {*movsi_internal}
     (nil))
(insn 165 164 166 18 (set (reg:SI 1 dx [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:522 90 {*movsi_internal}
     (nil))
(insn 166 165 167 18 (parallel [
            (set (reg:SI 1 dx [orig:119 D.6469 ] [119])
                (plus:SI (reg:SI 1 dx [274])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:522 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
(insn 167 166 168 18 (parallel [
            (set (reg:SI 0 ax [orig:120 D.6469 ] [120])
                (plus:SI (reg:SI 0 ax [orig:118 D.6469 ] [118])
                    (reg:SI 1 dx [orig:119 D.6469 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:522 220 {*addsi_1}
     (nil))
(insn 168 167 169 18 (set (reg/f:DI 1 dx [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:522 89 {*movdi_internal}
     (nil))
(insn 169 168 170 18 (set (reg:DI 0 ax [276])
        (sign_extend:DI (reg:SI 0 ax [orig:120 D.6469 ] [120]))) sim2fitman_sup.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 170 169 171 18 (set (reg:QI 0 ax [orig:121 D.6470 ] [121])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [275])
                    (reg:DI 0 ax [276]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:522 93 {*movqi_internal}
     (nil))
(insn 171 170 172 18 (set (reg:SI 0 ax [orig:122 D.6469 ] [122])
        (sign_extend:SI (reg:QI 0 ax [orig:121 D.6470 ] [121]))) sim2fitman_sup.cpp:522 148 {extendqisi2}
     (nil))
(insn 172 171 173 18 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:122 D.6469 ] [122])) sim2fitman_sup.cpp:522 90 {*movsi_internal}
     (nil))
(call_insn/i 173 172 175 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:522 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 175 173 176 18 (set (reg:QI 1 dx [orig:124 D.6470 ] [124])
        (reg:QI 0 ax [orig:123 D.6469 ] [123])) sim2fitman_sup.cpp:522 93 {*movqi_internal}
     (nil))
(insn 176 175 177 18 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:522 90 {*movsi_internal}
     (nil))
(insn 177 176 178 18 (set (reg:DI 0 ax [277])
        (sign_extend:DI (reg:SI 0 ax [278]))) sim2fitman_sup.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 18 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [277]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:124 D.6470 ] [124])) sim2fitman_sup.cpp:522 93 {*movqi_internal}
     (nil))
(insn 179 178 180 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:521 220 {*addsi_1}
     (nil))
;;  succ:       19 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU,DFS_BACK)
;;              17 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 180 179 181 19 83 "" [1 uses])
(note 181 180 183 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 183 181 184 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) sim2fitman_sup.cpp:521 7 {*cmpsi_1}
     (nil))
(jump_insn 184 183 901 19 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 182)
            (pc))) sim2fitman_sup.cpp:521 596 {*jcc_1}
     (nil)
 -> 182)
;;  succ:       18
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 901 184 902 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(jump_insn 902 901 903 20 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 903 902 188)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107
(code_label 188 903 189 21 78 "" [1 uses])
(note 189 188 190 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 190 189 191 21 (set (reg:SI 0 ax [orig:107 D.6469 ] [107])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:526 90 {*movsi_internal}
     (nil))
(insn 191 190 192 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:107 D.6469 ] [107])
            (const_int 6 [0x6]))) sim2fitman_sup.cpp:526 7 {*cmpsi_1}
     (nil))
(jump_insn 192 191 193 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 325)
            (pc))) sim2fitman_sup.cpp:526 596 {*jcc_1}
     (nil)
 -> 325)
;;  succ:       22 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 193 192 194 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 904 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:528 90 {*movsi_internal}
     (nil))
(jump_insn 904 194 905 22 (set (pc)
        (label_ref 214)) sim2fitman_sup.cpp:528 636 {jump}
     (nil)
 -> 214)
;;  succ:       24 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 905 904 216)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 108 109 110 111 112 113 114 279 280 281 282 283
(code_label 216 905 197 23 86 "" [1 uses])
(note 197 216 198 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 23 (set (reg:SI 0 ax [orig:108 D.6469 ] [108])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:529 90 {*movsi_internal}
     (nil))
(insn 199 198 200 23 (set (reg:SI 1 dx [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:529 90 {*movsi_internal}
     (nil))
(insn 200 199 201 23 (parallel [
            (set (reg:SI 1 dx [orig:109 D.6469 ] [109])
                (plus:SI (reg:SI 1 dx [279])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:529 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -6 [0xfffffffffffffffa]))
        (nil)))
(insn 201 200 202 23 (parallel [
            (set (reg:SI 0 ax [orig:110 D.6469 ] [110])
                (plus:SI (reg:SI 0 ax [orig:108 D.6469 ] [108])
                    (reg:SI 1 dx [orig:109 D.6469 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:529 220 {*addsi_1}
     (nil))
(insn 202 201 203 23 (set (reg/f:DI 1 dx [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:529 89 {*movdi_internal}
     (nil))
(insn 203 202 204 23 (set (reg:DI 0 ax [281])
        (sign_extend:DI (reg:SI 0 ax [orig:110 D.6469 ] [110]))) sim2fitman_sup.cpp:529 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 23 (set (reg:QI 0 ax [orig:111 D.6470 ] [111])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [280])
                    (reg:DI 0 ax [281]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:529 93 {*movqi_internal}
     (nil))
(insn 205 204 206 23 (set (reg:SI 0 ax [orig:112 D.6469 ] [112])
        (sign_extend:SI (reg:QI 0 ax [orig:111 D.6470 ] [111]))) sim2fitman_sup.cpp:529 148 {extendqisi2}
     (nil))
(insn 206 205 207 23 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:112 D.6469 ] [112])) sim2fitman_sup.cpp:529 90 {*movsi_internal}
     (nil))
(call_insn/i 207 206 209 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:529 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 209 207 210 23 (set (reg:QI 1 dx [orig:114 D.6470 ] [114])
        (reg:QI 0 ax [orig:113 D.6469 ] [113])) sim2fitman_sup.cpp:529 93 {*movqi_internal}
     (nil))
(insn 210 209 211 23 (set (reg:SI 0 ax [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:529 90 {*movsi_internal}
     (nil))
(insn 211 210 212 23 (set (reg:DI 0 ax [282])
        (sign_extend:DI (reg:SI 0 ax [283]))) sim2fitman_sup.cpp:529 142 {*extendsidi2_rex64}
     (nil))
(insn 212 211 213 23 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [282]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:114 D.6470 ] [114])) sim2fitman_sup.cpp:529 93 {*movqi_internal}
     (nil))
(insn 213 212 214 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:528 220 {*addsi_1}
     (nil))
;;  succ:       24 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU,DFS_BACK)
;;              22 [100.0%] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 214 213 215 24 85 "" [1 uses])
(note 215 214 217 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 217 215 218 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:528 7 {*cmpsi_1}
     (nil))
(jump_insn 218 217 906 24 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 216)
            (pc))) sim2fitman_sup.cpp:528 596 {*jcc_1}
     (nil)
 -> 216)
;;  succ:       23
;;              25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 906 218 907 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 907 906 908 25 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 908 907 222)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132
(code_label 222 908 223 26 77 "" [1 uses])
(note 223 222 224 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 26 (set (reg:SI 0 ax [orig:132 D.6469 ] [132])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:533 90 {*movsi_internal}
     (nil))
(insn 225 224 226 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:132 D.6469 ] [132])
            (const_int 4 [0x4]))) sim2fitman_sup.cpp:533 7 {*cmpsi_1}
     (nil))
(jump_insn 226 225 227 26 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) sim2fitman_sup.cpp:533 596 {*jcc_1}
     (nil)
 -> 294)
;;  succ:       27 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 135 284 285
(note 227 226 228 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 27 (set (reg:SI 0 ax [orig:133 D.6469 ] [133])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:534 90 {*movsi_internal}
     (nil))
(insn 229 228 230 27 (parallel [
            (set (reg:SI 0 ax [orig:134 D.6469 ] [134])
                (plus:SI (reg:SI 0 ax [orig:133 D.6469 ] [133])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:534 220 {*addsi_1}
     (nil))
(insn 230 229 231 27 (set (reg/f:DI 1 dx [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:534 89 {*movdi_internal}
     (nil))
(insn 231 230 232 27 (set (reg:DI 0 ax [285])
        (sign_extend:DI (reg:SI 0 ax [orig:134 D.6469 ] [134]))) sim2fitman_sup.cpp:534 142 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 27 (set (reg:QI 0 ax [orig:135 D.6470 ] [135])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [284])
                    (reg:DI 0 ax [285]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:534 93 {*movqi_internal}
     (nil))
(insn 233 232 234 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:135 D.6470 ] [135])
            (const_int 95 [0x5f]))) sim2fitman_sup.cpp:534 5 {*cmpqi_1}
     (nil))
(jump_insn 234 233 235 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 264)
            (pc))) sim2fitman_sup.cpp:534 596 {*jcc_1}
     (nil)
 -> 264)
;;  succ:       28 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 235 234 236 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 909 28 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:536 90 {*movsi_internal}
     (nil))
(jump_insn 909 236 910 28 (set (pc)
        (label_ref 256)) sim2fitman_sup.cpp:536 636 {jump}
     (nil)
 -> 256)
;;  succ:       30 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 910 909 258)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 143 144 145 146 147 148 149 286 287 288 289 290
(code_label 258 910 239 29 90 "" [1 uses])
(note 239 258 240 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 240 239 241 29 (set (reg:SI 0 ax [orig:143 D.6469 ] [143])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:537 90 {*movsi_internal}
     (nil))
(insn 241 240 242 29 (set (reg:SI 1 dx [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:537 90 {*movsi_internal}
     (nil))
(insn 242 241 243 29 (parallel [
            (set (reg:SI 1 dx [orig:144 D.6469 ] [144])
                (plus:SI (reg:SI 1 dx [286])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:537 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 243 242 244 29 (parallel [
            (set (reg:SI 0 ax [orig:145 D.6469 ] [145])
                (plus:SI (reg:SI 0 ax [orig:143 D.6469 ] [143])
                    (reg:SI 1 dx [orig:144 D.6469 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:537 220 {*addsi_1}
     (nil))
(insn 244 243 245 29 (set (reg/f:DI 1 dx [287])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:537 89 {*movdi_internal}
     (nil))
(insn 245 244 246 29 (set (reg:DI 0 ax [288])
        (sign_extend:DI (reg:SI 0 ax [orig:145 D.6469 ] [145]))) sim2fitman_sup.cpp:537 142 {*extendsidi2_rex64}
     (nil))
(insn 246 245 247 29 (set (reg:QI 0 ax [orig:146 D.6470 ] [146])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [287])
                    (reg:DI 0 ax [288]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:537 93 {*movqi_internal}
     (nil))
(insn 247 246 248 29 (set (reg:SI 0 ax [orig:147 D.6469 ] [147])
        (sign_extend:SI (reg:QI 0 ax [orig:146 D.6470 ] [146]))) sim2fitman_sup.cpp:537 148 {extendqisi2}
     (nil))
(insn 248 247 249 29 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:147 D.6469 ] [147])) sim2fitman_sup.cpp:537 90 {*movsi_internal}
     (nil))
(call_insn/i 249 248 251 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:537 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 251 249 252 29 (set (reg:QI 1 dx [orig:149 D.6470 ] [149])
        (reg:QI 0 ax [orig:148 D.6469 ] [148])) sim2fitman_sup.cpp:537 93 {*movqi_internal}
     (nil))
(insn 252 251 253 29 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:537 90 {*movsi_internal}
     (nil))
(insn 253 252 254 29 (set (reg:DI 0 ax [289])
        (sign_extend:DI (reg:SI 0 ax [290]))) sim2fitman_sup.cpp:537 142 {*extendsidi2_rex64}
     (nil))
(insn 254 253 255 29 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [289]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:149 D.6470 ] [149])) sim2fitman_sup.cpp:537 93 {*movqi_internal}
     (nil))
(insn 255 254 256 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:536 220 {*addsi_1}
     (nil))
;;  succ:       30 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU,DFS_BACK)
;;              28 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 256 255 257 30 89 "" [1 uses])
(note 257 256 259 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 259 257 260 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:536 7 {*cmpsi_1}
     (nil))
(jump_insn 260 259 911 30 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) sim2fitman_sup.cpp:536 596 {*jcc_1}
     (nil)
 -> 258)
;;  succ:       29
;;              31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 911 260 912 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(jump_insn 912 911 913 31 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 913 912 264)
;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 264 913 265 32 88 "" [1 uses])
(note 265 264 266 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 266 265 914 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:541 90 {*movsi_internal}
     (nil))
(jump_insn 914 266 915 32 (set (pc)
        (label_ref 286)) sim2fitman_sup.cpp:541 636 {jump}
     (nil)
 -> 286)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 915 914 288)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 136 137 138 139 140 141 142 291 292 293 294 295
(code_label 288 915 269 33 92 "" [1 uses])
(note 269 288 270 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 270 269 271 33 (set (reg:SI 0 ax [orig:136 D.6469 ] [136])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:542 90 {*movsi_internal}
     (nil))
(insn 271 270 272 33 (set (reg:SI 1 dx [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:542 90 {*movsi_internal}
     (nil))
(insn 272 271 273 33 (parallel [
            (set (reg:SI 1 dx [orig:137 D.6469 ] [137])
                (plus:SI (reg:SI 1 dx [291])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:542 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 273 272 274 33 (parallel [
            (set (reg:SI 0 ax [orig:138 D.6469 ] [138])
                (plus:SI (reg:SI 0 ax [orig:136 D.6469 ] [136])
                    (reg:SI 1 dx [orig:137 D.6469 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:542 220 {*addsi_1}
     (nil))
(insn 274 273 275 33 (set (reg/f:DI 1 dx [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:542 89 {*movdi_internal}
     (nil))
(insn 275 274 276 33 (set (reg:DI 0 ax [293])
        (sign_extend:DI (reg:SI 0 ax [orig:138 D.6469 ] [138]))) sim2fitman_sup.cpp:542 142 {*extendsidi2_rex64}
     (nil))
(insn 276 275 277 33 (set (reg:QI 0 ax [orig:139 D.6470 ] [139])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [292])
                    (reg:DI 0 ax [293]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:542 93 {*movqi_internal}
     (nil))
(insn 277 276 278 33 (set (reg:SI 0 ax [orig:140 D.6469 ] [140])
        (sign_extend:SI (reg:QI 0 ax [orig:139 D.6470 ] [139]))) sim2fitman_sup.cpp:542 148 {extendqisi2}
     (nil))
(insn 278 277 279 33 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:140 D.6469 ] [140])) sim2fitman_sup.cpp:542 90 {*movsi_internal}
     (nil))
(call_insn/i 279 278 281 33 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:542 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 281 279 282 33 (set (reg:QI 1 dx [orig:142 D.6470 ] [142])
        (reg:QI 0 ax [orig:141 D.6469 ] [141])) sim2fitman_sup.cpp:542 93 {*movqi_internal}
     (nil))
(insn 282 281 283 33 (set (reg:SI 0 ax [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:542 90 {*movsi_internal}
     (nil))
(insn 283 282 284 33 (set (reg:DI 0 ax [294])
        (sign_extend:DI (reg:SI 0 ax [295]))) sim2fitman_sup.cpp:542 142 {*extendsidi2_rex64}
     (nil))
(insn 284 283 285 33 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [294]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:142 D.6470 ] [142])) sim2fitman_sup.cpp:542 93 {*movqi_internal}
     (nil))
(insn 285 284 286 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:541 220 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              32 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 286 285 287 34 91 "" [1 uses])
(note 287 286 289 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 289 287 290 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) sim2fitman_sup.cpp:541 7 {*cmpsi_1}
     (nil))
(jump_insn 290 289 916 34 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 288)
            (pc))) sim2fitman_sup.cpp:541 596 {*jcc_1}
     (nil)
 -> 288)
;;  succ:       33
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 916 290 917 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(jump_insn 917 916 918 35 (set (pc)
        (label_ref 325)) 636 {jump}
     (nil)
 -> 325)
;;  succ:       40 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 918 917 294)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150
(code_label 294 918 295 36 87 "" [1 uses])
(note 295 294 296 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 296 295 297 36 (set (reg:SI 0 ax [orig:150 D.6469 ] [150])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:546 90 {*movsi_internal}
     (nil))
(insn 297 296 298 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:150 D.6469 ] [150])
            (const_int 2 [0x2]))) sim2fitman_sup.cpp:546 7 {*cmpsi_1}
     (nil))
(jump_insn 298 297 299 36 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 325)
            (pc))) sim2fitman_sup.cpp:546 596 {*jcc_1}
     (nil)
 -> 325)
;;  succ:       37 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 299 298 300 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 300 299 919 37 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:547 90 {*movsi_internal}
     (nil))
(jump_insn 919 300 920 37 (set (pc)
        (label_ref 320)) sim2fitman_sup.cpp:547 636 {jump}
     (nil)
 -> 320)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 920 919 322)
;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 151 152 153 154 155 156 157 296 297 298 299 300
(code_label 322 920 303 38 94 "" [1 uses])
(note 303 322 304 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 38 (set (reg:SI 0 ax [orig:151 D.6469 ] [151])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:548 90 {*movsi_internal}
     (nil))
(insn 305 304 306 38 (set (reg:SI 1 dx [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:548 90 {*movsi_internal}
     (nil))
(insn 306 305 307 38 (parallel [
            (set (reg:SI 1 dx [orig:152 D.6469 ] [152])
                (plus:SI (reg:SI 1 dx [296])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:548 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 307 306 308 38 (parallel [
            (set (reg:SI 0 ax [orig:153 D.6469 ] [153])
                (plus:SI (reg:SI 0 ax [orig:151 D.6469 ] [151])
                    (reg:SI 1 dx [orig:152 D.6469 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:548 220 {*addsi_1}
     (nil))
(insn 308 307 309 38 (set (reg/f:DI 1 dx [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:548 89 {*movdi_internal}
     (nil))
(insn 309 308 310 38 (set (reg:DI 0 ax [298])
        (sign_extend:DI (reg:SI 0 ax [orig:153 D.6469 ] [153]))) sim2fitman_sup.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 310 309 311 38 (set (reg:QI 0 ax [orig:154 D.6470 ] [154])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [297])
                    (reg:DI 0 ax [298]))
                (const_int 512 [0x200])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:548 93 {*movqi_internal}
     (nil))
(insn 311 310 312 38 (set (reg:SI 0 ax [orig:155 D.6469 ] [155])
        (sign_extend:SI (reg:QI 0 ax [orig:154 D.6470 ] [154]))) sim2fitman_sup.cpp:548 148 {extendqisi2}
     (nil))
(insn 312 311 313 38 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:155 D.6469 ] [155])) sim2fitman_sup.cpp:548 90 {*movsi_internal}
     (nil))
(call_insn/i 313 312 315 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:548 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 315 313 316 38 (set (reg:QI 1 dx [orig:157 D.6470 ] [157])
        (reg:QI 0 ax [orig:156 D.6469 ] [156])) sim2fitman_sup.cpp:548 93 {*movqi_internal}
     (nil))
(insn 316 315 317 38 (set (reg:SI 0 ax [300])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:548 90 {*movsi_internal}
     (nil))
(insn 317 316 318 38 (set (reg:DI 0 ax [299])
        (sign_extend:DI (reg:SI 0 ax [300]))) sim2fitman_sup.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 318 317 319 38 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [299]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:157 D.6470 ] [157])) sim2fitman_sup.cpp:548 93 {*movqi_internal}
     (nil))
(insn 319 318 320 38 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:547 220 {*addsi_1}
     (nil))
;;  succ:       39 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU,DFS_BACK)
;;              37 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 320 319 321 39 93 "" [1 uses])
(note 321 320 323 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 323 321 324 39 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:547 7 {*cmpsi_1}
     (nil))
(jump_insn 324 323 325 39 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 322)
            (pc))) sim2fitman_sup.cpp:547 596 {*jcc_1}
     (nil)
 -> 322)
;;  succ:       38
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              25 [100.0%] 
;;              36
;;              39 (FALLTHRU)
;;              31 [100.0%] 
;;              20 [100.0%] 
;;              16 [100.0%] 
;;              35 [100.0%] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 158 301
(code_label 325 324 326 40 82 "" [7 uses])
(note 326 325 327 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 327 326 328 40 (parallel [
            (set (reg:DI 0 ax [301])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:554 221 {*adddi_1}
     (nil))
(insn 328 327 329 40 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC52") [flags 0x2]  <var_decl 0x2adf29855000 *.LC52>)) sim2fitman_sup.cpp:554 89 {*movdi_internal}
     (nil))
(insn 329 328 330 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [301])) sim2fitman_sup.cpp:554 89 {*movdi_internal}
     (nil))
(call_insn/i 330 329 332 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:554 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 332 330 333 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:158 D.6469 ] [158])
            (const_int 0 [0]))) sim2fitman_sup.cpp:554 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 333 332 334 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 439)
            (pc))) sim2fitman_sup.cpp:554 596 {*jcc_1}
     (nil)
 -> 439)
;;  succ:       41 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 159
(note 334 333 335 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 335 334 336 41 (set (reg:SI 0 ax [orig:159 D.6469 ] [159])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:555 90 {*movsi_internal}
     (nil))
(insn 336 335 337 41 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:159 D.6469 ] [159])
            (const_int 8 [0x8]))) sim2fitman_sup.cpp:555 7 {*cmpsi_1}
     (nil))
(jump_insn 337 336 338 41 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) sim2fitman_sup.cpp:555 596 {*jcc_1}
     (nil)
 -> 405)
;;  succ:       42 (FALLTHRU)
;;              51
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 168 169 170 302 303
(note 338 337 339 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 339 338 340 42 (set (reg:SI 0 ax [orig:168 D.6469 ] [168])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:556 90 {*movsi_internal}
     (nil))
(insn 340 339 341 42 (parallel [
            (set (reg:SI 0 ax [orig:169 D.6469 ] [169])
                (plus:SI (reg:SI 0 ax [orig:168 D.6469 ] [168])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:556 220 {*addsi_1}
     (nil))
(insn 341 340 342 42 (set (reg/f:DI 1 dx [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:556 89 {*movdi_internal}
     (nil))
(insn 342 341 343 42 (set (reg:DI 0 ax [303])
        (sign_extend:DI (reg:SI 0 ax [orig:169 D.6469 ] [169]))) sim2fitman_sup.cpp:556 142 {*extendsidi2_rex64}
     (nil))
(insn 343 342 344 42 (set (reg:QI 0 ax [orig:170 D.6470 ] [170])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [302])
                    (reg:DI 0 ax [303]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:556 93 {*movqi_internal}
     (nil))
(insn 344 343 345 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:170 D.6470 ] [170])
            (const_int 95 [0x5f]))) sim2fitman_sup.cpp:556 5 {*cmpqi_1}
     (nil))
(jump_insn 345 344 346 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 375)
            (pc))) sim2fitman_sup.cpp:556 596 {*jcc_1}
     (nil)
 -> 375)
;;  succ:       43 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 346 345 347 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 921 43 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:558 90 {*movsi_internal}
     (nil))
(jump_insn 921 347 922 43 (set (pc)
        (label_ref 367)) sim2fitman_sup.cpp:558 636 {jump}
     (nil)
 -> 367)
;;  succ:       45 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 922 921 369)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 178 179 180 181 182 183 184 304 305 306 307 308
(code_label 369 922 350 44 99 "" [1 uses])
(note 350 369 351 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 352 44 (set (reg:SI 0 ax [orig:178 D.6469 ] [178])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:559 90 {*movsi_internal}
     (nil))
(insn 352 351 353 44 (set (reg:SI 1 dx [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:559 90 {*movsi_internal}
     (nil))
(insn 353 352 354 44 (parallel [
            (set (reg:SI 1 dx [orig:179 D.6469 ] [179])
                (plus:SI (reg:SI 1 dx [304])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:559 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -6 [0xfffffffffffffffa]))
        (nil)))
(insn 354 353 355 44 (parallel [
            (set (reg:SI 0 ax [orig:180 D.6469 ] [180])
                (plus:SI (reg:SI 0 ax [orig:178 D.6469 ] [178])
                    (reg:SI 1 dx [orig:179 D.6469 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:559 220 {*addsi_1}
     (nil))
(insn 355 354 356 44 (set (reg/f:DI 1 dx [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:559 89 {*movdi_internal}
     (nil))
(insn 356 355 357 44 (set (reg:DI 0 ax [306])
        (sign_extend:DI (reg:SI 0 ax [orig:180 D.6469 ] [180]))) sim2fitman_sup.cpp:559 142 {*extendsidi2_rex64}
     (nil))
(insn 357 356 358 44 (set (reg:QI 0 ax [orig:181 D.6470 ] [181])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [305])
                    (reg:DI 0 ax [306]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:559 93 {*movqi_internal}
     (nil))
(insn 358 357 359 44 (set (reg:SI 0 ax [orig:182 D.6469 ] [182])
        (sign_extend:SI (reg:QI 0 ax [orig:181 D.6470 ] [181]))) sim2fitman_sup.cpp:559 148 {extendqisi2}
     (nil))
(insn 359 358 360 44 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:182 D.6469 ] [182])) sim2fitman_sup.cpp:559 90 {*movsi_internal}
     (nil))
(call_insn/i 360 359 362 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:559 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 362 360 363 44 (set (reg:QI 1 dx [orig:184 D.6470 ] [184])
        (reg:QI 0 ax [orig:183 D.6469 ] [183])) sim2fitman_sup.cpp:559 93 {*movqi_internal}
     (nil))
(insn 363 362 364 44 (set (reg:SI 0 ax [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:559 90 {*movsi_internal}
     (nil))
(insn 364 363 365 44 (set (reg:DI 0 ax [307])
        (sign_extend:DI (reg:SI 0 ax [308]))) sim2fitman_sup.cpp:559 142 {*extendsidi2_rex64}
     (nil))
(insn 365 364 366 44 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [307]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:184 D.6470 ] [184])) sim2fitman_sup.cpp:559 93 {*movqi_internal}
     (nil))
(insn 366 365 367 44 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:558 220 {*addsi_1}
     (nil))
;;  succ:       45 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU,DFS_BACK)
;;              43 [100.0%] 
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 367 366 368 45 98 "" [1 uses])
(note 368 367 370 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 370 368 371 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:558 7 {*cmpsi_1}
     (nil))
(jump_insn 371 370 923 45 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 369)
            (pc))) sim2fitman_sup.cpp:558 596 {*jcc_1}
     (nil)
 -> 369)
;;  succ:       44
;;              46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 923 371 924 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(jump_insn 924 923 925 46 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 925 924 375)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 375 925 376 47 97 "" [1 uses])
(note 376 375 377 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 926 47 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:563 90 {*movsi_internal}
     (nil))
(jump_insn 926 377 927 47 (set (pc)
        (label_ref 397)) sim2fitman_sup.cpp:563 636 {jump}
     (nil)
 -> 397)
;;  succ:       49 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 927 926 399)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 171 172 173 174 175 176 177 309 310 311 312 313
(code_label 399 927 380 48 102 "" [1 uses])
(note 380 399 381 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 381 380 382 48 (set (reg:SI 0 ax [orig:171 D.6469 ] [171])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:564 90 {*movsi_internal}
     (nil))
(insn 382 381 383 48 (set (reg:SI 1 dx [309])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:564 90 {*movsi_internal}
     (nil))
(insn 383 382 384 48 (parallel [
            (set (reg:SI 1 dx [orig:172 D.6469 ] [172])
                (plus:SI (reg:SI 1 dx [309])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:564 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))
(insn 384 383 385 48 (parallel [
            (set (reg:SI 0 ax [orig:173 D.6469 ] [173])
                (plus:SI (reg:SI 0 ax [orig:171 D.6469 ] [171])
                    (reg:SI 1 dx [orig:172 D.6469 ] [172])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:564 220 {*addsi_1}
     (nil))
(insn 385 384 386 48 (set (reg/f:DI 1 dx [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:564 89 {*movdi_internal}
     (nil))
(insn 386 385 387 48 (set (reg:DI 0 ax [311])
        (sign_extend:DI (reg:SI 0 ax [orig:173 D.6469 ] [173]))) sim2fitman_sup.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 387 386 388 48 (set (reg:QI 0 ax [orig:174 D.6470 ] [174])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [310])
                    (reg:DI 0 ax [311]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:564 93 {*movqi_internal}
     (nil))
(insn 388 387 389 48 (set (reg:SI 0 ax [orig:175 D.6469 ] [175])
        (sign_extend:SI (reg:QI 0 ax [orig:174 D.6470 ] [174]))) sim2fitman_sup.cpp:564 148 {extendqisi2}
     (nil))
(insn 389 388 390 48 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:175 D.6469 ] [175])) sim2fitman_sup.cpp:564 90 {*movsi_internal}
     (nil))
(call_insn/i 390 389 392 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:564 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 392 390 393 48 (set (reg:QI 1 dx [orig:177 D.6470 ] [177])
        (reg:QI 0 ax [orig:176 D.6469 ] [176])) sim2fitman_sup.cpp:564 93 {*movqi_internal}
     (nil))
(insn 393 392 394 48 (set (reg:SI 0 ax [313])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:564 90 {*movsi_internal}
     (nil))
(insn 394 393 395 48 (set (reg:DI 0 ax [312])
        (sign_extend:DI (reg:SI 0 ax [313]))) sim2fitman_sup.cpp:564 142 {*extendsidi2_rex64}
     (nil))
(insn 395 394 396 48 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [312]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:177 D.6470 ] [177])) sim2fitman_sup.cpp:564 93 {*movqi_internal}
     (nil))
(insn 396 395 397 48 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:563 220 {*addsi_1}
     (nil))
;;  succ:       49 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU,DFS_BACK)
;;              47 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 397 396 398 49 101 "" [1 uses])
(note 398 397 400 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 400 398 401 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) sim2fitman_sup.cpp:563 7 {*cmpsi_1}
     (nil))
(jump_insn 401 400 928 49 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 399)
            (pc))) sim2fitman_sup.cpp:563 596 {*jcc_1}
     (nil)
 -> 399)
;;  succ:       48
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 928 401 929 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(jump_insn 929 928 930 50 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 930 929 405)
;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160
(code_label 405 930 406 51 96 "" [1 uses])
(note 406 405 407 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 408 51 (set (reg:SI 0 ax [orig:160 D.6469 ] [160])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:568 90 {*movsi_internal}
     (nil))
(insn 408 407 409 51 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:160 D.6469 ] [160])
            (const_int 6 [0x6]))) sim2fitman_sup.cpp:568 7 {*cmpsi_1}
     (nil))
(jump_insn 409 408 410 51 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 542)
            (pc))) sim2fitman_sup.cpp:568 596 {*jcc_1}
     (nil)
 -> 542)
;;  succ:       52 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 410 409 411 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 411 410 931 52 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:570 90 {*movsi_internal}
     (nil))
(jump_insn 931 411 932 52 (set (pc)
        (label_ref 431)) sim2fitman_sup.cpp:570 636 {jump}
     (nil)
 -> 431)
;;  succ:       54 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 932 931 433)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 161 162 163 164 165 166 167 314 315 316 317 318
(code_label 433 932 414 53 104 "" [1 uses])
(note 414 433 415 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 415 414 416 53 (set (reg:SI 0 ax [orig:161 D.6469 ] [161])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 416 415 417 53 (set (reg:SI 1 dx [314])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 417 416 418 53 (parallel [
            (set (reg:SI 1 dx [orig:162 D.6469 ] [162])
                (plus:SI (reg:SI 1 dx [314])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:571 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -6 [0xfffffffffffffffa]))
        (nil)))
(insn 418 417 419 53 (parallel [
            (set (reg:SI 0 ax [orig:163 D.6469 ] [163])
                (plus:SI (reg:SI 0 ax [orig:161 D.6469 ] [161])
                    (reg:SI 1 dx [orig:162 D.6469 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:571 220 {*addsi_1}
     (nil))
(insn 419 418 420 53 (set (reg/f:DI 1 dx [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:571 89 {*movdi_internal}
     (nil))
(insn 420 419 421 53 (set (reg:DI 0 ax [316])
        (sign_extend:DI (reg:SI 0 ax [orig:163 D.6469 ] [163]))) sim2fitman_sup.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 421 420 422 53 (set (reg:QI 0 ax [orig:164 D.6470 ] [164])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [315])
                    (reg:DI 0 ax [316]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 422 421 423 53 (set (reg:SI 0 ax [orig:165 D.6469 ] [165])
        (sign_extend:SI (reg:QI 0 ax [orig:164 D.6470 ] [164]))) sim2fitman_sup.cpp:571 148 {extendqisi2}
     (nil))
(insn 423 422 424 53 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:165 D.6469 ] [165])) sim2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(call_insn/i 424 423 426 53 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:571 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 426 424 427 53 (set (reg:QI 1 dx [orig:167 D.6470 ] [167])
        (reg:QI 0 ax [orig:166 D.6469 ] [166])) sim2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 427 426 428 53 (set (reg:SI 0 ax [318])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 428 427 429 53 (set (reg:DI 0 ax [317])
        (sign_extend:DI (reg:SI 0 ax [318]))) sim2fitman_sup.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 53 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [317]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:167 D.6470 ] [167])) sim2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 430 429 431 53 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:570 220 {*addsi_1}
     (nil))
;;  succ:       54 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU,DFS_BACK)
;;              52 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 431 430 432 54 103 "" [1 uses])
(note 432 431 434 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 434 432 435 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:570 7 {*cmpsi_1}
     (nil))
(jump_insn 435 434 933 54 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 433)
            (pc))) sim2fitman_sup.cpp:570 596 {*jcc_1}
     (nil)
 -> 433)
;;  succ:       53
;;              55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 933 435 934 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(jump_insn 934 933 935 55 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 935 934 439)
;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 185
(code_label 439 935 440 56 95 "" [1 uses])
(note 440 439 441 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 441 440 442 56 (set (reg:SI 0 ax [orig:185 D.6469 ] [185])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:575 90 {*movsi_internal}
     (nil))
(insn 442 441 443 56 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:185 D.6469 ] [185])
            (const_int 4 [0x4]))) sim2fitman_sup.cpp:575 7 {*cmpsi_1}
     (nil))
(jump_insn 443 442 444 56 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 511)
            (pc))) sim2fitman_sup.cpp:575 596 {*jcc_1}
     (nil)
 -> 511)
;;  succ:       57 (FALLTHRU)
;;              66
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 186 187 188 319 320
(note 444 443 445 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 445 444 446 57 (set (reg:SI 0 ax [orig:186 D.6469 ] [186])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:576 90 {*movsi_internal}
     (nil))
(insn 446 445 447 57 (parallel [
            (set (reg:SI 0 ax [orig:187 D.6469 ] [187])
                (plus:SI (reg:SI 0 ax [orig:186 D.6469 ] [186])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:576 220 {*addsi_1}
     (nil))
(insn 447 446 448 57 (set (reg/f:DI 1 dx [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:576 89 {*movdi_internal}
     (nil))
(insn 448 447 449 57 (set (reg:DI 0 ax [320])
        (sign_extend:DI (reg:SI 0 ax [orig:187 D.6469 ] [187]))) sim2fitman_sup.cpp:576 142 {*extendsidi2_rex64}
     (nil))
(insn 449 448 450 57 (set (reg:QI 0 ax [orig:188 D.6470 ] [188])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [319])
                    (reg:DI 0 ax [320]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:576 93 {*movqi_internal}
     (nil))
(insn 450 449 451 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:188 D.6470 ] [188])
            (const_int 95 [0x5f]))) sim2fitman_sup.cpp:576 5 {*cmpqi_1}
     (nil))
(jump_insn 451 450 452 57 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 481)
            (pc))) sim2fitman_sup.cpp:576 596 {*jcc_1}
     (nil)
 -> 481)
;;  succ:       58 (FALLTHRU)
;;              62
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 452 451 453 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 453 452 936 58 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:578 90 {*movsi_internal}
     (nil))
(jump_insn 936 453 937 58 (set (pc)
        (label_ref 473)) sim2fitman_sup.cpp:578 636 {jump}
     (nil)
 -> 473)
;;  succ:       60 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 937 936 475)
;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 196 197 198 199 200 201 202 321 322 323 324 325
(code_label 475 937 456 59 108 "" [1 uses])
(note 456 475 457 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 457 456 458 59 (set (reg:SI 0 ax [orig:196 D.6469 ] [196])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:579 90 {*movsi_internal}
     (nil))
(insn 458 457 459 59 (set (reg:SI 1 dx [321])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:579 90 {*movsi_internal}
     (nil))
(insn 459 458 460 59 (parallel [
            (set (reg:SI 1 dx [orig:197 D.6469 ] [197])
                (plus:SI (reg:SI 1 dx [321])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:579 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 460 459 461 59 (parallel [
            (set (reg:SI 0 ax [orig:198 D.6469 ] [198])
                (plus:SI (reg:SI 0 ax [orig:196 D.6469 ] [196])
                    (reg:SI 1 dx [orig:197 D.6469 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:579 220 {*addsi_1}
     (nil))
(insn 461 460 462 59 (set (reg/f:DI 1 dx [322])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:579 89 {*movdi_internal}
     (nil))
(insn 462 461 463 59 (set (reg:DI 0 ax [323])
        (sign_extend:DI (reg:SI 0 ax [orig:198 D.6469 ] [198]))) sim2fitman_sup.cpp:579 142 {*extendsidi2_rex64}
     (nil))
(insn 463 462 464 59 (set (reg:QI 0 ax [orig:199 D.6470 ] [199])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [322])
                    (reg:DI 0 ax [323]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:579 93 {*movqi_internal}
     (nil))
(insn 464 463 465 59 (set (reg:SI 0 ax [orig:200 D.6469 ] [200])
        (sign_extend:SI (reg:QI 0 ax [orig:199 D.6470 ] [199]))) sim2fitman_sup.cpp:579 148 {extendqisi2}
     (nil))
(insn 465 464 466 59 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:200 D.6469 ] [200])) sim2fitman_sup.cpp:579 90 {*movsi_internal}
     (nil))
(call_insn/i 466 465 468 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:579 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 468 466 469 59 (set (reg:QI 1 dx [orig:202 D.6470 ] [202])
        (reg:QI 0 ax [orig:201 D.6469 ] [201])) sim2fitman_sup.cpp:579 93 {*movqi_internal}
     (nil))
(insn 469 468 470 59 (set (reg:SI 0 ax [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:579 90 {*movsi_internal}
     (nil))
(insn 470 469 471 59 (set (reg:DI 0 ax [324])
        (sign_extend:DI (reg:SI 0 ax [325]))) sim2fitman_sup.cpp:579 142 {*extendsidi2_rex64}
     (nil))
(insn 471 470 472 59 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [324]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:202 D.6470 ] [202])) sim2fitman_sup.cpp:579 93 {*movqi_internal}
     (nil))
(insn 472 471 473 59 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:578 220 {*addsi_1}
     (nil))
;;  succ:       60 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU,DFS_BACK)
;;              58 [100.0%] 
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 473 472 474 60 107 "" [1 uses])
(note 474 473 476 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 476 474 477 60 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:578 7 {*cmpsi_1}
     (nil))
(jump_insn 477 476 938 60 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 475)
            (pc))) sim2fitman_sup.cpp:578 596 {*jcc_1}
     (nil)
 -> 475)
;;  succ:       59
;;              61 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 938 477 939 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(jump_insn 939 938 940 61 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 940 939 481)
;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 481 940 482 62 106 "" [1 uses])
(note 482 481 483 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 483 482 941 62 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:583 90 {*movsi_internal}
     (nil))
(jump_insn 941 483 942 62 (set (pc)
        (label_ref 503)) sim2fitman_sup.cpp:583 636 {jump}
     (nil)
 -> 503)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 942 941 505)
;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 189 190 191 192 193 194 195 326 327 328 329 330
(code_label 505 942 486 63 110 "" [1 uses])
(note 486 505 487 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 487 486 488 63 (set (reg:SI 0 ax [orig:189 D.6469 ] [189])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:584 90 {*movsi_internal}
     (nil))
(insn 488 487 489 63 (set (reg:SI 1 dx [326])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:584 90 {*movsi_internal}
     (nil))
(insn 489 488 490 63 (parallel [
            (set (reg:SI 1 dx [orig:190 D.6469 ] [190])
                (plus:SI (reg:SI 1 dx [326])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:584 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -4 [0xfffffffffffffffc]))
        (nil)))
(insn 490 489 491 63 (parallel [
            (set (reg:SI 0 ax [orig:191 D.6469 ] [191])
                (plus:SI (reg:SI 0 ax [orig:189 D.6469 ] [189])
                    (reg:SI 1 dx [orig:190 D.6469 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:584 220 {*addsi_1}
     (nil))
(insn 491 490 492 63 (set (reg/f:DI 1 dx [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:584 89 {*movdi_internal}
     (nil))
(insn 492 491 493 63 (set (reg:DI 0 ax [328])
        (sign_extend:DI (reg:SI 0 ax [orig:191 D.6469 ] [191]))) sim2fitman_sup.cpp:584 142 {*extendsidi2_rex64}
     (nil))
(insn 493 492 494 63 (set (reg:QI 0 ax [orig:192 D.6470 ] [192])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [327])
                    (reg:DI 0 ax [328]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:584 93 {*movqi_internal}
     (nil))
(insn 494 493 495 63 (set (reg:SI 0 ax [orig:193 D.6469 ] [193])
        (sign_extend:SI (reg:QI 0 ax [orig:192 D.6470 ] [192]))) sim2fitman_sup.cpp:584 148 {extendqisi2}
     (nil))
(insn 495 494 496 63 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:193 D.6469 ] [193])) sim2fitman_sup.cpp:584 90 {*movsi_internal}
     (nil))
(call_insn/i 496 495 498 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:584 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 498 496 499 63 (set (reg:QI 1 dx [orig:195 D.6470 ] [195])
        (reg:QI 0 ax [orig:194 D.6469 ] [194])) sim2fitman_sup.cpp:584 93 {*movqi_internal}
     (nil))
(insn 499 498 500 63 (set (reg:SI 0 ax [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:584 90 {*movsi_internal}
     (nil))
(insn 500 499 501 63 (set (reg:DI 0 ax [329])
        (sign_extend:DI (reg:SI 0 ax [330]))) sim2fitman_sup.cpp:584 142 {*extendsidi2_rex64}
     (nil))
(insn 501 500 502 63 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [329]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:195 D.6470 ] [195])) sim2fitman_sup.cpp:584 93 {*movqi_internal}
     (nil))
(insn 502 501 503 63 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:583 220 {*addsi_1}
     (nil))
;;  succ:       64 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU,DFS_BACK)
;;              62 [100.0%] 
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 503 502 504 64 109 "" [1 uses])
(note 504 503 506 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 506 504 507 64 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) sim2fitman_sup.cpp:583 7 {*cmpsi_1}
     (nil))
(jump_insn 507 506 943 64 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 505)
            (pc))) sim2fitman_sup.cpp:583 596 {*jcc_1}
     (nil)
 -> 505)
;;  succ:       63
;;              65 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 943 507 944 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(jump_insn 944 943 945 65 (set (pc)
        (label_ref 542)) 636 {jump}
     (nil)
 -> 542)
;;  succ:       70 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 945 944 511)
;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 203
(code_label 511 945 512 66 105 "" [1 uses])
(note 512 511 513 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 513 512 514 66 (set (reg:SI 0 ax [orig:203 D.6469 ] [203])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:588 90 {*movsi_internal}
     (nil))
(insn 514 513 515 66 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:203 D.6469 ] [203])
            (const_int 2 [0x2]))) sim2fitman_sup.cpp:588 7 {*cmpsi_1}
     (nil))
(jump_insn 515 514 516 66 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 542)
            (pc))) sim2fitman_sup.cpp:588 596 {*jcc_1}
     (nil)
 -> 542)
;;  succ:       67 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66 (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 516 515 517 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 946 67 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:589 90 {*movsi_internal}
     (nil))
(jump_insn 946 517 947 67 (set (pc)
        (label_ref 537)) sim2fitman_sup.cpp:589 636 {jump}
     (nil)
 -> 537)
;;  succ:       69 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 947 946 539)
;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       69
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 204 205 206 207 208 209 210 331 332 333 334 335
(code_label 539 947 520 68 112 "" [1 uses])
(note 520 539 521 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 521 520 522 68 (set (reg:SI 0 ax [orig:204 D.6469 ] [204])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:590 90 {*movsi_internal}
     (nil))
(insn 522 521 523 68 (set (reg:SI 1 dx [331])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:590 90 {*movsi_internal}
     (nil))
(insn 523 522 524 68 (parallel [
            (set (reg:SI 1 dx [orig:205 D.6469 ] [205])
                (plus:SI (reg:SI 1 dx [331])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:590 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int -2 [0xfffffffffffffffe]))
        (nil)))
(insn 524 523 525 68 (parallel [
            (set (reg:SI 0 ax [orig:206 D.6469 ] [206])
                (plus:SI (reg:SI 0 ax [orig:204 D.6469 ] [204])
                    (reg:SI 1 dx [orig:205 D.6469 ] [205])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:590 220 {*addsi_1}
     (nil))
(insn 525 524 526 68 (set (reg/f:DI 1 dx [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:590 89 {*movdi_internal}
     (nil))
(insn 526 525 527 68 (set (reg:DI 0 ax [333])
        (sign_extend:DI (reg:SI 0 ax [orig:206 D.6469 ] [206]))) sim2fitman_sup.cpp:590 142 {*extendsidi2_rex64}
     (nil))
(insn 527 526 528 68 (set (reg:QI 0 ax [orig:207 D.6470 ] [207])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [332])
                    (reg:DI 0 ax [333]))
                (const_int 768 [0x300])) [0 io_filenames_24(D)->out S1 A8])) sim2fitman_sup.cpp:590 93 {*movqi_internal}
     (nil))
(insn 528 527 529 68 (set (reg:SI 0 ax [orig:208 D.6469 ] [208])
        (sign_extend:SI (reg:QI 0 ax [orig:207 D.6470 ] [207]))) sim2fitman_sup.cpp:590 148 {extendqisi2}
     (nil))
(insn 529 528 530 68 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:208 D.6469 ] [208])) sim2fitman_sup.cpp:590 90 {*movsi_internal}
     (nil))
(call_insn/i 530 529 532 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x2adf29307b00 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:590 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 532 530 533 68 (set (reg:QI 1 dx [orig:210 D.6470 ] [210])
        (reg:QI 0 ax [orig:209 D.6469 ] [209])) sim2fitman_sup.cpp:590 93 {*movqi_internal}
     (nil))
(insn 533 532 534 68 (set (reg:SI 0 ax [335])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:590 90 {*movsi_internal}
     (nil))
(insn 534 533 535 68 (set (reg:DI 0 ax [334])
        (sign_extend:DI (reg:SI 0 ax [335]))) sim2fitman_sup.cpp:590 142 {*extendsidi2_rex64}
     (nil))
(insn 535 534 536 68 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [334]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:210 D.6470 ] [210])) sim2fitman_sup.cpp:590 93 {*movqi_internal}
     (nil))
(insn 536 535 537 68 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:589 220 {*addsi_1}
     (nil))
;;  succ:       69 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU,DFS_BACK)
;;              67 [100.0%] 
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 537 536 538 69 111 "" [1 uses])
(note 538 537 540 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 540 538 541 69 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:589 7 {*cmpsi_1}
     (nil))
(jump_insn 541 540 542 69 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 539)
            (pc))) sim2fitman_sup.cpp:589 596 {*jcc_1}
     (nil)
 -> 539)
;;  succ:       68
;;              70 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51
;;              55 [100.0%] 
;;              66
;;              69 (FALLTHRU)
;;              61 [100.0%] 
;;              50 [100.0%] 
;;              46 [100.0%] 
;;              65 [100.0%] 
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 542 541 543 70 100 "" [7 uses])
(note 543 542 544 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 544 543 545 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:595 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 545 544 546 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 549)
            (pc))) sim2fitman_sup.cpp:595 596 {*jcc_1}
     (nil)
 -> 549)
;;  succ:       72
;;              71 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 546 545 547 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 547 546 548 71 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:595 7 {*cmpsi_1}
     (nil))
(jump_insn 548 547 549 71 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 709)
            (pc))) sim2fitman_sup.cpp:595 596 {*jcc_1}
     (nil)
 -> 709)
;;  succ:       72 (FALLTHRU)
;;              88
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;;              71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 211 336
(code_label 549 548 550 72 113 "" [1 uses])
(note 550 549 551 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 551 550 552 72 (parallel [
            (set (reg:DI 0 ax [336])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:598 221 {*adddi_1}
     (nil))
(insn 552 551 553 72 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC52") [flags 0x2]  <var_decl 0x2adf29855000 *.LC52>)) sim2fitman_sup.cpp:598 89 {*movdi_internal}
     (nil))
(insn 553 552 554 72 (set (reg:DI 5 di)
        (reg:DI 0 ax [336])) sim2fitman_sup.cpp:598 89 {*movdi_internal}
     (nil))
(call_insn/i 554 553 556 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:598 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 556 554 557 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:211 D.6469 ] [211])
            (const_int 0 [0]))) sim2fitman_sup.cpp:598 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 557 556 558 72 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 617)
            (pc))) sim2fitman_sup.cpp:598 596 {*jcc_1}
     (nil)
 -> 617)
;;  succ:       73 (FALLTHRU)
;;              78
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 212 337
(note 558 557 559 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 559 558 560 73 (parallel [
            (set (reg:DI 0 ax [337])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:599 221 {*adddi_1}
     (nil))
(insn 560 559 561 73 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC53") [flags 0x2]  <var_decl 0x2adf29855098 *.LC53>)) sim2fitman_sup.cpp:599 89 {*movdi_internal}
     (nil))
(insn 561 560 562 73 (set (reg:DI 5 di)
        (reg:DI 0 ax [337])) sim2fitman_sup.cpp:599 89 {*movdi_internal}
     (nil))
(call_insn/i 562 561 564 73 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:599 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 564 562 565 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:212 D.6469 ] [212])
            (const_int 0 [0]))) sim2fitman_sup.cpp:599 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 565 564 566 73 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 579)
            (pc))) sim2fitman_sup.cpp:599 596 {*jcc_1}
     (nil)
 -> 579)
;;  succ:       74 (FALLTHRU)
;;              75
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 213 214 338 339 342 343
(note 566 565 567 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 567 566 568 74 (set (reg:SI 0 ax [orig:213 D.6469 ] [213])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:600 90 {*movsi_internal}
     (nil))
(insn 568 567 569 74 (parallel [
            (set (reg:SI 0 ax [orig:214 D.6469 ] [214])
                (plus:SI (reg:SI 0 ax [orig:213 D.6469 ] [213])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:600 220 {*addsi_1}
     (nil))
(insn 569 568 570 74 (set (reg:DI 0 ax [338])
        (sign_extend:DI (reg:SI 0 ax [orig:214 D.6469 ] [214]))) sim2fitman_sup.cpp:600 142 {*extendsidi2_rex64}
     (nil))
(insn 570 569 574 74 (parallel [
            (set (reg:DI 1 dx [339])
                (plus:DI (reg:DI 0 ax [338])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:600 221 {*adddi_1}
     (nil))
(insn 574 570 575 74 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:600 89 {*movdi_internal}
     (nil))
(insn 575 574 576 74 (parallel [
            (set (reg:DI 0 ax [342])
                (plus:DI (reg/f:DI 0 ax [343])
                    (reg:DI 1 dx [339])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:600 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [339]))
        (nil)))
(insn 576 575 948 74 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [342])) sim2fitman_sup.cpp:600 89 {*movdi_internal}
     (nil))
(jump_insn 948 576 949 74 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 949 948 579)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 215 344
(code_label 579 949 580 75 116 "" [1 uses])
(note 580 579 581 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 581 580 582 75 (parallel [
            (set (reg:DI 0 ax [344])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:601 221 {*adddi_1}
     (nil))
(insn 582 581 583 75 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC54") [flags 0x2]  <var_decl 0x2adf29855130 *.LC54>)) sim2fitman_sup.cpp:601 89 {*movdi_internal}
     (nil))
(insn 583 582 584 75 (set (reg:DI 5 di)
        (reg:DI 0 ax [344])) sim2fitman_sup.cpp:601 89 {*movdi_internal}
     (nil))
(call_insn/i 584 583 586 75 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:601 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 586 584 587 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:215 D.6469 ] [215])
            (const_int 0 [0]))) sim2fitman_sup.cpp:601 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 587 586 588 75 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 601)
            (pc))) sim2fitman_sup.cpp:601 596 {*jcc_1}
     (nil)
 -> 601)
;;  succ:       76 (FALLTHRU)
;;              77
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75 (FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 216 217 345 346 349 350
(note 588 587 589 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 589 588 590 76 (set (reg:SI 0 ax [orig:216 D.6469 ] [216])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(insn 590 589 591 76 (parallel [
            (set (reg:SI 0 ax [orig:217 D.6469 ] [217])
                (plus:SI (reg:SI 0 ax [orig:216 D.6469 ] [216])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:602 220 {*addsi_1}
     (nil))
(insn 591 590 592 76 (set (reg:DI 0 ax [345])
        (sign_extend:DI (reg:SI 0 ax [orig:217 D.6469 ] [217]))) sim2fitman_sup.cpp:602 142 {*extendsidi2_rex64}
     (nil))
(insn 592 591 596 76 (parallel [
            (set (reg:DI 1 dx [346])
                (plus:DI (reg:DI 0 ax [345])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:602 221 {*adddi_1}
     (nil))
(insn 596 592 597 76 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:602 89 {*movdi_internal}
     (nil))
(insn 597 596 598 76 (parallel [
            (set (reg:DI 0 ax [349])
                (plus:DI (reg/f:DI 0 ax [350])
                    (reg:DI 1 dx [346])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:602 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [346]))
        (nil)))
(insn 598 597 950 76 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [349])) sim2fitman_sup.cpp:602 89 {*movdi_internal}
     (nil))
(jump_insn 950 598 951 76 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 951 950 601)
;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       75
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 218 219 351 352 355 356
(code_label 601 951 602 77 118 "" [1 uses])
(note 602 601 603 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 603 602 604 77 (set (reg:SI 0 ax [orig:218 D.6469 ] [218])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:604 90 {*movsi_internal}
     (nil))
(insn 604 603 605 77 (parallel [
            (set (reg:SI 0 ax [orig:219 D.6469 ] [219])
                (plus:SI (reg:SI 0 ax [orig:218 D.6469 ] [218])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:604 220 {*addsi_1}
     (nil))
(insn 605 604 606 77 (set (reg:DI 0 ax [351])
        (sign_extend:DI (reg:SI 0 ax [orig:219 D.6469 ] [219]))) sim2fitman_sup.cpp:604 142 {*extendsidi2_rex64}
     (nil))
(insn 606 605 610 77 (parallel [
            (set (reg:DI 1 dx [352])
                (plus:DI (reg:DI 0 ax [351])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:604 221 {*adddi_1}
     (nil))
(insn 610 606 611 77 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:604 89 {*movdi_internal}
     (nil))
(insn 611 610 612 77 (parallel [
            (set (reg:DI 0 ax [355])
                (plus:DI (reg/f:DI 0 ax [356])
                    (reg:DI 1 dx [352])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:604 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [352]))
        (nil)))
(insn 612 611 952 77 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [355])) sim2fitman_sup.cpp:604 89 {*movdi_internal}
     (nil))
(jump_insn 952 612 953 77 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 953 952 617)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 220 357
(code_label 617 953 618 78 115 "" [1 uses])
(note 618 617 619 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 78 (parallel [
            (set (reg:DI 0 ax [357])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:607 221 {*adddi_1}
     (nil))
(insn 620 619 621 78 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC53") [flags 0x2]  <var_decl 0x2adf29855098 *.LC53>)) sim2fitman_sup.cpp:607 89 {*movdi_internal}
     (nil))
(insn 621 620 622 78 (set (reg:DI 5 di)
        (reg:DI 0 ax [357])) sim2fitman_sup.cpp:607 89 {*movdi_internal}
     (nil))
(call_insn/i 622 621 624 78 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:607 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 624 622 625 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:220 D.6469 ] [220])
            (const_int 0 [0]))) sim2fitman_sup.cpp:607 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 625 624 626 78 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 639)
            (pc))) sim2fitman_sup.cpp:607 596 {*jcc_1}
     (nil)
 -> 639)
;;  succ:       79 (FALLTHRU)
;;              80
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 221 222 358 359 362 363
(note 626 625 627 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 627 626 628 79 (set (reg:SI 0 ax [orig:221 D.6469 ] [221])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:608 90 {*movsi_internal}
     (nil))
(insn 628 627 629 79 (parallel [
            (set (reg:SI 0 ax [orig:222 D.6469 ] [222])
                (plus:SI (reg:SI 0 ax [orig:221 D.6469 ] [221])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:608 220 {*addsi_1}
     (nil))
(insn 629 628 630 79 (set (reg:DI 0 ax [358])
        (sign_extend:DI (reg:SI 0 ax [orig:222 D.6469 ] [222]))) sim2fitman_sup.cpp:608 142 {*extendsidi2_rex64}
     (nil))
(insn 630 629 634 79 (parallel [
            (set (reg:DI 1 dx [359])
                (plus:DI (reg:DI 0 ax [358])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:608 221 {*adddi_1}
     (nil))
(insn 634 630 635 79 (set (reg/f:DI 0 ax [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:608 89 {*movdi_internal}
     (nil))
(insn 635 634 636 79 (parallel [
            (set (reg:DI 0 ax [362])
                (plus:DI (reg/f:DI 0 ax [363])
                    (reg:DI 1 dx [359])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:608 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [359]))
        (nil)))
(insn 636 635 954 79 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [362])) sim2fitman_sup.cpp:608 89 {*movdi_internal}
     (nil))
(jump_insn 954 636 955 79 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 955 954 639)
;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 223 364
(code_label 639 955 640 80 120 "" [1 uses])
(note 640 639 641 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 641 640 642 80 (parallel [
            (set (reg:DI 0 ax [364])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:609 221 {*adddi_1}
     (nil))
(insn 642 641 643 80 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC54") [flags 0x2]  <var_decl 0x2adf29855130 *.LC54>)) sim2fitman_sup.cpp:609 89 {*movdi_internal}
     (nil))
(insn 643 642 644 80 (set (reg:DI 5 di)
        (reg:DI 0 ax [364])) sim2fitman_sup.cpp:609 89 {*movdi_internal}
     (nil))
(call_insn/i 644 643 646 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:609 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 646 644 647 80 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:223 D.6469 ] [223])
            (const_int 0 [0]))) sim2fitman_sup.cpp:609 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 647 646 648 80 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 661)
            (pc))) sim2fitman_sup.cpp:609 596 {*jcc_1}
     (nil)
 -> 661)
;;  succ:       81 (FALLTHRU)
;;              82
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 225 365 366 369 370
(note 648 647 649 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 649 648 650 81 (set (reg:SI 0 ax [orig:224 D.6469 ] [224])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:610 90 {*movsi_internal}
     (nil))
(insn 650 649 651 81 (parallel [
            (set (reg:SI 0 ax [orig:225 D.6469 ] [225])
                (plus:SI (reg:SI 0 ax [orig:224 D.6469 ] [224])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:610 220 {*addsi_1}
     (nil))
(insn 651 650 652 81 (set (reg:DI 0 ax [365])
        (sign_extend:DI (reg:SI 0 ax [orig:225 D.6469 ] [225]))) sim2fitman_sup.cpp:610 142 {*extendsidi2_rex64}
     (nil))
(insn 652 651 656 81 (parallel [
            (set (reg:DI 1 dx [366])
                (plus:DI (reg:DI 0 ax [365])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:610 221 {*adddi_1}
     (nil))
(insn 656 652 657 81 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:610 89 {*movdi_internal}
     (nil))
(insn 657 656 658 81 (parallel [
            (set (reg:DI 0 ax [369])
                (plus:DI (reg/f:DI 0 ax [370])
                    (reg:DI 1 dx [366])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:610 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [366]))
        (nil)))
(insn 658 657 956 81 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [369])) sim2fitman_sup.cpp:610 89 {*movdi_internal}
     (nil))
(jump_insn 956 658 957 81 (set (pc)
        (label_ref 672)) 636 {jump}
     (nil)
 -> 672)
;;  succ:       83 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 957 956 661)
;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 226 371 372 375 376
(code_label 661 957 662 82 121 "" [1 uses])
(note 662 661 663 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 663 662 664 82 (set (reg:SI 0 ax [orig:226 D.6469 ] [226])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 filename_length+0 S4 A64])) sim2fitman_sup.cpp:612 90 {*movsi_internal}
     (nil))
(insn 664 663 665 82 (set (reg:DI 0 ax [371])
        (sign_extend:DI (reg:SI 0 ax [orig:226 D.6469 ] [226]))) sim2fitman_sup.cpp:612 142 {*extendsidi2_rex64}
     (nil))
(insn 665 664 669 82 (parallel [
            (set (reg:DI 1 dx [372])
                (plus:DI (reg:DI 0 ax [371])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:612 221 {*adddi_1}
     (nil))
(insn 669 665 670 82 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:612 89 {*movdi_internal}
     (nil))
(insn 670 669 671 82 (parallel [
            (set (reg:DI 0 ax [375])
                (plus:DI (reg/f:DI 0 ax [376])
                    (reg:DI 1 dx [372])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:612 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [372]))
        (nil)))
(insn 671 670 672 82 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [375])) sim2fitman_sup.cpp:612 89 {*movdi_internal}
     (nil))
;;  succ:       83 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 [100.0%] 
;;              77 [100.0%] 
;;              79 [100.0%] 
;;              82 (FALLTHRU)
;;              74 [100.0%] 
;;              81 [100.0%] 
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 227 377 378
(code_label 672 671 673 83 119 "" [5 uses])
(note 673 672 674 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 674 673 675 83 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])) sim2fitman_sup.cpp:616 89 {*movdi_internal}
     (nil))
(insn 675 674 676 83 (set (mem:SI (reg/f:DI 0 ax [377]) [0 MEM[(void *)fname_suffix_2]+0 S4 A8])
        (const_int 1680765791 [0x642e735f])) sim2fitman_sup.cpp:616 90 {*movsi_internal}
     (nil))
(insn 676 675 677 83 (set (mem:HI (plus:DI (reg/f:DI 0 ax [377])
                (const_int 4 [0x4])) [0 MEM[(void *)fname_suffix_2]+4 S2 A8])
        (const_int 29793 [0x7461])) sim2fitman_sup.cpp:616 92 {*movhi_internal}
     (nil))
(insn 677 676 678 83 (set (mem:QI (plus:DI (reg/f:DI 0 ax [377])
                (const_int 6 [0x6])) [0 MEM[(void *)fname_suffix_2]+6 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:616 93 {*movqi_internal}
     (nil))
(insn 678 677 679 83 (set (reg:QI 0 ax [378])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])) sim2fitman_sup.cpp:618 93 {*movqi_internal}
     (nil))
(insn 679 678 680 83 (parallel [
            (set (reg:QI 0 ax [orig:227 D.6471 ] [227])
                (xor:QI (reg:QI 0 ax [378])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:618 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 680 679 681 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:227 D.6471 ] [227])
            (const_int 0 [0]))) sim2fitman_sup.cpp:618 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 681 680 682 83 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 701)
            (pc))) sim2fitman_sup.cpp:618 596 {*jcc_1}
     (nil)
 -> 701)
;;  succ:       84 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83 (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 228 229 230 379
(note 682 681 683 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 683 682 684 84 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:620 89 {*movdi_internal}
     (nil))
(insn 684 683 685 84 (parallel [
            (set (reg/f:DI 0 ax [orig:228 D.6467 ] [228])
                (plus:DI (reg/f:DI 0 ax [379])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:620 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 685 684 686 84 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC55") [flags 0x2]  <var_decl 0x2adf298551c8 *.LC55>)) sim2fitman_sup.cpp:620 89 {*movdi_internal}
     (nil))
(insn 686 685 687 84 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:228 D.6467 ] [228])) sim2fitman_sup.cpp:620 89 {*movdi_internal}
     (nil))
(call_insn 687 686 689 84 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2adf294b0d00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:620 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 689 687 690 84 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:229 D.6472 ] [229])) sim2fitman_sup.cpp:620 89 {*movdi_internal}
     (nil))
(insn 690 689 691 84 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_sup.cpp:620 4 {*cmpdi_ccno_1}
     (nil))
(insn 691 690 692 84 (set (reg:QI 0 ax [orig:230 D.6471 ] [230])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_sup.cpp:620 592 {*setcc_qi}
     (nil))
(insn 692 691 693 84 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:230 D.6471 ] [230])
            (const_int 0 [0]))) sim2fitman_sup.cpp:620 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 693 692 694 84 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 701)
            (pc))) sim2fitman_sup.cpp:620 596 {*jcc_1}
     (nil)
 -> 701)
;;  succ:       85 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       84 (FALLTHRU)
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 231 380 381
(note 694 693 695 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 695 694 696 85 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:624 89 {*movdi_internal}
     (nil))
(insn 696 695 697 85 (parallel [
            (set (reg/f:DI 1 dx [orig:231 D.6467 ] [231])
                (plus:DI (reg/f:DI 0 ax [380])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:624 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 697 696 698 85 (set (reg:SI 0 ax [381])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])) sim2fitman_sup.cpp:624 90 {*movsi_internal}
     (nil))
(insn 698 697 699 85 (set (reg:SI 4 si)
        (reg:SI 0 ax [381])) sim2fitman_sup.cpp:624 90 {*movsi_internal}
     (nil))
(insn 699 698 700 85 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:231 D.6467 ] [231])) sim2fitman_sup.cpp:624 89 {*movdi_internal}
     (nil))
(call_insn 700 699 701 85 (call (mem:QI (symbol_ref:DI ("_Z12cond_exit_03Pci") [flags 0x41]  <function_decl 0x2adf295f9100 cond_exit_03>) [0 cond_exit_03 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:624 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       86 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83
;;              85 (FALLTHRU)
;;              84
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 701 700 702 86 122 "" [2 uses])
(note 702 701 703 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 703 702 704 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_sup.cpp:628 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 704 703 705 86 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 709)
            (pc))) sim2fitman_sup.cpp:628 596 {*jcc_1}
     (nil)
 -> 709)
;;  succ:       87 (FALLTHRU)
;;              88
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86 (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 382
(note 705 704 706 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 706 705 707 87 (set (reg:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])) sim2fitman_sup.cpp:629 89 {*movdi_internal}
     (nil))
(insn 707 706 708 87 (set (reg:DI 5 di)
        (reg:DI 0 ax [382])) sim2fitman_sup.cpp:629 89 {*movdi_internal}
     (nil))
(call_insn 708 707 709 87 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2adf294b0900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:629 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       88 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       71
;;              86
;;              87 (FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 709 708 710 88 114 "" [2 uses])
(note 710 709 711 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 711 710 712 88 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 0 [0]))) sim2fitman_sup.cpp:633 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 712 711 713 88 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 716)
            (pc))) sim2fitman_sup.cpp:633 596 {*jcc_1}
     (nil)
 -> 716)
;;  succ:       90
;;              89 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88 (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 713 712 714 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 714 713 715 89 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_sup.cpp:633 7 {*cmpsi_1}
     (nil))
(jump_insn 715 714 716 89 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 881)
            (pc))) sim2fitman_sup.cpp:633 596 {*jcc_1}
     (nil)
 -> 881)
;;  succ:       90 (FALLTHRU)
;;              107
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 91, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88
;;              89 (FALLTHRU)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 232 383
(code_label 716 715 717 90 123 "" [1 uses])
(note 717 716 718 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 718 717 719 90 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:635 89 {*movdi_internal}
     (nil))
(insn 719 718 720 90 (parallel [
            (set (reg:DI 0 ax [383])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:637 221 {*adddi_1}
     (nil))
(insn 720 719 721 90 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC52") [flags 0x2]  <var_decl 0x2adf29855000 *.LC52>)) sim2fitman_sup.cpp:637 89 {*movdi_internal}
     (nil))
(insn 721 720 722 90 (set (reg:DI 5 di)
        (reg:DI 0 ax [383])) sim2fitman_sup.cpp:637 89 {*movdi_internal}
     (nil))
(call_insn/i 722 721 724 90 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:637 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 724 722 725 90 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:232 D.6469 ] [232])
            (const_int 0 [0]))) sim2fitman_sup.cpp:637 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 725 724 726 90 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 785)
            (pc))) sim2fitman_sup.cpp:637 596 {*jcc_1}
     (nil)
 -> 785)
;;  succ:       91 (FALLTHRU)
;;              96
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 91, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       90 (FALLTHRU)
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 233 384
(note 726 725 727 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 727 726 728 91 (parallel [
            (set (reg:DI 0 ax [384])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:638 221 {*adddi_1}
     (nil))
(insn 728 727 729 91 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC53") [flags 0x2]  <var_decl 0x2adf29855098 *.LC53>)) sim2fitman_sup.cpp:638 89 {*movdi_internal}
     (nil))
(insn 729 728 730 91 (set (reg:DI 5 di)
        (reg:DI 0 ax [384])) sim2fitman_sup.cpp:638 89 {*movdi_internal}
     (nil))
(call_insn/i 730 729 732 91 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:638 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 732 730 733 91 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:233 D.6469 ] [233])
            (const_int 0 [0]))) sim2fitman_sup.cpp:638 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 733 732 734 91 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 747)
            (pc))) sim2fitman_sup.cpp:638 596 {*jcc_1}
     (nil)
 -> 747)
;;  succ:       92 (FALLTHRU)
;;              93
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 92, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 91, next block 93, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91 (FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 234 235 385 386 389 390
(note 734 733 735 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 735 734 736 92 (set (reg:SI 0 ax [orig:234 D.6469 ] [234])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:639 90 {*movsi_internal}
     (nil))
(insn 736 735 737 92 (parallel [
            (set (reg:SI 0 ax [orig:235 D.6469 ] [235])
                (plus:SI (reg:SI 0 ax [orig:234 D.6469 ] [234])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:639 220 {*addsi_1}
     (nil))
(insn 737 736 738 92 (set (reg:DI 0 ax [385])
        (sign_extend:DI (reg:SI 0 ax [orig:235 D.6469 ] [235]))) sim2fitman_sup.cpp:639 142 {*extendsidi2_rex64}
     (nil))
(insn 738 737 742 92 (parallel [
            (set (reg:DI 1 dx [386])
                (plus:DI (reg:DI 0 ax [385])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:639 221 {*adddi_1}
     (nil))
(insn 742 738 743 92 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:639 89 {*movdi_internal}
     (nil))
(insn 743 742 744 92 (parallel [
            (set (reg:DI 0 ax [389])
                (plus:DI (reg/f:DI 0 ax [390])
                    (reg:DI 1 dx [386])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:639 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [386]))
        (nil)))
(insn 744 743 958 92 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [389])) sim2fitman_sup.cpp:639 89 {*movdi_internal}
     (nil))
(jump_insn 958 744 959 92 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 959 958 747)
;; basic block 93, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 92, next block 94, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 236 391
(code_label 747 959 748 93 126 "" [1 uses])
(note 748 747 749 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 749 748 750 93 (parallel [
            (set (reg:DI 0 ax [391])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:640 221 {*adddi_1}
     (nil))
(insn 750 749 751 93 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC54") [flags 0x2]  <var_decl 0x2adf29855130 *.LC54>)) sim2fitman_sup.cpp:640 89 {*movdi_internal}
     (nil))
(insn 751 750 752 93 (set (reg:DI 5 di)
        (reg:DI 0 ax [391])) sim2fitman_sup.cpp:640 89 {*movdi_internal}
     (nil))
(call_insn/i 752 751 754 93 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:640 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 754 752 755 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:236 D.6469 ] [236])
            (const_int 0 [0]))) sim2fitman_sup.cpp:640 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 755 754 756 93 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 769)
            (pc))) sim2fitman_sup.cpp:640 596 {*jcc_1}
     (nil)
 -> 769)
;;  succ:       94 (FALLTHRU)
;;              95
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 94, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 93, next block 95, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93 (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 237 238 392 393 396 397
(note 756 755 757 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 757 756 758 94 (set (reg:SI 0 ax [orig:237 D.6469 ] [237])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:641 90 {*movsi_internal}
     (nil))
(insn 758 757 759 94 (parallel [
            (set (reg:SI 0 ax [orig:238 D.6469 ] [238])
                (plus:SI (reg:SI 0 ax [orig:237 D.6469 ] [237])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:641 220 {*addsi_1}
     (nil))
(insn 759 758 760 94 (set (reg:DI 0 ax [392])
        (sign_extend:DI (reg:SI 0 ax [orig:238 D.6469 ] [238]))) sim2fitman_sup.cpp:641 142 {*extendsidi2_rex64}
     (nil))
(insn 760 759 764 94 (parallel [
            (set (reg:DI 1 dx [393])
                (plus:DI (reg:DI 0 ax [392])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:641 221 {*adddi_1}
     (nil))
(insn 764 760 765 94 (set (reg/f:DI 0 ax [397])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:641 89 {*movdi_internal}
     (nil))
(insn 765 764 766 94 (parallel [
            (set (reg:DI 0 ax [396])
                (plus:DI (reg/f:DI 0 ax [397])
                    (reg:DI 1 dx [393])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:641 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [393]))
        (nil)))
(insn 766 765 960 94 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [396])) sim2fitman_sup.cpp:641 89 {*movdi_internal}
     (nil))
(jump_insn 960 766 961 94 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 961 960 769)
;; basic block 95, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 94, next block 96, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 240 398 399 402 403
(code_label 769 961 770 95 128 "" [1 uses])
(note 770 769 771 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 771 770 772 95 (set (reg:SI 0 ax [orig:239 D.6469 ] [239])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:643 90 {*movsi_internal}
     (nil))
(insn 772 771 773 95 (parallel [
            (set (reg:SI 0 ax [orig:240 D.6469 ] [240])
                (plus:SI (reg:SI 0 ax [orig:239 D.6469 ] [239])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:643 220 {*addsi_1}
     (nil))
(insn 773 772 774 95 (set (reg:DI 0 ax [398])
        (sign_extend:DI (reg:SI 0 ax [orig:240 D.6469 ] [240]))) sim2fitman_sup.cpp:643 142 {*extendsidi2_rex64}
     (nil))
(insn 774 773 778 95 (parallel [
            (set (reg:DI 1 dx [399])
                (plus:DI (reg:DI 0 ax [398])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:643 221 {*adddi_1}
     (nil))
(insn 778 774 779 95 (set (reg/f:DI 0 ax [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(insn 779 778 780 95 (parallel [
            (set (reg:DI 0 ax [402])
                (plus:DI (reg/f:DI 0 ax [403])
                    (reg:DI 1 dx [399])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:643 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [399]))
        (nil)))
(insn 780 779 962 95 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [402])) sim2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(jump_insn 962 780 963 95 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 963 962 785)
;; basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 95, next block 97, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       90
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 241 404
(code_label 785 963 786 96 125 "" [1 uses])
(note 786 785 787 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 787 786 788 96 (parallel [
            (set (reg:DI 0 ax [404])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:646 221 {*adddi_1}
     (nil))
(insn 788 787 789 96 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC53") [flags 0x2]  <var_decl 0x2adf29855098 *.LC53>)) sim2fitman_sup.cpp:646 89 {*movdi_internal}
     (nil))
(insn 789 788 790 96 (set (reg:DI 5 di)
        (reg:DI 0 ax [404])) sim2fitman_sup.cpp:646 89 {*movdi_internal}
     (nil))
(call_insn/i 790 789 792 96 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:646 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 792 790 793 96 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:241 D.6469 ] [241])
            (const_int 0 [0]))) sim2fitman_sup.cpp:646 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 793 792 794 96 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 807)
            (pc))) sim2fitman_sup.cpp:646 596 {*jcc_1}
     (nil)
 -> 807)
;;  succ:       97 (FALLTHRU)
;;              98
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 97, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 96, next block 98, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       96 (FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 242 243 405 406 409 410
(note 794 793 795 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 795 794 796 97 (set (reg:SI 0 ax [orig:242 D.6469 ] [242])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:647 90 {*movsi_internal}
     (nil))
(insn 796 795 797 97 (parallel [
            (set (reg:SI 0 ax [orig:243 D.6469 ] [243])
                (plus:SI (reg:SI 0 ax [orig:242 D.6469 ] [242])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:647 220 {*addsi_1}
     (nil))
(insn 797 796 798 97 (set (reg:DI 0 ax [405])
        (sign_extend:DI (reg:SI 0 ax [orig:243 D.6469 ] [243]))) sim2fitman_sup.cpp:647 142 {*extendsidi2_rex64}
     (nil))
(insn 798 797 802 97 (parallel [
            (set (reg:DI 1 dx [406])
                (plus:DI (reg:DI 0 ax [405])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:647 221 {*adddi_1}
     (nil))
(insn 802 798 803 97 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:647 89 {*movdi_internal}
     (nil))
(insn 803 802 804 97 (parallel [
            (set (reg:DI 0 ax [409])
                (plus:DI (reg/f:DI 0 ax [410])
                    (reg:DI 1 dx [406])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:647 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [406]))
        (nil)))
(insn 804 803 964 97 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [409])) sim2fitman_sup.cpp:647 89 {*movdi_internal}
     (nil))
(jump_insn 964 804 965 97 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 965 964 807)
;; basic block 98, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 97, next block 99, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       96
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 244 411
(code_label 807 965 808 98 130 "" [1 uses])
(note 808 807 809 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(insn 809 808 810 98 (parallel [
            (set (reg:DI 0 ax [411])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:648 221 {*adddi_1}
     (nil))
(insn 810 809 811 98 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC54") [flags 0x2]  <var_decl 0x2adf29855130 *.LC54>)) sim2fitman_sup.cpp:648 89 {*movdi_internal}
     (nil))
(insn 811 810 812 98 (set (reg:DI 5 di)
        (reg:DI 0 ax [411])) sim2fitman_sup.cpp:648 89 {*movdi_internal}
     (nil))
(call_insn/i 812 811 814 98 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x2adf292ef300 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:648 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 814 812 815 98 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:244 D.6469 ] [244])
            (const_int 0 [0]))) sim2fitman_sup.cpp:648 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 815 814 816 98 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 829)
            (pc))) sim2fitman_sup.cpp:648 596 {*jcc_1}
     (nil)
 -> 829)
;;  succ:       99 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 99, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 98, next block 100, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       98 (FALLTHRU)
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 246 412 413 416 417
(note 816 815 817 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn 817 816 818 99 (set (reg:SI 0 ax [orig:245 D.6469 ] [245])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:649 90 {*movsi_internal}
     (nil))
(insn 818 817 819 99 (parallel [
            (set (reg:SI 0 ax [orig:246 D.6469 ] [246])
                (plus:SI (reg:SI 0 ax [orig:245 D.6469 ] [245])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:649 220 {*addsi_1}
     (nil))
(insn 819 818 820 99 (set (reg:DI 0 ax [412])
        (sign_extend:DI (reg:SI 0 ax [orig:246 D.6469 ] [246]))) sim2fitman_sup.cpp:649 142 {*extendsidi2_rex64}
     (nil))
(insn 820 819 824 99 (parallel [
            (set (reg:DI 1 dx [413])
                (plus:DI (reg:DI 0 ax [412])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:649 221 {*adddi_1}
     (nil))
(insn 824 820 825 99 (set (reg/f:DI 0 ax [417])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:649 89 {*movdi_internal}
     (nil))
(insn 825 824 826 99 (parallel [
            (set (reg:DI 0 ax [416])
                (plus:DI (reg/f:DI 0 ax [417])
                    (reg:DI 1 dx [413])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:649 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [413]))
        (nil)))
(insn 826 825 966 99 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [416])) sim2fitman_sup.cpp:649 89 {*movdi_internal}
     (nil))
(jump_insn 966 826 967 99 (set (pc)
        (label_ref 840)) 636 {jump}
     (nil)
 -> 840)
;;  succ:       101 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 967 966 829)
;; basic block 100, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 99, next block 101, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       98
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 247 418 419 422 423
(code_label 829 967 830 100 131 "" [1 uses])
(note 830 829 831 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 831 830 832 100 (set (reg:SI 0 ax [orig:247 D.6469 ] [247])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 filename_length+4 S4 A32])) sim2fitman_sup.cpp:651 90 {*movsi_internal}
     (nil))
(insn 832 831 833 100 (set (reg:DI 0 ax [418])
        (sign_extend:DI (reg:SI 0 ax [orig:247 D.6469 ] [247]))) sim2fitman_sup.cpp:651 142 {*extendsidi2_rex64}
     (nil))
(insn 833 832 837 100 (parallel [
            (set (reg:DI 1 dx [419])
                (plus:DI (reg:DI 0 ax [418])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:651 221 {*adddi_1}
     (nil))
(insn 837 833 838 100 (set (reg/f:DI 0 ax [423])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:651 89 {*movdi_internal}
     (nil))
(insn 838 837 839 100 (parallel [
            (set (reg:DI 0 ax [422])
                (plus:DI (reg/f:DI 0 ax [423])
                    (reg:DI 1 dx [419])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:651 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [419]))
        (nil)))
(insn 839 838 840 100 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [422])) sim2fitman_sup.cpp:651 89 {*movdi_internal}
     (nil))
;;  succ:       101 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 101, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 100, next block 102, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       94 [100.0%] 
;;              95 [100.0%] 
;;              97 [100.0%] 
;;              100 (FALLTHRU)
;;              92 [100.0%] 
;;              99 [100.0%] 
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 424
(code_label 840 839 841 101 129 "" [5 uses])
(note 841 840 842 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn 842 841 843 101 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 fname_suffix+0 S8 A64])) sim2fitman_sup.cpp:655 89 {*movdi_internal}
     (nil))
(insn 843 842 969 101 (set (reg:DI 2 cx [432])
        (const_int 8386094131808466271 [0x7461642e736e755f])) sim2fitman_sup.cpp:655 89 {*movdi_internal}
     (nil))
(insn 969 843 844 101 (set (mem:DI (reg/f:DI 0 ax [424]) [0 MEM[(void *)fname_suffix_4]+0 S8 A8])
        (reg:DI 2 cx [432])) sim2fitman_sup.cpp:655 89 {*movdi_internal}
     (nil))
(insn 844 969 845 101 (set (mem:QI (plus:DI (reg/f:DI 0 ax [424])
                (const_int 8 [0x8])) [0 MEM[(void *)fname_suffix_4]+8 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:655 93 {*movqi_internal}
     (nil))
(insn 845 844 846 101 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 2 [0x2]))) sim2fitman_sup.cpp:657 7 {*cmpsi_1}
     (nil))
(jump_insn 846 845 847 101 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 881)
            (pc))) sim2fitman_sup.cpp:657 596 {*jcc_1}
     (nil)
 -> 881)
;;  succ:       102 (FALLTHRU)
;;              107
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 102, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 101, next block 103, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       101 (FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 248 425
(note 847 846 848 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn 848 847 849 102 (set (reg:QI 0 ax [425])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])) sim2fitman_sup.cpp:659 93 {*movqi_internal}
     (nil))
(insn 849 848 850 102 (parallel [
            (set (reg:QI 0 ax [orig:248 D.6471 ] [248])
                (xor:QI (reg:QI 0 ax [425])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:659 395 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 850 849 851 102 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:248 D.6471 ] [248])
            (const_int 0 [0]))) sim2fitman_sup.cpp:659 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 851 850 852 102 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 871)
            (pc))) sim2fitman_sup.cpp:659 596 {*jcc_1}
     (nil)
 -> 871)
;;  succ:       103 (FALLTHRU)
;;              105
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 103, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 102, next block 104, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102 (FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 249 250 251 426
(note 852 851 853 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn 853 852 854 103 (set (reg/f:DI 0 ax [426])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:661 89 {*movdi_internal}
     (nil))
(insn 854 853 855 103 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.6467 ] [249])
                (plus:DI (reg/f:DI 0 ax [426])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:661 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 855 854 856 103 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC55") [flags 0x2]  <var_decl 0x2adf298551c8 *.LC55>)) sim2fitman_sup.cpp:661 89 {*movdi_internal}
     (nil))
(insn 856 855 857 103 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:249 D.6467 ] [249])) sim2fitman_sup.cpp:661 89 {*movdi_internal}
     (nil))
(call_insn 857 856 859 103 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x2adf294b0d00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:661 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 859 857 860 103 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:250 D.6472 ] [250])) sim2fitman_sup.cpp:661 89 {*movdi_internal}
     (nil))
(insn 860 859 861 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_sup.cpp:661 4 {*cmpdi_ccno_1}
     (nil))
(insn 861 860 862 103 (set (reg:QI 0 ax [orig:251 D.6471 ] [251])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) sim2fitman_sup.cpp:661 592 {*setcc_qi}
     (nil))
(insn 862 861 863 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:251 D.6471 ] [251])
            (const_int 0 [0]))) sim2fitman_sup.cpp:661 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 863 862 864 103 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 871)
            (pc))) sim2fitman_sup.cpp:661 596 {*jcc_1}
     (nil)
 -> 871)
;;  succ:       104 (FALLTHRU)
;;              105
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 104, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 103, next block 105, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       103 (FALLTHRU)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 252 427 428
(note 864 863 865 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn 865 864 866 104 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) sim2fitman_sup.cpp:665 89 {*movdi_internal}
     (nil))
(insn 866 865 867 104 (parallel [
            (set (reg/f:DI 1 dx [orig:252 D.6467 ] [252])
                (plus:DI (reg/f:DI 0 ax [427])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:665 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 867 866 868 104 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])) sim2fitman_sup.cpp:665 90 {*movsi_internal}
     (nil))
(insn 868 867 869 104 (set (reg:SI 4 si)
        (reg:SI 0 ax [428])) sim2fitman_sup.cpp:665 90 {*movsi_internal}
     (nil))
(insn 869 868 870 104 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:252 D.6467 ] [252])) sim2fitman_sup.cpp:665 89 {*movdi_internal}
     (nil))
(call_insn 870 869 871 104 (call (mem:QI (symbol_ref:DI ("_Z12cond_exit_03Pci") [flags 0x41]  <function_decl 0x2adf295f9100 cond_exit_03>) [0 cond_exit_03 S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:665 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       105 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 105, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 104, next block 106, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       102
;;              104 (FALLTHRU)
;;              103
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 871 870 872 105 132 "" [2 uses])
(note 872 871 873 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn 873 872 874 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_sup.cpp:670 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 874 873 875 105 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 881)
            (pc))) sim2fitman_sup.cpp:670 596 {*jcc_1}
     (nil)
 -> 881)
;;  succ:       106 (FALLTHRU)
;;              107
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 106, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 105, next block 107, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       105 (FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 429
(note 875 874 876 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(insn 876 875 877 106 (set (reg:DI 0 ax [429])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 check_file+0 S8 A64])) sim2fitman_sup.cpp:671 89 {*movdi_internal}
     (nil))
(insn 877 876 878 106 (set (reg:DI 5 di)
        (reg:DI 0 ax [429])) sim2fitman_sup.cpp:671 89 {*movdi_internal}
     (nil))
(call_insn 878 877 881 106 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2adf294b0900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:671 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       107 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 107, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 106, next block 108, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       106 (FALLTHRU)
;;              89
;;              101
;;              105
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 881 878 887 107 70 "" [3 uses])
(note 887 881 882 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn 882 887 883 107 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.6473+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [431]))
        ]) sim2fitman_sup.cpp:675 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 883 882 888 107 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 886)
            (pc))) sim2fitman_sup.cpp:675 596 {*jcc_1}
     (nil)
 -> 886)
;;  succ:       109
;;              108 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 108, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 107, next block 109, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       107 (FALLTHRU)
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 888 883 884 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(call_insn 884 888 885 108 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2adf297c8e00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:675 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 885 884 886)
;; basic block 109, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 108, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       107
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 886 885 889 109 133 "" [1 uses])
(note 889 886 968 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 968 889 0 NOTE_INSN_DELETED)

;; Function void infile_stats(Procpar_info*, InFile_struct*, Data_file_header*) (_Z12infile_statsP12Procpar_infoP13InFile_structP16Data_file_header, funcdef_no=13, decl_uid=5416, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=129 from oldreg=115, assigning class GENERAL_REGS to r129
   72: {r129:DI=r129:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  131: r129:DI=r89:DI
    Inserting insn reload after:
  132: r115:DI=r129:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 73
	 Choosing alt 0 in insn 73:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 82:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=130 from oldreg=119, assigning class GENERAL_REGS to r130
   82: {r130:DI=r130:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  133: r130:DI=r91:DI
    Inserting insn reload after:
  134: r119:DI=r130:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 83
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 95
	 Choosing alt 2 in insn 95:  (0) r  (1) 0  (2) mr {*muldi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 103:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 104:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 110:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=131 from oldreg=100, assigning class GENERAL_REGS to r131
  110: {r131:SI=r131:SI-r99:SI;clobber flags:CC;}
      REG_DEAD r99:SI
      REG_DEAD r98:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  135: r131:SI=r98:SI
    Inserting insn reload after:
  136: r100:SI=r131:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 112:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 118:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 125: point = 0
   Insn 124: point = 0
   Insn 123: point = 1
   Insn 122: point = 2
   Insn 121: point = 2
   Insn 120: point = 2
   Insn 119: point = 2
   Insn 118: point = 2
   Insn 117: point = 2
   Insn 116: point = 3
   Insn 115: point = 5
   Insn 114: point = 6
   Insn 113: point = 6
   Insn 112: point = 6
   Insn 111: point = 6
   Insn 136: point = 7
	Hard reg 0 is preferable by r131 with profit 1
   Insn 110: point = 9
   Insn 135: point = 10
	Hard reg 0 is preferable by r131 with profit 1
	Hard reg 1 is preferable by r131 with profit 1
   Insn 109: point = 12
   Insn 108: point = 14
   Insn 107: point = 15
   Insn 106: point = 17
   Insn 105: point = 18
   Insn 104: point = 18
   Insn 103: point = 18
   Insn 102: point = 18
   Insn 101: point = 19
   Insn 100: point = 21
   Insn 99: point = 22
   Insn 98: point = 22
   Insn 97: point = 22
   Insn 96: point = 22
   Insn 95: point = 23
   Insn 94: point = 25
   Insn 93: point = 27
   Insn 92: point = 28
   Insn 91: point = 30
   Insn 90: point = 32
   Insn 89: point = 33
   Insn 88: point = 33
   Insn 87: point = 33
   Insn 86: point = 33
   Insn 85: point = 34
   Insn 84: point = 36
   Insn 83: point = 38
   Insn 134: point = 40
	Hard reg 1 is preferable by r130 with profit 1
   Insn 82: point = 42
   Insn 133: point = 42
   Insn 81: point = 43
   Insn 80: point = 45
   Insn 79: point = 46
   Insn 78: point = 46
   Insn 77: point = 46
   Insn 76: point = 46
   Insn 75: point = 47
   Insn 74: point = 49
   Insn 73: point = 51
   Insn 132: point = 53
	Hard reg 1 is preferable by r129 with profit 1
   Insn 72: point = 55
   Insn 131: point = 55
   Insn 71: point = 56
   Insn 70: point = 58
   Insn 69: point = 59
   Insn 68: point = 59
   Insn 67: point = 59
   Insn 66: point = 59
   Insn 65: point = 60
   Insn 64: point = 62
   Insn 63: point = 63
   Insn 62: point = 63
   Insn 61: point = 63
   Insn 60: point = 63
   Insn 59: point = 64
   Insn 58: point = 66
   Insn 57: point = 67
   Insn 56: point = 67
   Insn 55: point = 67
   Insn 54: point = 67
   Insn 53: point = 68
   Insn 52: point = 69
   Insn 51: point = 69
  BB 4
   Insn 49: point = 69
   Insn 48: point = 69
  BB 2
   Insn 128: point = 69
   Insn 34: point = 69
   Insn 33: point = 70
   Insn 32: point = 71
   Insn 31: point = 71
   Insn 30: point = 72
   Insn 29: point = 72
   Insn 28: point = 73
   Insn 27: point = 73
   Insn 26: point = 74
   Insn 25: point = 75
   Insn 24: point = 76
   Insn 23: point = 78
   Insn 22: point = 79
   Insn 21: point = 80
   Insn 20: point = 81
   Insn 19: point = 82
   Insn 18: point = 83
   Insn 17: point = 83
   Insn 16: point = 84
   Insn 15: point = 86
   Insn 14: point = 87
   Insn 13: point = 87
   Insn 12: point = 88
   Insn 11: point = 90
   Insn 10: point = 91
   Insn 9: point = 91
   Insn 8: point = 91
   Insn 4: point = 91
   Insn 3: point = 91
   Insn 2: point = 91
  BB 3
   Insn 44: point = 91
   Insn 43: point = 92
   Insn 42: point = 93
   Insn 41: point = 93
   Insn 40: point = 93
   Insn 39: point = 93
   Insn 38: point = 94
 r83: [87..88]
 r84: [85..86]
 r85: [83..84]
 r86: [74..76]
 r87: [63..64]
 r88: [59..60]
 r89: [52..56]
 r90: [46..47]
 r91: [39..43]
 r92: [33..34]
 r93: [29..30]
 r94: [24..28]
 r95: [24..25]
 r96: [22..23]
 r97: [18..19]
 r98: [11..15]
 r99: [9..12]
 r100: [6..7]
 r101: [2..3]
 r102: [89..90]
 r103: [81..82]
 r104: [79..80]
 r105: [77..78]
 r106: [73..75]
 r107: [71..72]
 r108: [69..70]
 r109: [93..94]
 r110: [91..92]
 r111: [67..68]
 r112: [65..66]
 r113: [61..62]
 r114: [57..58]
 r115: [52..53]
 r116: [50..51]
 r117: [48..49]
 r118: [44..45]
 r119: [39..40]
 r120: [37..38]
 r121: [35..36]
 r122: [31..32]
 r123: [26..27]
 r124: [20..21]
 r125: [16..17]
 r126: [13..14]
 r127: [4..5]
 r128: [0..1]
 r129: [54..55]
 r130: [41..42]
 r131: [8..10]
Compressing live ranges: from 95 to 88 - 92%
Ranges after the compression:
 r83: [80..81]
 r84: [78..79]
 r85: [76..77]
 r86: [68..69]
 r87: [58..59]
 r88: [54..55]
 r89: [48..51]
 r90: [42..43]
 r91: [36..39]
 r92: [30..31]
 r93: [26..27]
 r94: [22..25]
 r95: [22..23]
 r96: [20..21]
 r97: [16..17]
 r98: [10..13]
 r99: [8..11]
 r100: [6..7]
 r101: [2..3]
 r102: [82..83]
 r103: [74..75]
 r104: [72..73]
 r105: [70..71]
 r106: [68..69]
 r107: [66..67]
 r108: [64..65]
 r109: [86..87]
 r110: [84..85]
 r111: [62..63]
 r112: [60..61]
 r113: [56..57]
 r114: [52..53]
 r115: [48..49]
 r116: [46..47]
 r117: [44..45]
 r118: [40..41]
 r119: [36..37]
 r120: [34..35]
 r121: [32..33]
 r122: [28..29]
 r123: [24..25]
 r124: [18..19]
 r125: [14..15]
 r126: [12..13]
 r127: [4..5]
 r128: [0..1]
 r129: [50..51]
 r130: [38..39]
 r131: [8..9]

********** Assignment #1: **********

	 Assigning to 129 (cl=GENERAL_REGS, orig=115, freq=3, tfirst=129, tfreq=3)...
	   Assign 1 to reload r129 (freq=3)
	 Assigning to 130 (cl=GENERAL_REGS, orig=119, freq=3, tfirst=130, tfreq=3)...
	   Assign 1 to reload r130 (freq=3)
	 Assigning to 131 (cl=GENERAL_REGS, orig=100, freq=3, tfirst=131, tfreq=3)...
	   Assign 1 to reload r131 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 26
changing reg in insn 59
changing reg in insn 60
changing reg in insn 65
changing reg in insn 66
changing reg in insn 71
changing reg in insn 75
changing reg in insn 76
changing reg in insn 81
changing reg in insn 85
changing reg in insn 86
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 102
changing reg in insn 107
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 116
changing reg in insn 117
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 100
changing reg in insn 101
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 115
changing reg in insn 116
changing reg in insn 123
changing reg in insn 124
deleting insn with uid = 15.
deleting insn with uid = 19.
deleting insn with uid = 33.
deleting insn with uid = 43.
deleting insn with uid = 132.
deleting insn with uid = 75.
deleting insn with uid = 134.
deleting insn with uid = 85.
deleting insn with uid = 135.
starting the processing of deferred insns
ending the processing of deferred insns


void infile_stats(Procpar_info*, InFile_struct*, Data_file_header*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={62d,50u} r1={26d,9u} r2={18d} r4={30d,13u} r5={35d,18u} r6={1d,35u} r7={1d,22u} r8={17d} r9={17d} r10={17d} r11={17d} r12={17d} r13={17d} r14={17d} r15={17d} r17={29d,1u} r18={17d} r19={17d} r20={1d,1u,2e} r21={18d} r22={18d} r23={18d} r24={18d} r25={18d} r26={18d} r27={18d} r28={18d} r29={17d} r30={17d} r31={17d} r32={17d} r33={17d} r34={17d} r35={17d} r36={17d} r37={18d} r38={18d} r39={17d} r40={17d} r45={17d} r46={17d} r47={17d} r48={17d} r49={17d} r50={17d} r51={17d} r52={17d} r53={17d} r54={17d} r55={17d} r56={17d} r57={17d} r58={17d} r59={17d} r60={17d} r61={17d} r62={17d} r63={17d} r64={17d} r65={17d} r66={17d} r67={17d} r68={17d} r69={17d} r70={17d} r71={17d} r72={17d} r73={17d} r74={17d} r75={17d} r76={17d} 
;;    total ref usage 1418{1267d,149u,2e} in 112{95 regular + 17 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 102 103 104 105 106 107 108
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 5 di [ procpar_info ])) sim2fitman_sup.cpp:681 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])
        (reg:DI 4 si [ infile_struct ])) sim2fitman_sup.cpp:681 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) sim2fitman_sup.cpp:681 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:683 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])
        (const_int 0 [0])) sim2fitman_sup.cpp:685 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:688 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 0 ax [orig:83 D.6478 ] [83])
                (plus:DI (reg/f:DI 0 ax [102])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:688 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (const_int 60 [0x3c]))
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:83 D.6478 ] [83])) sim2fitman_sup.cpp:688 89 {*movdi_internal}
     (nil))
(call_insn/i 14 13 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x2adf292f3200 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:688 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 14 17 2 (parallel [
            (set (reg:DI 0 ax [orig:85 D.6479 ] [85])
                (plus:DI (reg:DI 0 ax [orig:84 D.6479 ] [84])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:688 221 {*adddi_1}
     (nil))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:85 D.6479 ] [85])) sim2fitman_sup.cpp:688 89 {*movdi_internal}
     (nil))
(call_insn 18 17 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2adf29325200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:688 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 18 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg/f:DI 0 ax [103])) sim2fitman_sup.cpp:688 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) sim2fitman_sup.cpp:689 89 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])
        (reg/f:DI 0 ax [104])) sim2fitman_sup.cpp:689 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:692 89 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg/f:DI 1 dx [orig:86 D.6478 ] [86])
                (plus:DI (reg/f:DI 0 ax [105])
                    (const_int 60 [0x3c])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:692 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (const_int 60 [0x3c]))
        (nil)))
(insn 25 24 26 2 (set (reg:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) sim2fitman_sup.cpp:692 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:86 D.6478 ] [86])) sim2fitman_sup.cpp:692 89 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [106])) sim2fitman_sup.cpp:692 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x2adf292ef600 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:692 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 29 28 30 2 (set (reg:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) sim2fitman_sup.cpp:693 89 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC56") [flags 0x2]  <var_decl 0x2adf29891260 *.LC56>)) sim2fitman_sup.cpp:693 89 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [107])) sim2fitman_sup.cpp:693 89 {*movdi_internal}
     (nil))
(call_insn 32 31 34 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2adf29531a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:693 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 34 32 128 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg:DI 0 ax [108])) sim2fitman_sup.cpp:693 89 {*movdi_internal}
     (nil))
(jump_insn 128 34 129 2 (set (pc)
        (label_ref 45)) sim2fitman_sup.cpp:694 636 {jump}
     (nil)
 -> 45)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 47)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 109 110
(code_label 47 129 37 3 136 "" [1 uses])
(note 37 47 38 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 3 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) sim2fitman_sup.cpp:695 89 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])
        (reg/f:DI 0 ax [109])) sim2fitman_sup.cpp:695 89 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC56") [flags 0x2]  <var_decl 0x2adf29891260 *.LC56>)) sim2fitman_sup.cpp:696 89 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 5 di)
        (const_int 0 [0])) sim2fitman_sup.cpp:696 89 {*movdi_internal}
     (nil))
(call_insn 42 41 44 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x2adf29531a00 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:696 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 44 42 45 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg:DI 0 ax [110])) sim2fitman_sup.cpp:696 89 {*movdi_internal}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 45 44 46 4 135 "" [1 uses])
(note 46 45 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 48 46 49 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
            (const_int 0 [0]))) sim2fitman_sup.cpp:694 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 49 48 50 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 47)
            (pc))) sim2fitman_sup.cpp:694 596 {*jcc_1}
     (nil)
 -> 47)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
(note 50 49 51 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC57") [flags 0x2]  <var_decl 0x2adf298912f8 *.LC57>)) sim2fitman_sup.cpp:699 89 {*movdi_internal}
     (nil))
(call_insn 52 51 53 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:699 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 5 (set (reg:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])) sim2fitman_sup.cpp:700 89 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [111])) sim2fitman_sup.cpp:700 89 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC58") [flags 0x2]  <var_decl 0x2adf29891390 *.LC58>)) sim2fitman_sup.cpp:700 89 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:700 93 {*movqi_internal}
     (nil))
(call_insn 57 56 58 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:700 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 58 57 59 5 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:702 89 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (set (reg:SI 0 ax [orig:87 D.6480 ] [87])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [112])
                (const_int 8 [0x8])) [0 infile_struct_17(D)->file_size+0 S4 A64])) sim2fitman_sup.cpp:702 90 {*movsi_internal}
     (nil))
(insn 60 59 61 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:87 D.6480 ] [87])) sim2fitman_sup.cpp:702 90 {*movsi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC59") [flags 0x2]  <var_decl 0x2adf29891428 *.LC59>)) sim2fitman_sup.cpp:702 89 {*movdi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:702 93 {*movqi_internal}
     (nil))
(call_insn 63 62 64 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:702 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 64 63 65 5 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:703 89 {*movdi_internal}
     (nil))
(insn 65 64 66 5 (set (reg:SI 0 ax [orig:88 D.6480 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [113])
                (const_int 328 [0x148])) [0 procpar_info_6(D)->num_points+0 S4 A64])) sim2fitman_sup.cpp:703 90 {*movsi_internal}
     (nil))
(insn 66 65 67 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:88 D.6480 ] [88])) sim2fitman_sup.cpp:703 90 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC60") [flags 0x2]  <var_decl 0x2adf298914c0 *.LC60>)) sim2fitman_sup.cpp:703 89 {*movdi_internal}
     (nil))
(insn 68 67 69 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:703 93 {*movqi_internal}
     (nil))
(call_insn 69 68 70 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:703 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 70 69 71 5 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 71 70 131 5 (set (reg:DI 0 ax [orig:89 D.6481 ] [89])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [114])
                (const_int 24 [0x18])) [0 main_header_20(D)->ebytes.number+0 S8 A64])) sim2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 131 71 72 5 (set (reg:DI 1 dx [115])
        (reg:DI 0 ax [orig:89 D.6481 ] [89])) sim2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 72 131 73 5 (parallel [
            (set (reg:DI 1 dx [115])
                (lshiftrt:DI (reg:DI 1 dx [115])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:704 531 {*lshrdi3_1}
     (nil))
(insn 73 72 74 5 (parallel [
            (set (reg:DI 0 ax [116])
                (plus:DI (reg:DI 0 ax [orig:89 D.6481 ] [89])
                    (reg:DI 1 dx [115])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:704 221 {*adddi_1}
     (nil))
(insn 74 73 76 5 (parallel [
            (set (reg:DI 0 ax [117])
                (ashiftrt:DI (reg:DI 0 ax [116])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:704 532 {*ashrdi3_1}
     (nil))
(insn 76 74 77 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:90 D.6481 ] [90])) sim2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 77 76 78 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC61") [flags 0x2]  <var_decl 0x2adf29891558 *.LC61>)) sim2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 78 77 79 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:704 93 {*movqi_internal}
     (nil))
(call_insn 79 78 80 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:704 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 80 79 81 5 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:705 89 {*movdi_internal}
     (nil))
(insn 81 80 133 5 (set (reg:DI 0 ax [orig:91 D.6481 ] [91])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 24 [0x18])) [0 main_header_20(D)->ebytes.number+0 S8 A64])) sim2fitman_sup.cpp:705 89 {*movdi_internal}
     (nil))
(insn 133 81 82 5 (set (reg:DI 1 dx [119])
        (reg:DI 0 ax [orig:91 D.6481 ] [91])) sim2fitman_sup.cpp:705 89 {*movdi_internal}
     (nil))
(insn 82 133 83 5 (parallel [
            (set (reg:DI 1 dx [119])
                (lshiftrt:DI (reg:DI 1 dx [119])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:705 531 {*lshrdi3_1}
     (nil))
(insn 83 82 84 5 (parallel [
            (set (reg:DI 0 ax [120])
                (plus:DI (reg:DI 0 ax [orig:91 D.6481 ] [91])
                    (reg:DI 1 dx [119])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:705 221 {*adddi_1}
     (nil))
(insn 84 83 86 5 (parallel [
            (set (reg:DI 0 ax [121])
                (ashiftrt:DI (reg:DI 0 ax [120])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:705 532 {*ashrdi3_1}
     (nil))
(insn 86 84 87 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:92 D.6481 ] [92])) sim2fitman_sup.cpp:705 89 {*movdi_internal}
     (nil))
(insn 87 86 88 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC62") [flags 0x2]  <var_decl 0x2adf298915f0 *.LC62>)) sim2fitman_sup.cpp:705 89 {*movdi_internal}
     (nil))
(insn 88 87 89 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:705 93 {*movqi_internal}
     (nil))
(call_insn 89 88 90 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:705 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 90 89 91 5 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) sim2fitman_sup.cpp:707 89 {*movdi_internal}
     (nil))
(insn 91 90 92 5 (set (reg:SI 0 ax [orig:93 D.6480 ] [93])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [122])
                (const_int 328 [0x148])) [0 procpar_info_6(D)->num_points+0 S4 A64])) sim2fitman_sup.cpp:707 90 {*movsi_internal}
     (nil))
(insn 92 91 93 5 (set (reg:DI 1 dx [orig:94 D.6481 ] [94])
        (sign_extend:DI (reg:SI 0 ax [orig:93 D.6480 ] [93]))) sim2fitman_sup.cpp:707 142 {*extendsidi2_rex64}
     (nil))
(insn 93 92 94 5 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) sim2fitman_sup.cpp:707 89 {*movdi_internal}
     (nil))
(insn 94 93 95 5 (set (reg:DI 0 ax [orig:95 D.6481 ] [95])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [123])
                (const_int 24 [0x18])) [0 main_header_20(D)->ebytes.number+0 S8 A64])) sim2fitman_sup.cpp:707 89 {*movdi_internal}
     (nil))
(insn 95 94 96 5 (parallel [
            (set (reg:DI 0 ax [orig:96 D.6481 ] [96])
                (mult:DI (reg:DI 0 ax [orig:95 D.6481 ] [95])
                    (reg:DI 1 dx [orig:94 D.6481 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:707 307 {*muldi3_1}
     (nil))
(insn 96 95 97 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:96 D.6481 ] [96])) sim2fitman_sup.cpp:707 89 {*movdi_internal}
     (nil))
(insn 97 96 98 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC63") [flags 0x2]  <var_decl 0x2adf29891688 *.LC63>)) sim2fitman_sup.cpp:707 89 {*movdi_internal}
     (nil))
(insn 98 97 99 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:707 93 {*movqi_internal}
     (nil))
(call_insn 99 98 100 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:707 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 100 99 101 5 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:708 89 {*movdi_internal}
     (nil))
(insn 101 100 102 5 (set (reg:SI 0 ax [orig:97 D.6480 ] [97])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 4 [0x4])) [0 infile_struct_17(D)->num_unsup_sets+0 S4 A32])) sim2fitman_sup.cpp:708 90 {*movsi_internal}
     (nil))
(insn 102 101 103 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:97 D.6480 ] [97])) sim2fitman_sup.cpp:708 90 {*movsi_internal}
     (nil))
(insn 103 102 104 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC64") [flags 0x2]  <var_decl 0x2adf29891720 *.LC64>)) sim2fitman_sup.cpp:708 89 {*movdi_internal}
     (nil))
(insn 104 103 105 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:708 93 {*movqi_internal}
     (nil))
(call_insn 105 104 106 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:708 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 106 105 107 5 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:710 89 {*movdi_internal}
     (nil))
(insn 107 106 108 5 (set (reg:SI 1 dx [orig:98 D.6480 ] [98])
        (mem/j:SI (reg/f:DI 0 ax [125]) [0 infile_struct_17(D)->num_datasets+0 S4 A64])) sim2fitman_sup.cpp:710 90 {*movsi_internal}
     (nil))
(insn 108 107 109 5 (set (reg/f:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:710 89 {*movdi_internal}
     (nil))
(insn 109 108 110 5 (set (reg:SI 0 ax [orig:99 D.6480 ] [99])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [126])
                (const_int 4 [0x4])) [0 infile_struct_17(D)->num_unsup_sets+0 S4 A32])) sim2fitman_sup.cpp:710 90 {*movsi_internal}
     (nil))
(insn 110 109 136 5 (parallel [
            (set (reg:SI 1 dx [orig:100 D.6480 ] [100])
                (minus:SI (reg:SI 1 dx [orig:100 D.6480 ] [100])
                    (reg:SI 0 ax [orig:99 D.6480 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:710 263 {*subsi_1}
     (nil))
(insn 136 110 111 5 (set (reg:SI 0 ax [orig:100 D.6480 ] [100])
        (reg:SI 1 dx [orig:100 D.6480 ] [100])) sim2fitman_sup.cpp:710 90 {*movsi_internal}
     (nil))
(insn 111 136 112 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:100 D.6480 ] [100])) sim2fitman_sup.cpp:710 90 {*movsi_internal}
     (nil))
(insn 112 111 113 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC65") [flags 0x2]  <var_decl 0x2adf298917b8 *.LC65>)) sim2fitman_sup.cpp:710 89 {*movdi_internal}
     (nil))
(insn 113 112 114 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:710 93 {*movqi_internal}
     (nil))
(call_insn 114 113 115 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:710 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 115 114 116 5 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) sim2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(insn 116 115 117 5 (set (reg:SI 0 ax [orig:101 D.6480 ] [101])
        (mem/j:SI (reg/f:DI 0 ax [127]) [0 infile_struct_17(D)->num_datasets+0 S4 A64])) sim2fitman_sup.cpp:711 90 {*movsi_internal}
     (nil))
(insn 117 116 118 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:101 D.6480 ] [101])) sim2fitman_sup.cpp:711 90 {*movsi_internal}
     (nil))
(insn 118 117 119 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC66") [flags 0x2]  <var_decl 0x2adf29891850 *.LC66>)) sim2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(insn 119 118 120 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:711 93 {*movqi_internal}
     (nil))
(call_insn 120 119 121 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:711 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 121 120 122 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC57") [flags 0x2]  <var_decl 0x2adf298912f8 *.LC57>)) sim2fitman_sup.cpp:712 89 {*movdi_internal}
     (nil))
(call_insn 122 121 123 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:712 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 123 122 124 5 (set (reg:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])) sim2fitman_sup.cpp:714 89 {*movdi_internal}
     (nil))
(insn 124 123 125 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [128])) sim2fitman_sup.cpp:714 89 {*movdi_internal}
     (nil))
(call_insn 125 124 130 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2adf29319000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) sim2fitman_sup.cpp:714 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 130 125 0 NOTE_INSN_DELETED)

;; Function void print_version() (_Z13print_versionv, funcdef_no=14, decl_uid=5417, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rzw {*call_value}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void print_version()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={5d,1u} r1={4d} r2={4d} r4={5d,1u} r5={7d,3u} r6={1d,2u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} 
;;    total ref usage 240{227d,13u,0e} in 8{5 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC67") [flags 0x2]  <var_decl 0x2adf29891e40 *.LC67>)) sim2fitman_sup.cpp:722 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC68") [flags 0x2]  <var_decl 0x2adf29891ed8 *.LC68>)) sim2fitman_sup.cpp:722 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:722 93 {*movqi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:722 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC69") [flags 0x2]  <var_decl 0x2adf2989d000 *.LC69>)) sim2fitman_sup.cpp:723 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:723 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC70") [flags 0x2]  <var_decl 0x2adf2989d098 *.LC70>)) sim2fitman_sup.cpp:724 89 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2adf292fc900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:724 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 15 12 0 NOTE_INSN_DELETED)

;; Function void close_infiles(FILE**) (_Z13close_infilesPP8_IO_FILE, funcdef_no=15, decl_uid=5419, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 23
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 29:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
  BB 6
   Insn 34: point = 0
   Insn 33: point = 0
  BB 2
   Insn 38: point = 0
   Insn 6: point = 0
   Insn 2: point = 0
  BB 5
   Insn 29: point = 0
  BB 4
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 24: point = 1
   Insn 23: point = 3
   Insn 22: point = 5
   Insn 21: point = 6
   Insn 20: point = 8
   Insn 19: point = 10
  BB 3
   Insn 17: point = 11
   Insn 16: point = 11
   Insn 15: point = 12
   Insn 14: point = 14
   Insn 13: point = 16
   Insn 12: point = 17
   Insn 11: point = 19
   Insn 10: point = 21
 r83: [18..19]
 r84: [15..17]
 r85: [13..14]
 r86: [11..12]
 r87: [7..8]
 r88: [4..6]
 r89: [2..3]
 r90: [0..1]
 r91: [20..21]
 r92: [15..16]
 r93: [9..10]
 r94: [4..5]
Compressing live ranges: from 22 to 20 - 90%
Ranges after the compression:
 r83: [16..17]
 r84: [14..15]
 r85: [12..13]
 r86: [10..11]
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [0..1]
 r91: [18..19]
 r92: [14..15]
 r93: [8..9]
 r94: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 26.


void close_infiles(FILE**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,10u} r1={4d,2u,2e} r2={2d} r4={2d} r5={3d,2u} r6={1d,16u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={8d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 151{106d,41u,4e} in 22{21 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
        (reg:DI 5 di [ in_file ])) sim2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 38 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:734 90 {*movsi_internal}
     (nil))
(jump_insn 38 6 39 2 (set (pc)
        (label_ref 30)) sim2fitman_sup.cpp:734 636 {jump}
     (nil)
 -> 30)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 39 38 32)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 91 92
(code_label 32 39 9 3 141 "" [1 uses])
(note 9 32 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:735 90 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:DI 0 ax [orig:83 D.6497 ] [83])
        (sign_extend:DI (reg:SI 0 ax [91]))) sim2fitman_sup.cpp:735 142 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 3 (parallel [
            (set (reg:DI 1 dx [orig:84 D.6497 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 D.6497 ] [83])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:735 497 {*ashldi3_1}
     (nil))
(insn 13 12 14 3 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) sim2fitman_sup.cpp:735 89 {*movdi_internal}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.6498 ] [85])
                (plus:DI (reg/f:DI 0 ax [92])
                    (reg:DI 1 dx [orig:84 D.6497 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:735 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.6497 ] [84]))
        (nil)))
(insn 15 14 16 3 (set (reg/f:DI 0 ax [orig:86 D.6499 ] [86])
        (mem/f:DI (reg/f:DI 0 ax [orig:85 D.6498 ] [85]) [0 *_6+0 S8 A64])) sim2fitman_sup.cpp:735 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:86 D.6499 ] [86])
            (const_int 0 [0]))) sim2fitman_sup.cpp:735 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) sim2fitman_sup.cpp:735 596 {*jcc_1}
     (nil)
 -> 27)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87 88 89 90 93 94
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:736 90 {*movsi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:DI 0 ax [orig:87 D.6497 ] [87])
        (sign_extend:DI (reg:SI 0 ax [93]))) sim2fitman_sup.cpp:736 142 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg:DI 1 dx [orig:88 D.6497 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.6497 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:736 497 {*ashldi3_1}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) sim2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.6498 ] [89])
                (plus:DI (reg/f:DI 0 ax [94])
                    (reg:DI 1 dx [orig:88 D.6497 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:736 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.6497 ] [88]))
        (nil)))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [orig:90 D.6499 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [orig:89 D.6498 ] [89]) [0 *_10+0 S8 A64])) sim2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 D.6499 ] [90])) sim2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(call_insn 26 25 27 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2adf294b0900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:736 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 27 26 28 5 140 "" [1 uses])
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:734 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 30 29 31 6 139 "" [1 uses])
(note 31 30 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 31 34 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) sim2fitman_sup.cpp:734 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) sim2fitman_sup.cpp:734 596 {*jcc_1}
     (nil)
 -> 32)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 35 34 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 40 35 0 NOTE_INSN_DELETED)

;; Function void printHex(char*, int) (_Z8printHexPci, funcdef_no=16, decl_uid=5422, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 16
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 28:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rzw {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 37: point = 0
   Insn 36: point = 0
  BB 4
   Insn 34: point = 0
   Insn 33: point = 0
   Insn 32: point = 1
  BB 2
   Insn 40: point = 2
   Insn 9: point = 2
   Insn 8: point = 2
   Insn 7: point = 3
   Insn 3: point = 4
   Insn 2: point = 4
  BB 3
   Insn 28: point = 4
   Insn 27: point = 4
   Insn 26: point = 4
   Insn 25: point = 4
   Insn 24: point = 4
   Insn 23: point = 5
   Insn 22: point = 6
   Insn 21: point = 8
   Insn 20: point = 9
   Insn 19: point = 11
   Insn 18: point = 12
   Insn 17: point = 14
   Insn 16: point = 16
   Insn 15: point = 18
   Insn 14: point = 19
   Insn 13: point = 21
 r83: [17..19]
 r84: [15..16]
 r85: [13..14]
 r86: [5..12]
 r87: [7..9]
 r88: [4..6]
 r89: [2..3]
 r90: [20..21]
 r91: [17..18]
 r92: [10..11]
 r93: [7..8]
 r94: [0..1]
Compressing live ranges: from 22 to 18 - 81%
Ranges after the compression:
 r83: [14..15]
 r84: [12..13]
 r85: [10..11]
 r86: [4..9]
 r87: [6..7]
 r88: [4..5]
 r89: [2..3]
 r90: [16..17]
 r91: [14..15]
 r92: [8..9]
 r93: [6..7]
 r94: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 23
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 7
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 32
changing reg in insn 33
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 37.


void printHex(char*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,8u} r1={7d,4u,1e} r2={5d,2u,1e} r4={4d,2u} r5={5d,3u} r6={1d,18u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={6d,1u} r18={2d} r19={2d} r20={1d,1u,2e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 225{175d,46u,4e} in 27{25 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 89
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])
        (reg:DI 5 di [ theThing ])) sim2fitman_sup.cpp:744 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
        (reg:SI 4 si [ size ])) sim2fitman_sup.cpp:744 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])) sim2fitman_sup.cpp:747 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])
        (reg/f:DI 0 ax [89])) sim2fitman_sup.cpp:747 89 {*movdi_internal}
     (nil))
(insn 9 8 40 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) sim2fitman_sup.cpp:748 90 {*movsi_internal}
     (nil))
(jump_insn 40 9 41 2 (set (pc)
        (label_ref 29)) sim2fitman_sup.cpp:748 636 {jump}
     (nil)
 -> 29)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 41 40 31)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 87 88 90 91 92 93
(code_label 31 41 12 3 144 "" [1 uses])
(note 12 31 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:SI 0 ax [90])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:749 90 {*movsi_internal}
     (nil))
(insn 14 13 15 3 (set (reg:DI 1 dx [orig:83 D.6500 ] [83])
        (sign_extend:DI (reg:SI 0 ax [90]))) sim2fitman_sup.cpp:749 142 {*extendsidi2_rex64}
     (nil))
(insn 15 14 16 3 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])) sim2fitman_sup.cpp:749 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg/f:DI 0 ax [orig:84 D.6501 ] [84])
                (plus:DI (reg/f:DI 0 ax [91])
                    (reg:DI 1 dx [orig:83 D.6500 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:749 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])
            (reg:DI 1 dx [orig:83 D.6500 ] [83]))
        (nil)))
(insn 17 16 18 3 (set (reg:QI 0 ax [orig:85 D.6502 ] [85])
        (mem:QI (reg/f:DI 0 ax [orig:84 D.6501 ] [84]) [0 *_7+0 S1 A8])) sim2fitman_sup.cpp:749 93 {*movqi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 ax [orig:86 D.6503 ] [86])
        (sign_extend:SI (reg:QI 0 ax [orig:85 D.6502 ] [85]))) sim2fitman_sup.cpp:749 148 {extendqisi2}
     (nil))
(insn 19 18 20 3 (set (reg:SI 1 dx [92])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:749 90 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 2 cx [orig:87 D.6500 ] [87])
        (sign_extend:DI (reg:SI 1 dx [92]))) sim2fitman_sup.cpp:749 142 {*extendsidi2_rex64}
     (nil))
(insn 21 20 22 3 (set (reg/f:DI 1 dx [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])) sim2fitman_sup.cpp:749 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg/f:DI 2 cx [orig:88 D.6501 ] [88])
                (plus:DI (reg:DI 2 cx [orig:87 D.6500 ] [87])
                    (reg/f:DI 1 dx [93])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:749 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])
            (reg:DI 2 cx [orig:87 D.6500 ] [87]))
        (nil)))
(insn 23 22 24 3 (set (reg:SI 1 dx)
        (reg:SI 0 ax [orig:86 D.6503 ] [86])) sim2fitman_sup.cpp:749 90 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:88 D.6501 ] [88])) sim2fitman_sup.cpp:749 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC71") [flags 0x2]  <var_decl 0x2adf2989ded8 *.LC71>)) sim2fitman_sup.cpp:749 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) sim2fitman_sup.cpp:749 93 {*movqi_internal}
     (nil))
(call_insn 27 26 28 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2adf292f9e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:749 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 28 27 29 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sim2fitman_sup.cpp:748 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94
(code_label 29 28 30 4 143 "" [1 uses])
(note 30 29 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 30 33 4 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) sim2fitman_sup.cpp:748 90 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [94])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32]))) sim2fitman_sup.cpp:748 7 {*cmpsi_1}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) sim2fitman_sup.cpp:748 596 {*jcc_1}
     (nil)
 -> 31)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg:SI 5 di)
        (const_int 10 [0xa])) sim2fitman_sup.cpp:752 90 {*movsi_internal}
     (nil))
(call_insn 37 36 42 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x2adf292fc300 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) sim2fitman_sup.cpp:752 649 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 42 37 0 NOTE_INSN_DELETED)
