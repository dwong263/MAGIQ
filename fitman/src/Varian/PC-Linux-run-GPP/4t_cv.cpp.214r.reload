
;; Function int main(int, char**) (main, funcdef_no=2, decl_uid=5399, symbol_order=2)

      Creating newreg=386
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
      Creating newreg=387
Removing SCRATCH in insn #635 (nop 3)
rescanning insn with uid = 635.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=2880, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=2848, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r386
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 67:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 87:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 99:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 112:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 113
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=388, assigning class GENERAL_REGS to r388
  113: {r194:DI=r193:DI+r388:DI;clobber flags:CC;}
      REG_DEAD r193:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  668: r388:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r388
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 114:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 116:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 119:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=389, assigning class GENERAL_REGS to r389
  120: {r200:DI=r199:DI+r389:DI;clobber flags:CC;}
      REG_DEAD r199:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  669: r389:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r389
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 121:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 123:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 126:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=390, assigning class GENERAL_REGS to r390
  127: {r206:DI=r205:DI+r390:DI;clobber flags:CC;}
      REG_DEAD r205:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  670: r390:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r390
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 132:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 133
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=391, assigning class GENERAL_REGS to r391
  133: {r211:DI=r210:DI+r391:DI;clobber flags:CC;}
      REG_DEAD r210:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  671: r391:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r391
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 138:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 139
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=392, assigning class GENERAL_REGS to r392
  139: {r216:DI=r215:DI+r392:DI;clobber flags:CC;}
      REG_DEAD r215:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  672: r392:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r392
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 140:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 141:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 142:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 145:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 146
	 Choosing alt 0 in insn 146:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=393, assigning class GENERAL_REGS to r393
  146: {r222:DI=r221:DI+r393:DI;clobber flags:CC;}
      REG_DEAD r221:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  673: r393:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r393
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 147:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 148:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 149:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 152:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=394, assigning class GENERAL_REGS to r394
  153: {r228:DI=r227:DI+r394:DI;clobber flags:CC;}
      REG_DEAD r227:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  674: r394:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r394
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 156:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 159:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 160
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=395, assigning class GENERAL_REGS to r395
  160: {r234:DI=r233:DI+r395:DI;clobber flags:CC;}
      REG_DEAD r233:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  675: r395:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 675:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r395
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 161:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 163:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 166:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 167
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=396, assigning class GENERAL_REGS to r396
  167: {r240:DI=r239:DI+r396:DI;clobber flags:CC;}
      REG_DEAD r239:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  676: r396:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 676:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r396
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 170:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 173:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 174
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=397, assigning class GENERAL_REGS to r397
  174: {r246:DI=r245:DI+r397:DI;clobber flags:CC;}
      REG_DEAD r245:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  677: r397:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r397
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 175:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 177:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 180:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 181
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=398, assigning class GENERAL_REGS to r398
  181: {r252:DI=r251:DI+r398:DI;clobber flags:CC;}
      REG_DEAD r251:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  678: r398:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r398
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 182:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 184:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 187:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 188
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=399, assigning class GENERAL_REGS to r399
  188: {r258:DI=r257:DI+r399:DI;clobber flags:CC;}
      REG_DEAD r257:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  679: r399:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r399
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 189:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 191:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 194:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 195
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=400, assigning class GENERAL_REGS to r400
  195: {r264:DI=r263:DI+r400:DI;clobber flags:CC;}
      REG_DEAD r263:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  680: r400:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r400
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 196:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 198:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 201:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=401, assigning class GENERAL_REGS to r401
  202: {r270:DI=r269:DI+r401:DI;clobber flags:CC;}
      REG_DEAD r269:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  681: r401:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r401
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 203:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 205:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 208:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 209
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=402, assigning class GENERAL_REGS to r402
  209: {r276:DI=r275:DI+r402:DI;clobber flags:CC;}
      REG_DEAD r275:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  682: r402:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 682:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r402
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 210:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 212:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 215:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 216
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=403, assigning class GENERAL_REGS to r403
  216: {r282:DI=r281:DI+r403:DI;clobber flags:CC;}
      REG_DEAD r281:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  683: r403:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 683:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r403
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 217:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 218:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 219:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 222:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=404, assigning class GENERAL_REGS to r404
  223: {r288:DI=r287:DI+r404:DI;clobber flags:CC;}
      REG_DEAD r287:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  684: r404:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 684:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r404
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 224:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 226:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 227:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 238:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 241:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 242
	 Choosing alt 0 in insn 242:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 244:  (0) r  (1) i {*movdi_internal}
      Creating newreg=405, assigning class GENERAL_REGS to r405
  244: r405:DI=0x2065746144206f4e
    Inserting insn reload after:
  685: [r97:DI]=r405:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 685:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 245:  (0) r  (1) i {*movdi_internal}
      Creating newreg=406, assigning class GENERAL_REGS to r406
  245: r406:DI=0x6c62616c69617641
    Inserting insn reload after:
  686: [r97:DI+0x8]=r406:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 686:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 247:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 249:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 250:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 254:  (0) r  (1) i {*movdi_internal}
      Creating newreg=407, assigning class GENERAL_REGS to r407
  254: r407:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  687: [r98:DI]=r407:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 687:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
	 Choosing alt 4 in insn 255:  (0) r  (1) i {*movdi_internal}
      Creating newreg=408, assigning class GENERAL_REGS to r408
  255: r408:DI=0x6961764120656d61
    Inserting insn reload after:
  688: [r98:DI+0x8]=r408:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 688:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 256:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 258:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 265:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 266:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 268:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 269:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 270:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 278:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 279:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 280:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 288:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 289:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 290:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 297:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 306:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 312:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 316:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 317:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 319:  (0) r  (1) rem {*movdi_internal} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 320:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 321:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 322:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 323:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 327:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 329:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-32)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 331:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (1) rzw {*call_value} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-48)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 341:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 349
	 Choosing alt 0 in insn 349:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 351:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) rm  (1) rn {*cmphi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 355:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 361:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 363:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 365
	 Choosing alt 0 in insn 365:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 370:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
          alt=1,overall=7,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=2,overall=16,losers=2 -- refuse
	 Choosing alt 1 in insn 374:  (0) x  (1) r {*floatdisf2_sse}
      Creating newreg=409 from oldreg=123, assigning class SSE_REGS to r409
  374: r409:SF=float(r122:DI)
      REG_DEAD r122:DI
    Inserting insn reload after:
  689: r123:SF=r409:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 689:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 375:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 376:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 381:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 382:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 383
	 Choosing alt 0 in insn 383:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 387:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 398
	 Choosing alt 0 in insn 398:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 399:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 400:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 406:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 408
	 Choosing alt 0 in insn 408:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 409:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 410:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 416:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 417:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 418
	 Choosing alt 0 in insn 418:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 419:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 420:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) rm  (1) rn {*cmphi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 425:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 435
	 Choosing alt 0 in insn 435:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 440:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 443:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 444:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 445:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 450:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 451:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 452
	 Choosing alt 0 in insn 452:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 456:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 460:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 464:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 466:  (0) r  (1) rm {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 469:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 471:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 472:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 473:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 474:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 475:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 482:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 484:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 488:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 490:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 497:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 500:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 504:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 506
	 Choosing alt 0 in insn 506:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 507:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 510:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 511:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 512
	 Choosing alt 0 in insn 512:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 513:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 517:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 519:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 520:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 523:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) rzw {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 532:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 534:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 538:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 540:  (0) r  (1) rm {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 543:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 545:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 548:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 549:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (1) rzw {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 551:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 552:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 554:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 555:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (1) rzw {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 557:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 559:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 565:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 569:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 571:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 576:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 580:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 582:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 585:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 588:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 595:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 598:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 603:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 606:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 610:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 613:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 616:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 621:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) rzw {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 624:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) rzw {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r387
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) rzw {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50

********** Pseudo live ranges #1: **********

  BB 3
   Insn 44: point = 0
   Insn 43: point = 0
   Insn 42: point = 0
   Insn 41: point = 0
   Insn 40: point = 0
   Insn 39: point = 0
   Insn 38: point = 0
   Insn 37: point = 0
   Insn 36: point = 0
   Insn 35: point = 0
   Insn 34: point = 0
   Insn 33: point = 0
   Insn 32: point = 0
   Insn 31: point = 0
   Insn 30: point = 0
   Insn 29: point = 0
   Insn 28: point = 0
   Insn 27: point = 0
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 23: point = 0
   Insn 22: point = 0
   Insn 21: point = 0
   Insn 20: point = 0
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 17: point = 0
   Insn 16: point = 0
   Insn 15: point = 0
  BB 49
   Insn 637: point = 0
  BB 50
   Insn 640: point = 0
  BB 48
   Insn 636: point = 0
   Insn 635: point = 0
   Insn 634: point = 1
   Insn 630: point = 2
   Insn 627: point = 4
   Insn 626: point = 5
   Insn 625: point = 5
   Insn 624: point = 6
   Insn 623: point = 7
   Insn 622: point = 7
   Insn 621: point = 8
  BB 47
   Insn 618: point = 9
   Insn 617: point = 9
   Insn 616: point = 10
   Insn 615: point = 11
   Insn 614: point = 11
   Insn 613: point = 12
  BB 46
   Insn 611: point = 13
   Insn 610: point = 13
   Insn 609: point = 14
   Insn 608: point = 15
   Insn 607: point = 15
   Insn 606: point = 16
   Insn 605: point = 17
   Insn 604: point = 17
   Insn 603: point = 18
  BB 45
   Insn 600: point = 19
   Insn 599: point = 19
   Insn 598: point = 20
   Insn 597: point = 21
   Insn 596: point = 21
   Insn 595: point = 22
  BB 44
   Insn 593: point = 23
   Insn 592: point = 23
   Insn 591: point = 24
   Insn 590: point = 25
   Insn 589: point = 25
   Insn 588: point = 26
   Insn 587: point = 27
   Insn 586: point = 27
   Insn 585: point = 28
  BB 43
   Insn 583: point = 29
   Insn 582: point = 29
   Insn 580: point = 30
   Insn 579: point = 32
  BB 39
   Insn 665: point = 33
   Insn 559: point = 33
   Insn 558: point = 33
   Insn 557: point = 33
   Insn 556: point = 33
   Insn 555: point = 33
   Insn 554: point = 33
   Insn 553: point = 33
   Insn 552: point = 34
   Insn 551: point = 36
   Insn 550: point = 37
   Insn 549: point = 37
   Insn 548: point = 37
   Insn 547: point = 37
   Insn 546: point = 38
   Insn 545: point = 40
   Insn 544: point = 41
   Insn 543: point = 41
  BB 38
   Insn 541: point = 41
   Insn 540: point = 41
   Insn 538: point = 42
   Insn 537: point = 44
  BB 35
   Insn 663: point = 45
   Insn 484: point = 45
   Insn 483: point = 45
   Insn 482: point = 45
   Insn 481: point = 45
   Insn 480: point = 45
   Insn 479: point = 46
   Insn 478: point = 47
   Insn 477: point = 48
   Insn 476: point = 49
   Insn 475: point = 50
   Insn 474: point = 51
   Insn 473: point = 52
   Insn 472: point = 53
   Insn 471: point = 54
   Insn 470: point = 55
   Insn 469: point = 55
  BB 34
   Insn 467: point = 55
   Insn 466: point = 55
   Insn 464: point = 56
   Insn 463: point = 58
  BB 21
   Insn 654: point = 59
   Insn 341: point = 59
   Insn 340: point = 59
   Insn 339: point = 59
   Insn 338: point = 59
   Insn 337: point = 60
   Insn 336: point = 61
   Insn 335: point = 62
   Insn 334: point = 63
   Insn 333: point = 64
   Insn 332: point = 65
   Insn 331: point = 66
   Insn 330: point = 67
   Insn 329: point = 68
   Insn 328: point = 69
   Insn 327: point = 70
   Insn 326: point = 71
   Insn 325: point = 72
   Insn 324: point = 73
   Insn 323: point = 74
   Insn 322: point = 75
   Insn 321: point = 76
   Insn 320: point = 77
   Insn 319: point = 78
   Insn 318: point = 79
   Insn 317: point = 80
   Insn 316: point = 81
  BB 19
   Insn 652: point = 81
   Insn 307: point = 81
   Insn 306: point = 81
  BB 20
   Insn 313: point = 81
   Insn 312: point = 81
  BB 18
   Insn 304: point = 81
   Insn 303: point = 81
   Insn 302: point = 82
   Insn 301: point = 83
   Insn 300: point = 84
   Insn 299: point = 85
   Insn 298: point = 85
   Insn 297: point = 85
  BB 17
   Insn 294: point = 85
   Insn 293: point = 85
   Insn 292: point = 86
   Insn 291: point = 87
   Insn 290: point = 89
   Insn 289: point = 90
   Insn 288: point = 92
  BB 16
   Insn 286: point = 93
   Insn 285: point = 93
   Insn 284: point = 94
   Insn 283: point = 95
   Insn 282: point = 95
   Insn 281: point = 96
   Insn 280: point = 97
   Insn 279: point = 98
   Insn 278: point = 100
   Insn 277: point = 101
   Insn 276: point = 101
   Insn 275: point = 102
   Insn 274: point = 103
   Insn 273: point = 104
   Insn 272: point = 105
   Insn 271: point = 106
   Insn 270: point = 107
   Insn 269: point = 108
   Insn 268: point = 109
   Insn 267: point = 110
   Insn 266: point = 111
   Insn 265: point = 112
  BB 15
   Insn 263: point = 113
   Insn 262: point = 113
  BB 13
   Insn 650: point = 113
   Insn 234: point = 113
  BB 12
   Insn 232: point = 113
   Insn 231: point = 113
  BB 10
   Insn 648: point = 113
   Insn 106: point = 113
  BB 9
   Insn 104: point = 113
   Insn 103: point = 113
  BB 7
   Insn 646: point = 113
   Insn 73: point = 113
   Insn 72: point = 113
   Insn 71: point = 114
   Insn 70: point = 115
   Insn 69: point = 115
   Insn 68: point = 116
   Insn 67: point = 117
   Insn 66: point = 118
   Insn 65: point = 119
   Insn 64: point = 119
   Insn 63: point = 120
  BB 5
   Insn 644: point = 121
   Insn 55: point = 121
  BB 6
   Insn 60: point = 121
  BB 4
   Insn 53: point = 121
   Insn 52: point = 121
   Insn 51: point = 122
   Insn 50: point = 123
   Insn 49: point = 124
   Insn 48: point = 125
  BB 2
   Insn 13: point = 125
   Insn 12: point = 125
   Insn 11: point = 125
   Insn 10: point = 125
   Insn 9: point = 125
   Insn 8: point = 125
   Insn 5: point = 125
   Insn 3: point = 127
   Insn 2: point = 127
  BB 8
   Insn 99: point = 127
   Insn 98: point = 127
   Insn 97: point = 128
   Insn 96: point = 130
   Insn 95: point = 131
   Insn 94: point = 131
   Insn 93: point = 132
   Insn 92: point = 133
   Insn 91: point = 135
   Insn 90: point = 136
   Insn 89: point = 138
   Insn 88: point = 140
   Insn 87: point = 141
   Insn 86: point = 142
   Insn 85: point = 144
   Insn 84: point = 145
   Insn 83: point = 145
   Insn 82: point = 146
   Insn 81: point = 147
   Insn 80: point = 149
   Insn 79: point = 150
   Insn 78: point = 152
   Insn 77: point = 154
  BB 11
   Insn 227: point = 155
   Insn 226: point = 155
   Insn 225: point = 156
   Insn 224: point = 157
   Insn 223: point = 159
   Insn 684: point = 161
   Insn 222: point = 162
   Insn 221: point = 164
   Insn 220: point = 166
   Insn 219: point = 167
   Insn 218: point = 168
   Insn 217: point = 169
   Insn 216: point = 171
   Insn 683: point = 173
   Insn 215: point = 174
   Insn 214: point = 176
   Insn 213: point = 178
   Insn 212: point = 179
   Insn 211: point = 180
   Insn 210: point = 181
   Insn 209: point = 183
   Insn 682: point = 185
   Insn 208: point = 186
   Insn 207: point = 188
   Insn 206: point = 190
   Insn 205: point = 191
   Insn 204: point = 192
   Insn 203: point = 193
   Insn 202: point = 195
   Insn 681: point = 197
   Insn 201: point = 198
   Insn 200: point = 200
   Insn 199: point = 202
   Insn 198: point = 203
   Insn 197: point = 204
   Insn 196: point = 205
   Insn 195: point = 207
   Insn 680: point = 209
   Insn 194: point = 210
   Insn 193: point = 212
   Insn 192: point = 214
   Insn 191: point = 215
   Insn 190: point = 216
   Insn 189: point = 217
   Insn 188: point = 219
   Insn 679: point = 221
   Insn 187: point = 222
   Insn 186: point = 224
   Insn 185: point = 226
   Insn 184: point = 227
   Insn 183: point = 228
   Insn 182: point = 229
   Insn 181: point = 231
   Insn 678: point = 233
   Insn 180: point = 234
   Insn 179: point = 236
   Insn 178: point = 238
   Insn 177: point = 239
   Insn 176: point = 240
   Insn 175: point = 241
   Insn 174: point = 243
   Insn 677: point = 245
   Insn 173: point = 246
   Insn 172: point = 248
   Insn 171: point = 250
   Insn 170: point = 251
   Insn 169: point = 252
   Insn 168: point = 253
   Insn 167: point = 255
   Insn 676: point = 257
   Insn 166: point = 258
   Insn 165: point = 260
   Insn 164: point = 262
   Insn 163: point = 263
   Insn 162: point = 264
   Insn 161: point = 265
   Insn 160: point = 267
   Insn 675: point = 269
   Insn 159: point = 270
   Insn 158: point = 272
   Insn 157: point = 274
   Insn 156: point = 275
   Insn 155: point = 276
   Insn 154: point = 277
   Insn 153: point = 279
   Insn 674: point = 281
   Insn 152: point = 282
   Insn 151: point = 284
   Insn 150: point = 286
   Insn 149: point = 287
   Insn 148: point = 288
   Insn 147: point = 289
   Insn 146: point = 291
   Insn 673: point = 293
   Insn 145: point = 294
   Insn 144: point = 296
   Insn 143: point = 298
   Insn 142: point = 299
   Insn 141: point = 300
   Insn 140: point = 301
   Insn 139: point = 303
   Insn 672: point = 305
   Insn 138: point = 306
   Insn 137: point = 308
   Insn 136: point = 310
   Insn 135: point = 311
   Insn 134: point = 312
   Insn 133: point = 314
   Insn 671: point = 316
   Insn 132: point = 317
   Insn 131: point = 319
   Insn 130: point = 321
   Insn 129: point = 322
   Insn 128: point = 323
   Insn 127: point = 325
   Insn 670: point = 327
   Insn 126: point = 328
   Insn 125: point = 330
   Insn 124: point = 332
   Insn 123: point = 333
   Insn 122: point = 334
   Insn 121: point = 335
   Insn 120: point = 337
   Insn 669: point = 339
   Insn 119: point = 340
   Insn 118: point = 342
   Insn 117: point = 344
   Insn 116: point = 345
   Insn 115: point = 346
   Insn 114: point = 347
   Insn 113: point = 349
   Insn 668: point = 351
   Insn 112: point = 352
   Insn 111: point = 354
   Insn 110: point = 356
  BB 14
   Insn 258: point = 357
   Insn 257: point = 357
   Insn 256: point = 358
   Insn 688: point = 358
   Insn 255: point = 359
   Insn 687: point = 360
   Insn 254: point = 361
   Insn 253: point = 362
   Insn 252: point = 364
   Insn 251: point = 366
   Insn 250: point = 368
   Insn 249: point = 370
   Insn 248: point = 372
   Insn 247: point = 373
   Insn 246: point = 374
   Insn 686: point = 375
   Insn 245: point = 376
   Insn 685: point = 377
   Insn 244: point = 378
   Insn 243: point = 379
   Insn 242: point = 381
   Insn 241: point = 383
   Insn 240: point = 385
   Insn 239: point = 387
   Insn 238: point = 388
  BB 33
   Insn 460: point = 389
  BB 26
   Insn 659: point = 389
  BB 25
   Insn 388: point = 389
   Insn 387: point = 389
   Insn 385: point = 390
   Insn 384: point = 392
   Insn 383: point = 394
   Insn 382: point = 396
   Insn 381: point = 397
   Insn 380: point = 399
   Insn 379: point = 401
  BB 23
   Insn 656: point = 402
   Insn 355: point = 402
  BB 24
   Insn 376: point = 402
   Insn 375: point = 402
   Insn 689: point = 403
	Hard reg 0 is preferable by r409 with profit 1
   Insn 374: point = 405
   Insn 373: point = 407
   Insn 372: point = 409
   Insn 371: point = 411
   Insn 370: point = 413
   Insn 369: point = 415
   Insn 368: point = 416
   Insn 367: point = 418
   Insn 366: point = 420
   Insn 365: point = 421
   Insn 364: point = 423
   Insn 363: point = 425
   Insn 362: point = 427
   Insn 361: point = 428
   Insn 360: point = 430
   Insn 359: point = 432
  BB 32
   Insn 457: point = 433
   Insn 456: point = 433
   Insn 454: point = 434
   Insn 453: point = 436
   Insn 452: point = 438
   Insn 451: point = 440
   Insn 450: point = 441
   Insn 449: point = 443
   Insn 448: point = 445
  BB 30
   Insn 661: point = 446
   Insn 425: point = 446
  BB 29
   Insn 422: point = 446
   Insn 421: point = 446
   Insn 420: point = 447
   Insn 419: point = 449
   Insn 418: point = 451
   Insn 417: point = 453
   Insn 416: point = 454
   Insn 415: point = 456
   Insn 414: point = 458
  BB 28
   Insn 412: point = 459
   Insn 411: point = 459
   Insn 410: point = 460
   Insn 409: point = 462
   Insn 408: point = 464
   Insn 407: point = 466
   Insn 406: point = 467
   Insn 405: point = 469
   Insn 404: point = 471
  BB 27
   Insn 402: point = 472
   Insn 401: point = 472
   Insn 400: point = 473
   Insn 399: point = 475
   Insn 398: point = 477
   Insn 397: point = 479
   Insn 396: point = 480
   Insn 395: point = 482
   Insn 394: point = 484
  BB 22
   Insn 353: point = 485
   Insn 352: point = 485
   Insn 351: point = 486
   Insn 350: point = 488
   Insn 349: point = 490
   Insn 348: point = 492
   Insn 347: point = 493
   Insn 346: point = 495
   Insn 345: point = 497
  BB 31
   Insn 445: point = 498
   Insn 444: point = 498
   Insn 443: point = 499
   Insn 442: point = 501
   Insn 441: point = 503
   Insn 440: point = 505
   Insn 439: point = 507
   Insn 438: point = 508
   Insn 437: point = 510
   Insn 436: point = 512
   Insn 435: point = 513
   Insn 434: point = 515
   Insn 433: point = 517
   Insn 432: point = 519
   Insn 431: point = 520
   Insn 430: point = 522
   Insn 429: point = 524
  BB 37
   Insn 534: point = 525
  BB 36
   Insn 532: point = 525
   Insn 531: point = 525
   Insn 530: point = 525
   Insn 529: point = 526
   Insn 528: point = 527
   Insn 527: point = 528
   Insn 526: point = 529
   Insn 525: point = 529
   Insn 524: point = 530
   Insn 523: point = 531
   Insn 522: point = 531
   Insn 521: point = 533
   Insn 520: point = 535
   Insn 519: point = 537
   Insn 518: point = 539
   Insn 517: point = 540
   Insn 516: point = 541
   Insn 515: point = 543
   Insn 514: point = 545
   Insn 513: point = 546
   Insn 512: point = 548
   Insn 511: point = 550
   Insn 510: point = 551
   Insn 509: point = 553
   Insn 508: point = 555
   Insn 507: point = 556
   Insn 506: point = 558
   Insn 505: point = 560
   Insn 504: point = 561
   Insn 503: point = 563
   Insn 502: point = 565
   Insn 501: point = 566
   Insn 500: point = 568
   Insn 499: point = 570
   Insn 498: point = 572
   Insn 497: point = 573
   Insn 496: point = 574
   Insn 495: point = 576
   Insn 494: point = 578
   Insn 493: point = 580
   Insn 492: point = 581
   Insn 491: point = 581
   Insn 490: point = 582
   Insn 489: point = 584
   Insn 488: point = 585
  BB 42
   Insn 576: point = 586
  BB 41
   Insn 573: point = 586
   Insn 572: point = 586
   Insn 571: point = 587
   Insn 570: point = 589
   Insn 569: point = 591
  BB 40
   Insn 567: point = 592
   Insn 566: point = 592
   Insn 565: point = 593
   Insn 564: point = 595
   Insn 563: point = 597
 r83: [123..124]
 r84: [121..122]
 r85: [119..120]
 r86: [115..116]
 r87: [151..152]
 r88: [148..150]
 r89: [141..147]
 r90: [145..146]
 r91: [141..142]
 r92: [137..138]
 r93: [134..136]
 r94: [127..133]
 r95: [131..132]
 r96: [127..128]
 r97: [374..379]
 r98: [357..362]
 r99: [93..94]
 r100: [83..84]
 r101: [81..82]
 r102: [57..58]
 r103: [55..56]
 r104: [494..495]
 r105: [491..493]
 r106: [489..490]
 r107: [487..488]
 r108: [485..486]
 r109: [398..399]
 r110: [395..397]
 r111: [393..394]
 r112: [391..392]
 r113: [389..390]
 r114: [422..428]
 r115: [424..425]
 r116: [422..423]
 r117: [402..421]
 r118: [410..416]
 r119: [412..413]
 r120: [410..411]
 r121: [408..409]
 r122: [406..407]
 r123: [402..403]
 r124: [481..482]
 r125: [478..480]
 r126: [476..477]
 r127: [474..475]
 r128: [472..473]
 r129: [468..469]
 r130: [465..467]
 r131: [463..464]
 r132: [461..462]
 r133: [459..460]
 r134: [455..456]
 r135: [452..454]
 r136: [450..451]
 r137: [448..449]
 r138: [446..447]
 r139: [442..443]
 r140: [439..441]
 r141: [437..438]
 r142: [435..436]
 r143: [433..434]
 r144: [514..520]
 r145: [516..517]
 r146: [514..515]
 r147: [498..513]
 r148: [502..508]
 r149: [504..505]
 r150: [502..503]
 r151: [500..501]
 r152: [498..499]
 r153: [43..44]
 r154: [41..42]
 r155: [530..574]
 r156: [529..566]
 r157: [562..563]
 r158: [559..561]
 r159: [557..558]
 r160: [528..556]
 r161: [552..553]
 r162: [549..551]
 r163: [547..548]
 r164: [527..546]
 r165: [526..541]
 r166: [525..531]
 r167: [31..32]
 r168: [29..30]
 r169: [592..593]
 r170: [586..587]
 r171: [27..28]
 r172: [25..26]
 r173: [23..24]
 r174: [21..22]
 r175: [19..20]
 r176: [17..18]
 r177: [15..16]
 r178: [13..14]
 r179: [11..12]
 r180: [9..10]
 r181: [3..4]
 r182: [1..2]
 r183: [117..118]
 r184: [113..114]
 r185: [153..154]
 r186: [148..149]
 r187: [143..144]
 r188: [139..140]
 r189: [134..135]
 r190: [129..130]
 r191: [353..354]
 r192: [355..356]
 r193: [350..352]
 r194: [348..349]
 r195: [345..347]
 r196: [345..346]
 r197: [341..342]
 r198: [343..344]
 r199: [338..340]
 r200: [336..337]
 r201: [333..335]
 r202: [333..334]
 r203: [329..330]
 r204: [331..332]
 r205: [326..328]
 r206: [324..325]
 r207: [322..323]
 r208: [318..319]
 r209: [320..321]
 r210: [315..317]
 r211: [313..314]
 r212: [311..312]
 r213: [307..308]
 r214: [309..310]
 r215: [304..306]
 r216: [302..303]
 r217: [299..301]
 r218: [299..300]
 r219: [295..296]
 r220: [297..298]
 r221: [292..294]
 r222: [290..291]
 r223: [287..289]
 r224: [287..288]
 r225: [283..284]
 r226: [285..286]
 r227: [280..282]
 r228: [278..279]
 r229: [275..277]
 r230: [275..276]
 r231: [271..272]
 r232: [273..274]
 r233: [268..270]
 r234: [266..267]
 r235: [263..265]
 r236: [263..264]
 r237: [259..260]
 r238: [261..262]
 r239: [256..258]
 r240: [254..255]
 r241: [251..253]
 r242: [251..252]
 r243: [247..248]
 r244: [249..250]
 r245: [244..246]
 r246: [242..243]
 r247: [239..241]
 r248: [239..240]
 r249: [235..236]
 r250: [237..238]
 r251: [232..234]
 r252: [230..231]
 r253: [227..229]
 r254: [227..228]
 r255: [223..224]
 r256: [225..226]
 r257: [220..222]
 r258: [218..219]
 r259: [215..217]
 r260: [215..216]
 r261: [211..212]
 r262: [213..214]
 r263: [208..210]
 r264: [206..207]
 r265: [203..205]
 r266: [203..204]
 r267: [199..200]
 r268: [201..202]
 r269: [196..198]
 r270: [194..195]
 r271: [191..193]
 r272: [191..192]
 r273: [187..188]
 r274: [189..190]
 r275: [184..186]
 r276: [182..183]
 r277: [179..181]
 r278: [179..180]
 r279: [175..176]
 r280: [177..178]
 r281: [172..174]
 r282: [170..171]
 r283: [167..169]
 r284: [167..168]
 r285: [163..164]
 r286: [165..166]
 r287: [160..162]
 r288: [158..159]
 r289: [155..157]
 r290: [155..156]
 r291: [382..388]
 r292: [384..385]
 r293: [386..387]
 r294: [382..383]
 r295: [380..381]
 r296: [365..373]
 r297: [369..370]
 r298: [371..372]
 r299: [367..368]
 r300: [365..366]
 r301: [363..364]
 r302: [106..112]
 r303: [105..111]
 r304: [104..110]
 r305: [103..109]
 r306: [102..108]
 r307: [101..107]
 r308: [99..100]
 r309: [96..98]
 r310: [95..97]
 r311: [91..92]
 r312: [86..90]
 r313: [88..89]
 r314: [85..87]
 r315: [64..80]
 r316: [63..79]
 r317: [62..78]
 r318: [61..77]
 r319: [60..76]
 r320: [59..75]
 r321: [73..74]
 r322: [71..72]
 r323: [69..70]
 r324: [67..68]
 r325: [65..66]
 r326: [496..497]
 r327: [491..492]
 r328: [429..430]
 r329: [431..432]
 r330: [426..427]
 r331: [417..418]
 r332: [419..420]
 r333: [414..415]
 r334: [400..401]
 r335: [395..396]
 r336: [483..484]
 r337: [478..479]
 r338: [470..471]
 r339: [465..466]
 r340: [457..458]
 r341: [452..453]
 r342: [521..522]
 r343: [523..524]
 r344: [518..519]
 r345: [509..510]
 r346: [511..512]
 r347: [506..507]
 r348: [444..445]
 r349: [439..440]
 r350: [49..54]
 r351: [48..53]
 r352: [47..52]
 r353: [46..51]
 r354: [45..50]
 r355: [575..585]
 r356: [580..582]
 r357: [583..584]
 r358: [579..581] [575..576]
 r359: [577..578]
 r360: [567..573]
 r361: [569..570]
 r362: [571..572]
 r363: [567..568]
 r364: [564..565]
 r365: [559..560]
 r366: [554..555]
 r367: [549..550]
 r368: [542..543]
 r369: [544..545]
 r370: [532..540]
 r371: [536..537]
 r372: [538..539]
 r373: [534..535]
 r374: [532..533]
 r375: [39..40]
 r376: [37..38]
 r377: [35..36]
 r378: [33..34]
 r379: [594..595]
 r380: [596..597]
 r381: [588..589]
 r382: [590..591]
 r383: [7..8]
 r384: [5..6]
 r386: [125..126]
 r387: [0..0]
 r388: [350..351]
 r389: [338..339]
 r390: [326..327]
 r391: [315..316]
 r392: [304..305]
 r393: [292..293]
 r394: [280..281]
 r395: [268..269]
 r396: [256..257]
 r397: [244..245]
 r398: [232..233]
 r399: [220..221]
 r400: [208..209]
 r401: [196..197]
 r402: [184..185]
 r403: [172..173]
 r404: [160..161]
 r405: [377..378]
 r406: [375..376]
 r407: [360..361]
 r408: [358..359]
 r409: [404..405]
Compressing live ranges: from 598 to 493 - 82%
Ranges after the compression:
 r83: [89..90]
 r84: [87..88]
 r85: [85..86]
 r86: [81..82]
 r87: [113..114]
 r88: [111..112]
 r89: [105..110]
 r90: [109..110]
 r91: [105..106]
 r92: [101..102]
 r93: [99..100]
 r94: [93..98]
 r95: [97..98]
 r96: [93..94]
 r97: [301..304]
 r98: [287..290]
 r99: [71..72]
 r100: [63..64]
 r101: [61..62]
 r102: [49..50]
 r103: [47..48]
 r104: [409..410]
 r105: [407..408]
 r106: [405..406]
 r107: [403..404]
 r108: [401..402]
 r109: [321..322]
 r110: [319..320]
 r111: [317..318]
 r112: [315..316]
 r113: [313..314]
 r114: [343..348]
 r115: [345..346]
 r116: [343..344]
 r117: [325..342]
 r118: [333..338]
 r119: [335..336]
 r120: [333..334]
 r121: [331..332]
 r122: [329..330]
 r123: [325..326]
 r124: [397..398]
 r125: [395..396]
 r126: [393..394]
 r127: [391..392]
 r128: [389..390]
 r129: [385..386]
 r130: [383..384]
 r131: [381..382]
 r132: [379..380]
 r133: [377..378]
 r134: [373..374]
 r135: [371..372]
 r136: [369..370]
 r137: [367..368]
 r138: [365..366]
 r139: [361..362]
 r140: [359..360]
 r141: [357..358]
 r142: [355..356]
 r143: [353..354]
 r144: [427..432]
 r145: [429..430]
 r146: [427..428]
 r147: [413..426]
 r148: [417..422]
 r149: [419..420]
 r150: [417..418]
 r151: [415..416]
 r152: [413..414]
 r153: [43..44]
 r154: [41..42]
 r155: [437..472]
 r156: [437..466]
 r157: [463..464]
 r158: [461..462]
 r159: [459..460]
 r160: [437..458]
 r161: [455..456]
 r162: [453..454]
 r163: [451..452]
 r164: [437..450]
 r165: [437..446]
 r166: [437..438]
 r167: [31..32]
 r168: [29..30]
 r169: [487..488]
 r170: [481..482]
 r171: [27..28]
 r172: [25..26]
 r173: [23..24]
 r174: [21..22]
 r175: [19..20]
 r176: [17..18]
 r177: [15..16]
 r178: [13..14]
 r179: [11..12]
 r180: [9..10]
 r181: [3..4]
 r182: [1..2]
 r183: [83..84]
 r184: [79..80]
 r185: [115..116]
 r186: [111..112]
 r187: [107..108]
 r188: [103..104]
 r189: [99..100]
 r190: [95..96]
 r191: [283..284]
 r192: [285..286]
 r193: [281..282]
 r194: [279..280]
 r195: [277..278]
 r196: [277..278]
 r197: [273..274]
 r198: [275..276]
 r199: [271..272]
 r200: [269..270]
 r201: [267..268]
 r202: [267..268]
 r203: [263..264]
 r204: [265..266]
 r205: [261..262]
 r206: [259..260]
 r207: [257..258]
 r208: [253..254]
 r209: [255..256]
 r210: [251..252]
 r211: [249..250]
 r212: [247..248]
 r213: [243..244]
 r214: [245..246]
 r215: [241..242]
 r216: [239..240]
 r217: [237..238]
 r218: [237..238]
 r219: [233..234]
 r220: [235..236]
 r221: [231..232]
 r222: [229..230]
 r223: [227..228]
 r224: [227..228]
 r225: [223..224]
 r226: [225..226]
 r227: [221..222]
 r228: [219..220]
 r229: [217..218]
 r230: [217..218]
 r231: [213..214]
 r232: [215..216]
 r233: [211..212]
 r234: [209..210]
 r235: [207..208]
 r236: [207..208]
 r237: [203..204]
 r238: [205..206]
 r239: [201..202]
 r240: [199..200]
 r241: [197..198]
 r242: [197..198]
 r243: [193..194]
 r244: [195..196]
 r245: [191..192]
 r246: [189..190]
 r247: [187..188]
 r248: [187..188]
 r249: [183..184]
 r250: [185..186]
 r251: [181..182]
 r252: [179..180]
 r253: [177..178]
 r254: [177..178]
 r255: [173..174]
 r256: [175..176]
 r257: [171..172]
 r258: [169..170]
 r259: [167..168]
 r260: [167..168]
 r261: [163..164]
 r262: [165..166]
 r263: [161..162]
 r264: [159..160]
 r265: [157..158]
 r266: [157..158]
 r267: [153..154]
 r268: [155..156]
 r269: [151..152]
 r270: [149..150]
 r271: [147..148]
 r272: [147..148]
 r273: [143..144]
 r274: [145..146]
 r275: [141..142]
 r276: [139..140]
 r277: [137..138]
 r278: [137..138]
 r279: [133..134]
 r280: [135..136]
 r281: [131..132]
 r282: [129..130]
 r283: [127..128]
 r284: [127..128]
 r285: [123..124]
 r286: [125..126]
 r287: [121..122]
 r288: [119..120]
 r289: [117..118]
 r290: [117..118]
 r291: [307..312]
 r292: [309..310]
 r293: [311..312]
 r294: [307..308]
 r295: [305..306]
 r296: [293..300]
 r297: [297..298]
 r298: [299..300]
 r299: [295..296]
 r300: [293..294]
 r301: [291..292]
 r302: [77..78]
 r303: [77..78]
 r304: [77..78]
 r305: [77..78]
 r306: [77..78]
 r307: [77..78]
 r308: [75..76]
 r309: [73..74]
 r310: [73..74]
 r311: [69..70]
 r312: [65..68]
 r313: [67..68]
 r314: [65..66]
 r315: [51..60]
 r316: [51..60]
 r317: [51..60]
 r318: [51..60]
 r319: [51..60]
 r320: [51..60]
 r321: [59..60]
 r322: [57..58]
 r323: [55..56]
 r324: [53..54]
 r325: [51..52]
 r326: [411..412]
 r327: [407..408]
 r328: [349..350]
 r329: [351..352]
 r330: [347..348]
 r331: [339..340]
 r332: [341..342]
 r333: [337..338]
 r334: [323..324]
 r335: [319..320]
 r336: [399..400]
 r337: [395..396]
 r338: [387..388]
 r339: [383..384]
 r340: [375..376]
 r341: [371..372]
 r342: [433..434]
 r343: [435..436]
 r344: [431..432]
 r345: [423..424]
 r346: [425..426]
 r347: [421..422]
 r348: [363..364]
 r349: [359..360]
 r350: [45..46]
 r351: [45..46]
 r352: [45..46]
 r353: [45..46]
 r354: [45..46]
 r355: [473..480]
 r356: [477..478]
 r357: [479..480]
 r358: [477..478] [473..474]
 r359: [475..476]
 r360: [467..472]
 r361: [469..470]
 r362: [471..472]
 r363: [467..468]
 r364: [465..466]
 r365: [461..462]
 r366: [457..458]
 r367: [453..454]
 r368: [447..448]
 r369: [449..450]
 r370: [439..446]
 r371: [443..444]
 r372: [445..446]
 r373: [441..442]
 r374: [439..440]
 r375: [39..40]
 r376: [37..38]
 r377: [35..36]
 r378: [33..34]
 r379: [489..490]
 r380: [491..492]
 r381: [483..484]
 r382: [485..486]
 r383: [7..8]
 r384: [5..6]
 r386: [91..92]
 r387: [0..0]
 r388: [281..282]
 r389: [271..272]
 r390: [261..262]
 r391: [251..252]
 r392: [241..242]
 r393: [231..232]
 r394: [221..222]
 r395: [211..212]
 r396: [201..202]
 r397: [191..192]
 r398: [181..182]
 r399: [171..172]
 r400: [161..162]
 r401: [151..152]
 r402: [141..142]
 r403: [131..132]
 r404: [121..122]
 r405: [303..304]
 r406: [301..302]
 r407: [289..290]
 r408: [287..288]
 r409: [327..328]

********** Assignment #1: **********

	 Assigning to 388 (cl=INDEX_REGS, orig=388, freq=2, tfirst=388, tfreq=2)...
	   Assign 3 to reload r388 (freq=2)
	 Assigning to 389 (cl=INDEX_REGS, orig=389, freq=2, tfirst=389, tfreq=2)...
	   Assign 3 to reload r389 (freq=2)
	 Assigning to 390 (cl=INDEX_REGS, orig=390, freq=2, tfirst=390, tfreq=2)...
	   Assign 3 to reload r390 (freq=2)
	 Assigning to 391 (cl=INDEX_REGS, orig=391, freq=2, tfirst=391, tfreq=2)...
	   Assign 3 to reload r391 (freq=2)
	 Assigning to 392 (cl=INDEX_REGS, orig=392, freq=2, tfirst=392, tfreq=2)...
	   Assign 3 to reload r392 (freq=2)
	 Assigning to 393 (cl=INDEX_REGS, orig=393, freq=2, tfirst=393, tfreq=2)...
	   Assign 3 to reload r393 (freq=2)
	 Assigning to 394 (cl=INDEX_REGS, orig=394, freq=2, tfirst=394, tfreq=2)...
	   Assign 3 to reload r394 (freq=2)
	 Assigning to 395 (cl=INDEX_REGS, orig=395, freq=2, tfirst=395, tfreq=2)...
	   Assign 4 to reload r395 (freq=2)
	 Assigning to 396 (cl=INDEX_REGS, orig=396, freq=2, tfirst=396, tfreq=2)...
	   Assign 3 to reload r396 (freq=2)
	 Assigning to 397 (cl=INDEX_REGS, orig=397, freq=2, tfirst=397, tfreq=2)...
	   Assign 4 to reload r397 (freq=2)
	 Assigning to 398 (cl=INDEX_REGS, orig=398, freq=2, tfirst=398, tfreq=2)...
	   Assign 3 to reload r398 (freq=2)
	 Assigning to 399 (cl=INDEX_REGS, orig=399, freq=2, tfirst=399, tfreq=2)...
	   Assign 4 to reload r399 (freq=2)
	 Assigning to 400 (cl=INDEX_REGS, orig=400, freq=2, tfirst=400, tfreq=2)...
	   Assign 3 to reload r400 (freq=2)
	 Assigning to 401 (cl=INDEX_REGS, orig=401, freq=2, tfirst=401, tfreq=2)...
	   Assign 4 to reload r401 (freq=2)
	 Assigning to 402 (cl=INDEX_REGS, orig=402, freq=2, tfirst=402, tfreq=2)...
	   Assign 3 to reload r402 (freq=2)
	 Assigning to 403 (cl=INDEX_REGS, orig=403, freq=2, tfirst=403, tfreq=2)...
	   Assign 2 to reload r403 (freq=2)
	 Assigning to 404 (cl=INDEX_REGS, orig=404, freq=2, tfirst=404, tfreq=2)...
	   Assign 4 to reload r404 (freq=2)
	 Assigning to 405 (cl=GENERAL_REGS, orig=405, freq=2, tfirst=405, tfreq=2)...
	   Assign 3 to reload r405 (freq=2)
	 Assigning to 406 (cl=GENERAL_REGS, orig=406, freq=2, tfirst=406, tfreq=2)...
	   Assign 2 to reload r406 (freq=2)
	 Assigning to 407 (cl=GENERAL_REGS, orig=407, freq=2, tfirst=407, tfreq=2)...
	   Assign 4 to reload r407 (freq=2)
	 Assigning to 408 (cl=GENERAL_REGS, orig=408, freq=2, tfirst=408, tfreq=2)...
	   Assign 3 to reload r408 (freq=2)
	 Assigning to 386 (cl=INDEX_REGS, orig=386, freq=1, tfirst=386, tfreq=1)...
	   Assign 0 to reload r386 (freq=1)
	 Assigning to 387 (cl=INDEX_REGS, orig=387, freq=1, tfirst=387, tfreq=1)...
	   Assign 2 to reload r387 (freq=1)
	 Assigning to 409 (cl=SSE_REGS, orig=123, freq=2, tfirst=409, tfreq=2)...
	   Assign 21 to reload r409 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=2880, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=2848, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 63
changing reg in insn 64
changing reg in insn 68
changing reg in insn 69
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 81
changing reg in insn 87
changing reg in insn 82
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 92
changing reg in insn 92
changing reg in insn 98
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 98
changing reg in insn 243
changing reg in insn 246
changing reg in insn 245
changing reg in insn 244
changing reg in insn 253
changing reg in insn 257
changing reg in insn 256
changing reg in insn 255
changing reg in insn 254
changing reg in insn 284
changing reg in insn 285
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 303
changing reg in insn 463
changing reg in insn 464
changing reg in insn 464
changing reg in insn 466
changing reg in insn 346
changing reg in insn 347
changing reg in insn 347
changing reg in insn 349
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 351
changing reg in insn 351
changing reg in insn 352
changing reg in insn 380
changing reg in insn 381
changing reg in insn 381
changing reg in insn 383
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 387
changing reg in insn 361
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 365
changing reg in insn 375
changing reg in insn 368
changing reg in insn 372
changing reg in insn 370
changing reg in insn 371
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 374
changing reg in insn 375
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 398
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 400
changing reg in insn 400
changing reg in insn 401
changing reg in insn 405
changing reg in insn 406
changing reg in insn 406
changing reg in insn 408
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 415
changing reg in insn 416
changing reg in insn 416
changing reg in insn 418
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 421
changing reg in insn 449
changing reg in insn 450
changing reg in insn 450
changing reg in insn 452
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 456
changing reg in insn 431
changing reg in insn 433
changing reg in insn 434
changing reg in insn 434
changing reg in insn 435
changing reg in insn 444
changing reg in insn 438
changing reg in insn 442
changing reg in insn 440
changing reg in insn 441
changing reg in insn 441
changing reg in insn 442
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 537
changing reg in insn 538
changing reg in insn 538
changing reg in insn 540
changing reg in insn 496
changing reg in insn 524
changing reg in insn 501
changing reg in insn 525
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 506
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 527
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 512
changing reg in insn 512
changing reg in insn 513
changing reg in insn 513
changing reg in insn 528
changing reg in insn 516
changing reg in insn 529
changing reg in insn 522
changing reg in insn 530
changing reg in insn 579
changing reg in insn 580
changing reg in insn 580
changing reg in insn 582
changing reg in insn 565
changing reg in insn 566
changing reg in insn 571
changing reg in insn 572
changing reg in insn 585
changing reg in insn 586
changing reg in insn 588
changing reg in insn 589
changing reg in insn 591
changing reg in insn 592
changing reg in insn 595
changing reg in insn 596
changing reg in insn 598
changing reg in insn 599
changing reg in insn 603
changing reg in insn 604
changing reg in insn 606
changing reg in insn 607
changing reg in insn 609
changing reg in insn 610
changing reg in insn 613
changing reg in insn 614
changing reg in insn 616
changing reg in insn 617
changing reg in insn 627
changing reg in insn 630
changing reg in insn 630
changing reg in insn 634
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 85
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 96
changing reg in insn 97
changing reg in insn 111
changing reg in insn 112
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 115
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 122
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 142
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 148
changing reg in insn 149
changing reg in insn 151
changing reg in insn 152
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 163
changing reg in insn 162
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 170
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 177
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 184
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 194
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 197
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 205
changing reg in insn 204
changing reg in insn 205
changing reg in insn 207
changing reg in insn 208
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 212
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 215
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 219
changing reg in insn 218
changing reg in insn 219
changing reg in insn 221
changing reg in insn 222
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 226
changing reg in insn 225
changing reg in insn 226
changing reg in insn 238
changing reg in insn 240
changing reg in insn 241
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 247
changing reg in insn 252
changing reg in insn 249
changing reg in insn 250
changing reg in insn 248
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 253
changing reg in insn 265
changing reg in insn 271
changing reg in insn 266
changing reg in insn 272
changing reg in insn 267
changing reg in insn 273
changing reg in insn 268
changing reg in insn 274
changing reg in insn 269
changing reg in insn 275
changing reg in insn 270
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 281
changing reg in insn 280
changing reg in insn 282
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 292
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 293
changing reg in insn 317
changing reg in insn 333
changing reg in insn 318
changing reg in insn 334
changing reg in insn 319
changing reg in insn 335
changing reg in insn 320
changing reg in insn 336
changing reg in insn 321
changing reg in insn 337
changing reg in insn 322
changing reg in insn 338
changing reg in insn 323
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 345
changing reg in insn 346
changing reg in insn 348
changing reg in insn 360
changing reg in insn 361
changing reg in insn 359
changing reg in insn 360
changing reg in insn 362
changing reg in insn 363
changing reg in insn 367
changing reg in insn 368
changing reg in insn 366
changing reg in insn 367
changing reg in insn 369
changing reg in insn 370
changing reg in insn 379
changing reg in insn 380
changing reg in insn 382
changing reg in insn 394
changing reg in insn 395
changing reg in insn 397
changing reg in insn 404
changing reg in insn 405
changing reg in insn 407
changing reg in insn 414
changing reg in insn 415
changing reg in insn 417
changing reg in insn 430
changing reg in insn 431
changing reg in insn 429
changing reg in insn 430
changing reg in insn 432
changing reg in insn 433
changing reg in insn 437
changing reg in insn 438
changing reg in insn 436
changing reg in insn 437
changing reg in insn 439
changing reg in insn 440
changing reg in insn 448
changing reg in insn 449
changing reg in insn 451
changing reg in insn 471
changing reg in insn 476
changing reg in insn 472
changing reg in insn 477
changing reg in insn 473
changing reg in insn 478
changing reg in insn 474
changing reg in insn 479
changing reg in insn 475
changing reg in insn 480
changing reg in insn 488
changing reg in insn 496
changing reg in insn 490
changing reg in insn 493
changing reg in insn 491
changing reg in insn 493
changing reg in insn 489
changing reg in insn 490
changing reg in insn 495
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 496
changing reg in insn 494
changing reg in insn 493
changing reg in insn 492
changing reg in insn 494
changing reg in insn 495
changing reg in insn 497
changing reg in insn 501
changing reg in insn 499
changing reg in insn 500
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 501
changing reg in insn 502
changing reg in insn 503
changing reg in insn 505
changing reg in insn 508
changing reg in insn 509
changing reg in insn 511
changing reg in insn 515
changing reg in insn 516
changing reg in insn 514
changing reg in insn 515
changing reg in insn 517
changing reg in insn 522
changing reg in insn 519
changing reg in insn 520
changing reg in insn 518
changing reg in insn 519
changing reg in insn 520
changing reg in insn 521
changing reg in insn 521
changing reg in insn 522
changing reg in insn 545
changing reg in insn 546
changing reg in insn 546
changing reg in insn 547
changing reg in insn 551
changing reg in insn 552
changing reg in insn 552
changing reg in insn 553
changing reg in insn 564
changing reg in insn 565
changing reg in insn 563
changing reg in insn 564
changing reg in insn 570
changing reg in insn 571
changing reg in insn 569
changing reg in insn 570
changing reg in insn 621
changing reg in insn 622
changing reg in insn 624
changing reg in insn 625
changing reg in insn 5
changing reg in insn 635
deleting insn with uid = 273.
deleting insn with uid = 274.
deleting insn with uid = 275.
deleting insn with uid = 333.
deleting insn with uid = 334.
deleting insn with uid = 335.
deleting insn with uid = 336.
deleting insn with uid = 337.
deleting insn with uid = 477.
deleting insn with uid = 478.
deleting insn with uid = 479.
deleting insn with uid = 525.
deleting insn with uid = 527.
deleting insn with uid = 528.
deleting insn with uid = 530.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 277.
verify found no changes in insn with uid = 283.
verify found no changes in insn with uid = 294.
verify found no changes in insn with uid = 298.
verify found no changes in insn with uid = 299.
verify found no changes in insn with uid = 307.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 339.
verify found no changes in insn with uid = 470.
verify found no changes in insn with uid = 481.
verify found no changes in insn with uid = 483.
verify found no changes in insn with uid = 531.
verify found no changes in insn with uid = 544.
verify found no changes in insn with uid = 550.
verify found no changes in insn with uid = 556.
verify found no changes in insn with uid = 558.
verify found no changes in insn with uid = 573.
verify found no changes in insn with uid = 587.
verify found no changes in insn with uid = 590.
verify found no changes in insn with uid = 597.
verify found no changes in insn with uid = 600.
verify found no changes in insn with uid = 605.
verify found no changes in insn with uid = 608.
verify found no changes in insn with uid = 615.
verify found no changes in insn with uid = 618.
verify found no changes in insn with uid = 623.
verify found no changes in insn with uid = 626.
verify found no changes in insn with uid = 637.


int main(int, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={278d,241u} r1={94d,47u,11e} r2={62d,13u} r3={15d,15u} r4={64d,17u} r5={100d,53u} r6={1d,221u} r7={11d,111u} r8={47d} r9={47d} r10={47d} r11={47d} r12={47d} r13={47d} r14={47d} r15={47d} r17={214d,22u} r18={47d} r19={47d} r20={1d,1u,10e} r21={49d,1u} r22={48d} r23={48d} r24={48d} r25={48d} r26={48d} r27={48d} r28={48d} r29={47d} r30={47d} r31={47d} r32={47d} r33={47d} r34={47d} r35={47d} r36={47d} r37={57d,9u} r38={51d,3u} r39={47d} r40={47d} r45={47d} r46={47d} r47={47d} r48={47d} r49={47d} r50={47d} r51={47d} r52={47d} r53={47d} r54={47d} r55={47d} r56={47d} r57={47d} r58={47d} r59={47d} r60={47d} r61={47d} r62={47d} r63={47d} r64={47d} r65={47d} r66={47d} r67={47d} r68={47d} r69={47d} r70={47d} r71={47d} r72={47d} r73={47d} r74={47d} r75={47d} r76={47d} 
;;    total ref usage 4552{3777d,754u,21e} in 550{503 regular + 47 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2852 [0xfffffffffffff4dc])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) 4t_cv.cpp:36 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2864 [0xfffffffffffff4d0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) 4t_cv.cpp:36 89 {*movdi_internal}
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.5612+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [386])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:36 964 {stack_tls_protect_set_di}
     (nil))
(insn 8 5 9 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2824 [0xfffffffffffff4f8])) [0 maxval+0 S8 A64])
        (const_int 16384 [0x4000])) 4t_cv.cpp:50 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:52 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2768 [0xfffffffffffff530])) [0 in_file+0 S8 A64])
        (const_int 0 [0])) 4t_cv.cpp:61 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2760 [0xfffffffffffff538])) [0 in_file+8 S8 A64])
        (const_int 0 [0])) 4t_cv.cpp:62 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2852 [0xfffffffffffff4dc])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) 4t_cv.cpp:65 7 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) 4t_cv.cpp:65 596 {*jcc_1}
     (nil)
 -> 46)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x2b3c10213d10 *.LC0>)) 4t_cv.cpp:66 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x2b3c10213da8 *.LC1>)) 4t_cv.cpp:66 89 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) 4t_cv.cpp:66 93 {*movqi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b3c0fee0e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:66 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x2b3c10213e40 *.LC2>)) 4t_cv.cpp:67 89 {*movdi_internal}
     (nil))
(call_insn 20 19 21 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:67 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x2b3c10213ed8 *.LC3>)) 4t_cv.cpp:68 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:68 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x2b3c1021a000 *.LC4>)) 4t_cv.cpp:69 89 {*movdi_internal}
     (nil))
(call_insn 24 23 25 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:69 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x2b3c1021a098 *.LC5>)) 4t_cv.cpp:70 89 {*movdi_internal}
     (nil))
(call_insn 26 25 27 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:70 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x2b3c1021a130 *.LC6>)) 4t_cv.cpp:71 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:71 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x2b3c1021a1c8 *.LC7>)) 4t_cv.cpp:72 89 {*movdi_internal}
     (nil))
(call_insn 30 29 31 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:72 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x2b3c1021a260 *.LC8>)) 4t_cv.cpp:73 89 {*movdi_internal}
     (nil))
(call_insn 32 31 33 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:73 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 33 32 34 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x2b3c1021a2f8 *.LC9>)) 4t_cv.cpp:74 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:74 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b3c1021a390 *.LC10>)) 4t_cv.cpp:75 89 {*movdi_internal}
     (nil))
(call_insn 36 35 37 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:75 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 37 36 38 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x2b3c1021a428 *.LC11>)) 4t_cv.cpp:76 89 {*movdi_internal}
     (nil))
(call_insn 38 37 39 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:76 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 40 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x2b3c1021a4c0 *.LC12>)) 4t_cv.cpp:77 89 {*movdi_internal}
     (nil))
(call_insn 40 39 41 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:77 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 41 40 42 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x2b3c1021a558 *.LC13>)) 4t_cv.cpp:78 89 {*movdi_internal}
     (nil))
(call_insn 42 41 43 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:78 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 43 42 44 3 (set (reg:SI 5 di)
        (const_int 1 [0x1])) 4t_cv.cpp:79 90 {*movsi_internal}
     (nil))
(call_insn 44 43 45 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x2b3c0fefe900 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:79 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 45 44 46)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84
(code_label 46 45 47 4 2 "" [1 uses])
(note 47 46 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 48 47 49 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11IsBigEndianv") [flags 0x3]  <function_decl 0x2b3c101d9500 IsBigEndian>) [0 IsBigEndian S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:83 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 49 48 50 4 (set (reg:SI 0 ax [orig:83 D.5593 ] [83])
        (reg:SI 0 ax)) 4t_cv.cpp:83 90 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 D.5593 ] [83])
            (const_int 0 [0]))) 4t_cv.cpp:83 3 {*cmpsi_ccno_1}
     (nil))
(insn 51 50 52 4 (set (reg:QI 0 ax [orig:84 D.5594 ] [84])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) 4t_cv.cpp:83 592 {*setcc_qi}
     (nil))
(insn 52 51 53 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:84 D.5594 ] [84])
            (const_int 0 [0]))) 4t_cv.cpp:83 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 53 52 54 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) 4t_cv.cpp:83 596 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 644 5 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2832 [0xfffffffffffff4f0])) [0 endianCheck.systemStruct+0 S4 A64])
        (const_int 1 [0x1])) 4t_cv.cpp:84 90 {*movsi_internal}
     (nil))
(jump_insn 644 55 645 5 (set (pc)
        (label_ref 61)) 636 {jump}
     (nil)
 -> 61)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 645 644 58)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 58 645 59 6 3 "" [1 uses])
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 6 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2832 [0xfffffffffffff4f0])) [0 endianCheck.systemStruct+0 S4 A64])
        (const_int 0 [0])) 4t_cv.cpp:87 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 85 86 183 184
(code_label 61 60 62 7 4 "" [1 uses])
(note 62 61 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 7 (set (reg:DI 0 ax [orig:85 D.5595 ] [85])
        (const_int 16 [0x10])) 4t_cv.cpp:91 89 {*movdi_internal}
     (nil))
(insn 64 63 65 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:85 D.5595 ] [85])) 4t_cv.cpp:91 89 {*movdi_internal}
     (nil))
(call_insn 65 64 66 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b3c0ff0c200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:91 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 66 65 67 7 (set (reg/f:DI 0 ax [183])
        (reg:DI 0 ax)) 4t_cv.cpp:91 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [183])
        (nil)))
(insn 67 66 68 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])
        (reg/f:DI 0 ax [183])) 4t_cv.cpp:91 89 {*movdi_internal}
     (nil))
(insn 68 67 69 7 (set (reg:DI 0 ax [orig:86 D.5595 ] [86])
        (const_int 16 [0x10])) 4t_cv.cpp:92 89 {*movdi_internal}
     (nil))
(insn 69 68 70 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:86 D.5595 ] [86])) 4t_cv.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn 70 69 71 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b3c0ff0c200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:92 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 7 (set (reg/f:DI 0 ax [184])
        (reg:DI 0 ax)) 4t_cv.cpp:92 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [184])
        (nil)))
(insn 72 71 73 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])
        (reg/f:DI 0 ax [184])) 4t_cv.cpp:92 89 {*movdi_internal}
     (nil))
(insn 73 72 646 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:94 90 {*movsi_internal}
     (nil))
(jump_insn 646 73 647 7 (set (pc)
        (label_ref 100)) 4t_cv.cpp:94 636 {jump}
     (nil)
 -> 100)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 647 646 102)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 87 88 89 90 91 92 93 94 95 96 185 186 187 188 189 190
(code_label 102 647 76 8 6 "" [1 uses])
(note 76 102 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 8 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:95 90 {*movsi_internal}
     (nil))
(insn 78 77 79 8 (set (reg:DI 0 ax [orig:87 D.5595 ] [87])
        (sign_extend:DI (reg:SI 0 ax [185]))) 4t_cv.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 79 78 80 8 (parallel [
            (set (reg:DI 1 dx [orig:88 D.5595 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.5595 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:95 497 {*ashldi3_1}
     (nil))
(insn 80 79 81 8 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(insn 81 80 82 8 (parallel [
            (set (reg/f:DI 3 bx [orig:89 D.5596 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 D.5595 ] [88])
                    (reg/f:DI 0 ax [186])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:95 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.5595 ] [88]))
        (nil)))
(insn 82 81 83 8 (set (reg:DI 0 ax [orig:90 D.5595 ] [90])
        (const_int 64 [0x40])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(insn 83 82 84 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:90 D.5595 ] [90])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(call_insn 84 83 85 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b3c0ff0c200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:95 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 85 84 86 8 (set (reg/f:DI 0 ax [187])
        (reg:DI 0 ax)) 4t_cv.cpp:95 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [187])
        (nil)))
(insn 86 85 87 8 (set (reg/f:DI 0 ax [orig:91 D.5597 ] [91])
        (reg/f:DI 0 ax [187])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(insn 87 86 88 8 (set (mem/f:DI (reg/f:DI 3 bx [orig:89 D.5596 ] [89]) [0 *_20+0 S8 A64])
        (reg/f:DI 0 ax [orig:91 D.5597 ] [91])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(insn 88 87 89 8 (set (reg:SI 0 ax [188])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:96 90 {*movsi_internal}
     (nil))
(insn 89 88 90 8 (set (reg:DI 0 ax [orig:92 D.5595 ] [92])
        (sign_extend:DI (reg:SI 0 ax [188]))) 4t_cv.cpp:96 142 {*extendsidi2_rex64}
     (nil))
(insn 90 89 91 8 (parallel [
            (set (reg:DI 1 dx [orig:93 D.5595 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 D.5595 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:96 497 {*ashldi3_1}
     (nil))
(insn 91 90 92 8 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(insn 92 91 93 8 (parallel [
            (set (reg/f:DI 3 bx [orig:94 D.5598 ] [94])
                (plus:DI (reg:DI 1 dx [orig:93 D.5595 ] [93])
                    (reg/f:DI 0 ax [189])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:96 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2792 [0xfffffffffffff518])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.5595 ] [93]))
        (nil)))
(insn 93 92 94 8 (set (reg:DI 0 ax [orig:95 D.5595 ] [95])
        (const_int 56 [0x38])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(insn 94 93 95 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:95 D.5595 ] [95])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(call_insn 95 94 96 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x2b3c0ff0c200 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:96 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 96 95 97 8 (set (reg/f:DI 0 ax [190])
        (reg:DI 0 ax)) 4t_cv.cpp:96 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [190])
        (nil)))
(insn 97 96 98 8 (set (reg/f:DI 0 ax [orig:96 D.5597 ] [96])
        (reg/f:DI 0 ax [190])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(insn 98 97 99 8 (set (mem/f:DI (reg/f:DI 3 bx [orig:94 D.5598 ] [94]) [0 *_25+0 S8 A64])
        (reg/f:DI 0 ax [orig:96 D.5597 ] [96])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(insn 99 98 100 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:94 220 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 100 99 101 9 5 "" [1 uses])
(note 101 100 103 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 103 101 104 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) 4t_cv.cpp:94 7 {*cmpsi_1}
     (nil))
(jump_insn 104 103 105 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) 4t_cv.cpp:94 596 {*jcc_1}
     (nil)
 -> 102)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 105 104 106 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 648 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:101 90 {*movsi_internal}
     (nil))
(jump_insn 648 106 649 10 (set (pc)
        (label_ref 228)) 4t_cv.cpp:101 636 {jump}
     (nil)
 -> 228)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 649 648 230)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290
(code_label 230 649 109 11 8 "" [1 uses])
(note 109 230 110 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 11 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:102 90 {*movsi_internal}
     (nil))
(insn 111 110 112 11 (set (reg:DI 0 ax [191])
        (sign_extend:DI (reg:SI 0 ax [192]))) 4t_cv.cpp:102 142 {*extendsidi2_rex64}
     (nil))
(insn 112 111 668 11 (parallel [
            (set (reg:DI 0 ax [193])
                (mult:DI (reg:DI 0 ax [191])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:102 307 {*muldi3_1}
     (nil))
(insn 668 112 113 11 (set (reg:DI 3 bx [388])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:102 214 {*leadi}
     (nil))
(insn 113 668 114 11 (parallel [
            (set (reg:DI 0 ax [194])
                (plus:DI (reg:DI 0 ax [193])
                    (reg:DI 3 bx [388])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:102 221 {*adddi_1}
     (nil))
(insn 114 113 115 11 (parallel [
            (set (reg/f:DI 1 dx [195])
                (plus:DI (reg:DI 0 ax [194])
                    (const_int -2560 [0xfffffffffffff600])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:102 221 {*adddi_1}
     (nil))
(insn 115 114 116 11 (set (reg:SF 0 ax [196])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:102 129 {*movsf_internal}
     (nil))
(insn 116 115 117 11 (set (mem/j:SF (reg/f:DI 1 dx [195]) [0 procpar_info[i_2].acquision_time+0 S4 A64])
        (reg:SF 0 ax [196])) 4t_cv.cpp:102 129 {*movsf_internal}
     (nil))
(insn 117 116 118 11 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:103 90 {*movsi_internal}
     (nil))
(insn 118 117 119 11 (set (reg:DI 0 ax [197])
        (sign_extend:DI (reg:SI 0 ax [198]))) 4t_cv.cpp:103 142 {*extendsidi2_rex64}
     (nil))
(insn 119 118 669 11 (parallel [
            (set (reg:DI 0 ax [199])
                (mult:DI (reg:DI 0 ax [197])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:103 307 {*muldi3_1}
     (nil))
(insn 669 119 120 11 (set (reg:DI 3 bx [389])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:103 214 {*leadi}
     (nil))
(insn 120 669 121 11 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg:DI 0 ax [199])
                    (reg:DI 3 bx [389])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:103 221 {*adddi_1}
     (nil))
(insn 121 120 122 11 (parallel [
            (set (reg/f:DI 1 dx [201])
                (plus:DI (reg:DI 0 ax [200])
                    (const_int -2272 [0xfffffffffffff720])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:103 221 {*adddi_1}
     (nil))
(insn 122 121 123 11 (set (reg:SF 0 ax [202])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:103 129 {*movsf_internal}
     (nil))
(insn 123 122 124 11 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [201])
                (const_int 4 [0x4])) [0 procpar_info[i_2].filter+0 S4 A32])
        (reg:SF 0 ax [202])) 4t_cv.cpp:103 129 {*movsf_internal}
     (nil))
(insn 124 123 125 11 (set (reg:SI 0 ax [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:104 90 {*movsi_internal}
     (nil))
(insn 125 124 126 11 (set (reg:DI 0 ax [203])
        (sign_extend:DI (reg:SI 0 ax [204]))) 4t_cv.cpp:104 142 {*extendsidi2_rex64}
     (nil))
(insn 126 125 670 11 (parallel [
            (set (reg:DI 0 ax [205])
                (mult:DI (reg:DI 0 ax [203])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:104 307 {*muldi3_1}
     (nil))
(insn 670 126 127 11 (set (reg:DI 3 bx [390])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:104 214 {*leadi}
     (nil))
(insn 127 670 128 11 (parallel [
            (set (reg:DI 0 ax [206])
                (plus:DI (reg:DI 0 ax [205])
                    (reg:DI 3 bx [390])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:104 221 {*adddi_1}
     (nil))
(insn 128 127 129 11 (parallel [
            (set (reg/f:DI 0 ax [207])
                (plus:DI (reg:DI 0 ax [206])
                    (const_int -2272 [0xfffffffffffff720])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:104 221 {*adddi_1}
     (nil))
(insn 129 128 130 11 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [207])
                (const_int 8 [0x8])) [0 procpar_info[i_2].num_transients+0 S4 A64])
        (const_int 1 [0x1])) 4t_cv.cpp:104 90 {*movsi_internal}
     (nil))
(insn 130 129 131 11 (set (reg:SI 0 ax [209])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:105 90 {*movsi_internal}
     (nil))
(insn 131 130 132 11 (set (reg:DI 0 ax [208])
        (sign_extend:DI (reg:SI 0 ax [209]))) 4t_cv.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 132 131 671 11 (parallel [
            (set (reg:DI 0 ax [210])
                (mult:DI (reg:DI 0 ax [208])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:105 307 {*muldi3_1}
     (nil))
(insn 671 132 133 11 (set (reg:DI 3 bx [391])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:105 214 {*leadi}
     (nil))
(insn 133 671 134 11 (parallel [
            (set (reg:DI 0 ax [211])
                (plus:DI (reg:DI 0 ax [210])
                    (reg:DI 3 bx [391])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:105 221 {*adddi_1}
     (nil))
(insn 134 133 135 11 (parallel [
            (set (reg/f:DI 0 ax [212])
                (plus:DI (reg:DI 0 ax [211])
                    (const_int -2272 [0xfffffffffffff720])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:105 221 {*adddi_1}
     (nil))
(insn 135 134 136 11 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [212])
                (const_int 12 [0xc])) [0 procpar_info[i_2].num_points+0 S4 A32])
        (const_int 1024 [0x400])) 4t_cv.cpp:105 90 {*movsi_internal}
     (nil))
(insn 136 135 137 11 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:106 90 {*movsi_internal}
     (nil))
(insn 137 136 138 11 (set (reg:DI 0 ax [213])
        (sign_extend:DI (reg:SI 0 ax [214]))) 4t_cv.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 138 137 672 11 (parallel [
            (set (reg:DI 0 ax [215])
                (mult:DI (reg:DI 0 ax [213])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:106 307 {*muldi3_1}
     (nil))
(insn 672 138 139 11 (set (reg:DI 3 bx [392])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:106 214 {*leadi}
     (nil))
(insn 139 672 140 11 (parallel [
            (set (reg:DI 0 ax [216])
                (plus:DI (reg:DI 0 ax [215])
                    (reg:DI 3 bx [392])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:106 221 {*adddi_1}
     (nil))
(insn 140 139 141 11 (parallel [
            (set (reg/f:DI 1 dx [217])
                (plus:DI (reg:DI 0 ax [216])
                    (const_int -2256 [0xfffffffffffff730])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:106 221 {*adddi_1}
     (nil))
(insn 141 140 142 11 (set (reg:DF 0 ax [218])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) 4t_cv.cpp:106 128 {*movdf_internal}
     (nil))
(insn 142 141 143 11 (set (mem/j:DF (reg/f:DI 1 dx [217]) [0 procpar_info[i_2].main_frequency+0 S8 A64])
        (reg:DF 0 ax [218])) 4t_cv.cpp:106 128 {*movdf_internal}
     (nil))
(insn 143 142 144 11 (set (reg:SI 0 ax [220])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:107 90 {*movsi_internal}
     (nil))
(insn 144 143 145 11 (set (reg:DI 0 ax [219])
        (sign_extend:DI (reg:SI 0 ax [220]))) 4t_cv.cpp:107 142 {*extendsidi2_rex64}
     (nil))
(insn 145 144 673 11 (parallel [
            (set (reg:DI 0 ax [221])
                (mult:DI (reg:DI 0 ax [219])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:107 307 {*muldi3_1}
     (nil))
(insn 673 145 146 11 (set (reg:DI 3 bx [393])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:107 214 {*leadi}
     (nil))
(insn 146 673 147 11 (parallel [
            (set (reg:DI 0 ax [222])
                (plus:DI (reg:DI 0 ax [221])
                    (reg:DI 3 bx [393])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:107 221 {*adddi_1}
     (nil))
(insn 147 146 148 11 (parallel [
            (set (reg/f:DI 1 dx [223])
                (plus:DI (reg:DI 0 ax [222])
                    (const_int -2256 [0xfffffffffffff730])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:107 221 {*adddi_1}
     (nil))
(insn 148 147 149 11 (set (reg:DF 0 ax [224])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) 4t_cv.cpp:107 128 {*movdf_internal}
     (nil))
(insn 149 148 150 11 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [223])
                (const_int 8 [0x8])) [0 procpar_info[i_2].offset_frequency+0 S8 A64])
        (reg:DF 0 ax [224])) 4t_cv.cpp:107 128 {*movdf_internal}
     (nil))
(insn 150 149 151 11 (set (reg:SI 0 ax [226])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:108 90 {*movsi_internal}
     (nil))
(insn 151 150 152 11 (set (reg:DI 0 ax [225])
        (sign_extend:DI (reg:SI 0 ax [226]))) 4t_cv.cpp:108 142 {*extendsidi2_rex64}
     (nil))
(insn 152 151 674 11 (parallel [
            (set (reg:DI 0 ax [227])
                (mult:DI (reg:DI 0 ax [225])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:108 307 {*muldi3_1}
     (nil))
(insn 674 152 153 11 (set (reg:DI 3 bx [394])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:108 214 {*leadi}
     (nil))
(insn 153 674 154 11 (parallel [
            (set (reg:DI 0 ax [228])
                (plus:DI (reg:DI 0 ax [227])
                    (reg:DI 3 bx [394])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:108 221 {*adddi_1}
     (nil))
(insn 154 153 155 11 (parallel [
            (set (reg/f:DI 1 dx [229])
                (plus:DI (reg:DI 0 ax [228])
                    (const_int -2240 [0xfffffffffffff740])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:108 221 {*adddi_1}
     (nil))
(insn 155 154 156 11 (set (reg:SF 0 ax [230])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:108 129 {*movsf_internal}
     (nil))
(insn 156 155 157 11 (set (mem/j:SF (reg/f:DI 1 dx [229]) [0 procpar_info[i_2].te+0 S4 A64])
        (reg:SF 0 ax [230])) 4t_cv.cpp:108 129 {*movsf_internal}
     (nil))
(insn 157 156 158 11 (set (reg:SI 0 ax [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:109 90 {*movsi_internal}
     (nil))
(insn 158 157 159 11 (set (reg:DI 0 ax [231])
        (sign_extend:DI (reg:SI 0 ax [232]))) 4t_cv.cpp:109 142 {*extendsidi2_rex64}
     (nil))
(insn 159 158 675 11 (parallel [
            (set (reg:DI 0 ax [233])
                (mult:DI (reg:DI 0 ax [231])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:109 307 {*muldi3_1}
     (nil))
(insn 675 159 160 11 (set (reg:DI 4 si [395])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:109 214 {*leadi}
     (nil))
(insn 160 675 161 11 (parallel [
            (set (reg:DI 0 ax [234])
                (plus:DI (reg:DI 0 ax [233])
                    (reg:DI 4 si [395])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:109 221 {*adddi_1}
     (nil))
(insn 161 160 162 11 (parallel [
            (set (reg/f:DI 1 dx [235])
                (plus:DI (reg:DI 0 ax [234])
                    (const_int -2240 [0xfffffffffffff740])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:109 221 {*adddi_1}
     (nil))
(insn 162 161 163 11 (set (reg:SF 0 ax [236])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:109 129 {*movsf_internal}
     (nil))
(insn 163 162 164 11 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [235])
                (const_int 4 [0x4])) [0 procpar_info[i_2].tm+0 S4 A32])
        (reg:SF 0 ax [236])) 4t_cv.cpp:109 129 {*movsf_internal}
     (nil))
(insn 164 163 165 11 (set (reg:SI 0 ax [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:110 90 {*movsi_internal}
     (nil))
(insn 165 164 166 11 (set (reg:DI 0 ax [237])
        (sign_extend:DI (reg:SI 0 ax [238]))) 4t_cv.cpp:110 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 676 11 (parallel [
            (set (reg:DI 0 ax [239])
                (mult:DI (reg:DI 0 ax [237])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:110 307 {*muldi3_1}
     (nil))
(insn 676 166 167 11 (set (reg:DI 3 bx [396])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:110 214 {*leadi}
     (nil))
(insn 167 676 168 11 (parallel [
            (set (reg:DI 0 ax [240])
                (plus:DI (reg:DI 0 ax [239])
                    (reg:DI 3 bx [396])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:110 221 {*adddi_1}
     (nil))
(insn 168 167 169 11 (parallel [
            (set (reg/f:DI 1 dx [241])
                (plus:DI (reg:DI 0 ax [240])
                    (const_int -2240 [0xfffffffffffff740])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:110 221 {*adddi_1}
     (nil))
(insn 169 168 170 11 (set (reg:SF 0 ax [242])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:110 129 {*movsf_internal}
     (nil))
(insn 170 169 171 11 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [241])
                (const_int 8 [0x8])) [0 procpar_info[i_2].gain+0 S4 A64])
        (reg:SF 0 ax [242])) 4t_cv.cpp:110 129 {*movsf_internal}
     (nil))
(insn 171 170 172 11 (set (reg:SI 0 ax [244])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:111 90 {*movsi_internal}
     (nil))
(insn 172 171 173 11 (set (reg:DI 0 ax [243])
        (sign_extend:DI (reg:SI 0 ax [244]))) 4t_cv.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 173 172 677 11 (parallel [
            (set (reg:DI 0 ax [245])
                (mult:DI (reg:DI 0 ax [243])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:111 307 {*muldi3_1}
     (nil))
(insn 677 173 174 11 (set (reg:DI 4 si [397])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:111 214 {*leadi}
     (nil))
(insn 174 677 175 11 (parallel [
            (set (reg:DI 0 ax [246])
                (plus:DI (reg:DI 0 ax [245])
                    (reg:DI 4 si [397])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:111 221 {*adddi_1}
     (nil))
(insn 175 174 176 11 (parallel [
            (set (reg/f:DI 1 dx [247])
                (plus:DI (reg:DI 0 ax [246])
                    (const_int -2240 [0xfffffffffffff740])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:111 221 {*adddi_1}
     (nil))
(insn 176 175 177 11 (set (reg:SF 0 ax [248])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:111 129 {*movsf_internal}
     (nil))
(insn 177 176 178 11 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [247])
                (const_int 12 [0xc])) [0 procpar_info[i_2].pos1+0 S4 A32])
        (reg:SF 0 ax [248])) 4t_cv.cpp:111 129 {*movsf_internal}
     (nil))
(insn 178 177 179 11 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:112 90 {*movsi_internal}
     (nil))
(insn 179 178 180 11 (set (reg:DI 0 ax [249])
        (sign_extend:DI (reg:SI 0 ax [250]))) 4t_cv.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 180 179 678 11 (parallel [
            (set (reg:DI 0 ax [251])
                (mult:DI (reg:DI 0 ax [249])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:112 307 {*muldi3_1}
     (nil))
(insn 678 180 181 11 (set (reg:DI 3 bx [398])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:112 214 {*leadi}
     (nil))
(insn 181 678 182 11 (parallel [
            (set (reg:DI 0 ax [252])
                (plus:DI (reg:DI 0 ax [251])
                    (reg:DI 3 bx [398])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:112 221 {*adddi_1}
     (nil))
(insn 182 181 183 11 (parallel [
            (set (reg/f:DI 1 dx [253])
                (plus:DI (reg:DI 0 ax [252])
                    (const_int -2224 [0xfffffffffffff750])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:112 221 {*adddi_1}
     (nil))
(insn 183 182 184 11 (set (reg:SF 0 ax [254])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:112 129 {*movsf_internal}
     (nil))
(insn 184 183 185 11 (set (mem/j:SF (reg/f:DI 1 dx [253]) [0 procpar_info[i_2].pos2+0 S4 A64])
        (reg:SF 0 ax [254])) 4t_cv.cpp:112 129 {*movsf_internal}
     (nil))
(insn 185 184 186 11 (set (reg:SI 0 ax [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:113 90 {*movsi_internal}
     (nil))
(insn 186 185 187 11 (set (reg:DI 0 ax [255])
        (sign_extend:DI (reg:SI 0 ax [256]))) 4t_cv.cpp:113 142 {*extendsidi2_rex64}
     (nil))
(insn 187 186 679 11 (parallel [
            (set (reg:DI 0 ax [257])
                (mult:DI (reg:DI 0 ax [255])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:113 307 {*muldi3_1}
     (nil))
(insn 679 187 188 11 (set (reg:DI 4 si [399])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:113 214 {*leadi}
     (nil))
(insn 188 679 189 11 (parallel [
            (set (reg:DI 0 ax [258])
                (plus:DI (reg:DI 0 ax [257])
                    (reg:DI 4 si [399])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:113 221 {*adddi_1}
     (nil))
(insn 189 188 190 11 (parallel [
            (set (reg/f:DI 1 dx [259])
                (plus:DI (reg:DI 0 ax [258])
                    (const_int -2224 [0xfffffffffffff750])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:113 221 {*adddi_1}
     (nil))
(insn 190 189 191 11 (set (reg:SF 0 ax [260])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:113 129 {*movsf_internal}
     (nil))
(insn 191 190 192 11 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [259])
                (const_int 4 [0x4])) [0 procpar_info[i_2].pos3+0 S4 A32])
        (reg:SF 0 ax [260])) 4t_cv.cpp:113 129 {*movsf_internal}
     (nil))
(insn 192 191 193 11 (set (reg:SI 0 ax [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:114 90 {*movsi_internal}
     (nil))
(insn 193 192 194 11 (set (reg:DI 0 ax [261])
        (sign_extend:DI (reg:SI 0 ax [262]))) 4t_cv.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 194 193 680 11 (parallel [
            (set (reg:DI 0 ax [263])
                (mult:DI (reg:DI 0 ax [261])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:114 307 {*muldi3_1}
     (nil))
(insn 680 194 195 11 (set (reg:DI 3 bx [400])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:114 214 {*leadi}
     (nil))
(insn 195 680 196 11 (parallel [
            (set (reg:DI 0 ax [264])
                (plus:DI (reg:DI 0 ax [263])
                    (reg:DI 3 bx [400])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:114 221 {*adddi_1}
     (nil))
(insn 196 195 197 11 (parallel [
            (set (reg/f:DI 1 dx [265])
                (plus:DI (reg:DI 0 ax [264])
                    (const_int -2224 [0xfffffffffffff750])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:114 221 {*adddi_1}
     (nil))
(insn 197 196 198 11 (set (reg:SF 0 ax [266])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:114 129 {*movsf_internal}
     (nil))
(insn 198 197 199 11 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [265])
                (const_int 8 [0x8])) [0 procpar_info[i_2].vox1+0 S4 A64])
        (reg:SF 0 ax [266])) 4t_cv.cpp:114 129 {*movsf_internal}
     (nil))
(insn 199 198 200 11 (set (reg:SI 0 ax [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:115 90 {*movsi_internal}
     (nil))
(insn 200 199 201 11 (set (reg:DI 0 ax [267])
        (sign_extend:DI (reg:SI 0 ax [268]))) 4t_cv.cpp:115 142 {*extendsidi2_rex64}
     (nil))
(insn 201 200 681 11 (parallel [
            (set (reg:DI 0 ax [269])
                (mult:DI (reg:DI 0 ax [267])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:115 307 {*muldi3_1}
     (nil))
(insn 681 201 202 11 (set (reg:DI 4 si [401])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:115 214 {*leadi}
     (nil))
(insn 202 681 203 11 (parallel [
            (set (reg:DI 0 ax [270])
                (plus:DI (reg:DI 0 ax [269])
                    (reg:DI 4 si [401])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:115 221 {*adddi_1}
     (nil))
(insn 203 202 204 11 (parallel [
            (set (reg/f:DI 1 dx [271])
                (plus:DI (reg:DI 0 ax [270])
                    (const_int -2224 [0xfffffffffffff750])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:115 221 {*adddi_1}
     (nil))
(insn 204 203 205 11 (set (reg:SF 0 ax [272])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:115 129 {*movsf_internal}
     (nil))
(insn 205 204 206 11 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [271])
                (const_int 12 [0xc])) [0 procpar_info[i_2].vox2+0 S4 A32])
        (reg:SF 0 ax [272])) 4t_cv.cpp:115 129 {*movsf_internal}
     (nil))
(insn 206 205 207 11 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:116 90 {*movsi_internal}
     (nil))
(insn 207 206 208 11 (set (reg:DI 0 ax [273])
        (sign_extend:DI (reg:SI 0 ax [274]))) 4t_cv.cpp:116 142 {*extendsidi2_rex64}
     (nil))
(insn 208 207 682 11 (parallel [
            (set (reg:DI 0 ax [275])
                (mult:DI (reg:DI 0 ax [273])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:116 307 {*muldi3_1}
     (nil))
(insn 682 208 209 11 (set (reg:DI 3 bx [402])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:116 214 {*leadi}
     (nil))
(insn 209 682 210 11 (parallel [
            (set (reg:DI 0 ax [276])
                (plus:DI (reg:DI 0 ax [275])
                    (reg:DI 3 bx [402])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:116 221 {*adddi_1}
     (nil))
(insn 210 209 211 11 (parallel [
            (set (reg/f:DI 1 dx [277])
                (plus:DI (reg:DI 0 ax [276])
                    (const_int -2208 [0xfffffffffffff760])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:116 221 {*adddi_1}
     (nil))
(insn 211 210 212 11 (set (reg:SF 0 ax [278])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:116 129 {*movsf_internal}
     (nil))
(insn 212 211 213 11 (set (mem/j:SF (reg/f:DI 1 dx [277]) [0 procpar_info[i_2].vox3+0 S4 A64])
        (reg:SF 0 ax [278])) 4t_cv.cpp:116 129 {*movsf_internal}
     (nil))
(insn 213 212 214 11 (set (reg:SI 0 ax [280])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:117 90 {*movsi_internal}
     (nil))
(insn 214 213 215 11 (set (reg:DI 0 ax [279])
        (sign_extend:DI (reg:SI 0 ax [280]))) 4t_cv.cpp:117 142 {*extendsidi2_rex64}
     (nil))
(insn 215 214 683 11 (parallel [
            (set (reg:DI 0 ax [281])
                (mult:DI (reg:DI 0 ax [279])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:117 307 {*muldi3_1}
     (nil))
(insn 683 215 216 11 (set (reg:DI 2 cx [403])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:117 214 {*leadi}
     (nil))
(insn 216 683 217 11 (parallel [
            (set (reg:DI 0 ax [282])
                (plus:DI (reg:DI 0 ax [281])
                    (reg:DI 2 cx [403])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:117 221 {*adddi_1}
     (nil))
(insn 217 216 218 11 (parallel [
            (set (reg/f:DI 1 dx [283])
                (plus:DI (reg:DI 0 ax [282])
                    (const_int -2208 [0xfffffffffffff760])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:117 221 {*adddi_1}
     (nil))
(insn 218 217 219 11 (set (reg:DF 0 ax [284])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) 4t_cv.cpp:117 128 {*movdf_internal}
     (nil))
(insn 219 218 220 11 (set (mem/j:DF (plus:DI (reg/f:DI 1 dx [283])
                (const_int 8 [0x8])) [0 procpar_info[i_2].span+0 S8 A64])
        (reg:DF 0 ax [284])) 4t_cv.cpp:117 128 {*movdf_internal}
     (nil))
(insn 220 219 221 11 (set (reg:SI 0 ax [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:118 90 {*movsi_internal}
     (nil))
(insn 221 220 222 11 (set (reg:DI 0 ax [285])
        (sign_extend:DI (reg:SI 0 ax [286]))) 4t_cv.cpp:118 142 {*extendsidi2_rex64}
     (nil))
(insn 222 221 684 11 (parallel [
            (set (reg:DI 0 ax [287])
                (mult:DI (reg:DI 0 ax [285])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:118 307 {*muldi3_1}
     (nil))
(insn 684 222 223 11 (set (reg:DI 4 si [404])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:118 214 {*leadi}
     (nil))
(insn 223 684 224 11 (parallel [
            (set (reg:DI 0 ax [288])
                (plus:DI (reg:DI 0 ax [287])
                    (reg:DI 4 si [404])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:118 221 {*adddi_1}
     (nil))
(insn 224 223 225 11 (parallel [
            (set (reg/f:DI 1 dx [289])
                (plus:DI (reg:DI 0 ax [288])
                    (const_int -2192 [0xfffffffffffff770])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:118 221 {*adddi_1}
     (nil))
(insn 225 224 226 11 (set (reg:SF 0 ax [290])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:118 129 {*movsf_internal}
     (nil))
(insn 226 225 227 11 (set (mem/j:SF (reg/f:DI 1 dx [289]) [0 procpar_info[i_2].vtheta+0 S4 A64])
        (reg:SF 0 ax [290])) 4t_cv.cpp:118 129 {*movsf_internal}
     (nil))
(insn 227 226 228 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:101 220 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 228 227 229 12 7 "" [1 uses])
(note 229 228 231 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 231 229 232 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) 4t_cv.cpp:101 7 {*cmpsi_1}
     (nil))
(jump_insn 232 231 233 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 230)
            (pc))) 4t_cv.cpp:101 596 {*jcc_1}
     (nil)
 -> 230)
;;  succ:       11
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 233 232 234 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 650 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:121 90 {*movsi_internal}
     (nil))
(jump_insn 650 234 651 13 (set (pc)
        (label_ref 259)) 4t_cv.cpp:121 636 {jump}
     (nil)
 -> 259)
;;  succ:       15 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 651 650 261)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 291 292 293 294 295 296 297 298 299 300 301
(code_label 261 651 237 14 10 "" [1 uses])
(note 237 261 238 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 14 (parallel [
            (set (reg:DI 1 dx [291])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:122 221 {*adddi_1}
     (nil))
(insn 239 238 240 14 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:122 90 {*movsi_internal}
     (nil))
(insn 240 239 241 14 (set (reg:DI 0 ax [292])
        (sign_extend:DI (reg:SI 0 ax [293]))) 4t_cv.cpp:122 142 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 14 (parallel [
            (set (reg:DI 0 ax [294])
                (mult:DI (reg:DI 0 ax [292])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:122 307 {*muldi3_1}
     (nil))
(insn 242 241 243 14 (parallel [
            (set (reg:DI 0 ax [295])
                (plus:DI (reg:DI 0 ax [294])
                    (reg:DI 1 dx [291])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:122 221 {*adddi_1}
     (nil))
(insn 243 242 244 14 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.5599 ] [97])
                (plus:DI (reg:DI 0 ax [295])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:122 221 {*adddi_1}
     (nil))
(insn 244 243 685 14 (set (reg:DI 3 bx [405])
        (const_int 2334399942965096270 [0x2065746144206f4e])) 4t_cv.cpp:122 89 {*movdi_internal}
     (nil))
(insn 685 244 245 14 (set (mem:DI (reg/f:DI 0 ax [orig:97 D.5599 ] [97]) [0 MEM[(void *)_32]+0 S8 A8])
        (reg:DI 3 bx [405])) 4t_cv.cpp:122 89 {*movdi_internal}
     (nil))
(insn 245 685 686 14 (set (reg:DI 2 cx [406])
        (const_int 7809911822066218561 [0x6c62616c69617641])) 4t_cv.cpp:122 89 {*movdi_internal}
     (nil))
(insn 686 245 246 14 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:97 D.5599 ] [97])
                (const_int 8 [0x8])) [0 MEM[(void *)_32]+8 S8 A8])
        (reg:DI 2 cx [406])) 4t_cv.cpp:122 89 {*movdi_internal}
     (nil))
(insn 246 686 247 14 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:97 D.5599 ] [97])
                (const_int 16 [0x10])) [0 MEM[(void *)_32]+16 S2 A8])
        (const_int 101 [0x65])) 4t_cv.cpp:122 92 {*movhi_internal}
     (nil))
(insn 247 246 248 14 (parallel [
            (set (reg:DI 0 ax [296])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 221 {*adddi_1}
     (nil))
(insn 248 247 249 14 (set (reg:SI 1 dx [298])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:123 90 {*movsi_internal}
     (nil))
(insn 249 248 250 14 (set (reg:DI 1 dx [297])
        (sign_extend:DI (reg:SI 1 dx [298]))) 4t_cv.cpp:123 142 {*extendsidi2_rex64}
     (nil))
(insn 250 249 251 14 (parallel [
            (set (reg:DI 1 dx [299])
                (mult:DI (reg:DI 1 dx [297])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 307 {*muldi3_1}
     (nil))
(insn 251 250 252 14 (parallel [
            (set (reg:DI 1 dx [300])
                (plus:DI (reg:DI 1 dx [299])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 221 {*adddi_1}
     (nil))
(insn 252 251 253 14 (parallel [
            (set (reg:DI 0 ax [301])
                (plus:DI (reg:DI 0 ax [296])
                    (reg:DI 1 dx [300])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 221 {*adddi_1}
     (nil))
(insn 253 252 254 14 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.5600 ] [98])
                (plus:DI (reg:DI 0 ax [301])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 221 {*adddi_1}
     (nil))
(insn 254 253 687 14 (set (reg:DI 4 si [407])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) 4t_cv.cpp:123 89 {*movdi_internal}
     (nil))
(insn 687 254 255 14 (set (mem:DI (reg/f:DI 0 ax [orig:98 D.5600 ] [98]) [0 MEM[(void *)_33]+0 S8 A8])
        (reg:DI 4 si [407])) 4t_cv.cpp:123 89 {*movdi_internal}
     (nil))
(insn 255 687 688 14 (set (reg:DI 3 bx [408])
        (const_int 7593480468811836769 [0x6961764120656d61])) 4t_cv.cpp:123 89 {*movdi_internal}
     (nil))
(insn 688 255 256 14 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:98 D.5600 ] [98])
                (const_int 8 [0x8])) [0 MEM[(void *)_33]+8 S8 A8])
        (reg:DI 3 bx [408])) 4t_cv.cpp:123 89 {*movdi_internal}
     (nil))
(insn 256 688 257 14 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:98 D.5600 ] [98])
                (const_int 16 [0x10])) [0 MEM[(void *)_33]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) 4t_cv.cpp:123 90 {*movsi_internal}
     (nil))
(insn 257 256 258 14 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:98 D.5600 ] [98])
                (const_int 20 [0x14])) [0 MEM[(void *)_33]+20 S2 A8])
        (const_int 101 [0x65])) 4t_cv.cpp:123 92 {*movhi_internal}
     (nil))
(insn 258 257 259 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:121 220 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              13 [100.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 259 258 260 15 9 "" [1 uses])
(note 260 259 262 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 262 260 263 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) 4t_cv.cpp:121 7 {*cmpsi_1}
     (nil))
(jump_insn 263 262 264 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 261)
            (pc))) 4t_cv.cpp:121 596 {*jcc_1}
     (nil)
 -> 261)
;;  succ:       14
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 99 302 303 304 305 306 307 308 309 310
(note 264 263 265 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 16 (parallel [
            (set (reg:DI 37 r8 [302])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2844 [0xfffffffffffff4e4])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:253 221 {*adddi_1}
     (nil))
(insn 266 265 267 16 (set (reg:DI 5 di [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2864 [0xfffffffffffff4d0])) [0 argv+0 S8 A64])) 4t_cv.cpp:253 89 {*movdi_internal}
     (nil))
(insn 267 266 268 16 (set (reg:SI 2 cx [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2852 [0xfffffffffffff4dc])) [0 argc+0 S4 A32])) 4t_cv.cpp:253 90 {*movsi_internal}
     (nil))
(insn 268 267 269 16 (parallel [
            (set (reg:DI 1 dx [305])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:253 221 {*adddi_1}
     (nil))
(insn 269 268 270 16 (parallel [
            (set (reg:DI 4 si [306])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:253 221 {*adddi_1}
     (nil))
(insn 270 269 271 16 (parallel [
            (set (reg:DI 0 ax [307])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2720 [0xfffffffffffff560])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:253 221 {*adddi_1}
     (nil))
(insn 271 270 272 16 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [302])) 4t_cv.cpp:253 89 {*movdi_internal}
     (nil))
(insn 272 271 276 16 (set (reg:DI 37 r8)
        (reg:DI 5 di [303])) 4t_cv.cpp:253 89 {*movdi_internal}
     (nil))
(insn 276 272 277 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [307])) 4t_cv.cpp:253 89 {*movdi_internal}
     (nil))
(call_insn 277 276 278 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z12command_lineP10PreprocessP7IOFilesP12Procpar_infoiPPcPi") [flags 0x41]  <function_decl 0x2b3c101b4100 command_line>) [0 command_line S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:253 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 278 277 279 16 (parallel [
            (set (reg:DI 0 ax [308])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:263 221 {*adddi_1}
     (nil))
(insn 279 278 280 16 (parallel [
            (set (reg:DI 1 dx [309])
                (plus:DI (reg:DI 0 ax [308])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:263 221 {*adddi_1}
     (nil))
(insn 280 279 281 16 (parallel [
            (set (reg:DI 0 ax [310])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:263 221 {*adddi_1}
     (nil))
(insn 281 280 282 16 (set (reg:DI 4 si)
        (reg:DI 1 dx [309])) 4t_cv.cpp:263 89 {*movdi_internal}
     (nil))
(insn 282 281 283 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [310])) 4t_cv.cpp:263 89 {*movdi_internal}
     (nil))
(call_insn 283 282 284 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z12read_procparP12Procpar_infoPc") [flags 0x41]  <function_decl 0x2b3c101b4200 read_procpar>) [0 read_procpar S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:263 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 284 283 285 16 (set (reg:SI 0 ax [orig:99 D.5593 ] [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:270 90 {*movsi_internal}
     (nil))
(insn 285 284 286 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:99 D.5593 ] [99])
            (const_int 1 [0x1]))) 4t_cv.cpp:270 7 {*cmpsi_1}
     (nil))
(jump_insn 286 285 287 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 295)
            (pc))) 4t_cv.cpp:270 596 {*jcc_1}
     (nil)
 -> 295)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 311 312 313 314
(note 287 286 288 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 17 (parallel [
            (set (reg:DI 0 ax [311])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:271 221 {*adddi_1}
     (nil))
(insn 289 288 290 17 (parallel [
            (set (reg:DI 1 dx [312])
                (plus:DI (reg:DI 0 ax [311])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:271 221 {*adddi_1}
     (nil))
(insn 290 289 291 17 (parallel [
            (set (reg:DI 0 ax [313])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:271 221 {*adddi_1}
     (nil))
(insn 291 290 292 17 (parallel [
            (set (reg:DI 0 ax [314])
                (plus:DI (reg:DI 0 ax [313])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:271 221 {*adddi_1}
     (nil))
(insn 292 291 293 17 (set (reg:DI 4 si)
        (reg:DI 1 dx [312])) 4t_cv.cpp:271 89 {*movdi_internal}
     (nil))
(insn 293 292 294 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [314])) 4t_cv.cpp:271 89 {*movdi_internal}
     (nil))
(call_insn 294 293 295 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z12read_procparP12Procpar_infoPc") [flags 0x41]  <function_decl 0x2b3c101b4200 read_procpar>) [0 read_procpar S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:271 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 100 101
(code_label 295 294 296 18 11 "" [1 uses])
(note 296 295 297 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x2b3c1021a5f0 *.LC16>)) 4t_cv.cpp:275 89 {*movdi_internal}
     (nil))
(call_insn 298 297 299 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:275 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 299 298 300 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11IsBigEndianv") [flags 0x3]  <function_decl 0x2b3c101d9500 IsBigEndian>) [0 IsBigEndian S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:277 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 300 299 301 18 (set (reg:SI 0 ax [orig:100 D.5593 ] [100])
        (reg:SI 0 ax)) 4t_cv.cpp:277 90 {*movsi_internal}
     (nil))
(insn 301 300 302 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:100 D.5593 ] [100])
            (const_int 0 [0]))) 4t_cv.cpp:277 3 {*cmpsi_ccno_1}
     (nil))
(insn 302 301 303 18 (set (reg:QI 0 ax [orig:101 D.5594 ] [101])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) 4t_cv.cpp:277 592 {*setcc_qi}
     (nil))
(insn 303 302 304 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:101 D.5594 ] [101])
            (const_int 0 [0]))) 4t_cv.cpp:277 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 304 303 305 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 310)
            (pc))) 4t_cv.cpp:277 596 {*jcc_1}
     (nil)
 -> 310)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 305 304 306 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 306 305 307 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x2b3c1021a688 *.LC17>)) 4t_cv.cpp:278 89 {*movdi_internal}
     (nil))
(call_insn 307 306 652 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:278 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 652 307 653 19 (set (pc)
        (label_ref 314)) 636 {jump}
     (nil)
 -> 314)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 653 652 310)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(code_label 310 653 311 20 12 "" [1 uses])
(note 311 310 312 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x2b3c1021a720 *.LC18>)) 4t_cv.cpp:281 89 {*movdi_internal}
     (nil))
(call_insn 313 312 314 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:281 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 315 316 317 318 319 320 321 322 323 324 325
(code_label 314 313 315 21 13 "" [1 uses])
(note 315 314 316 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 316 315 317 21 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 317 316 318 21 (parallel [
            (set (reg:DI 38 r9 [315])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2784 [0xfffffffffffff520])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 318 317 319 21 (set (reg:DI 37 r8 [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])) 4t_cv.cpp:284 89 {*movdi_internal}
     (nil))
(insn 319 318 320 21 (set (reg:DI 2 cx [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:284 89 {*movdi_internal}
     (nil))
(insn 320 319 321 21 (parallel [
            (set (reg:DI 1 dx [318])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 321 320 322 21 (parallel [
            (set (reg:DI 4 si [319])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2720 [0xfffffffffffff560])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 322 321 323 21 (parallel [
            (set (reg:DI 0 ax [320])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2844 [0xfffffffffffff4e4])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 323 322 324 21 (parallel [
            (set (reg:DI 5 di [321])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2832 [0xfffffffffffff4f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 324 323 325 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [321])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 325 324 326 21 (parallel [
            (set (reg:DI 5 di [322])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2736 [0xfffffffffffff550])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 326 325 327 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [322])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 327 326 328 21 (parallel [
            (set (reg:DI 5 di [323])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2752 [0xfffffffffffff540])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 328 327 329 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [323])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 329 328 330 21 (parallel [
            (set (reg:DI 5 di [324])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2800 [0xfffffffffffff510])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 330 329 331 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [324])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 331 330 332 21 (parallel [
            (set (reg:DI 5 di [325])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2768 [0xfffffffffffff530])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (nil))
(insn 332 331 338 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [325])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 338 332 339 21 (set (reg:DI 5 di)
        (reg:DI 0 ax [320])) 4t_cv.cpp:284 89 {*movdi_internal}
     (nil))
(call_insn 339 338 340 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9read_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSI_P12Endian_Check") [flags 0x41]  <function_decl 0x2b3c101b4300 read_data>) [0 read_data S1 A8])
            (const_int 48 [0x30]))) 4t_cv.cpp:284 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 340 339 341 21 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 341 340 654 21 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:289 90 {*movsi_internal}
     (nil))
(jump_insn 654 341 655 21 (set (pc)
        (label_ref 461)) 4t_cv.cpp:289 636 {jump}
     (nil)
 -> 461)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 655 654 465)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 104 105 106 107 108 326 327
(code_label 465 655 344 22 22 "" [1 uses])
(note 344 465 345 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 345 344 346 22 (set (reg:SI 0 ax [326])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:295 90 {*movsi_internal}
     (nil))
(insn 346 345 347 22 (set (reg:DI 0 ax [orig:104 D.5595 ] [104])
        (sign_extend:DI (reg:SI 0 ax [326]))) 4t_cv.cpp:295 142 {*extendsidi2_rex64}
     (nil))
(insn 347 346 348 22 (parallel [
            (set (reg:DI 1 dx [orig:105 D.5595 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 D.5595 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:295 497 {*ashldi3_1}
     (nil))
(insn 348 347 349 22 (set (reg/f:DI 0 ax [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:295 89 {*movdi_internal}
     (nil))
(insn 349 348 350 22 (parallel [
            (set (reg/f:DI 0 ax [orig:106 D.5596 ] [106])
                (plus:DI (reg/f:DI 0 ax [327])
                    (reg:DI 1 dx [orig:105 D.5595 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:295 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:105 D.5595 ] [105]))
        (nil)))
(insn 350 349 351 22 (set (reg/f:DI 0 ax [orig:107 D.5601 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 D.5596 ] [106]) [0 *_44+0 S8 A64])) 4t_cv.cpp:295 89 {*movdi_internal}
     (nil))
(insn 351 350 352 22 (set (reg:HI 0 ax [orig:108 D.5602 ] [108])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:107 D.5601 ] [107])
                (const_int 26 [0x1a])) [0 _45->status.number+0 S2 A16])) 4t_cv.cpp:295 92 {*movhi_internal}
     (nil))
(insn 352 351 353 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:108 D.5602 ] [108])
            (const_int 69 [0x45]))) 4t_cv.cpp:295 6 {*cmphi_1}
     (nil))
(jump_insn 353 352 354 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 392)
            (pc))) 4t_cv.cpp:295 596 {*jcc_1}
     (nil)
 -> 392)
;;  succ:       23 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 354 353 355 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 656 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:296 90 {*movsi_internal}
     (nil))
(jump_insn 656 355 657 23 (set (pc)
        (label_ref 377)) 4t_cv.cpp:296 636 {jump}
     (nil)
 -> 377)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 657 656 386)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 116 117 118 119 120 121 122 123 328 329 330 331 332 333
(code_label 386 657 358 24 17 "" [1 uses])
(note 358 386 359 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 359 358 360 24 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:298 90 {*movsi_internal}
     (nil))
(insn 360 359 361 24 (set (reg:DI 0 ax [328])
        (sign_extend:DI (reg:SI 0 ax [329]))) 4t_cv.cpp:298 142 {*extendsidi2_rex64}
     (nil))
(insn 361 360 362 24 (set (reg/f:DI 0 ax [orig:114 D.5603 ] [114])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [328])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2752 [0xfffffffffffff540])) [0 out_data S8 A64])) 4t_cv.cpp:298 89 {*movdi_internal}
     (nil))
(insn 362 361 363 24 (set (reg:SI 1 dx [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])) 4t_cv.cpp:298 90 {*movsi_internal}
     (nil))
(insn 363 362 364 24 (set (reg:DI 1 dx [orig:115 D.5595 ] [115])
        (sign_extend:DI (reg:SI 1 dx [330]))) 4t_cv.cpp:298 142 {*extendsidi2_rex64}
     (nil))
(insn 364 363 365 24 (parallel [
            (set (reg:DI 1 dx [orig:116 D.5595 ] [116])
                (ashift:DI (reg:DI 1 dx [orig:115 D.5595 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:298 497 {*ashldi3_1}
     (nil))
(insn 365 364 366 24 (parallel [
            (set (reg/f:DI 1 dx [orig:117 D.5603 ] [117])
                (plus:DI (reg:DI 1 dx [orig:116 D.5595 ] [116])
                    (reg/f:DI 0 ax [orig:114 D.5603 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:298 221 {*adddi_1}
     (nil))
(insn 366 365 367 24 (set (reg:SI 0 ax [332])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:298 90 {*movsi_internal}
     (nil))
(insn 367 366 368 24 (set (reg:DI 0 ax [331])
        (sign_extend:DI (reg:SI 0 ax [332]))) 4t_cv.cpp:298 142 {*extendsidi2_rex64}
     (nil))
(insn 368 367 369 24 (set (reg/f:DI 0 ax [orig:118 D.5604 ] [118])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [331])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2784 [0xfffffffffffff520])) [0 switch_data[i_4].lo+0 S8 A64])) 4t_cv.cpp:298 89 {*movdi_internal}
     (nil))
(insn 369 368 370 24 (set (reg:SI 2 cx [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])) 4t_cv.cpp:298 90 {*movsi_internal}
     (nil))
(insn 370 369 371 24 (set (reg:DI 2 cx [orig:119 D.5595 ] [119])
        (sign_extend:DI (reg:SI 2 cx [333]))) 4t_cv.cpp:298 142 {*extendsidi2_rex64}
     (nil))
(insn 371 370 372 24 (parallel [
            (set (reg:DI 2 cx [orig:120 D.5595 ] [120])
                (ashift:DI (reg:DI 2 cx [orig:119 D.5595 ] [119])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:298 497 {*ashldi3_1}
     (nil))
(insn 372 371 373 24 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.5604 ] [121])
                (plus:DI (reg/f:DI 0 ax [orig:118 D.5604 ] [118])
                    (reg:DI 2 cx [orig:120 D.5595 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:298 221 {*adddi_1}
     (nil))
(insn 373 372 374 24 (set (reg:DI 0 ax [orig:122 D.5605 ] [122])
        (mem:DI (reg/f:DI 0 ax [orig:121 D.5604 ] [121]) [0 *_60+0 S8 A64])) 4t_cv.cpp:298 89 {*movdi_internal}
     (nil))
(insn 374 373 689 24 (set (reg:SF 21 xmm0 [orig:123 D.5606 ] [123])
        (float:SF (reg:DI 0 ax [orig:122 D.5605 ] [122]))) 4t_cv.cpp:298 200 {*floatdisf2_sse}
     (nil))
(insn 689 374 375 24 (set (reg:SF 0 ax [orig:123 D.5606 ] [123])
        (reg:SF 21 xmm0 [orig:123 D.5606 ] [123])) 4t_cv.cpp:298 129 {*movsf_internal}
     (nil))
(insn 375 689 376 24 (set (mem:SF (reg/f:DI 1 dx [orig:117 D.5603 ] [117]) [0 *_56+0 S4 A32])
        (reg:SF 0 ax [orig:123 D.5606 ] [123])) 4t_cv.cpp:298 129 {*movsf_internal}
     (nil))
(insn 376 375 377 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:296 220 {*addsi_1}
     (nil))
;;  succ:       25 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU,DFS_BACK)
;;              23 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 111 112 113 334 335
(code_label 377 376 378 25 16 "" [1 uses])
(note 378 377 379 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 379 378 380 25 (set (reg:SI 0 ax [334])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:296 90 {*movsi_internal}
     (nil))
(insn 380 379 381 25 (set (reg:DI 0 ax [orig:109 D.5595 ] [109])
        (sign_extend:DI (reg:SI 0 ax [334]))) 4t_cv.cpp:296 142 {*extendsidi2_rex64}
     (nil))
(insn 381 380 382 25 (parallel [
            (set (reg:DI 1 dx [orig:110 D.5595 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 D.5595 ] [109])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:296 497 {*ashldi3_1}
     (nil))
(insn 382 381 383 25 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:296 89 {*movdi_internal}
     (nil))
(insn 383 382 384 25 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.5596 ] [111])
                (plus:DI (reg/f:DI 0 ax [335])
                    (reg:DI 1 dx [orig:110 D.5595 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:296 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.5595 ] [110]))
        (nil)))
(insn 384 383 385 25 (set (reg/f:DI 0 ax [orig:112 D.5601 ] [112])
        (mem/f:DI (reg/f:DI 0 ax [orig:111 D.5596 ] [111]) [0 *_50+0 S8 A64])) 4t_cv.cpp:296 89 {*movdi_internal}
     (nil))
(insn 385 384 387 25 (set (reg:SI 0 ax [orig:113 D.5593 ] [113])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:112 D.5601 ] [112])
                (const_int 8 [0x8])) [0 _51->np.number+0 S4 A32])) 4t_cv.cpp:296 90 {*movsi_internal}
     (nil))
(insn 387 385 388 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:113 D.5593 ] [113])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32]))) 4t_cv.cpp:296 7 {*cmpsi_1}
     (nil))
(jump_insn 388 387 658 25 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 386)
            (pc))) 4t_cv.cpp:296 596 {*jcc_1}
     (nil)
 -> 386)
;;  succ:       24
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 658 388 659 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(jump_insn 659 658 660 26 (set (pc)
        (label_ref 458)) 636 {jump}
     (nil)
 -> 458)
;;  succ:       33 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 660 659 392)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 127 128 336 337
(code_label 392 660 393 27 15 "" [1 uses])
(note 393 392 394 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 394 393 395 27 (set (reg:SI 0 ax [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:305 90 {*movsi_internal}
     (nil))
(insn 395 394 396 27 (set (reg:DI 0 ax [orig:124 D.5595 ] [124])
        (sign_extend:DI (reg:SI 0 ax [336]))) 4t_cv.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 396 395 397 27 (parallel [
            (set (reg:DI 1 dx [orig:125 D.5595 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 D.5595 ] [124])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:305 497 {*ashldi3_1}
     (nil))
(insn 397 396 398 27 (set (reg/f:DI 0 ax [337])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:305 89 {*movdi_internal}
     (nil))
(insn 398 397 399 27 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.5596 ] [126])
                (plus:DI (reg/f:DI 0 ax [337])
                    (reg:DI 1 dx [orig:125 D.5595 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:305 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:125 D.5595 ] [125]))
        (nil)))
(insn 399 398 400 27 (set (reg/f:DI 0 ax [orig:127 D.5601 ] [127])
        (mem/f:DI (reg/f:DI 0 ax [orig:126 D.5596 ] [126]) [0 *_66+0 S8 A64])) 4t_cv.cpp:305 89 {*movdi_internal}
     (nil))
(insn 400 399 401 27 (set (reg:HI 0 ax [orig:128 D.5602 ] [128])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:127 D.5601 ] [127])
                (const_int 26 [0x1a])) [0 _67->status.number+0 S2 A16])) 4t_cv.cpp:305 92 {*movhi_internal}
     (nil))
(insn 401 400 402 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:128 D.5602 ] [128])
            (const_int 73 [0x49]))) 4t_cv.cpp:305 6 {*cmphi_1}
     (nil))
(jump_insn 402 401 403 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 423)
            (pc))) 4t_cv.cpp:305 596 {*jcc_1}
     (nil)
 -> 423)
;;  succ:       30
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131 132 133 338 339
(note 403 402 404 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 404 403 405 28 (set (reg:SI 0 ax [338])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:305 90 {*movsi_internal}
     (nil))
(insn 405 404 406 28 (set (reg:DI 0 ax [orig:129 D.5595 ] [129])
        (sign_extend:DI (reg:SI 0 ax [338]))) 4t_cv.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 406 405 407 28 (parallel [
            (set (reg:DI 1 dx [orig:130 D.5595 ] [130])
                (ashift:DI (reg:DI 0 ax [orig:129 D.5595 ] [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:305 497 {*ashldi3_1}
     (nil))
(insn 407 406 408 28 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:305 89 {*movdi_internal}
     (nil))
(insn 408 407 409 28 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.5596 ] [131])
                (plus:DI (reg/f:DI 0 ax [339])
                    (reg:DI 1 dx [orig:130 D.5595 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:305 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.5595 ] [130]))
        (nil)))
(insn 409 408 410 28 (set (reg/f:DI 0 ax [orig:132 D.5601 ] [132])
        (mem/f:DI (reg/f:DI 0 ax [orig:131 D.5596 ] [131]) [0 *_71+0 S8 A64])) 4t_cv.cpp:305 89 {*movdi_internal}
     (nil))
(insn 410 409 411 28 (set (reg:HI 0 ax [orig:133 D.5602 ] [133])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:132 D.5601 ] [132])
                (const_int 26 [0x1a])) [0 _72->status.number+0 S2 A16])) 4t_cv.cpp:305 92 {*movhi_internal}
     (nil))
(insn 411 410 412 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:133 D.5602 ] [133])
            (const_int 2073 [0x819]))) 4t_cv.cpp:305 6 {*cmphi_1}
     (nil))
(jump_insn 412 411 413 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 423)
            (pc))) 4t_cv.cpp:305 596 {*jcc_1}
     (nil)
 -> 423)
;;  succ:       30
;;              29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 134 135 136 137 138 340 341
(note 413 412 414 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 414 413 415 29 (set (reg:SI 0 ax [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:306 90 {*movsi_internal}
     (nil))
(insn 415 414 416 29 (set (reg:DI 0 ax [orig:134 D.5595 ] [134])
        (sign_extend:DI (reg:SI 0 ax [340]))) 4t_cv.cpp:306 142 {*extendsidi2_rex64}
     (nil))
(insn 416 415 417 29 (parallel [
            (set (reg:DI 1 dx [orig:135 D.5595 ] [135])
                (ashift:DI (reg:DI 0 ax [orig:134 D.5595 ] [134])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:306 497 {*ashldi3_1}
     (nil))
(insn 417 416 418 29 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:306 89 {*movdi_internal}
     (nil))
(insn 418 417 419 29 (parallel [
            (set (reg/f:DI 0 ax [orig:136 D.5596 ] [136])
                (plus:DI (reg/f:DI 0 ax [341])
                    (reg:DI 1 dx [orig:135 D.5595 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:306 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:135 D.5595 ] [135]))
        (nil)))
(insn 419 418 420 29 (set (reg/f:DI 0 ax [orig:137 D.5601 ] [137])
        (mem/f:DI (reg/f:DI 0 ax [orig:136 D.5596 ] [136]) [0 *_76+0 S8 A64])) 4t_cv.cpp:306 89 {*movdi_internal}
     (nil))
(insn 420 419 421 29 (set (reg:HI 0 ax [orig:138 D.5602 ] [138])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:137 D.5601 ] [137])
                (const_int 26 [0x1a])) [0 _77->status.number+0 S2 A16])) 4t_cv.cpp:306 92 {*movhi_internal}
     (nil))
(insn 421 420 422 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:138 D.5602 ] [138])
            (const_int 201 [0xc9]))) 4t_cv.cpp:306 6 {*cmphi_1}
     (nil))
(jump_insn 422 421 423 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 458)
            (pc))) 4t_cv.cpp:306 596 {*jcc_1}
     (nil)
 -> 458)
;;  succ:       30 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;;              28
;;              29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 423 422 424 30 19 "" [2 uses])
(note 424 423 425 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 425 424 661 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:307 90 {*movsi_internal}
     (nil))
(jump_insn 661 425 662 30 (set (pc)
        (label_ref 446)) 4t_cv.cpp:307 636 {jump}
     (nil)
 -> 446)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 662 661 455)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 146 147 148 149 150 151 152 342 343 344 345 346 347
(code_label 455 662 428 31 21 "" [1 uses])
(note 428 455 429 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 429 428 430 31 (set (reg:SI 0 ax [343])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:309 90 {*movsi_internal}
     (nil))
(insn 430 429 431 31 (set (reg:DI 0 ax [342])
        (sign_extend:DI (reg:SI 0 ax [343]))) 4t_cv.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 431 430 432 31 (set (reg/f:DI 0 ax [orig:144 D.5603 ] [144])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [342])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2752 [0xfffffffffffff540])) [0 out_data S8 A64])) 4t_cv.cpp:309 89 {*movdi_internal}
     (nil))
(insn 432 431 433 31 (set (reg:SI 1 dx [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])) 4t_cv.cpp:309 90 {*movsi_internal}
     (nil))
(insn 433 432 434 31 (set (reg:DI 1 dx [orig:145 D.5595 ] [145])
        (sign_extend:DI (reg:SI 1 dx [344]))) 4t_cv.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 434 433 435 31 (parallel [
            (set (reg:DI 1 dx [orig:146 D.5595 ] [146])
                (ashift:DI (reg:DI 1 dx [orig:145 D.5595 ] [145])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:309 497 {*ashldi3_1}
     (nil))
(insn 435 434 436 31 (parallel [
            (set (reg/f:DI 1 dx [orig:147 D.5603 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 D.5595 ] [146])
                    (reg/f:DI 0 ax [orig:144 D.5603 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:309 221 {*adddi_1}
     (nil))
(insn 436 435 437 31 (set (reg:SI 0 ax [346])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:309 90 {*movsi_internal}
     (nil))
(insn 437 436 438 31 (set (reg:DI 0 ax [345])
        (sign_extend:DI (reg:SI 0 ax [346]))) 4t_cv.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 438 437 439 31 (set (reg/f:DI 0 ax [orig:148 D.5603 ] [148])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [345])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2784 [0xfffffffffffff520])) [0 switch_data[i_4].fl+0 S8 A64])) 4t_cv.cpp:309 89 {*movdi_internal}
     (nil))
(insn 439 438 440 31 (set (reg:SI 2 cx [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])) 4t_cv.cpp:309 90 {*movsi_internal}
     (nil))
(insn 440 439 441 31 (set (reg:DI 2 cx [orig:149 D.5595 ] [149])
        (sign_extend:DI (reg:SI 2 cx [347]))) 4t_cv.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 441 440 442 31 (parallel [
            (set (reg:DI 2 cx [orig:150 D.5595 ] [150])
                (ashift:DI (reg:DI 2 cx [orig:149 D.5595 ] [149])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:309 497 {*ashldi3_1}
     (nil))
(insn 442 441 443 31 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.5603 ] [151])
                (plus:DI (reg/f:DI 0 ax [orig:148 D.5603 ] [148])
                    (reg:DI 2 cx [orig:150 D.5595 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:309 221 {*adddi_1}
     (nil))
(insn 443 442 444 31 (set (reg:SF 0 ax [orig:152 D.5606 ] [152])
        (mem:SF (reg/f:DI 0 ax [orig:151 D.5603 ] [151]) [0 *_92+0 S4 A32])) 4t_cv.cpp:309 129 {*movsf_internal}
     (nil))
(insn 444 443 445 31 (set (mem:SF (reg/f:DI 1 dx [orig:147 D.5603 ] [147]) [0 *_88+0 S4 A32])
        (reg:SF 0 ax [orig:152 D.5606 ] [152])) 4t_cv.cpp:309 129 {*movsf_internal}
     (nil))
(insn 445 444 446 31 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:307 220 {*addsi_1}
     (nil))
;;  succ:       32 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU,DFS_BACK)
;;              30 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 139 140 141 142 143 348 349
(code_label 446 445 447 32 20 "" [1 uses])
(note 447 446 448 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 448 447 449 32 (set (reg:SI 0 ax [348])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:307 90 {*movsi_internal}
     (nil))
(insn 449 448 450 32 (set (reg:DI 0 ax [orig:139 D.5595 ] [139])
        (sign_extend:DI (reg:SI 0 ax [348]))) 4t_cv.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 450 449 451 32 (parallel [
            (set (reg:DI 1 dx [orig:140 D.5595 ] [140])
                (ashift:DI (reg:DI 0 ax [orig:139 D.5595 ] [139])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:307 497 {*ashldi3_1}
     (nil))
(insn 451 450 452 32 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:307 89 {*movdi_internal}
     (nil))
(insn 452 451 453 32 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.5596 ] [141])
                (plus:DI (reg/f:DI 0 ax [349])
                    (reg:DI 1 dx [orig:140 D.5595 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:307 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:140 D.5595 ] [140]))
        (nil)))
(insn 453 452 454 32 (set (reg/f:DI 0 ax [orig:142 D.5601 ] [142])
        (mem/f:DI (reg/f:DI 0 ax [orig:141 D.5596 ] [141]) [0 *_82+0 S8 A64])) 4t_cv.cpp:307 89 {*movdi_internal}
     (nil))
(insn 454 453 456 32 (set (reg:SI 0 ax [orig:143 D.5593 ] [143])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:142 D.5601 ] [142])
                (const_int 8 [0x8])) [0 _83->np.number+0 S4 A32])) 4t_cv.cpp:307 90 {*movsi_internal}
     (nil))
(insn 456 454 457 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:143 D.5593 ] [143])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32]))) 4t_cv.cpp:307 7 {*cmpsi_1}
     (nil))
(jump_insn 457 456 458 32 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 455)
            (pc))) 4t_cv.cpp:307 596 {*jcc_1}
     (nil)
 -> 455)
;;  succ:       31
;;              33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;;              29
;;              26 [100.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 458 457 459 33 18 "" [2 uses])
(note 459 458 460 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 460 459 461 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:289 220 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              21 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 103
(code_label 461 460 462 34 14 "" [1 uses])
(note 462 461 463 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 463 462 464 34 (set (reg:SI 0 ax [orig:102 D.5593 ] [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:289 90 {*movsi_internal}
     (nil))
(insn 464 463 466 34 (parallel [
            (set (reg:SI 0 ax [orig:103 D.5593 ] [103])
                (plus:SI (reg:SI 0 ax [orig:102 D.5593 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:289 220 {*addsi_1}
     (nil))
(insn 466 464 467 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:103 D.5593 ] [103])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32]))) 4t_cv.cpp:289 7 {*cmpsi_1}
     (nil))
(jump_insn 467 466 468 34 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 465)
            (pc))) 4t_cv.cpp:289 596 {*jcc_1}
     (nil)
 -> 465)
;;  succ:       22
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 350 351 352 353 354
(note 468 467 469 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 35 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x2b3c1021a850 *.LC19>)) 4t_cv.cpp:320 89 {*movdi_internal}
     (nil))
(call_insn 470 469 471 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:320 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 471 470 472 35 (parallel [
            (set (reg:DI 5 di [350])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2736 [0xfffffffffffff550])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 221 {*adddi_1}
     (nil))
(insn 472 471 473 35 (parallel [
            (set (reg:DI 2 cx [351])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2752 [0xfffffffffffff540])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 221 {*adddi_1}
     (nil))
(insn 473 472 474 35 (parallel [
            (set (reg:DI 1 dx [352])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 221 {*adddi_1}
     (nil))
(insn 474 473 475 35 (parallel [
            (set (reg:DI 4 si [353])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2720 [0xfffffffffffff560])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 221 {*adddi_1}
     (nil))
(insn 475 474 476 35 (parallel [
            (set (reg:DI 0 ax [354])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2844 [0xfffffffffffff4e4])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 221 {*adddi_1}
     (nil))
(insn 476 475 480 35 (set (reg:DI 37 r8)
        (reg:DI 5 di [350])) 4t_cv.cpp:321 89 {*movdi_internal}
     (nil))
(insn 480 476 481 35 (set (reg:DI 5 di)
        (reg:DI 0 ax [354])) 4t_cv.cpp:321 89 {*movdi_internal}
     (nil))
(call_insn 481 480 482 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11pre_processPiP10PreprocessP12Procpar_infoPPfS5_") [flags 0x41]  <function_decl 0x2b3c101b4a00 pre_process>) [0 pre_process S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:321 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 482 481 483 35 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x2b3c1021a8e8 *.LC20>)) 4t_cv.cpp:324 89 {*movdi_internal}
     (nil))
(call_insn 483 482 484 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:324 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 484 483 663 35 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:325 90 {*movsi_internal}
     (nil))
(jump_insn 663 484 664 35 (set (pc)
        (label_ref 535)) 4t_cv.cpp:325 636 {jump}
     (nil)
 -> 535)
;;  succ:       38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 664 663 539)
;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 155 156 157 158 159 160 161 162 163 164 165 166 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374
(code_label 539 664 487 36 24 "" [1 uses])
(note 487 539 488 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 488 487 489 36 (parallel [
            (set (reg:DI 2 cx [355])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2720 [0xfffffffffffff560])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (nil))
(insn 489 488 490 36 (set (reg:SI 0 ax [357])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:327 90 {*movsi_internal}
     (nil))
(insn 490 489 491 36 (set (reg:DI 1 dx [356])
        (sign_extend:DI (reg:SI 0 ax [357]))) 4t_cv.cpp:327 142 {*extendsidi2_rex64}
     (nil))
(insn 491 490 492 36 (set (reg:DI 0 ax [358])
        (reg:DI 1 dx [356])) 4t_cv.cpp:327 89 {*movdi_internal}
     (nil))
(insn 492 491 493 36 (parallel [
            (set (reg:DI 0 ax [358])
                (ashift:DI (reg:DI 0 ax [358])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 497 {*ashldi3_1}
     (nil))
(insn 493 492 494 36 (parallel [
            (set (reg:DI 0 ax [358])
                (plus:DI (reg:DI 0 ax [358])
                    (reg:DI 1 dx [356])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [356])
            (const_int 9 [0x9]))
        (nil)))
(insn 494 493 495 36 (parallel [
            (set (reg:DI 0 ax [359])
                (ashift:DI (reg:DI 0 ax [358])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 497 {*ashldi3_1}
     (nil))
(insn 495 494 496 36 (set (reg:DI 0 ax [358])
        (reg:DI 0 ax [359])) 4t_cv.cpp:327 89 {*movdi_internal}
     (nil))
(insn 496 495 497 36 (parallel [
            (set (reg/f:DI 4 si [orig:155 D.5607 ] [155])
                (plus:DI (reg:DI 2 cx [355])
                    (reg:DI 0 ax [358])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (nil))
(insn 497 496 498 36 (parallel [
            (set (reg:DI 1 dx [360])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (nil))
(insn 498 497 499 36 (set (reg:SI 0 ax [362])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:327 90 {*movsi_internal}
     (nil))
(insn 499 498 500 36 (set (reg:DI 0 ax [361])
        (sign_extend:DI (reg:SI 0 ax [362]))) 4t_cv.cpp:327 142 {*extendsidi2_rex64}
     (nil))
(insn 500 499 501 36 (parallel [
            (set (reg:DI 0 ax [363])
                (mult:DI (reg:DI 0 ax [361])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 307 {*muldi3_1}
     (nil))
(insn 501 500 502 36 (parallel [
            (set (reg/f:DI 38 r9 [orig:156 D.5608 ] [156])
                (plus:DI (reg:DI 1 dx [360])
                    (reg:DI 0 ax [363])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (nil))
(insn 502 501 503 36 (set (reg:SI 0 ax [364])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:326 90 {*movsi_internal}
     (nil))
(insn 503 502 504 36 (set (reg:DI 0 ax [orig:157 D.5595 ] [157])
        (sign_extend:DI (reg:SI 0 ax [364]))) 4t_cv.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 504 503 505 36 (parallel [
            (set (reg:DI 1 dx [orig:158 D.5595 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.5595 ] [157])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 497 {*ashldi3_1}
     (nil))
(insn 505 504 506 36 (set (reg/f:DI 0 ax [365])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 506 505 507 36 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.5598 ] [159])
                (plus:DI (reg/f:DI 0 ax [365])
                    (reg:DI 1 dx [orig:158 D.5595 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2792 [0xfffffffffffff518])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.5595 ] [158]))
        (nil)))
(insn 507 506 508 36 (set (reg/f:DI 2 cx [orig:160 D.5609 ] [160])
        (mem/f:DI (reg/f:DI 0 ax [orig:159 D.5598 ] [159]) [0 *_103+0 S8 A64])) 4t_cv.cpp:327 89 {*movdi_internal}
     (nil))
(insn 508 507 509 36 (set (reg:SI 0 ax [366])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:326 90 {*movsi_internal}
     (nil))
(insn 509 508 510 36 (set (reg:DI 0 ax [orig:161 D.5595 ] [161])
        (sign_extend:DI (reg:SI 0 ax [366]))) 4t_cv.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 510 509 511 36 (parallel [
            (set (reg:DI 1 dx [orig:162 D.5595 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.5595 ] [161])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 497 {*ashldi3_1}
     (nil))
(insn 511 510 512 36 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 512 511 513 36 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.5596 ] [163])
                (plus:DI (reg/f:DI 0 ax [367])
                    (reg:DI 1 dx [orig:162 D.5595 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.5595 ] [162]))
        (nil)))
(insn 513 512 514 36 (set (reg/f:DI 1 dx [orig:164 D.5601 ] [164])
        (mem/f:DI (reg/f:DI 0 ax [orig:163 D.5596 ] [163]) [0 *_107+0 S8 A64])) 4t_cv.cpp:327 89 {*movdi_internal}
     (nil))
(insn 514 513 515 36 (set (reg:SI 0 ax [369])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:327 90 {*movsi_internal}
     (nil))
(insn 515 514 516 36 (set (reg:DI 0 ax [368])
        (sign_extend:DI (reg:SI 0 ax [369]))) 4t_cv.cpp:327 142 {*extendsidi2_rex64}
     (nil))
(insn 516 515 517 36 (set (reg/f:DI 0 ax [orig:165 D.5603 ] [165])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [368])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2752 [0xfffffffffffff540])) [0 out_data S8 A64])) 4t_cv.cpp:327 89 {*movdi_internal}
     (nil))
(insn 517 516 518 36 (parallel [
            (set (reg:DI 5 di [370])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (nil))
(insn 518 517 519 36 (set (reg:SI 37 r8 [372])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:327 90 {*movsi_internal}
     (nil))
(insn 519 518 520 36 (set (reg:DI 37 r8 [371])
        (sign_extend:DI (reg:SI 37 r8 [372]))) 4t_cv.cpp:327 142 {*extendsidi2_rex64}
     (nil))
(insn 520 519 521 36 (parallel [
            (set (reg:DI 37 r8 [373])
                (plus:DI (reg:DI 37 r8 [371])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (nil))
(insn 521 520 522 36 (parallel [
            (set (reg:DI 37 r8 [374])
                (ashift:DI (reg:DI 37 r8 [373])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 497 {*ashldi3_1}
     (nil))
(insn 522 521 523 36 (parallel [
            (set (reg/f:DI 5 di [orig:166 D.5600 ] [166])
                (plus:DI (reg:DI 5 di [370])
                    (reg:DI 37 r8 [374])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (nil))
(insn 523 522 524 36 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 524 523 526 36 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg/f:DI 4 si [orig:155 D.5607 ] [155])) 4t_cv.cpp:327 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 526 524 529 36 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) 4t_cv.cpp:327 90 {*movsi_internal}
     (nil))
(insn 529 526 531 36 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:165 D.5603 ] [165])) 4t_cv.cpp:327 89 {*movdi_internal}
     (nil))
(call_insn 531 529 532 36 (call (mem:QI (symbol_ref:DI ("_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess") [flags 0x41]  <function_decl 0x2b3c101b4800 fwrite_asc>) [0 fwrite_asc S1 A8])
        (const_int 16 [0x10])) 4t_cv.cpp:327 642 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 532 531 533 36 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 221 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 533 532 534 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 534 533 535 37 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:325 220 {*addsi_1}
     (nil))
;;  succ:       38 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU,DFS_BACK)
;;              35 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 154
(code_label 535 534 536 38 23 "" [1 uses])
(note 536 535 537 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 537 536 538 38 (set (reg:SI 0 ax [orig:153 D.5593 ] [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:325 90 {*movsi_internal}
     (nil))
(insn 538 537 540 38 (parallel [
            (set (reg:SI 0 ax [orig:154 D.5593 ] [154])
                (plus:SI (reg:SI 0 ax [orig:153 D.5593 ] [153])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:325 220 {*addsi_1}
     (nil))
(insn 540 538 541 38 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:154 D.5593 ] [154])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32]))) 4t_cv.cpp:325 7 {*cmpsi_1}
     (nil))
(jump_insn 541 540 542 38 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 539)
            (pc))) 4t_cv.cpp:325 596 {*jcc_1}
     (nil)
 -> 539)
;;  succ:       36
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 375 376 377 378
(note 542 541 543 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 543 542 544 39 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x2b3c1021a980 *.LC21>)) 4t_cv.cpp:331 89 {*movdi_internal}
     (nil))
(call_insn 544 543 545 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:331 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 545 544 546 39 (parallel [
            (set (reg:DI 0 ax [375])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:332 221 {*adddi_1}
     (nil))
(insn 546 545 547 39 (parallel [
            (set (reg:DI 0 ax [376])
                (plus:DI (reg:DI 0 ax [375])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:332 221 {*adddi_1}
     (nil))
(insn 547 546 548 39 (set (reg:DI 4 si)
        (reg:DI 0 ax [376])) 4t_cv.cpp:332 89 {*movdi_internal}
     (nil))
(insn 548 547 549 39 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x2b3c1021aa18 *.LC22>)) 4t_cv.cpp:332 89 {*movdi_internal}
     (nil))
(insn 549 548 550 39 (set (reg:QI 0 ax)
        (const_int 0 [0])) 4t_cv.cpp:332 93 {*movqi_internal}
     (nil))
(call_insn 550 549 551 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b3c0fee0e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:332 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 551 550 552 39 (parallel [
            (set (reg:DI 0 ax [377])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:333 221 {*adddi_1}
     (nil))
(insn 552 551 553 39 (parallel [
            (set (reg:DI 0 ax [378])
                (plus:DI (reg:DI 0 ax [377])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:333 221 {*adddi_1}
     (nil))
(insn 553 552 554 39 (set (reg:DI 4 si)
        (reg:DI 0 ax [378])) 4t_cv.cpp:333 89 {*movdi_internal}
     (nil))
(insn 554 553 555 39 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x2b3c1021aab0 *.LC23>)) 4t_cv.cpp:333 89 {*movdi_internal}
     (nil))
(insn 555 554 556 39 (set (reg:QI 0 ax)
        (const_int 0 [0])) 4t_cv.cpp:333 93 {*movqi_internal}
     (nil))
(call_insn 556 555 557 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x2b3c0fee0e00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:333 649 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 557 556 558 39 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x2b3c1021ab48 *.LC24>)) 4t_cv.cpp:334 89 {*movdi_internal}
     (nil))
(call_insn 558 557 559 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b3c0fee3900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:334 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 559 558 665 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:336 90 {*movsi_internal}
     (nil))
(jump_insn 665 559 666 39 (set (pc)
        (label_ref 577)) 4t_cv.cpp:336 636 {jump}
     (nil)
 -> 577)
;;  succ:       43 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 666 665 581)
;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169 379 380
(code_label 581 666 562 40 27 "" [1 uses])
(note 562 581 563 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 563 562 564 40 (set (reg:SI 0 ax [380])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:337 90 {*movsi_internal}
     (nil))
(insn 564 563 565 40 (set (reg:DI 0 ax [379])
        (sign_extend:DI (reg:SI 0 ax [380]))) 4t_cv.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 565 564 566 40 (set (reg/f:DI 0 ax [orig:169 D.5610 ] [169])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [379])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2768 [0xfffffffffffff530])) [0 in_file S8 A64])) 4t_cv.cpp:337 89 {*movdi_internal}
     (nil))
(insn 566 565 567 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:169 D.5610 ] [169])
            (const_int 0 [0]))) 4t_cv.cpp:337 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 567 566 568 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 574)
            (pc))) 4t_cv.cpp:337 596 {*jcc_1}
     (nil)
 -> 574)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 170 381 382
(note 568 567 569 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 569 568 570 41 (set (reg:SI 0 ax [382])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:338 90 {*movsi_internal}
     (nil))
(insn 570 569 571 41 (set (reg:DI 0 ax [381])
        (sign_extend:DI (reg:SI 0 ax [382]))) 4t_cv.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 571 570 572 41 (set (reg/f:DI 0 ax [orig:170 D.5610 ] [170])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [381])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2768 [0xfffffffffffff530])) [0 in_file S8 A64])) 4t_cv.cpp:338 89 {*movdi_internal}
     (nil))
(insn 572 571 573 41 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:170 D.5610 ] [170])) 4t_cv.cpp:338 89 {*movdi_internal}
     (nil))
(call_insn 573 572 574 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x2b3c10093900 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:338 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;;              41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 574 573 575 42 26 "" [1 uses])
(note 575 574 576 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 576 575 577 42 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:336 220 {*addsi_1}
     (nil))
;;  succ:       43 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU,DFS_BACK)
;;              39 [100.0%] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 167 168
(code_label 577 576 578 43 25 "" [1 uses])
(note 578 577 579 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 579 578 580 43 (set (reg:SI 0 ax [orig:167 D.5593 ] [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:336 90 {*movsi_internal}
     (nil))
(insn 580 579 582 43 (parallel [
            (set (reg:SI 0 ax [orig:168 D.5593 ] [168])
                (plus:SI (reg:SI 0 ax [orig:167 D.5593 ] [167])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:336 220 {*addsi_1}
     (nil))
(insn 582 580 583 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:168 D.5593 ] [168])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32]))) 4t_cv.cpp:336 7 {*cmpsi_1}
     (nil))
(jump_insn 583 582 584 43 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 581)
            (pc))) 4t_cv.cpp:336 596 {*jcc_1}
     (nil)
 -> 581)
;;  succ:       40
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 171 172 173
(note 584 583 585 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 585 584 586 44 (set (reg/f:DI 0 ax [orig:171 D.5604 ] [171])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2800 [0xfffffffffffff510])) [0 in_data[0].lo+0 S8 A64])) 4t_cv.cpp:342 89 {*movdi_internal}
     (nil))
(insn 586 585 587 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:171 D.5604 ] [171])) 4t_cv.cpp:342 89 {*movdi_internal}
     (nil))
(call_insn 587 586 588 44 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:342 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 588 587 589 44 (set (reg/f:DI 0 ax [orig:172 D.5604 ] [172])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2784 [0xfffffffffffff520])) [0 switch_data[0].lo+0 S8 A64])) 4t_cv.cpp:343 89 {*movdi_internal}
     (nil))
(insn 589 588 590 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:172 D.5604 ] [172])) 4t_cv.cpp:343 89 {*movdi_internal}
     (nil))
(call_insn 590 589 591 44 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:343 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 591 590 592 44 (set (reg:SI 0 ax [orig:173 D.5593 ] [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:345 90 {*movsi_internal}
     (nil))
(insn 592 591 593 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:173 D.5593 ] [173])
            (const_int 1 [0x1]))) 4t_cv.cpp:345 7 {*cmpsi_1}
     (nil))
(jump_insn 593 592 594 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 601)
            (pc))) 4t_cv.cpp:345 596 {*jcc_1}
     (nil)
 -> 601)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 174 175
(note 594 593 595 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 595 594 596 45 (set (reg/f:DI 0 ax [orig:174 D.5604 ] [174])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2792 [0xfffffffffffff518])) [0 in_data[1].lo+0 S8 A64])) 4t_cv.cpp:346 89 {*movdi_internal}
     (nil))
(insn 596 595 597 45 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:174 D.5604 ] [174])) 4t_cv.cpp:346 89 {*movdi_internal}
     (nil))
(call_insn 597 596 598 45 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:346 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 598 597 599 45 (set (reg/f:DI 0 ax [orig:175 D.5604 ] [175])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2776 [0xfffffffffffff528])) [0 switch_data[1].lo+0 S8 A64])) 4t_cv.cpp:347 89 {*movdi_internal}
     (nil))
(insn 599 598 600 45 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:175 D.5604 ] [175])) 4t_cv.cpp:347 89 {*movdi_internal}
     (nil))
(call_insn 600 599 601 45 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:347 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 176 177 178
(code_label 601 600 602 46 28 "" [1 uses])
(note 602 601 603 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 603 602 604 46 (set (reg/f:DI 0 ax [orig:176 D.5603 ] [176])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2752 [0xfffffffffffff540])) [0 out_data+0 S8 A64])) 4t_cv.cpp:352 89 {*movdi_internal}
     (nil))
(insn 604 603 605 46 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:176 D.5603 ] [176])) 4t_cv.cpp:352 89 {*movdi_internal}
     (nil))
(call_insn 605 604 606 46 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:352 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 606 605 607 46 (set (reg/f:DI 0 ax [orig:177 D.5603 ] [177])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2736 [0xfffffffffffff550])) [0 scratch_data+0 S8 A64])) 4t_cv.cpp:353 89 {*movdi_internal}
     (nil))
(insn 607 606 608 46 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:177 D.5603 ] [177])) 4t_cv.cpp:353 89 {*movdi_internal}
     (nil))
(call_insn 608 607 609 46 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:353 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 609 608 610 46 (set (reg:SI 0 ax [orig:178 D.5593 ] [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:355 90 {*movsi_internal}
     (nil))
(insn 610 609 611 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:178 D.5593 ] [178])
            (const_int 1 [0x1]))) 4t_cv.cpp:355 7 {*cmpsi_1}
     (nil))
(jump_insn 611 610 612 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 619)
            (pc))) 4t_cv.cpp:355 596 {*jcc_1}
     (nil)
 -> 619)
;;  succ:       47 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 179 180
(note 612 611 613 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 613 612 614 47 (set (reg/f:DI 0 ax [orig:179 D.5603 ] [179])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2744 [0xfffffffffffff548])) [0 out_data+8 S8 A64])) 4t_cv.cpp:358 89 {*movdi_internal}
     (nil))
(insn 614 613 615 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:179 D.5603 ] [179])) 4t_cv.cpp:358 89 {*movdi_internal}
     (nil))
(call_insn 615 614 616 47 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:358 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 616 615 617 47 (set (reg/f:DI 0 ax [orig:180 D.5603 ] [180])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2728 [0xfffffffffffff558])) [0 scratch_data+8 S8 A64])) 4t_cv.cpp:359 89 {*movdi_internal}
     (nil))
(insn 617 616 618 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:180 D.5603 ] [180])) 4t_cv.cpp:359 89 {*movdi_internal}
     (nil))
(call_insn 618 617 619 47 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:359 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;;              47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 181 182 383 384
(code_label 619 618 620 48 29 "" [1 uses])
(note 620 619 621 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 621 620 622 48 (set (reg:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:362 89 {*movdi_internal}
     (nil))
(insn 622 621 623 48 (set (reg:DI 5 di)
        (reg:DI 0 ax [383])) 4t_cv.cpp:362 89 {*movdi_internal}
     (nil))
(call_insn 623 622 624 48 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:362 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 624 623 625 48 (set (reg:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])) 4t_cv.cpp:363 89 {*movdi_internal}
     (nil))
(insn 625 624 626 48 (set (reg:DI 5 di)
        (reg:DI 0 ax [384])) 4t_cv.cpp:363 89 {*movdi_internal}
     (nil))
(call_insn 626 625 627 48 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x2b3c0ff00000 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:363 642 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 627 626 630 48 (set (reg:SI 0 ax [orig:181 D.5593 ] [181])
        (const_int 1 [0x1])) 4t_cv.cpp:365 90 {*movsi_internal}
     (nil))
(insn 630 627 634 48 (set (reg:SI 0 ax [orig:182 <retval> ] [182])
        (reg:SI 0 ax [orig:181 D.5593 ] [181])) 90 {*movsi_internal}
     (nil))
(insn 634 630 635 48 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:182 <retval> ] [182])) 4t_cv.cpp:367 90 {*movsi_internal}
     (nil))
(insn 635 634 636 48 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.5612+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [387]))
        ]) 4t_cv.cpp:367 968 {stack_tls_protect_test_di}
     (nil))
(jump_insn 636 635 642 48 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 639)
            (pc))) 4t_cv.cpp:367 596 {*jcc_1}
     (nil)
 -> 639)
;;  succ:       50
;;              49 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
(note 642 636 637 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(call_insn 637 642 638 49 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x2b3c10210900 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:367 642 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 638 637 639)
;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 639 638 643 50 31 "" [1 uses])
(note 643 639 640 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 640 643 667 50 (use (reg/i:SI 0 ax)) 4t_cv.cpp:367 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 667 640 0 NOTE_INSN_DELETED)

;; Function int IsBigEndian() (_Z11IsBigEndianv, funcdef_no=3, decl_uid=5396, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 6:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 11
changing reg in insn 21
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 21
changing reg in insn 25
starting the processing of deferred insns
ending the processing of deferred insns


int IsBigEndian()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 17[flags]
;;  ref usage 	r0={7d,6u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,7u} r7={1d,5u} r17={2d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 46{26d,20u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 word+0 S2 A16])
        (const_int 17185 [0x4321])) 4t_cv.cpp:373 92 {*movhi_internal}
     (nil))
(insn 6 5 7 2 (parallel [
            (set (reg/f:DI 0 ax [orig:84 D.5639 ] [84])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:374 221 {*adddi_1}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax [orig:85 D.5640 ] [85])
        (mem:QI (reg/f:DI 0 ax [orig:84 D.5639 ] [84]) [0 MEM[(char *)_2]+0 S1 A8])) 4t_cv.cpp:374 93 {*movqi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:85 D.5640 ] [85])
            (const_int 33 [0x21]))) 4t_cv.cpp:374 5 {*cmpqi_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) 4t_cv.cpp:374 596 {*jcc_1}
     (nil)
 -> 14)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 28 3 (set (reg:SI 0 ax [orig:83 D.5638 ] [83])
        (const_int 1 [0x1])) 4t_cv.cpp:375 90 {*movsi_internal}
     (nil))
(jump_insn 28 11 29 3 (set (pc)
        (label_ref 19)) 4t_cv.cpp:375 636 {jump}
     (nil)
 -> 19)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 29 28 14)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(code_label 14 29 15 4 33 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 19 4 (set (reg:SI 0 ax [orig:83 D.5638 ] [83])
        (const_int 0 [0])) 4t_cv.cpp:377 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 86
(code_label 19 16 20 5 35 "" [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 25 5 (set (reg:SI 0 ax [orig:86 <retval> ] [86])
        (reg:SI 0 ax [orig:83 D.5638 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 25 21 26 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:86 <retval> ] [86])) 4t_cv.cpp:379 90 {*movsi_internal}
     (nil))
(insn 26 25 30 5 (use (reg/i:SI 0 ax)) 4t_cv.cpp:379 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 30 26 0 NOTE_INSN_DELETED)
