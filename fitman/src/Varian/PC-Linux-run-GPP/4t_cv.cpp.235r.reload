
;; Function int main(int, char**) (main, funcdef_no=2, decl_uid=5501, cgraph_uid=2, symbol_order=2)

      Creating newreg=390
Removing SCRATCH in insn #5 (nop 2)
rescanning insn with uid = 5.
      Creating newreg=391
Removing SCRATCH in insn #629 (nop 3)
rescanning insn with uid = 629.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=2880, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=2848, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r390
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 67:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 68:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 83:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 88:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 91:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 94:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 99:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 100:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 113:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 114
	 Choosing alt 0 in insn 114:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=392, assigning class GENERAL_REGS to r392
  114: {r198:DI=r197:DI+r392:DI;clobber flags:CC;}
      REG_DEAD r197:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  659: r392:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 659:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r392
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 116:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 117:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 120:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 121
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=393, assigning class GENERAL_REGS to r393
  121: {r204:DI=r203:DI+r393:DI;clobber flags:CC;}
      REG_DEAD r203:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  660: r393:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r393
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 123:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 124:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 127:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=394, assigning class GENERAL_REGS to r394
  128: {r210:DI=r209:DI+r394:DI;clobber flags:CC;}
      REG_DEAD r209:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  661: r394:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 661:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r394
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 133:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 134
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=395, assigning class GENERAL_REGS to r395
  134: {r215:DI=r214:DI+r395:DI;clobber flags:CC;}
      REG_DEAD r214:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  662: r395:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r395
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 139:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 140
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=396, assigning class GENERAL_REGS to r396
  140: {r220:DI=r219:DI+r396:DI;clobber flags:CC;}
      REG_DEAD r219:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  663: r396:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 663:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r396
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 142:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 143:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 146:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 147
	 Choosing alt 0 in insn 147:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=397, assigning class GENERAL_REGS to r397
  147: {r226:DI=r225:DI+r397:DI;clobber flags:CC;}
      REG_DEAD r225:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  664: r397:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r397
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 149:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 150:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 153:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 154
	 Choosing alt 0 in insn 154:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=398, assigning class GENERAL_REGS to r398
  154: {r232:DI=r231:DI+r398:DI;clobber flags:CC;}
      REG_DEAD r231:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  665: r398:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r398
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 156:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 157:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 160:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=399, assigning class GENERAL_REGS to r399
  161: {r238:DI=r237:DI+r399:DI;clobber flags:CC;}
      REG_DEAD r237:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  666: r399:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r399
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 164:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 167:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 168
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=400, assigning class GENERAL_REGS to r400
  168: {r244:DI=r243:DI+r400:DI;clobber flags:CC;}
      REG_DEAD r243:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  667: r400:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 667:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r400
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 170:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 171:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 174:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 175
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=401, assigning class GENERAL_REGS to r401
  175: {r250:DI=r249:DI+r401:DI;clobber flags:CC;}
      REG_DEAD r249:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  668: r401:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r401
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 177:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 178:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 181:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 182
	 Choosing alt 0 in insn 182:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=402, assigning class GENERAL_REGS to r402
  182: {r256:DI=r255:DI+r402:DI;clobber flags:CC;}
      REG_DEAD r255:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  669: r402:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r402
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 185:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 188:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 189
	 Choosing alt 0 in insn 189:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=403, assigning class GENERAL_REGS to r403
  189: {r262:DI=r261:DI+r403:DI;clobber flags:CC;}
      REG_DEAD r261:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  670: r403:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r403
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 192:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 195:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 196
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=404, assigning class GENERAL_REGS to r404
  196: {r268:DI=r267:DI+r404:DI;clobber flags:CC;}
      REG_DEAD r267:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  671: r404:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r404
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 197:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 198:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 199:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 202:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 203
	 Choosing alt 0 in insn 203:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=405, assigning class GENERAL_REGS to r405
  203: {r274:DI=r273:DI+r405:DI;clobber flags:CC;}
      REG_DEAD r273:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  672: r405:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r405
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 205:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 206:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 209:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 210
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=406, assigning class GENERAL_REGS to r406
  210: {r280:DI=r279:DI+r406:DI;clobber flags:CC;}
      REG_DEAD r279:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  673: r406:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 673:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r406
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 212:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 213:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 216:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 217
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=407, assigning class GENERAL_REGS to r407
  217: {r286:DI=r285:DI+r407:DI;clobber flags:CC;}
      REG_DEAD r285:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  674: r407:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 674:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r407
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 218:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 219:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 220:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 223:  (0) r  (1) rm  (2) e {*muldi3_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=11,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=11,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
  Commutative operand exchange in insn 224
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*adddi_1}
      Creating newreg=408, assigning class GENERAL_REGS to r408
  224: {r292:DI=r291:DI+r408:DI;clobber flags:CC;}
      REG_DEAD r291:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  675: r408:DI=frame:DI-0x10

            0 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 675:  (0) =r  (1) Ts {*leadi}
      Change to class INDEX_REGS for r408
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 225:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 226:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 227:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 228:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 239:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 242:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 245:  (0) r  (1) i {*movdi_internal}
      Creating newreg=409, assigning class GENERAL_REGS to r409
  245: r409:DI=0x2065746144206f4e
    Inserting insn reload after:
  676: [r101:DI]=r409:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 676:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 246:  (0) r  (1) i {*movdi_internal}
      Creating newreg=410, assigning class GENERAL_REGS to r410
  246: r410:DI=0x6c62616c69617641
    Inserting insn reload after:
  677: [r101:DI+0x8]=r410:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 677:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 248:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 251:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 252:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 255:  (0) r  (1) i {*movdi_internal}
      Creating newreg=411, assigning class GENERAL_REGS to r411
  255: r411:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  678: [r102:DI]=r411:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 678:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 256:  (0) r  (1) i {*movdi_internal}
      Creating newreg=412, assigning class GENERAL_REGS to r412
  256: r412:DI=0x6961764120656d61
    Inserting insn reload after:
  679: [r102:DI+0x8]=r412:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 679:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 257:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 259:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 265:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 266:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 268:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 269:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 270:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 278:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 279:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 280:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 288:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 289:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 290:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 297:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 306:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 312:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 316:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 319:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 320:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 321:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 322:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 323:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-16)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 327:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-24)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-24)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 329:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-32)
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 331:  (0) r  (1) r  (2) le {*adddi_1} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-40)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (1) rBwBz {*call_value} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-48)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 341:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 344:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 345:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 352
	 Choosing alt 0 in insn 352:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 354:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) rm  (1) rn {*cmphi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 358:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 362:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 363:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 364
	 Choosing alt 0 in insn 364:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 367:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 374:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 376
	 Choosing alt 0 in insn 376:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 379:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 381:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 385:  (0) x  (1) r {*floatdisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 386:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 387:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 395:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 396:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 397
	 Choosing alt 0 in insn 397:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 398:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 399:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 407
	 Choosing alt 0 in insn 407:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 409:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) rm  (1) rn {*cmphi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 415:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 416:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 417
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 418:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 419:  (0) r  (1) rm {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) rm  (1) rn {*cmphi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 424:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 428:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 430
	 Choosing alt 0 in insn 430:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 440:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 442
	 Choosing alt 0 in insn 442:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 445:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 450:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 451:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 452:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 458:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 464:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 466:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 467:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 468:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 469:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 470:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 477:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 479:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 482:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 483:  (0) r  (1) rm {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 486:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 495:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 496:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 498:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 499:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 502:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 503:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 504
	 Choosing alt 0 in insn 504:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 508:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 510
	 Choosing alt 0 in insn 510:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 511:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 514:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 515:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 517:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 518:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 521:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =<  (1) re*m {*pushdi2_rex64} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =r  (1) g {*movsi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 530:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 531:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 537:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 538:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 539:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 540:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 542:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 543:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 545:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 548:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 549:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 551:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 553:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 556:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 557:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 568:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 573:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 582:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 585:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 589:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 591:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 592:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 597:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 600:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 607:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 610:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 612:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 615:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 617:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 618:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r391
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48

********** Pseudo live ranges #1: **********

  BB 3
   Insn 44: point = 0
   Insn 43: point = 0
   Insn 42: point = 0
   Insn 41: point = 0
   Insn 40: point = 0
   Insn 39: point = 0
   Insn 38: point = 0
   Insn 37: point = 0
   Insn 36: point = 0
   Insn 35: point = 0
   Insn 34: point = 0
   Insn 33: point = 0
   Insn 32: point = 0
   Insn 31: point = 0
   Insn 30: point = 0
   Insn 29: point = 0
   Insn 28: point = 0
   Insn 27: point = 0
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 23: point = 0
   Insn 22: point = 0
   Insn 21: point = 0
   Insn 20: point = 0
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 17: point = 0
   Insn 16: point = 0
   Insn 15: point = 0
  BB 47
   Insn 631: point = 0
  BB 48
   Insn 634: point = 0
  BB 46
   Insn 630: point = 0
   Insn 629: point = 0
   Insn 628: point = 1
   Insn 624: point = 2
   Insn 621: point = 4
   Insn 620: point = 5
   Insn 619: point = 5
   Insn 618: point = 6
   Insn 617: point = 7
   Insn 616: point = 7
   Insn 615: point = 8
  BB 45
   Insn 612: point = 9
   Insn 611: point = 9
   Insn 610: point = 10
   Insn 609: point = 11
   Insn 608: point = 11
   Insn 607: point = 12
  BB 44
   Insn 605: point = 13
   Insn 604: point = 13
   Insn 603: point = 14
   Insn 602: point = 15
   Insn 601: point = 15
   Insn 600: point = 16
   Insn 599: point = 17
   Insn 598: point = 17
   Insn 597: point = 18
  BB 43
   Insn 594: point = 19
   Insn 593: point = 19
   Insn 592: point = 20
   Insn 591: point = 21
   Insn 590: point = 21
   Insn 589: point = 22
  BB 42
   Insn 587: point = 23
   Insn 586: point = 23
   Insn 585: point = 24
   Insn 584: point = 25
   Insn 583: point = 25
   Insn 582: point = 26
   Insn 581: point = 27
   Insn 580: point = 27
   Insn 579: point = 28
  BB 38
   Insn 558: point = 29
   Insn 557: point = 29
   Insn 556: point = 30
   Insn 555: point = 32
  BB 41
   Insn 656: point = 33
   Insn 573: point = 33
  BB 40
   Insn 570: point = 33
   Insn 569: point = 33
   Insn 568: point = 34
   Insn 567: point = 36
   Insn 566: point = 38
  BB 39
   Insn 564: point = 39
   Insn 563: point = 39
   Insn 562: point = 40
   Insn 561: point = 42
   Insn 560: point = 44
  BB 37
   Insn 553: point = 45
   Insn 552: point = 45
   Insn 551: point = 45
   Insn 550: point = 45
   Insn 549: point = 45
   Insn 548: point = 45
   Insn 547: point = 45
   Insn 546: point = 46
   Insn 545: point = 48
   Insn 544: point = 49
   Insn 543: point = 49
   Insn 542: point = 49
   Insn 541: point = 49
   Insn 540: point = 50
   Insn 539: point = 52
   Insn 538: point = 53
   Insn 537: point = 53
  BB 35
   Insn 484: point = 53
   Insn 483: point = 53
   Insn 482: point = 54
   Insn 481: point = 56
  BB 36
   Insn 654: point = 57
   Insn 531: point = 57
   Insn 530: point = 57
   Insn 529: point = 57
   Insn 528: point = 57
   Insn 527: point = 58
   Insn 526: point = 59
   Insn 525: point = 60
   Insn 524: point = 61
   Insn 523: point = 61
   Insn 522: point = 62
   Insn 521: point = 63
   Insn 520: point = 63
   Insn 519: point = 65
   Insn 518: point = 67
   Insn 517: point = 69
   Insn 516: point = 71
   Insn 515: point = 72
   Insn 514: point = 73
   Insn 513: point = 75
   Insn 512: point = 77
   Insn 511: point = 78
   Insn 510: point = 80
   Insn 509: point = 82
   Insn 508: point = 83
   Insn 507: point = 85
   Insn 506: point = 87
   Insn 505: point = 88
   Insn 504: point = 90
   Insn 503: point = 92
   Insn 502: point = 93
   Insn 501: point = 95
   Insn 500: point = 97
   Insn 499: point = 98
   Insn 498: point = 100
   Insn 497: point = 102
   Insn 496: point = 104
   Insn 495: point = 105
   Insn 494: point = 106
   Insn 493: point = 108
   Insn 492: point = 110
   Insn 491: point = 112
   Insn 490: point = 113
   Insn 489: point = 113
   Insn 488: point = 114
   Insn 487: point = 116
   Insn 486: point = 117
  BB 34
   Insn 479: point = 118
   Insn 478: point = 118
   Insn 477: point = 118
   Insn 476: point = 118
   Insn 475: point = 118
   Insn 474: point = 119
   Insn 473: point = 120
   Insn 472: point = 121
   Insn 471: point = 122
   Insn 470: point = 123
   Insn 469: point = 124
   Insn 468: point = 125
   Insn 467: point = 126
   Insn 466: point = 127
   Insn 465: point = 128
   Insn 464: point = 128
  BB 22
   Insn 346: point = 128
   Insn 345: point = 128
   Insn 344: point = 129
   Insn 343: point = 131
  BB 33
   Insn 652: point = 132
   Insn 458: point = 132
  BB 31
   Insn 434: point = 132
   Insn 433: point = 132
   Insn 432: point = 133
   Insn 431: point = 135
   Insn 430: point = 137
   Insn 429: point = 139
   Insn 428: point = 140
   Insn 427: point = 142
   Insn 426: point = 144
  BB 32
   Insn 650: point = 145
   Insn 452: point = 145
   Insn 451: point = 145
   Insn 450: point = 146
   Insn 449: point = 148
   Insn 448: point = 150
   Insn 447: point = 152
   Insn 446: point = 154
   Insn 445: point = 155
   Insn 444: point = 157
   Insn 443: point = 159
   Insn 442: point = 160
   Insn 441: point = 162
   Insn 440: point = 164
   Insn 439: point = 166
   Insn 438: point = 167
   Insn 437: point = 169
   Insn 436: point = 171
  BB 30
   Insn 424: point = 172
  BB 29
   Insn 421: point = 172
   Insn 420: point = 172
   Insn 419: point = 173
   Insn 418: point = 175
   Insn 417: point = 177
   Insn 416: point = 179
   Insn 415: point = 180
   Insn 414: point = 182
   Insn 413: point = 184
  BB 28
   Insn 411: point = 185
   Insn 410: point = 185
   Insn 409: point = 186
   Insn 408: point = 188
   Insn 407: point = 190
   Insn 406: point = 192
   Insn 405: point = 193
   Insn 404: point = 195
   Insn 403: point = 197
  BB 27
   Insn 401: point = 198
   Insn 400: point = 198
   Insn 399: point = 199
   Insn 398: point = 201
   Insn 397: point = 203
   Insn 396: point = 205
   Insn 395: point = 206
   Insn 394: point = 208
   Insn 393: point = 210
  BB 25
   Insn 368: point = 211
   Insn 367: point = 211
   Insn 366: point = 212
   Insn 365: point = 214
   Insn 364: point = 216
   Insn 363: point = 218
   Insn 362: point = 219
   Insn 361: point = 221
   Insn 360: point = 223
  BB 26
   Insn 648: point = 224
   Insn 387: point = 224
   Insn 386: point = 224
   Insn 385: point = 225
   Insn 384: point = 227
   Insn 383: point = 229
   Insn 382: point = 231
   Insn 381: point = 233
   Insn 380: point = 235
   Insn 379: point = 236
   Insn 378: point = 238
   Insn 377: point = 240
   Insn 376: point = 241
   Insn 375: point = 243
   Insn 374: point = 245
   Insn 373: point = 247
   Insn 372: point = 248
   Insn 371: point = 250
   Insn 370: point = 252
  BB 24
   Insn 358: point = 253
  BB 23
   Insn 356: point = 253
   Insn 355: point = 253
   Insn 354: point = 254
   Insn 353: point = 256
   Insn 352: point = 258
   Insn 351: point = 260
   Insn 350: point = 261
   Insn 349: point = 263
   Insn 348: point = 265
  BB 21
   Insn 341: point = 266
   Insn 340: point = 266
   Insn 339: point = 266
   Insn 338: point = 266
   Insn 337: point = 267
   Insn 336: point = 268
   Insn 335: point = 269
   Insn 334: point = 270
   Insn 333: point = 271
   Insn 332: point = 272
   Insn 331: point = 273
   Insn 330: point = 274
   Insn 329: point = 275
   Insn 328: point = 276
   Insn 327: point = 277
   Insn 326: point = 278
   Insn 325: point = 279
   Insn 324: point = 280
   Insn 323: point = 281
   Insn 322: point = 282
   Insn 321: point = 282
   Insn 320: point = 283
   Insn 319: point = 284
   Insn 318: point = 285
   Insn 317: point = 286
   Insn 316: point = 287
  BB 19
   Insn 646: point = 288
   Insn 307: point = 288
   Insn 306: point = 288
  BB 20
   Insn 313: point = 288
   Insn 312: point = 288
  BB 18
   Insn 304: point = 288
   Insn 303: point = 288
   Insn 302: point = 289
   Insn 301: point = 290
   Insn 300: point = 291
   Insn 299: point = 292
   Insn 298: point = 292
   Insn 297: point = 292
  BB 17
   Insn 294: point = 292
   Insn 293: point = 292
   Insn 292: point = 293
   Insn 291: point = 294
   Insn 290: point = 296
   Insn 289: point = 297
   Insn 288: point = 299
  BB 16
   Insn 286: point = 300
   Insn 285: point = 300
   Insn 284: point = 301
   Insn 283: point = 302
   Insn 282: point = 302
   Insn 281: point = 303
   Insn 280: point = 304
   Insn 279: point = 305
   Insn 278: point = 307
   Insn 277: point = 308
   Insn 276: point = 308
   Insn 275: point = 309
   Insn 274: point = 310
   Insn 273: point = 311
   Insn 272: point = 312
   Insn 271: point = 313
   Insn 270: point = 314
   Insn 269: point = 315
   Insn 268: point = 316
   Insn 267: point = 317
   Insn 266: point = 318
   Insn 265: point = 319
  BB 14
   Insn 237: point = 320
   Insn 236: point = 320
  BB 15
   Insn 644: point = 320
   Insn 259: point = 320
   Insn 258: point = 320
   Insn 257: point = 321
   Insn 679: point = 321
   Insn 256: point = 322
   Insn 678: point = 323
   Insn 255: point = 324
   Insn 254: point = 325
   Insn 253: point = 327
   Insn 252: point = 329
   Insn 251: point = 331
   Insn 250: point = 333
   Insn 249: point = 335
   Insn 248: point = 336
   Insn 247: point = 337
   Insn 677: point = 338
   Insn 246: point = 339
   Insn 676: point = 340
   Insn 245: point = 341
   Insn 244: point = 342
   Insn 243: point = 344
   Insn 242: point = 346
   Insn 241: point = 348
   Insn 240: point = 350
   Insn 239: point = 351
  BB 13
   Insn 234: point = 352
  BB 11
   Insn 109: point = 352
   Insn 108: point = 352
  BB 12
   Insn 642: point = 352
   Insn 228: point = 352
   Insn 227: point = 352
   Insn 226: point = 353
   Insn 225: point = 354
   Insn 224: point = 356
   Insn 675: point = 358
   Insn 223: point = 359
   Insn 222: point = 361
   Insn 221: point = 363
   Insn 220: point = 364
   Insn 219: point = 365
   Insn 218: point = 366
   Insn 217: point = 368
   Insn 674: point = 370
   Insn 216: point = 371
   Insn 215: point = 373
   Insn 214: point = 375
   Insn 213: point = 376
   Insn 212: point = 377
   Insn 211: point = 378
   Insn 210: point = 380
   Insn 673: point = 382
   Insn 209: point = 383
   Insn 208: point = 385
   Insn 207: point = 387
   Insn 206: point = 388
   Insn 205: point = 389
   Insn 204: point = 390
   Insn 203: point = 392
   Insn 672: point = 394
   Insn 202: point = 395
   Insn 201: point = 397
   Insn 200: point = 399
   Insn 199: point = 400
   Insn 198: point = 401
   Insn 197: point = 402
   Insn 196: point = 404
   Insn 671: point = 406
   Insn 195: point = 407
   Insn 194: point = 409
   Insn 193: point = 411
   Insn 192: point = 412
   Insn 191: point = 413
   Insn 190: point = 414
   Insn 189: point = 416
   Insn 670: point = 418
   Insn 188: point = 419
   Insn 187: point = 421
   Insn 186: point = 423
   Insn 185: point = 424
   Insn 184: point = 425
   Insn 183: point = 426
   Insn 182: point = 428
   Insn 669: point = 430
   Insn 181: point = 431
   Insn 180: point = 433
   Insn 179: point = 435
   Insn 178: point = 436
   Insn 177: point = 437
   Insn 176: point = 438
   Insn 175: point = 440
   Insn 668: point = 442
   Insn 174: point = 443
   Insn 173: point = 445
   Insn 172: point = 447
   Insn 171: point = 448
   Insn 170: point = 449
   Insn 169: point = 450
   Insn 168: point = 452
   Insn 667: point = 454
   Insn 167: point = 455
   Insn 166: point = 457
   Insn 165: point = 459
   Insn 164: point = 460
   Insn 163: point = 461
   Insn 162: point = 462
   Insn 161: point = 464
   Insn 666: point = 466
   Insn 160: point = 467
   Insn 159: point = 469
   Insn 158: point = 471
   Insn 157: point = 472
   Insn 156: point = 473
   Insn 155: point = 474
   Insn 154: point = 476
   Insn 665: point = 478
   Insn 153: point = 479
   Insn 152: point = 481
   Insn 151: point = 483
   Insn 150: point = 484
   Insn 149: point = 485
   Insn 148: point = 486
   Insn 147: point = 488
   Insn 664: point = 490
   Insn 146: point = 491
   Insn 145: point = 493
   Insn 144: point = 495
   Insn 143: point = 496
   Insn 142: point = 497
   Insn 141: point = 498
   Insn 140: point = 500
   Insn 663: point = 502
   Insn 139: point = 503
   Insn 138: point = 505
   Insn 137: point = 507
   Insn 136: point = 508
   Insn 135: point = 509
   Insn 134: point = 511
   Insn 662: point = 513
   Insn 133: point = 514
   Insn 132: point = 516
   Insn 131: point = 518
   Insn 130: point = 519
   Insn 129: point = 520
   Insn 128: point = 522
   Insn 661: point = 524
   Insn 127: point = 525
   Insn 126: point = 527
   Insn 125: point = 529
   Insn 124: point = 530
   Insn 123: point = 531
   Insn 122: point = 532
   Insn 121: point = 534
   Insn 660: point = 536
   Insn 120: point = 537
   Insn 119: point = 539
   Insn 118: point = 541
   Insn 117: point = 542
   Insn 116: point = 543
   Insn 115: point = 544
   Insn 114: point = 546
   Insn 659: point = 548
   Insn 113: point = 549
   Insn 112: point = 551
   Insn 111: point = 553
  BB 10
   Insn 106: point = 554
  BB 8
   Insn 76: point = 554
   Insn 75: point = 554
  BB 9
   Insn 640: point = 554
   Insn 100: point = 554
   Insn 99: point = 554
   Insn 98: point = 555
   Insn 97: point = 557
   Insn 96: point = 558
   Insn 95: point = 558
   Insn 94: point = 559
   Insn 93: point = 560
   Insn 92: point = 562
   Insn 91: point = 563
   Insn 90: point = 565
   Insn 89: point = 567
   Insn 88: point = 568
   Insn 87: point = 569
   Insn 86: point = 571
   Insn 85: point = 572
   Insn 84: point = 572
   Insn 83: point = 573
   Insn 82: point = 574
   Insn 81: point = 576
   Insn 80: point = 577
   Insn 79: point = 579
   Insn 78: point = 581
  BB 7
   Insn 73: point = 582
   Insn 72: point = 582
   Insn 71: point = 583
   Insn 70: point = 584
   Insn 69: point = 584
   Insn 68: point = 585
   Insn 67: point = 586
   Insn 66: point = 587
   Insn 65: point = 588
   Insn 64: point = 588
   Insn 63: point = 589
  BB 5
   Insn 638: point = 590
   Insn 55: point = 590
  BB 6
   Insn 60: point = 590
  BB 4
   Insn 53: point = 590
   Insn 52: point = 590
   Insn 51: point = 591
   Insn 50: point = 592
   Insn 49: point = 593
   Insn 48: point = 594
  BB 2
   Insn 13: point = 594
   Insn 12: point = 594
   Insn 11: point = 594
   Insn 10: point = 594
   Insn 9: point = 594
   Insn 8: point = 594
   Insn 5: point = 594
   Insn 3: point = 596
   Insn 2: point = 596
 r87: [592..593]
 r88: [590..591]
 r89: [588..589]
 r90: [584..585]
 r91: [578..579]
 r92: [575..577]
 r93: [568..574]
 r94: [572..573]
 r95: [568..569]
 r96: [564..565]
 r97: [561..563]
 r98: [554..560]
 r99: [558..559]
 r100: [554..555]
 r101: [337..342]
 r102: [320..325]
 r103: [300..301]
 r104: [290..291]
 r105: [288..289]
 r106: [130..131]
 r107: [128..129]
 r108: [262..263]
 r109: [259..261]
 r110: [257..258]
 r111: [255..256]
 r112: [253..254]
 r113: [220..221]
 r114: [217..219]
 r115: [215..216]
 r116: [213..214]
 r117: [211..212]
 r118: [242..248]
 r119: [244..245]
 r120: [242..243]
 r121: [224..241]
 r122: [230..236]
 r123: [232..233]
 r124: [230..231]
 r125: [228..229]
 r126: [226..227]
 r127: [224..225]
 r128: [207..208]
 r129: [204..206]
 r130: [202..203]
 r131: [200..201]
 r132: [198..199]
 r133: [194..195]
 r134: [191..193]
 r135: [189..190]
 r136: [187..188]
 r137: [185..186]
 r138: [181..182]
 r139: [178..180]
 r140: [176..177]
 r141: [174..175]
 r142: [172..173]
 r143: [141..142]
 r144: [138..140]
 r145: [136..137]
 r146: [134..135]
 r147: [132..133]
 r148: [161..167]
 r149: [163..164]
 r150: [161..162]
 r151: [145..160]
 r152: [149..155]
 r153: [151..152]
 r154: [149..150]
 r155: [147..148]
 r156: [145..146]
 r157: [55..56]
 r158: [53..54]
 r159: [62..106]
 r160: [61..98]
 r161: [94..95]
 r162: [91..93]
 r163: [89..90]
 r164: [60..88]
 r165: [84..85]
 r166: [81..83]
 r167: [79..80]
 r168: [59..78]
 r169: [58..73]
 r170: [57..63]
 r171: [31..32]
 r172: [29..30]
 r173: [39..40]
 r174: [33..34]
 r175: [27..28]
 r176: [25..26]
 r177: [23..24]
 r178: [21..22]
 r179: [19..20]
 r180: [17..18]
 r181: [15..16]
 r182: [13..14]
 r183: [11..12]
 r184: [9..10]
 r185: [3..4]
 r186: [1..2]
 r187: [586..587]
 r188: [582..583]
 r189: [580..581]
 r190: [575..576]
 r191: [570..571]
 r192: [566..567]
 r193: [561..562]
 r194: [556..557]
 r195: [550..551]
 r196: [552..553]
 r197: [547..549]
 r198: [545..546]
 r199: [542..544]
 r200: [542..543]
 r201: [538..539]
 r202: [540..541]
 r203: [535..537]
 r204: [533..534]
 r205: [530..532]
 r206: [530..531]
 r207: [526..527]
 r208: [528..529]
 r209: [523..525]
 r210: [521..522]
 r211: [519..520]
 r212: [515..516]
 r213: [517..518]
 r214: [512..514]
 r215: [510..511]
 r216: [508..509]
 r217: [504..505]
 r218: [506..507]
 r219: [501..503]
 r220: [499..500]
 r221: [496..498]
 r222: [496..497]
 r223: [492..493]
 r224: [494..495]
 r225: [489..491]
 r226: [487..488]
 r227: [484..486]
 r228: [484..485]
 r229: [480..481]
 r230: [482..483]
 r231: [477..479]
 r232: [475..476]
 r233: [472..474]
 r234: [472..473]
 r235: [468..469]
 r236: [470..471]
 r237: [465..467]
 r238: [463..464]
 r239: [460..462]
 r240: [460..461]
 r241: [456..457]
 r242: [458..459]
 r243: [453..455]
 r244: [451..452]
 r245: [448..450]
 r246: [448..449]
 r247: [444..445]
 r248: [446..447]
 r249: [441..443]
 r250: [439..440]
 r251: [436..438]
 r252: [436..437]
 r253: [432..433]
 r254: [434..435]
 r255: [429..431]
 r256: [427..428]
 r257: [424..426]
 r258: [424..425]
 r259: [420..421]
 r260: [422..423]
 r261: [417..419]
 r262: [415..416]
 r263: [412..414]
 r264: [412..413]
 r265: [408..409]
 r266: [410..411]
 r267: [405..407]
 r268: [403..404]
 r269: [400..402]
 r270: [400..401]
 r271: [396..397]
 r272: [398..399]
 r273: [393..395]
 r274: [391..392]
 r275: [388..390]
 r276: [388..389]
 r277: [384..385]
 r278: [386..387]
 r279: [381..383]
 r280: [379..380]
 r281: [376..378]
 r282: [376..377]
 r283: [372..373]
 r284: [374..375]
 r285: [369..371]
 r286: [367..368]
 r287: [364..366]
 r288: [364..365]
 r289: [360..361]
 r290: [362..363]
 r291: [357..359]
 r292: [355..356]
 r293: [352..354]
 r294: [352..353]
 r295: [345..351]
 r296: [347..348]
 r297: [349..350]
 r298: [345..346]
 r299: [343..344]
 r300: [328..336]
 r301: [332..333]
 r302: [334..335]
 r303: [330..331]
 r304: [328..329]
 r305: [326..327]
 r306: [313..319]
 r307: [312..318]
 r308: [311..317]
 r309: [310..316]
 r310: [309..315]
 r311: [308..314]
 r312: [306..307]
 r313: [303..305]
 r314: [302..304]
 r315: [298..299]
 r316: [293..297]
 r317: [295..296]
 r318: [292..294]
 r319: [271..287]
 r320: [270..286]
 r321: [269..285]
 r322: [268..284]
 r323: [267..283]
 r324: [266..282]
 r325: [280..281]
 r326: [278..279]
 r327: [276..277]
 r328: [274..275]
 r329: [272..273]
 r330: [264..265]
 r331: [259..260]
 r332: [222..223]
 r333: [217..218]
 r334: [249..250]
 r335: [251..252]
 r336: [246..247]
 r337: [237..238]
 r338: [239..240]
 r339: [234..235]
 r340: [209..210]
 r341: [204..205]
 r342: [196..197]
 r343: [191..192]
 r344: [183..184]
 r345: [178..179]
 r346: [143..144]
 r347: [138..139]
 r348: [168..169]
 r349: [170..171]
 r350: [165..166]
 r351: [156..157]
 r352: [158..159]
 r353: [153..154]
 r354: [122..127]
 r355: [121..126]
 r356: [120..125]
 r357: [119..124]
 r358: [118..123]
 r359: [107..117]
 r360: [112..114]
 r361: [115..116]
 r362: [111..113] [107..108]
 r363: [109..110]
 r364: [99..105]
 r365: [101..102]
 r366: [103..104]
 r367: [99..100]
 r368: [96..97]
 r369: [91..92]
 r370: [86..87]
 r371: [81..82]
 r372: [74..75]
 r373: [76..77]
 r374: [64..72]
 r375: [68..69]
 r376: [70..71]
 r377: [66..67]
 r378: [64..65]
 r379: [51..52]
 r380: [49..50]
 r381: [47..48]
 r382: [45..46]
 r383: [41..42]
 r384: [43..44]
 r385: [35..36]
 r386: [37..38]
 r387: [7..8]
 r388: [5..6]
 r390: [594..595]
 r391: [0..0]
 r392: [547..548]
 r393: [535..536]
 r394: [523..524]
 r395: [512..513]
 r396: [501..502]
 r397: [489..490]
 r398: [477..478]
 r399: [465..466]
 r400: [453..454]
 r401: [441..442]
 r402: [429..430]
 r403: [417..418]
 r404: [405..406]
 r405: [393..394]
 r406: [381..382]
 r407: [369..370]
 r408: [357..358]
 r409: [340..341]
 r410: [338..339]
 r411: [323..324]
 r412: [321..322]
Compressing live ranges: from 596 to 491 - 82%
Ranges after the compression:
 r87: [487..488]
 r88: [485..486]
 r89: [483..484]
 r90: [479..480]
 r91: [473..474]
 r92: [471..472]
 r93: [465..470]
 r94: [469..470]
 r95: [465..466]
 r96: [461..462]
 r97: [459..460]
 r98: [453..458]
 r99: [457..458]
 r100: [453..454]
 r101: [271..274]
 r102: [257..260]
 r103: [249..250]
 r104: [241..242]
 r105: [239..240]
 r106: [105..106]
 r107: [103..104]
 r108: [225..226]
 r109: [223..224]
 r110: [221..222]
 r111: [219..220]
 r112: [217..218]
 r113: [187..188]
 r114: [185..186]
 r115: [183..184]
 r116: [181..182]
 r117: [179..180]
 r118: [207..212]
 r119: [209..210]
 r120: [207..208]
 r121: [191..206]
 r122: [197..202]
 r123: [199..200]
 r124: [197..198]
 r125: [195..196]
 r126: [193..194]
 r127: [191..192]
 r128: [175..176]
 r129: [173..174]
 r130: [171..172]
 r131: [169..170]
 r132: [167..168]
 r133: [163..164]
 r134: [161..162]
 r135: [159..160]
 r136: [157..158]
 r137: [155..156]
 r138: [151..152]
 r139: [149..150]
 r140: [147..148]
 r141: [145..146]
 r142: [143..144]
 r143: [115..116]
 r144: [113..114]
 r145: [111..112]
 r146: [109..110]
 r147: [107..108]
 r148: [133..138]
 r149: [135..136]
 r150: [133..134]
 r151: [119..132]
 r152: [123..128]
 r153: [125..126]
 r154: [123..124]
 r155: [121..122]
 r156: [119..120]
 r157: [55..56]
 r158: [53..54]
 r159: [57..92]
 r160: [57..86]
 r161: [83..84]
 r162: [81..82]
 r163: [79..80]
 r164: [57..78]
 r165: [75..76]
 r166: [73..74]
 r167: [71..72]
 r168: [57..70]
 r169: [57..66]
 r170: [57..58]
 r171: [31..32]
 r172: [29..30]
 r173: [39..40]
 r174: [33..34]
 r175: [27..28]
 r176: [25..26]
 r177: [23..24]
 r178: [21..22]
 r179: [19..20]
 r180: [17..18]
 r181: [15..16]
 r182: [13..14]
 r183: [11..12]
 r184: [9..10]
 r185: [3..4]
 r186: [1..2]
 r187: [481..482]
 r188: [477..478]
 r189: [475..476]
 r190: [471..472]
 r191: [467..468]
 r192: [463..464]
 r193: [459..460]
 r194: [455..456]
 r195: [449..450]
 r196: [451..452]
 r197: [447..448]
 r198: [445..446]
 r199: [443..444]
 r200: [443..444]
 r201: [439..440]
 r202: [441..442]
 r203: [437..438]
 r204: [435..436]
 r205: [433..434]
 r206: [433..434]
 r207: [429..430]
 r208: [431..432]
 r209: [427..428]
 r210: [425..426]
 r211: [423..424]
 r212: [419..420]
 r213: [421..422]
 r214: [417..418]
 r215: [415..416]
 r216: [413..414]
 r217: [409..410]
 r218: [411..412]
 r219: [407..408]
 r220: [405..406]
 r221: [403..404]
 r222: [403..404]
 r223: [399..400]
 r224: [401..402]
 r225: [397..398]
 r226: [395..396]
 r227: [393..394]
 r228: [393..394]
 r229: [389..390]
 r230: [391..392]
 r231: [387..388]
 r232: [385..386]
 r233: [383..384]
 r234: [383..384]
 r235: [379..380]
 r236: [381..382]
 r237: [377..378]
 r238: [375..376]
 r239: [373..374]
 r240: [373..374]
 r241: [369..370]
 r242: [371..372]
 r243: [367..368]
 r244: [365..366]
 r245: [363..364]
 r246: [363..364]
 r247: [359..360]
 r248: [361..362]
 r249: [357..358]
 r250: [355..356]
 r251: [353..354]
 r252: [353..354]
 r253: [349..350]
 r254: [351..352]
 r255: [347..348]
 r256: [345..346]
 r257: [343..344]
 r258: [343..344]
 r259: [339..340]
 r260: [341..342]
 r261: [337..338]
 r262: [335..336]
 r263: [333..334]
 r264: [333..334]
 r265: [329..330]
 r266: [331..332]
 r267: [327..328]
 r268: [325..326]
 r269: [323..324]
 r270: [323..324]
 r271: [319..320]
 r272: [321..322]
 r273: [317..318]
 r274: [315..316]
 r275: [313..314]
 r276: [313..314]
 r277: [309..310]
 r278: [311..312]
 r279: [307..308]
 r280: [305..306]
 r281: [303..304]
 r282: [303..304]
 r283: [299..300]
 r284: [301..302]
 r285: [297..298]
 r286: [295..296]
 r287: [293..294]
 r288: [293..294]
 r289: [289..290]
 r290: [291..292]
 r291: [287..288]
 r292: [285..286]
 r293: [283..284]
 r294: [283..284]
 r295: [277..282]
 r296: [279..280]
 r297: [281..282]
 r298: [277..278]
 r299: [275..276]
 r300: [263..270]
 r301: [267..268]
 r302: [269..270]
 r303: [265..266]
 r304: [263..264]
 r305: [261..262]
 r306: [255..256]
 r307: [255..256]
 r308: [255..256]
 r309: [255..256]
 r310: [255..256]
 r311: [255..256]
 r312: [253..254]
 r313: [251..252]
 r314: [251..252]
 r315: [247..248]
 r316: [243..246]
 r317: [245..246]
 r318: [243..244]
 r319: [229..238]
 r320: [229..238]
 r321: [229..238]
 r322: [229..238]
 r323: [229..238]
 r324: [229..238]
 r325: [237..238]
 r326: [235..236]
 r327: [233..234]
 r328: [231..232]
 r329: [229..230]
 r330: [227..228]
 r331: [223..224]
 r332: [189..190]
 r333: [185..186]
 r334: [213..214]
 r335: [215..216]
 r336: [211..212]
 r337: [203..204]
 r338: [205..206]
 r339: [201..202]
 r340: [177..178]
 r341: [173..174]
 r342: [165..166]
 r343: [161..162]
 r344: [153..154]
 r345: [149..150]
 r346: [117..118]
 r347: [113..114]
 r348: [139..140]
 r349: [141..142]
 r350: [137..138]
 r351: [129..130]
 r352: [131..132]
 r353: [127..128]
 r354: [101..102]
 r355: [101..102]
 r356: [101..102]
 r357: [101..102]
 r358: [101..102]
 r359: [93..100]
 r360: [97..98]
 r361: [99..100]
 r362: [97..98] [93..94]
 r363: [95..96]
 r364: [87..92]
 r365: [89..90]
 r366: [91..92]
 r367: [87..88]
 r368: [85..86]
 r369: [81..82]
 r370: [77..78]
 r371: [73..74]
 r372: [67..68]
 r373: [69..70]
 r374: [59..66]
 r375: [63..64]
 r376: [65..66]
 r377: [61..62]
 r378: [59..60]
 r379: [51..52]
 r380: [49..50]
 r381: [47..48]
 r382: [45..46]
 r383: [41..42]
 r384: [43..44]
 r385: [35..36]
 r386: [37..38]
 r387: [7..8]
 r388: [5..6]
 r390: [489..490]
 r391: [0..0]
 r392: [447..448]
 r393: [437..438]
 r394: [427..428]
 r395: [417..418]
 r396: [407..408]
 r397: [397..398]
 r398: [387..388]
 r399: [377..378]
 r400: [367..368]
 r401: [357..358]
 r402: [347..348]
 r403: [337..338]
 r404: [327..328]
 r405: [317..318]
 r406: [307..308]
 r407: [297..298]
 r408: [287..288]
 r409: [273..274]
 r410: [271..272]
 r411: [259..260]
 r412: [257..258]

********** Assignment #1: **********

	 Assigning to 392 (cl=INDEX_REGS, orig=392, freq=2, tfirst=392, tfreq=2)...
	   Assign 3 to reload r392 (freq=2)
	 Assigning to 393 (cl=INDEX_REGS, orig=393, freq=2, tfirst=393, tfreq=2)...
	   Assign 3 to reload r393 (freq=2)
	 Assigning to 394 (cl=INDEX_REGS, orig=394, freq=2, tfirst=394, tfreq=2)...
	   Assign 3 to reload r394 (freq=2)
	 Assigning to 395 (cl=INDEX_REGS, orig=395, freq=2, tfirst=395, tfreq=2)...
	   Assign 3 to reload r395 (freq=2)
	 Assigning to 396 (cl=INDEX_REGS, orig=396, freq=2, tfirst=396, tfreq=2)...
	   Assign 3 to reload r396 (freq=2)
	 Assigning to 397 (cl=INDEX_REGS, orig=397, freq=2, tfirst=397, tfreq=2)...
	   Assign 3 to reload r397 (freq=2)
	 Assigning to 398 (cl=INDEX_REGS, orig=398, freq=2, tfirst=398, tfreq=2)...
	   Assign 3 to reload r398 (freq=2)
	 Assigning to 399 (cl=INDEX_REGS, orig=399, freq=2, tfirst=399, tfreq=2)...
	   Assign 4 to reload r399 (freq=2)
	 Assigning to 400 (cl=INDEX_REGS, orig=400, freq=2, tfirst=400, tfreq=2)...
	   Assign 3 to reload r400 (freq=2)
	 Assigning to 401 (cl=INDEX_REGS, orig=401, freq=2, tfirst=401, tfreq=2)...
	   Assign 4 to reload r401 (freq=2)
	 Assigning to 402 (cl=INDEX_REGS, orig=402, freq=2, tfirst=402, tfreq=2)...
	   Assign 3 to reload r402 (freq=2)
	 Assigning to 403 (cl=INDEX_REGS, orig=403, freq=2, tfirst=403, tfreq=2)...
	   Assign 4 to reload r403 (freq=2)
	 Assigning to 404 (cl=INDEX_REGS, orig=404, freq=2, tfirst=404, tfreq=2)...
	   Assign 3 to reload r404 (freq=2)
	 Assigning to 405 (cl=INDEX_REGS, orig=405, freq=2, tfirst=405, tfreq=2)...
	   Assign 4 to reload r405 (freq=2)
	 Assigning to 406 (cl=INDEX_REGS, orig=406, freq=2, tfirst=406, tfreq=2)...
	   Assign 3 to reload r406 (freq=2)
	 Assigning to 407 (cl=INDEX_REGS, orig=407, freq=2, tfirst=407, tfreq=2)...
	   Assign 2 to reload r407 (freq=2)
	 Assigning to 408 (cl=INDEX_REGS, orig=408, freq=2, tfirst=408, tfreq=2)...
	   Assign 4 to reload r408 (freq=2)
	 Assigning to 409 (cl=GENERAL_REGS, orig=409, freq=2, tfirst=409, tfreq=2)...
	   Assign 3 to reload r409 (freq=2)
	 Assigning to 410 (cl=GENERAL_REGS, orig=410, freq=2, tfirst=410, tfreq=2)...
	   Assign 2 to reload r410 (freq=2)
	 Assigning to 411 (cl=GENERAL_REGS, orig=411, freq=2, tfirst=411, tfreq=2)...
	   Assign 4 to reload r411 (freq=2)
	 Assigning to 412 (cl=GENERAL_REGS, orig=412, freq=2, tfirst=412, tfreq=2)...
	   Assign 3 to reload r412 (freq=2)
	 Assigning to 390 (cl=INDEX_REGS, orig=390, freq=1, tfirst=390, tfreq=1)...
	   Assign 0 to reload r390 (freq=1)
	 Assigning to 391 (cl=INDEX_REGS, orig=391, freq=1, tfirst=391, tfreq=1)...
	   Assign 2 to reload r391 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=2880, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=2848, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 63
changing reg in insn 64
changing reg in insn 68
changing reg in insn 69
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 82
changing reg in insn 88
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 93
changing reg in insn 93
changing reg in insn 93
changing reg in insn 99
changing reg in insn 94
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 244
changing reg in insn 247
changing reg in insn 246
changing reg in insn 245
changing reg in insn 254
changing reg in insn 258
changing reg in insn 257
changing reg in insn 256
changing reg in insn 255
changing reg in insn 284
changing reg in insn 285
changing reg in insn 300
changing reg in insn 301
changing reg in insn 302
changing reg in insn 303
changing reg in insn 343
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 352
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 355
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 364
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 366
changing reg in insn 366
changing reg in insn 367
changing reg in insn 372
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 386
changing reg in insn 379
changing reg in insn 383
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 383
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 386
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 397
changing reg in insn 397
changing reg in insn 398
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 400
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 410
changing reg in insn 414
changing reg in insn 415
changing reg in insn 415
changing reg in insn 417
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 420
changing reg in insn 427
changing reg in insn 428
changing reg in insn 428
changing reg in insn 430
changing reg in insn 430
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 438
changing reg in insn 440
changing reg in insn 441
changing reg in insn 441
changing reg in insn 442
changing reg in insn 451
changing reg in insn 445
changing reg in insn 449
changing reg in insn 447
changing reg in insn 448
changing reg in insn 448
changing reg in insn 449
changing reg in insn 449
changing reg in insn 450
changing reg in insn 450
changing reg in insn 451
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 483
changing reg in insn 494
changing reg in insn 522
changing reg in insn 499
changing reg in insn 523
changing reg in insn 501
changing reg in insn 502
changing reg in insn 502
changing reg in insn 504
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 525
changing reg in insn 507
changing reg in insn 508
changing reg in insn 508
changing reg in insn 510
changing reg in insn 510
changing reg in insn 511
changing reg in insn 511
changing reg in insn 526
changing reg in insn 514
changing reg in insn 527
changing reg in insn 520
changing reg in insn 528
changing reg in insn 555
changing reg in insn 556
changing reg in insn 556
changing reg in insn 557
changing reg in insn 562
changing reg in insn 563
changing reg in insn 568
changing reg in insn 569
changing reg in insn 579
changing reg in insn 580
changing reg in insn 582
changing reg in insn 583
changing reg in insn 585
changing reg in insn 586
changing reg in insn 589
changing reg in insn 590
changing reg in insn 592
changing reg in insn 593
changing reg in insn 597
changing reg in insn 598
changing reg in insn 600
changing reg in insn 601
changing reg in insn 603
changing reg in insn 604
changing reg in insn 607
changing reg in insn 608
changing reg in insn 610
changing reg in insn 611
changing reg in insn 621
changing reg in insn 624
changing reg in insn 624
changing reg in insn 628
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 112
changing reg in insn 113
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 143
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 146
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 157
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 164
changing reg in insn 163
changing reg in insn 164
changing reg in insn 166
changing reg in insn 167
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 171
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 177
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 184
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 195
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 198
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 206
changing reg in insn 205
changing reg in insn 206
changing reg in insn 208
changing reg in insn 209
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 213
changing reg in insn 212
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 220
changing reg in insn 219
changing reg in insn 220
changing reg in insn 222
changing reg in insn 223
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 227
changing reg in insn 226
changing reg in insn 227
changing reg in insn 239
changing reg in insn 241
changing reg in insn 242
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 244
changing reg in insn 248
changing reg in insn 253
changing reg in insn 250
changing reg in insn 251
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 254
changing reg in insn 265
changing reg in insn 271
changing reg in insn 266
changing reg in insn 272
changing reg in insn 267
changing reg in insn 273
changing reg in insn 268
changing reg in insn 274
changing reg in insn 269
changing reg in insn 275
changing reg in insn 270
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 281
changing reg in insn 280
changing reg in insn 282
changing reg in insn 288
changing reg in insn 289
changing reg in insn 289
changing reg in insn 292
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 293
changing reg in insn 316
changing reg in insn 333
changing reg in insn 317
changing reg in insn 334
changing reg in insn 318
changing reg in insn 335
changing reg in insn 319
changing reg in insn 336
changing reg in insn 320
changing reg in insn 337
changing reg in insn 321
changing reg in insn 338
changing reg in insn 323
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 348
changing reg in insn 349
changing reg in insn 351
changing reg in insn 360
changing reg in insn 361
changing reg in insn 363
changing reg in insn 371
changing reg in insn 372
changing reg in insn 370
changing reg in insn 371
changing reg in insn 373
changing reg in insn 374
changing reg in insn 378
changing reg in insn 379
changing reg in insn 377
changing reg in insn 378
changing reg in insn 380
changing reg in insn 381
changing reg in insn 393
changing reg in insn 394
changing reg in insn 396
changing reg in insn 403
changing reg in insn 404
changing reg in insn 406
changing reg in insn 413
changing reg in insn 414
changing reg in insn 416
changing reg in insn 426
changing reg in insn 427
changing reg in insn 429
changing reg in insn 437
changing reg in insn 438
changing reg in insn 436
changing reg in insn 437
changing reg in insn 439
changing reg in insn 440
changing reg in insn 444
changing reg in insn 445
changing reg in insn 443
changing reg in insn 444
changing reg in insn 446
changing reg in insn 447
changing reg in insn 466
changing reg in insn 471
changing reg in insn 467
changing reg in insn 472
changing reg in insn 468
changing reg in insn 473
changing reg in insn 469
changing reg in insn 474
changing reg in insn 470
changing reg in insn 475
changing reg in insn 486
changing reg in insn 494
changing reg in insn 488
changing reg in insn 491
changing reg in insn 489
changing reg in insn 491
changing reg in insn 487
changing reg in insn 488
changing reg in insn 493
changing reg in insn 491
changing reg in insn 490
changing reg in insn 489
changing reg in insn 494
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 492
changing reg in insn 493
changing reg in insn 495
changing reg in insn 499
changing reg in insn 497
changing reg in insn 498
changing reg in insn 496
changing reg in insn 497
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 501
changing reg in insn 503
changing reg in insn 506
changing reg in insn 507
changing reg in insn 509
changing reg in insn 513
changing reg in insn 514
changing reg in insn 512
changing reg in insn 513
changing reg in insn 515
changing reg in insn 520
changing reg in insn 517
changing reg in insn 518
changing reg in insn 516
changing reg in insn 517
changing reg in insn 518
changing reg in insn 519
changing reg in insn 519
changing reg in insn 520
changing reg in insn 539
changing reg in insn 540
changing reg in insn 540
changing reg in insn 541
changing reg in insn 545
changing reg in insn 546
changing reg in insn 546
changing reg in insn 547
changing reg in insn 561
changing reg in insn 562
changing reg in insn 560
changing reg in insn 561
changing reg in insn 567
changing reg in insn 568
changing reg in insn 566
changing reg in insn 567
changing reg in insn 615
changing reg in insn 616
changing reg in insn 618
changing reg in insn 619
changing reg in insn 5
changing reg in insn 629
deleting insn with uid = 273.
deleting insn with uid = 274.
deleting insn with uid = 275.
deleting insn with uid = 333.
deleting insn with uid = 334.
deleting insn with uid = 335.
deleting insn with uid = 336.
deleting insn with uid = 337.
deleting insn with uid = 472.
deleting insn with uid = 473.
deleting insn with uid = 474.
deleting insn with uid = 523.
deleting insn with uid = 525.
deleting insn with uid = 526.
deleting insn with uid = 528.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 277.
verify found no changes in insn with uid = 283.
verify found no changes in insn with uid = 294.
verify found no changes in insn with uid = 298.
verify found no changes in insn with uid = 299.
verify found no changes in insn with uid = 307.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 339.
verify found no changes in insn with uid = 465.
verify found no changes in insn with uid = 476.
verify found no changes in insn with uid = 478.
verify found no changes in insn with uid = 529.
verify found no changes in insn with uid = 538.
verify found no changes in insn with uid = 544.
verify found no changes in insn with uid = 550.
verify found no changes in insn with uid = 552.
verify found no changes in insn with uid = 570.
verify found no changes in insn with uid = 581.
verify found no changes in insn with uid = 584.
verify found no changes in insn with uid = 591.
verify found no changes in insn with uid = 594.
verify found no changes in insn with uid = 599.
verify found no changes in insn with uid = 602.
verify found no changes in insn with uid = 609.
verify found no changes in insn with uid = 612.
verify found no changes in insn with uid = 617.
verify found no changes in insn with uid = 620.
verify found no changes in insn with uid = 631.


int main(int, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={276d,239u} r1={79d,32u,11e} r2={62d,13u} r3={15d,15u} r4={64d,17u} r5={100d,53u} r6={1d,219u} r7={11d,109u} r8={47d} r9={47d} r10={47d} r11={47d} r12={47d} r13={47d} r14={47d} r15={47d} r17={214d,22u} r18={47d} r19={47d} r20={1d,1u,10e} r21={65d,17u} r22={48d} r23={48d} r24={48d} r25={48d} r26={48d} r27={48d} r28={48d} r29={47d} r30={47d} r31={47d} r32={47d} r33={47d} r34={47d} r35={47d} r36={47d} r37={57d,9u} r38={51d,3u} r39={47d} r40={47d} r45={47d} r46={47d} r47={47d} r48={47d} r49={47d} r50={47d} r51={47d} r52={47d} r53={47d} r54={47d} r55={47d} r56={47d} r57={47d} r58={47d} r59={47d} r60={47d} r61={47d} r62={47d} r63={47d} r64={47d} r65={47d} r66={47d} r67={47d} r68={47d} r69={47d} r70={47d} r71={47d} r72={47d} r73={47d} r74={47d} r75={47d} r76={47d} r77={47d} r78={47d} r79={47d} r80={47d} 
;;    total ref usage 4734{3964d,749u,21e} in 548{501 regular + 47 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2852 [0xfffffffffffff4dc])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) 4t_cv.cpp:36 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2864 [0xfffffffffffff4d0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) 4t_cv.cpp:36 89 {*movdi_internal}
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 8 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 D.5714+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [390])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:36 986 {stack_tls_protect_set_di}
     (nil))
(insn 8 5 9 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2824 [0xfffffffffffff4f8])) [0 maxval+0 S8 A64])
        (const_int 16384 [0x4000])) 4t_cv.cpp:50 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:52 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2768 [0xfffffffffffff530])) [0 in_file+0 S8 A64])
        (const_int 0 [0])) 4t_cv.cpp:61 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2760 [0xfffffffffffff538])) [0 in_file+8 S8 A64])
        (const_int 0 [0])) 4t_cv.cpp:62 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2852 [0xfffffffffffff4dc])) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) 4t_cv.cpp:65 7 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) 4t_cv.cpp:65 612 {*jcc_1}
     (nil)
 -> 46)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fb61bf1ba20 *.LC0>)) 4t_cv.cpp:66 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fb61bf1bab0 *.LC1>)) 4t_cv.cpp:66 89 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) 4t_cv.cpp:66 93 {*movqi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fb61bfde5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:66 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fb61bf1bb40 *.LC2>)) 4t_cv.cpp:67 89 {*movdi_internal}
     (nil))
(call_insn 20 19 21 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:67 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fb61bf1bbd0 *.LC3>)) 4t_cv.cpp:68 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:68 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7fb61bf1bc60 *.LC4>)) 4t_cv.cpp:69 89 {*movdi_internal}
     (nil))
(call_insn 24 23 25 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:69 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fb61bf1bcf0 *.LC5>)) 4t_cv.cpp:70 89 {*movdi_internal}
     (nil))
(call_insn 26 25 27 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:70 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fb61bf1bd80 *.LC6>)) 4t_cv.cpp:71 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:71 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fb61bf1be10 *.LC7>)) 4t_cv.cpp:72 89 {*movdi_internal}
     (nil))
(call_insn 30 29 31 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:72 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fb61bf1bea0 *.LC8>)) 4t_cv.cpp:73 89 {*movdi_internal}
     (nil))
(call_insn 32 31 33 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:73 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 33 32 34 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fb61bf1bf30 *.LC9>)) 4t_cv.cpp:74 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:74 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fb61bb20000 *.LC10>)) 4t_cv.cpp:75 89 {*movdi_internal}
     (nil))
(call_insn 36 35 37 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:75 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 37 36 38 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fb61bb20090 *.LC11>)) 4t_cv.cpp:76 89 {*movdi_internal}
     (nil))
(call_insn 38 37 39 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:76 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 40 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fb61bb20120 *.LC12>)) 4t_cv.cpp:77 89 {*movdi_internal}
     (nil))
(call_insn 40 39 41 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:77 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 41 40 42 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fb61bb201b0 *.LC13>)) 4t_cv.cpp:78 89 {*movdi_internal}
     (nil))
(call_insn 42 41 43 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:78 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 43 42 44 3 (set (reg:SI 5 di)
        (const_int 1 [0x1])) 4t_cv.cpp:79 90 {*movsi_internal}
     (nil))
(call_insn 44 43 45 3 (call (mem:QI (symbol_ref:DI ("exit") [flags 0x41]  <function_decl 0x7fb61bffaca8 exit>) [0 __builtin_exit S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:79 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 45 44 46)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(code_label 46 45 47 4 2 "" [1 uses])
(note 47 46 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 48 47 49 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11IsBigEndianv") [flags 0x3]  <function_decl 0x7fb61beda000 IsBigEndian>) [0 IsBigEndian S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:83 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 49 48 50 4 (set (reg:SI 0 ax [orig:87 D.5695 ] [87])
        (reg:SI 0 ax)) 4t_cv.cpp:83 90 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 D.5695 ] [87])
            (const_int 0 [0]))) 4t_cv.cpp:83 3 {*cmpsi_ccno_1}
     (nil))
(insn 51 50 52 4 (set (reg:QI 0 ax [orig:88 D.5696 ] [88])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) 4t_cv.cpp:83 607 {*setcc_qi}
     (nil))
(insn 52 51 53 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.5696 ] [88])
            (const_int 0 [0]))) 4t_cv.cpp:83 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 53 52 54 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) 4t_cv.cpp:83 612 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 638 5 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2832 [0xfffffffffffff4f0])) [0 endianCheck.systemStruct+0 S4 A64])
        (const_int 1 [0x1])) 4t_cv.cpp:84 90 {*movsi_internal}
     (nil))
(jump_insn 638 55 639 5 (set (pc)
        (label_ref 61)) 654 {jump}
     (nil)
 -> 61)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 639 638 58)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 58 639 59 6 3 "" [1 uses])
(note 59 58 60 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 6 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2832 [0xfffffffffffff4f0])) [0 endianCheck.systemStruct+0 S4 A64])
        (const_int 0 [0])) 4t_cv.cpp:87 90 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 187 188
(code_label 61 60 62 7 4 "" [1 uses])
(note 62 61 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 7 (set (reg:DI 0 ax [orig:89 D.5697 ] [89])
        (const_int 16 [0x10])) 4t_cv.cpp:91 89 {*movdi_internal}
     (nil))
(insn 64 63 65 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:89 D.5697 ] [89])) 4t_cv.cpp:91 89 {*movdi_internal}
     (nil))
(call_insn 65 64 66 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fb61c009a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:91 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 66 65 67 7 (set (reg/f:DI 0 ax [187])
        (reg:DI 0 ax)) 4t_cv.cpp:91 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [187])
        (nil)))
(insn 67 66 68 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])
        (reg/f:DI 0 ax [187])) 4t_cv.cpp:91 89 {*movdi_internal}
     (nil))
(insn 68 67 69 7 (set (reg:DI 0 ax [orig:90 D.5697 ] [90])
        (const_int 16 [0x10])) 4t_cv.cpp:92 89 {*movdi_internal}
     (nil))
(insn 69 68 70 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:90 D.5697 ] [90])) 4t_cv.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn 70 69 71 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fb61c009a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:92 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 7 (set (reg/f:DI 0 ax [188])
        (reg:DI 0 ax)) 4t_cv.cpp:92 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [188])
        (nil)))
(insn 72 71 73 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])
        (reg/f:DI 0 ax [188])) 4t_cv.cpp:92 89 {*movdi_internal}
     (nil))
(insn 73 72 101 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:94 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              9 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 101 73 74 8 6 "" [1 uses])
(note 74 101 75 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) 4t_cv.cpp:94 7 {*cmpsi_1}
     (nil))
(jump_insn 76 75 77 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 104)
            (pc))) 4t_cv.cpp:94 612 {*jcc_1}
     (nil)
 -> 104)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 95 96 97 98 99 100 189 190 191 192 193 194
(note 77 76 78 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 9 (set (reg:SI 0 ax [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:95 90 {*movsi_internal}
     (nil))
(insn 79 78 80 9 (set (reg:DI 0 ax [orig:91 D.5697 ] [91])
        (sign_extend:DI (reg:SI 0 ax [189]))) 4t_cv.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 80 79 81 9 (parallel [
            (set (reg:DI 1 dx [orig:92 D.5697 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.5697 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:95 512 {*ashldi3_1}
     (nil))
(insn 81 80 82 9 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(insn 82 81 83 9 (parallel [
            (set (reg/f:DI 3 bx [orig:93 D.5698 ] [93])
                (plus:DI (reg:DI 1 dx [orig:92 D.5697 ] [92])
                    (reg/f:DI 0 ax [190])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:95 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.5697 ] [92]))
        (nil)))
(insn 83 82 84 9 (set (reg:DI 0 ax [orig:94 D.5697 ] [94])
        (const_int 64 [0x40])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(insn 84 83 85 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:94 D.5697 ] [94])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(call_insn 85 84 86 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fb61c009a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:95 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 86 85 87 9 (set (reg/f:DI 0 ax [191])
        (reg:DI 0 ax)) 4t_cv.cpp:95 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [191])
        (nil)))
(insn 87 86 88 9 (set (reg/f:DI 0 ax [orig:95 D.5699 ] [95])
        (reg/f:DI 0 ax [191])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(insn 88 87 89 9 (set (mem/f:DI (reg/f:DI 3 bx [orig:93 D.5698 ] [93]) [0 *_45+0 S8 A64])
        (reg/f:DI 0 ax [orig:95 D.5699 ] [95])) 4t_cv.cpp:95 89 {*movdi_internal}
     (nil))
(insn 89 88 90 9 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:96 90 {*movsi_internal}
     (nil))
(insn 90 89 91 9 (set (reg:DI 0 ax [orig:96 D.5697 ] [96])
        (sign_extend:DI (reg:SI 0 ax [192]))) 4t_cv.cpp:96 142 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 9 (parallel [
            (set (reg:DI 1 dx [orig:97 D.5697 ] [97])
                (ashift:DI (reg:DI 0 ax [orig:96 D.5697 ] [96])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:96 512 {*ashldi3_1}
     (nil))
(insn 92 91 93 9 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(insn 93 92 94 9 (parallel [
            (set (reg/f:DI 3 bx [orig:98 D.5700 ] [98])
                (plus:DI (reg:DI 1 dx [orig:97 D.5697 ] [97])
                    (reg/f:DI 0 ax [193])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:96 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2792 [0xfffffffffffff518])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.5697 ] [97]))
        (nil)))
(insn 94 93 95 9 (set (reg:DI 0 ax [orig:99 D.5697 ] [99])
        (const_int 56 [0x38])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(insn 95 94 96 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:99 D.5697 ] [99])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(call_insn 96 95 97 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fb61c009a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:96 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 97 96 98 9 (set (reg/f:DI 0 ax [194])
        (reg:DI 0 ax)) 4t_cv.cpp:96 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [194])
        (nil)))
(insn 98 97 99 9 (set (reg/f:DI 0 ax [orig:100 D.5699 ] [100])
        (reg/f:DI 0 ax [194])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(insn 99 98 100 9 (set (mem/f:DI (reg/f:DI 3 bx [orig:98 D.5700 ] [98]) [0 *_52+0 S8 A64])
        (reg/f:DI 0 ax [orig:100 D.5699 ] [100])) 4t_cv.cpp:96 89 {*movdi_internal}
     (nil))
(insn 100 99 640 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:94 217 {*addsi_1}
     (nil))
(jump_insn 640 100 641 9 (set (pc)
        (label_ref 101)) 4t_cv.cpp:94 654 {jump}
     (nil)
 -> 101)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 641 640 104)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 104 641 105 10 5 "" [1 uses])
(note 105 104 106 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 229 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:101 90 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              12 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 229 106 107 11 8 "" [1 uses])
(note 107 229 108 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) 4t_cv.cpp:101 7 {*cmpsi_1}
     (nil))
(jump_insn 109 108 110 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 232)
            (pc))) 4t_cv.cpp:101 612 {*jcc_1}
     (nil)
 -> 232)
;;  succ:       13
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
(note 110 109 111 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 12 (set (reg:SI 0 ax [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:102 90 {*movsi_internal}
     (nil))
(insn 112 111 113 12 (set (reg:DI 0 ax [195])
        (sign_extend:DI (reg:SI 0 ax [196]))) 4t_cv.cpp:102 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 659 12 (parallel [
            (set (reg:DI 0 ax [197])
                (mult:DI (reg:DI 0 ax [195])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:102 306 {*muldi3_1}
     (nil))
(insn 659 113 114 12 (set (reg:DI 3 bx [392])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:102 214 {*leadi}
     (nil))
(insn 114 659 115 12 (parallel [
            (set (reg:DI 0 ax [198])
                (plus:DI (reg:DI 0 ax [197])
                    (reg:DI 3 bx [392])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:102 218 {*adddi_1}
     (nil))
(insn 115 114 116 12 (parallel [
            (set (reg/f:DI 0 ax [199])
                (plus:DI (reg:DI 0 ax [198])
                    (const_int -2560 [0xfffffffffffff600])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:102 218 {*adddi_1}
     (nil))
(insn 116 115 117 12 (set (reg:SF 21 xmm0 [200])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:102 129 {*movsf_internal}
     (nil))
(insn 117 116 118 12 (set (mem/j:SF (reg/f:DI 0 ax [199]) [0 procpar_info[i_2].acquision_time+0 S4 A64])
        (reg:SF 21 xmm0 [200])) 4t_cv.cpp:102 129 {*movsf_internal}
     (nil))
(insn 118 117 119 12 (set (reg:SI 0 ax [202])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:103 90 {*movsi_internal}
     (nil))
(insn 119 118 120 12 (set (reg:DI 0 ax [201])
        (sign_extend:DI (reg:SI 0 ax [202]))) 4t_cv.cpp:103 142 {*extendsidi2_rex64}
     (nil))
(insn 120 119 660 12 (parallel [
            (set (reg:DI 0 ax [203])
                (mult:DI (reg:DI 0 ax [201])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:103 306 {*muldi3_1}
     (nil))
(insn 660 120 121 12 (set (reg:DI 3 bx [393])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:103 214 {*leadi}
     (nil))
(insn 121 660 122 12 (parallel [
            (set (reg:DI 0 ax [204])
                (plus:DI (reg:DI 0 ax [203])
                    (reg:DI 3 bx [393])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:103 218 {*adddi_1}
     (nil))
(insn 122 121 123 12 (parallel [
            (set (reg/f:DI 0 ax [205])
                (plus:DI (reg:DI 0 ax [204])
                    (const_int -2268 [0xfffffffffffff724])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:103 218 {*adddi_1}
     (nil))
(insn 123 122 124 12 (set (reg:SF 21 xmm0 [206])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:103 129 {*movsf_internal}
     (nil))
(insn 124 123 125 12 (set (mem/j:SF (reg/f:DI 0 ax [205]) [0 procpar_info[i_2].filter+0 S4 A32])
        (reg:SF 21 xmm0 [206])) 4t_cv.cpp:103 129 {*movsf_internal}
     (nil))
(insn 125 124 126 12 (set (reg:SI 0 ax [208])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:104 90 {*movsi_internal}
     (nil))
(insn 126 125 127 12 (set (reg:DI 0 ax [207])
        (sign_extend:DI (reg:SI 0 ax [208]))) 4t_cv.cpp:104 142 {*extendsidi2_rex64}
     (nil))
(insn 127 126 661 12 (parallel [
            (set (reg:DI 0 ax [209])
                (mult:DI (reg:DI 0 ax [207])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:104 306 {*muldi3_1}
     (nil))
(insn 661 127 128 12 (set (reg:DI 3 bx [394])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:104 214 {*leadi}
     (nil))
(insn 128 661 129 12 (parallel [
            (set (reg:DI 0 ax [210])
                (plus:DI (reg:DI 0 ax [209])
                    (reg:DI 3 bx [394])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:104 218 {*adddi_1}
     (nil))
(insn 129 128 130 12 (parallel [
            (set (reg/f:DI 0 ax [211])
                (plus:DI (reg:DI 0 ax [210])
                    (const_int -2264 [0xfffffffffffff728])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:104 218 {*adddi_1}
     (nil))
(insn 130 129 131 12 (set (mem/j:SI (reg/f:DI 0 ax [211]) [0 procpar_info[i_2].num_transients+0 S4 A64])
        (const_int 1 [0x1])) 4t_cv.cpp:104 90 {*movsi_internal}
     (nil))
(insn 131 130 132 12 (set (reg:SI 0 ax [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:105 90 {*movsi_internal}
     (nil))
(insn 132 131 133 12 (set (reg:DI 0 ax [212])
        (sign_extend:DI (reg:SI 0 ax [213]))) 4t_cv.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 133 132 662 12 (parallel [
            (set (reg:DI 0 ax [214])
                (mult:DI (reg:DI 0 ax [212])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:105 306 {*muldi3_1}
     (nil))
(insn 662 133 134 12 (set (reg:DI 3 bx [395])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:105 214 {*leadi}
     (nil))
(insn 134 662 135 12 (parallel [
            (set (reg:DI 0 ax [215])
                (plus:DI (reg:DI 0 ax [214])
                    (reg:DI 3 bx [395])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:105 218 {*adddi_1}
     (nil))
(insn 135 134 136 12 (parallel [
            (set (reg/f:DI 0 ax [216])
                (plus:DI (reg:DI 0 ax [215])
                    (const_int -2260 [0xfffffffffffff72c])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:105 218 {*adddi_1}
     (nil))
(insn 136 135 137 12 (set (mem/j:SI (reg/f:DI 0 ax [216]) [0 procpar_info[i_2].num_points+0 S4 A32])
        (const_int 1024 [0x400])) 4t_cv.cpp:105 90 {*movsi_internal}
     (nil))
(insn 137 136 138 12 (set (reg:SI 0 ax [218])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:106 90 {*movsi_internal}
     (nil))
(insn 138 137 139 12 (set (reg:DI 0 ax [217])
        (sign_extend:DI (reg:SI 0 ax [218]))) 4t_cv.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 139 138 663 12 (parallel [
            (set (reg:DI 0 ax [219])
                (mult:DI (reg:DI 0 ax [217])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:106 306 {*muldi3_1}
     (nil))
(insn 663 139 140 12 (set (reg:DI 3 bx [396])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:106 214 {*leadi}
     (nil))
(insn 140 663 141 12 (parallel [
            (set (reg:DI 0 ax [220])
                (plus:DI (reg:DI 0 ax [219])
                    (reg:DI 3 bx [396])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:106 218 {*adddi_1}
     (nil))
(insn 141 140 142 12 (parallel [
            (set (reg/f:DI 0 ax [221])
                (plus:DI (reg:DI 0 ax [220])
                    (const_int -2256 [0xfffffffffffff730])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:106 218 {*adddi_1}
     (nil))
(insn 142 141 143 12 (set (reg:DF 21 xmm0 [222])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) 4t_cv.cpp:106 128 {*movdf_internal}
     (nil))
(insn 143 142 144 12 (set (mem/j:DF (reg/f:DI 0 ax [221]) [0 procpar_info[i_2].main_frequency+0 S8 A64])
        (reg:DF 21 xmm0 [222])) 4t_cv.cpp:106 128 {*movdf_internal}
     (nil))
(insn 144 143 145 12 (set (reg:SI 0 ax [224])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:107 90 {*movsi_internal}
     (nil))
(insn 145 144 146 12 (set (reg:DI 0 ax [223])
        (sign_extend:DI (reg:SI 0 ax [224]))) 4t_cv.cpp:107 142 {*extendsidi2_rex64}
     (nil))
(insn 146 145 664 12 (parallel [
            (set (reg:DI 0 ax [225])
                (mult:DI (reg:DI 0 ax [223])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:107 306 {*muldi3_1}
     (nil))
(insn 664 146 147 12 (set (reg:DI 3 bx [397])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:107 214 {*leadi}
     (nil))
(insn 147 664 148 12 (parallel [
            (set (reg:DI 0 ax [226])
                (plus:DI (reg:DI 0 ax [225])
                    (reg:DI 3 bx [397])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:107 218 {*adddi_1}
     (nil))
(insn 148 147 149 12 (parallel [
            (set (reg/f:DI 0 ax [227])
                (plus:DI (reg:DI 0 ax [226])
                    (const_int -2248 [0xfffffffffffff738])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:107 218 {*adddi_1}
     (nil))
(insn 149 148 150 12 (set (reg:DF 21 xmm0 [228])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) 4t_cv.cpp:107 128 {*movdf_internal}
     (nil))
(insn 150 149 151 12 (set (mem/j:DF (reg/f:DI 0 ax [227]) [0 procpar_info[i_2].offset_frequency+0 S8 A64])
        (reg:DF 21 xmm0 [228])) 4t_cv.cpp:107 128 {*movdf_internal}
     (nil))
(insn 151 150 152 12 (set (reg:SI 0 ax [230])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:108 90 {*movsi_internal}
     (nil))
(insn 152 151 153 12 (set (reg:DI 0 ax [229])
        (sign_extend:DI (reg:SI 0 ax [230]))) 4t_cv.cpp:108 142 {*extendsidi2_rex64}
     (nil))
(insn 153 152 665 12 (parallel [
            (set (reg:DI 0 ax [231])
                (mult:DI (reg:DI 0 ax [229])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:108 306 {*muldi3_1}
     (nil))
(insn 665 153 154 12 (set (reg:DI 3 bx [398])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:108 214 {*leadi}
     (nil))
(insn 154 665 155 12 (parallel [
            (set (reg:DI 0 ax [232])
                (plus:DI (reg:DI 0 ax [231])
                    (reg:DI 3 bx [398])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:108 218 {*adddi_1}
     (nil))
(insn 155 154 156 12 (parallel [
            (set (reg/f:DI 0 ax [233])
                (plus:DI (reg:DI 0 ax [232])
                    (const_int -2240 [0xfffffffffffff740])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:108 218 {*adddi_1}
     (nil))
(insn 156 155 157 12 (set (reg:SF 21 xmm0 [234])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:108 129 {*movsf_internal}
     (nil))
(insn 157 156 158 12 (set (mem/j:SF (reg/f:DI 0 ax [233]) [0 procpar_info[i_2].te+0 S4 A64])
        (reg:SF 21 xmm0 [234])) 4t_cv.cpp:108 129 {*movsf_internal}
     (nil))
(insn 158 157 159 12 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:109 90 {*movsi_internal}
     (nil))
(insn 159 158 160 12 (set (reg:DI 0 ax [235])
        (sign_extend:DI (reg:SI 0 ax [236]))) 4t_cv.cpp:109 142 {*extendsidi2_rex64}
     (nil))
(insn 160 159 666 12 (parallel [
            (set (reg:DI 0 ax [237])
                (mult:DI (reg:DI 0 ax [235])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:109 306 {*muldi3_1}
     (nil))
(insn 666 160 161 12 (set (reg:DI 4 si [399])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:109 214 {*leadi}
     (nil))
(insn 161 666 162 12 (parallel [
            (set (reg:DI 0 ax [238])
                (plus:DI (reg:DI 0 ax [237])
                    (reg:DI 4 si [399])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:109 218 {*adddi_1}
     (nil))
(insn 162 161 163 12 (parallel [
            (set (reg/f:DI 0 ax [239])
                (plus:DI (reg:DI 0 ax [238])
                    (const_int -2236 [0xfffffffffffff744])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:109 218 {*adddi_1}
     (nil))
(insn 163 162 164 12 (set (reg:SF 21 xmm0 [240])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:109 129 {*movsf_internal}
     (nil))
(insn 164 163 165 12 (set (mem/j:SF (reg/f:DI 0 ax [239]) [0 procpar_info[i_2].tm+0 S4 A32])
        (reg:SF 21 xmm0 [240])) 4t_cv.cpp:109 129 {*movsf_internal}
     (nil))
(insn 165 164 166 12 (set (reg:SI 0 ax [242])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:110 90 {*movsi_internal}
     (nil))
(insn 166 165 167 12 (set (reg:DI 0 ax [241])
        (sign_extend:DI (reg:SI 0 ax [242]))) 4t_cv.cpp:110 142 {*extendsidi2_rex64}
     (nil))
(insn 167 166 667 12 (parallel [
            (set (reg:DI 0 ax [243])
                (mult:DI (reg:DI 0 ax [241])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:110 306 {*muldi3_1}
     (nil))
(insn 667 167 168 12 (set (reg:DI 3 bx [400])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:110 214 {*leadi}
     (nil))
(insn 168 667 169 12 (parallel [
            (set (reg:DI 0 ax [244])
                (plus:DI (reg:DI 0 ax [243])
                    (reg:DI 3 bx [400])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:110 218 {*adddi_1}
     (nil))
(insn 169 168 170 12 (parallel [
            (set (reg/f:DI 0 ax [245])
                (plus:DI (reg:DI 0 ax [244])
                    (const_int -2232 [0xfffffffffffff748])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:110 218 {*adddi_1}
     (nil))
(insn 170 169 171 12 (set (reg:SF 21 xmm0 [246])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:110 129 {*movsf_internal}
     (nil))
(insn 171 170 172 12 (set (mem/j:SF (reg/f:DI 0 ax [245]) [0 procpar_info[i_2].gain+0 S4 A64])
        (reg:SF 21 xmm0 [246])) 4t_cv.cpp:110 129 {*movsf_internal}
     (nil))
(insn 172 171 173 12 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:111 90 {*movsi_internal}
     (nil))
(insn 173 172 174 12 (set (reg:DI 0 ax [247])
        (sign_extend:DI (reg:SI 0 ax [248]))) 4t_cv.cpp:111 142 {*extendsidi2_rex64}
     (nil))
(insn 174 173 668 12 (parallel [
            (set (reg:DI 0 ax [249])
                (mult:DI (reg:DI 0 ax [247])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:111 306 {*muldi3_1}
     (nil))
(insn 668 174 175 12 (set (reg:DI 4 si [401])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:111 214 {*leadi}
     (nil))
(insn 175 668 176 12 (parallel [
            (set (reg:DI 0 ax [250])
                (plus:DI (reg:DI 0 ax [249])
                    (reg:DI 4 si [401])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:111 218 {*adddi_1}
     (nil))
(insn 176 175 177 12 (parallel [
            (set (reg/f:DI 0 ax [251])
                (plus:DI (reg:DI 0 ax [250])
                    (const_int -2228 [0xfffffffffffff74c])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:111 218 {*adddi_1}
     (nil))
(insn 177 176 178 12 (set (reg:SF 21 xmm0 [252])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:111 129 {*movsf_internal}
     (nil))
(insn 178 177 179 12 (set (mem/j:SF (reg/f:DI 0 ax [251]) [0 procpar_info[i_2].pos1+0 S4 A32])
        (reg:SF 21 xmm0 [252])) 4t_cv.cpp:111 129 {*movsf_internal}
     (nil))
(insn 179 178 180 12 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:112 90 {*movsi_internal}
     (nil))
(insn 180 179 181 12 (set (reg:DI 0 ax [253])
        (sign_extend:DI (reg:SI 0 ax [254]))) 4t_cv.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 181 180 669 12 (parallel [
            (set (reg:DI 0 ax [255])
                (mult:DI (reg:DI 0 ax [253])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:112 306 {*muldi3_1}
     (nil))
(insn 669 181 182 12 (set (reg:DI 3 bx [402])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:112 214 {*leadi}
     (nil))
(insn 182 669 183 12 (parallel [
            (set (reg:DI 0 ax [256])
                (plus:DI (reg:DI 0 ax [255])
                    (reg:DI 3 bx [402])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:112 218 {*adddi_1}
     (nil))
(insn 183 182 184 12 (parallel [
            (set (reg/f:DI 0 ax [257])
                (plus:DI (reg:DI 0 ax [256])
                    (const_int -2224 [0xfffffffffffff750])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:112 218 {*adddi_1}
     (nil))
(insn 184 183 185 12 (set (reg:SF 21 xmm0 [258])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:112 129 {*movsf_internal}
     (nil))
(insn 185 184 186 12 (set (mem/j:SF (reg/f:DI 0 ax [257]) [0 procpar_info[i_2].pos2+0 S4 A64])
        (reg:SF 21 xmm0 [258])) 4t_cv.cpp:112 129 {*movsf_internal}
     (nil))
(insn 186 185 187 12 (set (reg:SI 0 ax [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:113 90 {*movsi_internal}
     (nil))
(insn 187 186 188 12 (set (reg:DI 0 ax [259])
        (sign_extend:DI (reg:SI 0 ax [260]))) 4t_cv.cpp:113 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 670 12 (parallel [
            (set (reg:DI 0 ax [261])
                (mult:DI (reg:DI 0 ax [259])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:113 306 {*muldi3_1}
     (nil))
(insn 670 188 189 12 (set (reg:DI 4 si [403])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:113 214 {*leadi}
     (nil))
(insn 189 670 190 12 (parallel [
            (set (reg:DI 0 ax [262])
                (plus:DI (reg:DI 0 ax [261])
                    (reg:DI 4 si [403])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:113 218 {*adddi_1}
     (nil))
(insn 190 189 191 12 (parallel [
            (set (reg/f:DI 0 ax [263])
                (plus:DI (reg:DI 0 ax [262])
                    (const_int -2220 [0xfffffffffffff754])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:113 218 {*adddi_1}
     (nil))
(insn 191 190 192 12 (set (reg:SF 21 xmm0 [264])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:113 129 {*movsf_internal}
     (nil))
(insn 192 191 193 12 (set (mem/j:SF (reg/f:DI 0 ax [263]) [0 procpar_info[i_2].pos3+0 S4 A32])
        (reg:SF 21 xmm0 [264])) 4t_cv.cpp:113 129 {*movsf_internal}
     (nil))
(insn 193 192 194 12 (set (reg:SI 0 ax [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:114 90 {*movsi_internal}
     (nil))
(insn 194 193 195 12 (set (reg:DI 0 ax [265])
        (sign_extend:DI (reg:SI 0 ax [266]))) 4t_cv.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 195 194 671 12 (parallel [
            (set (reg:DI 0 ax [267])
                (mult:DI (reg:DI 0 ax [265])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:114 306 {*muldi3_1}
     (nil))
(insn 671 195 196 12 (set (reg:DI 3 bx [404])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:114 214 {*leadi}
     (nil))
(insn 196 671 197 12 (parallel [
            (set (reg:DI 0 ax [268])
                (plus:DI (reg:DI 0 ax [267])
                    (reg:DI 3 bx [404])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:114 218 {*adddi_1}
     (nil))
(insn 197 196 198 12 (parallel [
            (set (reg/f:DI 0 ax [269])
                (plus:DI (reg:DI 0 ax [268])
                    (const_int -2216 [0xfffffffffffff758])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:114 218 {*adddi_1}
     (nil))
(insn 198 197 199 12 (set (reg:SF 21 xmm0 [270])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:114 129 {*movsf_internal}
     (nil))
(insn 199 198 200 12 (set (mem/j:SF (reg/f:DI 0 ax [269]) [0 procpar_info[i_2].vox1+0 S4 A64])
        (reg:SF 21 xmm0 [270])) 4t_cv.cpp:114 129 {*movsf_internal}
     (nil))
(insn 200 199 201 12 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:115 90 {*movsi_internal}
     (nil))
(insn 201 200 202 12 (set (reg:DI 0 ax [271])
        (sign_extend:DI (reg:SI 0 ax [272]))) 4t_cv.cpp:115 142 {*extendsidi2_rex64}
     (nil))
(insn 202 201 672 12 (parallel [
            (set (reg:DI 0 ax [273])
                (mult:DI (reg:DI 0 ax [271])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:115 306 {*muldi3_1}
     (nil))
(insn 672 202 203 12 (set (reg:DI 4 si [405])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:115 214 {*leadi}
     (nil))
(insn 203 672 204 12 (parallel [
            (set (reg:DI 0 ax [274])
                (plus:DI (reg:DI 0 ax [273])
                    (reg:DI 4 si [405])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:115 218 {*adddi_1}
     (nil))
(insn 204 203 205 12 (parallel [
            (set (reg/f:DI 0 ax [275])
                (plus:DI (reg:DI 0 ax [274])
                    (const_int -2212 [0xfffffffffffff75c])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:115 218 {*adddi_1}
     (nil))
(insn 205 204 206 12 (set (reg:SF 21 xmm0 [276])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:115 129 {*movsf_internal}
     (nil))
(insn 206 205 207 12 (set (mem/j:SF (reg/f:DI 0 ax [275]) [0 procpar_info[i_2].vox2+0 S4 A32])
        (reg:SF 21 xmm0 [276])) 4t_cv.cpp:115 129 {*movsf_internal}
     (nil))
(insn 207 206 208 12 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:116 90 {*movsi_internal}
     (nil))
(insn 208 207 209 12 (set (reg:DI 0 ax [277])
        (sign_extend:DI (reg:SI 0 ax [278]))) 4t_cv.cpp:116 142 {*extendsidi2_rex64}
     (nil))
(insn 209 208 673 12 (parallel [
            (set (reg:DI 0 ax [279])
                (mult:DI (reg:DI 0 ax [277])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:116 306 {*muldi3_1}
     (nil))
(insn 673 209 210 12 (set (reg:DI 3 bx [406])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:116 214 {*leadi}
     (nil))
(insn 210 673 211 12 (parallel [
            (set (reg:DI 0 ax [280])
                (plus:DI (reg:DI 0 ax [279])
                    (reg:DI 3 bx [406])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:116 218 {*adddi_1}
     (nil))
(insn 211 210 212 12 (parallel [
            (set (reg/f:DI 0 ax [281])
                (plus:DI (reg:DI 0 ax [280])
                    (const_int -2208 [0xfffffffffffff760])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:116 218 {*adddi_1}
     (nil))
(insn 212 211 213 12 (set (reg:SF 21 xmm0 [282])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:116 129 {*movsf_internal}
     (nil))
(insn 213 212 214 12 (set (mem/j:SF (reg/f:DI 0 ax [281]) [0 procpar_info[i_2].vox3+0 S4 A64])
        (reg:SF 21 xmm0 [282])) 4t_cv.cpp:116 129 {*movsf_internal}
     (nil))
(insn 214 213 215 12 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:117 90 {*movsi_internal}
     (nil))
(insn 215 214 216 12 (set (reg:DI 0 ax [283])
        (sign_extend:DI (reg:SI 0 ax [284]))) 4t_cv.cpp:117 142 {*extendsidi2_rex64}
     (nil))
(insn 216 215 674 12 (parallel [
            (set (reg:DI 0 ax [285])
                (mult:DI (reg:DI 0 ax [283])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:117 306 {*muldi3_1}
     (nil))
(insn 674 216 217 12 (set (reg:DI 2 cx [407])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:117 214 {*leadi}
     (nil))
(insn 217 674 218 12 (parallel [
            (set (reg:DI 0 ax [286])
                (plus:DI (reg:DI 0 ax [285])
                    (reg:DI 2 cx [407])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:117 218 {*adddi_1}
     (nil))
(insn 218 217 219 12 (parallel [
            (set (reg/f:DI 0 ax [287])
                (plus:DI (reg:DI 0 ax [286])
                    (const_int -2200 [0xfffffffffffff768])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:117 218 {*adddi_1}
     (nil))
(insn 219 218 220 12 (set (reg:DF 21 xmm0 [288])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) 4t_cv.cpp:117 128 {*movdf_internal}
     (nil))
(insn 220 219 221 12 (set (mem/j:DF (reg/f:DI 0 ax [287]) [0 procpar_info[i_2].span+0 S8 A64])
        (reg:DF 21 xmm0 [288])) 4t_cv.cpp:117 128 {*movdf_internal}
     (nil))
(insn 221 220 222 12 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:118 90 {*movsi_internal}
     (nil))
(insn 222 221 223 12 (set (reg:DI 0 ax [289])
        (sign_extend:DI (reg:SI 0 ax [290]))) 4t_cv.cpp:118 142 {*extendsidi2_rex64}
     (nil))
(insn 223 222 675 12 (parallel [
            (set (reg:DI 0 ax [291])
                (mult:DI (reg:DI 0 ax [289])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:118 306 {*muldi3_1}
     (nil))
(insn 675 223 224 12 (set (reg:DI 4 si [408])
        (plus:DI (reg/f:DI 6 bp)
            (const_int -16 [0xfffffffffffffff0]))) 4t_cv.cpp:118 214 {*leadi}
     (nil))
(insn 224 675 225 12 (parallel [
            (set (reg:DI 0 ax [292])
                (plus:DI (reg:DI 0 ax [291])
                    (reg:DI 4 si [408])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:118 218 {*adddi_1}
     (nil))
(insn 225 224 226 12 (parallel [
            (set (reg/f:DI 0 ax [293])
                (plus:DI (reg:DI 0 ax [292])
                    (const_int -2192 [0xfffffffffffff770])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:118 218 {*adddi_1}
     (nil))
(insn 226 225 227 12 (set (reg:SF 21 xmm0 [294])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S4 A32])) 4t_cv.cpp:118 129 {*movsf_internal}
     (nil))
(insn 227 226 228 12 (set (mem/j:SF (reg/f:DI 0 ax [293]) [0 procpar_info[i_2].vtheta+0 S4 A64])
        (reg:SF 21 xmm0 [294])) 4t_cv.cpp:118 129 {*movsf_internal}
     (nil))
(insn 228 227 642 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:101 217 {*addsi_1}
     (nil))
(jump_insn 642 228 643 12 (set (pc)
        (label_ref 229)) 4t_cv.cpp:101 654 {jump}
     (nil)
 -> 229)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 643 642 232)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 232 643 233 13 7 "" [1 uses])
(note 233 232 234 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 260 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:121 90 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              15 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 260 234 235 14 10 "" [1 uses])
(note 235 260 236 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) 4t_cv.cpp:121 7 {*cmpsi_1}
     (nil))
(jump_insn 237 236 238 14 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 263)
            (pc))) 4t_cv.cpp:121 612 {*jcc_1}
     (nil)
 -> 263)
;;  succ:       16
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 295 296 297 298 299 300 301 302 303 304 305
(note 238 237 239 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 15 (parallel [
            (set (reg:DI 1 dx [295])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:122 218 {*adddi_1}
     (nil))
(insn 240 239 241 15 (set (reg:SI 0 ax [297])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:122 90 {*movsi_internal}
     (nil))
(insn 241 240 242 15 (set (reg:DI 0 ax [296])
        (sign_extend:DI (reg:SI 0 ax [297]))) 4t_cv.cpp:122 142 {*extendsidi2_rex64}
     (nil))
(insn 242 241 243 15 (parallel [
            (set (reg:DI 0 ax [298])
                (mult:DI (reg:DI 0 ax [296])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:122 306 {*muldi3_1}
     (nil))
(insn 243 242 244 15 (parallel [
            (set (reg:DI 0 ax [299])
                (plus:DI (reg:DI 0 ax [298])
                    (reg:DI 1 dx [295])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:122 218 {*adddi_1}
     (nil))
(insn 244 243 245 15 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.5701 ] [101])
                (plus:DI (reg:DI 0 ax [299])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:122 218 {*adddi_1}
     (nil))
(insn 245 244 676 15 (set (reg:DI 3 bx [409])
        (const_int 2334399942965096270 [0x2065746144206f4e])) 4t_cv.cpp:122 89 {*movdi_internal}
     (nil))
(insn 676 245 246 15 (set (mem:DI (reg/f:DI 0 ax [orig:101 D.5701 ] [101]) [0 MEM[(void *)_78]+0 S8 A8])
        (reg:DI 3 bx [409])) 4t_cv.cpp:122 89 {*movdi_internal}
     (nil))
(insn 246 676 677 15 (set (reg:DI 2 cx [410])
        (const_int 7809911822066218561 [0x6c62616c69617641])) 4t_cv.cpp:122 89 {*movdi_internal}
     (nil))
(insn 677 246 247 15 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:101 D.5701 ] [101])
                (const_int 8 [0x8])) [0 MEM[(void *)_78]+8 S8 A8])
        (reg:DI 2 cx [410])) 4t_cv.cpp:122 89 {*movdi_internal}
     (nil))
(insn 247 677 248 15 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:101 D.5701 ] [101])
                (const_int 16 [0x10])) [0 MEM[(void *)_78]+16 S2 A8])
        (const_int 101 [0x65])) 4t_cv.cpp:122 92 {*movhi_internal}
     (nil))
(insn 248 247 249 15 (parallel [
            (set (reg:DI 0 ax [300])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 218 {*adddi_1}
     (nil))
(insn 249 248 250 15 (set (reg:SI 1 dx [302])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:123 90 {*movsi_internal}
     (nil))
(insn 250 249 251 15 (set (reg:DI 1 dx [301])
        (sign_extend:DI (reg:SI 1 dx [302]))) 4t_cv.cpp:123 142 {*extendsidi2_rex64}
     (nil))
(insn 251 250 252 15 (parallel [
            (set (reg:DI 1 dx [303])
                (mult:DI (reg:DI 1 dx [301])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 306 {*muldi3_1}
     (nil))
(insn 252 251 253 15 (parallel [
            (set (reg:DI 1 dx [304])
                (plus:DI (reg:DI 1 dx [303])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 218 {*adddi_1}
     (nil))
(insn 253 252 254 15 (parallel [
            (set (reg:DI 0 ax [305])
                (plus:DI (reg:DI 0 ax [300])
                    (reg:DI 1 dx [304])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 218 {*adddi_1}
     (nil))
(insn 254 253 255 15 (parallel [
            (set (reg/f:DI 0 ax [orig:102 D.5702 ] [102])
                (plus:DI (reg:DI 0 ax [305])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:123 218 {*adddi_1}
     (nil))
(insn 255 254 678 15 (set (reg:DI 4 si [411])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) 4t_cv.cpp:123 89 {*movdi_internal}
     (nil))
(insn 678 255 256 15 (set (mem:DI (reg/f:DI 0 ax [orig:102 D.5702 ] [102]) [0 MEM[(void *)_80]+0 S8 A8])
        (reg:DI 4 si [411])) 4t_cv.cpp:123 89 {*movdi_internal}
     (nil))
(insn 256 678 679 15 (set (reg:DI 3 bx [412])
        (const_int 7593480468811836769 [0x6961764120656d61])) 4t_cv.cpp:123 89 {*movdi_internal}
     (nil))
(insn 679 256 257 15 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:102 D.5702 ] [102])
                (const_int 8 [0x8])) [0 MEM[(void *)_80]+8 S8 A8])
        (reg:DI 3 bx [412])) 4t_cv.cpp:123 89 {*movdi_internal}
     (nil))
(insn 257 679 258 15 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:102 D.5702 ] [102])
                (const_int 16 [0x10])) [0 MEM[(void *)_80]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) 4t_cv.cpp:123 90 {*movsi_internal}
     (nil))
(insn 258 257 259 15 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:102 D.5702 ] [102])
                (const_int 20 [0x14])) [0 MEM[(void *)_80]+20 S2 A8])
        (const_int 101 [0x65])) 4t_cv.cpp:123 92 {*movhi_internal}
     (nil))
(insn 259 258 644 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:121 217 {*addsi_1}
     (nil))
(jump_insn 644 259 645 15 (set (pc)
        (label_ref 260)) 4t_cv.cpp:121 654 {jump}
     (nil)
 -> 260)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 645 644 263)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 306 307 308 309 310 311 312 313 314
(code_label 263 645 264 16 9 "" [1 uses])
(note 264 263 265 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 16 (parallel [
            (set (reg:DI 37 r8 [306])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2844 [0xfffffffffffff4e4])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:253 218 {*adddi_1}
     (nil))
(insn 266 265 267 16 (set (reg:DI 5 di [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2864 [0xfffffffffffff4d0])) [0 argv+0 S8 A64])) 4t_cv.cpp:253 89 {*movdi_internal}
     (nil))
(insn 267 266 268 16 (set (reg:SI 2 cx [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2852 [0xfffffffffffff4dc])) [0 argc+0 S4 A32])) 4t_cv.cpp:253 90 {*movsi_internal}
     (nil))
(insn 268 267 269 16 (parallel [
            (set (reg:DI 1 dx [309])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:253 218 {*adddi_1}
     (nil))
(insn 269 268 270 16 (parallel [
            (set (reg:DI 4 si [310])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:253 218 {*adddi_1}
     (nil))
(insn 270 269 271 16 (parallel [
            (set (reg:DI 0 ax [311])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2720 [0xfffffffffffff560])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:253 218 {*adddi_1}
     (nil))
(insn 271 270 272 16 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [306])) 4t_cv.cpp:253 89 {*movdi_internal}
     (nil))
(insn 272 271 276 16 (set (reg:DI 37 r8)
        (reg:DI 5 di [307])) 4t_cv.cpp:253 89 {*movdi_internal}
     (nil))
(insn 276 272 277 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [311])) 4t_cv.cpp:253 89 {*movdi_internal}
     (nil))
(call_insn 277 276 278 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z12command_lineP10PreprocessP7IOFilesP12Procpar_infoiPPcPi") [flags 0x41]  <function_decl 0x7fb61beb0d80 command_line>) [0 command_line S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:253 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 278 277 279 16 (parallel [
            (set (reg:DI 0 ax [312])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:263 218 {*adddi_1}
     (nil))
(insn 279 278 280 16 (parallel [
            (set (reg:DI 1 dx [313])
                (plus:DI (reg:DI 0 ax [312])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:263 218 {*adddi_1}
     (nil))
(insn 280 279 281 16 (parallel [
            (set (reg:DI 0 ax [314])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:263 218 {*adddi_1}
     (nil))
(insn 281 280 282 16 (set (reg:DI 4 si)
        (reg:DI 1 dx [313])) 4t_cv.cpp:263 89 {*movdi_internal}
     (nil))
(insn 282 281 283 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [314])) 4t_cv.cpp:263 89 {*movdi_internal}
     (nil))
(call_insn 283 282 284 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z12read_procparP12Procpar_infoPc") [flags 0x41]  <function_decl 0x7fb61beb0e58 read_procpar>) [0 read_procpar S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:263 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 284 283 285 16 (set (reg:SI 0 ax [orig:103 D.5695 ] [103])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:270 90 {*movsi_internal}
     (nil))
(insn 285 284 286 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:103 D.5695 ] [103])
            (const_int 1 [0x1]))) 4t_cv.cpp:270 7 {*cmpsi_1}
     (nil))
(jump_insn 286 285 287 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 295)
            (pc))) 4t_cv.cpp:270 612 {*jcc_1}
     (nil)
 -> 295)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 315 316 317 318
(note 287 286 288 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 17 (parallel [
            (set (reg:DI 0 ax [315])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:271 218 {*adddi_1}
     (nil))
(insn 289 288 290 17 (parallel [
            (set (reg:DI 1 dx [316])
                (plus:DI (reg:DI 0 ax [315])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:271 218 {*adddi_1}
     (nil))
(insn 290 289 291 17 (parallel [
            (set (reg:DI 0 ax [317])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:271 218 {*adddi_1}
     (nil))
(insn 291 290 292 17 (parallel [
            (set (reg:DI 0 ax [318])
                (plus:DI (reg:DI 0 ax [317])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:271 218 {*adddi_1}
     (nil))
(insn 292 291 293 17 (set (reg:DI 4 si)
        (reg:DI 1 dx [316])) 4t_cv.cpp:271 89 {*movdi_internal}
     (nil))
(insn 293 292 294 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [318])) 4t_cv.cpp:271 89 {*movdi_internal}
     (nil))
(call_insn 294 293 295 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z12read_procparP12Procpar_infoPc") [flags 0x41]  <function_decl 0x7fb61beb0e58 read_procpar>) [0 read_procpar S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:271 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104 105
(code_label 295 294 296 18 11 "" [1 uses])
(note 296 295 297 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7fb61bb20240 *.LC16>)) 4t_cv.cpp:275 89 {*movdi_internal}
     (nil))
(call_insn 298 297 299 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:275 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn 299 298 300 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11IsBigEndianv") [flags 0x3]  <function_decl 0x7fb61beda000 IsBigEndian>) [0 IsBigEndian S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:277 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 300 299 301 18 (set (reg:SI 0 ax [orig:104 D.5695 ] [104])
        (reg:SI 0 ax)) 4t_cv.cpp:277 90 {*movsi_internal}
     (nil))
(insn 301 300 302 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:104 D.5695 ] [104])
            (const_int 0 [0]))) 4t_cv.cpp:277 3 {*cmpsi_ccno_1}
     (nil))
(insn 302 301 303 18 (set (reg:QI 0 ax [orig:105 D.5696 ] [105])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) 4t_cv.cpp:277 607 {*setcc_qi}
     (nil))
(insn 303 302 304 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:105 D.5696 ] [105])
            (const_int 0 [0]))) 4t_cv.cpp:277 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 304 303 305 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 310)
            (pc))) 4t_cv.cpp:277 612 {*jcc_1}
     (nil)
 -> 310)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 305 304 306 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 306 305 307 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7fb61bb202d0 *.LC17>)) 4t_cv.cpp:278 89 {*movdi_internal}
     (nil))
(call_insn 307 306 646 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:278 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 646 307 647 19 (set (pc)
        (label_ref 314)) 654 {jump}
     (nil)
 -> 314)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 647 646 310)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 310 647 311 20 12 "" [1 uses])
(note 311 310 312 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7fb61bb20360 *.LC18>)) 4t_cv.cpp:281 89 {*movdi_internal}
     (nil))
(call_insn 313 312 314 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:281 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              19 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 319 320 321 322 323 324 325 326 327 328 329
(code_label 314 313 315 21 13 "" [1 uses])
(note 315 314 316 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 316 315 317 21 (parallel [
            (set (reg:DI 38 r9 [319])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2784 [0xfffffffffffff520])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 317 316 318 21 (set (reg:DI 37 r8 [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])) 4t_cv.cpp:284 89 {*movdi_internal}
     (nil))
(insn 318 317 319 21 (set (reg:DI 2 cx [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:284 89 {*movdi_internal}
     (nil))
(insn 319 318 320 21 (parallel [
            (set (reg:DI 1 dx [322])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 320 319 321 21 (parallel [
            (set (reg:DI 4 si [323])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2720 [0xfffffffffffff560])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 321 320 322 21 (parallel [
            (set (reg:DI 0 ax [324])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2844 [0xfffffffffffff4e4])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 322 321 323 21 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 323 322 324 21 (parallel [
            (set (reg:DI 5 di [325])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2832 [0xfffffffffffff4f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 324 323 325 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [325])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 325 324 326 21 (parallel [
            (set (reg:DI 5 di [326])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2736 [0xfffffffffffff550])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 326 325 327 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [326])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 24 [0x18])
        (nil)))
(insn 327 326 328 21 (parallel [
            (set (reg:DI 5 di [327])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2752 [0xfffffffffffff540])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 328 327 329 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [327])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 329 328 330 21 (parallel [
            (set (reg:DI 5 di [328])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2800 [0xfffffffffffff510])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 330 329 331 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [328])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 40 [0x28])
        (nil)))
(insn 331 330 332 21 (parallel [
            (set (reg:DI 5 di [329])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2768 [0xfffffffffffff530])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (nil))
(insn 332 331 338 21 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg:DI 5 di [329])) 4t_cv.cpp:284 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 338 332 339 21 (set (reg:DI 5 di)
        (reg:DI 0 ax [324])) 4t_cv.cpp:284 89 {*movdi_internal}
     (nil))
(call_insn 339 338 340 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9read_dataPiP10PreprocessP7IOFilesPP16Data_file_headerPP17Data_block_headerP10Precision2PP8_IO_FILEP10Precision1PPfSI_P12Endian_Check") [flags 0x41]  <function_decl 0x7fb61bed3000 read_data>) [0 read_data S1 A8])
            (const_int 48 [0x30]))) 4t_cv.cpp:284 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 340 339 341 21 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:284 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 341 340 459 21 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:289 90 {*movsi_internal}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              33 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107
(code_label 459 341 342 22 20 "" [1 uses])
(note 342 459 343 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 343 342 344 22 (set (reg:SI 0 ax [orig:106 D.5695 ] [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:289 90 {*movsi_internal}
     (nil))
(insn 344 343 345 22 (parallel [
            (set (reg:SI 0 ax [orig:107 D.5695 ] [107])
                (plus:SI (reg:SI 0 ax [orig:106 D.5695 ] [106])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:289 217 {*addsi_1}
     (nil))
(insn 345 344 346 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:107 D.5695 ] [107])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32]))) 4t_cv.cpp:289 7 {*cmpsi_1}
     (nil))
(jump_insn 346 345 347 22 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 462)
            (pc))) 4t_cv.cpp:289 612 {*jcc_1}
     (nil)
 -> 462)
;;  succ:       34
;;              23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 109 110 111 112 330 331
(note 347 346 348 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 348 347 349 23 (set (reg:SI 0 ax [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:295 90 {*movsi_internal}
     (nil))
(insn 349 348 350 23 (set (reg:DI 0 ax [orig:108 D.5697 ] [108])
        (sign_extend:DI (reg:SI 0 ax [330]))) 4t_cv.cpp:295 142 {*extendsidi2_rex64}
     (nil))
(insn 350 349 351 23 (parallel [
            (set (reg:DI 1 dx [orig:109 D.5697 ] [109])
                (ashift:DI (reg:DI 0 ax [orig:108 D.5697 ] [108])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:295 512 {*ashldi3_1}
     (nil))
(insn 351 350 352 23 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:295 89 {*movdi_internal}
     (nil))
(insn 352 351 353 23 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.5698 ] [110])
                (plus:DI (reg/f:DI 0 ax [331])
                    (reg:DI 1 dx [orig:109 D.5697 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:295 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:109 D.5697 ] [109]))
        (nil)))
(insn 353 352 354 23 (set (reg/f:DI 0 ax [orig:111 D.5703 ] [111])
        (mem/f:DI (reg/f:DI 0 ax [orig:110 D.5698 ] [110]) [0 *_100+0 S8 A64])) 4t_cv.cpp:295 89 {*movdi_internal}
     (nil))
(insn 354 353 355 23 (set (reg:HI 0 ax [orig:112 D.5704 ] [112])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:111 D.5703 ] [111])
                (const_int 26 [0x1a])) [0 _101->status.number+0 S2 A16])) 4t_cv.cpp:295 92 {*movhi_internal}
     (nil))
(insn 355 354 356 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:112 D.5704 ] [112])
            (const_int 69 [0x45]))) 4t_cv.cpp:295 6 {*cmphi_1}
     (nil))
(jump_insn 356 355 357 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 391)
            (pc))) 4t_cv.cpp:295 612 {*jcc_1}
     (nil)
 -> 391)
;;  succ:       24 (FALLTHRU)
;;              27
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 357 356 358 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 358 357 388 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:296 90 {*movsi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              26 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 114 115 116 117 332 333
(code_label 388 358 359 25 17 "" [1 uses])
(note 359 388 360 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 360 359 361 25 (set (reg:SI 0 ax [332])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:296 90 {*movsi_internal}
     (nil))
(insn 361 360 362 25 (set (reg:DI 0 ax [orig:113 D.5697 ] [113])
        (sign_extend:DI (reg:SI 0 ax [332]))) 4t_cv.cpp:296 142 {*extendsidi2_rex64}
     (nil))
(insn 362 361 363 25 (parallel [
            (set (reg:DI 1 dx [orig:114 D.5697 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.5697 ] [113])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:296 512 {*ashldi3_1}
     (nil))
(insn 363 362 364 25 (set (reg/f:DI 0 ax [333])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:296 89 {*movdi_internal}
     (nil))
(insn 364 363 365 25 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.5698 ] [115])
                (plus:DI (reg/f:DI 0 ax [333])
                    (reg:DI 1 dx [orig:114 D.5697 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:296 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.5697 ] [114]))
        (nil)))
(insn 365 364 366 25 (set (reg/f:DI 0 ax [orig:116 D.5703 ] [116])
        (mem/f:DI (reg/f:DI 0 ax [orig:115 D.5698 ] [115]) [0 *_106+0 S8 A64])) 4t_cv.cpp:296 89 {*movdi_internal}
     (nil))
(insn 366 365 367 25 (set (reg:SI 0 ax [orig:117 D.5695 ] [117])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:116 D.5703 ] [116])
                (const_int 8 [0x8])) [0 _107->np.number+0 S4 A32])) 4t_cv.cpp:296 90 {*movsi_internal}
     (nil))
(insn 367 366 368 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:117 D.5695 ] [117])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32]))) 4t_cv.cpp:296 7 {*cmpsi_1}
     (nil))
(jump_insn 368 367 369 25 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 456)
            (pc))) 4t_cv.cpp:296 612 {*jcc_1}
     (nil)
 -> 456)
;;  succ:       33
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 123 124 125 126 127 334 335 336 337 338 339
(note 369 368 370 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 370 369 371 26 (set (reg:SI 0 ax [335])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:298 90 {*movsi_internal}
     (nil))
(insn 371 370 372 26 (set (reg:DI 0 ax [334])
        (sign_extend:DI (reg:SI 0 ax [335]))) 4t_cv.cpp:298 142 {*extendsidi2_rex64}
     (nil))
(insn 372 371 373 26 (set (reg/f:DI 0 ax [orig:118 D.5705 ] [118])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [334])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2752 [0xfffffffffffff540])) [0 out_data S8 A64])) 4t_cv.cpp:298 89 {*movdi_internal}
     (nil))
(insn 373 372 374 26 (set (reg:SI 1 dx [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])) 4t_cv.cpp:298 90 {*movsi_internal}
     (nil))
(insn 374 373 375 26 (set (reg:DI 1 dx [orig:119 D.5697 ] [119])
        (sign_extend:DI (reg:SI 1 dx [336]))) 4t_cv.cpp:298 142 {*extendsidi2_rex64}
     (nil))
(insn 375 374 376 26 (parallel [
            (set (reg:DI 1 dx [orig:120 D.5697 ] [120])
                (ashift:DI (reg:DI 1 dx [orig:119 D.5697 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:298 512 {*ashldi3_1}
     (nil))
(insn 376 375 377 26 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.5705 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 D.5697 ] [120])
                    (reg/f:DI 0 ax [orig:118 D.5705 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:298 218 {*adddi_1}
     (nil))
(insn 377 376 378 26 (set (reg:SI 0 ax [338])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:298 90 {*movsi_internal}
     (nil))
(insn 378 377 379 26 (set (reg:DI 0 ax [337])
        (sign_extend:DI (reg:SI 0 ax [338]))) 4t_cv.cpp:298 142 {*extendsidi2_rex64}
     (nil))
(insn 379 378 380 26 (set (reg/f:DI 0 ax [orig:122 D.5706 ] [122])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [337])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2784 [0xfffffffffffff520])) [0 switch_data[i_4].lo+0 S8 A64])) 4t_cv.cpp:298 89 {*movdi_internal}
     (nil))
(insn 380 379 381 26 (set (reg:SI 2 cx [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])) 4t_cv.cpp:298 90 {*movsi_internal}
     (nil))
(insn 381 380 382 26 (set (reg:DI 2 cx [orig:123 D.5697 ] [123])
        (sign_extend:DI (reg:SI 2 cx [339]))) 4t_cv.cpp:298 142 {*extendsidi2_rex64}
     (nil))
(insn 382 381 383 26 (parallel [
            (set (reg:DI 2 cx [orig:124 D.5697 ] [124])
                (ashift:DI (reg:DI 2 cx [orig:123 D.5697 ] [123])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:298 512 {*ashldi3_1}
     (nil))
(insn 383 382 384 26 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.5706 ] [125])
                (plus:DI (reg/f:DI 0 ax [orig:122 D.5706 ] [122])
                    (reg:DI 2 cx [orig:124 D.5697 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:298 218 {*adddi_1}
     (nil))
(insn 384 383 385 26 (set (reg:DI 0 ax [orig:126 D.5707 ] [126])
        (mem:DI (reg/f:DI 0 ax [orig:125 D.5706 ] [125]) [0 *_116+0 S8 A64])) 4t_cv.cpp:298 89 {*movdi_internal}
     (nil))
(insn 385 384 386 26 (set (reg:SF 21 xmm0 [orig:127 D.5708 ] [127])
        (float:SF (reg:DI 0 ax [orig:126 D.5707 ] [126]))) 4t_cv.cpp:298 200 {*floatdisf2_sse}
     (nil))
(insn 386 385 387 26 (set (mem:SF (reg/f:DI 1 dx [orig:121 D.5705 ] [121]) [0 *_112+0 S4 A32])
        (reg:SF 21 xmm0 [orig:127 D.5708 ] [127])) 4t_cv.cpp:298 129 {*movsf_internal}
     (nil))
(insn 387 386 648 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:296 217 {*addsi_1}
     (nil))
(jump_insn 648 387 649 26 (set (pc)
        (label_ref 388)) 4t_cv.cpp:296 654 {jump}
     (nil)
 -> 388)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 649 648 391)
;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 128 129 130 131 132 340 341
(code_label 391 649 392 27 15 "" [1 uses])
(note 392 391 393 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 393 392 394 27 (set (reg:SI 0 ax [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:305 90 {*movsi_internal}
     (nil))
(insn 394 393 395 27 (set (reg:DI 0 ax [orig:128 D.5697 ] [128])
        (sign_extend:DI (reg:SI 0 ax [340]))) 4t_cv.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 395 394 396 27 (parallel [
            (set (reg:DI 1 dx [orig:129 D.5697 ] [129])
                (ashift:DI (reg:DI 0 ax [orig:128 D.5697 ] [128])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:305 512 {*ashldi3_1}
     (nil))
(insn 396 395 397 27 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:305 89 {*movdi_internal}
     (nil))
(insn 397 396 398 27 (parallel [
            (set (reg/f:DI 0 ax [orig:130 D.5698 ] [130])
                (plus:DI (reg/f:DI 0 ax [341])
                    (reg:DI 1 dx [orig:129 D.5697 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:305 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:129 D.5697 ] [129]))
        (nil)))
(insn 398 397 399 27 (set (reg/f:DI 0 ax [orig:131 D.5703 ] [131])
        (mem/f:DI (reg/f:DI 0 ax [orig:130 D.5698 ] [130]) [0 *_123+0 S8 A64])) 4t_cv.cpp:305 89 {*movdi_internal}
     (nil))
(insn 399 398 400 27 (set (reg:HI 0 ax [orig:132 D.5704 ] [132])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:131 D.5703 ] [131])
                (const_int 26 [0x1a])) [0 _124->status.number+0 S2 A16])) 4t_cv.cpp:305 92 {*movhi_internal}
     (nil))
(insn 400 399 401 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:132 D.5704 ] [132])
            (const_int 73 [0x49]))) 4t_cv.cpp:305 6 {*cmphi_1}
     (nil))
(jump_insn 401 400 402 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 422)
            (pc))) 4t_cv.cpp:305 612 {*jcc_1}
     (nil)
 -> 422)
;;  succ:       30
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 135 136 137 342 343
(note 402 401 403 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 28 (set (reg:SI 0 ax [342])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:305 90 {*movsi_internal}
     (nil))
(insn 404 403 405 28 (set (reg:DI 0 ax [orig:133 D.5697 ] [133])
        (sign_extend:DI (reg:SI 0 ax [342]))) 4t_cv.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 405 404 406 28 (parallel [
            (set (reg:DI 1 dx [orig:134 D.5697 ] [134])
                (ashift:DI (reg:DI 0 ax [orig:133 D.5697 ] [133])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:305 512 {*ashldi3_1}
     (nil))
(insn 406 405 407 28 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:305 89 {*movdi_internal}
     (nil))
(insn 407 406 408 28 (parallel [
            (set (reg/f:DI 0 ax [orig:135 D.5698 ] [135])
                (plus:DI (reg/f:DI 0 ax [343])
                    (reg:DI 1 dx [orig:134 D.5697 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:305 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:134 D.5697 ] [134]))
        (nil)))
(insn 408 407 409 28 (set (reg/f:DI 0 ax [orig:136 D.5703 ] [136])
        (mem/f:DI (reg/f:DI 0 ax [orig:135 D.5698 ] [135]) [0 *_128+0 S8 A64])) 4t_cv.cpp:305 89 {*movdi_internal}
     (nil))
(insn 409 408 410 28 (set (reg:HI 0 ax [orig:137 D.5704 ] [137])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:136 D.5703 ] [136])
                (const_int 26 [0x1a])) [0 _129->status.number+0 S2 A16])) 4t_cv.cpp:305 92 {*movhi_internal}
     (nil))
(insn 410 409 411 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:137 D.5704 ] [137])
            (const_int 2073 [0x819]))) 4t_cv.cpp:305 6 {*cmphi_1}
     (nil))
(jump_insn 411 410 412 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 422)
            (pc))) 4t_cv.cpp:305 612 {*jcc_1}
     (nil)
 -> 422)
;;  succ:       30
;;              29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 141 142 344 345
(note 412 411 413 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 413 412 414 29 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:306 90 {*movsi_internal}
     (nil))
(insn 414 413 415 29 (set (reg:DI 0 ax [orig:138 D.5697 ] [138])
        (sign_extend:DI (reg:SI 0 ax [344]))) 4t_cv.cpp:306 142 {*extendsidi2_rex64}
     (nil))
(insn 415 414 416 29 (parallel [
            (set (reg:DI 1 dx [orig:139 D.5697 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.5697 ] [138])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:306 512 {*ashldi3_1}
     (nil))
(insn 416 415 417 29 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:306 89 {*movdi_internal}
     (nil))
(insn 417 416 418 29 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.5698 ] [140])
                (plus:DI (reg/f:DI 0 ax [345])
                    (reg:DI 1 dx [orig:139 D.5697 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:306 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.5697 ] [139]))
        (nil)))
(insn 418 417 419 29 (set (reg/f:DI 0 ax [orig:141 D.5703 ] [141])
        (mem/f:DI (reg/f:DI 0 ax [orig:140 D.5698 ] [140]) [0 *_133+0 S8 A64])) 4t_cv.cpp:306 89 {*movdi_internal}
     (nil))
(insn 419 418 420 29 (set (reg:HI 0 ax [orig:142 D.5704 ] [142])
        (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:141 D.5703 ] [141])
                (const_int 26 [0x1a])) [0 _134->status.number+0 S2 A16])) 4t_cv.cpp:306 92 {*movhi_internal}
     (nil))
(insn 420 419 421 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:HI 0 ax [orig:142 D.5704 ] [142])
            (const_int 201 [0xc9]))) 4t_cv.cpp:306 6 {*cmphi_1}
     (nil))
(jump_insn 421 420 422 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 456)
            (pc))) 4t_cv.cpp:306 612 {*jcc_1}
     (nil)
 -> 456)
;;  succ:       30 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;;              28
;;              29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 422 421 423 30 18 "" [2 uses])
(note 423 422 424 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 424 423 453 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:307 90 {*movsi_internal}
     (nil))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;;              32 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 143 144 145 146 147 346 347
(code_label 453 424 425 31 19 "" [1 uses])
(note 425 453 426 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 426 425 427 31 (set (reg:SI 0 ax [346])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:307 90 {*movsi_internal}
     (nil))
(insn 427 426 428 31 (set (reg:DI 0 ax [orig:143 D.5697 ] [143])
        (sign_extend:DI (reg:SI 0 ax [346]))) 4t_cv.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 428 427 429 31 (parallel [
            (set (reg:DI 1 dx [orig:144 D.5697 ] [144])
                (ashift:DI (reg:DI 0 ax [orig:143 D.5697 ] [143])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:307 512 {*ashldi3_1}
     (nil))
(insn 429 428 430 31 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:307 89 {*movdi_internal}
     (nil))
(insn 430 429 431 31 (parallel [
            (set (reg/f:DI 0 ax [orig:145 D.5698 ] [145])
                (plus:DI (reg/f:DI 0 ax [347])
                    (reg:DI 1 dx [orig:144 D.5697 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:307 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:144 D.5697 ] [144]))
        (nil)))
(insn 431 430 432 31 (set (reg/f:DI 0 ax [orig:146 D.5703 ] [146])
        (mem/f:DI (reg/f:DI 0 ax [orig:145 D.5698 ] [145]) [0 *_139+0 S8 A64])) 4t_cv.cpp:307 89 {*movdi_internal}
     (nil))
(insn 432 431 433 31 (set (reg:SI 0 ax [orig:147 D.5695 ] [147])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:146 D.5703 ] [146])
                (const_int 8 [0x8])) [0 _140->np.number+0 S4 A32])) 4t_cv.cpp:307 90 {*movsi_internal}
     (nil))
(insn 433 432 434 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:147 D.5695 ] [147])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32]))) 4t_cv.cpp:307 7 {*cmpsi_1}
     (nil))
(jump_insn 434 433 435 31 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 456)
            (pc))) 4t_cv.cpp:307 612 {*jcc_1}
     (nil)
 -> 456)
;;  succ:       33
;;              32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 149 150 151 152 153 154 155 156 348 349 350 351 352 353
(note 435 434 436 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 436 435 437 32 (set (reg:SI 0 ax [349])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:309 90 {*movsi_internal}
     (nil))
(insn 437 436 438 32 (set (reg:DI 0 ax [348])
        (sign_extend:DI (reg:SI 0 ax [349]))) 4t_cv.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 438 437 439 32 (set (reg/f:DI 0 ax [orig:148 D.5705 ] [148])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [348])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2752 [0xfffffffffffff540])) [0 out_data S8 A64])) 4t_cv.cpp:309 89 {*movdi_internal}
     (nil))
(insn 439 438 440 32 (set (reg:SI 1 dx [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])) 4t_cv.cpp:309 90 {*movsi_internal}
     (nil))
(insn 440 439 441 32 (set (reg:DI 1 dx [orig:149 D.5697 ] [149])
        (sign_extend:DI (reg:SI 1 dx [350]))) 4t_cv.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 441 440 442 32 (parallel [
            (set (reg:DI 1 dx [orig:150 D.5697 ] [150])
                (ashift:DI (reg:DI 1 dx [orig:149 D.5697 ] [149])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:309 512 {*ashldi3_1}
     (nil))
(insn 442 441 443 32 (parallel [
            (set (reg/f:DI 1 dx [orig:151 D.5705 ] [151])
                (plus:DI (reg:DI 1 dx [orig:150 D.5697 ] [150])
                    (reg/f:DI 0 ax [orig:148 D.5705 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:309 218 {*adddi_1}
     (nil))
(insn 443 442 444 32 (set (reg:SI 0 ax [352])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:309 90 {*movsi_internal}
     (nil))
(insn 444 443 445 32 (set (reg:DI 0 ax [351])
        (sign_extend:DI (reg:SI 0 ax [352]))) 4t_cv.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 445 444 446 32 (set (reg/f:DI 0 ax [orig:152 D.5705 ] [152])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [351])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2784 [0xfffffffffffff520])) [0 switch_data[i_4].fl+0 S8 A64])) 4t_cv.cpp:309 89 {*movdi_internal}
     (nil))
(insn 446 445 447 32 (set (reg:SI 2 cx [353])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])) 4t_cv.cpp:309 90 {*movsi_internal}
     (nil))
(insn 447 446 448 32 (set (reg:DI 2 cx [orig:153 D.5697 ] [153])
        (sign_extend:DI (reg:SI 2 cx [353]))) 4t_cv.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 448 447 449 32 (parallel [
            (set (reg:DI 2 cx [orig:154 D.5697 ] [154])
                (ashift:DI (reg:DI 2 cx [orig:153 D.5697 ] [153])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:309 512 {*ashldi3_1}
     (nil))
(insn 449 448 450 32 (parallel [
            (set (reg/f:DI 0 ax [orig:155 D.5705 ] [155])
                (plus:DI (reg/f:DI 0 ax [orig:152 D.5705 ] [152])
                    (reg:DI 2 cx [orig:154 D.5697 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:309 218 {*adddi_1}
     (nil))
(insn 450 449 451 32 (set (reg:SF 21 xmm0 [orig:156 D.5708 ] [156])
        (mem:SF (reg/f:DI 0 ax [orig:155 D.5705 ] [155]) [0 *_149+0 S4 A32])) 4t_cv.cpp:309 129 {*movsf_internal}
     (nil))
(insn 451 450 452 32 (set (mem:SF (reg/f:DI 1 dx [orig:151 D.5705 ] [151]) [0 *_145+0 S4 A32])
        (reg:SF 21 xmm0 [orig:156 D.5708 ] [156])) 4t_cv.cpp:309 129 {*movsf_internal}
     (nil))
(insn 452 451 650 32 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2836 [0xfffffffffffff4ec])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:307 217 {*addsi_1}
     (nil))
(jump_insn 650 452 651 32 (set (pc)
        (label_ref 453)) 4t_cv.cpp:307 654 {jump}
     (nil)
 -> 453)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 651 650 456)
;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25
;;              29
;;              31
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 456 651 457 33 16 "" [3 uses])
(note 457 456 458 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 458 457 652 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:289 217 {*addsi_1}
     (nil))
(jump_insn 652 458 653 33 (set (pc)
        (label_ref 459)) 4t_cv.cpp:289 654 {jump}
     (nil)
 -> 459)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 653 652 462)
;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 354 355 356 357 358
(code_label 462 653 463 34 14 "" [1 uses])
(note 463 462 464 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 34 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7fb61bb20480 *.LC19>)) 4t_cv.cpp:320 89 {*movdi_internal}
     (nil))
(call_insn 465 464 466 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:320 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 466 465 467 34 (parallel [
            (set (reg:DI 5 di [354])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2736 [0xfffffffffffff550])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 218 {*adddi_1}
     (nil))
(insn 467 466 468 34 (parallel [
            (set (reg:DI 2 cx [355])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2752 [0xfffffffffffff540])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 218 {*adddi_1}
     (nil))
(insn 468 467 469 34 (parallel [
            (set (reg:DI 1 dx [356])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 218 {*adddi_1}
     (nil))
(insn 469 468 470 34 (parallel [
            (set (reg:DI 4 si [357])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2720 [0xfffffffffffff560])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 218 {*adddi_1}
     (nil))
(insn 470 469 471 34 (parallel [
            (set (reg:DI 0 ax [358])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2844 [0xfffffffffffff4e4])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:321 218 {*adddi_1}
     (nil))
(insn 471 470 475 34 (set (reg:DI 37 r8)
        (reg:DI 5 di [354])) 4t_cv.cpp:321 89 {*movdi_internal}
     (nil))
(insn 475 471 476 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [358])) 4t_cv.cpp:321 89 {*movdi_internal}
     (nil))
(call_insn 476 475 477 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11pre_processPiP10PreprocessP12Procpar_infoPPfS5_") [flags 0x41]  <function_decl 0x7fb61bed35e8 pre_process>) [0 pre_process S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:321 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 477 476 478 34 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7fb61bb20510 *.LC20>)) 4t_cv.cpp:324 89 {*movdi_internal}
     (nil))
(call_insn 478 477 479 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:324 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 479 478 532 34 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:325 90 {*movsi_internal}
     (nil))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;;              36 [100.0%] 
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158
(code_label 532 479 480 35 22 "" [1 uses])
(note 480 532 481 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 481 480 482 35 (set (reg:SI 0 ax [orig:157 D.5695 ] [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:325 90 {*movsi_internal}
     (nil))
(insn 482 481 483 35 (parallel [
            (set (reg:SI 0 ax [orig:158 D.5695 ] [158])
                (plus:SI (reg:SI 0 ax [orig:157 D.5695 ] [157])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:325 217 {*addsi_1}
     (nil))
(insn 483 482 484 35 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:158 D.5695 ] [158])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32]))) 4t_cv.cpp:325 7 {*cmpsi_1}
     (nil))
(jump_insn 484 483 485 35 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) 4t_cv.cpp:325 612 {*jcc_1}
     (nil)
 -> 535)
;;  succ:       37
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 159 160 161 162 163 164 165 166 167 168 169 170 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378
(note 485 484 486 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 486 485 487 36 (parallel [
            (set (reg:DI 2 cx [359])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2720 [0xfffffffffffff560])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (nil))
(insn 487 486 488 36 (set (reg:SI 0 ax [361])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:326 90 {*movsi_internal}
     (nil))
(insn 488 487 489 36 (set (reg:DI 1 dx [360])
        (sign_extend:DI (reg:SI 0 ax [361]))) 4t_cv.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 489 488 490 36 (set (reg:DI 0 ax [362])
        (reg:DI 1 dx [360])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 490 489 491 36 (parallel [
            (set (reg:DI 0 ax [362])
                (ashift:DI (reg:DI 0 ax [362])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 512 {*ashldi3_1}
     (nil))
(insn 491 490 492 36 (parallel [
            (set (reg:DI 0 ax [362])
                (plus:DI (reg:DI 0 ax [362])
                    (reg:DI 1 dx [360])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [360])
            (const_int 9 [0x9]))
        (nil)))
(insn 492 491 493 36 (parallel [
            (set (reg:DI 0 ax [363])
                (ashift:DI (reg:DI 0 ax [362])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 512 {*ashldi3_1}
     (nil))
(insn 493 492 494 36 (set (reg:DI 0 ax [362])
        (reg:DI 0 ax [363])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 494 493 495 36 (parallel [
            (set (reg/f:DI 4 si [orig:159 D.5709 ] [159])
                (plus:DI (reg:DI 2 cx [359])
                    (reg:DI 0 ax [362])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (nil))
(insn 495 494 496 36 (parallel [
            (set (reg:DI 1 dx [364])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -2576 [0xfffffffffffff5f0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (nil))
(insn 496 495 497 36 (set (reg:SI 0 ax [366])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:326 90 {*movsi_internal}
     (nil))
(insn 497 496 498 36 (set (reg:DI 0 ax [365])
        (sign_extend:DI (reg:SI 0 ax [366]))) 4t_cv.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 498 497 499 36 (parallel [
            (set (reg:DI 0 ax [367])
                (mult:DI (reg:DI 0 ax [365])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 306 {*muldi3_1}
     (nil))
(insn 499 498 500 36 (parallel [
            (set (reg/f:DI 38 r9 [orig:160 D.5710 ] [160])
                (plus:DI (reg:DI 1 dx [364])
                    (reg:DI 0 ax [367])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (nil))
(insn 500 499 501 36 (set (reg:SI 0 ax [368])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:326 90 {*movsi_internal}
     (nil))
(insn 501 500 502 36 (set (reg:DI 0 ax [orig:161 D.5697 ] [161])
        (sign_extend:DI (reg:SI 0 ax [368]))) 4t_cv.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 502 501 503 36 (parallel [
            (set (reg:DI 1 dx [orig:162 D.5697 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.5697 ] [161])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 512 {*ashldi3_1}
     (nil))
(insn 503 502 504 36 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 504 503 505 36 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.5700 ] [163])
                (plus:DI (reg/f:DI 0 ax [369])
                    (reg:DI 1 dx [orig:162 D.5697 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2792 [0xfffffffffffff518])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.5697 ] [162]))
        (nil)))
(insn 505 504 506 36 (set (reg/f:DI 2 cx [orig:164 D.5711 ] [164])
        (mem/f:DI (reg/f:DI 0 ax [orig:163 D.5700 ] [163]) [0 *_164+0 S8 A64])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 506 505 507 36 (set (reg:SI 0 ax [370])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:326 90 {*movsi_internal}
     (nil))
(insn 507 506 508 36 (set (reg:DI 0 ax [orig:165 D.5697 ] [165])
        (sign_extend:DI (reg:SI 0 ax [370]))) 4t_cv.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 508 507 509 36 (parallel [
            (set (reg:DI 1 dx [orig:166 D.5697 ] [166])
                (ashift:DI (reg:DI 0 ax [orig:165 D.5697 ] [165])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 512 {*ashldi3_1}
     (nil))
(insn 509 508 510 36 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 510 509 511 36 (parallel [
            (set (reg/f:DI 0 ax [orig:167 D.5698 ] [167])
                (plus:DI (reg/f:DI 0 ax [371])
                    (reg:DI 1 dx [orig:166 D.5697 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -2800 [0xfffffffffffff510])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.5697 ] [166]))
        (nil)))
(insn 511 510 512 36 (set (reg/f:DI 1 dx [orig:168 D.5703 ] [168])
        (mem/f:DI (reg/f:DI 0 ax [orig:167 D.5698 ] [167]) [0 *_168+0 S8 A64])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 512 511 513 36 (set (reg:SI 0 ax [373])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:326 90 {*movsi_internal}
     (nil))
(insn 513 512 514 36 (set (reg:DI 0 ax [372])
        (sign_extend:DI (reg:SI 0 ax [373]))) 4t_cv.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 514 513 515 36 (set (reg/f:DI 0 ax [orig:169 D.5705 ] [169])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [372])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2752 [0xfffffffffffff540])) [0 out_data S8 A64])) 4t_cv.cpp:326 89 {*movdi_internal}
     (nil))
(insn 515 514 516 36 (parallel [
            (set (reg:DI 5 di [374])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (nil))
(insn 516 515 517 36 (set (reg:SI 37 r8 [376])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:326 90 {*movsi_internal}
     (nil))
(insn 517 516 518 36 (set (reg:DI 37 r8 [375])
        (sign_extend:DI (reg:SI 37 r8 [376]))) 4t_cv.cpp:326 142 {*extendsidi2_rex64}
     (nil))
(insn 518 517 519 36 (parallel [
            (set (reg:DI 37 r8 [377])
                (plus:DI (reg:DI 37 r8 [375])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (nil))
(insn 519 518 520 36 (parallel [
            (set (reg:DI 37 r8 [378])
                (ashift:DI (reg:DI 37 r8 [377])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 512 {*ashldi3_1}
     (nil))
(insn 520 519 521 36 (parallel [
            (set (reg/f:DI 5 di [orig:170 D.5702 ] [170])
                (plus:DI (reg:DI 5 di [374])
                    (reg:DI 37 r8 [378])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:326 218 {*adddi_1}
     (nil))
(insn 521 520 522 36 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 522 521 524 36 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (reg/f:DI 4 si [orig:159 D.5709 ] [159])) 4t_cv.cpp:327 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 524 522 527 36 (set (reg:SI 37 r8)
        (const_int 1 [0x1])) 4t_cv.cpp:327 90 {*movsi_internal}
     (nil))
(insn 527 524 529 36 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:169 D.5705 ] [169])) 4t_cv.cpp:327 89 {*movdi_internal}
     (nil))
(call_insn 529 527 530 36 (call (mem:QI (symbol_ref:DI ("_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess") [flags 0x41]  <function_decl 0x7fb61bed3438 fwrite_asc>) [0 fwrite_asc S1 A8])
        (const_int 16 [0x10])) 4t_cv.cpp:327 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 530 529 531 36 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:327 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 531 530 654 36 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:325 217 {*addsi_1}
     (nil))
(jump_insn 654 531 655 36 (set (pc)
        (label_ref 532)) 4t_cv.cpp:325 654 {jump}
     (nil)
 -> 532)
;;  succ:       35 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 655 654 535)
;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 379 380 381 382
(code_label 535 655 536 37 21 "" [1 uses])
(note 536 535 537 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 537 536 538 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7fb61bb205a0 *.LC21>)) 4t_cv.cpp:331 89 {*movdi_internal}
     (nil))
(call_insn 538 537 539 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:331 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 539 538 540 37 (parallel [
            (set (reg:DI 0 ax [379])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:332 218 {*adddi_1}
     (nil))
(insn 540 539 541 37 (parallel [
            (set (reg:DI 0 ax [380])
                (plus:DI (reg:DI 0 ax [379])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:332 218 {*adddi_1}
     (nil))
(insn 541 540 542 37 (set (reg:DI 4 si)
        (reg:DI 0 ax [380])) 4t_cv.cpp:332 89 {*movdi_internal}
     (nil))
(insn 542 541 543 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7fb61bb20630 *.LC22>)) 4t_cv.cpp:332 89 {*movdi_internal}
     (nil))
(insn 543 542 544 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) 4t_cv.cpp:332 93 {*movqi_internal}
     (nil))
(call_insn 544 543 545 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fb61bfde5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:332 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 545 544 546 37 (parallel [
            (set (reg:DI 0 ax [381])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -1824 [0xfffffffffffff8e0])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:333 218 {*adddi_1}
     (nil))
(insn 546 545 547 37 (parallel [
            (set (reg:DI 0 ax [382])
                (plus:DI (reg:DI 0 ax [381])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:333 218 {*adddi_1}
     (nil))
(insn 547 546 548 37 (set (reg:DI 4 si)
        (reg:DI 0 ax [382])) 4t_cv.cpp:333 89 {*movdi_internal}
     (nil))
(insn 548 547 549 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fb61bb206c0 *.LC23>)) 4t_cv.cpp:333 89 {*movdi_internal}
     (nil))
(insn 549 548 550 37 (set (reg:QI 0 ax)
        (const_int 0 [0])) 4t_cv.cpp:333 93 {*movqi_internal}
     (nil))
(call_insn 550 549 551 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7fb61bfde5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:333 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 551 550 552 37 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7fb61bb20750 *.LC24>)) 4t_cv.cpp:334 89 {*movdi_internal}
     (nil))
(call_insn 552 551 553 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7fb61bfdf000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:334 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 553 552 574 37 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
        (const_int 0 [0])) 4t_cv.cpp:336 90 {*movsi_internal}
     (nil))
;;  succ:       38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;;              41 [100.0%] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 171 172
(code_label 574 553 554 38 25 "" [1 uses])
(note 554 574 555 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 555 554 556 38 (set (reg:SI 0 ax [orig:171 D.5695 ] [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:336 90 {*movsi_internal}
     (nil))
(insn 556 555 557 38 (parallel [
            (set (reg:SI 0 ax [orig:172 D.5695 ] [172])
                (plus:SI (reg:SI 0 ax [orig:171 D.5695 ] [171])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:336 217 {*addsi_1}
     (nil))
(insn 557 556 558 38 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:172 D.5695 ] [172])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32]))) 4t_cv.cpp:336 7 {*cmpsi_1}
     (nil))
(jump_insn 558 557 559 38 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 577)
            (pc))) 4t_cv.cpp:336 612 {*jcc_1}
     (nil)
 -> 577)
;;  succ:       42
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 173 383 384
(note 559 558 560 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 560 559 561 39 (set (reg:SI 0 ax [384])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:337 90 {*movsi_internal}
     (nil))
(insn 561 560 562 39 (set (reg:DI 0 ax [383])
        (sign_extend:DI (reg:SI 0 ax [384]))) 4t_cv.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 562 561 563 39 (set (reg/f:DI 0 ax [orig:173 D.5712 ] [173])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [383])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2768 [0xfffffffffffff530])) [0 in_file S8 A64])) 4t_cv.cpp:337 89 {*movdi_internal}
     (nil))
(insn 563 562 564 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:173 D.5712 ] [173])
            (const_int 0 [0]))) 4t_cv.cpp:337 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 564 563 565 39 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 571)
            (pc))) 4t_cv.cpp:337 612 {*jcc_1}
     (nil)
 -> 571)
;;  succ:       40 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 174 385 386
(note 565 564 566 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 566 565 567 40 (set (reg:SI 0 ax [386])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])) 4t_cv.cpp:338 90 {*movsi_internal}
     (nil))
(insn 567 566 568 40 (set (reg:DI 0 ax [385])
        (sign_extend:DI (reg:SI 0 ax [386]))) 4t_cv.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 568 567 569 40 (set (reg/f:DI 0 ax [orig:174 D.5712 ] [174])
        (mem/f/j:DI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [385])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -2768 [0xfffffffffffff530])) [0 in_file S8 A64])) 4t_cv.cpp:338 89 {*movdi_internal}
     (nil))
(insn 569 568 570 40 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:174 D.5712 ] [174])) 4t_cv.cpp:338 89 {*movdi_internal}
     (nil))
(call_insn 570 569 571 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7fb61bd9c1b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) 4t_cv.cpp:338 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39
;;              40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 571 570 572 41 24 "" [1 uses])
(note 572 571 573 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 573 572 656 41 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -2840 [0xfffffffffffff4e8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:336 217 {*addsi_1}
     (nil))
(jump_insn 656 573 657 41 (set (pc)
        (label_ref 574)) 4t_cv.cpp:336 654 {jump}
     (nil)
 -> 574)
;;  succ:       38 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 657 656 577)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 175 176 177
(code_label 577 657 578 42 23 "" [1 uses])
(note 578 577 579 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 579 578 580 42 (set (reg/f:DI 0 ax [orig:175 D.5706 ] [175])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2800 [0xfffffffffffff510])) [0 in_data[0].lo+0 S8 A64])) 4t_cv.cpp:342 89 {*movdi_internal}
     (nil))
(insn 580 579 581 42 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:175 D.5706 ] [175])) 4t_cv.cpp:342 89 {*movdi_internal}
     (nil))
(call_insn 581 580 582 42 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:342 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 582 581 583 42 (set (reg/f:DI 0 ax [orig:176 D.5706 ] [176])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2784 [0xfffffffffffff520])) [0 switch_data[0].lo+0 S8 A64])) 4t_cv.cpp:343 89 {*movdi_internal}
     (nil))
(insn 583 582 584 42 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:176 D.5706 ] [176])) 4t_cv.cpp:343 89 {*movdi_internal}
     (nil))
(call_insn 584 583 585 42 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:343 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 585 584 586 42 (set (reg:SI 0 ax [orig:177 D.5695 ] [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:345 90 {*movsi_internal}
     (nil))
(insn 586 585 587 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:177 D.5695 ] [177])
            (const_int 1 [0x1]))) 4t_cv.cpp:345 7 {*cmpsi_1}
     (nil))
(jump_insn 587 586 588 42 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 595)
            (pc))) 4t_cv.cpp:345 612 {*jcc_1}
     (nil)
 -> 595)
;;  succ:       43 (FALLTHRU)
;;              44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 178 179
(note 588 587 589 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 589 588 590 43 (set (reg/f:DI 0 ax [orig:178 D.5706 ] [178])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2792 [0xfffffffffffff518])) [0 in_data[1].lo+0 S8 A64])) 4t_cv.cpp:346 89 {*movdi_internal}
     (nil))
(insn 590 589 591 43 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:178 D.5706 ] [178])) 4t_cv.cpp:346 89 {*movdi_internal}
     (nil))
(call_insn 591 590 592 43 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:346 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 592 591 593 43 (set (reg/f:DI 0 ax [orig:179 D.5706 ] [179])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2776 [0xfffffffffffff528])) [0 switch_data[1].lo+0 S8 A64])) 4t_cv.cpp:347 89 {*movdi_internal}
     (nil))
(insn 593 592 594 43 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:179 D.5706 ] [179])) 4t_cv.cpp:347 89 {*movdi_internal}
     (nil))
(call_insn 594 593 595 43 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:347 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42
;;              43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 180 181 182
(code_label 595 594 596 44 26 "" [1 uses])
(note 596 595 597 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 597 596 598 44 (set (reg/f:DI 0 ax [orig:180 D.5705 ] [180])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2752 [0xfffffffffffff540])) [0 out_data+0 S8 A64])) 4t_cv.cpp:352 89 {*movdi_internal}
     (nil))
(insn 598 597 599 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:180 D.5705 ] [180])) 4t_cv.cpp:352 89 {*movdi_internal}
     (nil))
(call_insn 599 598 600 44 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:352 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 600 599 601 44 (set (reg/f:DI 0 ax [orig:181 D.5705 ] [181])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2736 [0xfffffffffffff550])) [0 scratch_data+0 S8 A64])) 4t_cv.cpp:353 89 {*movdi_internal}
     (nil))
(insn 601 600 602 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:181 D.5705 ] [181])) 4t_cv.cpp:353 89 {*movdi_internal}
     (nil))
(call_insn 602 601 603 44 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:353 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 603 602 604 44 (set (reg:SI 0 ax [orig:182 D.5695 ] [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -2844 [0xfffffffffffff4e4])) [0 fid+0 S4 A32])) 4t_cv.cpp:355 90 {*movsi_internal}
     (nil))
(insn 604 603 605 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:182 D.5695 ] [182])
            (const_int 1 [0x1]))) 4t_cv.cpp:355 7 {*cmpsi_1}
     (nil))
(jump_insn 605 604 606 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 613)
            (pc))) 4t_cv.cpp:355 612 {*jcc_1}
     (nil)
 -> 613)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 183 184
(note 606 605 607 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 607 606 608 45 (set (reg/f:DI 0 ax [orig:183 D.5705 ] [183])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2744 [0xfffffffffffff548])) [0 out_data+8 S8 A64])) 4t_cv.cpp:358 89 {*movdi_internal}
     (nil))
(insn 608 607 609 45 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:183 D.5705 ] [183])) 4t_cv.cpp:358 89 {*movdi_internal}
     (nil))
(call_insn 609 608 610 45 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:358 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 610 609 611 45 (set (reg/f:DI 0 ax [orig:184 D.5705 ] [184])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2728 [0xfffffffffffff558])) [0 scratch_data+8 S8 A64])) 4t_cv.cpp:359 89 {*movdi_internal}
     (nil))
(insn 611 610 612 45 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:184 D.5705 ] [184])) 4t_cv.cpp:359 89 {*movdi_internal}
     (nil))
(call_insn 612 611 613 45 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:359 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 185 186 387 388
(code_label 613 612 614 46 27 "" [1 uses])
(note 614 613 615 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 615 614 616 46 (set (reg:DI 0 ax [387])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2816 [0xfffffffffffff500])) [0 main_header+0 S8 A64])) 4t_cv.cpp:362 89 {*movdi_internal}
     (nil))
(insn 616 615 617 46 (set (reg:DI 5 di)
        (reg:DI 0 ax [387])) 4t_cv.cpp:362 89 {*movdi_internal}
     (nil))
(call_insn 617 616 618 46 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:362 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 618 617 619 46 (set (reg:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -2808 [0xfffffffffffff508])) [0 block_header+0 S8 A64])) 4t_cv.cpp:363 89 {*movdi_internal}
     (nil))
(insn 619 618 620 46 (set (reg:DI 5 di)
        (reg:DI 0 ax [388])) 4t_cv.cpp:363 89 {*movdi_internal}
     (nil))
(call_insn 620 619 621 46 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb61bfff1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:363 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 621 620 624 46 (set (reg:SI 0 ax [orig:185 D.5695 ] [185])
        (const_int 1 [0x1])) 4t_cv.cpp:365 90 {*movsi_internal}
     (nil))
(insn 624 621 628 46 (set (reg:SI 0 ax [orig:186 <retval> ] [186])
        (reg:SI 0 ax [orig:185 D.5695 ] [185])) 90 {*movsi_internal}
     (nil))
(insn 628 624 629 46 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:186 <retval> ] [186])) 4t_cv.cpp:367 90 {*movsi_internal}
     (nil))
(insn 629 628 630 46 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [0 D.5714+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [391]))
        ]) 4t_cv.cpp:367 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 630 629 636 46 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 633)
            (pc))) 4t_cv.cpp:367 612 {*jcc_1}
     (nil)
 -> 633)
;;  succ:       48
;;              47 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 636 630 631 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(call_insn 631 636 632 47 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb61bf17510 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:367 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 632 631 633)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 633 632 637 48 29 "" [1 uses])
(note 637 633 634 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 634 637 658 48 (use (reg/i:SI 0 ax)) 4t_cv.cpp:367 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 658 634 0 NOTE_INSN_DELETED)

;; Function int IsBigEndian() (_Z11IsBigEndianv, funcdef_no=3, decl_uid=5498, cgraph_uid=3, symbol_order=3)

      Creating newreg=92
Removing SCRATCH in insn #3 (nop 2)
rescanning insn with uid = 3.
      Creating newreg=93
Removing SCRATCH in insn #27 (nop 3)
rescanning insn with uid = 27.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r92
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 7:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r93
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 6
   Insn 29: point = 0
  BB 7
   Insn 32: point = 0
  BB 5
   Insn 28: point = 0
   Insn 27: point = 0
   Insn 26: point = 1
   Insn 22: point = 2
  BB 3
   Insn 36: point = 5
   Insn 12: point = 5
  BB 4
   Insn 17: point = 6
  BB 2
   Insn 10: point = 7
   Insn 9: point = 7
   Insn 8: point = 8
   Insn 7: point = 10
   Insn 6: point = 11
   Insn 3: point = 11
 r87: [3..6]
 r88: [9..10]
 r89: [7..8]
 r90: [1..2]
 r92: [11..12]
 r93: [0..0]
Compressing live ranges: from 13 to 11 - 84%
Ranges after the compression:
 r87: [3..4]
 r88: [7..8]
 r89: [5..6]
 r90: [1..2]
 r92: [9..10]
 r93: [0..0]

********** Assignment #1: **********

	 Assigning to 92 (cl=INDEX_REGS, orig=92, freq=1, tfirst=92, tfreq=1)...
	   Assign 0 to reload r92 (freq=1)
	 Assigning to 93 (cl=INDEX_REGS, orig=93, freq=1, tfirst=93, tfreq=1)...
	   Assign 1 to reload r93 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 12
changing reg in insn 22
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 22
changing reg in insn 26
changing reg in insn 3
changing reg in insn 27
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 29.


int IsBigEndian()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={9d,6u} r1={3d} r2={2d} r4={2d} r5={2d} r6={1d,11u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 130{102d,28u,0e} in 15{14 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.5743+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [92])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:372 986 {stack_tls_protect_set_di}
     (nil))
(insn 6 3 7 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [0 word+0 S2 A16])
        (const_int 17185 [0x4321])) 4t_cv.cpp:373 92 {*movhi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.5741 ] [88])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -10 [0xfffffffffffffff6])))
            (clobber (reg:CC 17 flags))
        ]) 4t_cv.cpp:374 218 {*adddi_1}
     (nil))
(insn 8 7 9 2 (set (reg:QI 0 ax [orig:89 D.5742 ] [89])
        (mem:QI (reg/f:DI 0 ax [orig:88 D.5741 ] [88]) [0 MEM[(char *)_4]+0 S1 A8])) 4t_cv.cpp:374 93 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.5742 ] [89])
            (const_int 33 [0x21]))) 4t_cv.cpp:374 5 {*cmpqi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) 4t_cv.cpp:374 612 {*jcc_1}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 36 3 (set (reg:SI 0 ax [orig:87 D.5740 ] [87])
        (const_int 1 [0x1])) 4t_cv.cpp:375 90 {*movsi_internal}
     (nil))
(jump_insn 36 12 37 3 (set (pc)
        (label_ref 20)) 4t_cv.cpp:375 654 {jump}
     (nil)
 -> 20)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 37 36 15)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 15 37 16 4 31 "" [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 20 4 (set (reg:SI 0 ax [orig:87 D.5740 ] [87])
        (const_int 0 [0])) 4t_cv.cpp:377 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 90
(code_label 20 17 21 5 33 "" [1 uses])
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 26 5 (set (reg:SI 0 ax [orig:90 <retval> ] [90])
        (reg:SI 0 ax [orig:87 D.5740 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 26 22 27 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:90 <retval> ] [90])) 4t_cv.cpp:379 90 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.5743+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 1 dx [93]))
        ]) 4t_cv.cpp:379 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 28 27 34 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) 4t_cv.cpp:379 612 {*jcc_1}
     (nil)
 -> 31)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 34 28 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 29 34 30 6 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb61bf17510 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) 4t_cv.cpp:379 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 30 29 31)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 31 30 35 7 34 "" [1 uses])
(note 35 31 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 35 38 7 (use (reg/i:SI 0 ax)) 4t_cv.cpp:379 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 38 32 0 NOTE_INSN_DELETED)
