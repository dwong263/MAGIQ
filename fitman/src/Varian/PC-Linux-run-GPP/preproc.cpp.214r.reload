
;; Function int pre_process(int*, Preprocess*, Procpar_info*, float**, float**) (_Z11pre_processPiP10PreprocessP12Procpar_infoPPfS5_, funcdef_no=2, decl_uid=5351, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 20:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 26
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 28:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 30:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 35
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 53:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 54:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 55:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 56:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 65
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 71:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 83:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 97:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 112
	 Choosing alt 0 in insn 112:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 113
	 Choosing alt 0 in insn 113:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 116:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 117:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 118:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 126:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 129:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) r {*cmpsi_ccno_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 150:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 160:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 161:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 162:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=385 from oldreg=284, assigning class SSE_REGS to r385
  162: r385:DF=r385:DF*r286:DF
      REG_DEAD r286:DF
      REG_DEAD r285:DF
    Inserting insn reload before:
  574: r385:DF=r285:DF
    Inserting insn reload after:
  575: r284:DF=r385:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 575:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 163:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 165:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 185:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 186:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=386 from oldreg=173, assigning class SSE_REGS to r386
  186: r386:SF=r386:SF*r295:SF
      REG_DEAD r295:SF
      REG_DEAD r172:SF
    Inserting insn reload before:
  576: r386:SF=r172:SF
    Inserting insn reload after:
  577: r173:SF=r386:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 577:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 187:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 191:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 199:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 209:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 210:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 211:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=387 from oldreg=298, assigning class SSE_REGS to r387
  211: r387:DF=r387:DF/r300:DF
      REG_DEAD r300:DF
      REG_DEAD r299:DF
    Inserting insn reload before:
  578: r387:DF=r299:DF
    Inserting insn reload after:
  579: r298:DF=r387:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 579:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 212:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 232
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 233:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 234:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 235:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=388 from oldreg=165, assigning class SSE_REGS to r388
  235: r388:SF=r388:SF/r309:SF
      REG_DEAD r309:SF
      REG_DEAD r164:SF
    Inserting insn reload before:
  580: r388:SF=r164:SF
    Inserting insn reload after:
  581: r165:SF=r388:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 581:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 236:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 240:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 257:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 259
	 Choosing alt 0 in insn 259:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 267:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 275
	 Choosing alt 0 in insn 275:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 282:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 287:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 289
	 Choosing alt 0 in insn 289:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 290:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 297:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 305
	 Choosing alt 0 in insn 305:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 312:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 313:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 315:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 317:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 319
	 Choosing alt 0 in insn 319:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 323:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 325
	 Choosing alt 0 in insn 325:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 326:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 333:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 339:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 348:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 361:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 367:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 370:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 371:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 375:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (1) rzw {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 389:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 390:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 393:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 394:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 396:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 398:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 407:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 412:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 419:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 420
	 Choosing alt 0 in insn 420:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 427:  (0) r  (1) rm  (2) e {*muldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 428:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 432:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 433:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 434
	 Choosing alt 0 in insn 434:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 435:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 441:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 451:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 452:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 455:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 460:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 461:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 462:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 465:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 469:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 481:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 482:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 486:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 487:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 495:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 499:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 500:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 507:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 508
	 Choosing alt 0 in insn 508:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 513:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 514:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 517:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 518:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 519:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (1) rzw {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 527:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 533:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47

********** Pseudo live ranges #1: **********

  BB 47
   Insn 544: point = 0
   Insn 543: point = 0
   Insn 539: point = 1
   Insn 536: point = 3
  BB 46
   Insn 534: point = 4
   Insn 533: point = 4
   Insn 531: point = 5
   Insn 530: point = 7
  BB 42
   Insn 571: point = 8
   Insn 495: point = 8
  BB 41
   Insn 492: point = 8
   Insn 491: point = 8
   Insn 490: point = 9
   Insn 489: point = 10
   Insn 488: point = 11
   Insn 487: point = 12
   Insn 486: point = 13
   Insn 485: point = 14
   Insn 484: point = 16
   Insn 483: point = 17
   Insn 482: point = 19
   Insn 481: point = 21
  BB 40
   Insn 478: point = 22
   Insn 477: point = 22
   Insn 476: point = 23
   Insn 475: point = 25
   Insn 474: point = 27
  BB 39
   Insn 472: point = 28
   Insn 471: point = 28
   Insn 470: point = 29
   Insn 469: point = 31
  BB 38
   Insn 467: point = 32
   Insn 466: point = 32
   Insn 465: point = 33
  BB 37
   Insn 464: point = 35
   Insn 463: point = 35
   Insn 462: point = 36
   Insn 461: point = 37
   Insn 460: point = 39
   Insn 459: point = 41
  BB 36
   Insn 457: point = 42
   Insn 456: point = 42
   Insn 455: point = 43
  BB 35
   Insn 454: point = 45
   Insn 453: point = 45
   Insn 452: point = 46
   Insn 451: point = 47
   Insn 450: point = 49
  BB 34
   Insn 448: point = 50
   Insn 447: point = 50
   Insn 445: point = 51
   Insn 444: point = 53
  BB 30
   Insn 569: point = 54
   Insn 407: point = 54
  BB 29
   Insn 404: point = 54
   Insn 403: point = 54
   Insn 402: point = 55
   Insn 401: point = 56
   Insn 400: point = 57
   Insn 399: point = 58
   Insn 398: point = 59
   Insn 397: point = 60
   Insn 396: point = 61
   Insn 395: point = 63
   Insn 394: point = 64
   Insn 393: point = 66
   Insn 392: point = 68
   Insn 391: point = 69
   Insn 390: point = 71
   Insn 389: point = 73
  BB 28
   Insn 387: point = 74
   Insn 386: point = 74
   Insn 385: point = 75
   Insn 384: point = 77
  BB 27
   Insn 381: point = 78
   Insn 380: point = 78
   Insn 379: point = 79
   Insn 378: point = 80
   Insn 377: point = 81
   Insn 376: point = 82
   Insn 375: point = 83
   Insn 374: point = 84
   Insn 373: point = 85
   Insn 372: point = 87
   Insn 371: point = 88
   Insn 370: point = 90
   Insn 369: point = 92
   Insn 368: point = 93
   Insn 367: point = 95
   Insn 366: point = 97
  BB 26
   Insn 364: point = 98
   Insn 363: point = 98
   Insn 362: point = 99
   Insn 361: point = 101
  BB 25
   Insn 358: point = 102
   Insn 357: point = 102
   Insn 356: point = 103
   Insn 355: point = 104
   Insn 354: point = 105
   Insn 353: point = 106
   Insn 352: point = 107
   Insn 351: point = 108
   Insn 350: point = 110
   Insn 349: point = 111
   Insn 348: point = 113
   Insn 347: point = 115
  BB 24
   Insn 345: point = 116
   Insn 344: point = 116
   Insn 343: point = 117
   Insn 342: point = 119
  BB 23
   Insn 340: point = 120
   Insn 339: point = 120
   Insn 337: point = 121
   Insn 336: point = 123
  BB 2
   Insn 557: point = 124
   Insn 10: point = 124
   Insn 6: point = 124
   Insn 5: point = 124
   Insn 4: point = 124
   Insn 3: point = 124
   Insn 2: point = 124
  BB 22
   Insn 333: point = 124
  BB 21
   Insn 330: point = 124
   Insn 329: point = 124
   Insn 328: point = 125
   Insn 327: point = 126
   Insn 326: point = 127
   Insn 325: point = 129
   Insn 324: point = 131
   Insn 323: point = 132
   Insn 322: point = 134
   Insn 321: point = 136
   Insn 320: point = 137
   Insn 319: point = 139
   Insn 318: point = 141
   Insn 317: point = 142
   Insn 316: point = 144
   Insn 315: point = 146
   Insn 314: point = 147
   Insn 313: point = 149
   Insn 312: point = 150
   Insn 311: point = 152
   Insn 310: point = 154
  BB 20
   Insn 308: point = 155
   Insn 307: point = 155
   Insn 306: point = 156
   Insn 305: point = 158
   Insn 304: point = 160
   Insn 303: point = 161
   Insn 302: point = 163
   Insn 301: point = 165
   Insn 300: point = 167
   Insn 299: point = 168
   Insn 298: point = 168
   Insn 297: point = 169
   Insn 296: point = 171
  BB 19
   Insn 293: point = 172
   Insn 292: point = 172
   Insn 291: point = 173
   Insn 290: point = 174
   Insn 289: point = 176
   Insn 288: point = 178
   Insn 287: point = 179
   Insn 286: point = 181
   Insn 285: point = 183
   Insn 284: point = 184
   Insn 283: point = 186
   Insn 282: point = 187
   Insn 281: point = 189
   Insn 280: point = 191
  BB 18
   Insn 278: point = 192
   Insn 277: point = 192
   Insn 276: point = 193
   Insn 275: point = 195
   Insn 274: point = 197
   Insn 273: point = 198
   Insn 272: point = 200
   Insn 271: point = 202
   Insn 270: point = 204
   Insn 269: point = 205
   Insn 268: point = 205
   Insn 267: point = 206
   Insn 266: point = 208
   Insn 265: point = 209
   Insn 264: point = 209
   Insn 263: point = 210
   Insn 262: point = 211
   Insn 261: point = 212
   Insn 260: point = 213
   Insn 259: point = 215
   Insn 258: point = 217
   Insn 257: point = 218
   Insn 256: point = 220
   Insn 255: point = 222
   Insn 254: point = 223
   Insn 253: point = 225
   Insn 252: point = 226
   Insn 251: point = 228
   Insn 250: point = 230
   Insn 249: point = 232
   Insn 248: point = 233
   Insn 247: point = 233
   Insn 246: point = 234
   Insn 245: point = 236
  BB 13
   Insn 565: point = 237
  BB 12
   Insn 193: point = 237
   Insn 192: point = 237
   Insn 191: point = 238
  BB 10
   Insn 562: point = 239
  BB 11
   Insn 187: point = 239
   Insn 577: point = 240
	Hard reg 0 is preferable by r386 with profit 1
   Insn 186: point = 242
   Insn 576: point = 243
	Hard reg 0 is preferable by r386 with profit 1
	Hard reg 22 is preferable by r386 with profit 1
   Insn 185: point = 245
   Insn 184: point = 246
   Insn 183: point = 248
   Insn 182: point = 250
   Insn 181: point = 251
   Insn 180: point = 253
   Insn 179: point = 255
   Insn 178: point = 257
   Insn 177: point = 258
   Insn 176: point = 258
   Insn 175: point = 259
   Insn 174: point = 261
   Insn 173: point = 262
   Insn 172: point = 264
   Insn 171: point = 265
   Insn 170: point = 267
   Insn 169: point = 269
   Insn 168: point = 271
   Insn 167: point = 272
   Insn 166: point = 272
   Insn 165: point = 273
   Insn 164: point = 275
   Insn 163: point = 276
   Insn 575: point = 277
	Hard reg 0 is preferable by r385 with profit 1
   Insn 162: point = 279
   Insn 574: point = 280
	Hard reg 0 is preferable by r385 with profit 1
	Hard reg 22 is preferable by r385 with profit 1
   Insn 161: point = 282
   Insn 160: point = 283
  BB 17
   Insn 242: point = 284
   Insn 241: point = 284
   Insn 240: point = 285
  BB 15
   Insn 567: point = 286
  BB 16
   Insn 236: point = 286
   Insn 581: point = 287
	Hard reg 0 is preferable by r388 with profit 1
   Insn 235: point = 289
   Insn 580: point = 290
	Hard reg 0 is preferable by r388 with profit 1
	Hard reg 21 is preferable by r388 with profit 1
   Insn 234: point = 292
   Insn 233: point = 293
   Insn 232: point = 295
   Insn 231: point = 297
   Insn 230: point = 298
   Insn 229: point = 300
   Insn 228: point = 302
   Insn 227: point = 304
   Insn 226: point = 305
   Insn 225: point = 305
   Insn 224: point = 306
   Insn 223: point = 308
   Insn 222: point = 309
   Insn 221: point = 311
   Insn 220: point = 312
   Insn 219: point = 314
   Insn 218: point = 316
   Insn 217: point = 318
   Insn 216: point = 319
   Insn 215: point = 319
   Insn 214: point = 320
   Insn 213: point = 322
   Insn 212: point = 323
   Insn 579: point = 324
	Hard reg 0 is preferable by r387 with profit 1
   Insn 211: point = 326
   Insn 578: point = 327
	Hard reg 0 is preferable by r387 with profit 1
	Hard reg 21 is preferable by r387 with profit 1
   Insn 210: point = 329
   Insn 209: point = 330
  BB 14
   Insn 201: point = 331
   Insn 200: point = 331
   Insn 199: point = 332
  BB 9
   Insn 152: point = 333
   Insn 151: point = 333
   Insn 150: point = 334
  BB 8
   Insn 148: point = 335
   Insn 147: point = 335
   Insn 146: point = 336
   Insn 145: point = 338
   Insn 144: point = 340
   Insn 143: point = 341
   Insn 142: point = 343
   Insn 141: point = 345
   Insn 140: point = 347
   Insn 139: point = 348
   Insn 138: point = 348
   Insn 137: point = 349
   Insn 136: point = 351
  BB 7
   Insn 134: point = 352
   Insn 133: point = 352
  BB 3
   Insn 559: point = 352
   Insn 57: point = 352
   Insn 56: point = 352
   Insn 55: point = 353
   Insn 54: point = 354
   Insn 53: point = 355
   Insn 52: point = 356
   Insn 51: point = 356
   Insn 50: point = 357
   Insn 49: point = 359
   Insn 48: point = 361
   Insn 47: point = 363
   Insn 46: point = 365
   Insn 45: point = 367
   Insn 44: point = 369
   Insn 43: point = 371
   Insn 42: point = 372
   Insn 41: point = 374
   Insn 40: point = 376
   Insn 39: point = 377
   Insn 38: point = 379
   Insn 37: point = 381
   Insn 36: point = 383
   Insn 35: point = 385
   Insn 34: point = 387
   Insn 33: point = 388
   Insn 32: point = 390
   Insn 31: point = 392
   Insn 30: point = 393
   Insn 29: point = 395
   Insn 28: point = 397
   Insn 27: point = 399
   Insn 26: point = 401
   Insn 25: point = 403
   Insn 24: point = 404
   Insn 23: point = 406
   Insn 22: point = 408
   Insn 21: point = 409
   Insn 20: point = 411
   Insn 19: point = 413
   Insn 18: point = 415
   Insn 17: point = 417
   Insn 16: point = 418
   Insn 15: point = 420
   Insn 14: point = 422
  BB 6
   Insn 129: point = 423
  BB 5
   Insn 126: point = 423
   Insn 125: point = 424
  BB 4
   Insn 120: point = 425
   Insn 119: point = 425
   Insn 118: point = 426
   Insn 117: point = 427
   Insn 116: point = 428
   Insn 115: point = 429
   Insn 114: point = 429
   Insn 113: point = 430
   Insn 112: point = 432
   Insn 111: point = 434
   Insn 110: point = 436
   Insn 109: point = 438
   Insn 108: point = 440
   Insn 107: point = 442
   Insn 106: point = 444
   Insn 105: point = 446
   Insn 104: point = 447
   Insn 103: point = 449
   Insn 102: point = 451
   Insn 101: point = 452
   Insn 100: point = 454
   Insn 99: point = 456
   Insn 98: point = 457
   Insn 97: point = 459
   Insn 96: point = 461
   Insn 95: point = 463
   Insn 94: point = 465
   Insn 93: point = 467
   Insn 92: point = 469
   Insn 91: point = 470
   Insn 90: point = 472
   Insn 89: point = 474
   Insn 88: point = 475
   Insn 87: point = 477
   Insn 86: point = 479
   Insn 85: point = 480
   Insn 84: point = 482
   Insn 83: point = 484
   Insn 82: point = 486
   Insn 81: point = 488
   Insn 80: point = 490
   Insn 79: point = 492
   Insn 78: point = 493
   Insn 77: point = 495
   Insn 76: point = 497
   Insn 75: point = 498
   Insn 74: point = 500
   Insn 73: point = 502
   Insn 72: point = 503
   Insn 71: point = 505
   Insn 70: point = 507
   Insn 69: point = 509
   Insn 68: point = 511
   Insn 67: point = 513
   Insn 66: point = 514
   Insn 65: point = 516
   Insn 64: point = 518
   Insn 63: point = 519
   Insn 62: point = 521
   Insn 61: point = 523
  BB 33
   Insn 441: point = 524
  BB 32
   Insn 438: point = 524
   Insn 437: point = 524
   Insn 436: point = 525
   Insn 435: point = 526
   Insn 434: point = 528
   Insn 433: point = 530
   Insn 432: point = 531
   Insn 431: point = 533
   Insn 430: point = 535
   Insn 429: point = 536
   Insn 428: point = 538
   Insn 427: point = 539
   Insn 426: point = 541
   Insn 425: point = 543
  BB 31
   Insn 423: point = 544
   Insn 422: point = 544
   Insn 421: point = 545
   Insn 420: point = 547
   Insn 419: point = 549
   Insn 418: point = 550
   Insn 417: point = 552
   Insn 416: point = 554
   Insn 415: point = 556
   Insn 414: point = 557
   Insn 413: point = 557
   Insn 412: point = 558
   Insn 411: point = 560
  BB 45
   Insn 527: point = 561
  BB 44
   Insn 524: point = 561
   Insn 523: point = 561
   Insn 522: point = 562
   Insn 521: point = 563
   Insn 520: point = 564
   Insn 519: point = 565
   Insn 518: point = 566
   Insn 517: point = 567
   Insn 516: point = 569
   Insn 515: point = 570
   Insn 514: point = 572
   Insn 513: point = 574
  BB 43
   Insn 511: point = 575
   Insn 510: point = 575
   Insn 509: point = 576
   Insn 508: point = 578
   Insn 507: point = 580
   Insn 506: point = 581
   Insn 505: point = 583
   Insn 504: point = 585
   Insn 503: point = 587
   Insn 502: point = 588
   Insn 501: point = 588
   Insn 500: point = 589
   Insn 499: point = 591
 r83: [120..121]
 r84: [419..420]
 r85: [416..418]
 r86: [414..415]
 r87: [412..413]
 r88: [410..411]
 r89: [394..409]
 r90: [405..406]
 r91: [402..404]
 r92: [400..401]
 r93: [398..399]
 r94: [396..397]
 r95: [394..395]
 r96: [358..393]
 r97: [389..390]
 r98: [386..388]
 r99: [384..385]
 r100: [382..383]
 r101: [380..381]
 r102: [378..379]
 r103: [360..377]
 r104: [373..374]
 r105: [370..372]
 r106: [368..369]
 r107: [366..367]
 r108: [364..365]
 r109: [362..363]
 r110: [360..361]
 r111: [358..359]
 r112: [356..357]
 r113: [520..521]
 r114: [517..519]
 r115: [515..516]
 r116: [508..514]
 r117: [510..511]
 r118: [508..509]
 r119: [506..507]
 r120: [504..505]
 r121: [481..503]
 r122: [499..500]
 r123: [496..498]
 r124: [494..495]
 r125: [487..493]
 r126: [489..490]
 r127: [487..488]
 r128: [485..486]
 r129: [483..484]
 r130: [481..482]
 r131: [431..480]
 r132: [476..477]
 r133: [473..475]
 r134: [471..472]
 r135: [462..470]
 r136: [466..467]
 r137: [464..465]
 r138: [462..463]
 r139: [460..461]
 r140: [458..459]
 r141: [433..457]
 r142: [453..454]
 r143: [450..452]
 r144: [448..449]
 r145: [439..447]
 r146: [443..444]
 r147: [441..442]
 r148: [439..440]
 r149: [437..438]
 r150: [435..436]
 r151: [433..434]
 r152: [431..432]
 r153: [429..430]
 r154: [347..349]
 r155: [339..341]
 r156: [337..338]
 r157: [335..336]
 r158: [318..320]
 r159: [310..312]
 r160: [286..309]
 r161: [304..306]
 r162: [296..298]
 r163: [294..295]
 r164: [291..293]
 r165: [286..287]
 r166: [271..273]
 r167: [263..265]
 r168: [239..262]
 r169: [257..259]
 r170: [249..251]
 r171: [247..248]
 r172: [244..246]
 r173: [239..240]
 r174: [232..234]
 r175: [224..226]
 r176: [211..223]
 r177: [219..220]
 r178: [216..218]
 r179: [214..215]
 r180: [209..213]
 r181: [204..206]
 r182: [196..198]
 r183: [194..195]
 r184: [192..193]
 r185: [188..189]
 r186: [185..187]
 r187: [173..184]
 r188: [180..181]
 r189: [177..179]
 r190: [175..176]
 r191: [172..174]
 r192: [167..169]
 r193: [159..161]
 r194: [157..158]
 r195: [155..156]
 r196: [151..152]
 r197: [148..150]
 r198: [126..147]
 r199: [143..144]
 r200: [140..142]
 r201: [138..139]
 r202: [125..137]
 r203: [133..134]
 r204: [130..132]
 r205: [128..129]
 r206: [124..127]
 r207: [116..117]
 r208: [112..113]
 r209: [103..111]
 r210: [102..108]
 r211: [98..99]
 r212: [94..95]
 r213: [80..93]
 r214: [89..90]
 r215: [79..88]
 r216: [78..85]
 r217: [74..75]
 r218: [70..71]
 r219: [56..69]
 r220: [65..66]
 r221: [55..64]
 r222: [54..61]
 r223: [50..51]
 r224: [556..558]
 r225: [548..550]
 r226: [546..547]
 r227: [544..545]
 r228: [540..541]
 r229: [537..539]
 r230: [525..536]
 r231: [532..533]
 r232: [529..531]
 r233: [527..528]
 r234: [524..526]
 r235: [42..47]
 r236: [38..39]
 r237: [32..37]
 r238: [28..29]
 r239: [24..25]
 r240: [22..23]
 r241: [18..19]
 r242: [9..17]
 r243: [8..14]
 r244: [4..5]
 r245: [587..589]
 r246: [579..581]
 r247: [577..578]
 r248: [575..576]
 r249: [571..572]
 r250: [562..570]
 r251: [561..567]
 r252: [2..3]
 r253: [0..1]
 r254: [421..422]
 r255: [416..417]
 r256: [407..408]
 r257: [402..403]
 r258: [391..392]
 r259: [386..387]
 r260: [375..376]
 r261: [370..371]
 r262: [354..355]
 r263: [352..353]
 r264: [522..523]
 r265: [517..518]
 r266: [512..513]
 r267: [501..502]
 r268: [496..497]
 r269: [491..492]
 r270: [478..479]
 r271: [473..474]
 r272: [468..469]
 r273: [455..456]
 r274: [450..451]
 r275: [445..446]
 r276: [427..428]
 r277: [425..426]
 r278: [423..424]
 r279: [350..351]
 r280: [346..348] [342..343]
 r281: [344..345]
 r282: [339..340]
 r283: [333..334]
 r284: [276..277]
 r285: [281..283]
 r286: [279..282]
 r287: [274..275]
 r288: [270..272] [266..267]
 r289: [268..269]
 r290: [263..264]
 r291: [260..261]
 r292: [256..258] [252..253]
 r293: [254..255]
 r294: [249..250]
 r295: [242..245]
 r296: [237..238]
 r297: [331..332]
 r298: [323..324]
 r299: [328..330]
 r300: [326..329]
 r301: [321..322]
 r302: [317..319] [313..314]
 r303: [315..316]
 r304: [310..311]
 r305: [307..308]
 r306: [303..305] [299..300]
 r307: [301..302]
 r308: [296..297]
 r309: [289..292]
 r310: [284..285]
 r311: [235..236]
 r312: [231..233] [227..228]
 r313: [229..230]
 r314: [224..225]
 r315: [221..222]
 r316: [216..217]
 r317: [210..212]
 r318: [207..208]
 r319: [203..205] [199..200]
 r320: [201..202]
 r321: [196..197]
 r322: [190..191]
 r323: [185..186]
 r324: [182..183]
 r325: [177..178]
 r326: [170..171]
 r327: [166..168] [162..163]
 r328: [164..165]
 r329: [159..160]
 r330: [153..154]
 r331: [148..149]
 r332: [145..146]
 r333: [140..141]
 r334: [135..136]
 r335: [130..131]
 r336: [122..123]
 r337: [118..119]
 r338: [114..115]
 r339: [109..110]
 r340: [105..107]
 r341: [104..106]
 r342: [100..101]
 r343: [96..97]
 r344: [91..92]
 r345: [86..87]
 r346: [82..84]
 r347: [81..83]
 r348: [76..77]
 r349: [72..73]
 r350: [67..68]
 r351: [62..63]
 r352: [58..60]
 r353: [57..59]
 r354: [559..560]
 r355: [555..557] [551..552]
 r356: [553..554]
 r357: [548..549]
 r358: [542..543]
 r359: [537..538]
 r360: [534..535]
 r361: [529..530]
 r362: [52..53]
 r363: [48..49]
 r364: [45..46]
 r365: [42..43]
 r366: [40..41]
 r367: [35..36]
 r368: [32..33]
 r369: [30..31]
 r370: [26..27]
 r371: [20..21]
 r372: [15..16]
 r373: [11..13]
 r374: [10..12]
 r375: [590..591]
 r376: [586..588] [582..583]
 r377: [584..585]
 r378: [579..580]
 r379: [573..574]
 r380: [568..569]
 r381: [564..566]
 r382: [563..565]
 r383: [6..7]
 r385: [278..280]
 r386: [241..243]
 r387: [325..327]
 r388: [288..290]
Compressing live ranges: from 592 to 476 - 80%
Ranges after the compression:
 r83: [88..89]
 r84: [330..331]
 r85: [328..329]
 r86: [326..327]
 r87: [324..325]
 r88: [322..323]
 r89: [308..321]
 r90: [318..319]
 r91: [316..317]
 r92: [314..315]
 r93: [312..313]
 r94: [310..311]
 r95: [308..309]
 r96: [276..307]
 r97: [304..305]
 r98: [302..303]
 r99: [300..301]
 r100: [298..299]
 r101: [296..297]
 r102: [294..295]
 r103: [278..293]
 r104: [290..291]
 r105: [288..289]
 r106: [286..287]
 r107: [284..285]
 r108: [282..283]
 r109: [280..281]
 r110: [278..279]
 r111: [276..277]
 r112: [274..275]
 r113: [420..421]
 r114: [418..419]
 r115: [416..417]
 r116: [410..415]
 r117: [412..413]
 r118: [410..411]
 r119: [408..409]
 r120: [406..407]
 r121: [386..405]
 r122: [402..403]
 r123: [400..401]
 r124: [398..399]
 r125: [392..397]
 r126: [394..395]
 r127: [392..393]
 r128: [390..391]
 r129: [388..389]
 r130: [386..387]
 r131: [342..385]
 r132: [382..383]
 r133: [380..381]
 r134: [378..379]
 r135: [370..377]
 r136: [374..375]
 r137: [372..373]
 r138: [370..371]
 r139: [368..369]
 r140: [366..367]
 r141: [344..365]
 r142: [362..363]
 r143: [360..361]
 r144: [358..359]
 r145: [350..357]
 r146: [354..355]
 r147: [352..353]
 r148: [350..351]
 r149: [348..349]
 r150: [346..347]
 r151: [344..345]
 r152: [342..343]
 r153: [340..341]
 r154: [266..267]
 r155: [260..261]
 r156: [258..259]
 r157: [256..257]
 r158: [242..243]
 r159: [236..237]
 r160: [218..235]
 r161: [232..233]
 r162: [226..227]
 r163: [224..225]
 r164: [222..223]
 r165: [218..219]
 r166: [206..207]
 r167: [200..201]
 r168: [182..199]
 r169: [196..197]
 r170: [190..191]
 r171: [188..189]
 r172: [186..187]
 r173: [182..183]
 r174: [176..177]
 r175: [170..171]
 r176: [160..169]
 r177: [166..167]
 r178: [164..165]
 r179: [162..163]
 r180: [160..161]
 r181: [156..157]
 r182: [150..151]
 r183: [148..149]
 r184: [146..147]
 r185: [142..143]
 r186: [140..141]
 r187: [130..139]
 r188: [136..137]
 r189: [134..135]
 r190: [132..133]
 r191: [130..131]
 r192: [126..127]
 r193: [120..121]
 r194: [118..119]
 r195: [116..117]
 r196: [112..113]
 r197: [110..111]
 r198: [92..109]
 r199: [106..107]
 r200: [104..105]
 r201: [102..103]
 r202: [92..101]
 r203: [98..99]
 r204: [96..97]
 r205: [94..95]
 r206: [92..93]
 r207: [84..85]
 r208: [80..81]
 r209: [76..79]
 r210: [76..77]
 r211: [72..73]
 r212: [68..69]
 r213: [60..67]
 r214: [64..65]
 r215: [60..63]
 r216: [60..61]
 r217: [56..57]
 r218: [52..53]
 r219: [44..51]
 r220: [48..49]
 r221: [44..47]
 r222: [44..45]
 r223: [40..41]
 r224: [450..451]
 r225: [444..445]
 r226: [442..443]
 r227: [440..441]
 r228: [436..437]
 r229: [434..435]
 r230: [424..433]
 r231: [430..431]
 r232: [428..429]
 r233: [426..427]
 r234: [424..425]
 r235: [34..37]
 r236: [30..31]
 r237: [26..29]
 r238: [22..23]
 r239: [18..19]
 r240: [16..17]
 r241: [12..13]
 r242: [8..11]
 r243: [8..9]
 r244: [4..5]
 r245: [472..473]
 r246: [466..467]
 r247: [464..465]
 r248: [462..463]
 r249: [458..459]
 r250: [454..457]
 r251: [454..455]
 r252: [2..3]
 r253: [0..1]
 r254: [332..333]
 r255: [328..329]
 r256: [320..321]
 r257: [316..317]
 r258: [306..307]
 r259: [302..303]
 r260: [292..293]
 r261: [288..289]
 r262: [272..273]
 r263: [270..271]
 r264: [422..423]
 r265: [418..419]
 r266: [414..415]
 r267: [404..405]
 r268: [400..401]
 r269: [396..397]
 r270: [384..385]
 r271: [380..381]
 r272: [376..377]
 r273: [364..365]
 r274: [360..361]
 r275: [356..357]
 r276: [338..339]
 r277: [336..337]
 r278: [334..335]
 r279: [268..269]
 r280: [266..267] [262..263]
 r281: [264..265]
 r282: [260..261]
 r283: [254..255]
 r284: [210..211]
 r285: [214..215]
 r286: [212..215]
 r287: [208..209]
 r288: [206..207] [202..203]
 r289: [204..205]
 r290: [200..201]
 r291: [198..199]
 r292: [196..197] [192..193]
 r293: [194..195]
 r294: [190..191]
 r295: [184..187]
 r296: [180..181]
 r297: [252..253]
 r298: [246..247]
 r299: [250..251]
 r300: [248..251]
 r301: [244..245]
 r302: [242..243] [238..239]
 r303: [240..241]
 r304: [236..237]
 r305: [234..235]
 r306: [232..233] [228..229]
 r307: [230..231]
 r308: [226..227]
 r309: [220..223]
 r310: [216..217]
 r311: [178..179]
 r312: [176..177] [172..173]
 r313: [174..175]
 r314: [170..171]
 r315: [168..169]
 r316: [164..165]
 r317: [160..161]
 r318: [158..159]
 r319: [156..157] [152..153]
 r320: [154..155]
 r321: [150..151]
 r322: [144..145]
 r323: [140..141]
 r324: [138..139]
 r325: [134..135]
 r326: [128..129]
 r327: [126..127] [122..123]
 r328: [124..125]
 r329: [120..121]
 r330: [114..115]
 r331: [110..111]
 r332: [108..109]
 r333: [104..105]
 r334: [100..101]
 r335: [96..97]
 r336: [90..91]
 r337: [86..87]
 r338: [82..83]
 r339: [78..79]
 r340: [76..77]
 r341: [76..77]
 r342: [74..75]
 r343: [70..71]
 r344: [66..67]
 r345: [62..63]
 r346: [60..61]
 r347: [60..61]
 r348: [58..59]
 r349: [54..55]
 r350: [50..51]
 r351: [46..47]
 r352: [44..45]
 r353: [44..45]
 r354: [452..453]
 r355: [450..451] [446..447]
 r356: [448..449]
 r357: [444..445]
 r358: [438..439]
 r359: [434..435]
 r360: [432..433]
 r361: [428..429]
 r362: [42..43]
 r363: [38..39]
 r364: [36..37]
 r365: [34..35]
 r366: [32..33]
 r367: [28..29]
 r368: [26..27]
 r369: [24..25]
 r370: [20..21]
 r371: [14..15]
 r372: [10..11]
 r373: [8..9]
 r374: [8..9]
 r375: [474..475]
 r376: [472..473] [468..469]
 r377: [470..471]
 r378: [466..467]
 r379: [460..461]
 r380: [456..457]
 r381: [454..455]
 r382: [454..455]
 r383: [6..7]
 r385: [212..213]
 r386: [184..185]
 r387: [248..249]
 r388: [220..221]

********** Assignment #1: **********

	 Assigning to 385 (cl=SSE_REGS, orig=284, freq=3, tfirst=385, tfreq=3)...
	   Assign 22 to reload r385 (freq=3)
	 Assigning to 386 (cl=SSE_REGS, orig=173, freq=3, tfirst=386, tfreq=3)...
	   Assign 22 to reload r386 (freq=3)
	 Assigning to 387 (cl=SSE_REGS, orig=298, freq=3, tfirst=387, tfreq=3)...
	   Assign 21 to reload r387 (freq=3)
	 Assigning to 388 (cl=SSE_REGS, orig=165, freq=3, tfirst=388, tfreq=3)...
	   Assign 21 to reload r388 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 337
changing reg in insn 339
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 30
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 70
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 85
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 82
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 96
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 109
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 137
changing reg in insn 140
changing reg in insn 138
changing reg in insn 140
changing reg in insn 143
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 214
changing reg in insn 217
changing reg in insn 215
changing reg in insn 217
changing reg in insn 220
changing reg in insn 222
changing reg in insn 222
changing reg in insn 222
changing reg in insn 236
changing reg in insn 224
changing reg in insn 227
changing reg in insn 225
changing reg in insn 227
changing reg in insn 230
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 236
changing reg in insn 165
changing reg in insn 168
changing reg in insn 166
changing reg in insn 168
changing reg in insn 171
changing reg in insn 173
changing reg in insn 173
changing reg in insn 173
changing reg in insn 187
changing reg in insn 175
changing reg in insn 178
changing reg in insn 176
changing reg in insn 178
changing reg in insn 181
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 187
changing reg in insn 246
changing reg in insn 249
changing reg in insn 247
changing reg in insn 249
changing reg in insn 252
changing reg in insn 254
changing reg in insn 254
changing reg in insn 254
changing reg in insn 262
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 264
changing reg in insn 267
changing reg in insn 270
changing reg in insn 268
changing reg in insn 270
changing reg in insn 273
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 284
changing reg in insn 284
changing reg in insn 284
changing reg in insn 291
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 289
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 292
changing reg in insn 297
changing reg in insn 300
changing reg in insn 298
changing reg in insn 300
changing reg in insn 303
changing reg in insn 305
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 311
changing reg in insn 312
changing reg in insn 312
changing reg in insn 314
changing reg in insn 314
changing reg in insn 314
changing reg in insn 327
changing reg in insn 316
changing reg in insn 317
changing reg in insn 317
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 328
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 325
changing reg in insn 325
changing reg in insn 326
changing reg in insn 326
changing reg in insn 329
changing reg in insn 343
changing reg in insn 344
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 356
changing reg in insn 351
changing reg in insn 357
changing reg in insn 362
changing reg in insn 363
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 378
changing reg in insn 370
changing reg in insn 371
changing reg in insn 371
changing reg in insn 379
changing reg in insn 373
changing reg in insn 380
changing reg in insn 385
changing reg in insn 386
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 401
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 402
changing reg in insn 396
changing reg in insn 403
changing reg in insn 445
changing reg in insn 447
changing reg in insn 412
changing reg in insn 415
changing reg in insn 413
changing reg in insn 415
changing reg in insn 418
changing reg in insn 420
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 422
changing reg in insn 426
changing reg in insn 427
changing reg in insn 427
changing reg in insn 429
changing reg in insn 429
changing reg in insn 429
changing reg in insn 436
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 434
changing reg in insn 434
changing reg in insn 435
changing reg in insn 435
changing reg in insn 437
changing reg in insn 451
changing reg in insn 456
changing reg in insn 453
changing reg in insn 460
changing reg in insn 461
changing reg in insn 461
changing reg in insn 466
changing reg in insn 463
changing reg in insn 470
changing reg in insn 471
changing reg in insn 475
changing reg in insn 476
changing reg in insn 476
changing reg in insn 477
changing reg in insn 482
changing reg in insn 483
changing reg in insn 483
changing reg in insn 490
changing reg in insn 485
changing reg in insn 491
changing reg in insn 531
changing reg in insn 533
changing reg in insn 500
changing reg in insn 503
changing reg in insn 501
changing reg in insn 503
changing reg in insn 506
changing reg in insn 508
changing reg in insn 508
changing reg in insn 509
changing reg in insn 509
changing reg in insn 510
changing reg in insn 514
changing reg in insn 515
changing reg in insn 515
changing reg in insn 522
changing reg in insn 517
changing reg in insn 523
changing reg in insn 536
changing reg in insn 539
changing reg in insn 539
changing reg in insn 543
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 92
changing reg in insn 93
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 105
changing reg in insn 106
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 125
changing reg in insn 126
changing reg in insn 136
changing reg in insn 137
changing reg in insn 142
changing reg in insn 140
changing reg in insn 139
changing reg in insn 138
changing reg in insn 143
changing reg in insn 141
changing reg in insn 140
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 150
changing reg in insn 151
changing reg in insn 163
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 170
changing reg in insn 168
changing reg in insn 167
changing reg in insn 166
changing reg in insn 171
changing reg in insn 169
changing reg in insn 168
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 180
changing reg in insn 178
changing reg in insn 177
changing reg in insn 176
changing reg in insn 181
changing reg in insn 179
changing reg in insn 178
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 185
changing reg in insn 186
changing reg in insn 191
changing reg in insn 192
changing reg in insn 199
changing reg in insn 200
changing reg in insn 212
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 219
changing reg in insn 217
changing reg in insn 216
changing reg in insn 215
changing reg in insn 220
changing reg in insn 218
changing reg in insn 217
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 229
changing reg in insn 227
changing reg in insn 226
changing reg in insn 225
changing reg in insn 230
changing reg in insn 228
changing reg in insn 227
changing reg in insn 226
changing reg in insn 228
changing reg in insn 229
changing reg in insn 231
changing reg in insn 234
changing reg in insn 235
changing reg in insn 240
changing reg in insn 241
changing reg in insn 245
changing reg in insn 246
changing reg in insn 251
changing reg in insn 249
changing reg in insn 248
changing reg in insn 247
changing reg in insn 252
changing reg in insn 250
changing reg in insn 249
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 258
changing reg in insn 261
changing reg in insn 263
changing reg in insn 266
changing reg in insn 267
changing reg in insn 272
changing reg in insn 270
changing reg in insn 269
changing reg in insn 268
changing reg in insn 273
changing reg in insn 271
changing reg in insn 270
changing reg in insn 269
changing reg in insn 271
changing reg in insn 272
changing reg in insn 274
changing reg in insn 280
changing reg in insn 281
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 286
changing reg in insn 288
changing reg in insn 296
changing reg in insn 297
changing reg in insn 302
changing reg in insn 300
changing reg in insn 299
changing reg in insn 298
changing reg in insn 303
changing reg in insn 301
changing reg in insn 300
changing reg in insn 299
changing reg in insn 301
changing reg in insn 302
changing reg in insn 304
changing reg in insn 310
changing reg in insn 311
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 316
changing reg in insn 318
changing reg in insn 321
changing reg in insn 322
changing reg in insn 324
changing reg in insn 336
changing reg in insn 337
changing reg in insn 342
changing reg in insn 343
changing reg in insn 347
changing reg in insn 348
changing reg in insn 350
changing reg in insn 351
changing reg in insn 352
changing reg in insn 354
changing reg in insn 353
changing reg in insn 355
changing reg in insn 361
changing reg in insn 362
changing reg in insn 366
changing reg in insn 367
changing reg in insn 369
changing reg in insn 370
changing reg in insn 372
changing reg in insn 373
changing reg in insn 374
changing reg in insn 376
changing reg in insn 375
changing reg in insn 377
changing reg in insn 384
changing reg in insn 385
changing reg in insn 389
changing reg in insn 390
changing reg in insn 392
changing reg in insn 393
changing reg in insn 395
changing reg in insn 396
changing reg in insn 397
changing reg in insn 399
changing reg in insn 398
changing reg in insn 400
changing reg in insn 411
changing reg in insn 412
changing reg in insn 417
changing reg in insn 415
changing reg in insn 414
changing reg in insn 413
changing reg in insn 418
changing reg in insn 416
changing reg in insn 415
changing reg in insn 414
changing reg in insn 416
changing reg in insn 417
changing reg in insn 419
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 431
changing reg in insn 433
changing reg in insn 444
changing reg in insn 445
changing reg in insn 450
changing reg in insn 451
changing reg in insn 452
changing reg in insn 453
changing reg in insn 455
changing reg in insn 456
changing reg in insn 459
changing reg in insn 460
changing reg in insn 462
changing reg in insn 463
changing reg in insn 465
changing reg in insn 466
changing reg in insn 469
changing reg in insn 470
changing reg in insn 474
changing reg in insn 475
changing reg in insn 481
changing reg in insn 482
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 488
changing reg in insn 487
changing reg in insn 489
changing reg in insn 499
changing reg in insn 500
changing reg in insn 505
changing reg in insn 503
changing reg in insn 502
changing reg in insn 501
changing reg in insn 506
changing reg in insn 504
changing reg in insn 503
changing reg in insn 502
changing reg in insn 504
changing reg in insn 505
changing reg in insn 507
changing reg in insn 513
changing reg in insn 514
changing reg in insn 516
changing reg in insn 517
changing reg in insn 518
changing reg in insn 520
changing reg in insn 519
changing reg in insn 521
changing reg in insn 530
changing reg in insn 531
deleting insn with uid = 51.
deleting insn with uid = 114.
deleting insn with uid = 574.
deleting insn with uid = 576.
deleting insn with uid = 578.
deleting insn with uid = 580.
deleting insn with uid = 262.
deleting insn with uid = 327.
deleting insn with uid = 354.
deleting insn with uid = 355.
deleting insn with uid = 356.
deleting insn with uid = 377.
deleting insn with uid = 378.
deleting insn with uid = 379.
deleting insn with uid = 400.
deleting insn with uid = 401.
deleting insn with uid = 402.
deleting insn with uid = 488.
deleting insn with uid = 489.
deleting insn with uid = 490.
deleting insn with uid = 520.
deleting insn with uid = 521.
deleting insn with uid = 522.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 265.
verify found no changes in insn with uid = 293.
verify found no changes in insn with uid = 330.
verify found no changes in insn with uid = 358.
verify found no changes in insn with uid = 381.
verify found no changes in insn with uid = 404.
verify found no changes in insn with uid = 438.
verify found no changes in insn with uid = 492.
verify found no changes in insn with uid = 524.


int pre_process(int*, Preprocess*, Procpar_info*, float**, float**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 37[r8]
;;  ref usage 	r0={228d,217u} r1={66d,65u,31e} r2={25d,14u,4e} r4={22d,11u,1e} r5={23d,12u} r6={1d,173u} r7={1d,58u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={131d,23u} r18={11d} r19={11d} r20={1d,1u,35e} r21={41d,33u} r22={26d,14u} r23={14d,2u} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={14d,3u} r38={12d} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} 
;;    total ref usage 1934{1237d,626u,71e} in 437{426 regular + 11 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
        (reg:DI 2 cx [ out_data ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
        (reg:DI 37 r8 [ scratch_data ])) preproc.cpp:24 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 557 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:33 90 {*movsi_internal}
     (nil))
(jump_insn 557 10 558 2 (set (pc)
        (label_ref 334)) preproc.cpp:33 636 {jump}
     (nil)
 -> 334)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 558 557 338)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 254 255 256 257 258 259 260 261 262 263
(code_label 338 558 13 3 17 "" [1 uses])
(note 13 338 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:37 90 {*movsi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 0 ax [orig:84 D.6767 ] [84])
        (sign_extend:DI (reg:SI 0 ax [254]))) preproc.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 16 15 17 3 (parallel [
            (set (reg:DI 1 dx [orig:85 D.6767 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 D.6767 ] [84])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:37 497 {*ashldi3_1}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:37 89 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.6768 ] [86])
                (plus:DI (reg/f:DI 0 ax [255])
                    (reg:DI 1 dx [orig:85 D.6767 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:37 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.6767 ] [85]))
        (nil)))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [orig:87 D.6769 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [orig:86 D.6768 ] [86]) [0 *_15+0 S8 A64])) preproc.cpp:37 89 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SF 21 xmm0 [orig:88 D.6770 ] [88])
        (mem:SF (reg/f:DI 0 ax [orig:87 D.6769 ] [87]) [0 *_16+0 S4 A32])) preproc.cpp:37 129 {*movsf_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DF 22 xmm1 [orig:89 D.6771 ] [89])
        (float_extend:DF (reg:SF 21 xmm0 [orig:88 D.6770 ] [88]))) preproc.cpp:37 152 {*extendsfdf2_sse}
     (nil))
(insn 22 21 23 3 (set (reg:SI 0 ax [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:37 90 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 0 ax [orig:90 D.6767 ] [90])
        (sign_extend:DI (reg:SI 0 ax [256]))) preproc.cpp:37 142 {*extendsidi2_rex64}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg:DI 1 dx [orig:91 D.6767 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 D.6767 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:37 497 {*ashldi3_1}
     (nil))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:37 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.6768 ] [92])
                (plus:DI (reg/f:DI 0 ax [257])
                    (reg:DI 1 dx [orig:91 D.6767 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:37 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.6767 ] [91]))
        (nil)))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [orig:93 D.6769 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:92 D.6768 ] [92]) [0 *_21+0 S8 A64])) preproc.cpp:37 89 {*movdi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:SF 21 xmm0 [orig:94 D.6770 ] [94])
        (mem:SF (reg/f:DI 0 ax [orig:93 D.6769 ] [93]) [0 *_22+0 S4 A32])) preproc.cpp:37 129 {*movsf_internal}
     (nil))
(insn 29 28 30 3 (set (reg:DF 21 xmm0 [orig:95 D.6771 ] [95])
        (float_extend:DF (reg:SF 21 xmm0 [orig:94 D.6770 ] [94]))) preproc.cpp:37 152 {*extendsfdf2_sse}
     (nil))
(insn 30 29 31 3 (set (reg:DF 22 xmm1 [orig:96 D.6771 ] [96])
        (mult:DF (reg:DF 22 xmm1 [orig:89 D.6771 ] [89])
            (reg:DF 21 xmm0 [orig:95 D.6771 ] [95]))) preproc.cpp:37 776 {*fop_df_comm_sse}
     (nil))
(insn 31 30 32 3 (set (reg:SI 0 ax [258])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:38 90 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DI 0 ax [orig:97 D.6767 ] [97])
        (sign_extend:DI (reg:SI 0 ax [258]))) preproc.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 33 32 34 3 (parallel [
            (set (reg:DI 1 dx [orig:98 D.6767 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.6767 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 497 {*ashldi3_1}
     (nil))
(insn 34 33 35 3 (set (reg/f:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.6768 ] [99])
                (plus:DI (reg/f:DI 0 ax [259])
                    (reg:DI 1 dx [orig:98 D.6767 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.6767 ] [98]))
        (nil)))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [orig:100 D.6769 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 D.6768 ] [99]) [0 *_28+0 S8 A64])) preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.6769 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.6769 ] [100])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 221 {*adddi_1}
     (nil))
(insn 38 37 39 3 (set (reg:SF 21 xmm0 [orig:102 D.6770 ] [102])
        (mem:SF (reg/f:DI 0 ax [orig:101 D.6769 ] [101]) [0 *_30+0 S4 A32])) preproc.cpp:38 129 {*movsf_internal}
     (nil))
(insn 39 38 40 3 (set (reg:DF 23 xmm2 [orig:103 D.6771 ] [103])
        (float_extend:DF (reg:SF 21 xmm0 [orig:102 D.6770 ] [102]))) preproc.cpp:38 152 {*extendsfdf2_sse}
     (nil))
(insn 40 39 41 3 (set (reg:SI 0 ax [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:38 90 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 0 ax [orig:104 D.6767 ] [104])
        (sign_extend:DI (reg:SI 0 ax [260]))) preproc.cpp:38 142 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 3 (parallel [
            (set (reg:DI 1 dx [orig:105 D.6767 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 D.6767 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 497 {*ashldi3_1}
     (nil))
(insn 43 42 44 3 (set (reg/f:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 0 ax [orig:106 D.6768 ] [106])
                (plus:DI (reg/f:DI 0 ax [261])
                    (reg:DI 1 dx [orig:105 D.6767 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:105 D.6767 ] [105]))
        (nil)))
(insn 45 44 46 3 (set (reg/f:DI 0 ax [orig:107 D.6769 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 D.6768 ] [106]) [0 *_35+0 S8 A64])) preproc.cpp:38 89 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg/f:DI 0 ax [orig:108 D.6769 ] [108])
                (plus:DI (reg/f:DI 0 ax [orig:107 D.6769 ] [107])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:38 221 {*adddi_1}
     (nil))
(insn 47 46 48 3 (set (reg:SF 21 xmm0 [orig:109 D.6770 ] [109])
        (mem:SF (reg/f:DI 0 ax [orig:108 D.6769 ] [108]) [0 *_37+0 S4 A32])) preproc.cpp:38 129 {*movsf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DF 21 xmm0 [orig:110 D.6771 ] [110])
        (float_extend:DF (reg:SF 21 xmm0 [orig:109 D.6770 ] [109]))) preproc.cpp:38 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 3 (set (reg:DF 21 xmm0 [orig:111 D.6771 ] [111])
        (mult:DF (reg:DF 21 xmm0 [orig:110 D.6771 ] [110])
            (reg:DF 23 xmm2 [orig:103 D.6771 ] [103]))) preproc.cpp:38 776 {*fop_df_comm_sse}
     (nil))
(insn 50 49 52 3 (set (reg:DF 21 xmm0 [orig:112 D.6771 ] [112])
        (plus:DF (reg:DF 21 xmm0 [orig:111 D.6771 ] [111])
            (reg:DF 22 xmm1 [orig:96 D.6771 ] [96]))) preproc.cpp:38 776 {*fop_df_comm_sse}
     (nil))
(call_insn 52 50 53 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:38 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 53 52 54 3 (set (reg:DF 0 ax [262])
        (reg:DF 21 xmm0)) preproc.cpp:38 128 {*movdf_internal}
     (nil))
(insn 54 53 55 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])
        (reg:DF 0 ax [262])) preproc.cpp:38 128 {*movdf_internal}
     (nil))
(insn 55 54 56 3 (set (reg:DF 0 ax [263])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) preproc.cpp:39 128 {*movdf_internal}
     (nil))
(insn 56 55 57 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [263])) preproc.cpp:39 128 {*movdf_internal}
     (nil))
(insn 57 56 559 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
        (const_int 2 [0x2])) preproc.cpp:40 90 {*movsi_internal}
     (nil))
(jump_insn 559 57 560 3 (set (pc)
        (label_ref 130)) preproc.cpp:40 636 {jump}
     (nil)
 -> 130)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 560 559 132)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 264 265 266 267 268 269 270 271 272 273 274 275 276 277
(code_label 132 560 60 4 6 "" [1 uses])
(note 60 132 61 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 4 (set (reg:SI 0 ax [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:45 90 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (set (reg:DI 0 ax [orig:113 D.6767 ] [113])
        (sign_extend:DI (reg:SI 0 ax [264]))) preproc.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 4 (parallel [
            (set (reg:DI 1 dx [orig:114 D.6767 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.6767 ] [113])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 497 {*ashldi3_1}
     (nil))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:45 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg/f:DI 0 ax [orig:115 D.6768 ] [115])
                (plus:DI (reg/f:DI 0 ax [265])
                    (reg:DI 1 dx [orig:114 D.6767 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:114 D.6767 ] [114]))
        (nil)))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [orig:116 D.6769 ] [116])
        (mem/f:DI (reg/f:DI 0 ax [orig:115 D.6768 ] [115]) [0 *_47+0 S8 A64])) preproc.cpp:45 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:SI 1 dx [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) preproc.cpp:45 90 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 1 dx [orig:117 D.6767 ] [117])
        (sign_extend:DI (reg:SI 1 dx [266]))) preproc.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:DI 1 dx [orig:118 D.6767 ] [118])
                (ashift:DI (reg:DI 1 dx [orig:117 D.6767 ] [117])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 497 {*ashldi3_1}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.6769 ] [119])
                (plus:DI (reg/f:DI 0 ax [orig:116 D.6769 ] [116])
                    (reg:DI 1 dx [orig:118 D.6767 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 221 {*adddi_1}
     (nil))
(insn 71 70 72 4 (set (reg:SF 21 xmm0 [orig:120 D.6770 ] [120])
        (mem:SF (reg/f:DI 0 ax [orig:119 D.6769 ] [119]) [0 *_51+0 S4 A32])) preproc.cpp:45 129 {*movsf_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DF 22 xmm1 [orig:121 D.6771 ] [121])
        (float_extend:DF (reg:SF 21 xmm0 [orig:120 D.6770 ] [120]))) preproc.cpp:45 152 {*extendsfdf2_sse}
     (nil))
(insn 73 72 74 4 (set (reg:SI 0 ax [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:45 90 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 0 ax [orig:122 D.6767 ] [122])
        (sign_extend:DI (reg:SI 0 ax [267]))) preproc.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 4 (parallel [
            (set (reg:DI 1 dx [orig:123 D.6767 ] [123])
                (ashift:DI (reg:DI 0 ax [orig:122 D.6767 ] [122])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 497 {*ashldi3_1}
     (nil))
(insn 76 75 77 4 (set (reg/f:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:45 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg/f:DI 0 ax [orig:124 D.6768 ] [124])
                (plus:DI (reg/f:DI 0 ax [268])
                    (reg:DI 1 dx [orig:123 D.6767 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:123 D.6767 ] [123]))
        (nil)))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [orig:125 D.6769 ] [125])
        (mem/f:DI (reg/f:DI 0 ax [orig:124 D.6768 ] [124]) [0 *_56+0 S8 A64])) preproc.cpp:45 89 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (set (reg:SI 1 dx [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) preproc.cpp:45 90 {*movsi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:DI 1 dx [orig:126 D.6767 ] [126])
        (sign_extend:DI (reg:SI 1 dx [269]))) preproc.cpp:45 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 4 (parallel [
            (set (reg:DI 1 dx [orig:127 D.6767 ] [127])
                (ashift:DI (reg:DI 1 dx [orig:126 D.6767 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 497 {*ashldi3_1}
     (nil))
(insn 82 81 83 4 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.6769 ] [128])
                (plus:DI (reg/f:DI 0 ax [orig:125 D.6769 ] [125])
                    (reg:DI 1 dx [orig:127 D.6767 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:45 221 {*adddi_1}
     (nil))
(insn 83 82 84 4 (set (reg:SF 21 xmm0 [orig:129 D.6770 ] [129])
        (mem:SF (reg/f:DI 0 ax [orig:128 D.6769 ] [128]) [0 *_60+0 S4 A32])) preproc.cpp:45 129 {*movsf_internal}
     (nil))
(insn 84 83 85 4 (set (reg:DF 21 xmm0 [orig:130 D.6771 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.6770 ] [129]))) preproc.cpp:45 152 {*extendsfdf2_sse}
     (nil))
(insn 85 84 86 4 (set (reg:DF 22 xmm1 [orig:131 D.6771 ] [131])
        (mult:DF (reg:DF 22 xmm1 [orig:121 D.6771 ] [121])
            (reg:DF 21 xmm0 [orig:130 D.6771 ] [130]))) preproc.cpp:45 776 {*fop_df_comm_sse}
     (nil))
(insn 86 85 87 4 (set (reg:SI 0 ax [270])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:46 90 {*movsi_internal}
     (nil))
(insn 87 86 88 4 (set (reg:DI 0 ax [orig:132 D.6767 ] [132])
        (sign_extend:DI (reg:SI 0 ax [270]))) preproc.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg:DI 1 dx [orig:133 D.6767 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6767 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 497 {*ashldi3_1}
     (nil))
(insn 89 88 90 4 (set (reg/f:DI 0 ax [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:46 89 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6768 ] [134])
                (plus:DI (reg/f:DI 0 ax [271])
                    (reg:DI 1 dx [orig:133 D.6767 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6767 ] [133]))
        (nil)))
(insn 91 90 92 4 (set (reg/f:DI 0 ax [orig:135 D.6769 ] [135])
        (mem/f:DI (reg/f:DI 0 ax [orig:134 D.6768 ] [134]) [0 *_66+0 S8 A64])) preproc.cpp:46 89 {*movdi_internal}
     (nil))
(insn 92 91 93 4 (set (reg:SI 1 dx [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) preproc.cpp:46 90 {*movsi_internal}
     (nil))
(insn 93 92 94 4 (set (reg:DI 1 dx [orig:136 D.6772 ] [136])
        (sign_extend:DI (reg:SI 1 dx [272]))) preproc.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 4 (parallel [
            (set (reg:DI 1 dx [orig:137 D.6772 ] [137])
                (plus:DI (reg:DI 1 dx [orig:136 D.6772 ] [136])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 221 {*adddi_1}
     (nil))
(insn 95 94 96 4 (parallel [
            (set (reg:DI 1 dx [orig:138 D.6772 ] [138])
                (ashift:DI (reg:DI 1 dx [orig:137 D.6772 ] [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 497 {*ashldi3_1}
     (nil))
(insn 96 95 97 4 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.6769 ] [139])
                (plus:DI (reg/f:DI 0 ax [orig:135 D.6769 ] [135])
                    (reg:DI 1 dx [orig:138 D.6772 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 221 {*adddi_1}
     (nil))
(insn 97 96 98 4 (set (reg:SF 21 xmm0 [orig:140 D.6770 ] [140])
        (mem:SF (reg/f:DI 0 ax [orig:139 D.6769 ] [139]) [0 *_71+0 S4 A32])) preproc.cpp:46 129 {*movsf_internal}
     (nil))
(insn 98 97 99 4 (set (reg:DF 23 xmm2 [orig:141 D.6771 ] [141])
        (float_extend:DF (reg:SF 21 xmm0 [orig:140 D.6770 ] [140]))) preproc.cpp:46 152 {*extendsfdf2_sse}
     (nil))
(insn 99 98 100 4 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:46 90 {*movsi_internal}
     (nil))
(insn 100 99 101 4 (set (reg:DI 0 ax [orig:142 D.6767 ] [142])
        (sign_extend:DI (reg:SI 0 ax [273]))) preproc.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 4 (parallel [
            (set (reg:DI 1 dx [orig:143 D.6767 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.6767 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 497 {*ashldi3_1}
     (nil))
(insn 102 101 103 4 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:46 89 {*movdi_internal}
     (nil))
(insn 103 102 104 4 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.6768 ] [144])
                (plus:DI (reg/f:DI 0 ax [274])
                    (reg:DI 1 dx [orig:143 D.6767 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.6767 ] [143]))
        (nil)))
(insn 104 103 105 4 (set (reg/f:DI 0 ax [orig:145 D.6769 ] [145])
        (mem/f:DI (reg/f:DI 0 ax [orig:144 D.6768 ] [144]) [0 *_76+0 S8 A64])) preproc.cpp:46 89 {*movdi_internal}
     (nil))
(insn 105 104 106 4 (set (reg:SI 1 dx [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])) preproc.cpp:46 90 {*movsi_internal}
     (nil))
(insn 106 105 107 4 (set (reg:DI 1 dx [orig:146 D.6772 ] [146])
        (sign_extend:DI (reg:SI 1 dx [275]))) preproc.cpp:46 142 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 4 (parallel [
            (set (reg:DI 1 dx [orig:147 D.6772 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 D.6772 ] [146])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 221 {*adddi_1}
     (nil))
(insn 108 107 109 4 (parallel [
            (set (reg:DI 1 dx [orig:148 D.6772 ] [148])
                (ashift:DI (reg:DI 1 dx [orig:147 D.6772 ] [147])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 497 {*ashldi3_1}
     (nil))
(insn 109 108 110 4 (parallel [
            (set (reg/f:DI 0 ax [orig:149 D.6769 ] [149])
                (plus:DI (reg/f:DI 0 ax [orig:145 D.6769 ] [145])
                    (reg:DI 1 dx [orig:148 D.6772 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:46 221 {*adddi_1}
     (nil))
(insn 110 109 111 4 (set (reg:SF 21 xmm0 [orig:150 D.6770 ] [150])
        (mem:SF (reg/f:DI 0 ax [orig:149 D.6769 ] [149]) [0 *_81+0 S4 A32])) preproc.cpp:46 129 {*movsf_internal}
     (nil))
(insn 111 110 112 4 (set (reg:DF 21 xmm0 [orig:151 D.6771 ] [151])
        (float_extend:DF (reg:SF 21 xmm0 [orig:150 D.6770 ] [150]))) preproc.cpp:46 152 {*extendsfdf2_sse}
     (nil))
(insn 112 111 113 4 (set (reg:DF 21 xmm0 [orig:152 D.6771 ] [152])
        (mult:DF (reg:DF 21 xmm0 [orig:151 D.6771 ] [151])
            (reg:DF 23 xmm2 [orig:141 D.6771 ] [141]))) preproc.cpp:46 776 {*fop_df_comm_sse}
     (nil))
(insn 113 112 115 4 (set (reg:DF 21 xmm0 [orig:153 D.6771 ] [153])
        (plus:DF (reg:DF 21 xmm0 [orig:152 D.6771 ] [152])
            (reg:DF 22 xmm1 [orig:131 D.6771 ] [131]))) preproc.cpp:46 776 {*fop_df_comm_sse}
     (nil))
(call_insn 115 113 116 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:46 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 116 115 117 4 (set (reg:DF 0 ax [276])
        (reg:DF 21 xmm0)) preproc.cpp:46 128 {*movdf_internal}
     (nil))
(insn 117 116 118 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])
        (reg:DF 0 ax [276])) preproc.cpp:46 128 {*movdf_internal}
     (nil))
(insn 118 117 119 4 (set (reg:DF 21 xmm0 [277])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) preproc.cpp:47 128 {*movdf_internal}
     (nil))
(insn 119 118 120 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [277])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) preproc.cpp:47 56 {*cmpiudf_sse}
     (nil))
(jump_insn 120 119 124 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 127)
            (pc))) preproc.cpp:47 596 {*jcc_1}
     (nil)
 -> 127)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 278
(note 124 120 125 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 5 (set (reg:DF 0 ax [278])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 temp2+0 S8 A64])) preproc.cpp:48 128 {*movdf_internal}
     (nil))
(insn 126 125 127 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [278])) preproc.cpp:48 128 {*movdf_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 127 126 128 6 4 "" [1 uses])
(note 128 127 129 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:40 220 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 130 129 131 7 3 "" [1 uses])
(note 131 130 133 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 133 131 134 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 k+0 S4 A32])
            (const_int 48 [0x30]))) preproc.cpp:40 7 {*cmpsi_1}
     (nil))
(jump_insn 134 133 135 7 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 132)
            (pc))) preproc.cpp:40 596 {*jcc_1}
     (nil)
 -> 132)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 279 280 281 282
(note 135 134 136 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 8 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 137 136 138 8 (set (reg:DI 1 dx [orig:154 D.6767 ] [154])
        (sign_extend:DI (reg:SI 0 ax [279]))) preproc.cpp:52 142 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 8 (set (reg:DI 0 ax [280])
        (reg:DI 1 dx [orig:154 D.6767 ] [154])) preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 139 138 140 8 (parallel [
            (set (reg:DI 0 ax [280])
                (ashift:DI (reg:DI 0 ax [280])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:52 497 {*ashldi3_1}
     (nil))
(insn 140 139 141 8 (parallel [
            (set (reg:DI 0 ax [280])
                (plus:DI (reg:DI 0 ax [280])
                    (reg:DI 1 dx [orig:154 D.6767 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:52 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:154 D.6767 ] [154])
            (const_int 9 [0x9]))
        (nil)))
(insn 141 140 142 8 (parallel [
            (set (reg:DI 0 ax [281])
                (ashift:DI (reg:DI 0 ax [280])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:52 497 {*ashldi3_1}
     (nil))
(insn 142 141 143 8 (set (reg:DI 0 ax [280])
        (reg:DI 0 ax [281])) preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 143 142 144 8 (set (reg:DI 1 dx [orig:155 D.6767 ] [155])
        (reg:DI 0 ax [280])) preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 144 143 145 8 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:52 89 {*movdi_internal}
     (nil))
(insn 145 144 146 8 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.6773 ] [156])
                (plus:DI (reg/f:DI 0 ax [282])
                    (reg:DI 1 dx [orig:155 D.6767 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:52 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.6767 ] [155]))
        (nil)))
(insn 146 145 147 8 (set (reg:SI 0 ax [orig:157 D.6766 ] [157])
        (mem/j:SI (reg/f:DI 0 ax [orig:156 D.6773 ] [156]) [0 _92->fid_scale+0 S4 A32])) preproc.cpp:52 90 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:157 D.6766 ] [157])
            (const_int 0 [0]))) preproc.cpp:52 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 148 147 149 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 243)
            (pc))) preproc.cpp:52 596 {*jcc_1}
     (nil)
 -> 243)
;;  succ:       9 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 283
(note 149 148 150 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 9 (set (reg:DF 21 xmm0 [283])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) preproc.cpp:57 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 151 150 152 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [283])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) preproc.cpp:57 56 {*cmpiudf_sse}
     (nil))
(jump_insn 152 151 156 9 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 561)
            (pc))) preproc.cpp:57 596 {*jcc_1}
     (nil)
 -> 561)
;;  succ:       10 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 156 152 562 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 562 156 563 10 (set (pc)
        (label_ref 188)) preproc.cpp:58 636 {jump}
     (nil)
 -> 188)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 563 562 190)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 167 168 169 170 171 172 173 284 285 286 287 288 289 290 291 292 293 294 295
(code_label 190 563 159 11 11 "" [1 uses])
(note 159 190 160 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 11 (set (reg:DF 22 xmm1 [285])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) preproc.cpp:59 128 {*movdf_internal}
     (nil))
(insn 161 160 162 11 (set (reg:DF 21 xmm0 [286])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) preproc.cpp:59 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 162 161 575 11 (set (reg:DF 22 xmm1 [284])
        (mult:DF (reg:DF 22 xmm1 [284])
            (reg:DF 21 xmm0 [286]))) preproc.cpp:59 776 {*fop_df_comm_sse}
     (nil))
(insn 575 162 163 11 (set (reg:DF 0 ax [284])
        (reg:DF 22 xmm1 [284])) preproc.cpp:59 128 {*movdf_internal}
     (nil))
(insn 163 575 164 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [284])) preproc.cpp:59 128 {*movdf_internal}
     (nil))
(insn 164 163 165 11 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:60 90 {*movsi_internal}
     (nil))
(insn 165 164 166 11 (set (reg:DI 1 dx [orig:166 D.6767 ] [166])
        (sign_extend:DI (reg:SI 0 ax [287]))) preproc.cpp:60 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 11 (set (reg:DI 0 ax [288])
        (reg:DI 1 dx [orig:166 D.6767 ] [166])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 167 166 168 11 (parallel [
            (set (reg:DI 0 ax [288])
                (ashift:DI (reg:DI 0 ax [288])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 497 {*ashldi3_1}
     (nil))
(insn 168 167 169 11 (parallel [
            (set (reg:DI 0 ax [288])
                (plus:DI (reg:DI 0 ax [288])
                    (reg:DI 1 dx [orig:166 D.6767 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:166 D.6767 ] [166])
            (const_int 9 [0x9]))
        (nil)))
(insn 169 168 170 11 (parallel [
            (set (reg:DI 0 ax [289])
                (ashift:DI (reg:DI 0 ax [288])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 497 {*ashldi3_1}
     (nil))
(insn 170 169 171 11 (set (reg:DI 0 ax [288])
        (reg:DI 0 ax [289])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 171 170 172 11 (set (reg:DI 1 dx [orig:167 D.6767 ] [167])
        (reg:DI 0 ax [288])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 172 171 173 11 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 173 172 174 11 (parallel [
            (set (reg/f:DI 2 cx [orig:168 D.6773 ] [168])
                (plus:DI (reg:DI 1 dx [orig:167 D.6767 ] [167])
                    (reg/f:DI 0 ax [290])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:167 D.6767 ] [167]))
        (nil)))
(insn 174 173 175 11 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:60 90 {*movsi_internal}
     (nil))
(insn 175 174 176 11 (set (reg:DI 1 dx [orig:169 D.6767 ] [169])
        (sign_extend:DI (reg:SI 0 ax [291]))) preproc.cpp:60 142 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 11 (set (reg:DI 0 ax [292])
        (reg:DI 1 dx [orig:169 D.6767 ] [169])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 177 176 178 11 (parallel [
            (set (reg:DI 0 ax [292])
                (ashift:DI (reg:DI 0 ax [292])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 497 {*ashldi3_1}
     (nil))
(insn 178 177 179 11 (parallel [
            (set (reg:DI 0 ax [292])
                (plus:DI (reg:DI 0 ax [292])
                    (reg:DI 1 dx [orig:169 D.6767 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:169 D.6767 ] [169])
            (const_int 9 [0x9]))
        (nil)))
(insn 179 178 180 11 (parallel [
            (set (reg:DI 0 ax [293])
                (ashift:DI (reg:DI 0 ax [292])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 497 {*ashldi3_1}
     (nil))
(insn 180 179 181 11 (set (reg:DI 0 ax [292])
        (reg:DI 0 ax [293])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 181 180 182 11 (set (reg:DI 1 dx [orig:170 D.6767 ] [170])
        (reg:DI 0 ax [292])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 182 181 183 11 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:60 89 {*movdi_internal}
     (nil))
(insn 183 182 184 11 (parallel [
            (set (reg/f:DI 0 ax [orig:171 D.6773 ] [171])
                (plus:DI (reg/f:DI 0 ax [294])
                    (reg:DI 1 dx [orig:170 D.6767 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:60 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:170 D.6767 ] [170]))
        (nil)))
(insn 184 183 185 11 (set (reg:SF 22 xmm1 [orig:172 D.6770 ] [172])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:171 D.6773 ] [171])
                (const_int 4 [0x4])) [0 _109->scale_factor+0 S4 A32])) preproc.cpp:60 129 {*movsf_internal}
     (nil))
(insn 185 184 186 11 (set (reg:SF 21 xmm0 [295])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) preproc.cpp:60 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 186 185 577 11 (set (reg:SF 22 xmm1 [orig:173 D.6770 ] [173])
        (mult:SF (reg:SF 22 xmm1 [orig:173 D.6770 ] [173])
            (reg:SF 21 xmm0 [295]))) preproc.cpp:60 775 {*fop_sf_comm_sse}
     (nil))
(insn 577 186 187 11 (set (reg:SF 0 ax [orig:173 D.6770 ] [173])
        (reg:SF 22 xmm1 [orig:173 D.6770 ] [173])) preproc.cpp:60 129 {*movsf_internal}
     (nil))
(insn 187 577 188 11 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:168 D.6773 ] [168])
                (const_int 4 [0x4])) [0 _106->scale_factor+0 S4 A32])
        (reg:SF 0 ax [orig:173 D.6770 ] [173])) preproc.cpp:60 129 {*movsf_internal}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 296
(code_label 188 187 189 12 10 "" [1 uses])
(note 189 188 191 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 191 189 192 12 (set (reg:DF 21 xmm0 [296])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) preproc.cpp:58 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 192 191 193 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [296])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64]))) preproc.cpp:58 56 {*cmpiudf_sse}
     (nil))
(jump_insn 193 192 564 12 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 190)
            (pc))) preproc.cpp:58 596 {*jcc_1}
     (nil)
 -> 190)
;;  succ:       11
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 564 193 565 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(jump_insn 565 564 566 13 (set (pc)
        (label_ref 243)) 636 {jump}
     (nil)
 -> 243)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 566 565 561)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 297
(code_label 561 566 198 14 33 "" [1 uses])
(note 198 561 199 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 200 14 (set (reg:DF 21 xmm0 [297])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) preproc.cpp:62 128 {*movdf_internal}
     (nil))
(insn 200 199 201 14 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [297])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64]))) preproc.cpp:62 56 {*cmpiudf_sse}
     (nil))
(jump_insn 201 200 205 14 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 243)
            (pc))) preproc.cpp:62 596 {*jcc_1}
     (nil)
 -> 243)
;;  succ:       15 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 205 201 567 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(jump_insn 567 205 568 15 (set (pc)
        (label_ref 237)) preproc.cpp:63 636 {jump}
     (nil)
 -> 237)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 568 567 239)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 160 161 162 163 164 165 298 299 300 301 302 303 304 305 306 307 308 309
(code_label 239 568 208 16 14 "" [1 uses])
(note 208 239 209 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 210 16 (set (reg:DF 21 xmm0 [299])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) preproc.cpp:64 128 {*movdf_internal}
     (nil))
(insn 210 209 211 16 (set (reg:DF 22 xmm1 [300])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64])) preproc.cpp:64 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 211 210 579 16 (set (reg:DF 21 xmm0 [298])
        (div:DF (reg:DF 21 xmm0 [298])
            (reg:DF 22 xmm1 [300]))) preproc.cpp:64 783 {*fop_df_1_sse}
     (nil))
(insn 579 211 212 16 (set (reg:DF 0 ax [298])
        (reg:DF 21 xmm0 [298])) preproc.cpp:64 128 {*movdf_internal}
     (nil))
(insn 212 579 213 16 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])
        (reg:DF 0 ax [298])) preproc.cpp:64 128 {*movdf_internal}
     (nil))
(insn 213 212 214 16 (set (reg:SI 0 ax [301])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:65 90 {*movsi_internal}
     (nil))
(insn 214 213 215 16 (set (reg:DI 1 dx [orig:158 D.6767 ] [158])
        (sign_extend:DI (reg:SI 0 ax [301]))) preproc.cpp:65 142 {*extendsidi2_rex64}
     (nil))
(insn 215 214 216 16 (set (reg:DI 0 ax [302])
        (reg:DI 1 dx [orig:158 D.6767 ] [158])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 216 215 217 16 (parallel [
            (set (reg:DI 0 ax [302])
                (ashift:DI (reg:DI 0 ax [302])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 497 {*ashldi3_1}
     (nil))
(insn 217 216 218 16 (parallel [
            (set (reg:DI 0 ax [302])
                (plus:DI (reg:DI 0 ax [302])
                    (reg:DI 1 dx [orig:158 D.6767 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:158 D.6767 ] [158])
            (const_int 9 [0x9]))
        (nil)))
(insn 218 217 219 16 (parallel [
            (set (reg:DI 0 ax [303])
                (ashift:DI (reg:DI 0 ax [302])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 497 {*ashldi3_1}
     (nil))
(insn 219 218 220 16 (set (reg:DI 0 ax [302])
        (reg:DI 0 ax [303])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 220 219 221 16 (set (reg:DI 1 dx [orig:159 D.6767 ] [159])
        (reg:DI 0 ax [302])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 221 220 222 16 (set (reg/f:DI 0 ax [304])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 222 221 223 16 (parallel [
            (set (reg/f:DI 2 cx [orig:160 D.6773 ] [160])
                (plus:DI (reg:DI 1 dx [orig:159 D.6767 ] [159])
                    (reg/f:DI 0 ax [304])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.6767 ] [159]))
        (nil)))
(insn 223 222 224 16 (set (reg:SI 0 ax [305])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:65 90 {*movsi_internal}
     (nil))
(insn 224 223 225 16 (set (reg:DI 1 dx [orig:161 D.6767 ] [161])
        (sign_extend:DI (reg:SI 0 ax [305]))) preproc.cpp:65 142 {*extendsidi2_rex64}
     (nil))
(insn 225 224 226 16 (set (reg:DI 0 ax [306])
        (reg:DI 1 dx [orig:161 D.6767 ] [161])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 226 225 227 16 (parallel [
            (set (reg:DI 0 ax [306])
                (ashift:DI (reg:DI 0 ax [306])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 497 {*ashldi3_1}
     (nil))
(insn 227 226 228 16 (parallel [
            (set (reg:DI 0 ax [306])
                (plus:DI (reg:DI 0 ax [306])
                    (reg:DI 1 dx [orig:161 D.6767 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:161 D.6767 ] [161])
            (const_int 9 [0x9]))
        (nil)))
(insn 228 227 229 16 (parallel [
            (set (reg:DI 0 ax [307])
                (ashift:DI (reg:DI 0 ax [306])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 497 {*ashldi3_1}
     (nil))
(insn 229 228 230 16 (set (reg:DI 0 ax [306])
        (reg:DI 0 ax [307])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 230 229 231 16 (set (reg:DI 1 dx [orig:162 D.6767 ] [162])
        (reg:DI 0 ax [306])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 231 230 232 16 (set (reg/f:DI 0 ax [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:65 89 {*movdi_internal}
     (nil))
(insn 232 231 233 16 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.6773 ] [163])
                (plus:DI (reg/f:DI 0 ax [308])
                    (reg:DI 1 dx [orig:162 D.6767 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:65 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.6767 ] [162]))
        (nil)))
(insn 233 232 234 16 (set (reg:SF 21 xmm0 [orig:164 D.6770 ] [164])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:163 D.6773 ] [163])
                (const_int 4 [0x4])) [0 _100->scale_factor+0 S4 A32])) preproc.cpp:65 129 {*movsf_internal}
     (nil))
(insn 234 233 235 16 (set (reg:SF 22 xmm1 [309])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) preproc.cpp:65 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+1 [0x0.ap+4])
        (nil)))
(insn 235 234 581 16 (set (reg:SF 21 xmm0 [orig:165 D.6770 ] [165])
        (div:SF (reg:SF 21 xmm0 [orig:165 D.6770 ] [165])
            (reg:SF 22 xmm1 [309]))) preproc.cpp:65 782 {*fop_sf_1_sse}
     (nil))
(insn 581 235 236 16 (set (reg:SF 0 ax [orig:165 D.6770 ] [165])
        (reg:SF 21 xmm0 [orig:165 D.6770 ] [165])) preproc.cpp:65 129 {*movsf_internal}
     (nil))
(insn 236 581 237 16 (set (mem/j:SF (plus:DI (reg/f:DI 2 cx [orig:160 D.6773 ] [160])
                (const_int 4 [0x4])) [0 _97->scale_factor+0 S4 A32])
        (reg:SF 0 ax [orig:165 D.6770 ] [165])) preproc.cpp:65 129 {*movsf_internal}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              15 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 310
(code_label 237 236 238 17 13 "" [1 uses])
(note 238 237 240 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 240 238 241 17 (set (reg:DF 21 xmm0 [310])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scaled_point+0 S8 A64])) preproc.cpp:63 128 {*movdf_internal}
     (nil))
(insn 241 240 242 17 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [310])
            (mem/u/c:DF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0  S8 A64]))) preproc.cpp:63 56 {*cmpiudf_sse}
     (nil))
(jump_insn 242 241 243 17 (set (pc)
        (if_then_else (gt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) preproc.cpp:63 596 {*jcc_1}
     (nil)
 -> 239)
;;  succ:       16
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              14
;;              17 (FALLTHRU)
;;              13 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 174 175 176 177 178 179 180 181 182 183 184 311 312 313 314 315 316 317 318 319 320 321
(code_label 243 242 244 18 7 "" [3 uses])
(note 244 243 245 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 245 244 246 18 (set (reg:SI 0 ax [311])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:72 90 {*movsi_internal}
     (nil))
(insn 246 245 247 18 (set (reg:DI 1 dx [orig:174 D.6767 ] [174])
        (sign_extend:DI (reg:SI 0 ax [311]))) preproc.cpp:72 142 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 18 (set (reg:DI 0 ax [312])
        (reg:DI 1 dx [orig:174 D.6767 ] [174])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 248 247 249 18 (parallel [
            (set (reg:DI 0 ax [312])
                (ashift:DI (reg:DI 0 ax [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 497 {*ashldi3_1}
     (nil))
(insn 249 248 250 18 (parallel [
            (set (reg:DI 0 ax [312])
                (plus:DI (reg:DI 0 ax [312])
                    (reg:DI 1 dx [orig:174 D.6767 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:174 D.6767 ] [174])
            (const_int 9 [0x9]))
        (nil)))
(insn 250 249 251 18 (parallel [
            (set (reg:DI 0 ax [313])
                (ashift:DI (reg:DI 0 ax [312])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 497 {*ashldi3_1}
     (nil))
(insn 251 250 252 18 (set (reg:DI 0 ax [312])
        (reg:DI 0 ax [313])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 252 251 253 18 (set (reg:DI 1 dx [orig:175 D.6767 ] [175])
        (reg:DI 0 ax [312])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 253 252 254 18 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 254 253 255 18 (parallel [
            (set (reg/f:DI 1 dx [orig:176 D.6773 ] [176])
                (plus:DI (reg:DI 1 dx [orig:175 D.6767 ] [175])
                    (reg/f:DI 0 ax [314])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.6767 ] [175]))
        (nil)))
(insn 255 254 256 18 (set (reg:SI 0 ax [315])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:72 90 {*movsi_internal}
     (nil))
(insn 256 255 257 18 (set (reg:DI 0 ax [orig:177 D.6767 ] [177])
        (sign_extend:DI (reg:SI 0 ax [315]))) preproc.cpp:72 142 {*extendsidi2_rex64}
     (nil))
(insn 257 256 258 18 (parallel [
            (set (reg:DI 2 cx [orig:178 D.6767 ] [178])
                (ashift:DI (reg:DI 0 ax [orig:177 D.6767 ] [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 497 {*ashldi3_1}
     (nil))
(insn 258 257 259 18 (set (reg/f:DI 0 ax [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 259 258 260 18 (parallel [
            (set (reg/f:DI 0 ax [orig:179 D.6768 ] [179])
                (plus:DI (reg/f:DI 0 ax [316])
                    (reg:DI 2 cx [orig:178 D.6767 ] [178])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:72 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:178 D.6767 ] [178]))
        (nil)))
(insn 260 259 261 18 (set (reg/f:DI 0 ax [orig:180 D.6769 ] [180])
        (mem/f:DI (reg/f:DI 0 ax [orig:179 D.6768 ] [179]) [0 *_117+0 S8 A64])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 261 260 263 18 (set (reg:DI 2 cx [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 263 261 264 18 (set (reg:DI 4 si)
        (reg:DI 2 cx [317])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(insn 264 263 265 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:180 D.6769 ] [180])) preproc.cpp:72 89 {*movdi_internal}
     (nil))
(call_insn 265 264 266 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5scalePfP12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b57195e1b00 scale>) [0 scale S1 A8])
            (const_int 0 [0]))) preproc.cpp:72 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 266 265 267 18 (set (reg:SI 0 ax [318])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:76 90 {*movsi_internal}
     (nil))
(insn 267 266 268 18 (set (reg:DI 1 dx [orig:181 D.6767 ] [181])
        (sign_extend:DI (reg:SI 0 ax [318]))) preproc.cpp:76 142 {*extendsidi2_rex64}
     (nil))
(insn 268 267 269 18 (set (reg:DI 0 ax [319])
        (reg:DI 1 dx [orig:181 D.6767 ] [181])) preproc.cpp:76 89 {*movdi_internal}
     (nil))
(insn 269 268 270 18 (parallel [
            (set (reg:DI 0 ax [319])
                (ashift:DI (reg:DI 0 ax [319])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:76 497 {*ashldi3_1}
     (nil))
(insn 270 269 271 18 (parallel [
            (set (reg:DI 0 ax [319])
                (plus:DI (reg:DI 0 ax [319])
                    (reg:DI 1 dx [orig:181 D.6767 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:76 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:181 D.6767 ] [181])
            (const_int 9 [0x9]))
        (nil)))
(insn 271 270 272 18 (parallel [
            (set (reg:DI 0 ax [320])
                (ashift:DI (reg:DI 0 ax [319])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:76 497 {*ashldi3_1}
     (nil))
(insn 272 271 273 18 (set (reg:DI 0 ax [319])
        (reg:DI 0 ax [320])) preproc.cpp:76 89 {*movdi_internal}
     (nil))
(insn 273 272 274 18 (set (reg:DI 1 dx [orig:182 D.6767 ] [182])
        (reg:DI 0 ax [319])) preproc.cpp:76 89 {*movdi_internal}
     (nil))
(insn 274 273 275 18 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:76 89 {*movdi_internal}
     (nil))
(insn 275 274 276 18 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.6773 ] [183])
                (plus:DI (reg/f:DI 0 ax [321])
                    (reg:DI 1 dx [orig:182 D.6767 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:76 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.6767 ] [182]))
        (nil)))
(insn 276 275 277 18 (set (reg:SI 0 ax [orig:184 D.6766 ] [184])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:183 D.6773 ] [183])
                (const_int 16 [0x10])) [0 _122->bc+0 S4 A32])) preproc.cpp:76 90 {*movsi_internal}
     (nil))
(insn 277 276 278 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:184 D.6766 ] [184])
            (const_int 0 [0]))) preproc.cpp:76 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 278 277 279 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) preproc.cpp:76 596 {*jcc_1}
     (nil)
 -> 294)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 185 186 187 188 189 190 191 322 323 324 325
(note 279 278 280 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 280 279 281 19 (set (reg:SI 0 ax [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:77 90 {*movsi_internal}
     (nil))
(insn 281 280 282 19 (set (reg:DI 0 ax [orig:185 D.6767 ] [185])
        (sign_extend:DI (reg:SI 0 ax [322]))) preproc.cpp:77 142 {*extendsidi2_rex64}
     (nil))
(insn 282 281 283 19 (parallel [
            (set (reg:DI 1 dx [orig:186 D.6767 ] [186])
                (mult:DI (reg:DI 0 ax [orig:185 D.6767 ] [185])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:77 307 {*muldi3_1}
     (nil))
(insn 283 282 284 19 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(insn 284 283 285 19 (parallel [
            (set (reg/f:DI 1 dx [orig:187 D.6774 ] [187])
                (plus:DI (reg:DI 1 dx [orig:186 D.6767 ] [186])
                    (reg/f:DI 0 ax [323])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:77 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:186 D.6767 ] [186]))
        (nil)))
(insn 285 284 286 19 (set (reg:SI 0 ax [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:77 90 {*movsi_internal}
     (nil))
(insn 286 285 287 19 (set (reg:DI 0 ax [orig:188 D.6767 ] [188])
        (sign_extend:DI (reg:SI 0 ax [324]))) preproc.cpp:77 142 {*extendsidi2_rex64}
     (nil))
(insn 287 286 288 19 (parallel [
            (set (reg:DI 2 cx [orig:189 D.6767 ] [189])
                (ashift:DI (reg:DI 0 ax [orig:188 D.6767 ] [188])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:77 497 {*ashldi3_1}
     (nil))
(insn 288 287 289 19 (set (reg/f:DI 0 ax [325])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(insn 289 288 290 19 (parallel [
            (set (reg/f:DI 0 ax [orig:190 D.6768 ] [190])
                (plus:DI (reg/f:DI 0 ax [325])
                    (reg:DI 2 cx [orig:189 D.6767 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:77 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:189 D.6767 ] [189]))
        (nil)))
(insn 290 289 291 19 (set (reg/f:DI 0 ax [orig:191 D.6769 ] [191])
        (mem/f:DI (reg/f:DI 0 ax [orig:190 D.6768 ] [190]) [0 *_129+0 S8 A64])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(insn 291 290 292 19 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:187 D.6774 ] [187])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(insn 292 291 293 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:191 D.6769 ] [191])) preproc.cpp:77 89 {*movdi_internal}
     (nil))
(call_insn 293 292 294 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16baseline_correctPfP12Procpar_info") [flags 0x3]  <function_decl 0x2b5719607200 baseline_correct>) [0 baseline_correct S1 A8])
            (const_int 0 [0]))) preproc.cpp:77 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;;              19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 192 193 194 195 326 327 328 329
(code_label 294 293 295 20 15 "" [1 uses])
(note 295 294 296 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 296 295 297 20 (set (reg:SI 0 ax [326])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:82 90 {*movsi_internal}
     (nil))
(insn 297 296 298 20 (set (reg:DI 1 dx [orig:192 D.6767 ] [192])
        (sign_extend:DI (reg:SI 0 ax [326]))) preproc.cpp:82 142 {*extendsidi2_rex64}
     (nil))
(insn 298 297 299 20 (set (reg:DI 0 ax [327])
        (reg:DI 1 dx [orig:192 D.6767 ] [192])) preproc.cpp:82 89 {*movdi_internal}
     (nil))
(insn 299 298 300 20 (parallel [
            (set (reg:DI 0 ax [327])
                (ashift:DI (reg:DI 0 ax [327])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:82 497 {*ashldi3_1}
     (nil))
(insn 300 299 301 20 (parallel [
            (set (reg:DI 0 ax [327])
                (plus:DI (reg:DI 0 ax [327])
                    (reg:DI 1 dx [orig:192 D.6767 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:82 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:192 D.6767 ] [192])
            (const_int 9 [0x9]))
        (nil)))
(insn 301 300 302 20 (parallel [
            (set (reg:DI 0 ax [328])
                (ashift:DI (reg:DI 0 ax [327])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:82 497 {*ashldi3_1}
     (nil))
(insn 302 301 303 20 (set (reg:DI 0 ax [327])
        (reg:DI 0 ax [328])) preproc.cpp:82 89 {*movdi_internal}
     (nil))
(insn 303 302 304 20 (set (reg:DI 1 dx [orig:193 D.6767 ] [193])
        (reg:DI 0 ax [327])) preproc.cpp:82 89 {*movdi_internal}
     (nil))
(insn 304 303 305 20 (set (reg/f:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:82 89 {*movdi_internal}
     (nil))
(insn 305 304 306 20 (parallel [
            (set (reg/f:DI 0 ax [orig:194 D.6773 ] [194])
                (plus:DI (reg/f:DI 0 ax [329])
                    (reg:DI 1 dx [orig:193 D.6767 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:82 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:193 D.6767 ] [193]))
        (nil)))
(insn 306 305 307 20 (set (reg:SI 0 ax [orig:195 D.6766 ] [195])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:194 D.6773 ] [194])
                (const_int 32 [0x20])) [0 _133->max_normalize+0 S4 A32])) preproc.cpp:82 90 {*movsi_internal}
     (nil))
(insn 307 306 308 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:195 D.6766 ] [195])
            (const_int 0 [0]))) preproc.cpp:82 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 308 307 309 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 331)
            (pc))) preproc.cpp:82 596 {*jcc_1}
     (nil)
 -> 331)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 196 197 198 199 200 201 202 203 204 205 206 330 331 332 333 334 335
(note 309 308 310 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 21 (set (reg:SI 0 ax [330])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:83 90 {*movsi_internal}
     (nil))
(insn 311 310 312 21 (set (reg:DI 0 ax [orig:196 D.6767 ] [196])
        (sign_extend:DI (reg:SI 0 ax [330]))) preproc.cpp:83 142 {*extendsidi2_rex64}
     (nil))
(insn 312 311 313 21 (parallel [
            (set (reg:DI 1 dx [orig:197 D.6767 ] [197])
                (mult:DI (reg:DI 0 ax [orig:196 D.6767 ] [196])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 307 {*muldi3_1}
     (nil))
(insn 313 312 314 21 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 314 313 315 21 (parallel [
            (set (reg/f:DI 1 dx [orig:198 D.6774 ] [198])
                (plus:DI (reg:DI 1 dx [orig:197 D.6767 ] [197])
                    (reg/f:DI 0 ax [331])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:197 D.6767 ] [197]))
        (nil)))
(insn 315 314 316 21 (set (reg:SI 0 ax [332])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:83 90 {*movsi_internal}
     (nil))
(insn 316 315 317 21 (set (reg:DI 0 ax [orig:199 D.6767 ] [199])
        (sign_extend:DI (reg:SI 0 ax [332]))) preproc.cpp:83 142 {*extendsidi2_rex64}
     (nil))
(insn 317 316 318 21 (parallel [
            (set (reg:DI 2 cx [orig:200 D.6767 ] [200])
                (ashift:DI (reg:DI 0 ax [orig:199 D.6767 ] [199])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 497 {*ashldi3_1}
     (nil))
(insn 318 317 319 21 (set (reg/f:DI 0 ax [333])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 319 318 320 21 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.6768 ] [201])
                (plus:DI (reg/f:DI 0 ax [333])
                    (reg:DI 2 cx [orig:200 D.6767 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (reg:DI 2 cx [orig:200 D.6767 ] [200]))
        (nil)))
(insn 320 319 321 21 (set (reg/f:DI 2 cx [orig:202 D.6769 ] [202])
        (mem/f:DI (reg/f:DI 0 ax [orig:201 D.6768 ] [201]) [0 *_141+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 321 320 322 21 (set (reg:SI 0 ax [334])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:83 90 {*movsi_internal}
     (nil))
(insn 322 321 323 21 (set (reg:DI 0 ax [orig:203 D.6767 ] [203])
        (sign_extend:DI (reg:SI 0 ax [334]))) preproc.cpp:83 142 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 21 (parallel [
            (set (reg:DI 4 si [orig:204 D.6767 ] [204])
                (ashift:DI (reg:DI 0 ax [orig:203 D.6767 ] [203])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 497 {*ashldi3_1}
     (nil))
(insn 324 323 325 21 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 325 324 326 21 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.6768 ] [205])
                (plus:DI (reg/f:DI 0 ax [335])
                    (reg:DI 4 si [orig:204 D.6767 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:83 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 4 si [orig:204 D.6767 ] [204]))
        (nil)))
(insn 326 325 328 21 (set (reg/f:DI 0 ax [orig:206 D.6769 ] [206])
        (mem/f:DI (reg/f:DI 0 ax [orig:205 D.6768 ] [205]) [0 *_145+0 S8 A64])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 328 326 329 21 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:202 D.6769 ] [202])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(insn 329 328 330 21 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:206 D.6769 ] [206])) preproc.cpp:83 89 {*movdi_internal}
     (nil))
(call_insn 330 329 331 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9normalizePfS_P12Procpar_info") [flags 0x3]  <function_decl 0x2b57195e1c00 normalize>) [0 normalize S1 A8])
            (const_int 0 [0]))) preproc.cpp:83 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;;              21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 331 330 332 22 16 "" [1 uses])
(note 332 331 333 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 333 332 334 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:33 220 {*addsi_1}
     (nil))
;;  succ:       23 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 336
(code_label 334 333 335 23 2 "" [1 uses])
(note 335 334 336 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 336 335 337 23 (set (reg/f:DI 0 ax [336])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) preproc.cpp:33 89 {*movdi_internal}
     (nil))
(insn 337 336 339 23 (set (reg:SI 0 ax [orig:83 D.6766 ] [83])
        (mem:SI (reg/f:DI 0 ax [336]) [0 *fid_10(D)+0 S4 A32])) preproc.cpp:33 90 {*movsi_internal}
     (nil))
(insn 339 337 340 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.6766 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) preproc.cpp:33 7 {*cmpsi_1}
     (nil))
(jump_insn 340 339 341 23 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 338)
            (pc))) preproc.cpp:33 596 {*jcc_1}
     (nil)
 -> 338)
;;  succ:       3
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207 337
(note 341 340 342 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 342 341 343 24 (set (reg/f:DI 0 ax [337])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:90 89 {*movdi_internal}
     (nil))
(insn 343 342 344 24 (set (reg:SI 0 ax [orig:207 D.6766 ] [207])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [337])
                (const_int 12 [0xc])) [0 preprocess_91(D)->pre_ecc+0 S4 A32])) preproc.cpp:90 90 {*movsi_internal}
     (nil))
(insn 344 343 345 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:207 D.6766 ] [207])
            (const_int 0 [0]))) preproc.cpp:90 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 345 344 346 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 359)
            (pc))) preproc.cpp:90 596 {*jcc_1}
     (nil)
 -> 359)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 208 209 210 338 339 340 341
(note 346 345 347 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 348 25 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 348 347 349 25 (parallel [
            (set (reg/f:DI 0 ax [orig:208 D.6768 ] [208])
                (plus:DI (reg/f:DI 0 ax [338])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:92 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 349 348 350 25 (set (reg/f:DI 4 si [orig:209 D.6769 ] [209])
        (mem/f:DI (reg/f:DI 0 ax [orig:208 D.6768 ] [208]) [0 *_149+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 350 349 351 25 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 351 350 352 25 (set (reg/f:DI 0 ax [orig:210 D.6769 ] [210])
        (mem/f:DI (reg/f:DI 0 ax [339]) [0 *out_data_14(D)+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 352 351 353 25 (set (reg:DI 2 cx [340])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 353 352 357 25 (set (reg:DI 1 dx [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(insn 357 353 358 25 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:210 D.6769 ] [210])) preproc.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn 358 357 359 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z14ecc_correctionPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b57195e1d00 ecc_correction>) [0 ecc_correction S1 A8])
            (const_int 0 [0]))) preproc.cpp:92 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 211 342
(code_label 359 358 360 26 18 "" [1 uses])
(note 360 359 361 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 361 360 362 26 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:96 89 {*movdi_internal}
     (nil))
(insn 362 361 363 26 (set (reg:SI 0 ax [orig:211 D.6766 ] [211])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [342])
                (const_int 36 [0x24])) [0 preprocess_91(D)->pre_quality+0 S4 A32])) preproc.cpp:96 90 {*movsi_internal}
     (nil))
(insn 363 362 364 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:211 D.6766 ] [211])
            (const_int 0 [0]))) preproc.cpp:96 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 364 363 365 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 382)
            (pc))) preproc.cpp:96 596 {*jcc_1}
     (nil)
 -> 382)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 212 213 214 215 216 343 344 345 346 347
(note 365 364 366 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 366 365 367 27 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 367 366 368 27 (parallel [
            (set (reg/f:DI 0 ax [orig:212 D.6768 ] [212])
                (plus:DI (reg/f:DI 0 ax [343])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 368 367 369 27 (set (reg/f:DI 1 dx [orig:213 D.6769 ] [213])
        (mem/f:DI (reg/f:DI 0 ax [orig:212 D.6768 ] [212]) [0 *_153+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 369 368 370 27 (set (reg/f:DI 0 ax [344])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 370 369 371 27 (parallel [
            (set (reg/f:DI 0 ax [orig:214 D.6768 ] [214])
                (plus:DI (reg/f:DI 0 ax [344])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:98 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 371 370 372 27 (set (reg/f:DI 4 si [orig:215 D.6769 ] [215])
        (mem/f:DI (reg/f:DI 0 ax [orig:214 D.6768 ] [214]) [0 *_155+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 372 371 373 27 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 373 372 374 27 (set (reg/f:DI 0 ax [orig:216 D.6769 ] [216])
        (mem/f:DI (reg/f:DI 0 ax [345]) [0 *out_data_14(D)+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 374 373 375 27 (set (reg:DI 5 di [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 375 374 376 27 (set (reg:DI 2 cx [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 376 375 380 27 (set (reg:DI 37 r8)
        (reg:DI 5 di [346])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(insn 380 376 381 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:216 D.6769 ] [216])) preproc.cpp:98 89 {*movdi_internal}
     (nil))
(call_insn 381 380 382 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z7qualityPfS_S_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b57195e1e00 quality>) [0 quality S1 A8])
            (const_int 0 [0]))) preproc.cpp:98 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;;              27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 217 348
(code_label 382 381 383 28 19 "" [1 uses])
(note 383 382 384 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 384 383 385 28 (set (reg/f:DI 0 ax [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:102 89 {*movdi_internal}
     (nil))
(insn 385 384 386 28 (set (reg:SI 0 ax [orig:217 D.6766 ] [217])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [348])
                (const_int 40 [0x28])) [0 preprocess_91(D)->pre_quecc+0 S4 A32])) preproc.cpp:102 90 {*movsi_internal}
     (nil))
(insn 386 385 387 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:217 D.6766 ] [217])
            (const_int 0 [0]))) preproc.cpp:102 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 387 386 388 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 405)
            (pc))) preproc.cpp:102 596 {*jcc_1}
     (nil)
 -> 405)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 218 219 220 221 222 349 350 351 352 353
(note 388 387 389 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 389 388 390 29 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 390 389 391 29 (parallel [
            (set (reg/f:DI 0 ax [orig:218 D.6768 ] [218])
                (plus:DI (reg/f:DI 0 ax [349])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:104 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 scratch_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 391 390 392 29 (set (reg/f:DI 1 dx [orig:219 D.6769 ] [219])
        (mem/f:DI (reg/f:DI 0 ax [orig:218 D.6768 ] [218]) [0 *_159+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 392 391 393 29 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 393 392 394 29 (parallel [
            (set (reg/f:DI 0 ax [orig:220 D.6768 ] [220])
                (plus:DI (reg/f:DI 0 ax [350])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:104 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 394 393 395 29 (set (reg/f:DI 4 si [orig:221 D.6769 ] [221])
        (mem/f:DI (reg/f:DI 0 ax [orig:220 D.6768 ] [220]) [0 *_161+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 395 394 396 29 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 396 395 397 29 (set (reg/f:DI 0 ax [orig:222 D.6769 ] [222])
        (mem/f:DI (reg/f:DI 0 ax [351]) [0 *out_data_14(D)+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 397 396 398 29 (set (reg:DI 5 di [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 398 397 399 29 (set (reg:DI 2 cx [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 399 398 403 29 (set (reg:DI 37 r8)
        (reg:DI 5 di [352])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(insn 403 399 404 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:222 D.6769 ] [222])) preproc.cpp:104 89 {*movdi_internal}
     (nil))
(call_insn 404 403 405 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z5queccPfS_S_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b57195e1f00 quecc>) [0 quecc S1 A8])
            (const_int 0 [0]))) preproc.cpp:104 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28
;;              29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 405 404 406 30 20 "" [1 uses])
(note 406 405 407 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 407 406 569 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:110 90 {*movsi_internal}
     (nil))
(jump_insn 569 407 570 30 (set (pc)
        (label_ref 442)) preproc.cpp:110 636 {jump}
     (nil)
 -> 442)
;;  succ:       34 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 570 569 446)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 225 226 227 354 355 356 357
(code_label 446 570 410 31 23 "" [1 uses])
(note 410 446 411 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 411 410 412 31 (set (reg:SI 0 ax [354])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 412 411 413 31 (set (reg:DI 1 dx [orig:224 D.6767 ] [224])
        (sign_extend:DI (reg:SI 0 ax [354]))) preproc.cpp:112 142 {*extendsidi2_rex64}
     (nil))
(insn 413 412 414 31 (set (reg:DI 0 ax [355])
        (reg:DI 1 dx [orig:224 D.6767 ] [224])) preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 414 413 415 31 (parallel [
            (set (reg:DI 0 ax [355])
                (ashift:DI (reg:DI 0 ax [355])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:112 497 {*ashldi3_1}
     (nil))
(insn 415 414 416 31 (parallel [
            (set (reg:DI 0 ax [355])
                (plus:DI (reg:DI 0 ax [355])
                    (reg:DI 1 dx [orig:224 D.6767 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:112 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:224 D.6767 ] [224])
            (const_int 9 [0x9]))
        (nil)))
(insn 416 415 417 31 (parallel [
            (set (reg:DI 0 ax [356])
                (ashift:DI (reg:DI 0 ax [355])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:112 497 {*ashldi3_1}
     (nil))
(insn 417 416 418 31 (set (reg:DI 0 ax [355])
        (reg:DI 0 ax [356])) preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 418 417 419 31 (set (reg:DI 1 dx [orig:225 D.6767 ] [225])
        (reg:DI 0 ax [355])) preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 419 418 420 31 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:112 89 {*movdi_internal}
     (nil))
(insn 420 419 421 31 (parallel [
            (set (reg/f:DI 0 ax [orig:226 D.6773 ] [226])
                (plus:DI (reg/f:DI 0 ax [357])
                    (reg:DI 1 dx [orig:225 D.6767 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:112 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:225 D.6767 ] [225]))
        (nil)))
(insn 421 420 422 31 (set (reg:SI 0 ax [orig:227 D.6766 ] [227])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:226 D.6773 ] [226])
                (const_int 68 [0x44])) [0 _168->tilt+0 S4 A32])) preproc.cpp:112 90 {*movsi_internal}
     (nil))
(insn 422 421 423 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:227 D.6766 ] [227])
            (const_int 0 [0]))) preproc.cpp:112 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 423 422 424 31 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 439)
            (pc))) preproc.cpp:112 596 {*jcc_1}
     (nil)
 -> 439)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 228 229 230 231 232 233 234 358 359 360 361
(note 424 423 425 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 425 424 426 32 (set (reg:SI 0 ax [358])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:114 90 {*movsi_internal}
     (nil))
(insn 426 425 427 32 (set (reg:DI 0 ax [orig:228 D.6767 ] [228])
        (sign_extend:DI (reg:SI 0 ax [358]))) preproc.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 427 426 428 32 (parallel [
            (set (reg:DI 1 dx [orig:229 D.6767 ] [229])
                (mult:DI (reg:DI 0 ax [orig:228 D.6767 ] [228])
                    (const_int 376 [0x178])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:114 307 {*muldi3_1}
     (nil))
(insn 428 427 429 32 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(insn 429 428 430 32 (parallel [
            (set (reg/f:DI 1 dx [orig:230 D.6774 ] [230])
                (plus:DI (reg:DI 1 dx [orig:229 D.6767 ] [229])
                    (reg/f:DI 0 ax [359])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:114 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:229 D.6767 ] [229]))
        (nil)))
(insn 430 429 431 32 (set (reg:SI 0 ax [360])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:114 90 {*movsi_internal}
     (nil))
(insn 431 430 432 32 (set (reg:DI 0 ax [orig:231 D.6767 ] [231])
        (sign_extend:DI (reg:SI 0 ax [360]))) preproc.cpp:114 142 {*extendsidi2_rex64}
     (nil))
(insn 432 431 433 32 (parallel [
            (set (reg:DI 2 cx [orig:232 D.6767 ] [232])
                (ashift:DI (reg:DI 0 ax [orig:231 D.6767 ] [231])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:114 497 {*ashldi3_1}
     (nil))
(insn 433 432 434 32 (set (reg/f:DI 0 ax [361])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(insn 434 433 435 32 (parallel [
            (set (reg/f:DI 0 ax [orig:233 D.6768 ] [233])
                (plus:DI (reg/f:DI 0 ax [361])
                    (reg:DI 2 cx [orig:232 D.6767 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:114 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (reg:DI 2 cx [orig:232 D.6767 ] [232]))
        (nil)))
(insn 435 434 436 32 (set (reg/f:DI 0 ax [orig:234 D.6769 ] [234])
        (mem/f:DI (reg/f:DI 0 ax [orig:233 D.6768 ] [233]) [0 *_175+0 S8 A64])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(insn 436 435 437 32 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:230 D.6774 ] [230])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(insn 437 436 438 32 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:234 D.6769 ] [234])) preproc.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn 438 437 439 32 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z16baseline_correctPfP12Procpar_info") [flags 0x3]  <function_decl 0x2b5719607200 baseline_correct>) [0 baseline_correct S1 A8])
            (const_int 0 [0]))) preproc.cpp:114 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 439 438 440 33 22 "" [1 uses])
(note 440 439 441 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 441 440 442 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:110 220 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              30 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 223 362
(code_label 442 441 443 34 21 "" [1 uses])
(note 443 442 444 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 444 443 445 34 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) preproc.cpp:110 89 {*movdi_internal}
     (nil))
(insn 445 444 447 34 (set (reg:SI 0 ax [orig:223 D.6766 ] [223])
        (mem:SI (reg/f:DI 0 ax [362]) [0 *fid_10(D)+0 S4 A32])) preproc.cpp:110 90 {*movsi_internal}
     (nil))
(insn 447 445 448 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:223 D.6766 ] [223])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) preproc.cpp:110 7 {*cmpsi_1}
     (nil))
(jump_insn 448 447 449 34 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 446)
            (pc))) preproc.cpp:110 596 {*jcc_1}
     (nil)
 -> 446)
;;  succ:       31
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 235 363 364
(note 449 448 450 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 450 449 451 35 (set (reg/f:DI 0 ax [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 451 450 452 35 (set (reg:SF 21 xmm0 [orig:235 D.6770 ] [235])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [363])
                (const_int 28 [0x1c])) [0 preprocess_91(D)->comp_filter+0 S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (nil))
(insn 452 451 453 35 (set (reg:SF 22 xmm1 [364])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 453 452 454 35 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:235 D.6770 ] [235])
            (reg:SF 22 xmm1 [364]))) preproc.cpp:121 55 {*cmpiusf_sse}
     (nil))
(jump_insn 454 453 552 35 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 479)
            (pc))) preproc.cpp:121 596 {*jcc_1}
     (nil)
 -> 479)
;;  succ:       41
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 235

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 235
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 235
;; lr  def 	 17 [flags] 365
(note 552 454 455 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 455 552 456 36 (set (reg:SF 22 xmm1 [365])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 456 455 457 36 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:235 D.6770 ] [235])
            (reg:SF 22 xmm1 [365]))) preproc.cpp:121 55 {*cmpiusf_sse}
     (nil))
(jump_insn 457 456 458 36 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 479)
            (pc))) preproc.cpp:121 596 {*jcc_1}
     (nil)
 -> 479)
;;  succ:       41
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236 237 366 367
(note 458 457 459 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 459 458 460 37 (set (reg/f:DI 0 ax [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:121 89 {*movdi_internal}
     (nil))
(insn 460 459 461 37 (parallel [
            (set (reg/f:DI 0 ax [orig:236 D.6773 ] [236])
                (plus:DI (reg/f:DI 0 ax [366])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:121 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 461 460 462 37 (set (reg:SF 21 xmm0 [orig:237 D.6770 ] [237])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:236 D.6773 ] [236])
                (const_int 28 [0x1c])) [0 _179->comp_filter+0 S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (nil))
(insn 462 461 463 37 (set (reg:SF 22 xmm1 [367])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 463 462 464 37 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:237 D.6770 ] [237])
            (reg:SF 22 xmm1 [367]))) preproc.cpp:121 55 {*cmpiusf_sse}
     (nil))
(jump_insn 464 463 553 37 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 479)
            (pc))) preproc.cpp:121 596 {*jcc_1}
     (nil)
 -> 479)
;;  succ:       41
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 237

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 237
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 237
;; lr  def 	 17 [flags] 368
(note 553 464 465 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 465 553 466 38 (set (reg:SF 22 xmm1 [368])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:121 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 466 465 467 38 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:237 D.6770 ] [237])
            (reg:SF 22 xmm1 [368]))) preproc.cpp:121 55 {*cmpiusf_sse}
     (nil))
(jump_insn 467 466 468 38 (set (pc)
        (if_then_else (ltgt (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref 479)
            (pc))) preproc.cpp:121 596 {*jcc_1}
     (nil)
 -> 479)
;;  succ:       41
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 369
(note 468 467 469 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 469 468 470 39 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:122 89 {*movdi_internal}
     (nil))
(insn 470 469 471 39 (set (reg:SI 0 ax [orig:238 D.6766 ] [238])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [369])
                (const_int 52 [0x34])) [0 preprocess_91(D)->pre_quecc_if+0 S4 A32])) preproc.cpp:122 90 {*movsi_internal}
     (nil))
(insn 471 470 472 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:238 D.6766 ] [238])
            (const_int 1 [0x1]))) preproc.cpp:121 7 {*cmpsi_1}
     (nil))
(jump_insn 472 471 473 39 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 479)
            (pc))) preproc.cpp:121 596 {*jcc_1}
     (nil)
 -> 479)
;;  succ:       41
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 240 370
(note 473 472 474 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 474 473 475 40 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:122 89 {*movdi_internal}
     (nil))
(insn 475 474 476 40 (parallel [
            (set (reg/f:DI 0 ax [orig:239 D.6773 ] [239])
                (plus:DI (reg/f:DI 0 ax [370])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:122 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 476 475 477 40 (set (reg:SI 0 ax [orig:240 D.6766 ] [240])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:239 D.6773 ] [239])
                (const_int 52 [0x34])) [0 _182->pre_quecc_if+0 S4 A32])) preproc.cpp:122 90 {*movsi_internal}
     (nil))
(insn 477 476 478 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:240 D.6766 ] [240])
            (const_int 1 [0x1]))) preproc.cpp:122 7 {*cmpsi_1}
     (nil))
(jump_insn 478 477 479 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 493)
            (pc))) preproc.cpp:122 596 {*jcc_1}
     (nil)
 -> 493)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;;              38
;;              39
;;              40 (FALLTHRU)
;;              35
;;              37
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 241 242 243 371 372 373 374
(code_label 479 478 480 41 24 "" [5 uses])
(note 480 479 481 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 481 480 482 41 (set (reg/f:DI 0 ax [371])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 482 481 483 41 (parallel [
            (set (reg/f:DI 0 ax [orig:241 D.6768 ] [241])
                (plus:DI (reg/f:DI 0 ax [371])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:124 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 483 482 484 41 (set (reg/f:DI 4 si [orig:242 D.6769 ] [242])
        (mem/f:DI (reg/f:DI 0 ax [orig:241 D.6768 ] [241]) [0 *_184+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 484 483 485 41 (set (reg/f:DI 0 ax [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 485 484 486 41 (set (reg/f:DI 0 ax [orig:243 D.6769 ] [243])
        (mem/f:DI (reg/f:DI 0 ax [372]) [0 *out_data_14(D)+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 486 485 487 41 (set (reg:DI 2 cx [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 487 486 491 41 (set (reg:DI 1 dx [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(insn 491 487 492 41 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:243 D.6769 ] [243])) preproc.cpp:124 89 {*movdi_internal}
     (nil))
(call_insn 492 491 493 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z6filterPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b5719607100 filter>) [0 filter S1 A8])
            (const_int 0 [0]))) preproc.cpp:124 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;;              41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 493 492 494 42 25 "" [1 uses])
(note 494 493 495 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 571 42 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:129 90 {*movsi_internal}
     (nil))
(jump_insn 571 495 572 42 (set (pc)
        (label_ref 528)) preproc.cpp:129 636 {jump}
     (nil)
 -> 528)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 572 571 532)
;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 246 247 248 375 376 377 378
(code_label 532 572 498 43 28 "" [1 uses])
(note 498 532 499 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 499 498 500 43 (set (reg:SI 0 ax [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])) preproc.cpp:130 90 {*movsi_internal}
     (nil))
(insn 500 499 501 43 (set (reg:DI 1 dx [orig:245 D.6767 ] [245])
        (sign_extend:DI (reg:SI 0 ax [375]))) preproc.cpp:130 142 {*extendsidi2_rex64}
     (nil))
(insn 501 500 502 43 (set (reg:DI 0 ax [376])
        (reg:DI 1 dx [orig:245 D.6767 ] [245])) preproc.cpp:130 89 {*movdi_internal}
     (nil))
(insn 502 501 503 43 (parallel [
            (set (reg:DI 0 ax [376])
                (ashift:DI (reg:DI 0 ax [376])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:130 497 {*ashldi3_1}
     (nil))
(insn 503 502 504 43 (parallel [
            (set (reg:DI 0 ax [376])
                (plus:DI (reg:DI 0 ax [376])
                    (reg:DI 1 dx [orig:245 D.6767 ] [245])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:130 221 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:245 D.6767 ] [245])
            (const_int 9 [0x9]))
        (nil)))
(insn 504 503 505 43 (parallel [
            (set (reg:DI 0 ax [377])
                (ashift:DI (reg:DI 0 ax [376])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:130 497 {*ashldi3_1}
     (nil))
(insn 505 504 506 43 (set (reg:DI 0 ax [376])
        (reg:DI 0 ax [377])) preproc.cpp:130 89 {*movdi_internal}
     (nil))
(insn 506 505 507 43 (set (reg:DI 1 dx [orig:246 D.6767 ] [246])
        (reg:DI 0 ax [376])) preproc.cpp:130 89 {*movdi_internal}
     (nil))
(insn 507 506 508 43 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:130 89 {*movdi_internal}
     (nil))
(insn 508 507 509 43 (parallel [
            (set (reg/f:DI 0 ax [orig:247 D.6773 ] [247])
                (plus:DI (reg/f:DI 0 ax [378])
                    (reg:DI 1 dx [orig:246 D.6767 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:130 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:246 D.6767 ] [246]))
        (nil)))
(insn 509 508 510 43 (set (reg:SI 0 ax [orig:248 D.6766 ] [248])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:247 D.6773 ] [247])
                (const_int 24 [0x18])) [0 _191->data_zero_fill+0 S4 A32])) preproc.cpp:130 90 {*movsi_internal}
     (nil))
(insn 510 509 511 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:248 D.6766 ] [248])
            (const_int 0 [0]))) preproc.cpp:130 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 511 510 512 43 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 525)
            (pc))) preproc.cpp:130 596 {*jcc_1}
     (nil)
 -> 525)
;;  succ:       44 (FALLTHRU)
;;              45
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 249 250 251 379 380 381 382
(note 512 511 513 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 513 512 514 44 (set (reg/f:DI 0 ax [379])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 514 513 515 44 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.6768 ] [249])
                (plus:DI (reg/f:DI 0 ax [379])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:131 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])
            (const_int 8 [0x8]))
        (nil)))
(insn 515 514 516 44 (set (reg/f:DI 4 si [orig:250 D.6769 ] [250])
        (mem/f:DI (reg/f:DI 0 ax [orig:249 D.6768 ] [249]) [0 *_193+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 516 515 517 44 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 517 516 518 44 (set (reg/f:DI 0 ax [orig:251 D.6769 ] [251])
        (mem/f:DI (reg/f:DI 0 ax [380]) [0 *out_data_14(D)+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 518 517 519 44 (set (reg:DI 2 cx [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 519 518 523 44 (set (reg:DI 1 dx [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(insn 523 519 524 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:251 D.6769 ] [251])) preproc.cpp:131 89 {*movdi_internal}
     (nil))
(call_insn 524 523 525 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z9zero_fillPfS_P12Procpar_infoP10Preprocess") [flags 0x3]  <function_decl 0x2b5719607000 zero_fill>) [0 zero_fill S1 A8])
            (const_int 0 [0]))) preproc.cpp:131 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       45 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;;              44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 525 524 526 45 27 "" [1 uses])
(note 526 525 527 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 528 45 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:129 220 {*addsi_1}
     (nil))
;;  succ:       46 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU,DFS_BACK)
;;              42 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 244 383
(code_label 528 527 529 46 26 "" [1 uses])
(note 529 528 530 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 530 529 531 46 (set (reg/f:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 fid+0 S8 A64])) preproc.cpp:129 89 {*movdi_internal}
     (nil))
(insn 531 530 533 46 (set (reg:SI 0 ax [orig:244 D.6766 ] [244])
        (mem:SI (reg/f:DI 0 ax [383]) [0 *fid_10(D)+0 S4 A32])) preproc.cpp:129 90 {*movsi_internal}
     (nil))
(insn 533 531 534 46 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:244 D.6766 ] [244])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 i+0 S4 A32]))) preproc.cpp:129 7 {*cmpsi_1}
     (nil))
(jump_insn 534 533 535 46 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 532)
            (pc))) preproc.cpp:129 596 {*jcc_1}
     (nil)
 -> 532)
;;  succ:       43
;;              47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 252 253
(note 535 534 536 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 536 535 539 47 (set (reg:SI 0 ax [orig:252 D.6766 ] [252])
        (const_int 1 [0x1])) preproc.cpp:135 90 {*movsi_internal}
     (nil))
(insn 539 536 543 47 (set (reg:SI 0 ax [orig:253 <retval> ] [253])
        (reg:SI 0 ax [orig:252 D.6766 ] [252])) preproc.cpp:135 90 {*movsi_internal}
     (nil))
(insn 543 539 544 47 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:253 <retval> ] [253])) preproc.cpp:136 90 {*movsi_internal}
     (nil))
(insn 544 543 573 47 (use (reg/i:SI 0 ax)) preproc.cpp:136 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 573 544 0 NOTE_INSN_DELETED)

;; Function int scale(float*, Procpar_info*, Preprocess*) (_Z5scalePfP12Procpar_infoP10Preprocess, funcdef_no=3, decl_uid=5355, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 25:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 27:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 28:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=296 from oldreg=92, assigning class SSE_REGS to r296
   28: r296:SF=r296:SF*r91:SF
      REG_DEAD r91:SF
      REG_DEAD r90:SF
    Inserting insn reload before:
  322: r296:SF=r90:SF
    Inserting insn reload after:
  323: r92:SF=r296:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 323:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 42:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 44:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 45:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=297 from oldreg=103, assigning class SSE_REGS to r297
   45: r297:SF=r297:SF*r102:SF
      REG_DEAD r102:SF
      REG_DEAD r101:SF
    Inserting insn reload before:
  324: r297:SF=r101:SF
    Inserting insn reload after:
  325: r103:SF=r297:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 325:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 51
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 52:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 56:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 69:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 73:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 74:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=298 from oldreg=244, assigning class SSE_REGS to r298
   74: r298:SF=r298:SF*r116:SF
      REG_DEAD r116:SF
      REG_DEAD r115:SF
    Inserting insn reload before:
  326: r298:SF=r115:SF
    Inserting insn reload after:
  327: r244:SF=r298:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 327:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 89:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 92:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 97:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 100:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 105:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 119:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 121
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 122:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 126:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 129:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 131:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 132:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 133
	 Choosing alt 0 in insn 133:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 135:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 140:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=299 from oldreg=150, assigning class SSE_REGS to r299
  140: r299:SF=float_trunc(r149:DF)
      REG_DEAD r149:DF
    Inserting insn reload after:
  328: r150:SF=r299:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 328:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 141:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 154:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 156
	 Choosing alt 0 in insn 156:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 157:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 158:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 159:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=300 from oldreg=159, assigning class SSE_REGS to r300
  159: r300:SF=r300:SF*r264:SF
      REG_DEAD r264:SF
      REG_DEAD r158:SF
    Inserting insn reload before:
  329: r300:SF=r158:SF
    Inserting insn reload after:
  330: r159:SF=r300:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 330:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 160:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 168:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 170
	 Choosing alt 0 in insn 170:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 171:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 173:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 175:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 188:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 192:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 193:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=301 from oldreg=273, assigning class SSE_REGS to r301
  193: r301:SF=r301:SF*r173:SF
      REG_DEAD r173:SF
      REG_DEAD r172:SF
    Inserting insn reload before:
  331: r301:SF=r172:SF
    Inserting insn reload after:
  332: r273:SF=r301:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 332:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 194:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 202:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 204
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 205:  (0) v  (1) m {*movsf_internal}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) x  (1) x  (2) 0 {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 209:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 212:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 217:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) x  (1) xm {*cmpiudf_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 220:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 225:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 233:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 234:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 241:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 243
	 Choosing alt 0 in insn 243:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 244:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 247:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 249:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 251
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 253:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 254:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 255:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 256
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 258:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 259:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (1) rzw {*call_value}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 263:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=302 from oldreg=211, assigning class SSE_REGS to r302
  263: r302:SF=float_trunc(r210:DF)
      REG_DEAD r210:DF
    Inserting insn reload after:
  333: r211:SF=r302:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 333:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 264:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 271:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 272:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 277:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 279:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 281
	 Choosing alt 0 in insn 281:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 282:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 283:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 284:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=303 from oldreg=222, assigning class SSE_REGS to r303
  284: r303:SF=r303:SF*r293:SF
      REG_DEAD r293:SF
      REG_DEAD r221:SF
    Inserting insn reload before:
  334: r303:SF=r221:SF
    Inserting insn reload after:
  335: r222:SF=r303:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 335:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 285:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 290:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 296:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19

********** Pseudo live ranges #1: **********

  BB 19
   Insn 307: point = 0
   Insn 306: point = 0
   Insn 302: point = 1
   Insn 299: point = 3
  BB 18
   Insn 297: point = 4
   Insn 296: point = 4
   Insn 294: point = 5
   Insn 293: point = 7
  BB 2
   Insn 315: point = 8
   Insn 11: point = 8
   Insn 10: point = 8
   Insn 9: point = 9
   Insn 8: point = 10
   Insn 4: point = 10
   Insn 3: point = 10
   Insn 2: point = 10
  BB 17
   Insn 290: point = 10
  BB 15
   Insn 319: point = 10
   Insn 264: point = 10
   Insn 333: point = 11
	Hard reg 0 is preferable by r302 with profit 1
   Insn 263: point = 13
   Insn 262: point = 15
   Insn 261: point = 16
   Insn 260: point = 16
   Insn 259: point = 17
   Insn 258: point = 19
   Insn 257: point = 20
   Insn 256: point = 22
   Insn 255: point = 24
   Insn 254: point = 26
   Insn 253: point = 27
   Insn 252: point = 29
   Insn 251: point = 31
   Insn 250: point = 33
   Insn 249: point = 34
   Insn 248: point = 36
   Insn 247: point = 38
   Insn 246: point = 40
   Insn 245: point = 42
   Insn 244: point = 43
   Insn 243: point = 45
   Insn 242: point = 47
   Insn 241: point = 48
   Insn 240: point = 50
   Insn 239: point = 52
   Insn 238: point = 54
   Insn 237: point = 56
   Insn 236: point = 57
   Insn 235: point = 59
   Insn 234: point = 60
   Insn 233: point = 62
   Insn 232: point = 64
   Insn 231: point = 66
  BB 16
   Insn 285: point = 67
   Insn 335: point = 68
	Hard reg 0 is preferable by r303 with profit 1
   Insn 284: point = 70
   Insn 334: point = 71
	Hard reg 0 is preferable by r303 with profit 1
	Hard reg 22 is preferable by r303 with profit 1
   Insn 283: point = 73
   Insn 282: point = 74
   Insn 281: point = 76
   Insn 280: point = 78
   Insn 279: point = 79
   Insn 278: point = 81
   Insn 277: point = 83
   Insn 276: point = 85
   Insn 275: point = 87
   Insn 274: point = 88
   Insn 273: point = 90
   Insn 272: point = 91
   Insn 271: point = 93
   Insn 270: point = 95
   Insn 269: point = 97
  BB 14
   Insn 229: point = 98
   Insn 228: point = 98
   Insn 227: point = 99
   Insn 226: point = 101
   Insn 225: point = 102
   Insn 224: point = 104
  BB 13
   Insn 222: point = 105
   Insn 221: point = 105
   Insn 220: point = 106
   Insn 219: point = 108
   Insn 218: point = 109
   Insn 217: point = 110
   Insn 216: point = 111
  BB 12
   Insn 214: point = 112
   Insn 213: point = 112
   Insn 212: point = 113
   Insn 211: point = 115
   Insn 210: point = 116
   Insn 209: point = 117
   Insn 208: point = 118
   Insn 207: point = 120
   Insn 206: point = 122
   Insn 205: point = 123
   Insn 204: point = 125
   Insn 203: point = 127
   Insn 202: point = 128
   Insn 201: point = 130
   Insn 200: point = 132
   Insn 199: point = 134
   Insn 198: point = 136
  BB 11
   Insn 196: point = 137
   Insn 195: point = 137
   Insn 194: point = 137
   Insn 332: point = 138
	Hard reg 0 is preferable by r301 with profit 1
   Insn 193: point = 140
   Insn 331: point = 141
	Hard reg 0 is preferable by r301 with profit 1
	Hard reg 21 is preferable by r301 with profit 1
   Insn 192: point = 143
   Insn 191: point = 145
   Insn 190: point = 146
   Insn 189: point = 148
   Insn 188: point = 149
   Insn 187: point = 151
   Insn 186: point = 153
   Insn 185: point = 154
   Insn 184: point = 156
   Insn 183: point = 158
   Insn 182: point = 160
  BB 10
   Insn 177: point = 161
   Insn 176: point = 161
   Insn 175: point = 162
   Insn 174: point = 163
   Insn 173: point = 165
   Insn 172: point = 167
   Insn 171: point = 168
   Insn 170: point = 170
   Insn 169: point = 172
   Insn 168: point = 173
   Insn 167: point = 175
   Insn 166: point = 177
   Insn 165: point = 179
  BB 8
   Insn 317: point = 180
   Insn 141: point = 180
   Insn 328: point = 181
	Hard reg 0 is preferable by r299 with profit 1
   Insn 140: point = 183
   Insn 139: point = 185
   Insn 138: point = 186
   Insn 137: point = 186
   Insn 136: point = 187
   Insn 135: point = 189
   Insn 134: point = 190
   Insn 133: point = 192
   Insn 132: point = 194
   Insn 131: point = 196
   Insn 130: point = 197
   Insn 129: point = 199
   Insn 128: point = 201
   Insn 127: point = 203
   Insn 126: point = 204
   Insn 125: point = 206
   Insn 124: point = 208
   Insn 123: point = 210
   Insn 122: point = 211
   Insn 121: point = 213
   Insn 120: point = 215
   Insn 119: point = 216
   Insn 118: point = 218
   Insn 117: point = 220
   Insn 116: point = 222
   Insn 115: point = 223
   Insn 114: point = 225
   Insn 113: point = 226
   Insn 112: point = 228
   Insn 111: point = 230
  BB 9
   Insn 160: point = 231
   Insn 330: point = 232
	Hard reg 0 is preferable by r300 with profit 1
   Insn 159: point = 234
   Insn 329: point = 235
	Hard reg 0 is preferable by r300 with profit 1
	Hard reg 22 is preferable by r300 with profit 1
   Insn 158: point = 237
   Insn 157: point = 238
   Insn 156: point = 240
   Insn 155: point = 242
   Insn 154: point = 243
   Insn 153: point = 245
   Insn 152: point = 247
   Insn 151: point = 249
   Insn 150: point = 250
   Insn 149: point = 252
   Insn 148: point = 253
   Insn 147: point = 255
   Insn 146: point = 257
  BB 7
   Insn 109: point = 258
   Insn 108: point = 258
   Insn 107: point = 259
   Insn 106: point = 261
   Insn 105: point = 262
   Insn 104: point = 264
  BB 6
   Insn 102: point = 265
   Insn 101: point = 265
   Insn 100: point = 266
   Insn 99: point = 268
   Insn 98: point = 269
   Insn 97: point = 270
   Insn 96: point = 271
  BB 5
   Insn 94: point = 272
   Insn 93: point = 272
   Insn 92: point = 273
   Insn 91: point = 275
   Insn 90: point = 276
   Insn 89: point = 277
   Insn 88: point = 278
   Insn 87: point = 280
   Insn 86: point = 282
   Insn 85: point = 283
   Insn 84: point = 285
   Insn 83: point = 287
   Insn 82: point = 288
   Insn 81: point = 290
   Insn 80: point = 292
   Insn 79: point = 294
  BB 4
   Insn 77: point = 295
   Insn 76: point = 295
   Insn 75: point = 295
   Insn 327: point = 296
	Hard reg 0 is preferable by r298 with profit 1
   Insn 74: point = 298
   Insn 326: point = 299
	Hard reg 0 is preferable by r298 with profit 1
	Hard reg 21 is preferable by r298 with profit 1
   Insn 73: point = 301
   Insn 72: point = 303
   Insn 71: point = 304
   Insn 70: point = 306
   Insn 69: point = 307
   Insn 68: point = 309
   Insn 67: point = 311
   Insn 66: point = 312
   Insn 65: point = 314
   Insn 64: point = 316
   Insn 63: point = 318
  BB 3
   Insn 58: point = 319
   Insn 57: point = 319
   Insn 56: point = 320
   Insn 55: point = 321
   Insn 54: point = 323
   Insn 53: point = 325
   Insn 52: point = 326
   Insn 51: point = 328
   Insn 50: point = 330
   Insn 49: point = 331
   Insn 48: point = 333
   Insn 47: point = 335
   Insn 46: point = 336
   Insn 325: point = 337
	Hard reg 0 is preferable by r297 with profit 1
   Insn 45: point = 339
   Insn 324: point = 340
	Hard reg 0 is preferable by r297 with profit 1
	Hard reg 22 is preferable by r297 with profit 1
   Insn 44: point = 342
   Insn 43: point = 344
   Insn 42: point = 345
   Insn 41: point = 347
   Insn 40: point = 349
   Insn 39: point = 350
   Insn 38: point = 352
   Insn 37: point = 354
   Insn 36: point = 356
   Insn 35: point = 357
   Insn 34: point = 359
   Insn 33: point = 360
   Insn 32: point = 362
   Insn 31: point = 364
   Insn 30: point = 366
   Insn 29: point = 367
   Insn 323: point = 368
	Hard reg 0 is preferable by r296 with profit 1
   Insn 28: point = 370
   Insn 322: point = 371
	Hard reg 0 is preferable by r296 with profit 1
	Hard reg 22 is preferable by r296 with profit 1
   Insn 27: point = 373
   Insn 26: point = 375
   Insn 25: point = 376
   Insn 24: point = 378
   Insn 23: point = 380
   Insn 22: point = 381
   Insn 21: point = 383
   Insn 20: point = 385
   Insn 19: point = 386
   Insn 18: point = 388
   Insn 17: point = 389
   Insn 16: point = 391
   Insn 15: point = 393
 r83: [4..5]
 r84: [390..391]
 r85: [387..389]
 r86: [367..386]
 r87: [382..383]
 r88: [379..381]
 r89: [377..378]
 r90: [372..376]
 r91: [370..373]
 r92: [367..368]
 r93: [363..364]
 r94: [361..362]
 r95: [358..360]
 r96: [336..357]
 r97: [353..354]
 r98: [351..352]
 r99: [348..350]
 r100: [346..347]
 r101: [341..345]
 r102: [339..342]
 r103: [336..337]
 r104: [332..333]
 r105: [329..331]
 r106: [327..328]
 r107: [324..326]
 r108: [322..323]
 r109: [319..321]
 r110: [315..316]
 r111: [313..314]
 r112: [310..312]
 r113: [308..309]
 r114: [305..307]
 r115: [300..304]
 r116: [298..301]
 r117: [291..292]
 r118: [289..290]
 r119: [286..288]
 r120: [284..285]
 r121: [281..283]
 r122: [279..280]
 r123: [276..278]
 r124: [274..275]
 r125: [272..273]
 r126: [269..271]
 r127: [267..268]
 r128: [265..266]
 r129: [258..262]
 r130: [258..259]
 r131: [227..228]
 r132: [224..226]
 r133: [180..223]
 r134: [219..220]
 r135: [217..218]
 r136: [214..216]
 r137: [212..213]
 r138: [198..211]
 r139: [207..208]
 r140: [205..206]
 r141: [202..204]
 r142: [200..201]
 r143: [198..199]
 r144: [193..197]
 r145: [193..194]
 r146: [191..192]
 r147: [188..190]
 r148: [186..187]
 r149: [184..185]
 r150: [180..181]
 r151: [254..255]
 r152: [251..253]
 r153: [231..250]
 r154: [246..247]
 r155: [244..245]
 r156: [241..243]
 r157: [239..240]
 r158: [236..238]
 r159: [231..232]
 r160: [176..177]
 r161: [174..175]
 r162: [171..173]
 r163: [169..170]
 r164: [166..168]
 r165: [164..165]
 r166: [161..163]
 r167: [157..158]
 r168: [155..156]
 r169: [152..154]
 r170: [150..151]
 r171: [147..149]
 r172: [142..146]
 r173: [140..143]
 r174: [133..134]
 r175: [131..132]
 r176: [129..130]
 r177: [126..128]
 r178: [124..125]
 r179: [121..123]
 r180: [119..120]
 r181: [116..118]
 r182: [114..115]
 r183: [112..113]
 r184: [109..111]
 r185: [107..108]
 r186: [105..106]
 r187: [98..102]
 r188: [98..99]
 r189: [63..64]
 r190: [61..62]
 r191: [58..60]
 r192: [10..57]
 r193: [53..54]
 r194: [51..52]
 r195: [49..50]
 r196: [46..48]
 r197: [44..45]
 r198: [28..43]
 r199: [39..40]
 r200: [37..38]
 r201: [35..36]
 r202: [32..34]
 r203: [30..31]
 r204: [28..29]
 r205: [23..27]
 r206: [23..24]
 r207: [21..22]
 r208: [18..20]
 r209: [16..17]
 r210: [14..15]
 r211: [10..11]
 r212: [94..95]
 r213: [92..93]
 r214: [89..91]
 r215: [67..88]
 r216: [84..85]
 r217: [82..83]
 r218: [80..81]
 r219: [77..79]
 r220: [75..76]
 r221: [72..74]
 r222: [67..68]
 r223: [2..3]
 r224: [0..1]
 r225: [8..9]
 r226: [392..393]
 r227: [387..388]
 r228: [384..385]
 r229: [379..380]
 r230: [374..375]
 r231: [365..366]
 r232: [358..359]
 r233: [355..356]
 r234: [348..349]
 r235: [343..344]
 r236: [334..335]
 r237: [329..330]
 r238: [324..325]
 r239: [319..320]
 r240: [317..318]
 r241: [310..311]
 r242: [305..306]
 r243: [302..303]
 r244: [295..296]
 r245: [293..294]
 r246: [286..287]
 r247: [281..282]
 r248: [276..277]
 r249: [269..270]
 r250: [263..264]
 r251: [260..261]
 r252: [229..230]
 r253: [224..225]
 r254: [221..222]
 r255: [214..215]
 r256: [209..210]
 r257: [202..203]
 r258: [195..196]
 r259: [188..189]
 r260: [256..257]
 r261: [251..252]
 r262: [248..249]
 r263: [241..242]
 r264: [234..237]
 r265: [178..179]
 r266: [171..172]
 r267: [166..167]
 r268: [161..162]
 r269: [159..160]
 r270: [152..153]
 r271: [147..148]
 r272: [144..145]
 r273: [137..138]
 r274: [135..136]
 r275: [126..127]
 r276: [121..122]
 r277: [116..117]
 r278: [109..110]
 r279: [103..104]
 r280: [100..101]
 r281: [65..66]
 r282: [58..59]
 r283: [55..56]
 r284: [46..47]
 r285: [41..42]
 r286: [32..33]
 r287: [25..26]
 r288: [18..19]
 r289: [96..97]
 r290: [89..90]
 r291: [86..87]
 r292: [77..78]
 r293: [70..73]
 r294: [6..7]
 r296: [369..371]
 r297: [338..340]
 r298: [297..299]
 r299: [182..183]
 r300: [233..235]
 r301: [139..141]
 r302: [12..13]
 r303: [69..71]
Compressing live ranges: from 394 to 336 - 85%
Ranges after the compression:
 r83: [4..5]
 r84: [332..333]
 r85: [330..331]
 r86: [314..329]
 r87: [326..327]
 r88: [324..325]
 r89: [322..323]
 r90: [318..321]
 r91: [316..319]
 r92: [314..315]
 r93: [310..311]
 r94: [308..309]
 r95: [306..307]
 r96: [288..305]
 r97: [302..303]
 r98: [300..301]
 r99: [298..299]
 r100: [296..297]
 r101: [292..295]
 r102: [290..293]
 r103: [288..289]
 r104: [284..285]
 r105: [282..283]
 r106: [280..281]
 r107: [278..279]
 r108: [276..277]
 r109: [274..275]
 r110: [270..271]
 r111: [268..269]
 r112: [266..267]
 r113: [264..265]
 r114: [262..263]
 r115: [258..261]
 r116: [256..259]
 r117: [250..251]
 r118: [248..249]
 r119: [246..247]
 r120: [244..245]
 r121: [242..243]
 r122: [240..241]
 r123: [238..239]
 r124: [236..237]
 r125: [234..235]
 r126: [232..233]
 r127: [230..231]
 r128: [228..229]
 r129: [222..225]
 r130: [222..223]
 r131: [196..197]
 r132: [194..195]
 r133: [156..193]
 r134: [190..191]
 r135: [188..189]
 r136: [186..187]
 r137: [184..185]
 r138: [172..183]
 r139: [180..181]
 r140: [178..179]
 r141: [176..177]
 r142: [174..175]
 r143: [172..173]
 r144: [168..171]
 r145: [168..169]
 r146: [166..167]
 r147: [164..165]
 r148: [162..163]
 r149: [160..161]
 r150: [156..157]
 r151: [218..219]
 r152: [216..217]
 r153: [200..215]
 r154: [212..213]
 r155: [210..211]
 r156: [208..209]
 r157: [206..207]
 r158: [204..205]
 r159: [200..201]
 r160: [152..153]
 r161: [150..151]
 r162: [148..149]
 r163: [146..147]
 r164: [144..145]
 r165: [142..143]
 r166: [140..141]
 r167: [136..137]
 r168: [134..135]
 r169: [132..133]
 r170: [130..131]
 r171: [128..129]
 r172: [124..127]
 r173: [122..125]
 r174: [116..117]
 r175: [114..115]
 r176: [112..113]
 r177: [110..111]
 r178: [108..109]
 r179: [106..107]
 r180: [104..105]
 r181: [102..103]
 r182: [100..101]
 r183: [98..99]
 r184: [96..97]
 r185: [94..95]
 r186: [92..93]
 r187: [86..89]
 r188: [86..87]
 r189: [56..57]
 r190: [54..55]
 r191: [52..53]
 r192: [10..51]
 r193: [48..49]
 r194: [46..47]
 r195: [44..45]
 r196: [42..43]
 r197: [40..41]
 r198: [26..39]
 r199: [36..37]
 r200: [34..35]
 r201: [32..33]
 r202: [30..31]
 r203: [28..29]
 r204: [26..27]
 r205: [22..25]
 r206: [22..23]
 r207: [20..21]
 r208: [18..19]
 r209: [16..17]
 r210: [14..15]
 r211: [10..11]
 r212: [82..83]
 r213: [80..81]
 r214: [78..79]
 r215: [60..77]
 r216: [74..75]
 r217: [72..73]
 r218: [70..71]
 r219: [68..69]
 r220: [66..67]
 r221: [64..65]
 r222: [60..61]
 r223: [2..3]
 r224: [0..1]
 r225: [8..9]
 r226: [334..335]
 r227: [330..331]
 r228: [328..329]
 r229: [324..325]
 r230: [320..321]
 r231: [312..313]
 r232: [306..307]
 r233: [304..305]
 r234: [298..299]
 r235: [294..295]
 r236: [286..287]
 r237: [282..283]
 r238: [278..279]
 r239: [274..275]
 r240: [272..273]
 r241: [266..267]
 r242: [262..263]
 r243: [260..261]
 r244: [254..255]
 r245: [252..253]
 r246: [246..247]
 r247: [242..243]
 r248: [238..239]
 r249: [232..233]
 r250: [226..227]
 r251: [224..225]
 r252: [198..199]
 r253: [194..195]
 r254: [192..193]
 r255: [186..187]
 r256: [182..183]
 r257: [176..177]
 r258: [170..171]
 r259: [164..165]
 r260: [220..221]
 r261: [216..217]
 r262: [214..215]
 r263: [208..209]
 r264: [202..205]
 r265: [154..155]
 r266: [148..149]
 r267: [144..145]
 r268: [140..141]
 r269: [138..139]
 r270: [132..133]
 r271: [128..129]
 r272: [126..127]
 r273: [120..121]
 r274: [118..119]
 r275: [110..111]
 r276: [106..107]
 r277: [102..103]
 r278: [96..97]
 r279: [90..91]
 r280: [88..89]
 r281: [58..59]
 r282: [52..53]
 r283: [50..51]
 r284: [42..43]
 r285: [38..39]
 r286: [30..31]
 r287: [24..25]
 r288: [18..19]
 r289: [84..85]
 r290: [78..79]
 r291: [76..77]
 r292: [68..69]
 r293: [62..65]
 r294: [6..7]
 r296: [316..317]
 r297: [290..291]
 r298: [256..257]
 r299: [158..159]
 r300: [202..203]
 r301: [122..123]
 r302: [12..13]
 r303: [62..63]

********** Assignment #1: **********

	 Assigning to 296 (cl=SSE_REGS, orig=92, freq=3, tfirst=296, tfreq=3)...
	   Assign 22 to reload r296 (freq=3)
	 Assigning to 297 (cl=SSE_REGS, orig=103, freq=3, tfirst=297, tfreq=3)...
	   Assign 22 to reload r297 (freq=3)
	 Assigning to 298 (cl=SSE_REGS, orig=244, freq=3, tfirst=298, tfreq=3)...
	   Assign 21 to reload r298 (freq=3)
	 Assigning to 300 (cl=SSE_REGS, orig=159, freq=3, tfirst=300, tfreq=3)...
	   Assign 22 to reload r300 (freq=3)
	 Assigning to 301 (cl=SSE_REGS, orig=273, freq=3, tfirst=301, tfreq=3)...
	   Assign 21 to reload r301 (freq=3)
	 Assigning to 303 (cl=SSE_REGS, orig=222, freq=3, tfirst=303, tfreq=3)...
	   Assign 22 to reload r303 (freq=3)
	 Assigning to 299 (cl=SSE_REGS, orig=150, freq=2, tfirst=299, tfreq=2)...
	   Assign 23 to reload r299 (freq=2)
	 Assigning to 302 (cl=SSE_REGS, orig=211, freq=2, tfirst=302, tfreq=2)...
	   Assign 24 to reload r302 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 294
changing reg in insn 296
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 19
changing reg in insn 19
changing reg in insn 29
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 35
changing reg in insn 35
changing reg in insn 46
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 105
changing reg in insn 108
changing reg in insn 107
changing reg in insn 108
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 115
changing reg in insn 115
changing reg in insn 115
changing reg in insn 141
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 130
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 150
changing reg in insn 160
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 160
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 173
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 190
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 193
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 213
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 225
changing reg in insn 228
changing reg in insn 227
changing reg in insn 228
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 236
changing reg in insn 236
changing reg in insn 236
changing reg in insn 264
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 253
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 253
changing reg in insn 253
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 259
changing reg in insn 259
changing reg in insn 260
changing reg in insn 262
changing reg in insn 263
changing reg in insn 264
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 274
changing reg in insn 274
changing reg in insn 274
changing reg in insn 285
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 285
changing reg in insn 299
changing reg in insn 302
changing reg in insn 302
changing reg in insn 306
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 48
changing reg in insn 50
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 97
changing reg in insn 98
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 120
changing reg in insn 123
changing reg in insn 124
changing reg in insn 127
changing reg in insn 131
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 158
changing reg in insn 159
changing reg in insn 165
changing reg in insn 166
changing reg in insn 169
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 176
changing reg in insn 182
changing reg in insn 183
changing reg in insn 186
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 198
changing reg in insn 199
changing reg in insn 203
changing reg in insn 206
changing reg in insn 207
changing reg in insn 209
changing reg in insn 210
changing reg in insn 217
changing reg in insn 218
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 231
changing reg in insn 232
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 238
changing reg in insn 242
changing reg in insn 245
changing reg in insn 246
changing reg in insn 250
changing reg in insn 254
changing reg in insn 255
changing reg in insn 258
changing reg in insn 259
changing reg in insn 269
changing reg in insn 270
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 276
changing reg in insn 280
changing reg in insn 283
changing reg in insn 284
changing reg in insn 293
changing reg in insn 294
deleting insn with uid = 322.
deleting insn with uid = 324.
deleting insn with uid = 326.
deleting insn with uid = 137.
deleting insn with uid = 139.
deleting insn with uid = 329.
deleting insn with uid = 331.
deleting insn with uid = 260.
deleting insn with uid = 262.
deleting insn with uid = 334.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 261.


int scale(float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3]
;;  ref usage 	r0={128d,126u} r1={25d,23u,16e} r2={7d,4u,4e} r3={2d,2u} r4={3d,1u} r5={3d,1u} r6={1d,87u} r7={1d,21u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={89d,15u} r18={2d} r19={2d} r20={1d,1u,22e} r21={39d,38u} r22={31d,28u,6e} r23={4d,1u} r24={4d,1u} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} 
;;    total ref usage 857{460d,349u,48e} in 266{264 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 225
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])
        (reg:DI 4 si [ procpar_info ])) preproc.cpp:141 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])
        (reg:DI 1 dx [ preprocess ])) preproc.cpp:141 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:143 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 0 ax [225])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) preproc.cpp:144 129 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 half+0 S4 A32])
        (reg:SF 0 ax [225])) preproc.cpp:144 129 {*movsf_internal}
     (nil))
(insn 11 10 315 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:146 90 {*movsi_internal}
     (nil))
(jump_insn 315 11 316 2 (set (pc)
        (label_ref 291)) preproc.cpp:146 636 {jump}
     (nil)
 -> 291)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 316 315 295)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 226 227 228 229 230 231 232 233 234 235 236 237 238 239
(code_label 295 316 14 3 44 "" [1 uses])
(note 14 295 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg:SI 0 ax [226])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:155 90 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:DI 0 ax [orig:84 D.6776 ] [84])
        (sign_extend:DI (reg:SI 0 ax [226]))) preproc.cpp:155 142 {*extendsidi2_rex64}
     (nil))
(insn 17 16 18 3 (parallel [
            (set (reg:DI 1 dx [orig:85 D.6776 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 D.6776 ] [84])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:155 497 {*ashldi3_1}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:155 89 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg/f:DI 1 dx [orig:86 D.6777 ] [86])
                (plus:DI (reg:DI 1 dx [orig:85 D.6776 ] [85])
                    (reg/f:DI 0 ax [227])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:155 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.6776 ] [85]))
        (nil)))
(insn 20 19 21 3 (set (reg:SI 0 ax [228])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:155 90 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 0 ax [orig:87 D.6776 ] [87])
        (sign_extend:DI (reg:SI 0 ax [228]))) preproc.cpp:155 142 {*extendsidi2_rex64}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:DI 2 cx [orig:88 D.6776 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.6776 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:155 497 {*ashldi3_1}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [229])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:155 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.6777 ] [89])
                (plus:DI (reg/f:DI 0 ax [229])
                    (reg:DI 2 cx [orig:88 D.6776 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:155 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:88 D.6776 ] [88]))
        (nil)))
(insn 25 24 26 3 (set (reg:SF 22 xmm1 [orig:90 D.6778 ] [90])
        (mem:SF (reg/f:DI 0 ax [orig:89 D.6777 ] [89]) [0 *_13+0 S4 A32])) preproc.cpp:155 129 {*movsf_internal}
     (nil))
(insn 26 25 27 3 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) preproc.cpp:155 89 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:SF 21 xmm0 [orig:91 D.6778 ] [91])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [230])
                (const_int 4 [0x4])) [0 preprocess_15(D)->scale_factor+0 S4 A32])) preproc.cpp:155 129 {*movsf_internal}
     (nil))
(insn 28 27 323 3 (set (reg:SF 22 xmm1 [orig:92 D.6778 ] [92])
        (mult:SF (reg:SF 22 xmm1 [orig:92 D.6778 ] [92])
            (reg:SF 21 xmm0 [orig:91 D.6778 ] [91]))) preproc.cpp:155 775 {*fop_sf_comm_sse}
     (nil))
(insn 323 28 29 3 (set (reg:SF 0 ax [orig:92 D.6778 ] [92])
        (reg:SF 22 xmm1 [orig:92 D.6778 ] [92])) preproc.cpp:155 129 {*movsf_internal}
     (nil))
(insn 29 323 30 3 (set (mem:SF (reg/f:DI 1 dx [orig:86 D.6777 ] [86]) [0 *_10+0 S4 A32])
        (reg:SF 0 ax [orig:92 D.6778 ] [92])) preproc.cpp:155 129 {*movsf_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 0 ax [231])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:156 90 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:DI 0 ax [orig:93 D.6779 ] [93])
        (sign_extend:DI (reg:SI 0 ax [231]))) preproc.cpp:156 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:DI 0 ax [orig:94 D.6779 ] [94])
                (plus:DI (reg:DI 0 ax [orig:93 D.6779 ] [93])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 221 {*adddi_1}
     (nil))
(insn 33 32 34 3 (parallel [
            (set (reg:DI 1 dx [orig:95 D.6779 ] [95])
                (ashift:DI (reg:DI 0 ax [orig:94 D.6779 ] [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 497 {*ashldi3_1}
     (nil))
(insn 34 33 35 3 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:156 89 {*movdi_internal}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg/f:DI 1 dx [orig:96 D.6777 ] [96])
                (plus:DI (reg:DI 1 dx [orig:95 D.6779 ] [95])
                    (reg/f:DI 0 ax [232])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:95 D.6779 ] [95]))
        (nil)))
(insn 36 35 37 3 (set (reg:SI 0 ax [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:156 90 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:DI 0 ax [orig:97 D.6779 ] [97])
        (sign_extend:DI (reg:SI 0 ax [233]))) preproc.cpp:156 142 {*extendsidi2_rex64}
     (nil))
(insn 38 37 39 3 (parallel [
            (set (reg:DI 0 ax [orig:98 D.6779 ] [98])
                (plus:DI (reg:DI 0 ax [orig:97 D.6779 ] [97])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 221 {*adddi_1}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg:DI 2 cx [orig:99 D.6779 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 D.6779 ] [98])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 497 {*ashldi3_1}
     (nil))
(insn 40 39 41 3 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:156 89 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (parallel [
            (set (reg/f:DI 0 ax [orig:100 D.6777 ] [100])
                (plus:DI (reg/f:DI 0 ax [234])
                    (reg:DI 2 cx [orig:99 D.6779 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:156 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:99 D.6779 ] [99]))
        (nil)))
(insn 42 41 43 3 (set (reg:SF 22 xmm1 [orig:101 D.6778 ] [101])
        (mem:SF (reg/f:DI 0 ax [orig:100 D.6777 ] [100]) [0 *_25+0 S4 A32])) preproc.cpp:156 129 {*movsf_internal}
     (nil))
(insn 43 42 44 3 (set (reg/f:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) preproc.cpp:156 89 {*movdi_internal}
     (nil))
(insn 44 43 45 3 (set (reg:SF 21 xmm0 [orig:102 D.6778 ] [102])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [235])
                (const_int 4 [0x4])) [0 preprocess_15(D)->scale_factor+0 S4 A32])) preproc.cpp:156 129 {*movsf_internal}
     (nil))
(insn 45 44 325 3 (set (reg:SF 22 xmm1 [orig:103 D.6778 ] [103])
        (mult:SF (reg:SF 22 xmm1 [orig:103 D.6778 ] [103])
            (reg:SF 21 xmm0 [orig:102 D.6778 ] [102]))) preproc.cpp:156 775 {*fop_sf_comm_sse}
     (nil))
(insn 325 45 46 3 (set (reg:SF 0 ax [orig:103 D.6778 ] [103])
        (reg:SF 22 xmm1 [orig:103 D.6778 ] [103])) preproc.cpp:156 129 {*movsf_internal}
     (nil))
(insn 46 325 47 3 (set (mem:SF (reg/f:DI 1 dx [orig:96 D.6777 ] [96]) [0 *_21+0 S4 A32])
        (reg:SF 0 ax [orig:103 D.6778 ] [103])) preproc.cpp:156 129 {*movsf_internal}
     (nil))
(insn 47 46 48 3 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:158 90 {*movsi_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DI 0 ax [orig:104 D.6776 ] [104])
        (sign_extend:DI (reg:SI 0 ax [236]))) preproc.cpp:158 142 {*extendsidi2_rex64}
     (nil))
(insn 49 48 50 3 (parallel [
            (set (reg:DI 1 dx [orig:105 D.6776 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 D.6776 ] [104])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:158 497 {*ashldi3_1}
     (nil))
(insn 50 49 51 3 (set (reg/f:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:158 89 {*movdi_internal}
     (nil))
(insn 51 50 52 3 (parallel [
            (set (reg/f:DI 0 ax [orig:106 D.6777 ] [106])
                (plus:DI (reg/f:DI 0 ax [237])
                    (reg:DI 1 dx [orig:105 D.6776 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:158 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:105 D.6776 ] [105]))
        (nil)))
(insn 52 51 53 3 (set (reg:SF 22 xmm1 [orig:107 D.6778 ] [107])
        (mem:SF (reg/f:DI 0 ax [orig:106 D.6777 ] [106]) [0 *_31+0 S4 A32])) preproc.cpp:158 129 {*movsf_internal}
     (nil))
(insn 53 52 54 3 (set (reg:V4SF 21 xmm0 [238])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:158 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 54 53 55 3 (parallel [
            (set (reg:SF 21 xmm0 [orig:108 D.6778 ] [108])
                (abs:SF (reg:SF 22 xmm1 [orig:107 D.6778 ] [107])))
            (use (reg:V4SF 21 xmm0 [238]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:158 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:107 D.6778 ] [107]))
        (nil)))
(insn 55 54 56 3 (set (reg:DF 21 xmm0 [orig:109 D.6780 ] [109])
        (float_extend:DF (reg:SF 21 xmm0 [orig:108 D.6778 ] [108]))) preproc.cpp:158 152 {*extendsfdf2_sse}
     (nil))
(insn 56 55 57 3 (set (reg:DF 22 xmm1 [239])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:158 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 57 56 58 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [239])
            (reg:DF 21 xmm0 [orig:109 D.6780 ] [109]))) preproc.cpp:158 56 {*cmpiudf_sse}
     (nil))
(jump_insn 58 57 62 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 163)
            (pc))) preproc.cpp:158 596 {*jcc_1}
     (nil)
 -> 163)
;;  succ:       4 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 240 241 242 243 244
(note 62 58 63 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 4 (set (reg:SI 0 ax [240])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:164 90 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DI 0 ax [orig:110 D.6779 ] [110])
        (sign_extend:DI (reg:SI 0 ax [240]))) preproc.cpp:164 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg:DI 0 ax [orig:111 D.6779 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 D.6779 ] [110])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:164 221 {*adddi_1}
     (nil))
(insn 66 65 67 4 (parallel [
            (set (reg:DI 1 dx [orig:112 D.6779 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:111 D.6779 ] [111])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:164 497 {*ashldi3_1}
     (nil))
(insn 67 66 68 4 (set (reg/f:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:164 89 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.6777 ] [113])
                (plus:DI (reg/f:DI 0 ax [241])
                    (reg:DI 1 dx [orig:112 D.6779 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:164 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.6779 ] [112]))
        (nil)))
(insn 69 68 70 4 (set (reg:SF 22 xmm1 [orig:114 D.6778 ] [114])
        (mem:SF (reg/f:DI 0 ax [orig:113 D.6777 ] [113]) [0 *_38+0 S4 A32])) preproc.cpp:164 129 {*movsf_internal}
     (nil))
(insn 70 69 71 4 (set (reg:V4SF 21 xmm0 [242])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:164 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 71 70 72 4 (parallel [
            (set (reg:SF 21 xmm0 [orig:115 D.6778 ] [115])
                (abs:SF (reg:SF 22 xmm1 [orig:114 D.6778 ] [114])))
            (use (reg:V4SF 21 xmm0 [242]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:164 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:114 D.6778 ] [114]))
        (nil)))
(insn 72 71 73 4 (set (reg/f:DI 0 ax [243])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) preproc.cpp:164 89 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg:SF 22 xmm1 [orig:116 D.6778 ] [116])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [243])
                (const_int 4 [0x4])) [0 preprocess_15(D)->scale_factor+0 S4 A32])) preproc.cpp:164 129 {*movsf_internal}
     (nil))
(insn 74 73 327 4 (set (reg:SF 21 xmm0 [244])
        (mult:SF (reg:SF 21 xmm0 [244])
            (reg:SF 22 xmm1 [orig:116 D.6778 ] [116]))) preproc.cpp:164 775 {*fop_sf_comm_sse}
     (nil))
(insn 327 74 75 4 (set (reg:SF 0 ax [244])
        (reg:SF 21 xmm0 [244])) preproc.cpp:164 129 {*movsf_internal}
     (nil))
(insn 75 327 76 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])
        (reg:SF 0 ax [244])) preproc.cpp:164 129 {*movsf_internal}
     (nil))
(insn 76 75 77 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
            (const_int 1 [0x1]))) preproc.cpp:175 7 {*cmpsi_1}
     (nil))
(jump_insn 77 76 78 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 163)
            (pc))) preproc.cpp:175 596 {*jcc_1}
     (nil)
 -> 163)
;;  succ:       5 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 118 119 120 121 122 123 124 125 245 246 247 248
(note 78 77 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 5 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:DI 0 ax [orig:117 D.6776 ] [117])
        (sign_extend:DI (reg:SI 0 ax [245]))) preproc.cpp:177 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 5 (parallel [
            (set (reg:DI 0 ax [orig:118 D.6776 ] [118])
                (ashift:DI (reg:DI 0 ax [orig:117 D.6776 ] [117])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 497 {*ashldi3_1}
     (nil))
(insn 82 81 83 5 (parallel [
            (set (reg:DI 1 dx [orig:119 D.6779 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 D.6776 ] [118])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 221 {*adddi_1}
     (nil))
(insn 83 82 84 5 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 84 83 85 5 (parallel [
            (set (reg/f:DI 0 ax [orig:120 D.6777 ] [120])
                (plus:DI (reg/f:DI 0 ax [246])
                    (reg:DI 1 dx [orig:119 D.6779 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:119 D.6779 ] [119]))
        (nil)))
(insn 85 84 86 5 (set (reg:SF 22 xmm1 [orig:121 D.6778 ] [121])
        (mem:SF (reg/f:DI 0 ax [orig:120 D.6777 ] [120]) [0 *_46+0 S4 A32])) preproc.cpp:177 129 {*movsf_internal}
     (nil))
(insn 86 85 87 5 (set (reg:V4SF 21 xmm0 [247])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:177 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 87 86 88 5 (parallel [
            (set (reg:SF 21 xmm0 [orig:122 D.6778 ] [122])
                (abs:SF (reg:SF 22 xmm1 [orig:121 D.6778 ] [121])))
            (use (reg:V4SF 21 xmm0 [247]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:121 D.6778 ] [121]))
        (nil)))
(insn 88 87 89 5 (set (reg:DF 21 xmm0 [orig:123 D.6780 ] [123])
        (float_extend:DF (reg:SF 21 xmm0 [orig:122 D.6778 ] [122]))) preproc.cpp:177 152 {*extendsfdf2_sse}
     (nil))
(insn 89 88 90 5 (set (reg:DF 22 xmm1 [248])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:177 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 90 89 91 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [248])
            (reg:DF 21 xmm0 [orig:123 D.6780 ] [123]))) preproc.cpp:177 56 {*cmpiudf_sse}
     (nil))
(insn 91 90 92 5 (set (reg:QI 0 ax [orig:124 D.6781 ] [124])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) preproc.cpp:177 592 {*setcc_qi}
     (nil))
(insn 92 91 93 5 (parallel [
            (set (reg:QI 0 ax [orig:125 D.6781 ] [125])
                (xor:QI (reg:QI 0 ax [orig:124 D.6781 ] [124])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 395 {*xorqi_1}
     (nil))
(insn 93 92 94 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:125 D.6781 ] [125])
            (const_int 0 [0]))) preproc.cpp:177 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 94 93 95 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) preproc.cpp:177 596 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126 127 128 249
(note 95 94 96 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 6 (set (reg:DF 21 xmm0 [orig:126 D.6780 ] [126])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) preproc.cpp:177 152 {*extendsfdf2_sse}
     (nil))
(insn 97 96 98 6 (set (reg:DF 22 xmm1 [249])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:177 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 98 97 99 6 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [249])
            (reg:DF 21 xmm0 [orig:126 D.6780 ] [126]))) preproc.cpp:177 56 {*cmpiudf_sse}
     (nil))
(insn 99 98 100 6 (set (reg:QI 0 ax [orig:127 D.6781 ] [127])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) preproc.cpp:177 592 {*setcc_qi}
     (nil))
(insn 100 99 101 6 (parallel [
            (set (reg:QI 0 ax [orig:128 D.6781 ] [128])
                (xor:QI (reg:QI 0 ax [orig:127 D.6781 ] [127])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 395 {*xorqi_1}
     (nil))
(insn 101 100 102 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:128 D.6781 ] [128])
            (const_int 0 [0]))) preproc.cpp:177 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 102 101 103 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) preproc.cpp:177 596 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       7 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 250 251
(note 103 102 104 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 7 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 105 104 106 7 (parallel [
            (set (reg:SI 1 dx [orig:129 D.6775 ] [129])
                (plus:SI (reg:SI 0 ax [250])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:177 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 106 105 107 7 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) preproc.cpp:177 89 {*movdi_internal}
     (nil))
(insn 107 106 108 7 (set (reg:SI 0 ax [orig:130 D.6775 ] [130])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [251])
                (const_int 300 [0x12c])) [0 procpar_info_5(D)->num_points+0 S4 A32])) preproc.cpp:177 90 {*movsi_internal}
     (nil))
(insn 108 107 109 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:129 D.6775 ] [129])
            (reg:SI 0 ax [orig:130 D.6775 ] [130]))) preproc.cpp:177 7 {*cmpsi_1}
     (nil))
(jump_insn 109 108 110 7 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) preproc.cpp:177 596 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 252 253 254 255 256 257 258 259
(note 110 109 111 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 8 (set (reg:SI 0 ax [252])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:187 90 {*movsi_internal}
     (nil))
(insn 112 111 113 8 (set (reg:DI 0 ax [orig:131 D.6776 ] [131])
        (sign_extend:DI (reg:SI 0 ax [252]))) preproc.cpp:187 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 8 (parallel [
            (set (reg:DI 1 dx [orig:132 D.6776 ] [132])
                (ashift:DI (reg:DI 0 ax [orig:131 D.6776 ] [131])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 497 {*ashldi3_1}
     (nil))
(insn 114 113 115 8 (set (reg/f:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:187 89 {*movdi_internal}
     (nil))
(insn 115 114 116 8 (parallel [
            (set (reg/f:DI 3 bx [orig:133 D.6777 ] [133])
                (plus:DI (reg:DI 1 dx [orig:132 D.6776 ] [132])
                    (reg/f:DI 0 ax [253])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:132 D.6776 ] [132]))
        (nil)))
(insn 116 115 117 8 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:187 90 {*movsi_internal}
     (nil))
(insn 117 116 118 8 (set (reg:DI 0 ax [orig:134 D.6776 ] [134])
        (sign_extend:DI (reg:SI 0 ax [254]))) preproc.cpp:187 142 {*extendsidi2_rex64}
     (nil))
(insn 118 117 119 8 (parallel [
            (set (reg:DI 0 ax [orig:135 D.6776 ] [135])
                (ashift:DI (reg:DI 0 ax [orig:134 D.6776 ] [134])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 497 {*ashldi3_1}
     (nil))
(insn 119 118 120 8 (parallel [
            (set (reg:DI 1 dx [orig:136 D.6779 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 D.6776 ] [135])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 221 {*adddi_1}
     (nil))
(insn 120 119 121 8 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:187 89 {*movdi_internal}
     (nil))
(insn 121 120 122 8 (parallel [
            (set (reg/f:DI 0 ax [orig:137 D.6777 ] [137])
                (plus:DI (reg/f:DI 0 ax [255])
                    (reg:DI 1 dx [orig:136 D.6779 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:136 D.6779 ] [136]))
        (nil)))
(insn 122 121 123 8 (set (reg:SF 22 xmm1 [orig:138 D.6778 ] [138])
        (mem:SF (reg/f:DI 0 ax [orig:137 D.6777 ] [137]) [0 *_63+0 S4 A32])) preproc.cpp:187 129 {*movsf_internal}
     (nil))
(insn 123 122 124 8 (set (reg:SI 0 ax [256])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:187 90 {*movsi_internal}
     (nil))
(insn 124 123 125 8 (set (reg:DI 0 ax [orig:139 D.6776 ] [139])
        (sign_extend:DI (reg:SI 0 ax [256]))) preproc.cpp:187 142 {*extendsidi2_rex64}
     (nil))
(insn 125 124 126 8 (parallel [
            (set (reg:DI 0 ax [orig:140 D.6776 ] [140])
                (ashift:DI (reg:DI 0 ax [orig:139 D.6776 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 497 {*ashldi3_1}
     (nil))
(insn 126 125 127 8 (parallel [
            (set (reg:DI 1 dx [orig:141 D.6779 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 D.6776 ] [140])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 221 {*adddi_1}
     (nil))
(insn 127 126 128 8 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:187 89 {*movdi_internal}
     (nil))
(insn 128 127 129 8 (parallel [
            (set (reg/f:DI 0 ax [orig:142 D.6777 ] [142])
                (plus:DI (reg/f:DI 0 ax [257])
                    (reg:DI 1 dx [orig:141 D.6779 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:187 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:141 D.6779 ] [141]))
        (nil)))
(insn 129 128 130 8 (set (reg:SF 21 xmm0 [orig:143 D.6778 ] [143])
        (mem:SF (reg/f:DI 0 ax [orig:142 D.6777 ] [142]) [0 *_68+0 S4 A32])) preproc.cpp:187 129 {*movsf_internal}
     (nil))
(insn 130 129 131 8 (set (reg:SF 22 xmm1 [orig:144 D.6778 ] [144])
        (mult:SF (reg:SF 22 xmm1 [orig:138 D.6778 ] [138])
            (reg:SF 21 xmm0 [orig:143 D.6778 ] [143]))) preproc.cpp:187 775 {*fop_sf_comm_sse}
     (nil))
(insn 131 130 132 8 (set (reg:SF 21 xmm0 [258])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])) preproc.cpp:188 129 {*movsf_internal}
     (nil))
(insn 132 131 133 8 (set (reg:SF 21 xmm0 [orig:145 D.6778 ] [145])
        (mult:SF (reg:SF 21 xmm0 [258])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) preproc.cpp:188 775 {*fop_sf_comm_sse}
     (nil))
(insn 133 132 134 8 (set (reg:SF 21 xmm0 [orig:146 D.6778 ] [146])
        (plus:SF (reg:SF 21 xmm0 [orig:145 D.6778 ] [145])
            (reg:SF 22 xmm1 [orig:144 D.6778 ] [144]))) preproc.cpp:187 775 {*fop_sf_comm_sse}
     (nil))
(insn 134 133 135 8 (set (reg:DF 21 xmm0 [orig:147 D.6780 ] [147])
        (float_extend:DF (reg:SF 21 xmm0 [orig:146 D.6778 ] [146]))) preproc.cpp:188 152 {*extendsfdf2_sse}
     (nil))
(insn 135 134 136 8 (set (reg:DF 22 xmm1 [259])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S8 A64])) preproc.cpp:188 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 136 135 138 8 (set (reg:DF 21 xmm0 [orig:148 D.6780 ] [148])
        (mult:DF (reg:DF 21 xmm0 [orig:147 D.6780 ] [147])
            (reg:DF 22 xmm1 [259]))) preproc.cpp:188 776 {*fop_df_comm_sse}
     (nil))
(call_insn 138 136 140 8 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:188 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 140 138 328 8 (set (reg:SF 23 xmm2 [orig:150 D.6778 ] [150])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:149 D.6780 ] [149]))) preproc.cpp:188 157 {*truncdfsf_fast_sse}
     (nil))
(insn 328 140 141 8 (set (reg:SF 0 ax [orig:150 D.6778 ] [150])
        (reg:SF 23 xmm2 [orig:150 D.6778 ] [150])) preproc.cpp:188 129 {*movsf_internal}
     (nil))
(insn 141 328 317 8 (set (mem:SF (reg/f:DI 3 bx [orig:133 D.6777 ] [133]) [0 *_59+0 S4 A32])
        (reg:SF 0 ax [orig:150 D.6778 ] [150])) preproc.cpp:188 129 {*movsf_internal}
     (nil))
(jump_insn 317 141 318 8 (set (pc)
        (label_ref 163)) preproc.cpp:188 636 {jump}
     (nil)
 -> 163)
;;  succ:       10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 318 317 144)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;;              7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 152 153 154 155 156 157 158 159 260 261 262 263 264
(code_label 144 318 145 9 38 "" [3 uses])
(note 145 144 146 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 9 (set (reg:SI 0 ax [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:199 90 {*movsi_internal}
     (nil))
(insn 147 146 148 9 (set (reg:DI 0 ax [orig:151 D.6776 ] [151])
        (sign_extend:DI (reg:SI 0 ax [260]))) preproc.cpp:199 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 9 (parallel [
            (set (reg:DI 1 dx [orig:152 D.6776 ] [152])
                (ashift:DI (reg:DI 0 ax [orig:151 D.6776 ] [151])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 497 {*ashldi3_1}
     (nil))
(insn 149 148 150 9 (set (reg/f:DI 0 ax [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:199 89 {*movdi_internal}
     (nil))
(insn 150 149 151 9 (parallel [
            (set (reg/f:DI 1 dx [orig:153 D.6777 ] [153])
                (plus:DI (reg:DI 1 dx [orig:152 D.6776 ] [152])
                    (reg/f:DI 0 ax [261])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:152 D.6776 ] [152]))
        (nil)))
(insn 151 150 152 9 (set (reg:SI 0 ax [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:199 90 {*movsi_internal}
     (nil))
(insn 152 151 153 9 (set (reg:DI 0 ax [orig:154 D.6776 ] [154])
        (sign_extend:DI (reg:SI 0 ax [262]))) preproc.cpp:199 142 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 9 (parallel [
            (set (reg:DI 0 ax [orig:155 D.6776 ] [155])
                (ashift:DI (reg:DI 0 ax [orig:154 D.6776 ] [154])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 497 {*ashldi3_1}
     (nil))
(insn 154 153 155 9 (parallel [
            (set (reg:DI 2 cx [orig:156 D.6779 ] [156])
                (plus:DI (reg:DI 0 ax [orig:155 D.6776 ] [155])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 221 {*adddi_1}
     (nil))
(insn 155 154 156 9 (set (reg/f:DI 0 ax [263])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:199 89 {*movdi_internal}
     (nil))
(insn 156 155 157 9 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.6777 ] [157])
                (plus:DI (reg/f:DI 0 ax [263])
                    (reg:DI 2 cx [orig:156 D.6779 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:199 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:156 D.6779 ] [156]))
        (nil)))
(insn 157 156 158 9 (set (reg:SF 22 xmm1 [orig:158 D.6778 ] [158])
        (mem:SF (reg/f:DI 0 ax [orig:157 D.6777 ] [157]) [0 *_83+0 S4 A32])) preproc.cpp:199 129 {*movsf_internal}
     (nil))
(insn 158 157 159 9 (set (reg:SF 21 xmm0 [264])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) preproc.cpp:199 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 159 158 330 9 (set (reg:SF 22 xmm1 [orig:159 D.6778 ] [159])
        (mult:SF (reg:SF 22 xmm1 [orig:159 D.6778 ] [159])
            (reg:SF 21 xmm0 [264]))) preproc.cpp:199 775 {*fop_sf_comm_sse}
     (nil))
(insn 330 159 160 9 (set (reg:SF 0 ax [orig:159 D.6778 ] [159])
        (reg:SF 22 xmm1 [orig:159 D.6778 ] [159])) preproc.cpp:199 129 {*movsf_internal}
     (nil))
(insn 160 330 163 9 (set (mem:SF (reg/f:DI 1 dx [orig:153 D.6777 ] [153]) [0 *_79+0 S4 A32])
        (reg:SF 0 ax [orig:159 D.6778 ] [159])) preproc.cpp:199 129 {*movsf_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              9 (FALLTHRU)
;;              3
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 162 163 164 165 166 265 266 267 268
(code_label 163 160 164 10 36 "" [3 uses])
(note 164 163 165 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 165 164 166 10 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:205 90 {*movsi_internal}
     (nil))
(insn 166 165 167 10 (set (reg:DI 0 ax [orig:160 D.6779 ] [160])
        (sign_extend:DI (reg:SI 0 ax [265]))) preproc.cpp:205 142 {*extendsidi2_rex64}
     (nil))
(insn 167 166 168 10 (parallel [
            (set (reg:DI 0 ax [orig:161 D.6779 ] [161])
                (plus:DI (reg:DI 0 ax [orig:160 D.6779 ] [160])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:205 221 {*adddi_1}
     (nil))
(insn 168 167 169 10 (parallel [
            (set (reg:DI 1 dx [orig:162 D.6779 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.6779 ] [161])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:205 497 {*ashldi3_1}
     (nil))
(insn 169 168 170 10 (set (reg/f:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:205 89 {*movdi_internal}
     (nil))
(insn 170 169 171 10 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.6777 ] [163])
                (plus:DI (reg/f:DI 0 ax [266])
                    (reg:DI 1 dx [orig:162 D.6779 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:205 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.6779 ] [162]))
        (nil)))
(insn 171 170 172 10 (set (reg:SF 22 xmm1 [orig:164 D.6778 ] [164])
        (mem:SF (reg/f:DI 0 ax [orig:163 D.6777 ] [163]) [0 *_89+0 S4 A32])) preproc.cpp:205 129 {*movsf_internal}
     (nil))
(insn 172 171 173 10 (set (reg:V4SF 21 xmm0 [267])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:205 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 173 172 174 10 (parallel [
            (set (reg:SF 21 xmm0 [orig:165 D.6778 ] [165])
                (abs:SF (reg:SF 22 xmm1 [orig:164 D.6778 ] [164])))
            (use (reg:V4SF 21 xmm0 [267]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:205 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:164 D.6778 ] [164]))
        (nil)))
(insn 174 173 175 10 (set (reg:DF 21 xmm0 [orig:166 D.6780 ] [166])
        (float_extend:DF (reg:SF 21 xmm0 [orig:165 D.6778 ] [165]))) preproc.cpp:205 152 {*extendsfdf2_sse}
     (nil))
(insn 175 174 176 10 (set (reg:DF 22 xmm1 [268])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:205 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 176 175 177 10 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [268])
            (reg:DF 21 xmm0 [orig:166 D.6780 ] [166]))) preproc.cpp:205 56 {*cmpiudf_sse}
     (nil))
(jump_insn 177 176 181 10 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 288)
            (pc))) preproc.cpp:205 596 {*jcc_1}
     (nil)
 -> 288)
;;  succ:       11 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 167 168 169 170 171 172 173 269 270 271 272 273
(note 181 177 182 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 182 181 183 11 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:215 90 {*movsi_internal}
     (nil))
(insn 183 182 184 11 (set (reg:DI 0 ax [orig:167 D.6779 ] [167])
        (sign_extend:DI (reg:SI 0 ax [269]))) preproc.cpp:215 142 {*extendsidi2_rex64}
     (nil))
(insn 184 183 185 11 (parallel [
            (set (reg:DI 0 ax [orig:168 D.6779 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 D.6779 ] [167])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:215 221 {*adddi_1}
     (nil))
(insn 185 184 186 11 (parallel [
            (set (reg:DI 1 dx [orig:169 D.6779 ] [169])
                (ashift:DI (reg:DI 0 ax [orig:168 D.6779 ] [168])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:215 497 {*ashldi3_1}
     (nil))
(insn 186 185 187 11 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:215 89 {*movdi_internal}
     (nil))
(insn 187 186 188 11 (parallel [
            (set (reg/f:DI 0 ax [orig:170 D.6777 ] [170])
                (plus:DI (reg/f:DI 0 ax [270])
                    (reg:DI 1 dx [orig:169 D.6779 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:215 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:169 D.6779 ] [169]))
        (nil)))
(insn 188 187 189 11 (set (reg:SF 22 xmm1 [orig:171 D.6778 ] [171])
        (mem:SF (reg/f:DI 0 ax [orig:170 D.6777 ] [170]) [0 *_96+0 S4 A32])) preproc.cpp:215 129 {*movsf_internal}
     (nil))
(insn 189 188 190 11 (set (reg:V4SF 21 xmm0 [271])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:215 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 190 189 191 11 (parallel [
            (set (reg:SF 21 xmm0 [orig:172 D.6778 ] [172])
                (abs:SF (reg:SF 22 xmm1 [orig:171 D.6778 ] [171])))
            (use (reg:V4SF 21 xmm0 [271]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:215 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:171 D.6778 ] [171]))
        (nil)))
(insn 191 190 192 11 (set (reg/f:DI 0 ax [272])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 preprocess+0 S8 A64])) preproc.cpp:215 89 {*movdi_internal}
     (nil))
(insn 192 191 193 11 (set (reg:SF 22 xmm1 [orig:173 D.6778 ] [173])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [272])
                (const_int 4 [0x4])) [0 preprocess_15(D)->scale_factor+0 S4 A32])) preproc.cpp:215 129 {*movsf_internal}
     (nil))
(insn 193 192 332 11 (set (reg:SF 21 xmm0 [273])
        (mult:SF (reg:SF 21 xmm0 [273])
            (reg:SF 22 xmm1 [orig:173 D.6778 ] [173]))) preproc.cpp:215 775 {*fop_sf_comm_sse}
     (nil))
(insn 332 193 194 11 (set (reg:SF 0 ax [273])
        (reg:SF 21 xmm0 [273])) preproc.cpp:215 129 {*movsf_internal}
     (nil))
(insn 194 332 195 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])
        (reg:SF 0 ax [273])) preproc.cpp:215 129 {*movsf_internal}
     (nil))
(insn 195 194 196 11 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
            (const_int 0 [0]))) preproc.cpp:227 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 196 195 197 11 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 288)
            (pc))) preproc.cpp:227 596 {*jcc_1}
     (nil)
 -> 288)
;;  succ:       12 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 174 175 176 177 178 179 180 181 182 183 274 275 276 277
(note 197 196 198 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 12 (set (reg:SI 0 ax [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:228 90 {*movsi_internal}
     (nil))
(insn 199 198 200 12 (set (reg:DI 0 ax [orig:174 D.6779 ] [174])
        (sign_extend:DI (reg:SI 0 ax [274]))) preproc.cpp:228 142 {*extendsidi2_rex64}
     (nil))
(insn 200 199 201 12 (parallel [
            (set (reg:DI 0 ax [orig:175 D.6779 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 D.6779 ] [174])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 221 {*adddi_1}
     (nil))
(insn 201 200 202 12 (parallel [
            (set (reg:DI 0 ax [orig:176 D.6779 ] [176])
                (ashift:DI (reg:DI 0 ax [orig:175 D.6779 ] [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 497 {*ashldi3_1}
     (nil))
(insn 202 201 203 12 (parallel [
            (set (reg:DI 1 dx [orig:177 D.6779 ] [177])
                (plus:DI (reg:DI 0 ax [orig:176 D.6779 ] [176])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 221 {*adddi_1}
     (nil))
(insn 203 202 204 12 (set (reg/f:DI 0 ax [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:228 89 {*movdi_internal}
     (nil))
(insn 204 203 205 12 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.6777 ] [178])
                (plus:DI (reg/f:DI 0 ax [275])
                    (reg:DI 1 dx [orig:177 D.6779 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.6779 ] [177]))
        (nil)))
(insn 205 204 206 12 (set (reg:SF 22 xmm1 [orig:179 D.6778 ] [179])
        (mem:SF (reg/f:DI 0 ax [orig:178 D.6777 ] [178]) [0 *_105+0 S4 A32])) preproc.cpp:228 129 {*movsf_internal}
     (nil))
(insn 206 205 207 12 (set (reg:V4SF 21 xmm0 [276])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:228 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 207 206 208 12 (parallel [
            (set (reg:SF 21 xmm0 [orig:180 D.6778 ] [180])
                (abs:SF (reg:SF 22 xmm1 [orig:179 D.6778 ] [179])))
            (use (reg:V4SF 21 xmm0 [276]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:179 D.6778 ] [179]))
        (nil)))
(insn 208 207 209 12 (set (reg:DF 21 xmm0 [orig:181 D.6780 ] [181])
        (float_extend:DF (reg:SF 21 xmm0 [orig:180 D.6778 ] [180]))) preproc.cpp:228 152 {*extendsfdf2_sse}
     (nil))
(insn 209 208 210 12 (set (reg:DF 22 xmm1 [277])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:228 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 210 209 211 12 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [277])
            (reg:DF 21 xmm0 [orig:181 D.6780 ] [181]))) preproc.cpp:228 56 {*cmpiudf_sse}
     (nil))
(insn 211 210 212 12 (set (reg:QI 0 ax [orig:182 D.6781 ] [182])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) preproc.cpp:228 592 {*setcc_qi}
     (nil))
(insn 212 211 213 12 (parallel [
            (set (reg:QI 0 ax [orig:183 D.6781 ] [183])
                (xor:QI (reg:QI 0 ax [orig:182 D.6781 ] [182])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 395 {*xorqi_1}
     (nil))
(insn 213 212 214 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:183 D.6781 ] [183])
            (const_int 0 [0]))) preproc.cpp:228 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 214 213 215 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 267)
            (pc))) preproc.cpp:228 596 {*jcc_1}
     (nil)
 -> 267)
;;  succ:       13 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 184 185 186 278
(note 215 214 216 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 13 (set (reg:DF 21 xmm0 [orig:184 D.6780 ] [184])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) preproc.cpp:228 152 {*extendsfdf2_sse}
     (nil))
(insn 217 216 218 13 (set (reg:DF 22 xmm1 [278])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC6") [flags 0x2]) [0  S8 A64])) preproc.cpp:228 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0000000000000000622815914577798564188970686927859788e-9 [0x0.89705f4136b4a8p-29])
        (nil)))
(insn 218 217 219 13 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 22 xmm1 [278])
            (reg:DF 21 xmm0 [orig:184 D.6780 ] [184]))) preproc.cpp:228 56 {*cmpiudf_sse}
     (nil))
(insn 219 218 220 13 (set (reg:QI 0 ax [orig:185 D.6781 ] [185])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) preproc.cpp:228 592 {*setcc_qi}
     (nil))
(insn 220 219 221 13 (parallel [
            (set (reg:QI 0 ax [orig:186 D.6781 ] [186])
                (xor:QI (reg:QI 0 ax [orig:185 D.6781 ] [185])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 395 {*xorqi_1}
     (nil))
(insn 221 220 222 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:186 D.6781 ] [186])
            (const_int 0 [0]))) preproc.cpp:228 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 222 221 223 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 267)
            (pc))) preproc.cpp:228 596 {*jcc_1}
     (nil)
 -> 267)
;;  succ:       14 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 187 188 279 280
(note 223 222 224 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 14 (set (reg:SI 0 ax [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:228 90 {*movsi_internal}
     (nil))
(insn 225 224 226 14 (parallel [
            (set (reg:SI 1 dx [orig:187 D.6775 ] [187])
                (plus:SI (reg:SI 0 ax [279])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:228 220 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))
(insn 226 225 227 14 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) preproc.cpp:228 89 {*movdi_internal}
     (nil))
(insn 227 226 228 14 (set (reg:SI 0 ax [orig:188 D.6775 ] [188])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [280])
                (const_int 300 [0x12c])) [0 procpar_info_5(D)->num_points+0 S4 A32])) preproc.cpp:228 90 {*movsi_internal}
     (nil))
(insn 228 227 229 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:187 D.6775 ] [187])
            (reg:SI 0 ax [orig:188 D.6775 ] [188]))) preproc.cpp:228 7 {*cmpsi_1}
     (nil))
(jump_insn 229 228 230 14 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 267)
            (pc))) preproc.cpp:228 596 {*jcc_1}
     (nil)
 -> 267)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 281 282 283 284 285 286 287 288
(note 230 229 231 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 231 230 232 15 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:239 90 {*movsi_internal}
     (nil))
(insn 232 231 233 15 (set (reg:DI 0 ax [orig:189 D.6779 ] [189])
        (sign_extend:DI (reg:SI 0 ax [281]))) preproc.cpp:239 142 {*extendsidi2_rex64}
     (nil))
(insn 233 232 234 15 (parallel [
            (set (reg:DI 0 ax [orig:190 D.6779 ] [190])
                (plus:DI (reg:DI 0 ax [orig:189 D.6779 ] [189])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 221 {*adddi_1}
     (nil))
(insn 234 233 235 15 (parallel [
            (set (reg:DI 1 dx [orig:191 D.6779 ] [191])
                (ashift:DI (reg:DI 0 ax [orig:190 D.6779 ] [190])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 497 {*ashldi3_1}
     (nil))
(insn 235 234 236 15 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 236 235 237 15 (parallel [
            (set (reg/f:DI 3 bx [orig:192 D.6777 ] [192])
                (plus:DI (reg:DI 1 dx [orig:191 D.6779 ] [191])
                    (reg/f:DI 0 ax [282])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:191 D.6779 ] [191]))
        (nil)))
(insn 237 236 238 15 (set (reg:SI 0 ax [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:239 90 {*movsi_internal}
     (nil))
(insn 238 237 239 15 (set (reg:DI 0 ax [orig:193 D.6779 ] [193])
        (sign_extend:DI (reg:SI 0 ax [283]))) preproc.cpp:239 142 {*extendsidi2_rex64}
     (nil))
(insn 239 238 240 15 (parallel [
            (set (reg:DI 0 ax [orig:194 D.6779 ] [194])
                (plus:DI (reg:DI 0 ax [orig:193 D.6779 ] [193])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 221 {*adddi_1}
     (nil))
(insn 240 239 241 15 (parallel [
            (set (reg:DI 0 ax [orig:195 D.6779 ] [195])
                (ashift:DI (reg:DI 0 ax [orig:194 D.6779 ] [194])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 497 {*ashldi3_1}
     (nil))
(insn 241 240 242 15 (parallel [
            (set (reg:DI 1 dx [orig:196 D.6779 ] [196])
                (plus:DI (reg:DI 0 ax [orig:195 D.6779 ] [195])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 221 {*adddi_1}
     (nil))
(insn 242 241 243 15 (set (reg/f:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 243 242 244 15 (parallel [
            (set (reg/f:DI 0 ax [orig:197 D.6777 ] [197])
                (plus:DI (reg/f:DI 0 ax [284])
                    (reg:DI 1 dx [orig:196 D.6779 ] [196])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:196 D.6779 ] [196]))
        (nil)))
(insn 244 243 245 15 (set (reg:SF 22 xmm1 [orig:198 D.6778 ] [198])
        (mem:SF (reg/f:DI 0 ax [orig:197 D.6777 ] [197]) [0 *_124+0 S4 A32])) preproc.cpp:239 129 {*movsf_internal}
     (nil))
(insn 245 244 246 15 (set (reg:SI 0 ax [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:239 90 {*movsi_internal}
     (nil))
(insn 246 245 247 15 (set (reg:DI 0 ax [orig:199 D.6779 ] [199])
        (sign_extend:DI (reg:SI 0 ax [285]))) preproc.cpp:239 142 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 15 (parallel [
            (set (reg:DI 0 ax [orig:200 D.6779 ] [200])
                (plus:DI (reg:DI 0 ax [orig:199 D.6779 ] [199])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 221 {*adddi_1}
     (nil))
(insn 248 247 249 15 (parallel [
            (set (reg:DI 0 ax [orig:201 D.6779 ] [201])
                (ashift:DI (reg:DI 0 ax [orig:200 D.6779 ] [200])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 497 {*ashldi3_1}
     (nil))
(insn 249 248 250 15 (parallel [
            (set (reg:DI 1 dx [orig:202 D.6779 ] [202])
                (plus:DI (reg:DI 0 ax [orig:201 D.6779 ] [201])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 221 {*adddi_1}
     (nil))
(insn 250 249 251 15 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:239 89 {*movdi_internal}
     (nil))
(insn 251 250 252 15 (parallel [
            (set (reg/f:DI 0 ax [orig:203 D.6777 ] [203])
                (plus:DI (reg/f:DI 0 ax [286])
                    (reg:DI 1 dx [orig:202 D.6779 ] [202])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:239 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:202 D.6779 ] [202]))
        (nil)))
(insn 252 251 253 15 (set (reg:SF 21 xmm0 [orig:204 D.6778 ] [204])
        (mem:SF (reg/f:DI 0 ax [orig:203 D.6777 ] [203]) [0 *_130+0 S4 A32])) preproc.cpp:239 129 {*movsf_internal}
     (nil))
(insn 253 252 254 15 (set (reg:SF 22 xmm1 [orig:205 D.6778 ] [205])
        (mult:SF (reg:SF 22 xmm1 [orig:198 D.6778 ] [198])
            (reg:SF 21 xmm0 [orig:204 D.6778 ] [204]))) preproc.cpp:239 775 {*fop_sf_comm_sse}
     (nil))
(insn 254 253 255 15 (set (reg:SF 21 xmm0 [287])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32])) preproc.cpp:240 129 {*movsf_internal}
     (nil))
(insn 255 254 256 15 (set (reg:SF 21 xmm0 [orig:206 D.6778 ] [206])
        (mult:SF (reg:SF 21 xmm0 [287])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 next_point+0 S4 A32]))) preproc.cpp:240 775 {*fop_sf_comm_sse}
     (nil))
(insn 256 255 257 15 (set (reg:SF 21 xmm0 [orig:207 D.6778 ] [207])
        (plus:SF (reg:SF 21 xmm0 [orig:206 D.6778 ] [206])
            (reg:SF 22 xmm1 [orig:205 D.6778 ] [205]))) preproc.cpp:239 775 {*fop_sf_comm_sse}
     (nil))
(insn 257 256 258 15 (set (reg:DF 21 xmm0 [orig:208 D.6780 ] [208])
        (float_extend:DF (reg:SF 21 xmm0 [orig:207 D.6778 ] [207]))) preproc.cpp:240 152 {*extendsfdf2_sse}
     (nil))
(insn 258 257 259 15 (set (reg:DF 22 xmm1 [288])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC7") [flags 0x2]) [0  S8 A64])) preproc.cpp:240 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 259 258 261 15 (set (reg:DF 21 xmm0 [orig:209 D.6780 ] [209])
        (mult:DF (reg:DF 21 xmm0 [orig:208 D.6780 ] [208])
            (reg:DF 22 xmm1 [288]))) preproc.cpp:240 776 {*fop_df_comm_sse}
     (nil))
(call_insn 261 259 263 15 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:240 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 263 261 333 15 (set (reg:SF 24 xmm3 [orig:211 D.6778 ] [211])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:210 D.6780 ] [210]))) preproc.cpp:240 157 {*truncdfsf_fast_sse}
     (nil))
(insn 333 263 264 15 (set (reg:SF 0 ax [orig:211 D.6778 ] [211])
        (reg:SF 24 xmm3 [orig:211 D.6778 ] [211])) preproc.cpp:240 129 {*movsf_internal}
     (nil))
(insn 264 333 319 15 (set (mem:SF (reg/f:DI 3 bx [orig:192 D.6777 ] [192]) [0 *_119+0 S4 A32])
        (reg:SF 0 ax [orig:211 D.6778 ] [211])) preproc.cpp:240 129 {*movsf_internal}
     (nil))
(jump_insn 319 264 320 15 (set (pc)
        (label_ref 288)) preproc.cpp:240 636 {jump}
     (nil)
 -> 288)
;;  succ:       17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 320 319 267)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13
;;              14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 212 213 214 215 216 217 218 219 220 221 222 289 290 291 292 293
(code_label 267 320 268 16 42 "" [3 uses])
(note 268 267 269 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 269 268 270 16 (set (reg:SI 0 ax [289])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:252 90 {*movsi_internal}
     (nil))
(insn 270 269 271 16 (set (reg:DI 0 ax [orig:212 D.6779 ] [212])
        (sign_extend:DI (reg:SI 0 ax [289]))) preproc.cpp:252 142 {*extendsidi2_rex64}
     (nil))
(insn 271 270 272 16 (parallel [
            (set (reg:DI 0 ax [orig:213 D.6779 ] [213])
                (plus:DI (reg:DI 0 ax [orig:212 D.6779 ] [212])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 221 {*adddi_1}
     (nil))
(insn 272 271 273 16 (parallel [
            (set (reg:DI 1 dx [orig:214 D.6779 ] [214])
                (ashift:DI (reg:DI 0 ax [orig:213 D.6779 ] [213])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 497 {*ashldi3_1}
     (nil))
(insn 273 272 274 16 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:252 89 {*movdi_internal}
     (nil))
(insn 274 273 275 16 (parallel [
            (set (reg/f:DI 1 dx [orig:215 D.6777 ] [215])
                (plus:DI (reg:DI 1 dx [orig:214 D.6779 ] [214])
                    (reg/f:DI 0 ax [290])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:214 D.6779 ] [214]))
        (nil)))
(insn 275 274 276 16 (set (reg:SI 0 ax [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])) preproc.cpp:252 90 {*movsi_internal}
     (nil))
(insn 276 275 277 16 (set (reg:DI 0 ax [orig:216 D.6779 ] [216])
        (sign_extend:DI (reg:SI 0 ax [291]))) preproc.cpp:252 142 {*extendsidi2_rex64}
     (nil))
(insn 277 276 278 16 (parallel [
            (set (reg:DI 0 ax [orig:217 D.6779 ] [217])
                (plus:DI (reg:DI 0 ax [orig:216 D.6779 ] [216])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 221 {*adddi_1}
     (nil))
(insn 278 277 279 16 (parallel [
            (set (reg:DI 0 ax [orig:218 D.6779 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.6779 ] [217])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 497 {*ashldi3_1}
     (nil))
(insn 279 278 280 16 (parallel [
            (set (reg:DI 2 cx [orig:219 D.6779 ] [219])
                (plus:DI (reg:DI 0 ax [orig:218 D.6779 ] [218])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 221 {*adddi_1}
     (nil))
(insn 280 279 281 16 (set (reg/f:DI 0 ax [292])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:252 89 {*movdi_internal}
     (nil))
(insn 281 280 282 16 (parallel [
            (set (reg/f:DI 0 ax [orig:220 D.6777 ] [220])
                (plus:DI (reg/f:DI 0 ax [292])
                    (reg:DI 2 cx [orig:219 D.6779 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:252 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:219 D.6779 ] [219]))
        (nil)))
(insn 282 281 283 16 (set (reg:SF 22 xmm1 [orig:221 D.6778 ] [221])
        (mem:SF (reg/f:DI 0 ax [orig:220 D.6777 ] [220]) [0 *_147+0 S4 A32])) preproc.cpp:252 129 {*movsf_internal}
     (nil))
(insn 283 282 284 16 (set (reg:SF 21 xmm0 [293])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0  S4 A32])) preproc.cpp:252 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))
(insn 284 283 335 16 (set (reg:SF 22 xmm1 [orig:222 D.6778 ] [222])
        (mult:SF (reg:SF 22 xmm1 [orig:222 D.6778 ] [222])
            (reg:SF 21 xmm0 [293]))) preproc.cpp:252 775 {*fop_sf_comm_sse}
     (nil))
(insn 335 284 285 16 (set (reg:SF 0 ax [orig:222 D.6778 ] [222])
        (reg:SF 22 xmm1 [orig:222 D.6778 ] [222])) preproc.cpp:252 129 {*movsf_internal}
     (nil))
(insn 285 335 288 16 (set (mem:SF (reg/f:DI 1 dx [orig:215 D.6777 ] [215]) [0 *_142+0 S4 A32])
        (reg:SF 0 ax [orig:222 D.6778 ] [222])) preproc.cpp:252 129 {*movsf_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              16 (FALLTHRU)
;;              10
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 288 285 289 17 40 "" [3 uses])
(note 289 288 290 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 17 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:146 220 {*addsi_1}
     (nil))
;;  succ:       18 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 294
(code_label 291 290 292 18 35 "" [1 uses])
(note 292 291 293 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 18 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 procpar_info+0 S8 A64])) preproc.cpp:146 89 {*movdi_internal}
     (nil))
(insn 294 293 296 18 (set (reg:SI 0 ax [orig:83 D.6775 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [294])
                (const_int 300 [0x12c])) [0 procpar_info_5(D)->num_points+0 S4 A32])) preproc.cpp:146 90 {*movsi_internal}
     (nil))
(insn 296 294 297 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.6775 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 j+0 S4 A32]))) preproc.cpp:146 7 {*cmpsi_1}
     (nil))
(jump_insn 297 296 298 18 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 295)
            (pc))) preproc.cpp:146 596 {*jcc_1}
     (nil)
 -> 295)
;;  succ:       3
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 223 224
(note 298 297 299 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 299 298 302 19 (set (reg:SI 0 ax [orig:223 D.6775 ] [223])
        (const_int 1 [0x1])) preproc.cpp:257 90 {*movsi_internal}
     (nil))
(insn 302 299 306 19 (set (reg:SI 0 ax [orig:224 <retval> ] [224])
        (reg:SI 0 ax [orig:223 D.6775 ] [223])) preproc.cpp:257 90 {*movsi_internal}
     (nil))
(insn 306 302 307 19 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:224 <retval> ] [224])) preproc.cpp:258 90 {*movsi_internal}
     (nil))
(insn 307 306 321 19 (use (reg/i:SI 0 ax)) preproc.cpp:258 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 321 307 0 NOTE_INSN_DELETED)

;; Function int baseline_correct(float*, Procpar_info*) (_Z16baseline_correctPfP12Procpar_info, funcdef_no=4, decl_uid=5389, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (2) rm  (3) 0 {*movsicc_noc}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 35:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 36:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 37:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=156 from oldreg=133, assigning class SSE_REGS to r156
   37: r156:SF=r156:SF+r89:SF
      REG_DEAD r134:SF
      REG_DEAD r89:SF
    Inserting insn reload before:
  128: r156:SF=r134:SF
    Inserting insn reload after:
  129: r133:SF=r156:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 129:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 45:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 47:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=157 from oldreg=137, assigning class SSE_REGS to r157
   47: r157:SF=r157:SF+r94:SF
      REG_DEAD r138:SF
      REG_DEAD r94:SF
    Inserting insn reload before:
  130: r157:SF=r138:SF
    Inserting insn reload after:
  131: r137:SF=r157:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 131:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 49:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rm {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) x  (1) m {*floatsidf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 59:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 62:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 63:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=158 from oldreg=141, assigning class SSE_REGS to r158
   63: r158:SF=r158:SF/r97:SF
      REG_DEAD r142:SF
      REG_DEAD r97:SF
    Inserting insn reload before:
  132: r158:SF=r142:SF
    Inserting insn reload after:
  133: r141:SF=r158:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 133:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) ?m  (1) rF {*movsf_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) x  (1) m {*floatsidf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 66:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 69:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 70:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=159 from oldreg=144, assigning class SSE_REGS to r159
   70: r159:SF=r159:SF/r100:SF
      REG_DEAD r145:SF
      REG_DEAD r100:SF
    Inserting insn reload before:
  134: r159:SF=r145:SF
    Inserting insn reload after:
  135: r144:SF=r159:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 135:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 71:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 86:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 87:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=160 from oldreg=109, assigning class SSE_REGS to r160
   87: r160:SF=r160:SF-[frame:DI-0xc]
      REG_DEAD r108:SF
    Inserting insn reload before:
  136: r160:SF=r108:SF
    Inserting insn reload after:
  137: r109:SF=r160:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 137:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 91:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 101:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 102:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=161 from oldreg=119, assigning class SSE_REGS to r161
  102: r161:SF=r161:SF-[frame:DI-0x8]
      REG_DEAD r118:SF
    Inserting insn reload before:
  138: r161:SF=r118:SF
    Inserting insn reload after:
  139: r119:SF=r161:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 139:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 104:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 121: point = 0
   Insn 120: point = 0
   Insn 116: point = 1
   Insn 113: point = 3
  BB 7
   Insn 111: point = 4
   Insn 110: point = 4
   Insn 108: point = 5
   Insn 107: point = 7
  BB 5
   Insn 125: point = 8
   Insn 72: point = 8
   Insn 71: point = 8
   Insn 135: point = 9
	Hard reg 0 is preferable by r159 with profit 1
   Insn 70: point = 11
   Insn 134: point = 12
	Hard reg 0 is preferable by r159 with profit 1
	Hard reg 22 is preferable by r159 with profit 1
   Insn 69: point = 14
   Insn 68: point = 15
   Insn 67: point = 17
   Insn 66: point = 19
   Insn 65: point = 20
   Insn 64: point = 21
   Insn 133: point = 22
	Hard reg 0 is preferable by r158 with profit 1
   Insn 63: point = 24
   Insn 132: point = 25
	Hard reg 0 is preferable by r158 with profit 1
	Hard reg 22 is preferable by r158 with profit 1
   Insn 62: point = 27
   Insn 61: point = 28
   Insn 60: point = 30
   Insn 59: point = 32
   Insn 58: point = 33
  BB 4
   Insn 56: point = 34
   Insn 55: point = 34
   Insn 53: point = 35
   Insn 52: point = 37
  BB 2
   Insn 123: point = 38
   Insn 26: point = 38
   Insn 25: point = 39
   Insn 22: point = 41
   Insn 21: point = 43
   Insn 20: point = 44
   Insn 19: point = 45
   Insn 18: point = 47
   Insn 17: point = 48
   Insn 16: point = 48
   Insn 15: point = 49
   Insn 14: point = 51
   Insn 13: point = 53
   Insn 12: point = 54
   Insn 11: point = 55
   Insn 10: point = 56
   Insn 9: point = 57
   Insn 8: point = 58
   Insn 7: point = 58
   Insn 3: point = 58
   Insn 2: point = 58
  BB 3
   Insn 49: point = 58
   Insn 48: point = 58
   Insn 131: point = 59
	Hard reg 0 is preferable by r157 with profit 1
   Insn 47: point = 61
   Insn 130: point = 62
	Hard reg 0 is preferable by r157 with profit 1
	Hard reg 22 is preferable by r157 with profit 1
   Insn 46: point = 64
   Insn 45: point = 65
   Insn 44: point = 67
   Insn 43: point = 69
   Insn 42: point = 70
   Insn 41: point = 72
   Insn 40: point = 74
   Insn 39: point = 76
   Insn 38: point = 77
   Insn 129: point = 78
	Hard reg 0 is preferable by r156 with profit 1
   Insn 37: point = 80
   Insn 128: point = 81
	Hard reg 0 is preferable by r156 with profit 1
	Hard reg 22 is preferable by r156 with profit 1
   Insn 36: point = 83
   Insn 35: point = 84
   Insn 34: point = 86
   Insn 33: point = 88
   Insn 32: point = 89
   Insn 31: point = 91
   Insn 30: point = 93
  BB 6
   Insn 104: point = 94
   Insn 103: point = 94
   Insn 139: point = 95
	Hard reg 0 is preferable by r161 with profit 1
   Insn 102: point = 97
   Insn 138: point = 97
	Hard reg 0 is preferable by r161 with profit 1
	Hard reg 21 is preferable by r161 with profit 1
   Insn 101: point = 99
   Insn 100: point = 101
   Insn 99: point = 103
   Insn 98: point = 104
   Insn 97: point = 106
   Insn 96: point = 108
   Insn 95: point = 110
   Insn 94: point = 111
   Insn 93: point = 113
   Insn 92: point = 114
   Insn 91: point = 116
   Insn 90: point = 118
   Insn 89: point = 120
   Insn 88: point = 121
   Insn 137: point = 122
	Hard reg 0 is preferable by r160 with profit 1
   Insn 87: point = 124
   Insn 136: point = 124
	Hard reg 0 is preferable by r160 with profit 1
	Hard reg 21 is preferable by r160 with profit 1
   Insn 86: point = 126
   Insn 85: point = 128
   Insn 84: point = 130
   Insn 83: point = 131
   Insn 82: point = 133
   Insn 81: point = 135
   Insn 80: point = 136
   Insn 79: point = 138
   Insn 78: point = 139
   Insn 77: point = 141
   Insn 76: point = 143
 r83: [50..51]
 r84: [40..41]
 r85: [34..35]
 r86: [90..91]
 r87: [87..89]
 r88: [85..86]
 r89: [80..84]
 r90: [73..74]
 r91: [71..72]
 r92: [68..70]
 r93: [66..67]
 r94: [61..65]
 r95: [31..33]
 r96: [29..30]
 r97: [24..28]
 r98: [18..20]
 r99: [16..17]
 r100: [11..15]
 r101: [4..5]
 r102: [140..141]
 r103: [137..139]
 r104: [121..136]
 r105: [132..133]
 r106: [129..131]
 r107: [127..128]
 r108: [125..126]
 r109: [121..122]
 r110: [117..118]
 r111: [115..116]
 r112: [112..114]
 r113: [94..111]
 r114: [107..108]
 r115: [105..106]
 r116: [102..104]
 r117: [100..101]
 r118: [98..99]
 r119: [94..95]
 r120: [2..3]
 r121: [0..1]
 r122: [56..57]
 r123: [54..55]
 r124: [52..53]
 r125: [46..49]
 r126: [47..48]
 r127: [44..45]
 r128: [42..43]
 r130: [38..39]
 r131: [92..93]
 r132: [87..88]
 r133: [77..78]
 r134: [82..83]
 r135: [75..76]
 r136: [68..69]
 r137: [58..59]
 r138: [63..64]
 r139: [36..37]
 r140: [31..32]
 r141: [21..22]
 r142: [26..27]
 r143: [18..19]
 r144: [8..9]
 r145: [13..14]
 r146: [142..143]
 r147: [137..138]
 r148: [134..135]
 r149: [129..130]
 r150: [119..120]
 r151: [112..113]
 r152: [109..110]
 r153: [102..103]
 r154: [6..7]
 r156: [79..81]
 r157: [60..62]
 r158: [23..25]
 r159: [10..12]
 r160: [123..124]
 r161: [96..97]
Compressing live ranges: from 144 to 124 - 86%
Ranges after the compression:
 r83: [42..43]
 r84: [34..35]
 r85: [28..29]
 r86: [76..77]
 r87: [74..75]
 r88: [72..73]
 r89: [68..71]
 r90: [62..63]
 r91: [60..61]
 r92: [58..59]
 r93: [56..57]
 r94: [52..55]
 r95: [26..27]
 r96: [24..25]
 r97: [20..23]
 r98: [16..17]
 r99: [14..15]
 r100: [10..13]
 r101: [4..5]
 r102: [120..121]
 r103: [118..119]
 r104: [104..117]
 r105: [114..115]
 r106: [112..113]
 r107: [110..111]
 r108: [108..109]
 r109: [104..105]
 r110: [100..101]
 r111: [98..99]
 r112: [96..97]
 r113: [80..95]
 r114: [92..93]
 r115: [90..91]
 r116: [88..89]
 r117: [86..87]
 r118: [84..85]
 r119: [80..81]
 r120: [2..3]
 r121: [0..1]
 r122: [48..49]
 r123: [46..47]
 r124: [44..45]
 r125: [40..41]
 r126: [40..41]
 r127: [38..39]
 r128: [36..37]
 r130: [32..33]
 r131: [78..79]
 r132: [74..75]
 r133: [66..67]
 r134: [70..71]
 r135: [64..65]
 r136: [58..59]
 r137: [50..51]
 r138: [54..55]
 r139: [30..31]
 r140: [26..27]
 r141: [18..19]
 r142: [22..23]
 r143: [16..17]
 r144: [8..9]
 r145: [12..13]
 r146: [122..123]
 r147: [118..119]
 r148: [116..117]
 r149: [112..113]
 r150: [102..103]
 r151: [96..97]
 r152: [94..95]
 r153: [88..89]
 r154: [6..7]
 r156: [68..69]
 r157: [52..53]
 r158: [20..21]
 r159: [10..11]
 r160: [106..107]
 r161: [82..83]

********** Assignment #1: **********

	 Assigning to 156 (cl=SSE_REGS, orig=133, freq=3, tfirst=156, tfreq=3)...
	   Assign 22 to reload r156 (freq=3)
	 Assigning to 157 (cl=SSE_REGS, orig=137, freq=3, tfirst=157, tfreq=3)...
	   Assign 22 to reload r157 (freq=3)
	 Assigning to 158 (cl=SSE_REGS, orig=141, freq=3, tfirst=158, tfreq=3)...
	   Assign 22 to reload r158 (freq=3)
	 Assigning to 159 (cl=SSE_REGS, orig=144, freq=3, tfirst=159, tfreq=3)...
	   Assign 22 to reload r159 (freq=3)
	 Assigning to 160 (cl=SSE_REGS, orig=109, freq=3, tfirst=160, tfreq=3)...
	   Assign 21 to reload r160 (freq=3)
	 Assigning to 161 (cl=SSE_REGS, orig=119, freq=3, tfirst=161, tfreq=3)...
	   Assign 21 to reload r161 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 22
changing reg in insn 25
changing reg in insn 53
changing reg in insn 55
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 58
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 108
changing reg in insn 110
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 80
changing reg in insn 88
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 94
changing reg in insn 103
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 113
changing reg in insn 116
changing reg in insn 116
changing reg in insn 120
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 15
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 38
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 48
changing reg in insn 46
changing reg in insn 52
changing reg in insn 53
changing reg in insn 59
changing reg in insn 60
changing reg in insn 64
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 69
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 89
changing reg in insn 90
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 99
changing reg in insn 107
changing reg in insn 108
deleting insn with uid = 128.
deleting insn with uid = 130.
deleting insn with uid = 132.
deleting insn with uid = 134.
deleting insn with uid = 136.
deleting insn with uid = 138.
starting the processing of deferred insns
ending the processing of deferred insns


int baseline_correct(float*, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={49d,51u} r1={8d,7u,4e} r2={3d,2u,2e} r4={1d,1u} r5={1d,1u} r6={1d,52u} r7={1d,8u} r17={23d,3u} r20={1d,1u,6e} r21={13d,12u} r22={11d,10u} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 280{120d,148u,12e} in 104{104 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 122 123 124 125 126 127 128 130
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) preproc.cpp:262 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])
        (reg:DI 4 si [ procpar_info ])) preproc.cpp:262 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:264 90 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:264 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SF 0 ax [122])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:265 129 {*movsf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 0 ax [122])) preproc.cpp:265 129 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SF 0 ax [123])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:266 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 0 ax [123])) preproc.cpp:266 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) preproc.cpp:268 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:83 D.6782 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 300 [0x12c])) [0 procpar_info_9(D)->num_points+0 S4 A32])) preproc.cpp:268 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [125])
        (reg:SI 0 ax [orig:83 D.6782 ] [83])) preproc.cpp:268 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg:SI 1 dx [126])
                (plus:SI (reg:SI 0 ax [125])
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:268 220 {*addsi_1}
     (nil))
(insn 17 16 18 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [125])
            (const_int 0 [0]))) preproc.cpp:268 3 {*cmpsi_ccno_1}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [125])
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 1 dx [126])
            (reg:SI 0 ax [125]))) preproc.cpp:268 931 {*movsicc_noc}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 0 ax [127])
                (ashiftrt:SI (reg:SI 0 ax [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:268 530 {*ashrsi3_1}
     (nil))
(insn 20 19 21 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])
        (reg:SI 0 ax [127])) preproc.cpp:268 90 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) preproc.cpp:270 89 {*movdi_internal}
     (nil))
(insn 22 21 25 2 (set (reg:SI 0 ax [orig:84 D.6782 ] [84])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 300 [0x12c])) [0 procpar_info_9(D)->num_points+0 S4 A32])) preproc.cpp:270 90 {*movsi_internal}
     (nil))
(insn 25 22 26 2 (parallel [
            (set (reg:SI 0 ax [130])
                (minus:SI (reg:SI 0 ax [orig:84 D.6782 ] [84])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:270 263 {*subsi_1}
     (nil))
(insn 26 25 123 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (reg:SI 0 ax [130])) preproc.cpp:270 90 {*movsi_internal}
     (nil))
(jump_insn 123 26 124 2 (set (pc)
        (label_ref 50)) preproc.cpp:270 636 {jump}
     (nil)
 -> 50)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 124 123 54)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 131 132 133 134 135 136 137 138
(code_label 54 124 29 3 50 "" [1 uses])
(note 29 54 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 3 (set (reg:SI 0 ax [131])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:272 90 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:DI 0 ax [orig:86 D.6783 ] [86])
        (sign_extend:DI (reg:SI 0 ax [131]))) preproc.cpp:272 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 33 3 (parallel [
            (set (reg:DI 1 dx [orig:87 D.6783 ] [87])
                (ashift:DI (reg:DI 0 ax [orig:86 D.6783 ] [86])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:272 497 {*ashldi3_1}
     (nil))
(insn 33 32 34 3 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:272 89 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.6784 ] [88])
                (plus:DI (reg/f:DI 0 ax [132])
                    (reg:DI 1 dx [orig:87 D.6783 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:272 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:87 D.6783 ] [87]))
        (nil)))
(insn 35 34 36 3 (set (reg:SF 21 xmm0 [orig:89 D.6785 ] [89])
        (mem:SF (reg/f:DI 0 ax [orig:88 D.6784 ] [88]) [0 *_18+0 S4 A32])) preproc.cpp:272 129 {*movsf_internal}
     (nil))
(insn 36 35 37 3 (set (reg:SF 22 xmm1 [134])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])) preproc.cpp:272 129 {*movsf_internal}
     (nil))
(insn 37 36 129 3 (set (reg:SF 22 xmm1 [133])
        (plus:SF (reg:SF 22 xmm1 [133])
            (reg:SF 21 xmm0 [orig:89 D.6785 ] [89]))) preproc.cpp:272 775 {*fop_sf_comm_sse}
     (nil))
(insn 129 37 38 3 (set (reg:SF 0 ax [133])
        (reg:SF 22 xmm1 [133])) preproc.cpp:272 129 {*movsf_internal}
     (nil))
(insn 38 129 39 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 0 ax [133])) preproc.cpp:272 129 {*movsf_internal}
     (nil))
(insn 39 38 40 3 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:273 90 {*movsi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:DI 0 ax [orig:90 D.6786 ] [90])
        (sign_extend:DI (reg:SI 0 ax [135]))) preproc.cpp:273 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 3 (parallel [
            (set (reg:DI 0 ax [orig:91 D.6786 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 D.6786 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:273 221 {*adddi_1}
     (nil))
(insn 42 41 43 3 (parallel [
            (set (reg:DI 1 dx [orig:92 D.6786 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.6786 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:273 497 {*ashldi3_1}
     (nil))
(insn 43 42 44 3 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:273 89 {*movdi_internal}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.6784 ] [93])
                (plus:DI (reg/f:DI 0 ax [136])
                    (reg:DI 1 dx [orig:92 D.6786 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:273 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.6786 ] [92]))
        (nil)))
(insn 45 44 46 3 (set (reg:SF 21 xmm0 [orig:94 D.6785 ] [94])
        (mem:SF (reg/f:DI 0 ax [orig:93 D.6784 ] [93]) [0 *_24+0 S4 A32])) preproc.cpp:273 129 {*movsf_internal}
     (nil))
(insn 46 45 47 3 (set (reg:SF 22 xmm1 [138])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])) preproc.cpp:273 129 {*movsf_internal}
     (nil))
(insn 47 46 131 3 (set (reg:SF 22 xmm1 [137])
        (plus:SF (reg:SF 22 xmm1 [137])
            (reg:SF 21 xmm0 [orig:94 D.6785 ] [94]))) preproc.cpp:273 775 {*fop_sf_comm_sse}
     (nil))
(insn 131 47 48 3 (set (reg:SF 0 ax [137])
        (reg:SF 22 xmm1 [137])) preproc.cpp:273 129 {*movsf_internal}
     (nil))
(insn 48 131 49 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 0 ax [137])) preproc.cpp:273 129 {*movsf_internal}
     (nil))
(insn 49 48 50 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:270 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 85 139
(code_label 50 49 51 4 49 "" [1 uses])
(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 4 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) preproc.cpp:270 89 {*movdi_internal}
     (nil))
(insn 53 52 55 4 (set (reg:SI 0 ax [orig:85 D.6782 ] [85])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 300 [0x12c])) [0 procpar_info_9(D)->num_points+0 S4 A32])) preproc.cpp:270 90 {*movsi_internal}
     (nil))
(insn 55 53 56 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:85 D.6782 ] [85])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) preproc.cpp:270 7 {*cmpsi_1}
     (nil))
(jump_insn 56 55 57 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) preproc.cpp:270 596 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 95 96 97 98 99 100 140 141 142 143 144 145
(note 57 56 58 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 5 (set (reg:DF 21 xmm0 [orig:95 D.6787 ] [95])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32]))) preproc.cpp:276 201 {*floatsidf2_sse}
     (nil))
(insn 59 58 60 5 (set (reg:DF 22 xmm1 [140])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) preproc.cpp:276 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 60 59 61 5 (set (reg:DF 21 xmm0 [orig:96 D.6787 ] [96])
        (div:DF (reg:DF 21 xmm0 [orig:95 D.6787 ] [95])
            (reg:DF 22 xmm1 [140]))) preproc.cpp:276 783 {*fop_df_1_sse}
     (nil))
(insn 61 60 62 5 (set (reg:SF 21 xmm0 [orig:97 D.6785 ] [97])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:96 D.6787 ] [96]))) preproc.cpp:276 157 {*truncdfsf_fast_sse}
     (nil))
(insn 62 61 63 5 (set (reg:SF 22 xmm1 [142])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])) preproc.cpp:276 129 {*movsf_internal}
     (nil))
(insn 63 62 133 5 (set (reg:SF 22 xmm1 [141])
        (div:SF (reg:SF 22 xmm1 [141])
            (reg:SF 21 xmm0 [orig:97 D.6785 ] [97]))) preproc.cpp:276 782 {*fop_sf_1_sse}
     (nil))
(insn 133 63 64 5 (set (reg:SF 0 ax [141])
        (reg:SF 22 xmm1 [141])) preproc.cpp:276 129 {*movsf_internal}
     (nil))
(insn 64 133 65 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32])
        (reg:SF 0 ax [141])) preproc.cpp:276 129 {*movsf_internal}
     (nil))
(insn 65 64 66 5 (set (reg:DF 21 xmm0 [orig:98 D.6787 ] [98])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 last_eighth+0 S4 A32]))) preproc.cpp:277 201 {*floatsidf2_sse}
     (nil))
(insn 66 65 67 5 (set (reg:DF 22 xmm1 [143])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC8") [flags 0x2]) [0  S8 A64])) preproc.cpp:277 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(insn 67 66 68 5 (set (reg:DF 21 xmm0 [orig:99 D.6787 ] [99])
        (div:DF (reg:DF 21 xmm0 [orig:98 D.6787 ] [98])
            (reg:DF 22 xmm1 [143]))) preproc.cpp:277 783 {*fop_df_1_sse}
     (nil))
(insn 68 67 69 5 (set (reg:SF 21 xmm0 [orig:100 D.6785 ] [100])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:99 D.6787 ] [99]))) preproc.cpp:277 157 {*truncdfsf_fast_sse}
     (nil))
(insn 69 68 70 5 (set (reg:SF 22 xmm1 [145])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])) preproc.cpp:277 129 {*movsf_internal}
     (nil))
(insn 70 69 135 5 (set (reg:SF 22 xmm1 [144])
        (div:SF (reg:SF 22 xmm1 [144])
            (reg:SF 21 xmm0 [orig:100 D.6785 ] [100]))) preproc.cpp:277 782 {*fop_sf_1_sse}
     (nil))
(insn 135 70 71 5 (set (reg:SF 0 ax [144])
        (reg:SF 22 xmm1 [144])) preproc.cpp:277 129 {*movsf_internal}
     (nil))
(insn 71 135 72 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32])
        (reg:SF 0 ax [144])) preproc.cpp:277 129 {*movsf_internal}
     (nil))
(insn 72 71 125 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:279 90 {*movsi_internal}
     (nil))
(jump_insn 125 72 126 5 (set (pc)
        (label_ref 105)) preproc.cpp:279 636 {jump}
     (nil)
 -> 105)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 126 125 109)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 146 147 148 149 150 151 152 153
(code_label 109 126 75 6 52 "" [1 uses])
(note 75 109 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 6 (set (reg:SI 0 ax [146])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:281 90 {*movsi_internal}
     (nil))
(insn 77 76 78 6 (set (reg:DI 0 ax [orig:102 D.6783 ] [102])
        (sign_extend:DI (reg:SI 0 ax [146]))) preproc.cpp:281 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 6 (parallel [
            (set (reg:DI 1 dx [orig:103 D.6783 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6783 ] [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:281 497 {*ashldi3_1}
     (nil))
(insn 79 78 80 6 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:281 89 {*movdi_internal}
     (nil))
(insn 80 79 81 6 (parallel [
            (set (reg/f:DI 1 dx [orig:104 D.6784 ] [104])
                (plus:DI (reg:DI 1 dx [orig:103 D.6783 ] [103])
                    (reg/f:DI 0 ax [147])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:281 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.6783 ] [103]))
        (nil)))
(insn 81 80 82 6 (set (reg:SI 0 ax [148])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:281 90 {*movsi_internal}
     (nil))
(insn 82 81 83 6 (set (reg:DI 0 ax [orig:105 D.6783 ] [105])
        (sign_extend:DI (reg:SI 0 ax [148]))) preproc.cpp:281 142 {*extendsidi2_rex64}
     (nil))
(insn 83 82 84 6 (parallel [
            (set (reg:DI 2 cx [orig:106 D.6783 ] [106])
                (ashift:DI (reg:DI 0 ax [orig:105 D.6783 ] [105])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:281 497 {*ashldi3_1}
     (nil))
(insn 84 83 85 6 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:281 89 {*movdi_internal}
     (nil))
(insn 85 84 86 6 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.6784 ] [107])
                (plus:DI (reg/f:DI 0 ax [149])
                    (reg:DI 2 cx [orig:106 D.6783 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:281 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:106 D.6783 ] [106]))
        (nil)))
(insn 86 85 87 6 (set (reg:SF 21 xmm0 [orig:108 D.6785 ] [108])
        (mem:SF (reg/f:DI 0 ax [orig:107 D.6784 ] [107]) [0 *_43+0 S4 A32])) preproc.cpp:281 129 {*movsf_internal}
     (nil))
(insn 87 86 137 6 (set (reg:SF 21 xmm0 [orig:109 D.6785 ] [109])
        (minus:SF (reg:SF 21 xmm0 [orig:109 D.6785 ] [109])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 average_offset_real+0 S4 A32]))) preproc.cpp:281 782 {*fop_sf_1_sse}
     (nil))
(insn 137 87 88 6 (set (reg:SF 0 ax [orig:109 D.6785 ] [109])
        (reg:SF 21 xmm0 [orig:109 D.6785 ] [109])) preproc.cpp:281 129 {*movsf_internal}
     (nil))
(insn 88 137 89 6 (set (mem:SF (reg/f:DI 1 dx [orig:104 D.6784 ] [104]) [0 *_40+0 S4 A32])
        (reg:SF 0 ax [orig:109 D.6785 ] [109])) preproc.cpp:281 129 {*movsf_internal}
     (nil))
(insn 89 88 90 6 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:282 90 {*movsi_internal}
     (nil))
(insn 90 89 91 6 (set (reg:DI 0 ax [orig:110 D.6786 ] [110])
        (sign_extend:DI (reg:SI 0 ax [150]))) preproc.cpp:282 142 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 6 (parallel [
            (set (reg:DI 0 ax [orig:111 D.6786 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 D.6786 ] [110])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 221 {*adddi_1}
     (nil))
(insn 92 91 93 6 (parallel [
            (set (reg:DI 1 dx [orig:112 D.6786 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:111 D.6786 ] [111])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 497 {*ashldi3_1}
     (nil))
(insn 93 92 94 6 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:282 89 {*movdi_internal}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg/f:DI 1 dx [orig:113 D.6784 ] [113])
                (plus:DI (reg:DI 1 dx [orig:112 D.6786 ] [112])
                    (reg/f:DI 0 ax [151])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.6786 ] [112]))
        (nil)))
(insn 95 94 96 6 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])) preproc.cpp:282 90 {*movsi_internal}
     (nil))
(insn 96 95 97 6 (set (reg:DI 0 ax [orig:114 D.6786 ] [114])
        (sign_extend:DI (reg:SI 0 ax [152]))) preproc.cpp:282 142 {*extendsidi2_rex64}
     (nil))
(insn 97 96 98 6 (parallel [
            (set (reg:DI 0 ax [orig:115 D.6786 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 D.6786 ] [114])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 221 {*adddi_1}
     (nil))
(insn 98 97 99 6 (parallel [
            (set (reg:DI 2 cx [orig:116 D.6786 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.6786 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 497 {*ashldi3_1}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])) preproc.cpp:282 89 {*movdi_internal}
     (nil))
(insn 100 99 101 6 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6784 ] [117])
                (plus:DI (reg/f:DI 0 ax [153])
                    (reg:DI 2 cx [orig:116 D.6786 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:282 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:116 D.6786 ] [116]))
        (nil)))
(insn 101 100 102 6 (set (reg:SF 21 xmm0 [orig:118 D.6785 ] [118])
        (mem:SF (reg/f:DI 0 ax [orig:117 D.6784 ] [117]) [0 *_53+0 S4 A32])) preproc.cpp:282 129 {*movsf_internal}
     (nil))
(insn 102 101 139 6 (set (reg:SF 21 xmm0 [orig:119 D.6785 ] [119])
        (minus:SF (reg:SF 21 xmm0 [orig:119 D.6785 ] [119])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 average_offset_imag+0 S4 A32]))) preproc.cpp:282 782 {*fop_sf_1_sse}
     (nil))
(insn 139 102 103 6 (set (reg:SF 0 ax [orig:119 D.6785 ] [119])
        (reg:SF 21 xmm0 [orig:119 D.6785 ] [119])) preproc.cpp:282 129 {*movsf_internal}
     (nil))
(insn 103 139 104 6 (set (mem:SF (reg/f:DI 1 dx [orig:113 D.6784 ] [113]) [0 *_49+0 S4 A32])
        (reg:SF 0 ax [orig:119 D.6785 ] [119])) preproc.cpp:282 129 {*movsf_internal}
     (nil))
(insn 104 103 105 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:279 220 {*addsi_1}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 154
(code_label 105 104 106 7 51 "" [1 uses])
(note 106 105 107 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 7 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 procpar_info+0 S8 A64])) preproc.cpp:279 89 {*movdi_internal}
     (nil))
(insn 108 107 110 7 (set (reg:SI 0 ax [orig:101 D.6782 ] [101])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [154])
                (const_int 300 [0x12c])) [0 procpar_info_9(D)->num_points+0 S4 A32])) preproc.cpp:279 90 {*movsi_internal}
     (nil))
(insn 110 108 111 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:101 D.6782 ] [101])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 j+0 S4 A32]))) preproc.cpp:279 7 {*cmpsi_1}
     (nil))
(jump_insn 111 110 112 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) preproc.cpp:279 596 {*jcc_1}
     (nil)
 -> 109)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 120 121
(note 112 111 113 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 116 8 (set (reg:SI 0 ax [orig:120 D.6782 ] [120])
        (const_int 1 [0x1])) preproc.cpp:285 90 {*movsi_internal}
     (nil))
(insn 116 113 120 8 (set (reg:SI 0 ax [orig:121 <retval> ] [121])
        (reg:SI 0 ax [orig:120 D.6782 ] [120])) preproc.cpp:285 90 {*movsi_internal}
     (nil))
(insn 120 116 121 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:121 <retval> ] [121])) preproc.cpp:286 90 {*movsi_internal}
     (nil))
(insn 121 120 127 8 (use (reg/i:SI 0 ax)) preproc.cpp:286 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 127 121 0 NOTE_INSN_DELETED)

;; Function int ecc_correction(float*, float*, Procpar_info*, Preprocess*) (_Z14ecc_correctionPfS_P12Procpar_infoP10Preprocess, funcdef_no=5, decl_uid=5364, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 11:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 13:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 17:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 31:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 55:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 57
	 Choosing alt 0 in insn 57:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 61:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 62:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 75
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 76:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 81:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 82:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 87
	 Choosing alt 0 in insn 87:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 88:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 95:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 112:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 114
	 Choosing alt 0 in insn 114:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 0 in insn 115:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 118:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 119:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 130:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 133:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 138:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 139:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 140:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 141:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=240 from oldreg=222, assigning class SSE_REGS to r240
  141: r240:DF=r240:DF-[frame:DI-0x28]
      REG_DEAD r223:DF
    Inserting insn reload before:
  222: r240:DF=r223:DF
    Inserting insn reload after:
  223: r222:DF=r240:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 223:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 142:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 143:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 144:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=241 from oldreg=224, assigning class SSE_REGS to r241
  144: r241:DF=r241:DF-[frame:DI-0x28]
      REG_DEAD r225:DF
    Inserting insn reload before:
  224: r241:DF=r225:DF
    Inserting insn reload after:
  225: r224:DF=r241:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 225:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 145:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 151:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=242 from oldreg=159, assigning class SSE_REGS to r242
  151: r242:SF=float_trunc([frame:DI-0x40])
    Inserting insn reload after:
  226: r159:SF=r242:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 226:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 152:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=243, assigning class NO_REGS to secondary r243
  153: r243:DF=r228:DF
      REG_DEAD r228:DF
    Inserting the sec. move after:
  227: xmm0:DF=r243:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 227:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 157
	 Choosing alt 0 in insn 157:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=244 from oldreg=162, assigning class SSE_REGS to r244
      Creating newreg=245 from oldreg=159, assigning class SSE_REGS to r245
      Making reload reg 245 for reg 159 optional
  157: r244:SF=r244:SF*r245:SF
      REG_DEAD r161:SF
      REG_DEAD r159:SF
    Inserting insn reload before:
  228: r244:SF=r161:SF
  230: r245:SF=r159:SF
    Inserting insn reload after:
  229: r162:SF=r244:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 229:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 230:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 158:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 165:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=246 from oldreg=167, assigning class SSE_REGS to r246
  165: r246:SF=float_trunc([frame:DI-0x40])
    Inserting insn reload after:
  231: r167:SF=r246:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 231:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 166:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=247, assigning class NO_REGS to secondary r247
  167: r247:DF=r231:DF
      REG_DEAD r231:DF
    Inserting the sec. move after:
  232: xmm0:DF=r247:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 232:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 171
	 Choosing alt 0 in insn 171:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=248 from oldreg=170, assigning class SSE_REGS to r248
      Creating newreg=249 from oldreg=167, assigning class SSE_REGS to r249
      Making reload reg 249 for reg 167 optional
  171: r248:SF=r248:SF*r249:SF
      REG_DEAD r169:SF
      REG_DEAD r167:SF
    Inserting insn reload before:
  233: r248:SF=r169:SF
  235: r249:SF=r167:SF
    Inserting insn reload after:
  234: r170:SF=r248:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 234:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 235:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 172:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 178:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=250 from oldreg=174, assigning class SSE_REGS to r250
  178: r250:SF=float_trunc([frame:DI-0x38])
    Inserting insn reload after:
  236: r174:SF=r250:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 236:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 179:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=251, assigning class NO_REGS to secondary r251
  180: r251:DF=r234:DF
      REG_DEAD r234:DF
    Inserting the sec. move after:
  237: xmm0:DF=r251:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 237:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=252 from oldreg=177, assigning class SSE_REGS to r252
      Creating newreg=253 from oldreg=174, assigning class SSE_REGS to r253
      Making reload reg 253 for reg 174 optional
  184: r252:SF=r252:SF*r253:SF
      REG_DEAD r176:SF
      REG_DEAD r174:SF
    Inserting insn reload before:
  238: r252:SF=r176:SF
  240: r253:SF=r174:SF
    Inserting insn reload after:
  239: r177:SF=r252:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 239:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 240:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 185:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 188:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 190:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 192:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=254 from oldreg=182, assigning class SSE_REGS to r254
  192: r254:SF=float_trunc([frame:DI-0x38])
    Inserting insn reload after:
  241: r182:SF=r254:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 241:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 193:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=255, assigning class NO_REGS to secondary r255
  194: r255:DF=r237:DF
      REG_DEAD r237:DF
    Inserting the sec. move after:
  242: xmm0:DF=r255:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 242:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=256 from oldreg=185, assigning class SSE_REGS to r256
      Creating newreg=257 from oldreg=182, assigning class SSE_REGS to r257
      Making reload reg 257 for reg 182 optional
  198: r256:SF=r256:SF*r257:SF
      REG_DEAD r184:SF
      REG_DEAD r182:SF
    Inserting insn reload before:
  243: r256:SF=r184:SF
  245: r257:SF=r182:SF
    Inserting insn reload after:
  244: r185:SF=r256:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 244:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 245:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 199:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 200:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=258 from oldreg=182, assigning class SSE_REGS to inheritance r258
    Original reg change 182->258 (bb3):
  241: r258:SF=r254:SF
    Add original<-inheritance after:
  246: r182:SF=r258:SF

    Inheritance reuse change 182->258 (bb3):
  245: r257:SF=r258:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=259 from oldreg=174, assigning class SSE_REGS to inheritance r259
    Original reg change 174->259 (bb3):
  236: r259:SF=r250:SF
    Add original<-inheritance after:
  247: r174:SF=r259:SF

    Inheritance reuse change 174->259 (bb3):
  240: r253:SF=r259:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=260 from oldreg=167, assigning class SSE_REGS to inheritance r260
    Original reg change 167->260 (bb3):
  231: r260:SF=r246:SF
    Add original<-inheritance after:
  248: r167:SF=r260:SF

    Inheritance reuse change 167->260 (bb3):
  235: r249:SF=r260:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=261 from oldreg=159, assigning class SSE_REGS to inheritance r261
    Original reg change 159->261 (bb3):
  226: r261:SF=r242:SF
    Add original<-inheritance after:
  249: r159:SF=r261:SF

    Inheritance reuse change 159->261 (bb3):
  230: r245:SF=r261:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   246: r182:SF=r258:SF
deleting insn with uid = 246.
	    Removing dead insn:
   247: r174:SF=r259:SF
deleting insn with uid = 247.
	    Removing dead insn:
   248: r167:SF=r260:SF
deleting insn with uid = 248.
	    Removing dead insn:
   249: r159:SF=r261:SF
deleting insn with uid = 249.
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 217: point = 0
   Insn 216: point = 0
   Insn 212: point = 1
   Insn 209: point = 3
  BB 4
   Insn 207: point = 4
   Insn 206: point = 4
   Insn 204: point = 5
   Insn 203: point = 7
  BB 2
   Insn 219: point = 8
   Insn 22: point = 8
   Insn 21: point = 8
   Insn 20: point = 9
   Insn 19: point = 10
   Insn 18: point = 11
   Insn 17: point = 12
   Insn 16: point = 13
   Insn 15: point = 14
   Insn 14: point = 15
   Insn 13: point = 16
   Insn 12: point = 17
   Insn 11: point = 18
   Insn 10: point = 19
   Insn 9: point = 20
   Insn 5: point = 20
   Insn 4: point = 20
   Insn 3: point = 20
   Insn 2: point = 20
  BB 3
   Insn 200: point = 20
   Insn 199: point = 20
   Insn 244: point = 21
	Hard reg 0 is preferable by r256 with profit 1
   Insn 198: point = 23
   Insn 245: point = 24
	   Creating copy r257<-r258@1
   Insn 243: point = 26
	Hard reg 0 is preferable by r256 with profit 1
	Hard reg 21 is preferable by r256 with profit 1
   Insn 197: point = 28
   Insn 196: point = 30
   Insn 195: point = 31
   Insn 242: point = 31
	Hard reg 21 is preferable by r255 with profit 1
   Insn 194: point = 32
	Hard reg 21 is preferable by r255 with profit 1
	Hard reg 0 is preferable by r255 with profit 1
   Insn 193: point = 34
   Insn 241: point = 35
	   Creating copy r254->r258@1
   Insn 192: point = 37
   Insn 191: point = 38
   Insn 190: point = 40
   Insn 189: point = 41
   Insn 188: point = 43
   Insn 187: point = 45
   Insn 186: point = 47
   Insn 185: point = 48
   Insn 239: point = 49
	Hard reg 0 is preferable by r252 with profit 1
   Insn 184: point = 51
   Insn 240: point = 52
	   Creating copy r253<-r259@1
   Insn 238: point = 54
	Hard reg 0 is preferable by r252 with profit 1
	Hard reg 21 is preferable by r252 with profit 1
   Insn 183: point = 56
   Insn 182: point = 58
   Insn 181: point = 59
   Insn 237: point = 59
	Hard reg 21 is preferable by r251 with profit 1
   Insn 180: point = 60
	Hard reg 21 is preferable by r251 with profit 1
	Hard reg 0 is preferable by r251 with profit 1
   Insn 179: point = 62
   Insn 236: point = 63
	   Creating copy r250->r259@1
   Insn 178: point = 65
   Insn 177: point = 66
   Insn 176: point = 68
   Insn 175: point = 69
   Insn 174: point = 71
   Insn 173: point = 73
   Insn 172: point = 74
   Insn 234: point = 75
	Hard reg 0 is preferable by r248 with profit 1
   Insn 171: point = 77
   Insn 235: point = 78
	   Creating copy r249<-r260@1
   Insn 233: point = 80
	Hard reg 0 is preferable by r248 with profit 1
	Hard reg 21 is preferable by r248 with profit 1
   Insn 170: point = 82
   Insn 169: point = 84
   Insn 168: point = 85
   Insn 232: point = 85
	Hard reg 21 is preferable by r247 with profit 1
   Insn 167: point = 86
	Hard reg 21 is preferable by r247 with profit 1
	Hard reg 0 is preferable by r247 with profit 1
   Insn 166: point = 88
   Insn 231: point = 89
	   Creating copy r246->r260@1
   Insn 165: point = 91
   Insn 164: point = 92
   Insn 163: point = 94
   Insn 162: point = 95
   Insn 161: point = 97
   Insn 160: point = 99
   Insn 159: point = 101
   Insn 158: point = 102
   Insn 229: point = 103
	Hard reg 0 is preferable by r244 with profit 1
   Insn 157: point = 105
   Insn 230: point = 106
	   Creating copy r245<-r261@1
   Insn 228: point = 108
	Hard reg 0 is preferable by r244 with profit 1
	Hard reg 21 is preferable by r244 with profit 1
   Insn 156: point = 110
   Insn 155: point = 112
   Insn 154: point = 113
   Insn 227: point = 113
	Hard reg 21 is preferable by r243 with profit 1
   Insn 153: point = 114
	Hard reg 21 is preferable by r243 with profit 1
	Hard reg 0 is preferable by r243 with profit 1
   Insn 152: point = 116
   Insn 226: point = 117
	   Creating copy r242->r261@1
   Insn 151: point = 119
   Insn 150: point = 120
   Insn 149: point = 122
   Insn 148: point = 123
   Insn 147: point = 125
   Insn 146: point = 127
   Insn 145: point = 128
   Insn 225: point = 129
	Hard reg 0 is preferable by r241 with profit 1
   Insn 144: point = 131
   Insn 224: point = 131
	Hard reg 0 is preferable by r241 with profit 1
	Hard reg 21 is preferable by r241 with profit 1
   Insn 143: point = 133
   Insn 142: point = 134
   Insn 223: point = 135
	Hard reg 0 is preferable by r240 with profit 1
   Insn 141: point = 137
   Insn 222: point = 137
	Hard reg 0 is preferable by r240 with profit 1
	Hard reg 21 is preferable by r240 with profit 1
   Insn 140: point = 139
   Insn 139: point = 140
   Insn 138: point = 141
   Insn 137: point = 142
   Insn 136: point = 142
   Insn 135: point = 143
   Insn 134: point = 144
   Insn 133: point = 146
   Insn 132: point = 148
   Insn 131: point = 150
   Insn 130: point = 151
   Insn 129: point = 153
   Insn 128: point = 155
   Insn 127: point = 157
   Insn 126: point = 158
   Insn 125: point = 160
   Insn 124: point = 162
   Insn 123: point = 164
   Insn 122: point = 165
   Insn 121: point = 167
   Insn 120: point = 169
   Insn 119: point = 170
   Insn 118: point = 171
   Insn 117: point = 172
   Insn 116: point = 172
   Insn 115: point = 173
   Insn 114: point = 175
   Insn 113: point = 177
   Insn 112: point = 179
   Insn 111: point = 181
   Insn 110: point = 183
   Insn 109: point = 184
   Insn 108: point = 186
   Insn 107: point = 188
   Insn 106: point = 190
   Insn 105: point = 191
   Insn 104: point = 193
   Insn 103: point = 195
   Insn 102: point = 197
   Insn 101: point = 198
   Insn 100: point = 200
   Insn 99: point = 202
   Insn 98: point = 204
   Insn 97: point = 205
   Insn 96: point = 207
   Insn 95: point = 209
   Insn 94: point = 211
   Insn 93: point = 213
   Insn 92: point = 214
   Insn 91: point = 216
   Insn 90: point = 218
   Insn 89: point = 219
   Insn 88: point = 221
   Insn 87: point = 223
   Insn 86: point = 225
   Insn 85: point = 226
   Insn 84: point = 228
   Insn 83: point = 230
   Insn 82: point = 231
   Insn 81: point = 232
   Insn 80: point = 233
   Insn 79: point = 233
   Insn 78: point = 234
   Insn 77: point = 235
   Insn 76: point = 237
   Insn 75: point = 239
   Insn 74: point = 241
   Insn 73: point = 242
   Insn 72: point = 244
   Insn 71: point = 246
   Insn 70: point = 248
   Insn 69: point = 249
   Insn 68: point = 251
   Insn 67: point = 253
   Insn 66: point = 255
   Insn 65: point = 256
   Insn 64: point = 258
   Insn 63: point = 260
   Insn 62: point = 261
   Insn 61: point = 262
   Insn 60: point = 263
   Insn 59: point = 263
   Insn 58: point = 264
   Insn 57: point = 266
   Insn 56: point = 268
   Insn 55: point = 270
   Insn 54: point = 272
   Insn 53: point = 274
   Insn 52: point = 275
   Insn 51: point = 277
   Insn 50: point = 279
   Insn 49: point = 281
   Insn 48: point = 282
   Insn 47: point = 284
   Insn 46: point = 286
   Insn 45: point = 288
   Insn 44: point = 289
   Insn 43: point = 291
   Insn 42: point = 293
   Insn 41: point = 295
   Insn 40: point = 296
   Insn 39: point = 298
   Insn 38: point = 300
   Insn 37: point = 302
   Insn 36: point = 304
   Insn 35: point = 305
   Insn 34: point = 307
   Insn 33: point = 309
   Insn 32: point = 310
   Insn 31: point = 312
   Insn 30: point = 314
   Insn 29: point = 316
   Insn 28: point = 317
   Insn 27: point = 319
   Insn 26: point = 321
 r83: [4..5]
 r84: [318..319]
 r85: [315..317]
 r86: [313..314]
 r87: [311..312]
 r88: [297..310]
 r89: [306..307]
 r90: [303..305]
 r91: [301..302]
 r92: [299..300]
 r93: [297..298]
 r94: [265..296]
 r95: [292..293]
 r96: [290..291]
 r97: [287..289]
 r98: [285..286]
 r99: [283..284]
 r100: [267..282]
 r101: [278..279]
 r102: [276..277]
 r103: [273..275]
 r104: [271..272]
 r105: [269..270]
 r106: [267..268]
 r107: [265..266]
 r108: [263..264]
 r109: [257..258]
 r110: [254..256]
 r111: [252..253]
 r112: [250..251]
 r113: [234..249]
 r114: [245..246]
 r115: [243..244]
 r116: [240..242]
 r117: [238..239]
 r118: [236..237]
 r119: [233..235]
 r120: [227..228]
 r121: [224..226]
 r122: [222..223]
 r123: [220..221]
 r124: [206..219]
 r125: [215..216]
 r126: [212..214]
 r127: [210..211]
 r128: [208..209]
 r129: [206..207]
 r130: [174..205]
 r131: [201..202]
 r132: [199..200]
 r133: [196..198]
 r134: [194..195]
 r135: [192..193]
 r136: [176..191]
 r137: [187..188]
 r138: [185..186]
 r139: [182..184]
 r140: [180..181]
 r141: [178..179]
 r142: [176..177]
 r143: [174..175]
 r144: [172..173]
 r145: [166..167]
 r146: [163..165]
 r147: [161..162]
 r148: [159..160]
 r149: [143..158]
 r150: [154..155]
 r151: [152..153]
 r152: [149..151]
 r153: [147..148]
 r154: [145..146]
 r155: [142..144]
 r156: [124..125]
 r157: [121..123]
 r158: [102..120]
 r160: [111..112]
 r161: [109..110]
 r162: [102..103]
 r163: [98..99]
 r164: [96..97]
 r165: [93..95]
 r166: [74..92]
 r168: [83..84]
 r169: [81..82]
 r170: [74..75]
 r171: [70..71]
 r172: [67..69]
 r173: [48..66]
 r175: [57..58]
 r176: [55..56]
 r177: [48..49]
 r178: [44..45]
 r179: [42..43]
 r180: [39..41]
 r181: [20..38]
 r183: [29..30]
 r184: [27..28]
 r185: [20..21]
 r186: [2..3]
 r187: [0..1]
 r188: [18..19]
 r189: [16..17]
 r190: [14..15]
 r191: [12..13]
 r192: [10..11]
 r193: [8..9]
 r194: [320..321]
 r195: [315..316]
 r196: [308..309]
 r197: [303..304]
 r198: [294..295]
 r199: [287..288]
 r200: [280..281]
 r201: [273..274]
 r202: [261..262]
 r203: [259..260]
 r204: [254..255]
 r205: [247..248]
 r206: [240..241]
 r207: [231..232]
 r208: [229..230]
 r209: [224..225]
 r210: [217..218]
 r211: [212..213]
 r212: [203..204]
 r213: [196..197]
 r214: [189..190]
 r215: [182..183]
 r216: [170..171]
 r217: [168..169]
 r218: [163..164]
 r219: [156..157]
 r220: [149..150]
 r221: [140..141]
 r222: [134..135]
 r223: [138..139]
 r224: [128..129]
 r225: [132..133]
 r226: [126..127]
 r227: [121..122]
 r228: [115..116]
 r229: [100..101]
 r230: [93..94]
 r231: [87..88]
 r232: [72..73]
 r233: [67..68]
 r234: [61..62]
 r235: [46..47]
 r236: [39..40]
 r237: [33..34]
 r238: [6..7]
 r240: [136..137]
 r241: [130..131]
 r242: [118..119]
 r243: [113..114]
 r244: [104..108]
 r245: [105..106]
 r246: [90..91]
 r247: [85..86]
 r248: [76..80]
 r249: [77..78]
 r250: [64..65]
 r251: [59..60]
 r252: [50..54]
 r253: [51..52]
 r254: [36..37]
 r255: [31..32]
 r256: [22..26]
 r257: [23..24]
 r258: [25..35]
 r259: [53..63]
 r260: [79..89]
 r261: [107..117]
Compressing live ranges: from 322 to 284 - 88%
Ranges after the compression:
 r83: [4..5]
 r84: [280..281]
 r85: [278..279]
 r86: [276..277]
 r87: [274..275]
 r88: [262..273]
 r89: [270..271]
 r90: [268..269]
 r91: [266..267]
 r92: [264..265]
 r93: [262..263]
 r94: [234..261]
 r95: [258..259]
 r96: [256..257]
 r97: [254..255]
 r98: [252..253]
 r99: [250..251]
 r100: [236..249]
 r101: [246..247]
 r102: [244..245]
 r103: [242..243]
 r104: [240..241]
 r105: [238..239]
 r106: [236..237]
 r107: [234..235]
 r108: [232..233]
 r109: [226..227]
 r110: [224..225]
 r111: [222..223]
 r112: [220..221]
 r113: [206..219]
 r114: [216..217]
 r115: [214..215]
 r116: [212..213]
 r117: [210..211]
 r118: [208..209]
 r119: [206..207]
 r120: [200..201]
 r121: [198..199]
 r122: [196..197]
 r123: [194..195]
 r124: [182..193]
 r125: [190..191]
 r126: [188..189]
 r127: [186..187]
 r128: [184..185]
 r129: [182..183]
 r130: [154..181]
 r131: [178..179]
 r132: [176..177]
 r133: [174..175]
 r134: [172..173]
 r135: [170..171]
 r136: [156..169]
 r137: [166..167]
 r138: [164..165]
 r139: [162..163]
 r140: [160..161]
 r141: [158..159]
 r142: [156..157]
 r143: [154..155]
 r144: [152..153]
 r145: [146..147]
 r146: [144..145]
 r147: [142..143]
 r148: [140..141]
 r149: [126..139]
 r150: [136..137]
 r151: [134..135]
 r152: [132..133]
 r153: [130..131]
 r154: [128..129]
 r155: [126..127]
 r156: [108..109]
 r157: [106..107]
 r158: [90..105]
 r160: [98..99]
 r161: [96..97]
 r162: [90..91]
 r163: [86..87]
 r164: [84..85]
 r165: [82..83]
 r166: [66..81]
 r168: [74..75]
 r169: [72..73]
 r170: [66..67]
 r171: [62..63]
 r172: [60..61]
 r173: [44..59]
 r175: [52..53]
 r176: [50..51]
 r177: [44..45]
 r178: [40..41]
 r179: [38..39]
 r180: [36..37]
 r181: [20..35]
 r183: [28..29]
 r184: [26..27]
 r185: [20..21]
 r186: [2..3]
 r187: [0..1]
 r188: [18..19]
 r189: [16..17]
 r190: [14..15]
 r191: [12..13]
 r192: [10..11]
 r193: [8..9]
 r194: [282..283]
 r195: [278..279]
 r196: [272..273]
 r197: [268..269]
 r198: [260..261]
 r199: [254..255]
 r200: [248..249]
 r201: [242..243]
 r202: [230..231]
 r203: [228..229]
 r204: [224..225]
 r205: [218..219]
 r206: [212..213]
 r207: [204..205]
 r208: [202..203]
 r209: [198..199]
 r210: [192..193]
 r211: [188..189]
 r212: [180..181]
 r213: [174..175]
 r214: [168..169]
 r215: [162..163]
 r216: [150..151]
 r217: [148..149]
 r218: [144..145]
 r219: [138..139]
 r220: [132..133]
 r221: [124..125]
 r222: [118..119]
 r223: [122..123]
 r224: [112..113]
 r225: [116..117]
 r226: [110..111]
 r227: [106..107]
 r228: [102..103]
 r229: [88..89]
 r230: [82..83]
 r231: [78..79]
 r232: [64..65]
 r233: [60..61]
 r234: [56..57]
 r235: [42..43]
 r236: [36..37]
 r237: [32..33]
 r238: [6..7]
 r240: [120..121]
 r241: [114..115]
 r242: [104..105]
 r243: [100..101]
 r244: [92..95]
 r245: [92..93]
 r246: [80..81]
 r247: [76..77]
 r248: [68..71]
 r249: [68..69]
 r250: [58..59]
 r251: [54..55]
 r252: [46..49]
 r253: [46..47]
 r254: [34..35]
 r255: [30..31]
 r256: [22..25]
 r257: [22..23]
 r258: [24..33]
 r259: [48..57]
 r260: [70..79]
 r261: [94..103]

********** Assignment #1: **********

	 Assigning to 240 (cl=SSE_REGS, orig=222, freq=3, tfirst=240, tfreq=3)...
	   Assign 21 to reload r240 (freq=3)
	 Assigning to 241 (cl=SSE_REGS, orig=224, freq=3, tfirst=241, tfreq=3)...
	   Assign 21 to reload r241 (freq=3)
	 Assigning to 244 (cl=SSE_REGS, orig=162, freq=3, tfirst=244, tfreq=3)...
	   Assign 21 to reload r244 (freq=3)
	 Assigning to 248 (cl=SSE_REGS, orig=170, freq=3, tfirst=248, tfreq=3)...
	   Assign 21 to reload r248 (freq=3)
	 Assigning to 252 (cl=SSE_REGS, orig=177, freq=3, tfirst=252, tfreq=3)...
	   Assign 21 to reload r252 (freq=3)
	 Assigning to 256 (cl=SSE_REGS, orig=185, freq=3, tfirst=256, tfreq=3)...
	   Assign 21 to reload r256 (freq=3)
	 Assigning to 242 (cl=SSE_REGS, orig=159, freq=2, tfirst=242, tfreq=2)...
	   Assign 24 to reload r242 (freq=2)
	Hard reg 24 is preferable by r261 with profit 1
	Hard reg 24 is preferable by r245 with profit 1
	 Assigning to 245 (cl=SSE_REGS, orig=159, freq=2, tfirst=242, tfreq=2)...
	   Assign 24 to optional reload r245 (freq=2)
	Hard reg 24 is preferable by r261 with profit 2
	 Assigning to 261 (cl=SSE_REGS, orig=159, freq=2, tfirst=242, tfreq=2)...
	 Assigning to 246 (cl=SSE_REGS, orig=167, freq=2, tfirst=246, tfreq=2)...
	   Assign 25 to reload r246 (freq=2)
	Hard reg 25 is preferable by r260 with profit 1
	Hard reg 25 is preferable by r249 with profit 1
	 Assigning to 249 (cl=SSE_REGS, orig=167, freq=2, tfirst=246, tfreq=2)...
	   Assign 25 to optional reload r249 (freq=2)
	Hard reg 25 is preferable by r260 with profit 2
	 Assigning to 260 (cl=SSE_REGS, orig=167, freq=2, tfirst=246, tfreq=2)...
	 Assigning to 250 (cl=SSE_REGS, orig=174, freq=2, tfirst=250, tfreq=2)...
	   Assign 26 to reload r250 (freq=2)
	Hard reg 26 is preferable by r259 with profit 1
	Hard reg 26 is preferable by r253 with profit 1
	 Assigning to 253 (cl=SSE_REGS, orig=174, freq=2, tfirst=250, tfreq=2)...
	   Assign 26 to optional reload r253 (freq=2)
	Hard reg 26 is preferable by r259 with profit 2
	 Assigning to 259 (cl=SSE_REGS, orig=174, freq=2, tfirst=250, tfreq=2)...
	 Assigning to 254 (cl=SSE_REGS, orig=182, freq=2, tfirst=254, tfreq=2)...
	   Assign 27 to reload r254 (freq=2)
	Hard reg 27 is preferable by r258 with profit 1
	Hard reg 27 is preferable by r257 with profit 1
	 Assigning to 257 (cl=SSE_REGS, orig=182, freq=2, tfirst=254, tfreq=2)...
	   Assign 27 to optional reload r257 (freq=2)
	Hard reg 27 is preferable by r258 with profit 2
	 Assigning to 258 (cl=SSE_REGS, orig=182, freq=2, tfirst=254, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  245: r257:SF=r182:SF
      REG_DEAD r182:SF
   Insn after restoring regs:
  241: r182:SF=r254:SF
      REG_DEAD r254:SF
   Insn after restoring regs:
  240: r253:SF=r174:SF
      REG_DEAD r174:SF
   Insn after restoring regs:
  236: r174:SF=r250:SF
      REG_DEAD r250:SF
   Insn after restoring regs:
  235: r249:SF=r167:SF
      REG_DEAD r167:SF
   Insn after restoring regs:
  231: r167:SF=r246:SF
      REG_DEAD r246:SF
   Insn after restoring regs:
  230: r245:SF=r159:SF
      REG_DEAD r159:SF
   Insn after restoring regs:
  226: r159:SF=r242:SF
      REG_DEAD r242:SF
Remove optional reload reg 245
  Restoring original insn:
  157: r244:SF=r244:SF*r159:SF
      REG_DEAD r159:SF
  Deleting move 230
  230: r245:SF=r159:SF
      REG_DEAD r159:SF
deleting insn with uid = 230.
Remove optional reload reg 249
  Restoring original insn:
  171: r248:SF=r248:SF*r167:SF
      REG_DEAD r167:SF
  Deleting move 235
  235: r249:SF=r167:SF
      REG_DEAD r167:SF
deleting insn with uid = 235.
Remove optional reload reg 253
  Restoring original insn:
  184: r252:SF=r252:SF*r174:SF
      REG_DEAD r174:SF
  Deleting move 240
  240: r253:SF=r174:SF
      REG_DEAD r174:SF
deleting insn with uid = 240.
Remove optional reload reg 257
  Restoring original insn:
  198: r256:SF=r256:SF*r182:SF
      REG_DEAD r182:SF
  Deleting move 245
  245: r257:SF=r182:SF
      REG_DEAD r182:SF
deleting insn with uid = 245.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=262 from oldreg=182, assigning class SSE_REGS to r262
      Making reload reg 262 for reg 182 optional
  198: r256:SF=r256:SF*r262:SF
      REG_DEAD r182:SF
    Inserting insn reload before:
  250: r262:SF=r182:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 250:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=263 from oldreg=174, assigning class SSE_REGS to r263
      Making reload reg 263 for reg 174 optional
  184: r252:SF=r252:SF*r263:SF
      REG_DEAD r174:SF
    Inserting insn reload before:
  251: r263:SF=r174:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 251:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 171:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=264 from oldreg=167, assigning class SSE_REGS to r264
      Making reload reg 264 for reg 167 optional
  171: r248:SF=r248:SF*r264:SF
      REG_DEAD r167:SF
    Inserting insn reload before:
  252: r264:SF=r167:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=265 from oldreg=159, assigning class SSE_REGS to r265
      Making reload reg 265 for reg 159 optional
  157: r244:SF=r244:SF*r265:SF
      REG_DEAD r159:SF
    Inserting insn reload before:
  253: r265:SF=r159:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 253:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=266 from oldreg=182, assigning class SSE_REGS to inheritance r266
    Original reg change 182->266 (bb3):
  241: r266:SF=r254:SF
      REG_DEAD r254:SF
    Add original<-inheritance after:
  254: r182:SF=r266:SF

    Inheritance reuse change 182->266 (bb3):
  250: r262:SF=r266:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=267 from oldreg=174, assigning class SSE_REGS to inheritance r267
    Original reg change 174->267 (bb3):
  236: r267:SF=r250:SF
      REG_DEAD r250:SF
    Add original<-inheritance after:
  255: r174:SF=r267:SF

    Inheritance reuse change 174->267 (bb3):
  251: r263:SF=r267:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=268 from oldreg=167, assigning class SSE_REGS to inheritance r268
    Original reg change 167->268 (bb3):
  231: r268:SF=r246:SF
      REG_DEAD r246:SF
    Add original<-inheritance after:
  256: r167:SF=r268:SF

    Inheritance reuse change 167->268 (bb3):
  252: r264:SF=r268:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=269 from oldreg=159, assigning class SSE_REGS to inheritance r269
    Original reg change 159->269 (bb3):
  226: r269:SF=r242:SF
      REG_DEAD r242:SF
    Add original<-inheritance after:
  257: r159:SF=r269:SF

    Inheritance reuse change 159->269 (bb3):
  253: r265:SF=r269:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   254: r182:SF=r266:SF
deleting insn with uid = 254.
	    Removing dead insn:
   255: r174:SF=r267:SF
deleting insn with uid = 255.
	    Removing dead insn:
   256: r167:SF=r268:SF
deleting insn with uid = 256.
	    Removing dead insn:
   257: r159:SF=r269:SF
deleting insn with uid = 257.
EBB 4
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
   Insn 217: point = 0
   Insn 216: point = 0
   Insn 212: point = 1
   Insn 209: point = 3
  BB 4
   Insn 207: point = 4
   Insn 206: point = 4
   Insn 204: point = 5
   Insn 203: point = 7
  BB 2
   Insn 219: point = 8
   Insn 22: point = 8
   Insn 21: point = 8
   Insn 20: point = 9
   Insn 19: point = 10
   Insn 18: point = 11
   Insn 17: point = 12
   Insn 16: point = 13
   Insn 15: point = 14
   Insn 14: point = 15
   Insn 13: point = 16
   Insn 12: point = 17
   Insn 11: point = 18
   Insn 10: point = 19
   Insn 9: point = 20
   Insn 5: point = 20
   Insn 4: point = 20
   Insn 3: point = 20
   Insn 2: point = 20
  BB 3
   Insn 200: point = 20
   Insn 199: point = 20
   Insn 244: point = 21
	Hard reg 0 is preferable by r256 with profit 1
   Insn 198: point = 23
   Insn 250: point = 24
	   Creating copy r262<-r266@1
   Insn 243: point = 26
	Hard reg 0 is preferable by r256 with profit 1
	Hard reg 21 is preferable by r256 with profit 1
   Insn 197: point = 28
   Insn 196: point = 30
   Insn 195: point = 31
   Insn 242: point = 31
	Hard reg 21 is preferable by r255 with profit 1
   Insn 194: point = 32
	Hard reg 21 is preferable by r255 with profit 1
	Hard reg 0 is preferable by r255 with profit 1
   Insn 193: point = 34
   Insn 241: point = 35
	   Creating copy r254->r266@1
   Insn 192: point = 37
   Insn 191: point = 38
   Insn 190: point = 40
   Insn 189: point = 41
   Insn 188: point = 43
   Insn 187: point = 45
   Insn 186: point = 47
   Insn 185: point = 48
   Insn 239: point = 49
	Hard reg 0 is preferable by r252 with profit 1
   Insn 184: point = 51
   Insn 251: point = 52
	   Creating copy r263<-r267@1
   Insn 238: point = 54
	Hard reg 0 is preferable by r252 with profit 1
	Hard reg 21 is preferable by r252 with profit 1
   Insn 183: point = 56
   Insn 182: point = 58
   Insn 181: point = 59
   Insn 237: point = 59
	Hard reg 21 is preferable by r251 with profit 1
   Insn 180: point = 60
	Hard reg 21 is preferable by r251 with profit 1
	Hard reg 0 is preferable by r251 with profit 1
   Insn 179: point = 62
   Insn 236: point = 63
	   Creating copy r250->r267@1
   Insn 178: point = 65
   Insn 177: point = 66
   Insn 176: point = 68
   Insn 175: point = 69
   Insn 174: point = 71
   Insn 173: point = 73
   Insn 172: point = 74
   Insn 234: point = 75
	Hard reg 0 is preferable by r248 with profit 1
   Insn 171: point = 77
   Insn 252: point = 78
	   Creating copy r264<-r268@1
   Insn 233: point = 80
	Hard reg 0 is preferable by r248 with profit 1
	Hard reg 21 is preferable by r248 with profit 1
   Insn 170: point = 82
   Insn 169: point = 84
   Insn 168: point = 85
   Insn 232: point = 85
	Hard reg 21 is preferable by r247 with profit 1
   Insn 167: point = 86
	Hard reg 21 is preferable by r247 with profit 1
	Hard reg 0 is preferable by r247 with profit 1
   Insn 166: point = 88
   Insn 231: point = 89
	   Creating copy r246->r268@1
   Insn 165: point = 91
   Insn 164: point = 92
   Insn 163: point = 94
   Insn 162: point = 95
   Insn 161: point = 97
   Insn 160: point = 99
   Insn 159: point = 101
   Insn 158: point = 102
   Insn 229: point = 103
	Hard reg 0 is preferable by r244 with profit 1
   Insn 157: point = 105
   Insn 253: point = 106
	   Creating copy r265<-r269@1
   Insn 228: point = 108
	Hard reg 0 is preferable by r244 with profit 1
	Hard reg 21 is preferable by r244 with profit 1
   Insn 156: point = 110
   Insn 155: point = 112
   Insn 154: point = 113
   Insn 227: point = 113
	Hard reg 21 is preferable by r243 with profit 1
   Insn 153: point = 114
	Hard reg 21 is preferable by r243 with profit 1
	Hard reg 0 is preferable by r243 with profit 1
   Insn 152: point = 116
   Insn 226: point = 117
	   Creating copy r242->r269@1
   Insn 151: point = 119
   Insn 150: point = 120
   Insn 149: point = 122
   Insn 148: point = 123
   Insn 147: point = 125
   Insn 146: point = 127
   Insn 145: point = 128
   Insn 225: point = 129
	Hard reg 0 is preferable by r241 with profit 1
   Insn 144: point = 131
   Insn 224: point = 131
	Hard reg 0 is preferable by r241 with profit 1
	Hard reg 21 is preferable by r241 with profit 1
   Insn 143: point = 133
   Insn 142: point = 134
   Insn 223: point = 135
	Hard reg 0 is preferable by r240 with profit 1
   Insn 141: point = 137
   Insn 222: point = 137
	Hard reg 0 is preferable by r240 with profit 1
	Hard reg 21 is preferable by r240 with profit 1
   Insn 140: point = 139
   Insn 139: point = 140
   Insn 138: point = 141
   Insn 137: point = 142
   Insn 136: point = 142
   Insn 135: point = 143
   Insn 134: point = 144
   Insn 133: point = 146
   Insn 132: point = 148
   Insn 131: point = 150
   Insn 130: point = 151
   Insn 129: point = 153
   Insn 128: point = 155
   Insn 127: point = 157
   Insn 126: point = 158
   Insn 125: point = 160
   Insn 124: point = 162
   Insn 123: point = 164
   Insn 122: point = 165
   Insn 121: point = 167
   Insn 120: point = 169
   Insn 119: point = 170
   Insn 118: point = 171
   Insn 117: point = 172
   Insn 116: point = 172
   Insn 115: point = 173
   Insn 114: point = 175
   Insn 113: point = 177
   Insn 112: point = 179
   Insn 111: point = 181
   Insn 110: point = 183
   Insn 109: point = 184
   Insn 108: point = 186
   Insn 107: point = 188
   Insn 106: point = 190
   Insn 105: point = 191
   Insn 104: point = 193
   Insn 103: point = 195
   Insn 102: point = 197
   Insn 101: point = 198
   Insn 100: point = 200
   Insn 99: point = 202
   Insn 98: point = 204
   Insn 97: point = 205
   Insn 96: point = 207
   Insn 95: point = 209
   Insn 94: point = 211
   Insn 93: point = 213
   Insn 92: point = 214
   Insn 91: point = 216
   Insn 90: point = 218
   Insn 89: point = 219
   Insn 88: point = 221
   Insn 87: point = 223
   Insn 86: point = 225
   Insn 85: point = 226
   Insn 84: point = 228
   Insn 83: point = 230
   Insn 82: point = 231
   Insn 81: point = 232
   Insn 80: point = 233
   Insn 79: point = 233
   Insn 78: point = 234
   Insn 77: point = 235
   Insn 76: point = 237
   Insn 75: point = 239
   Insn 74: point = 241
   Insn 73: point = 242
   Insn 72: point = 244
   Insn 71: point = 246
   Insn 70: point = 248
   Insn 69: point = 249
   Insn 68: point = 251
   Insn 67: point = 253
   Insn 66: point = 255
   Insn 65: point = 256
   Insn 64: point = 258
   Insn 63: point = 260
   Insn 62: point = 261
   Insn 61: point = 262
   Insn 60: point = 263
   Insn 59: point = 263
   Insn 58: point = 264
   Insn 57: point = 266
   Insn 56: point = 268
   Insn 55: point = 270
   Insn 54: point = 272
   Insn 53: point = 274
   Insn 52: point = 275
   Insn 51: point = 277
   Insn 50: point = 279
   Insn 49: point = 281
   Insn 48: point = 282
   Insn 47: point = 284
   Insn 46: point = 286
   Insn 45: point = 288
   Insn 44: point = 289
   Insn 43: point = 291
   Insn 42: point = 293
   Insn 41: point = 295
   Insn 40: point = 296
   Insn 39: point = 298
   Insn 38: point = 300
   Insn 37: point = 302
   Insn 36: point = 304
   Insn 35: point = 305
   Insn 34: point = 307
   Insn 33: point = 309
   Insn 32: point = 310
   Insn 31: point = 312
   Insn 30: point = 314
   Insn 29: point = 316
   Insn 28: point = 317
   Insn 27: point = 319
   Insn 26: point = 321
 r83: [4..5]
 r84: [318..319]
 r85: [315..317]
 r86: [313..314]
 r87: [311..312]
 r88: [297..310]
 r89: [306..307]
 r90: [303..305]
 r91: [301..302]
 r92: [299..300]
 r93: [297..298]
 r94: [265..296]
 r95: [292..293]
 r96: [290..291]
 r97: [287..289]
 r98: [285..286]
 r99: [283..284]
 r100: [267..282]
 r101: [278..279]
 r102: [276..277]
 r103: [273..275]
 r104: [271..272]
 r105: [269..270]
 r106: [267..268]
 r107: [265..266]
 r108: [263..264]
 r109: [257..258]
 r110: [254..256]
 r111: [252..253]
 r112: [250..251]
 r113: [234..249]
 r114: [245..246]
 r115: [243..244]
 r116: [240..242]
 r117: [238..239]
 r118: [236..237]
 r119: [233..235]
 r120: [227..228]
 r121: [224..226]
 r122: [222..223]
 r123: [220..221]
 r124: [206..219]
 r125: [215..216]
 r126: [212..214]
 r127: [210..211]
 r128: [208..209]
 r129: [206..207]
 r130: [174..205]
 r131: [201..202]
 r132: [199..200]
 r133: [196..198]
 r134: [194..195]
 r135: [192..193]
 r136: [176..191]
 r137: [187..188]
 r138: [185..186]
 r139: [182..184]
 r140: [180..181]
 r141: [178..179]
 r142: [176..177]
 r143: [174..175]
 r144: [172..173]
 r145: [166..167]
 r146: [163..165]
 r147: [161..162]
 r148: [159..160]
 r149: [143..158]
 r150: [154..155]
 r151: [152..153]
 r152: [149..151]
 r153: [147..148]
 r154: [145..146]
 r155: [142..144]
 r156: [124..125]
 r157: [121..123]
 r158: [102..120]
 r160: [111..112]
 r161: [109..110]
 r162: [102..103]
 r163: [98..99]
 r164: [96..97]
 r165: [93..95]
 r166: [74..92]
 r168: [83..84]
 r169: [81..82]
 r170: [74..75]
 r171: [70..71]
 r172: [67..69]
 r173: [48..66]
 r175: [57..58]
 r176: [55..56]
 r177: [48..49]
 r178: [44..45]
 r179: [42..43]
 r180: [39..41]
 r181: [20..38]
 r183: [29..30]
 r184: [27..28]
 r185: [20..21]
 r186: [2..3]
 r187: [0..1]
 r188: [18..19]
 r189: [16..17]
 r190: [14..15]
 r191: [12..13]
 r192: [10..11]
 r193: [8..9]
 r194: [320..321]
 r195: [315..316]
 r196: [308..309]
 r197: [303..304]
 r198: [294..295]
 r199: [287..288]
 r200: [280..281]
 r201: [273..274]
 r202: [261..262]
 r203: [259..260]
 r204: [254..255]
 r205: [247..248]
 r206: [240..241]
 r207: [231..232]
 r208: [229..230]
 r209: [224..225]
 r210: [217..218]
 r211: [212..213]
 r212: [203..204]
 r213: [196..197]
 r214: [189..190]
 r215: [182..183]
 r216: [170..171]
 r217: [168..169]
 r218: [163..164]
 r219: [156..157]
 r220: [149..150]
 r221: [140..141]
 r222: [134..135]
 r223: [138..139]
 r224: [128..129]
 r225: [132..133]
 r226: [126..127]
 r227: [121..122]
 r228: [115..116]
 r229: [100..101]
 r230: [93..94]
 r231: [87..88]
 r232: [72..73]
 r233: [67..68]
 r234: [61..62]
 r235: [46..47]
 r236: [39..40]
 r237: [33..34]
 r238: [6..7]
 r240: [136..137]
 r241: [130..131]
 r242: [118..119]
 r243: [113..114]
 r244: [104..108]
 r246: [90..91]
 r247: [85..86]
 r248: [76..80]
 r250: [64..65]
 r251: [59..60]
 r252: [50..54]
 r254: [36..37]
 r255: [31..32]
 r256: [22..26]
 r262: [23..24]
 r263: [51..52]
 r264: [77..78]
 r265: [105..106]
 r266: [25..35]
 r267: [53..63]
 r268: [79..89]
 r269: [107..117]
Compressing live ranges: from 322 to 284 - 88%
Ranges after the compression:
 r83: [4..5]
 r84: [280..281]
 r85: [278..279]
 r86: [276..277]
 r87: [274..275]
 r88: [262..273]
 r89: [270..271]
 r90: [268..269]
 r91: [266..267]
 r92: [264..265]
 r93: [262..263]
 r94: [234..261]
 r95: [258..259]
 r96: [256..257]
 r97: [254..255]
 r98: [252..253]
 r99: [250..251]
 r100: [236..249]
 r101: [246..247]
 r102: [244..245]
 r103: [242..243]
 r104: [240..241]
 r105: [238..239]
 r106: [236..237]
 r107: [234..235]
 r108: [232..233]
 r109: [226..227]
 r110: [224..225]
 r111: [222..223]
 r112: [220..221]
 r113: [206..219]
 r114: [216..217]
 r115: [214..215]
 r116: [212..213]
 r117: [210..211]
 r118: [208..209]
 r119: [206..207]
 r120: [200..201]
 r121: [198..199]
 r122: [196..197]
 r123: [194..195]
 r124: [182..193]
 r125: [190..191]
 r126: [188..189]
 r127: [186..187]
 r128: [184..185]
 r129: [182..183]
 r130: [154..181]
 r131: [178..179]
 r132: [176..177]
 r133: [174..175]
 r134: [172..173]
 r135: [170..171]
 r136: [156..169]
 r137: [166..167]
 r138: [164..165]
 r139: [162..163]
 r140: [160..161]
 r141: [158..159]
 r142: [156..157]
 r143: [154..155]
 r144: [152..153]
 r145: [146..147]
 r146: [144..145]
 r147: [142..143]
 r148: [140..141]
 r149: [126..139]
 r150: [136..137]
 r151: [134..135]
 r152: [132..133]
 r153: [130..131]
 r154: [128..129]
 r155: [126..127]
 r156: [108..109]
 r157: [106..107]
 r158: [90..105]
 r160: [98..99]
 r161: [96..97]
 r162: [90..91]
 r163: [86..87]
 r164: [84..85]
 r165: [82..83]
 r166: [66..81]
 r168: [74..75]
 r169: [72..73]
 r170: [66..67]
 r171: [62..63]
 r172: [60..61]
 r173: [44..59]
 r175: [52..53]
 r176: [50..51]
 r177: [44..45]
 r178: [40..41]
 r179: [38..39]
 r180: [36..37]
 r181: [20..35]
 r183: [28..29]
 r184: [26..27]
 r185: [20..21]
 r186: [2..3]
 r187: [0..1]
 r188: [18..19]
 r189: [16..17]
 r190: [14..15]
 r191: [12..13]
 r192: [10..11]
 r193: [8..9]
 r194: [282..283]
 r195: [278..279]
 r196: [272..273]
 r197: [268..269]
 r198: [260..261]
 r199: [254..255]
 r200: [248..249]
 r201: [242..243]
 r202: [230..231]
 r203: [228..229]
 r204: [224..225]
 r205: [218..219]
 r206: [212..213]
 r207: [204..205]
 r208: [202..203]
 r209: [198..199]
 r210: [192..193]
 r211: [188..189]
 r212: [180..181]
 r213: [174..175]
 r214: [168..169]
 r215: [162..163]
 r216: [150..151]
 r217: [148..149]
 r218: [144..145]
 r219: [138..139]
 r220: [132..133]
 r221: [124..125]
 r222: [118..119]
 r223: [122..123]
 r224: [112..113]
 r225: [116..117]
 r226: [110..111]
 r227: [106..107]
 r228: [102..103]
 r229: [88..89]
 r230: [82..83]
 r231: [78..79]
 r232: [64..65]
 r233: [60..61]
 r234: [56..57]
 r235: [42..43]
 r236: [36..37]
 r237: [32..33]
 r238: [6..7]
 r240: [120..121]
 r241: [114..115]
 r242: [104..105]
 r243: [100..101]
 r244: [92..95]
 r246: [80..81]
 r247: [76..77]
 r248: [68..71]
 r250: [58..59]
 r251: [54..55]
 r252: [46..49]
 r254: [34..35]
 r255: [30..31]
 r256: [22..25]
 r262: [22..23]
 r263: [46..47]
 r264: [68..69]
 r265: [92..93]
 r266: [24..33]
 r267: [48..57]
 r268: [70..79]
 r269: [94..103]

********** Assignment #2: **********

	 Assigning to 262 (cl=SSE_REGS, orig=182, freq=2, tfirst=262, tfreq=2)...
	   Assign 28 to optional reload r262 (freq=2)
	Hard reg 28 is preferable by r266 with profit 1
	 Assigning to 266 (cl=SSE_REGS, orig=182, freq=2, tfirst=262, tfreq=2)...
	 Assigning to 263 (cl=SSE_REGS, orig=174, freq=2, tfirst=263, tfreq=2)...
	   Assign 24 to optional reload r263 (freq=2)
	Hard reg 24 is preferable by r267 with profit 1
	 Assigning to 267 (cl=SSE_REGS, orig=174, freq=2, tfirst=263, tfreq=2)...
	 Assigning to 264 (cl=SSE_REGS, orig=167, freq=2, tfirst=264, tfreq=2)...
	   Assign 25 to optional reload r264 (freq=2)
	Hard reg 25 is preferable by r268 with profit 1
	 Assigning to 268 (cl=SSE_REGS, orig=167, freq=2, tfirst=264, tfreq=2)...
	 Assigning to 265 (cl=SSE_REGS, orig=159, freq=2, tfirst=265, tfreq=2)...
	   Assign 26 to optional reload r265 (freq=2)
	Hard reg 26 is preferable by r269 with profit 1
	 Assigning to 269 (cl=SSE_REGS, orig=159, freq=2, tfirst=265, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  250: r262:SF=r182:SF
      REG_DEAD r182:SF
   Insn after restoring regs:
  241: r182:SF=r254:SF
      REG_DEAD r254:SF
   Insn after restoring regs:
  251: r263:SF=r174:SF
      REG_DEAD r174:SF
   Insn after restoring regs:
  236: r174:SF=r250:SF
      REG_DEAD r250:SF
   Insn after restoring regs:
  252: r264:SF=r167:SF
      REG_DEAD r167:SF
   Insn after restoring regs:
  231: r167:SF=r246:SF
      REG_DEAD r246:SF
   Insn after restoring regs:
  253: r265:SF=r159:SF
      REG_DEAD r159:SF
   Insn after restoring regs:
  226: r159:SF=r242:SF
      REG_DEAD r242:SF
Keep optional reload reg 245
Keep optional reload reg 249
Keep optional reload reg 253
Keep optional reload reg 257
Remove optional reload reg 262
  Restoring original insn:
  198: r256:SF=r256:SF*r182:SF
      REG_DEAD r182:SF
  Deleting move 250
  250: r262:SF=r182:SF
      REG_DEAD r182:SF
deleting insn with uid = 250.
Remove optional reload reg 263
  Restoring original insn:
  184: r252:SF=r252:SF*r174:SF
      REG_DEAD r174:SF
  Deleting move 251
  251: r263:SF=r174:SF
      REG_DEAD r174:SF
deleting insn with uid = 251.
Remove optional reload reg 264
  Restoring original insn:
  171: r248:SF=r248:SF*r167:SF
      REG_DEAD r167:SF
  Deleting move 252
  252: r264:SF=r167:SF
      REG_DEAD r167:SF
deleting insn with uid = 252.
Remove optional reload reg 265
  Restoring original insn:
  157: r244:SF=r244:SF*r159:SF
      REG_DEAD r159:SF
  Deleting move 253
  253: r265:SF=r159:SF
      REG_DEAD r159:SF
deleting insn with uid = 253.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 171:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 157:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
   Insn 217: point = 0
   Insn 216: point = 0
   Insn 212: point = 1
   Insn 209: point = 3
  BB 4
   Insn 207: point = 4
   Insn 206: point = 4
   Insn 204: point = 5
   Insn 203: point = 7
  BB 2
   Insn 219: point = 8
   Insn 22: point = 8
   Insn 21: point = 8
   Insn 20: point = 9
   Insn 19: point = 10
   Insn 18: point = 11
   Insn 17: point = 12
   Insn 16: point = 13
   Insn 15: point = 14
   Insn 14: point = 15
   Insn 13: point = 16
   Insn 12: point = 17
   Insn 11: point = 18
   Insn 10: point = 19
   Insn 9: point = 20
   Insn 5: point = 20
   Insn 4: point = 20
   Insn 3: point = 20
   Insn 2: point = 20
  BB 3
   Insn 200: point = 20
   Insn 199: point = 20
   Insn 244: point = 21
   Insn 198: point = 23
   Insn 243: point = 24
   Insn 197: point = 26
   Insn 196: point = 28
   Insn 195: point = 29
   Insn 242: point = 29
   Insn 194: point = 30
   Insn 193: point = 32
   Insn 241: point = 33
   Insn 192: point = 35
   Insn 191: point = 36
   Insn 190: point = 38
   Insn 189: point = 39
   Insn 188: point = 41
   Insn 187: point = 43
   Insn 186: point = 45
   Insn 185: point = 46
   Insn 239: point = 47
   Insn 184: point = 49
   Insn 238: point = 50
   Insn 183: point = 52
   Insn 182: point = 54
   Insn 181: point = 55
   Insn 237: point = 55
   Insn 180: point = 56
   Insn 179: point = 58
   Insn 236: point = 59
   Insn 178: point = 61
   Insn 177: point = 62
   Insn 176: point = 64
   Insn 175: point = 65
   Insn 174: point = 67
   Insn 173: point = 69
   Insn 172: point = 70
   Insn 234: point = 71
   Insn 171: point = 73
   Insn 233: point = 74
   Insn 170: point = 76
   Insn 169: point = 78
   Insn 168: point = 79
   Insn 232: point = 79
   Insn 167: point = 80
   Insn 166: point = 82
   Insn 231: point = 83
   Insn 165: point = 85
   Insn 164: point = 86
   Insn 163: point = 88
   Insn 162: point = 89
   Insn 161: point = 91
   Insn 160: point = 93
   Insn 159: point = 95
   Insn 158: point = 96
   Insn 229: point = 97
   Insn 157: point = 99
   Insn 228: point = 100
   Insn 156: point = 102
   Insn 155: point = 104
   Insn 154: point = 105
   Insn 227: point = 105
   Insn 153: point = 106
   Insn 152: point = 108
   Insn 226: point = 109
   Insn 151: point = 111
   Insn 150: point = 112
   Insn 149: point = 114
   Insn 148: point = 115
   Insn 147: point = 117
   Insn 146: point = 119
   Insn 145: point = 120
   Insn 225: point = 121
   Insn 144: point = 123
   Insn 224: point = 123
   Insn 143: point = 125
   Insn 142: point = 126
   Insn 223: point = 127
   Insn 141: point = 129
   Insn 222: point = 129
   Insn 140: point = 131
   Insn 139: point = 132
   Insn 138: point = 133
   Insn 137: point = 134
   Insn 136: point = 134
   Insn 135: point = 135
   Insn 134: point = 136
   Insn 133: point = 138
   Insn 132: point = 140
   Insn 131: point = 142
   Insn 130: point = 143
   Insn 129: point = 145
   Insn 128: point = 147
   Insn 127: point = 149
   Insn 126: point = 150
   Insn 125: point = 152
   Insn 124: point = 154
   Insn 123: point = 156
   Insn 122: point = 157
   Insn 121: point = 159
   Insn 120: point = 161
   Insn 119: point = 162
   Insn 118: point = 163
   Insn 117: point = 164
   Insn 116: point = 164
   Insn 115: point = 165
   Insn 114: point = 167
   Insn 113: point = 169
   Insn 112: point = 171
   Insn 111: point = 173
   Insn 110: point = 175
   Insn 109: point = 176
   Insn 108: point = 178
   Insn 107: point = 180
   Insn 106: point = 182
   Insn 105: point = 183
   Insn 104: point = 185
   Insn 103: point = 187
   Insn 102: point = 189
   Insn 101: point = 190
   Insn 100: point = 192
   Insn 99: point = 194
   Insn 98: point = 196
   Insn 97: point = 197
   Insn 96: point = 199
   Insn 95: point = 201
   Insn 94: point = 203
   Insn 93: point = 205
   Insn 92: point = 206
   Insn 91: point = 208
   Insn 90: point = 210
   Insn 89: point = 211
   Insn 88: point = 213
   Insn 87: point = 215
   Insn 86: point = 217
   Insn 85: point = 218
   Insn 84: point = 220
   Insn 83: point = 222
   Insn 82: point = 223
   Insn 81: point = 224
   Insn 80: point = 225
   Insn 79: point = 225
   Insn 78: point = 226
   Insn 77: point = 227
   Insn 76: point = 229
   Insn 75: point = 231
   Insn 74: point = 233
   Insn 73: point = 234
   Insn 72: point = 236
   Insn 71: point = 238
   Insn 70: point = 240
   Insn 69: point = 241
   Insn 68: point = 243
   Insn 67: point = 245
   Insn 66: point = 247
   Insn 65: point = 248
   Insn 64: point = 250
   Insn 63: point = 252
   Insn 62: point = 253
   Insn 61: point = 254
   Insn 60: point = 255
   Insn 59: point = 255
   Insn 58: point = 256
   Insn 57: point = 258
   Insn 56: point = 260
   Insn 55: point = 262
   Insn 54: point = 264
   Insn 53: point = 266
   Insn 52: point = 267
   Insn 51: point = 269
   Insn 50: point = 271
   Insn 49: point = 273
   Insn 48: point = 274
   Insn 47: point = 276
   Insn 46: point = 278
   Insn 45: point = 280
   Insn 44: point = 281
   Insn 43: point = 283
   Insn 42: point = 285
   Insn 41: point = 287
   Insn 40: point = 288
   Insn 39: point = 290
   Insn 38: point = 292
   Insn 37: point = 294
   Insn 36: point = 296
   Insn 35: point = 297
   Insn 34: point = 299
   Insn 33: point = 301
   Insn 32: point = 302
   Insn 31: point = 304
   Insn 30: point = 306
   Insn 29: point = 308
   Insn 28: point = 309
   Insn 27: point = 311
   Insn 26: point = 313
 r159: [99..109]
 r167: [73..83]
 r174: [49..59]
 r182: [23..33]
 r243: [105..106]
 r247: [79..80]
 r251: [55..56]
 r255: [29..30]
Compressing live ranges: from 314 to 8 - 2%
Ranges after the compression:
 r159: [6..7]
 r167: [4..5]
 r174: [2..3]
 r182: [0..1]
 r243: [6..7]
 r247: [4..5]
 r251: [2..3]
 r255: [0..1]
  Slot 0 regnos (width = 4):	 159	 182	 174	 167
  Slot 1 regnos (width = 8):	 243	 255	 251	 247
Changing spilled pseudos to memory in insn #226
Changing spilled pseudos to memory in insn #153
Changing spilled pseudos to memory in insn #227
Changing spilled pseudos to memory in insn #157
Changing spilled pseudos to memory in insn #231
Changing spilled pseudos to memory in insn #167
Changing spilled pseudos to memory in insn #232
Changing spilled pseudos to memory in insn #171
Changing spilled pseudos to memory in insn #236
Changing spilled pseudos to memory in insn #180
Changing spilled pseudos to memory in insn #237
Changing spilled pseudos to memory in insn #184
Changing spilled pseudos to memory in insn #241
Changing spilled pseudos to memory in insn #194
Changing spilled pseudos to memory in insn #242
Changing spilled pseudos to memory in insn #198
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #198
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #242
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 242:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 194:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #241
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 241:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #184
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #237
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 237:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 180:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #236
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 236:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #171
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #232
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 232:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 167:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #231
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 231:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #157
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #227
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 227:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 153:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #226
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 226:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=112, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 204
changing reg in insn 206
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 40
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 78
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 97
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 135
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 136
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 150
changing reg in insn 158
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 158
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 164
changing reg in insn 164
changing reg in insn 164
changing reg in insn 172
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 177
changing reg in insn 177
changing reg in insn 177
changing reg in insn 185
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 191
changing reg in insn 199
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 209
changing reg in insn 212
changing reg in insn 212
changing reg in insn 216
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 86
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 106
changing reg in insn 107
changing reg in insn 110
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 138
changing reg in insn 139
changing reg in insn 142
changing reg in insn 140
changing reg in insn 145
changing reg in insn 143
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 159
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 166
changing reg in insn 167
changing reg in insn 173
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 186
changing reg in insn 187
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 194
changing reg in insn 203
changing reg in insn 204
deleting insn with uid = 59.
deleting insn with uid = 78.
deleting insn with uid = 79.
deleting insn with uid = 116.
deleting insn with uid = 135.
deleting insn with uid = 136.
deleting insn with uid = 222.
deleting insn with uid = 224.
deleting insn with uid = 155.
deleting insn with uid = 228.
deleting insn with uid = 169.
deleting insn with uid = 233.
deleting insn with uid = 182.
deleting insn with uid = 238.
deleting insn with uid = 196.
deleting insn with uid = 243.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 168.
verify found no changes in insn with uid = 181.
verify found no changes in insn with uid = 195.


int ecc_correction(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={102d,94u} r1={25d,17u,16e} r2={9d,1u} r3={4d,4u} r4={9d,1u} r5={9d,1u} r6={1d,87u} r7={1d,13u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={50d,1u} r18={8d} r19={8d} r20={1d,1u,16e} r21={47d,46u} r22={15d,6u} r23={11d,2u} r24={10d,1u} r25={10d,1u} r26={10d,1u} r27={10d,1u} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} 
;;    total ref usage 1077{767d,278u,32e} in 206{198 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 188 189 190 191 192 193
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:291 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:291 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:291 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) preproc.cpp:291 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:293 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DF 0 ax [188])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:294 128 {*movdf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [188])) preproc.cpp:294 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DF 0 ax [189])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:294 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [189])) preproc.cpp:294 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DF 0 ax [190])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [190])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DF 0 ax [191])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [191])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DF 0 ax [192])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 0 ax [192])) preproc.cpp:295 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DF 0 ax [193])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:296 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 0 ax [193])) preproc.cpp:296 128 {*movdf_internal}
     (nil))
(insn 22 21 219 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:299 90 {*movsi_internal}
     (nil))
(jump_insn 219 22 220 2 (set (pc)
        (label_ref 201)) preproc.cpp:299 636 {jump}
     (nil)
 -> 201)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 220 219 205)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237
(code_label 205 220 25 3 56 "" [1 uses])
(note 25 205 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:301 90 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 0 ax [orig:84 D.6789 ] [84])
        (sign_extend:DI (reg:SI 0 ax [194]))) preproc.cpp:301 142 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg:DI 1 dx [orig:85 D.6789 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 D.6789 ] [84])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:301 497 {*ashldi3_1}
     (nil))
(insn 29 28 30 3 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:301 89 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.6790 ] [86])
                (plus:DI (reg/f:DI 0 ax [195])
                    (reg:DI 1 dx [orig:85 D.6789 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:301 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.6789 ] [85]))
        (nil)))
(insn 31 30 32 3 (set (reg:SF 21 xmm0 [orig:87 D.6791 ] [87])
        (mem:SF (reg/f:DI 0 ax [orig:86 D.6790 ] [86]) [0 *_15+0 S4 A32])) preproc.cpp:301 129 {*movsf_internal}
     (nil))
(insn 32 31 33 3 (set (reg:DF 22 xmm1 [orig:88 D.6792 ] [88])
        (float_extend:DF (reg:SF 21 xmm0 [orig:87 D.6791 ] [87]))) preproc.cpp:301 152 {*extendsfdf2_sse}
     (nil))
(insn 33 32 34 3 (set (reg:SI 0 ax [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:301 90 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:DI 0 ax [orig:89 D.6789 ] [89])
        (sign_extend:DI (reg:SI 0 ax [196]))) preproc.cpp:301 142 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:DI 1 dx [orig:90 D.6789 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.6789 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:301 497 {*ashldi3_1}
     (nil))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:301 89 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6790 ] [91])
                (plus:DI (reg/f:DI 0 ax [197])
                    (reg:DI 1 dx [orig:90 D.6789 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:301 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6789 ] [90]))
        (nil)))
(insn 38 37 39 3 (set (reg:SF 21 xmm0 [orig:92 D.6791 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.6790 ] [91]) [0 *_20+0 S4 A32])) preproc.cpp:301 129 {*movsf_internal}
     (nil))
(insn 39 38 40 3 (set (reg:DF 21 xmm0 [orig:93 D.6792 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.6791 ] [92]))) preproc.cpp:301 152 {*extendsfdf2_sse}
     (nil))
(insn 40 39 41 3 (set (reg:DF 22 xmm1 [orig:94 D.6792 ] [94])
        (mult:DF (reg:DF 22 xmm1 [orig:88 D.6792 ] [88])
            (reg:DF 21 xmm0 [orig:93 D.6792 ] [93]))) preproc.cpp:301 776 {*fop_df_comm_sse}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:302 90 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:DI 0 ax [orig:95 D.6793 ] [95])
        (sign_extend:DI (reg:SI 0 ax [198]))) preproc.cpp:302 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 0 ax [orig:96 D.6793 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 D.6793 ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 221 {*adddi_1}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 1 dx [orig:97 D.6793 ] [97])
                (ashift:DI (reg:DI 0 ax [orig:96 D.6793 ] [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 497 {*ashldi3_1}
     (nil))
(insn 45 44 46 3 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:302 89 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.6790 ] [98])
                (plus:DI (reg/f:DI 0 ax [199])
                    (reg:DI 1 dx [orig:97 D.6793 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.6793 ] [97]))
        (nil)))
(insn 47 46 48 3 (set (reg:SF 21 xmm0 [orig:99 D.6791 ] [99])
        (mem:SF (reg/f:DI 0 ax [orig:98 D.6790 ] [98]) [0 *_27+0 S4 A32])) preproc.cpp:302 129 {*movsf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DF 23 xmm2 [orig:100 D.6792 ] [100])
        (float_extend:DF (reg:SF 21 xmm0 [orig:99 D.6791 ] [99]))) preproc.cpp:302 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 3 (set (reg:SI 0 ax [200])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:302 90 {*movsi_internal}
     (nil))
(insn 50 49 51 3 (set (reg:DI 0 ax [orig:101 D.6793 ] [101])
        (sign_extend:DI (reg:SI 0 ax [200]))) preproc.cpp:302 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 3 (parallel [
            (set (reg:DI 0 ax [orig:102 D.6793 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 D.6793 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 221 {*adddi_1}
     (nil))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 1 dx [orig:103 D.6793 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6793 ] [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 497 {*ashldi3_1}
     (nil))
(insn 53 52 54 3 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:302 89 {*movdi_internal}
     (nil))
(insn 54 53 55 3 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6790 ] [104])
                (plus:DI (reg/f:DI 0 ax [201])
                    (reg:DI 1 dx [orig:103 D.6793 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:302 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.6793 ] [103]))
        (nil)))
(insn 55 54 56 3 (set (reg:SF 21 xmm0 [orig:105 D.6791 ] [105])
        (mem:SF (reg/f:DI 0 ax [orig:104 D.6790 ] [104]) [0 *_33+0 S4 A32])) preproc.cpp:302 129 {*movsf_internal}
     (nil))
(insn 56 55 57 3 (set (reg:DF 21 xmm0 [orig:106 D.6792 ] [106])
        (float_extend:DF (reg:SF 21 xmm0 [orig:105 D.6791 ] [105]))) preproc.cpp:302 152 {*extendsfdf2_sse}
     (nil))
(insn 57 56 58 3 (set (reg:DF 21 xmm0 [orig:107 D.6792 ] [107])
        (mult:DF (reg:DF 21 xmm0 [orig:106 D.6792 ] [106])
            (reg:DF 23 xmm2 [orig:100 D.6792 ] [100]))) preproc.cpp:302 776 {*fop_df_comm_sse}
     (nil))
(insn 58 57 60 3 (set (reg:DF 21 xmm0 [orig:108 D.6792 ] [108])
        (plus:DF (reg:DF 21 xmm0 [orig:107 D.6792 ] [107])
            (reg:DF 22 xmm1 [orig:94 D.6792 ] [94]))) preproc.cpp:302 776 {*fop_df_comm_sse}
     (nil))
(call_insn 60 58 61 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:302 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 61 60 62 3 (set (reg:DF 0 ax [202])
        (reg:DF 21 xmm0)) preproc.cpp:302 128 {*movdf_internal}
     (nil))
(insn 62 61 63 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [202])) preproc.cpp:302 128 {*movdf_internal}
     (nil))
(insn 63 62 64 3 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:304 90 {*movsi_internal}
     (nil))
(insn 64 63 65 3 (set (reg:DI 0 ax [orig:109 D.6789 ] [109])
        (sign_extend:DI (reg:SI 0 ax [203]))) preproc.cpp:304 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 66 3 (parallel [
            (set (reg:DI 1 dx [orig:110 D.6789 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 D.6789 ] [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 3 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:304 89 {*movdi_internal}
     (nil))
(insn 67 66 68 3 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.6790 ] [111])
                (plus:DI (reg/f:DI 0 ax [204])
                    (reg:DI 1 dx [orig:110 D.6789 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.6789 ] [110]))
        (nil)))
(insn 68 67 69 3 (set (reg:SF 21 xmm0 [orig:112 D.6791 ] [112])
        (mem:SF (reg/f:DI 0 ax [orig:111 D.6790 ] [111]) [0 *_41+0 S4 A32])) preproc.cpp:304 129 {*movsf_internal}
     (nil))
(insn 69 68 70 3 (set (reg:DF 22 xmm1 [orig:113 D.6792 ] [113])
        (float_extend:DF (reg:SF 21 xmm0 [orig:112 D.6791 ] [112]))) preproc.cpp:304 152 {*extendsfdf2_sse}
     (nil))
(insn 70 69 71 3 (set (reg:SI 0 ax [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:304 90 {*movsi_internal}
     (nil))
(insn 71 70 72 3 (set (reg:DI 0 ax [orig:114 D.6793 ] [114])
        (sign_extend:DI (reg:SI 0 ax [205]))) preproc.cpp:304 142 {*extendsidi2_rex64}
     (nil))
(insn 72 71 73 3 (parallel [
            (set (reg:DI 0 ax [orig:115 D.6793 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 D.6793 ] [114])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 221 {*adddi_1}
     (nil))
(insn 73 72 74 3 (parallel [
            (set (reg:DI 1 dx [orig:116 D.6793 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.6793 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 497 {*ashldi3_1}
     (nil))
(insn 74 73 75 3 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:304 89 {*movdi_internal}
     (nil))
(insn 75 74 76 3 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6790 ] [117])
                (plus:DI (reg/f:DI 0 ax [206])
                    (reg:DI 1 dx [orig:116 D.6793 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:304 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.6793 ] [116]))
        (nil)))
(insn 76 75 77 3 (set (reg:SF 21 xmm0 [orig:118 D.6791 ] [118])
        (mem:SF (reg/f:DI 0 ax [orig:117 D.6790 ] [117]) [0 *_47+0 S4 A32])) preproc.cpp:304 129 {*movsf_internal}
     (nil))
(insn 77 76 80 3 (set (reg:DF 21 xmm0 [orig:119 D.6792 ] [119])
        (float_extend:DF (reg:SF 21 xmm0 [orig:118 D.6791 ] [118]))) preproc.cpp:304 152 {*extendsfdf2_sse}
     (nil))
(call_insn 80 77 81 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b5719291100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:304 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 81 80 82 3 (set (reg:DF 0 ax [207])
        (reg:DF 21 xmm0)) preproc.cpp:304 128 {*movdf_internal}
     (nil))
(insn 82 81 83 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [207])) preproc.cpp:304 128 {*movdf_internal}
     (nil))
(insn 83 82 84 3 (set (reg:SI 0 ax [208])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:306 90 {*movsi_internal}
     (nil))
(insn 84 83 85 3 (set (reg:DI 0 ax [orig:120 D.6789 ] [120])
        (sign_extend:DI (reg:SI 0 ax [208]))) preproc.cpp:306 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 3 (parallel [
            (set (reg:DI 1 dx [orig:121 D.6789 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.6789 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:306 497 {*ashldi3_1}
     (nil))
(insn 86 85 87 3 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:306 89 {*movdi_internal}
     (nil))
(insn 87 86 88 3 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.6790 ] [122])
                (plus:DI (reg/f:DI 0 ax [209])
                    (reg:DI 1 dx [orig:121 D.6789 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:306 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.6789 ] [121]))
        (nil)))
(insn 88 87 89 3 (set (reg:SF 21 xmm0 [orig:123 D.6791 ] [123])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.6790 ] [122]) [0 *_54+0 S4 A32])) preproc.cpp:306 129 {*movsf_internal}
     (nil))
(insn 89 88 90 3 (set (reg:DF 22 xmm1 [orig:124 D.6792 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.6791 ] [123]))) preproc.cpp:306 152 {*extendsfdf2_sse}
     (nil))
(insn 90 89 91 3 (set (reg:SI 0 ax [210])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:306 90 {*movsi_internal}
     (nil))
(insn 91 90 92 3 (set (reg:DI 0 ax [orig:125 D.6789 ] [125])
        (sign_extend:DI (reg:SI 0 ax [210]))) preproc.cpp:306 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 3 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6789 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.6789 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:306 497 {*ashldi3_1}
     (nil))
(insn 93 92 94 3 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:306 89 {*movdi_internal}
     (nil))
(insn 94 93 95 3 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.6790 ] [127])
                (plus:DI (reg/f:DI 0 ax [211])
                    (reg:DI 1 dx [orig:126 D.6789 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:306 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6789 ] [126]))
        (nil)))
(insn 95 94 96 3 (set (reg:SF 21 xmm0 [orig:128 D.6791 ] [128])
        (mem:SF (reg/f:DI 0 ax [orig:127 D.6790 ] [127]) [0 *_59+0 S4 A32])) preproc.cpp:306 129 {*movsf_internal}
     (nil))
(insn 96 95 97 3 (set (reg:DF 21 xmm0 [orig:129 D.6792 ] [129])
        (float_extend:DF (reg:SF 21 xmm0 [orig:128 D.6791 ] [128]))) preproc.cpp:306 152 {*extendsfdf2_sse}
     (nil))
(insn 97 96 98 3 (set (reg:DF 22 xmm1 [orig:130 D.6792 ] [130])
        (mult:DF (reg:DF 22 xmm1 [orig:124 D.6792 ] [124])
            (reg:DF 21 xmm0 [orig:129 D.6792 ] [129]))) preproc.cpp:306 776 {*fop_df_comm_sse}
     (nil))
(insn 98 97 99 3 (set (reg:SI 0 ax [212])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:307 90 {*movsi_internal}
     (nil))
(insn 99 98 100 3 (set (reg:DI 0 ax [orig:131 D.6793 ] [131])
        (sign_extend:DI (reg:SI 0 ax [212]))) preproc.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 100 99 101 3 (parallel [
            (set (reg:DI 0 ax [orig:132 D.6793 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 D.6793 ] [131])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 221 {*adddi_1}
     (nil))
(insn 101 100 102 3 (parallel [
            (set (reg:DI 1 dx [orig:133 D.6793 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6793 ] [132])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 497 {*ashldi3_1}
     (nil))
(insn 102 101 103 3 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:307 89 {*movdi_internal}
     (nil))
(insn 103 102 104 3 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6790 ] [134])
                (plus:DI (reg/f:DI 0 ax [213])
                    (reg:DI 1 dx [orig:133 D.6793 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6793 ] [133]))
        (nil)))
(insn 104 103 105 3 (set (reg:SF 21 xmm0 [orig:135 D.6791 ] [135])
        (mem:SF (reg/f:DI 0 ax [orig:134 D.6790 ] [134]) [0 *_66+0 S4 A32])) preproc.cpp:307 129 {*movsf_internal}
     (nil))
(insn 105 104 106 3 (set (reg:DF 23 xmm2 [orig:136 D.6792 ] [136])
        (float_extend:DF (reg:SF 21 xmm0 [orig:135 D.6791 ] [135]))) preproc.cpp:307 152 {*extendsfdf2_sse}
     (nil))
(insn 106 105 107 3 (set (reg:SI 0 ax [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:307 90 {*movsi_internal}
     (nil))
(insn 107 106 108 3 (set (reg:DI 0 ax [orig:137 D.6793 ] [137])
        (sign_extend:DI (reg:SI 0 ax [214]))) preproc.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 108 107 109 3 (parallel [
            (set (reg:DI 0 ax [orig:138 D.6793 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 D.6793 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 221 {*adddi_1}
     (nil))
(insn 109 108 110 3 (parallel [
            (set (reg:DI 1 dx [orig:139 D.6793 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.6793 ] [138])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 497 {*ashldi3_1}
     (nil))
(insn 110 109 111 3 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:307 89 {*movdi_internal}
     (nil))
(insn 111 110 112 3 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.6790 ] [140])
                (plus:DI (reg/f:DI 0 ax [215])
                    (reg:DI 1 dx [orig:139 D.6793 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:307 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.6793 ] [139]))
        (nil)))
(insn 112 111 113 3 (set (reg:SF 21 xmm0 [orig:141 D.6791 ] [141])
        (mem:SF (reg/f:DI 0 ax [orig:140 D.6790 ] [140]) [0 *_72+0 S4 A32])) preproc.cpp:307 129 {*movsf_internal}
     (nil))
(insn 113 112 114 3 (set (reg:DF 21 xmm0 [orig:142 D.6792 ] [142])
        (float_extend:DF (reg:SF 21 xmm0 [orig:141 D.6791 ] [141]))) preproc.cpp:307 152 {*extendsfdf2_sse}
     (nil))
(insn 114 113 115 3 (set (reg:DF 21 xmm0 [orig:143 D.6792 ] [143])
        (mult:DF (reg:DF 21 xmm0 [orig:142 D.6792 ] [142])
            (reg:DF 23 xmm2 [orig:136 D.6792 ] [136]))) preproc.cpp:307 776 {*fop_df_comm_sse}
     (nil))
(insn 115 114 117 3 (set (reg:DF 21 xmm0 [orig:144 D.6792 ] [144])
        (plus:DF (reg:DF 21 xmm0 [orig:143 D.6792 ] [143])
            (reg:DF 22 xmm1 [orig:130 D.6792 ] [130]))) preproc.cpp:307 776 {*fop_df_comm_sse}
     (nil))
(call_insn 117 115 118 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:307 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 118 117 119 3 (set (reg:DF 0 ax [216])
        (reg:DF 21 xmm0)) preproc.cpp:307 128 {*movdf_internal}
     (nil))
(insn 119 118 120 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [216])) preproc.cpp:307 128 {*movdf_internal}
     (nil))
(insn 120 119 121 3 (set (reg:SI 0 ax [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:309 90 {*movsi_internal}
     (nil))
(insn 121 120 122 3 (set (reg:DI 0 ax [orig:145 D.6789 ] [145])
        (sign_extend:DI (reg:SI 0 ax [217]))) preproc.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 122 121 123 3 (parallel [
            (set (reg:DI 1 dx [orig:146 D.6789 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.6789 ] [145])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 497 {*ashldi3_1}
     (nil))
(insn 123 122 124 3 (set (reg/f:DI 0 ax [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:309 89 {*movdi_internal}
     (nil))
(insn 124 123 125 3 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6790 ] [147])
                (plus:DI (reg/f:DI 0 ax [218])
                    (reg:DI 1 dx [orig:146 D.6789 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:146 D.6789 ] [146]))
        (nil)))
(insn 125 124 126 3 (set (reg:SF 21 xmm0 [orig:148 D.6791 ] [148])
        (mem:SF (reg/f:DI 0 ax [orig:147 D.6790 ] [147]) [0 *_80+0 S4 A32])) preproc.cpp:309 129 {*movsf_internal}
     (nil))
(insn 126 125 127 3 (set (reg:DF 22 xmm1 [orig:149 D.6792 ] [149])
        (float_extend:DF (reg:SF 21 xmm0 [orig:148 D.6791 ] [148]))) preproc.cpp:309 152 {*extendsfdf2_sse}
     (nil))
(insn 127 126 128 3 (set (reg:SI 0 ax [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:309 90 {*movsi_internal}
     (nil))
(insn 128 127 129 3 (set (reg:DI 0 ax [orig:150 D.6793 ] [150])
        (sign_extend:DI (reg:SI 0 ax [219]))) preproc.cpp:309 142 {*extendsidi2_rex64}
     (nil))
(insn 129 128 130 3 (parallel [
            (set (reg:DI 0 ax [orig:151 D.6793 ] [151])
                (plus:DI (reg:DI 0 ax [orig:150 D.6793 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 221 {*adddi_1}
     (nil))
(insn 130 129 131 3 (parallel [
            (set (reg:DI 1 dx [orig:152 D.6793 ] [152])
                (ashift:DI (reg:DI 0 ax [orig:151 D.6793 ] [151])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 497 {*ashldi3_1}
     (nil))
(insn 131 130 132 3 (set (reg/f:DI 0 ax [220])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:309 89 {*movdi_internal}
     (nil))
(insn 132 131 133 3 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.6790 ] [153])
                (plus:DI (reg/f:DI 0 ax [220])
                    (reg:DI 1 dx [orig:152 D.6793 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:309 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:152 D.6793 ] [152]))
        (nil)))
(insn 133 132 134 3 (set (reg:SF 21 xmm0 [orig:154 D.6791 ] [154])
        (mem:SF (reg/f:DI 0 ax [orig:153 D.6790 ] [153]) [0 *_86+0 S4 A32])) preproc.cpp:309 129 {*movsf_internal}
     (nil))
(insn 134 133 137 3 (set (reg:DF 21 xmm0 [orig:155 D.6792 ] [155])
        (float_extend:DF (reg:SF 21 xmm0 [orig:154 D.6791 ] [154]))) preproc.cpp:309 152 {*extendsfdf2_sse}
     (nil))
(call_insn 137 134 138 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b5719291100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:309 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 138 137 139 3 (set (reg:DF 0 ax [221])
        (reg:DF 21 xmm0)) preproc.cpp:309 128 {*movdf_internal}
     (nil))
(insn 139 138 140 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [221])) preproc.cpp:309 128 {*movdf_internal}
     (nil))
(insn 140 139 141 3 (set (reg:DF 21 xmm0 [223])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_sup+0 S8 A64])) preproc.cpp:311 128 {*movdf_internal}
     (nil))
(insn 141 140 223 3 (set (reg:DF 21 xmm0 [222])
        (minus:DF (reg:DF 21 xmm0 [222])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64]))) preproc.cpp:311 783 {*fop_df_1_sse}
     (nil))
(insn 223 141 142 3 (set (reg:DF 0 ax [222])
        (reg:DF 21 xmm0 [222])) preproc.cpp:311 128 {*movdf_internal}
     (nil))
(insn 142 223 143 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 0 ax [222])) preproc.cpp:311 128 {*movdf_internal}
     (nil))
(insn 143 142 144 3 (set (reg:DF 21 xmm0 [225])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64])) preproc.cpp:312 128 {*movdf_internal}
     (nil))
(insn 144 143 225 3 (set (reg:DF 21 xmm0 [224])
        (minus:DF (reg:DF 21 xmm0 [224])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 phase_unsup+0 S8 A64]))) preproc.cpp:312 783 {*fop_df_1_sse}
     (nil))
(insn 225 144 145 3 (set (reg:DF 0 ax [224])
        (reg:DF 21 xmm0 [224])) preproc.cpp:312 128 {*movdf_internal}
     (nil))
(insn 145 225 146 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 0 ax [224])) preproc.cpp:312 128 {*movdf_internal}
     (nil))
(insn 146 145 147 3 (set (reg:SI 0 ax [226])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:314 90 {*movsi_internal}
     (nil))
(insn 147 146 148 3 (set (reg:DI 0 ax [orig:156 D.6789 ] [156])
        (sign_extend:DI (reg:SI 0 ax [226]))) preproc.cpp:314 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 3 (parallel [
            (set (reg:DI 1 dx [orig:157 D.6789 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 D.6789 ] [156])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:314 497 {*ashldi3_1}
     (nil))
(insn 149 148 150 3 (set (reg/f:DI 0 ax [227])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:314 89 {*movdi_internal}
     (nil))
(insn 150 149 151 3 (parallel [
            (set (reg/f:DI 3 bx [orig:158 D.6790 ] [158])
                (plus:DI (reg:DI 1 dx [orig:157 D.6789 ] [157])
                    (reg/f:DI 0 ax [227])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:314 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:157 D.6789 ] [157]))
        (nil)))
(insn 151 150 226 3 (set (reg:SF 24 xmm3 [orig:159 D.6791 ] [159])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64]))) preproc.cpp:314 157 {*truncdfsf_fast_sse}
     (nil))
(insn 226 151 257 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 24 xmm3 [orig:159 D.6791 ] [159])) preproc.cpp:314 129 {*movsf_internal}
     (nil))
(note 257 226 249 3 NOTE_INSN_DELETED)
(note 249 257 152 3 NOTE_INSN_DELETED)
(insn 152 249 153 3 (set (reg:DF 0 ax [228])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) preproc.cpp:314 128 {*movdf_internal}
     (nil))
(insn 153 152 227 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [228])) preproc.cpp:314 128 {*movdf_internal}
     (nil))
(insn 227 153 154 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) preproc.cpp:314 128 {*movdf_internal}
     (nil))
(call_insn/u 154 227 156 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b5719296400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:314 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 156 154 230 3 (set (reg:SF 21 xmm0 [orig:161 D.6791 ] [161])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:160 D.6792 ] [160]))) preproc.cpp:314 157 {*truncdfsf_fast_sse}
     (nil))
(note 230 156 253 3 NOTE_INSN_DELETED)
(note 253 230 157 3 NOTE_INSN_DELETED)
(insn 157 253 229 3 (set (reg:SF 21 xmm0 [orig:162 D.6791 ] [162])
        (mult:SF (reg:SF 21 xmm0 [orig:162 D.6791 ] [162])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) preproc.cpp:314 775 {*fop_sf_comm_sse}
     (nil))
(insn 229 157 158 3 (set (reg:SF 0 ax [orig:162 D.6791 ] [162])
        (reg:SF 21 xmm0 [orig:162 D.6791 ] [162])) preproc.cpp:314 129 {*movsf_internal}
     (nil))
(insn 158 229 159 3 (set (mem:SF (reg/f:DI 3 bx [orig:158 D.6790 ] [158]) [0 *_94+0 S4 A32])
        (reg:SF 0 ax [orig:162 D.6791 ] [162])) preproc.cpp:314 129 {*movsf_internal}
     (nil))
(insn 159 158 160 3 (set (reg:SI 0 ax [229])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:315 90 {*movsi_internal}
     (nil))
(insn 160 159 161 3 (set (reg:DI 0 ax [orig:163 D.6793 ] [163])
        (sign_extend:DI (reg:SI 0 ax [229]))) preproc.cpp:315 142 {*extendsidi2_rex64}
     (nil))
(insn 161 160 162 3 (parallel [
            (set (reg:DI 0 ax [orig:164 D.6793 ] [164])
                (plus:DI (reg:DI 0 ax [orig:163 D.6793 ] [163])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:315 221 {*adddi_1}
     (nil))
(insn 162 161 163 3 (parallel [
            (set (reg:DI 1 dx [orig:165 D.6793 ] [165])
                (ashift:DI (reg:DI 0 ax [orig:164 D.6793 ] [164])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:315 497 {*ashldi3_1}
     (nil))
(insn 163 162 164 3 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 sup_data+0 S8 A64])) preproc.cpp:315 89 {*movdi_internal}
     (nil))
(insn 164 163 165 3 (parallel [
            (set (reg/f:DI 3 bx [orig:166 D.6790 ] [166])
                (plus:DI (reg:DI 1 dx [orig:165 D.6793 ] [165])
                    (reg/f:DI 0 ax [230])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:315 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:165 D.6793 ] [165]))
        (nil)))
(insn 165 164 231 3 (set (reg:SF 25 xmm4 [orig:167 D.6791 ] [167])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 mag_sup+0 S8 A64]))) preproc.cpp:315 157 {*truncdfsf_fast_sse}
     (nil))
(insn 231 165 256 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 25 xmm4 [orig:167 D.6791 ] [167])) preproc.cpp:315 129 {*movsf_internal}
     (nil))
(note 256 231 248 3 NOTE_INSN_DELETED)
(note 248 256 166 3 NOTE_INSN_DELETED)
(insn 166 248 167 3 (set (reg:DF 0 ax [231])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) preproc.cpp:315 128 {*movdf_internal}
     (nil))
(insn 167 166 232 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [231])) preproc.cpp:315 128 {*movdf_internal}
     (nil))
(insn 232 167 168 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) preproc.cpp:315 128 {*movdf_internal}
     (nil))
(call_insn/u 168 232 170 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b57192d4e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:315 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 170 168 235 3 (set (reg:SF 21 xmm0 [orig:169 D.6791 ] [169])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:168 D.6792 ] [168]))) preproc.cpp:315 157 {*truncdfsf_fast_sse}
     (nil))
(note 235 170 252 3 NOTE_INSN_DELETED)
(note 252 235 171 3 NOTE_INSN_DELETED)
(insn 171 252 234 3 (set (reg:SF 21 xmm0 [orig:170 D.6791 ] [170])
        (mult:SF (reg:SF 21 xmm0 [orig:170 D.6791 ] [170])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) preproc.cpp:315 775 {*fop_sf_comm_sse}
     (nil))
(insn 234 171 172 3 (set (reg:SF 0 ax [orig:170 D.6791 ] [170])
        (reg:SF 21 xmm0 [orig:170 D.6791 ] [170])) preproc.cpp:315 129 {*movsf_internal}
     (nil))
(insn 172 234 173 3 (set (mem:SF (reg/f:DI 3 bx [orig:166 D.6790 ] [166]) [0 *_102+0 S4 A32])
        (reg:SF 0 ax [orig:170 D.6791 ] [170])) preproc.cpp:315 129 {*movsf_internal}
     (nil))
(insn 173 172 174 3 (set (reg:SI 0 ax [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:317 90 {*movsi_internal}
     (nil))
(insn 174 173 175 3 (set (reg:DI 0 ax [orig:171 D.6789 ] [171])
        (sign_extend:DI (reg:SI 0 ax [232]))) preproc.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 3 (parallel [
            (set (reg:DI 1 dx [orig:172 D.6789 ] [172])
                (ashift:DI (reg:DI 0 ax [orig:171 D.6789 ] [171])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:317 497 {*ashldi3_1}
     (nil))
(insn 176 175 177 3 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:317 89 {*movdi_internal}
     (nil))
(insn 177 176 178 3 (parallel [
            (set (reg/f:DI 3 bx [orig:173 D.6790 ] [173])
                (plus:DI (reg:DI 1 dx [orig:172 D.6789 ] [172])
                    (reg/f:DI 0 ax [233])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:317 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:172 D.6789 ] [172]))
        (nil)))
(insn 178 177 236 3 (set (reg:SF 26 xmm5 [orig:174 D.6791 ] [174])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64]))) preproc.cpp:317 157 {*truncdfsf_fast_sse}
     (nil))
(insn 236 178 255 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 26 xmm5 [orig:174 D.6791 ] [174])) preproc.cpp:317 129 {*movsf_internal}
     (nil))
(note 255 236 247 3 NOTE_INSN_DELETED)
(note 247 255 179 3 NOTE_INSN_DELETED)
(insn 179 247 180 3 (set (reg:DF 0 ax [234])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) preproc.cpp:317 128 {*movdf_internal}
     (nil))
(insn 180 179 237 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [234])) preproc.cpp:317 128 {*movdf_internal}
     (nil))
(insn 237 180 181 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) preproc.cpp:317 128 {*movdf_internal}
     (nil))
(call_insn/u 181 237 183 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b5719296400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:317 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 183 181 240 3 (set (reg:SF 21 xmm0 [orig:176 D.6791 ] [176])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:175 D.6792 ] [175]))) preproc.cpp:317 157 {*truncdfsf_fast_sse}
     (nil))
(note 240 183 251 3 NOTE_INSN_DELETED)
(note 251 240 184 3 NOTE_INSN_DELETED)
(insn 184 251 239 3 (set (reg:SF 21 xmm0 [orig:177 D.6791 ] [177])
        (mult:SF (reg:SF 21 xmm0 [orig:177 D.6791 ] [177])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) preproc.cpp:317 775 {*fop_sf_comm_sse}
     (nil))
(insn 239 184 185 3 (set (reg:SF 0 ax [orig:177 D.6791 ] [177])
        (reg:SF 21 xmm0 [orig:177 D.6791 ] [177])) preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 185 239 186 3 (set (mem:SF (reg/f:DI 3 bx [orig:173 D.6790 ] [173]) [0 *_109+0 S4 A32])
        (reg:SF 0 ax [orig:177 D.6791 ] [177])) preproc.cpp:317 129 {*movsf_internal}
     (nil))
(insn 186 185 187 3 (set (reg:SI 0 ax [235])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])) preproc.cpp:318 90 {*movsi_internal}
     (nil))
(insn 187 186 188 3 (set (reg:DI 0 ax [orig:178 D.6793 ] [178])
        (sign_extend:DI (reg:SI 0 ax [235]))) preproc.cpp:318 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 3 (parallel [
            (set (reg:DI 0 ax [orig:179 D.6793 ] [179])
                (plus:DI (reg:DI 0 ax [orig:178 D.6793 ] [178])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:318 221 {*adddi_1}
     (nil))
(insn 189 188 190 3 (parallel [
            (set (reg:DI 1 dx [orig:180 D.6793 ] [180])
                (ashift:DI (reg:DI 0 ax [orig:179 D.6793 ] [179])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:318 497 {*ashldi3_1}
     (nil))
(insn 190 189 191 3 (set (reg/f:DI 0 ax [236])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 unsup_data+0 S8 A64])) preproc.cpp:318 89 {*movdi_internal}
     (nil))
(insn 191 190 192 3 (parallel [
            (set (reg/f:DI 3 bx [orig:181 D.6790 ] [181])
                (plus:DI (reg:DI 1 dx [orig:180 D.6793 ] [180])
                    (reg/f:DI 0 ax [236])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:318 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -80 [0xffffffffffffffb0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:180 D.6793 ] [180]))
        (nil)))
(insn 192 191 241 3 (set (reg:SF 27 xmm6 [orig:182 D.6791 ] [182])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 mag_unsup+0 S8 A64]))) preproc.cpp:318 157 {*truncdfsf_fast_sse}
     (nil))
(insn 241 192 254 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32])
        (reg:SF 27 xmm6 [orig:182 D.6791 ] [182])) preproc.cpp:318 129 {*movsf_internal}
     (nil))
(note 254 241 246 3 NOTE_INSN_DELETED)
(note 246 254 193 3 NOTE_INSN_DELETED)
(insn 193 246 194 3 (set (reg:DF 0 ax [237])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) preproc.cpp:318 128 {*movdf_internal}
     (nil))
(insn 194 193 242 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])
        (reg:DF 0 ax [237])) preproc.cpp:318 128 {*movdf_internal}
     (nil))
(insn 242 194 195 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 %sfp+-112 S8 A64])) preproc.cpp:318 128 {*movdf_internal}
     (nil))
(call_insn/u 195 242 197 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b57192d4e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:318 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 197 195 245 3 (set (reg:SF 21 xmm0 [orig:184 D.6791 ] [184])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:183 D.6792 ] [183]))) preproc.cpp:318 157 {*truncdfsf_fast_sse}
     (nil))
(note 245 197 250 3 NOTE_INSN_DELETED)
(note 250 245 198 3 NOTE_INSN_DELETED)
(insn 198 250 244 3 (set (reg:SF 21 xmm0 [orig:185 D.6791 ] [185])
        (mult:SF (reg:SF 21 xmm0 [orig:185 D.6791 ] [185])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 %sfp+-100 S4 A32]))) preproc.cpp:318 775 {*fop_sf_comm_sse}
     (nil))
(insn 244 198 199 3 (set (reg:SF 0 ax [orig:185 D.6791 ] [185])
        (reg:SF 21 xmm0 [orig:185 D.6791 ] [185])) preproc.cpp:318 129 {*movsf_internal}
     (nil))
(insn 199 244 200 3 (set (mem:SF (reg/f:DI 3 bx [orig:181 D.6790 ] [181]) [0 *_117+0 S4 A32])
        (reg:SF 0 ax [orig:185 D.6791 ] [185])) preproc.cpp:318 129 {*movsf_internal}
     (nil))
(insn 200 199 201 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:299 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 238
(code_label 201 200 202 4 55 "" [1 uses])
(note 202 201 203 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 4 (set (reg/f:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 procpar_info+0 S8 A64])) preproc.cpp:299 89 {*movdi_internal}
     (nil))
(insn 204 203 206 4 (set (reg:SI 0 ax [orig:83 D.6788 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [238])
                (const_int 300 [0x12c])) [0 procpar_info_10(D)->num_points+0 S4 A32])) preproc.cpp:299 90 {*movsi_internal}
     (nil))
(insn 206 204 207 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.6788 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [0 j+0 S4 A32]))) preproc.cpp:299 7 {*cmpsi_1}
     (nil))
(jump_insn 207 206 208 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 205)
            (pc))) preproc.cpp:299 596 {*jcc_1}
     (nil)
 -> 205)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 186 187
(note 208 207 209 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 212 5 (set (reg:SI 0 ax [orig:186 D.6788 ] [186])
        (const_int 1 [0x1])) preproc.cpp:321 90 {*movsi_internal}
     (nil))
(insn 212 209 216 5 (set (reg:SI 0 ax [orig:187 <retval> ] [187])
        (reg:SI 0 ax [orig:186 D.6788 ] [186])) preproc.cpp:321 90 {*movsi_internal}
     (nil))
(insn 216 212 217 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:187 <retval> ] [187])) preproc.cpp:323 90 {*movsi_internal}
     (nil))
(insn 217 216 221 5 (use (reg/i:SI 0 ax)) preproc.cpp:323 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 221 217 0 NOTE_INSN_DELETED)

;; Function int zero_fill(float*, float*, Procpar_info*, Preprocess*) (_Z9zero_fillPfS_P12Procpar_infoP10Preprocess, funcdef_no=6, decl_uid=5381, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 45:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 54
changing reg in insn 19
changing reg in insn 57
changing reg in insn 11
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 49
changing reg in insn 51
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 57
changing reg in insn 61
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
starting the processing of deferred insns
ending the processing of deferred insns


int zero_fill(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={22d,20u} r1={7d,6u,2e} r2={2d,1u} r4={2d,1u} r5={3d,2u} r6={1d,25u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={9d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 191{120d,67u,4e} in 43{42 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84 85 95 96
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:326 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) preproc.cpp:326 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:328 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:332 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 1 dx [orig:84 D.6795 ] [84])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [95])
                (const_int 24 [0x18])) [0 preprocess_4(D)->data_zero_fill+0 S4 A32])) preproc.cpp:332 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) preproc.cpp:332 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 0 ax [orig:85 D.6795 ] [85])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [96])
                (const_int 300 [0x12c])) [0 procpar_info_6(D)->num_points+0 S4 A32])) preproc.cpp:332 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:84 D.6795 ] [84])
            (reg:SI 0 ax [orig:85 D.6795 ] [85]))) preproc.cpp:332 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) preproc.cpp:332 596 {*jcc_1}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x2b5719825c78 *.LC10>)) preproc.cpp:333 89 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x2b5719310900 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) preproc.cpp:333 649 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 64 3 (set (reg:SI 0 ax [orig:83 D.6795 ] [83])
        (const_int 0 [0])) preproc.cpp:334 90 {*movsi_internal}
     (nil))
(jump_insn 64 19 65 3 (set (pc)
        (label_ref 55)) preproc.cpp:334 636 {jump}
     (nil)
 -> 55)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

(barrier 65 64 22)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 97 98
(code_label 22 65 23 4 59 "" [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) preproc.cpp:337 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 ax [98])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [97])
                (const_int 300 [0x12c])) [0 procpar_info_6(D)->num_points+0 S4 A32])) preproc.cpp:337 90 {*movsi_internal}
     (nil))
(insn 26 25 66 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (reg:SI 0 ax [98])) preproc.cpp:337 90 {*movsi_internal}
     (nil))
(jump_insn 66 26 67 4 (set (pc)
        (label_ref 46)) preproc.cpp:337 636 {jump}
     (nil)
 -> 46)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 67 66 50)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 99 100 101 102 103 104
(code_label 50 67 29 5 62 "" [1 uses])
(note 29 50 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) preproc.cpp:339 90 {*movsi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:DI 0 ax [orig:87 D.6796 ] [87])
        (sign_extend:DI (reg:SI 0 ax [99]))) preproc.cpp:339 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 33 5 (parallel [
            (set (reg:DI 1 dx [orig:88 D.6796 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.6796 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:339 497 {*ashldi3_1}
     (nil))
(insn 33 32 34 5 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])) preproc.cpp:339 89 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (parallel [
            (set (reg/f:DI 1 dx [orig:89 D.6797 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 D.6796 ] [88])
                    (reg/f:DI 0 ax [100])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:339 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.6796 ] [88]))
        (nil)))
(insn 35 34 36 5 (set (reg:SF 0 ax [101])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:339 129 {*movsf_internal}
     (nil))
(insn 36 35 37 5 (set (mem:SF (reg/f:DI 1 dx [orig:89 D.6797 ] [89]) [0 *_14+0 S4 A32])
        (reg:SF 0 ax [101])) preproc.cpp:339 129 {*movsf_internal}
     (nil))
(insn 37 36 38 5 (set (reg:SI 0 ax [102])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) preproc.cpp:340 90 {*movsi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 0 ax [orig:90 D.6798 ] [90])
        (sign_extend:DI (reg:SI 0 ax [102]))) preproc.cpp:340 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 5 (parallel [
            (set (reg:DI 0 ax [orig:91 D.6798 ] [91])
                (plus:DI (reg:DI 0 ax [orig:90 D.6798 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:340 221 {*adddi_1}
     (nil))
(insn 40 39 41 5 (parallel [
            (set (reg:DI 1 dx [orig:92 D.6798 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.6798 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:340 497 {*ashldi3_1}
     (nil))
(insn 41 40 42 5 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])) preproc.cpp:340 89 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (parallel [
            (set (reg/f:DI 1 dx [orig:93 D.6797 ] [93])
                (plus:DI (reg:DI 1 dx [orig:92 D.6798 ] [92])
                    (reg/f:DI 0 ax [103])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:340 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.6798 ] [92]))
        (nil)))
(insn 43 42 44 5 (set (reg:SF 0 ax [104])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:340 129 {*movsf_internal}
     (nil))
(insn 44 43 45 5 (set (mem:SF (reg/f:DI 1 dx [orig:93 D.6797 ] [93]) [0 *_18+0 S4 A32])
        (reg:SF 0 ax [104])) preproc.cpp:340 129 {*movsf_internal}
     (nil))
(insn 45 44 46 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:337 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 105
(code_label 46 45 47 6 61 "" [1 uses])
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) preproc.cpp:337 89 {*movdi_internal}
     (nil))
(insn 49 48 51 6 (set (reg:SI 0 ax [orig:86 D.6795 ] [86])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 24 [0x18])) [0 preprocess_4(D)->data_zero_fill+0 S4 A32])) preproc.cpp:337 90 {*movsi_internal}
     (nil))
(insn 51 49 52 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:86 D.6795 ] [86])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32]))) preproc.cpp:337 7 {*cmpsi_1}
     (nil))
(jump_insn 52 51 53 6 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) preproc.cpp:337 596 {*jcc_1}
     (nil)
 -> 50)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 83
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (set (reg:SI 0 ax [orig:83 D.6795 ] [83])
        (const_int 1 [0x1])) preproc.cpp:343 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              3 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 0 [ax] 94
(code_label 55 54 56 8 60 "" [1 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 61 8 (set (reg:SI 0 ax [orig:94 <retval> ] [94])
        (reg:SI 0 ax [orig:83 D.6795 ] [83])) 90 {*movsi_internal}
     (nil))
(insn 61 57 62 8 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:94 <retval> ] [94])) preproc.cpp:345 90 {*movsi_internal}
     (nil))
(insn 62 61 68 8 (use (reg/i:SI 0 ax)) preproc.cpp:345 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 68 62 0 NOTE_INSN_DELETED)

;; Function int normalize(float*, float*, Procpar_info*) (_Z9normalizePfS_P12Procpar_info, funcdef_no=7, decl_uid=5359, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 10:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 22:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 28
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 29:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 38:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 52:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 53:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 54:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 61:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 62:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 65:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 86:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 88:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=154 from oldreg=117, assigning class SSE_REGS to r154
   88: r154:SF=r154:SF/r116:SF
      REG_DEAD r116:SF
      REG_DEAD r115:SF
    Inserting insn reload before:
  133: r154:SF=r115:SF
    Inserting insn reload after:
  134: r117:SF=r154:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 134:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 99:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 101
	 Choosing alt 0 in insn 101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 102:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 104:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=155 from oldreg=128, assigning class SSE_REGS to r155
  104: r155:SF=r155:SF/r127:SF
      REG_DEAD r127:SF
      REG_DEAD r126:SF
    Inserting insn reload before:
  135: r155:SF=r126:SF
    Inserting insn reload after:
  136: r128:SF=r155:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 136:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 105:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 106:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 123: point = 0
   Insn 122: point = 0
   Insn 118: point = 1
   Insn 115: point = 3
  BB 9
   Insn 113: point = 4
   Insn 112: point = 4
   Insn 110: point = 5
   Insn 109: point = 7
  BB 7
   Insn 130: point = 8
   Insn 72: point = 8
  BB 6
   Insn 70: point = 8
   Insn 69: point = 8
  BB 2
   Insn 128: point = 8
   Insn 13: point = 8
   Insn 12: point = 8
   Insn 11: point = 9
   Insn 10: point = 10
   Insn 9: point = 11
   Insn 8: point = 12
   Insn 4: point = 12
   Insn 3: point = 12
   Insn 2: point = 12
  BB 5
   Insn 65: point = 12
  BB 4
   Insn 62: point = 12
   Insn 61: point = 13
  BB 3
   Insn 56: point = 14
   Insn 55: point = 14
   Insn 54: point = 15
   Insn 53: point = 16
   Insn 52: point = 17
   Insn 51: point = 18
   Insn 50: point = 18
   Insn 49: point = 19
   Insn 48: point = 21
   Insn 47: point = 23
   Insn 46: point = 25
   Insn 45: point = 27
   Insn 44: point = 29
   Insn 43: point = 30
   Insn 42: point = 32
   Insn 41: point = 34
   Insn 40: point = 36
   Insn 39: point = 37
   Insn 38: point = 39
   Insn 37: point = 41
   Insn 36: point = 43
   Insn 35: point = 44
   Insn 34: point = 46
   Insn 33: point = 48
   Insn 32: point = 50
   Insn 31: point = 51
   Insn 30: point = 53
   Insn 29: point = 55
   Insn 28: point = 57
   Insn 27: point = 59
   Insn 26: point = 60
   Insn 25: point = 62
   Insn 24: point = 64
   Insn 23: point = 65
   Insn 22: point = 67
   Insn 21: point = 69
   Insn 20: point = 71
   Insn 19: point = 72
   Insn 18: point = 74
   Insn 17: point = 76
  BB 8
   Insn 106: point = 77
   Insn 105: point = 77
   Insn 136: point = 78
	Hard reg 0 is preferable by r155 with profit 1
   Insn 104: point = 80
   Insn 135: point = 81
	Hard reg 0 is preferable by r155 with profit 1
	Hard reg 22 is preferable by r155 with profit 1
   Insn 103: point = 83
   Insn 102: point = 84
   Insn 101: point = 86
   Insn 100: point = 88
   Insn 99: point = 89
   Insn 98: point = 91
   Insn 97: point = 93
   Insn 96: point = 95
   Insn 95: point = 96
   Insn 94: point = 98
   Insn 93: point = 99
   Insn 92: point = 101
   Insn 91: point = 103
   Insn 90: point = 105
   Insn 89: point = 106
   Insn 134: point = 107
	Hard reg 0 is preferable by r154 with profit 1
   Insn 88: point = 109
   Insn 133: point = 110
	Hard reg 0 is preferable by r154 with profit 1
	Hard reg 22 is preferable by r154 with profit 1
   Insn 87: point = 112
   Insn 86: point = 113
   Insn 85: point = 115
   Insn 84: point = 117
   Insn 83: point = 118
   Insn 82: point = 120
   Insn 81: point = 122
   Insn 80: point = 123
   Insn 79: point = 125
   Insn 78: point = 126
   Insn 77: point = 128
   Insn 76: point = 130
 r83: [73..74]
 r84: [70..72]
 r85: [68..69]
 r86: [66..67]
 r87: [52..65]
 r88: [61..62]
 r89: [58..60]
 r90: [56..57]
 r91: [54..55]
 r92: [52..53]
 r93: [20..51]
 r94: [47..48]
 r95: [45..46]
 r96: [42..44]
 r97: [40..41]
 r98: [38..39]
 r99: [22..37]
 r100: [33..34]
 r101: [31..32]
 r102: [28..30]
 r103: [26..27]
 r104: [24..25]
 r105: [22..23]
 r106: [20..21]
 r107: [18..19]
 r108: [4..5]
 r109: [127..128]
 r110: [124..126]
 r111: [106..123]
 r112: [119..120]
 r113: [116..118]
 r114: [114..115]
 r115: [111..113]
 r116: [109..112]
 r117: [106..107]
 r118: [102..103]
 r119: [100..101]
 r120: [97..99]
 r121: [77..96]
 r122: [92..93]
 r123: [90..91]
 r124: [87..89]
 r125: [85..86]
 r126: [82..84]
 r127: [80..83]
 r128: [77..78]
 r129: [2..3]
 r130: [0..1]
 r131: [10..11]
 r132: [8..9]
 r133: [75..76]
 r134: [70..71]
 r135: [63..64]
 r136: [58..59]
 r137: [49..50]
 r138: [42..43]
 r139: [35..36]
 r140: [28..29]
 r141: [16..17]
 r142: [14..15]
 r143: [12..13]
 r144: [129..130]
 r145: [124..125]
 r146: [121..122]
 r147: [116..117]
 r148: [104..105]
 r149: [97..98]
 r150: [94..95]
 r151: [87..88]
 r152: [6..7]
 r154: [108..110]
 r155: [79..81]
Compressing live ranges: from 131 to 114 - 87%
Ranges after the compression:
 r83: [66..67]
 r84: [64..65]
 r85: [62..63]
 r86: [60..61]
 r87: [48..59]
 r88: [56..57]
 r89: [54..55]
 r90: [52..53]
 r91: [50..51]
 r92: [48..49]
 r93: [20..47]
 r94: [44..45]
 r95: [42..43]
 r96: [40..41]
 r97: [38..39]
 r98: [36..37]
 r99: [22..35]
 r100: [32..33]
 r101: [30..31]
 r102: [28..29]
 r103: [26..27]
 r104: [24..25]
 r105: [22..23]
 r106: [20..21]
 r107: [18..19]
 r108: [4..5]
 r109: [110..111]
 r110: [108..109]
 r111: [94..107]
 r112: [104..105]
 r113: [102..103]
 r114: [100..101]
 r115: [98..99]
 r116: [96..99]
 r117: [94..95]
 r118: [90..91]
 r119: [88..89]
 r120: [86..87]
 r121: [70..85]
 r122: [82..83]
 r123: [80..81]
 r124: [78..79]
 r125: [76..77]
 r126: [74..75]
 r127: [72..75]
 r128: [70..71]
 r129: [2..3]
 r130: [0..1]
 r131: [10..11]
 r132: [8..9]
 r133: [68..69]
 r134: [64..65]
 r135: [58..59]
 r136: [54..55]
 r137: [46..47]
 r138: [40..41]
 r139: [34..35]
 r140: [28..29]
 r141: [16..17]
 r142: [14..15]
 r143: [12..13]
 r144: [112..113]
 r145: [108..109]
 r146: [106..107]
 r147: [102..103]
 r148: [92..93]
 r149: [86..87]
 r150: [84..85]
 r151: [78..79]
 r152: [6..7]
 r154: [96..97]
 r155: [72..73]

********** Assignment #1: **********

	 Assigning to 154 (cl=SSE_REGS, orig=117, freq=3, tfirst=154, tfreq=3)...
	   Assign 22 to reload r154 (freq=3)
	 Assigning to 155 (cl=SSE_REGS, orig=128, freq=3, tfirst=155, tfreq=3)...
	   Assign 22 to reload r155 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 31
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 110
changing reg in insn 112
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 80
changing reg in insn 89
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 95
changing reg in insn 95
changing reg in insn 95
changing reg in insn 105
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 115
changing reg in insn 118
changing reg in insn 118
changing reg in insn 122
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 44
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 61
changing reg in insn 62
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 109
changing reg in insn 110
deleting insn with uid = 50.
deleting insn with uid = 133.
deleting insn with uid = 135.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 51.


int normalize(float*, float*, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2]
;;  ref usage 	r0={47d,46u} r1={10d,9u,6e} r2={4d,2u,2e} r4={2d,1u} r5={2d,1u} r6={1d,48u} r7={1d,11u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={26d,3u} r18={1d} r19={1d} r20={1d,1u,8e} r21={13d,12u} r22={8d,6u} r23={3d,1u} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} 
;;    total ref usage 341{184d,141u,16e} in 97{96 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 131 132
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
        (reg:DI 5 di [ data ])) preproc.cpp:347 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
        (reg:DI 4 si [ scratch ])) preproc.cpp:347 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:347 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:349 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DF 0 ax [131])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:350 128 {*movdf_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])
        (reg:DF 0 ax [131])) preproc.cpp:350 128 {*movdf_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 0 ax [132])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:351 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64])
        (reg:DF 0 ax [132])) preproc.cpp:351 128 {*movdf_internal}
     (nil))
(insn 13 12 128 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:357 90 {*movsi_internal}
     (nil))
(jump_insn 128 13 129 2 (set (pc)
        (label_ref 66)) preproc.cpp:357 636 {jump}
     (nil)
 -> 66)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 129 128 68)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 133 134 135 136 137 138 139 140 141 142
(code_label 68 129 16 3 67 "" [1 uses])
(note 16 68 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:SI 0 ax [133])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:359 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:DI 0 ax [orig:83 D.6800 ] [83])
        (sign_extend:DI (reg:SI 0 ax [133]))) preproc.cpp:359 142 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 3 (parallel [
            (set (reg:DI 1 dx [orig:84 D.6800 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 D.6800 ] [83])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:359 497 {*ashldi3_1}
     (nil))
(insn 20 19 21 3 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:359 89 {*movdi_internal}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 D.6801 ] [85])
                (plus:DI (reg/f:DI 0 ax [134])
                    (reg:DI 1 dx [orig:84 D.6800 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:359 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:84 D.6800 ] [84]))
        (nil)))
(insn 22 21 23 3 (set (reg:SF 21 xmm0 [orig:86 D.6802 ] [86])
        (mem:SF (reg/f:DI 0 ax [orig:85 D.6801 ] [85]) [0 *_12+0 S4 A32])) preproc.cpp:359 129 {*movsf_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DF 22 xmm1 [orig:87 D.6803 ] [87])
        (float_extend:DF (reg:SF 21 xmm0 [orig:86 D.6802 ] [86]))) preproc.cpp:359 152 {*extendsfdf2_sse}
     (nil))
(insn 24 23 25 3 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:359 90 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 0 ax [orig:88 D.6800 ] [88])
        (sign_extend:DI (reg:SI 0 ax [135]))) preproc.cpp:359 142 {*extendsidi2_rex64}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg:DI 1 dx [orig:89 D.6800 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 D.6800 ] [88])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:359 497 {*ashldi3_1}
     (nil))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:359 89 {*movdi_internal}
     (nil))
(insn 28 27 29 3 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.6801 ] [90])
                (plus:DI (reg/f:DI 0 ax [136])
                    (reg:DI 1 dx [orig:89 D.6800 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:359 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.6800 ] [89]))
        (nil)))
(insn 29 28 30 3 (set (reg:SF 21 xmm0 [orig:91 D.6802 ] [91])
        (mem:SF (reg/f:DI 0 ax [orig:90 D.6801 ] [90]) [0 *_17+0 S4 A32])) preproc.cpp:359 129 {*movsf_internal}
     (nil))
(insn 30 29 31 3 (set (reg:DF 21 xmm0 [orig:92 D.6803 ] [92])
        (float_extend:DF (reg:SF 21 xmm0 [orig:91 D.6802 ] [91]))) preproc.cpp:359 152 {*extendsfdf2_sse}
     (nil))
(insn 31 30 32 3 (set (reg:DF 22 xmm1 [orig:93 D.6803 ] [93])
        (mult:DF (reg:DF 22 xmm1 [orig:87 D.6803 ] [87])
            (reg:DF 21 xmm0 [orig:92 D.6803 ] [92]))) preproc.cpp:359 776 {*fop_df_comm_sse}
     (nil))
(insn 32 31 33 3 (set (reg:SI 0 ax [137])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:360 90 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 0 ax [orig:94 D.6804 ] [94])
        (sign_extend:DI (reg:SI 0 ax [137]))) preproc.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg:DI 0 ax [orig:95 D.6804 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 D.6804 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 221 {*adddi_1}
     (nil))
(insn 35 34 36 3 (parallel [
            (set (reg:DI 1 dx [orig:96 D.6804 ] [96])
                (ashift:DI (reg:DI 0 ax [orig:95 D.6804 ] [95])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:360 89 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:97 D.6801 ] [97])
                (plus:DI (reg/f:DI 0 ax [138])
                    (reg:DI 1 dx [orig:96 D.6804 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:96 D.6804 ] [96]))
        (nil)))
(insn 38 37 39 3 (set (reg:SF 21 xmm0 [orig:98 D.6802 ] [98])
        (mem:SF (reg/f:DI 0 ax [orig:97 D.6801 ] [97]) [0 *_24+0 S4 A32])) preproc.cpp:360 129 {*movsf_internal}
     (nil))
(insn 39 38 40 3 (set (reg:DF 23 xmm2 [orig:99 D.6803 ] [99])
        (float_extend:DF (reg:SF 21 xmm0 [orig:98 D.6802 ] [98]))) preproc.cpp:360 152 {*extendsfdf2_sse}
     (nil))
(insn 40 39 41 3 (set (reg:SI 0 ax [139])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:360 90 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DI 0 ax [orig:100 D.6804 ] [100])
        (sign_extend:DI (reg:SI 0 ax [139]))) preproc.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 3 (parallel [
            (set (reg:DI 0 ax [orig:101 D.6804 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 D.6804 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 221 {*adddi_1}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 1 dx [orig:102 D.6804 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 D.6804 ] [101])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 497 {*ashldi3_1}
     (nil))
(insn 44 43 45 3 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:360 89 {*movdi_internal}
     (nil))
(insn 45 44 46 3 (parallel [
            (set (reg/f:DI 0 ax [orig:103 D.6801 ] [103])
                (plus:DI (reg/f:DI 0 ax [140])
                    (reg:DI 1 dx [orig:102 D.6804 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:360 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:102 D.6804 ] [102]))
        (nil)))
(insn 46 45 47 3 (set (reg:SF 21 xmm0 [orig:104 D.6802 ] [104])
        (mem:SF (reg/f:DI 0 ax [orig:103 D.6801 ] [103]) [0 *_30+0 S4 A32])) preproc.cpp:360 129 {*movsf_internal}
     (nil))
(insn 47 46 48 3 (set (reg:DF 21 xmm0 [orig:105 D.6803 ] [105])
        (float_extend:DF (reg:SF 21 xmm0 [orig:104 D.6802 ] [104]))) preproc.cpp:360 152 {*extendsfdf2_sse}
     (nil))
(insn 48 47 49 3 (set (reg:DF 21 xmm0 [orig:106 D.6803 ] [106])
        (mult:DF (reg:DF 21 xmm0 [orig:105 D.6803 ] [105])
            (reg:DF 23 xmm2 [orig:99 D.6803 ] [99]))) preproc.cpp:360 776 {*fop_df_comm_sse}
     (nil))
(insn 49 48 51 3 (set (reg:DF 21 xmm0 [orig:107 D.6803 ] [107])
        (plus:DF (reg:DF 21 xmm0 [orig:106 D.6803 ] [106])
            (reg:DF 22 xmm1 [orig:93 D.6803 ] [93]))) preproc.cpp:360 776 {*fop_df_comm_sse}
     (nil))
(call_insn 51 49 52 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:360 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 52 51 53 3 (set (reg:DF 0 ax [141])
        (reg:DF 21 xmm0)) preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 53 52 54 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])
        (reg:DF 0 ax [141])) preproc.cpp:360 128 {*movdf_internal}
     (nil))
(insn 54 53 55 3 (set (reg:DF 21 xmm0 [142])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])) preproc.cpp:362 128 {*movdf_internal}
     (nil))
(insn 55 54 56 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [142])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) preproc.cpp:362 56 {*cmpiudf_sse}
     (nil))
(jump_insn 56 55 60 3 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 63)
            (pc))) preproc.cpp:362 596 {*jcc_1}
     (nil)
 -> 63)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 143
(note 60 56 61 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 62 4 (set (reg:DF 0 ax [143])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 magnitude+0 S8 A64])) preproc.cpp:362 128 {*movdf_internal}
     (nil))
(insn 62 61 63 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64])
        (reg:DF 0 ax [143])) preproc.cpp:362 128 {*movdf_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 63 62 64 5 65 "" [1 uses])
(note 64 63 65 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:357 220 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 66 65 67 6 64 "" [1 uses])
(note 67 66 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 69 67 70 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 99 [0x63]))) preproc.cpp:357 7 {*cmpsi_1}
     (nil))
(jump_insn 70 69 71 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) preproc.cpp:357 596 {*jcc_1}
     (nil)
 -> 68)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 130 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:366 90 {*movsi_internal}
     (nil))
(jump_insn 130 72 131 7 (set (pc)
        (label_ref 107)) preproc.cpp:366 636 {jump}
     (nil)
 -> 107)
;;  succ:       9 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 131 130 111)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 144 145 146 147 148 149 150 151
(code_label 111 131 75 8 69 "" [1 uses])
(note 75 111 76 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 8 (set (reg:SI 0 ax [144])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:368 90 {*movsi_internal}
     (nil))
(insn 77 76 78 8 (set (reg:DI 0 ax [orig:109 D.6800 ] [109])
        (sign_extend:DI (reg:SI 0 ax [144]))) preproc.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 8 (parallel [
            (set (reg:DI 1 dx [orig:110 D.6800 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 D.6800 ] [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:368 497 {*ashldi3_1}
     (nil))
(insn 79 78 80 8 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])) preproc.cpp:368 89 {*movdi_internal}
     (nil))
(insn 80 79 81 8 (parallel [
            (set (reg/f:DI 1 dx [orig:111 D.6801 ] [111])
                (plus:DI (reg:DI 1 dx [orig:110 D.6800 ] [110])
                    (reg/f:DI 0 ax [145])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:368 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.6800 ] [110]))
        (nil)))
(insn 81 80 82 8 (set (reg:SI 0 ax [146])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:368 90 {*movsi_internal}
     (nil))
(insn 82 81 83 8 (set (reg:DI 0 ax [orig:112 D.6800 ] [112])
        (sign_extend:DI (reg:SI 0 ax [146]))) preproc.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 83 82 84 8 (parallel [
            (set (reg:DI 2 cx [orig:113 D.6800 ] [113])
                (ashift:DI (reg:DI 0 ax [orig:112 D.6800 ] [112])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:368 497 {*ashldi3_1}
     (nil))
(insn 84 83 85 8 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:368 89 {*movdi_internal}
     (nil))
(insn 85 84 86 8 (parallel [
            (set (reg/f:DI 0 ax [orig:114 D.6801 ] [114])
                (plus:DI (reg/f:DI 0 ax [147])
                    (reg:DI 2 cx [orig:113 D.6800 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:368 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:113 D.6800 ] [113]))
        (nil)))
(insn 86 85 87 8 (set (reg:SF 22 xmm1 [orig:115 D.6802 ] [115])
        (mem:SF (reg/f:DI 0 ax [orig:114 D.6801 ] [114]) [0 *_47+0 S4 A32])) preproc.cpp:368 129 {*movsf_internal}
     (nil))
(insn 87 86 88 8 (set (reg:SF 21 xmm0 [orig:116 D.6802 ] [116])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) preproc.cpp:368 157 {*truncdfsf_fast_sse}
     (nil))
(insn 88 87 134 8 (set (reg:SF 22 xmm1 [orig:117 D.6802 ] [117])
        (div:SF (reg:SF 22 xmm1 [orig:117 D.6802 ] [117])
            (reg:SF 21 xmm0 [orig:116 D.6802 ] [116]))) preproc.cpp:368 782 {*fop_sf_1_sse}
     (nil))
(insn 134 88 89 8 (set (reg:SF 0 ax [orig:117 D.6802 ] [117])
        (reg:SF 22 xmm1 [orig:117 D.6802 ] [117])) preproc.cpp:368 129 {*movsf_internal}
     (nil))
(insn 89 134 90 8 (set (mem:SF (reg/f:DI 1 dx [orig:111 D.6801 ] [111]) [0 *_44+0 S4 A32])
        (reg:SF 0 ax [orig:117 D.6802 ] [117])) preproc.cpp:368 129 {*movsf_internal}
     (nil))
(insn 90 89 91 8 (set (reg:SI 0 ax [148])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:369 90 {*movsi_internal}
     (nil))
(insn 91 90 92 8 (set (reg:DI 0 ax [orig:118 D.6804 ] [118])
        (sign_extend:DI (reg:SI 0 ax [148]))) preproc.cpp:369 142 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 8 (parallel [
            (set (reg:DI 0 ax [orig:119 D.6804 ] [119])
                (plus:DI (reg:DI 0 ax [orig:118 D.6804 ] [118])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 221 {*adddi_1}
     (nil))
(insn 93 92 94 8 (parallel [
            (set (reg:DI 1 dx [orig:120 D.6804 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.6804 ] [119])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 497 {*ashldi3_1}
     (nil))
(insn 94 93 95 8 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])) preproc.cpp:369 89 {*movdi_internal}
     (nil))
(insn 95 94 96 8 (parallel [
            (set (reg/f:DI 1 dx [orig:121 D.6801 ] [121])
                (plus:DI (reg:DI 1 dx [orig:120 D.6804 ] [120])
                    (reg/f:DI 0 ax [149])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.6804 ] [120]))
        (nil)))
(insn 96 95 97 8 (set (reg:SI 0 ax [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) preproc.cpp:369 90 {*movsi_internal}
     (nil))
(insn 97 96 98 8 (set (reg:DI 0 ax [orig:122 D.6804 ] [122])
        (sign_extend:DI (reg:SI 0 ax [150]))) preproc.cpp:369 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 8 (parallel [
            (set (reg:DI 0 ax [orig:123 D.6804 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 D.6804 ] [122])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 221 {*adddi_1}
     (nil))
(insn 99 98 100 8 (parallel [
            (set (reg:DI 2 cx [orig:124 D.6804 ] [124])
                (ashift:DI (reg:DI 0 ax [orig:123 D.6804 ] [123])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 497 {*ashldi3_1}
     (nil))
(insn 100 99 101 8 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])) preproc.cpp:369 89 {*movdi_internal}
     (nil))
(insn 101 100 102 8 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.6801 ] [125])
                (plus:DI (reg/f:DI 0 ax [151])
                    (reg:DI 2 cx [orig:124 D.6804 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:369 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 data+0 S8 A64])
            (reg:DI 2 cx [orig:124 D.6804 ] [124]))
        (nil)))
(insn 102 101 103 8 (set (reg:SF 22 xmm1 [orig:126 D.6802 ] [126])
        (mem:SF (reg/f:DI 0 ax [orig:125 D.6801 ] [125]) [0 *_58+0 S4 A32])) preproc.cpp:369 129 {*movsf_internal}
     (nil))
(insn 103 102 104 8 (set (reg:SF 21 xmm0 [orig:127 D.6802 ] [127])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 max_magnitude+0 S8 A64]))) preproc.cpp:369 157 {*truncdfsf_fast_sse}
     (nil))
(insn 104 103 136 8 (set (reg:SF 22 xmm1 [orig:128 D.6802 ] [128])
        (div:SF (reg:SF 22 xmm1 [orig:128 D.6802 ] [128])
            (reg:SF 21 xmm0 [orig:127 D.6802 ] [127]))) preproc.cpp:369 782 {*fop_sf_1_sse}
     (nil))
(insn 136 104 105 8 (set (reg:SF 0 ax [orig:128 D.6802 ] [128])
        (reg:SF 22 xmm1 [orig:128 D.6802 ] [128])) preproc.cpp:369 129 {*movsf_internal}
     (nil))
(insn 105 136 106 8 (set (mem:SF (reg/f:DI 1 dx [orig:121 D.6801 ] [121]) [0 *_54+0 S4 A32])
        (reg:SF 0 ax [orig:128 D.6802 ] [128])) preproc.cpp:369 129 {*movsf_internal}
     (nil))
(insn 106 105 107 8 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:366 220 {*addsi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 152
(code_label 107 106 108 9 68 "" [1 uses])
(note 108 107 109 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 9 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 procpar_info+0 S8 A64])) preproc.cpp:366 89 {*movdi_internal}
     (nil))
(insn 110 109 112 9 (set (reg:SI 0 ax [orig:108 D.6805 ] [108])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [152])
                (const_int 300 [0x12c])) [0 procpar_info_39(D)->num_points+0 S4 A32])) preproc.cpp:366 90 {*movsi_internal}
     (nil))
(insn 112 110 113 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:108 D.6805 ] [108])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32]))) preproc.cpp:366 7 {*cmpsi_1}
     (nil))
(jump_insn 113 112 114 9 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) preproc.cpp:366 596 {*jcc_1}
     (nil)
 -> 111)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 129 130
(note 114 113 115 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 118 10 (set (reg:SI 0 ax [orig:129 D.6805 ] [129])
        (const_int 1 [0x1])) preproc.cpp:373 90 {*movsi_internal}
     (nil))
(insn 118 115 122 10 (set (reg:SI 0 ax [orig:130 <retval> ] [130])
        (reg:SI 0 ax [orig:129 D.6805 ] [129])) preproc.cpp:373 90 {*movsi_internal}
     (nil))
(insn 122 118 123 10 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:130 <retval> ] [130])) preproc.cpp:375 90 {*movsi_internal}
     (nil))
(insn 123 122 132 10 (use (reg/i:SI 0 ax)) preproc.cpp:375 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 132 123 0 NOTE_INSN_DELETED)

;; Function int quality(float*, float*, float*, Procpar_info*, Preprocess*) (_Z7qualityPfS_S_P12Procpar_infoP10Preprocess, funcdef_no=8, decl_uid=5370, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 26:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 40:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 47:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 56:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 64:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 66
	 Choosing alt 0 in insn 66:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 70:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 71:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 76
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 77:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 85:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 90:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 91:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 96
	 Choosing alt 0 in insn 96:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 97:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 104:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 112
	 Choosing alt 0 in insn 112:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 113:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 120
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 121:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 127:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 128:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 133
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 134:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 142:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 147:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 148:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 154:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 158:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 160
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 161:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 163:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 169
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 170:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 174:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 178:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 180
	 Choosing alt 0 in insn 180:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 181
	 Choosing alt 0 in insn 181:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 184:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 185:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 188:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 191:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 197:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 199:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 204:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 205:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 206:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 207:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=298 from oldreg=276, assigning class SSE_REGS to r298
  207: r298:DF=r298:DF/[frame:DI-0x18]
      REG_DEAD r277:DF
    Inserting insn reload before:
  294: r298:DF=r277:DF
    Inserting insn reload after:
  295: r276:DF=r298:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 295:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 208:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 209:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 210:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=299 from oldreg=278, assigning class SSE_REGS to r299
  210: r299:DF=r299:DF-[frame:DI-0x20]
      REG_DEAD r279:DF
    Inserting insn reload before:
  296: r299:DF=r279:DF
    Inserting insn reload after:
  297: r278:DF=r299:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 297:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 211:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 217:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=300 from oldreg=195, assigning class SSE_REGS to r300
  217: r300:SF=float_trunc([frame:DI-0x50])
    Inserting insn reload after:
  298: r195:SF=r300:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 298:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 218:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=301, assigning class NO_REGS to secondary r301
  219: r301:DF=r282:DF
      REG_DEAD r282:DF
    Inserting the sec. move after:
  299: xmm0:DF=r301:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 299:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=302 from oldreg=198, assigning class SSE_REGS to r302
      Creating newreg=303 from oldreg=195, assigning class SSE_REGS to r303
      Making reload reg 303 for reg 195 optional
  223: r302:SF=r302:SF*r303:SF
      REG_DEAD r197:SF
      REG_DEAD r195:SF
    Inserting insn reload before:
  300: r302:SF=r197:SF
  302: r303:SF=r195:SF
    Inserting insn reload after:
  301: r198:SF=r302:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 301:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 302:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 224:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 227:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 230:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 231:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=304 from oldreg=203, assigning class SSE_REGS to r304
  231: r304:SF=float_trunc([frame:DI-0x50])
    Inserting insn reload after:
  303: r203:SF=r304:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 303:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 232:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=305, assigning class NO_REGS to secondary r305
  233: r305:DF=r285:DF
      REG_DEAD r285:DF
    Inserting the sec. move after:
  304: xmm0:DF=r305:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 304:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 237
	 Choosing alt 0 in insn 237:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=306 from oldreg=206, assigning class SSE_REGS to r306
      Creating newreg=307 from oldreg=203, assigning class SSE_REGS to r307
      Making reload reg 307 for reg 203 optional
  237: r306:SF=r306:SF*r307:SF
      REG_DEAD r205:SF
      REG_DEAD r203:SF
    Inserting insn reload before:
  305: r306:SF=r205:SF
  307: r307:SF=r203:SF
    Inserting insn reload after:
  306: r206:SF=r306:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 306:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 307:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 238:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 239:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 240:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=308 from oldreg=286, assigning class SSE_REGS to r308
  240: r308:DF=r308:DF/[frame:DI-0x18]
      REG_DEAD r287:DF
    Inserting insn reload before:
  308: r308:DF=r287:DF
    Inserting insn reload after:
  309: r286:DF=r308:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 309:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 241:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 242:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 243:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=309 from oldreg=288, assigning class SSE_REGS to r309
  243: r309:DF=r309:DF-[frame:DI-0x20]
      REG_DEAD r289:DF
    Inserting insn reload before:
  310: r309:DF=r289:DF
    Inserting insn reload after:
  311: r288:DF=r309:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 311:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 244:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 248:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 250:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=310 from oldreg=210, assigning class SSE_REGS to r310
  250: r310:SF=float_trunc([frame:DI-0x48])
    Inserting insn reload after:
  312: r210:SF=r310:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 312:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 251:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=311, assigning class NO_REGS to secondary r311
  252: r311:DF=r292:DF
      REG_DEAD r292:DF
    Inserting the sec. move after:
  313: xmm0:DF=r311:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 313:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 256
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=312 from oldreg=213, assigning class SSE_REGS to r312
      Creating newreg=313 from oldreg=210, assigning class SSE_REGS to r313
      Making reload reg 313 for reg 210 optional
  256: r312:SF=r312:SF*r313:SF
      REG_DEAD r212:SF
      REG_DEAD r210:SF
    Inserting insn reload before:
  314: r312:SF=r212:SF
  316: r313:SF=r210:SF
    Inserting insn reload after:
  315: r213:SF=r312:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 315:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 316:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 257:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 261:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 263:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 264:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=314 from oldreg=218, assigning class SSE_REGS to r314
  264: r314:SF=float_trunc([frame:DI-0x48])
    Inserting insn reload after:
  317: r218:SF=r314:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 317:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 265:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=315, assigning class NO_REGS to secondary r315
  266: r315:DF=r295:DF
      REG_DEAD r295:DF
    Inserting the sec. move after:
  318: xmm0:DF=r315:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 318:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 267:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 270
	 Choosing alt 0 in insn 270:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=316 from oldreg=221, assigning class SSE_REGS to r316
      Creating newreg=317 from oldreg=218, assigning class SSE_REGS to r317
      Making reload reg 317 for reg 218 optional
  270: r316:SF=r316:SF*r317:SF
      REG_DEAD r220:SF
      REG_DEAD r218:SF
    Inserting insn reload before:
  319: r316:SF=r220:SF
  321: r317:SF=r218:SF
    Inserting insn reload after:
  320: r221:SF=r316:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 320:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 321:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 271:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 272:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 281:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=318 from oldreg=218, assigning class SSE_REGS to inheritance r318
    Original reg change 218->318 (bb3):
  317: r318:SF=r314:SF
    Add original<-inheritance after:
  322: r218:SF=r318:SF

    Inheritance reuse change 218->318 (bb3):
  321: r317:SF=r318:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=319 from oldreg=210, assigning class SSE_REGS to inheritance r319
    Original reg change 210->319 (bb3):
  312: r319:SF=r310:SF
    Add original<-inheritance after:
  323: r210:SF=r319:SF

    Inheritance reuse change 210->319 (bb3):
  316: r313:SF=r319:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=320 from oldreg=203, assigning class SSE_REGS to inheritance r320
    Original reg change 203->320 (bb3):
  303: r320:SF=r304:SF
    Add original<-inheritance after:
  324: r203:SF=r320:SF

    Inheritance reuse change 203->320 (bb3):
  307: r307:SF=r320:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=321 from oldreg=195, assigning class SSE_REGS to inheritance r321
    Original reg change 195->321 (bb3):
  298: r321:SF=r300:SF
    Add original<-inheritance after:
  325: r195:SF=r321:SF

    Inheritance reuse change 195->321 (bb3):
  302: r303:SF=r321:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   322: r218:SF=r318:SF
deleting insn with uid = 322.
	    Removing dead insn:
   323: r210:SF=r319:SF
deleting insn with uid = 323.
	    Removing dead insn:
   324: r203:SF=r320:SF
deleting insn with uid = 324.
	    Removing dead insn:
   325: r195:SF=r321:SF
deleting insn with uid = 325.
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 289: point = 0
   Insn 288: point = 0
   Insn 284: point = 1
   Insn 281: point = 3
  BB 4
   Insn 279: point = 4
   Insn 278: point = 4
   Insn 276: point = 5
   Insn 275: point = 7
  BB 2
   Insn 291: point = 8
   Insn 31: point = 8
   Insn 30: point = 8
   Insn 29: point = 9
   Insn 28: point = 10
   Insn 27: point = 11
   Insn 26: point = 12
   Insn 25: point = 13
   Insn 24: point = 14
   Insn 23: point = 15
   Insn 22: point = 16
   Insn 21: point = 17
   Insn 20: point = 18
   Insn 19: point = 19
   Insn 18: point = 20
   Insn 17: point = 21
   Insn 16: point = 22
   Insn 15: point = 23
   Insn 14: point = 24
   Insn 13: point = 25
   Insn 12: point = 26
   Insn 11: point = 27
   Insn 10: point = 28
   Insn 6: point = 28
   Insn 5: point = 28
   Insn 4: point = 28
   Insn 3: point = 28
   Insn 2: point = 28
  BB 3
   Insn 272: point = 28
   Insn 271: point = 28
   Insn 320: point = 29
	Hard reg 0 is preferable by r316 with profit 1
   Insn 270: point = 31
   Insn 321: point = 32
	   Creating copy r317<-r318@1
   Insn 319: point = 34
	Hard reg 0 is preferable by r316 with profit 1
	Hard reg 21 is preferable by r316 with profit 1
   Insn 269: point = 36
   Insn 268: point = 38
   Insn 267: point = 39
   Insn 318: point = 39
	Hard reg 21 is preferable by r315 with profit 1
   Insn 266: point = 40
	Hard reg 21 is preferable by r315 with profit 1
	Hard reg 0 is preferable by r315 with profit 1
   Insn 265: point = 42
   Insn 317: point = 43
	   Creating copy r314->r318@1
   Insn 264: point = 45
   Insn 263: point = 46
   Insn 262: point = 48
   Insn 261: point = 49
   Insn 260: point = 51
   Insn 259: point = 53
   Insn 258: point = 55
   Insn 257: point = 56
   Insn 315: point = 57
	Hard reg 0 is preferable by r312 with profit 1
   Insn 256: point = 59
   Insn 316: point = 60
	   Creating copy r313<-r319@1
   Insn 314: point = 62
	Hard reg 0 is preferable by r312 with profit 1
	Hard reg 21 is preferable by r312 with profit 1
   Insn 255: point = 64
   Insn 254: point = 66
   Insn 253: point = 67
   Insn 313: point = 67
	Hard reg 21 is preferable by r311 with profit 1
   Insn 252: point = 68
	Hard reg 21 is preferable by r311 with profit 1
	Hard reg 0 is preferable by r311 with profit 1
   Insn 251: point = 70
   Insn 312: point = 71
	   Creating copy r310->r319@1
   Insn 250: point = 73
   Insn 249: point = 74
   Insn 248: point = 76
   Insn 247: point = 77
   Insn 246: point = 79
   Insn 245: point = 81
   Insn 244: point = 82
   Insn 311: point = 83
	Hard reg 0 is preferable by r309 with profit 1
   Insn 243: point = 85
   Insn 310: point = 85
	Hard reg 0 is preferable by r309 with profit 1
	Hard reg 21 is preferable by r309 with profit 1
   Insn 242: point = 87
   Insn 241: point = 88
   Insn 309: point = 89
	Hard reg 0 is preferable by r308 with profit 1
   Insn 240: point = 91
   Insn 308: point = 91
	Hard reg 0 is preferable by r308 with profit 1
	Hard reg 21 is preferable by r308 with profit 1
   Insn 239: point = 93
   Insn 238: point = 94
   Insn 306: point = 95
	Hard reg 0 is preferable by r306 with profit 1
   Insn 237: point = 97
   Insn 307: point = 98
	   Creating copy r307<-r320@1
   Insn 305: point = 100
	Hard reg 0 is preferable by r306 with profit 1
	Hard reg 21 is preferable by r306 with profit 1
   Insn 236: point = 102
   Insn 235: point = 104
   Insn 234: point = 105
   Insn 304: point = 105
	Hard reg 21 is preferable by r305 with profit 1
   Insn 233: point = 106
	Hard reg 21 is preferable by r305 with profit 1
	Hard reg 0 is preferable by r305 with profit 1
   Insn 232: point = 108
   Insn 303: point = 109
	   Creating copy r304->r320@1
   Insn 231: point = 111
   Insn 230: point = 112
   Insn 229: point = 114
   Insn 228: point = 115
   Insn 227: point = 117
   Insn 226: point = 119
   Insn 225: point = 121
   Insn 224: point = 122
   Insn 301: point = 123
	Hard reg 0 is preferable by r302 with profit 1
   Insn 223: point = 125
   Insn 302: point = 126
	   Creating copy r303<-r321@1
   Insn 300: point = 128
	Hard reg 0 is preferable by r302 with profit 1
	Hard reg 21 is preferable by r302 with profit 1
   Insn 222: point = 130
   Insn 221: point = 132
   Insn 220: point = 133
   Insn 299: point = 133
	Hard reg 21 is preferable by r301 with profit 1
   Insn 219: point = 134
	Hard reg 21 is preferable by r301 with profit 1
	Hard reg 0 is preferable by r301 with profit 1
   Insn 218: point = 136
   Insn 298: point = 137
	   Creating copy r300->r321@1
   Insn 217: point = 139
   Insn 216: point = 140
   Insn 215: point = 142
   Insn 214: point = 143
   Insn 213: point = 145
   Insn 212: point = 147
   Insn 211: point = 148
   Insn 297: point = 149
	Hard reg 0 is preferable by r299 with profit 1
   Insn 210: point = 151
   Insn 296: point = 151
	Hard reg 0 is preferable by r299 with profit 1
	Hard reg 21 is preferable by r299 with profit 1
   Insn 209: point = 153
   Insn 208: point = 154
   Insn 295: point = 155
	Hard reg 0 is preferable by r298 with profit 1
   Insn 207: point = 157
   Insn 294: point = 157
	Hard reg 0 is preferable by r298 with profit 1
	Hard reg 21 is preferable by r298 with profit 1
   Insn 206: point = 159
   Insn 205: point = 160
   Insn 204: point = 161
   Insn 203: point = 162
   Insn 202: point = 162
   Insn 201: point = 163
   Insn 200: point = 164
   Insn 199: point = 166
   Insn 198: point = 168
   Insn 197: point = 170
   Insn 196: point = 171
   Insn 195: point = 173
   Insn 194: point = 175
   Insn 193: point = 177
   Insn 192: point = 178
   Insn 191: point = 180
   Insn 190: point = 182
   Insn 189: point = 184
   Insn 188: point = 185
   Insn 187: point = 187
   Insn 186: point = 189
   Insn 185: point = 190
   Insn 184: point = 191
   Insn 183: point = 192
   Insn 182: point = 192
   Insn 181: point = 193
   Insn 180: point = 195
   Insn 179: point = 197
   Insn 178: point = 199
   Insn 177: point = 201
   Insn 176: point = 203
   Insn 175: point = 204
   Insn 174: point = 206
   Insn 173: point = 208
   Insn 172: point = 210
   Insn 171: point = 211
   Insn 170: point = 213
   Insn 169: point = 215
   Insn 168: point = 217
   Insn 167: point = 218
   Insn 166: point = 220
   Insn 165: point = 222
   Insn 164: point = 224
   Insn 163: point = 225
   Insn 162: point = 227
   Insn 161: point = 229
   Insn 160: point = 231
   Insn 159: point = 233
   Insn 158: point = 234
   Insn 157: point = 236
   Insn 156: point = 238
   Insn 155: point = 239
   Insn 154: point = 241
   Insn 153: point = 243
   Insn 152: point = 245
   Insn 151: point = 246
   Insn 150: point = 248
   Insn 149: point = 250
   Insn 148: point = 251
   Insn 147: point = 252
   Insn 146: point = 253
   Insn 145: point = 253
   Insn 144: point = 254
   Insn 143: point = 255
   Insn 142: point = 257
   Insn 141: point = 259
   Insn 140: point = 261
   Insn 139: point = 262
   Insn 138: point = 264
   Insn 137: point = 266
   Insn 136: point = 268
   Insn 135: point = 269
   Insn 134: point = 271
   Insn 133: point = 273
   Insn 132: point = 275
   Insn 131: point = 276
   Insn 130: point = 278
   Insn 129: point = 280
   Insn 128: point = 281
   Insn 127: point = 282
   Insn 126: point = 283
   Insn 125: point = 283
   Insn 124: point = 284
   Insn 123: point = 286
   Insn 122: point = 288
   Insn 121: point = 290
   Insn 120: point = 292
   Insn 119: point = 294
   Insn 118: point = 295
   Insn 117: point = 297
   Insn 116: point = 299
   Insn 115: point = 301
   Insn 114: point = 302
   Insn 113: point = 304
   Insn 112: point = 306
   Insn 111: point = 308
   Insn 110: point = 309
   Insn 109: point = 311
   Insn 108: point = 313
   Insn 107: point = 315
   Insn 106: point = 316
   Insn 105: point = 318
   Insn 104: point = 320
   Insn 103: point = 322
   Insn 102: point = 324
   Insn 101: point = 325
   Insn 100: point = 327
   Insn 99: point = 329
   Insn 98: point = 330
   Insn 97: point = 332
   Insn 96: point = 334
   Insn 95: point = 336
   Insn 94: point = 337
   Insn 93: point = 339
   Insn 92: point = 341
   Insn 91: point = 342
   Insn 90: point = 343
   Insn 89: point = 344
   Insn 88: point = 344
   Insn 87: point = 345
   Insn 86: point = 346
   Insn 85: point = 348
   Insn 84: point = 350
   Insn 83: point = 352
   Insn 82: point = 353
   Insn 81: point = 355
   Insn 80: point = 357
   Insn 79: point = 359
   Insn 78: point = 360
   Insn 77: point = 362
   Insn 76: point = 364
   Insn 75: point = 366
   Insn 74: point = 367
   Insn 73: point = 369
   Insn 72: point = 371
   Insn 71: point = 372
   Insn 70: point = 373
   Insn 69: point = 374
   Insn 68: point = 374
   Insn 67: point = 375
   Insn 66: point = 377
   Insn 65: point = 379
   Insn 64: point = 381
   Insn 63: point = 383
   Insn 62: point = 385
   Insn 61: point = 386
   Insn 60: point = 388
   Insn 59: point = 390
   Insn 58: point = 392
   Insn 57: point = 393
   Insn 56: point = 395
   Insn 55: point = 397
   Insn 54: point = 399
   Insn 53: point = 400
   Insn 52: point = 402
   Insn 51: point = 404
   Insn 50: point = 406
   Insn 49: point = 407
   Insn 48: point = 409
   Insn 47: point = 411
   Insn 46: point = 413
   Insn 45: point = 415
   Insn 44: point = 416
   Insn 43: point = 418
   Insn 42: point = 420
   Insn 41: point = 421
   Insn 40: point = 423
   Insn 39: point = 425
   Insn 38: point = 427
   Insn 37: point = 428
   Insn 36: point = 430
   Insn 35: point = 432
 r83: [4..5]
 r84: [429..430]
 r85: [426..428]
 r86: [424..425]
 r87: [422..423]
 r88: [408..421]
 r89: [417..418]
 r90: [414..416]
 r91: [412..413]
 r92: [410..411]
 r93: [408..409]
 r94: [376..407]
 r95: [403..404]
 r96: [401..402]
 r97: [398..400]
 r98: [396..397]
 r99: [394..395]
 r100: [378..393]
 r101: [389..390]
 r102: [387..388]
 r103: [384..386]
 r104: [382..383]
 r105: [380..381]
 r106: [378..379]
 r107: [376..377]
 r108: [374..375]
 r109: [368..369]
 r110: [365..367]
 r111: [363..364]
 r112: [361..362]
 r113: [345..360]
 r114: [356..357]
 r115: [354..355]
 r116: [351..353]
 r117: [349..350]
 r118: [347..348]
 r119: [344..346]
 r120: [338..339]
 r121: [335..337]
 r122: [333..334]
 r123: [331..332]
 r124: [317..330]
 r125: [326..327]
 r126: [323..325]
 r127: [321..322]
 r128: [319..320]
 r129: [317..318]
 r130: [285..316]
 r131: [312..313]
 r132: [310..311]
 r133: [307..309]
 r134: [305..306]
 r135: [303..304]
 r136: [287..302]
 r137: [298..299]
 r138: [296..297]
 r139: [293..295]
 r140: [291..292]
 r141: [289..290]
 r142: [287..288]
 r143: [285..286]
 r144: [283..284]
 r145: [277..278]
 r146: [274..276]
 r147: [272..273]
 r148: [270..271]
 r149: [254..269]
 r150: [265..266]
 r151: [263..264]
 r152: [260..262]
 r153: [258..259]
 r154: [256..257]
 r155: [253..255]
 r156: [247..248]
 r157: [244..246]
 r158: [242..243]
 r159: [240..241]
 r160: [226..239]
 r161: [235..236]
 r162: [232..234]
 r163: [230..231]
 r164: [228..229]
 r165: [226..227]
 r166: [194..225]
 r167: [221..222]
 r168: [219..220]
 r169: [216..218]
 r170: [214..215]
 r171: [212..213]
 r172: [196..211]
 r173: [207..208]
 r174: [205..206]
 r175: [202..204]
 r176: [200..201]
 r177: [198..199]
 r178: [196..197]
 r179: [194..195]
 r180: [192..193]
 r181: [186..187]
 r182: [183..185]
 r183: [181..182]
 r184: [179..180]
 r185: [163..178]
 r186: [174..175]
 r187: [172..173]
 r188: [169..171]
 r189: [167..168]
 r190: [165..166]
 r191: [162..164]
 r192: [144..145]
 r193: [141..143]
 r194: [122..140]
 r196: [131..132]
 r197: [129..130]
 r198: [122..123]
 r199: [118..119]
 r200: [116..117]
 r201: [113..115]
 r202: [94..112]
 r204: [103..104]
 r205: [101..102]
 r206: [94..95]
 r207: [78..79]
 r208: [75..77]
 r209: [56..74]
 r211: [65..66]
 r212: [63..64]
 r213: [56..57]
 r214: [52..53]
 r215: [50..51]
 r216: [47..49]
 r217: [28..46]
 r219: [37..38]
 r220: [35..36]
 r221: [28..29]
 r222: [2..3]
 r223: [0..1]
 r224: [26..27]
 r225: [24..25]
 r226: [22..23]
 r227: [20..21]
 r228: [18..19]
 r229: [16..17]
 r230: [14..15]
 r231: [12..13]
 r232: [10..11]
 r233: [8..9]
 r234: [431..432]
 r235: [426..427]
 r236: [419..420]
 r237: [414..415]
 r238: [405..406]
 r239: [398..399]
 r240: [391..392]
 r241: [384..385]
 r242: [372..373]
 r243: [370..371]
 r244: [365..366]
 r245: [358..359]
 r246: [351..352]
 r247: [342..343]
 r248: [340..341]
 r249: [335..336]
 r250: [328..329]
 r251: [323..324]
 r252: [314..315]
 r253: [307..308]
 r254: [300..301]
 r255: [293..294]
 r256: [281..282]
 r257: [279..280]
 r258: [274..275]
 r259: [267..268]
 r260: [260..261]
 r261: [251..252]
 r262: [249..250]
 r263: [244..245]
 r264: [237..238]
 r265: [232..233]
 r266: [223..224]
 r267: [216..217]
 r268: [209..210]
 r269: [202..203]
 r270: [190..191]
 r271: [188..189]
 r272: [183..184]
 r273: [176..177]
 r274: [169..170]
 r275: [160..161]
 r276: [154..155]
 r277: [158..159]
 r278: [148..149]
 r279: [152..153]
 r280: [146..147]
 r281: [141..142]
 r282: [135..136]
 r283: [120..121]
 r284: [113..114]
 r285: [107..108]
 r286: [88..89]
 r287: [92..93]
 r288: [82..83]
 r289: [86..87]
 r290: [80..81]
 r291: [75..76]
 r292: [69..70]
 r293: [54..55]
 r294: [47..48]
 r295: [41..42]
 r296: [6..7]
 r298: [156..157]
 r299: [150..151]
 r300: [138..139]
 r301: [133..134]
 r302: [124..128]
 r303: [125..126]
 r304: [110..111]
 r305: [105..106]
 r306: [96..100]
 r307: [97..98]
 r308: [90..91]
 r309: [84..85]
 r310: [72..73]
 r311: [67..68]
 r312: [58..62]
 r313: [59..60]
 r314: [44..45]
 r315: [39..40]
 r316: [30..34]
 r317: [31..32]
 r318: [33..43]
 r319: [61..71]
 r320: [99..109]
 r321: [127..137]
Compressing live ranges: from 433 to 384 - 88%
Ranges after the compression:
 r83: [4..5]
 r84: [380..381]
 r85: [378..379]
 r86: [376..377]
 r87: [374..375]
 r88: [362..373]
 r89: [370..371]
 r90: [368..369]
 r91: [366..367]
 r92: [364..365]
 r93: [362..363]
 r94: [334..361]
 r95: [358..359]
 r96: [356..357]
 r97: [354..355]
 r98: [352..353]
 r99: [350..351]
 r100: [336..349]
 r101: [346..347]
 r102: [344..345]
 r103: [342..343]
 r104: [340..341]
 r105: [338..339]
 r106: [336..337]
 r107: [334..335]
 r108: [332..333]
 r109: [326..327]
 r110: [324..325]
 r111: [322..323]
 r112: [320..321]
 r113: [306..319]
 r114: [316..317]
 r115: [314..315]
 r116: [312..313]
 r117: [310..311]
 r118: [308..309]
 r119: [306..307]
 r120: [300..301]
 r121: [298..299]
 r122: [296..297]
 r123: [294..295]
 r124: [282..293]
 r125: [290..291]
 r126: [288..289]
 r127: [286..287]
 r128: [284..285]
 r129: [282..283]
 r130: [254..281]
 r131: [278..279]
 r132: [276..277]
 r133: [274..275]
 r134: [272..273]
 r135: [270..271]
 r136: [256..269]
 r137: [266..267]
 r138: [264..265]
 r139: [262..263]
 r140: [260..261]
 r141: [258..259]
 r142: [256..257]
 r143: [254..255]
 r144: [252..253]
 r145: [246..247]
 r146: [244..245]
 r147: [242..243]
 r148: [240..241]
 r149: [226..239]
 r150: [236..237]
 r151: [234..235]
 r152: [232..233]
 r153: [230..231]
 r154: [228..229]
 r155: [226..227]
 r156: [220..221]
 r157: [218..219]
 r158: [216..217]
 r159: [214..215]
 r160: [202..213]
 r161: [210..211]
 r162: [208..209]
 r163: [206..207]
 r164: [204..205]
 r165: [202..203]
 r166: [174..201]
 r167: [198..199]
 r168: [196..197]
 r169: [194..195]
 r170: [192..193]
 r171: [190..191]
 r172: [176..189]
 r173: [186..187]
 r174: [184..185]
 r175: [182..183]
 r176: [180..181]
 r177: [178..179]
 r178: [176..177]
 r179: [174..175]
 r180: [172..173]
 r181: [166..167]
 r182: [164..165]
 r183: [162..163]
 r184: [160..161]
 r185: [146..159]
 r186: [156..157]
 r187: [154..155]
 r188: [152..153]
 r189: [150..151]
 r190: [148..149]
 r191: [146..147]
 r192: [128..129]
 r193: [126..127]
 r194: [110..125]
 r196: [118..119]
 r197: [116..117]
 r198: [110..111]
 r199: [106..107]
 r200: [104..105]
 r201: [102..103]
 r202: [86..101]
 r204: [94..95]
 r205: [92..93]
 r206: [86..87]
 r207: [70..71]
 r208: [68..69]
 r209: [52..67]
 r211: [60..61]
 r212: [58..59]
 r213: [52..53]
 r214: [48..49]
 r215: [46..47]
 r216: [44..45]
 r217: [28..43]
 r219: [36..37]
 r220: [34..35]
 r221: [28..29]
 r222: [2..3]
 r223: [0..1]
 r224: [26..27]
 r225: [24..25]
 r226: [22..23]
 r227: [20..21]
 r228: [18..19]
 r229: [16..17]
 r230: [14..15]
 r231: [12..13]
 r232: [10..11]
 r233: [8..9]
 r234: [382..383]
 r235: [378..379]
 r236: [372..373]
 r237: [368..369]
 r238: [360..361]
 r239: [354..355]
 r240: [348..349]
 r241: [342..343]
 r242: [330..331]
 r243: [328..329]
 r244: [324..325]
 r245: [318..319]
 r246: [312..313]
 r247: [304..305]
 r248: [302..303]
 r249: [298..299]
 r250: [292..293]
 r251: [288..289]
 r252: [280..281]
 r253: [274..275]
 r254: [268..269]
 r255: [262..263]
 r256: [250..251]
 r257: [248..249]
 r258: [244..245]
 r259: [238..239]
 r260: [232..233]
 r261: [224..225]
 r262: [222..223]
 r263: [218..219]
 r264: [212..213]
 r265: [208..209]
 r266: [200..201]
 r267: [194..195]
 r268: [188..189]
 r269: [182..183]
 r270: [170..171]
 r271: [168..169]
 r272: [164..165]
 r273: [158..159]
 r274: [152..153]
 r275: [144..145]
 r276: [138..139]
 r277: [142..143]
 r278: [132..133]
 r279: [136..137]
 r280: [130..131]
 r281: [126..127]
 r282: [122..123]
 r283: [108..109]
 r284: [102..103]
 r285: [98..99]
 r286: [80..81]
 r287: [84..85]
 r288: [74..75]
 r289: [78..79]
 r290: [72..73]
 r291: [68..69]
 r292: [64..65]
 r293: [50..51]
 r294: [44..45]
 r295: [40..41]
 r296: [6..7]
 r298: [140..141]
 r299: [134..135]
 r300: [124..125]
 r301: [120..121]
 r302: [112..115]
 r303: [112..113]
 r304: [100..101]
 r305: [96..97]
 r306: [88..91]
 r307: [88..89]
 r308: [82..83]
 r309: [76..77]
 r310: [66..67]
 r311: [62..63]
 r312: [54..57]
 r313: [54..55]
 r314: [42..43]
 r315: [38..39]
 r316: [30..33]
 r317: [30..31]
 r318: [32..41]
 r319: [56..65]
 r320: [90..99]
 r321: [114..123]

********** Assignment #1: **********

	 Assigning to 298 (cl=SSE_REGS, orig=276, freq=3, tfirst=298, tfreq=3)...
	   Assign 21 to reload r298 (freq=3)
	 Assigning to 299 (cl=SSE_REGS, orig=278, freq=3, tfirst=299, tfreq=3)...
	   Assign 21 to reload r299 (freq=3)
	 Assigning to 302 (cl=SSE_REGS, orig=198, freq=3, tfirst=302, tfreq=3)...
	   Assign 21 to reload r302 (freq=3)
	 Assigning to 306 (cl=SSE_REGS, orig=206, freq=3, tfirst=306, tfreq=3)...
	   Assign 21 to reload r306 (freq=3)
	 Assigning to 308 (cl=SSE_REGS, orig=286, freq=3, tfirst=308, tfreq=3)...
	   Assign 21 to reload r308 (freq=3)
	 Assigning to 309 (cl=SSE_REGS, orig=288, freq=3, tfirst=309, tfreq=3)...
	   Assign 21 to reload r309 (freq=3)
	 Assigning to 312 (cl=SSE_REGS, orig=213, freq=3, tfirst=312, tfreq=3)...
	   Assign 21 to reload r312 (freq=3)
	 Assigning to 316 (cl=SSE_REGS, orig=221, freq=3, tfirst=316, tfreq=3)...
	   Assign 21 to reload r316 (freq=3)
	 Assigning to 300 (cl=SSE_REGS, orig=195, freq=2, tfirst=300, tfreq=2)...
	   Assign 24 to reload r300 (freq=2)
	Hard reg 24 is preferable by r321 with profit 1
	Hard reg 24 is preferable by r303 with profit 1
	 Assigning to 303 (cl=SSE_REGS, orig=195, freq=2, tfirst=300, tfreq=2)...
	   Assign 24 to optional reload r303 (freq=2)
	Hard reg 24 is preferable by r321 with profit 2
	 Assigning to 321 (cl=SSE_REGS, orig=195, freq=2, tfirst=300, tfreq=2)...
	 Assigning to 304 (cl=SSE_REGS, orig=203, freq=2, tfirst=304, tfreq=2)...
	   Assign 25 to reload r304 (freq=2)
	Hard reg 25 is preferable by r320 with profit 1
	Hard reg 25 is preferable by r307 with profit 1
	 Assigning to 307 (cl=SSE_REGS, orig=203, freq=2, tfirst=304, tfreq=2)...
	   Assign 25 to optional reload r307 (freq=2)
	Hard reg 25 is preferable by r320 with profit 2
	 Assigning to 320 (cl=SSE_REGS, orig=203, freq=2, tfirst=304, tfreq=2)...
	 Assigning to 310 (cl=SSE_REGS, orig=210, freq=2, tfirst=310, tfreq=2)...
	   Assign 26 to reload r310 (freq=2)
	Hard reg 26 is preferable by r319 with profit 1
	Hard reg 26 is preferable by r313 with profit 1
	 Assigning to 313 (cl=SSE_REGS, orig=210, freq=2, tfirst=310, tfreq=2)...
	   Assign 26 to optional reload r313 (freq=2)
	Hard reg 26 is preferable by r319 with profit 2
	 Assigning to 319 (cl=SSE_REGS, orig=210, freq=2, tfirst=310, tfreq=2)...
	 Assigning to 314 (cl=SSE_REGS, orig=218, freq=2, tfirst=314, tfreq=2)...
	   Assign 27 to reload r314 (freq=2)
	Hard reg 27 is preferable by r318 with profit 1
	Hard reg 27 is preferable by r317 with profit 1
	 Assigning to 317 (cl=SSE_REGS, orig=218, freq=2, tfirst=314, tfreq=2)...
	   Assign 27 to optional reload r317 (freq=2)
	Hard reg 27 is preferable by r318 with profit 2
	 Assigning to 318 (cl=SSE_REGS, orig=218, freq=2, tfirst=314, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  321: r317:SF=r218:SF
      REG_DEAD r218:SF
   Insn after restoring regs:
  317: r218:SF=r314:SF
      REG_DEAD r314:SF
   Insn after restoring regs:
  316: r313:SF=r210:SF
      REG_DEAD r210:SF
   Insn after restoring regs:
  312: r210:SF=r310:SF
      REG_DEAD r310:SF
   Insn after restoring regs:
  307: r307:SF=r203:SF
      REG_DEAD r203:SF
   Insn after restoring regs:
  303: r203:SF=r304:SF
      REG_DEAD r304:SF
   Insn after restoring regs:
  302: r303:SF=r195:SF
      REG_DEAD r195:SF
   Insn after restoring regs:
  298: r195:SF=r300:SF
      REG_DEAD r300:SF
Remove optional reload reg 303
  Restoring original insn:
  223: r302:SF=r302:SF*r195:SF
      REG_DEAD r195:SF
  Deleting move 302
  302: r303:SF=r195:SF
      REG_DEAD r195:SF
deleting insn with uid = 302.
Remove optional reload reg 307
  Restoring original insn:
  237: r306:SF=r306:SF*r203:SF
      REG_DEAD r203:SF
  Deleting move 307
  307: r307:SF=r203:SF
      REG_DEAD r203:SF
deleting insn with uid = 307.
Remove optional reload reg 313
  Restoring original insn:
  256: r312:SF=r312:SF*r210:SF
      REG_DEAD r210:SF
  Deleting move 316
  316: r313:SF=r210:SF
      REG_DEAD r210:SF
deleting insn with uid = 316.
Remove optional reload reg 317
  Restoring original insn:
  270: r316:SF=r316:SF*r218:SF
      REG_DEAD r218:SF
  Deleting move 321
  321: r317:SF=r218:SF
      REG_DEAD r218:SF
deleting insn with uid = 321.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 270:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=322 from oldreg=218, assigning class SSE_REGS to r322
      Making reload reg 322 for reg 218 optional
  270: r316:SF=r316:SF*r322:SF
      REG_DEAD r218:SF
    Inserting insn reload before:
  326: r322:SF=r218:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 326:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=323 from oldreg=210, assigning class SSE_REGS to r323
      Making reload reg 323 for reg 210 optional
  256: r312:SF=r312:SF*r323:SF
      REG_DEAD r210:SF
    Inserting insn reload before:
  327: r323:SF=r210:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 327:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 237:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=324 from oldreg=203, assigning class SSE_REGS to r324
      Making reload reg 324 for reg 203 optional
  237: r306:SF=r306:SF*r324:SF
      REG_DEAD r203:SF
    Inserting insn reload before:
  328: r324:SF=r203:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 328:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=325 from oldreg=195, assigning class SSE_REGS to r325
      Making reload reg 325 for reg 195 optional
  223: r302:SF=r302:SF*r325:SF
      REG_DEAD r195:SF
    Inserting insn reload before:
  329: r325:SF=r195:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 329:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=326 from oldreg=218, assigning class SSE_REGS to inheritance r326
    Original reg change 218->326 (bb3):
  317: r326:SF=r314:SF
      REG_DEAD r314:SF
    Add original<-inheritance after:
  330: r218:SF=r326:SF

    Inheritance reuse change 218->326 (bb3):
  326: r322:SF=r326:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=327 from oldreg=210, assigning class SSE_REGS to inheritance r327
    Original reg change 210->327 (bb3):
  312: r327:SF=r310:SF
      REG_DEAD r310:SF
    Add original<-inheritance after:
  331: r210:SF=r327:SF

    Inheritance reuse change 210->327 (bb3):
  327: r323:SF=r327:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=328 from oldreg=203, assigning class SSE_REGS to inheritance r328
    Original reg change 203->328 (bb3):
  303: r328:SF=r304:SF
      REG_DEAD r304:SF
    Add original<-inheritance after:
  332: r203:SF=r328:SF

    Inheritance reuse change 203->328 (bb3):
  328: r324:SF=r328:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=329 from oldreg=195, assigning class SSE_REGS to inheritance r329
    Original reg change 195->329 (bb3):
  298: r329:SF=r300:SF
      REG_DEAD r300:SF
    Add original<-inheritance after:
  333: r195:SF=r329:SF

    Inheritance reuse change 195->329 (bb3):
  329: r325:SF=r329:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   330: r218:SF=r326:SF
deleting insn with uid = 330.
	    Removing dead insn:
   331: r210:SF=r327:SF
deleting insn with uid = 331.
	    Removing dead insn:
   332: r203:SF=r328:SF
deleting insn with uid = 332.
	    Removing dead insn:
   333: r195:SF=r329:SF
deleting insn with uid = 333.
EBB 4
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
   Insn 289: point = 0
   Insn 288: point = 0
   Insn 284: point = 1
   Insn 281: point = 3
  BB 4
   Insn 279: point = 4
   Insn 278: point = 4
   Insn 276: point = 5
   Insn 275: point = 7
  BB 2
   Insn 291: point = 8
   Insn 31: point = 8
   Insn 30: point = 8
   Insn 29: point = 9
   Insn 28: point = 10
   Insn 27: point = 11
   Insn 26: point = 12
   Insn 25: point = 13
   Insn 24: point = 14
   Insn 23: point = 15
   Insn 22: point = 16
   Insn 21: point = 17
   Insn 20: point = 18
   Insn 19: point = 19
   Insn 18: point = 20
   Insn 17: point = 21
   Insn 16: point = 22
   Insn 15: point = 23
   Insn 14: point = 24
   Insn 13: point = 25
   Insn 12: point = 26
   Insn 11: point = 27
   Insn 10: point = 28
   Insn 6: point = 28
   Insn 5: point = 28
   Insn 4: point = 28
   Insn 3: point = 28
   Insn 2: point = 28
  BB 3
   Insn 272: point = 28
   Insn 271: point = 28
   Insn 320: point = 29
	Hard reg 0 is preferable by r316 with profit 1
   Insn 270: point = 31
   Insn 326: point = 32
	   Creating copy r322<-r326@1
   Insn 319: point = 34
	Hard reg 0 is preferable by r316 with profit 1
	Hard reg 21 is preferable by r316 with profit 1
   Insn 269: point = 36
   Insn 268: point = 38
   Insn 267: point = 39
   Insn 318: point = 39
	Hard reg 21 is preferable by r315 with profit 1
   Insn 266: point = 40
	Hard reg 21 is preferable by r315 with profit 1
	Hard reg 0 is preferable by r315 with profit 1
   Insn 265: point = 42
   Insn 317: point = 43
	   Creating copy r314->r326@1
   Insn 264: point = 45
   Insn 263: point = 46
   Insn 262: point = 48
   Insn 261: point = 49
   Insn 260: point = 51
   Insn 259: point = 53
   Insn 258: point = 55
   Insn 257: point = 56
   Insn 315: point = 57
	Hard reg 0 is preferable by r312 with profit 1
   Insn 256: point = 59
   Insn 327: point = 60
	   Creating copy r323<-r327@1
   Insn 314: point = 62
	Hard reg 0 is preferable by r312 with profit 1
	Hard reg 21 is preferable by r312 with profit 1
   Insn 255: point = 64
   Insn 254: point = 66
   Insn 253: point = 67
   Insn 313: point = 67
	Hard reg 21 is preferable by r311 with profit 1
   Insn 252: point = 68
	Hard reg 21 is preferable by r311 with profit 1
	Hard reg 0 is preferable by r311 with profit 1
   Insn 251: point = 70
   Insn 312: point = 71
	   Creating copy r310->r327@1
   Insn 250: point = 73
   Insn 249: point = 74
   Insn 248: point = 76
   Insn 247: point = 77
   Insn 246: point = 79
   Insn 245: point = 81
   Insn 244: point = 82
   Insn 311: point = 83
	Hard reg 0 is preferable by r309 with profit 1
   Insn 243: point = 85
   Insn 310: point = 85
	Hard reg 0 is preferable by r309 with profit 1
	Hard reg 21 is preferable by r309 with profit 1
   Insn 242: point = 87
   Insn 241: point = 88
   Insn 309: point = 89
	Hard reg 0 is preferable by r308 with profit 1
   Insn 240: point = 91
   Insn 308: point = 91
	Hard reg 0 is preferable by r308 with profit 1
	Hard reg 21 is preferable by r308 with profit 1
   Insn 239: point = 93
   Insn 238: point = 94
   Insn 306: point = 95
	Hard reg 0 is preferable by r306 with profit 1
   Insn 237: point = 97
   Insn 328: point = 98
	   Creating copy r324<-r328@1
   Insn 305: point = 100
	Hard reg 0 is preferable by r306 with profit 1
	Hard reg 21 is preferable by r306 with profit 1
   Insn 236: point = 102
   Insn 235: point = 104
   Insn 234: point = 105
   Insn 304: point = 105
	Hard reg 21 is preferable by r305 with profit 1
   Insn 233: point = 106
	Hard reg 21 is preferable by r305 with profit 1
	Hard reg 0 is preferable by r305 with profit 1
   Insn 232: point = 108
   Insn 303: point = 109
	   Creating copy r304->r328@1
   Insn 231: point = 111
   Insn 230: point = 112
   Insn 229: point = 114
   Insn 228: point = 115
   Insn 227: point = 117
   Insn 226: point = 119
   Insn 225: point = 121
   Insn 224: point = 122
   Insn 301: point = 123
	Hard reg 0 is preferable by r302 with profit 1
   Insn 223: point = 125
   Insn 329: point = 126
	   Creating copy r325<-r329@1
   Insn 300: point = 128
	Hard reg 0 is preferable by r302 with profit 1
	Hard reg 21 is preferable by r302 with profit 1
   Insn 222: point = 130
   Insn 221: point = 132
   Insn 220: point = 133
   Insn 299: point = 133
	Hard reg 21 is preferable by r301 with profit 1
   Insn 219: point = 134
	Hard reg 21 is preferable by r301 with profit 1
	Hard reg 0 is preferable by r301 with profit 1
   Insn 218: point = 136
   Insn 298: point = 137
	   Creating copy r300->r329@1
   Insn 217: point = 139
   Insn 216: point = 140
   Insn 215: point = 142
   Insn 214: point = 143
   Insn 213: point = 145
   Insn 212: point = 147
   Insn 211: point = 148
   Insn 297: point = 149
	Hard reg 0 is preferable by r299 with profit 1
   Insn 210: point = 151
   Insn 296: point = 151
	Hard reg 0 is preferable by r299 with profit 1
	Hard reg 21 is preferable by r299 with profit 1
   Insn 209: point = 153
   Insn 208: point = 154
   Insn 295: point = 155
	Hard reg 0 is preferable by r298 with profit 1
   Insn 207: point = 157
   Insn 294: point = 157
	Hard reg 0 is preferable by r298 with profit 1
	Hard reg 21 is preferable by r298 with profit 1
   Insn 206: point = 159
   Insn 205: point = 160
   Insn 204: point = 161
   Insn 203: point = 162
   Insn 202: point = 162
   Insn 201: point = 163
   Insn 200: point = 164
   Insn 199: point = 166
   Insn 198: point = 168
   Insn 197: point = 170
   Insn 196: point = 171
   Insn 195: point = 173
   Insn 194: point = 175
   Insn 193: point = 177
   Insn 192: point = 178
   Insn 191: point = 180
   Insn 190: point = 182
   Insn 189: point = 184
   Insn 188: point = 185
   Insn 187: point = 187
   Insn 186: point = 189
   Insn 185: point = 190
   Insn 184: point = 191
   Insn 183: point = 192
   Insn 182: point = 192
   Insn 181: point = 193
   Insn 180: point = 195
   Insn 179: point = 197
   Insn 178: point = 199
   Insn 177: point = 201
   Insn 176: point = 203
   Insn 175: point = 204
   Insn 174: point = 206
   Insn 173: point = 208
   Insn 172: point = 210
   Insn 171: point = 211
   Insn 170: point = 213
   Insn 169: point = 215
   Insn 168: point = 217
   Insn 167: point = 218
   Insn 166: point = 220
   Insn 165: point = 222
   Insn 164: point = 224
   Insn 163: point = 225
   Insn 162: point = 227
   Insn 161: point = 229
   Insn 160: point = 231
   Insn 159: point = 233
   Insn 158: point = 234
   Insn 157: point = 236
   Insn 156: point = 238
   Insn 155: point = 239
   Insn 154: point = 241
   Insn 153: point = 243
   Insn 152: point = 245
   Insn 151: point = 246
   Insn 150: point = 248
   Insn 149: point = 250
   Insn 148: point = 251
   Insn 147: point = 252
   Insn 146: point = 253
   Insn 145: point = 253
   Insn 144: point = 254
   Insn 143: point = 255
   Insn 142: point = 257
   Insn 141: point = 259
   Insn 140: point = 261
   Insn 139: point = 262
   Insn 138: point = 264
   Insn 137: point = 266
   Insn 136: point = 268
   Insn 135: point = 269
   Insn 134: point = 271
   Insn 133: point = 273
   Insn 132: point = 275
   Insn 131: point = 276
   Insn 130: point = 278
   Insn 129: point = 280
   Insn 128: point = 281
   Insn 127: point = 282
   Insn 126: point = 283
   Insn 125: point = 283
   Insn 124: point = 284
   Insn 123: point = 286
   Insn 122: point = 288
   Insn 121: point = 290
   Insn 120: point = 292
   Insn 119: point = 294
   Insn 118: point = 295
   Insn 117: point = 297
   Insn 116: point = 299
   Insn 115: point = 301
   Insn 114: point = 302
   Insn 113: point = 304
   Insn 112: point = 306
   Insn 111: point = 308
   Insn 110: point = 309
   Insn 109: point = 311
   Insn 108: point = 313
   Insn 107: point = 315
   Insn 106: point = 316
   Insn 105: point = 318
   Insn 104: point = 320
   Insn 103: point = 322
   Insn 102: point = 324
   Insn 101: point = 325
   Insn 100: point = 327
   Insn 99: point = 329
   Insn 98: point = 330
   Insn 97: point = 332
   Insn 96: point = 334
   Insn 95: point = 336
   Insn 94: point = 337
   Insn 93: point = 339
   Insn 92: point = 341
   Insn 91: point = 342
   Insn 90: point = 343
   Insn 89: point = 344
   Insn 88: point = 344
   Insn 87: point = 345
   Insn 86: point = 346
   Insn 85: point = 348
   Insn 84: point = 350
   Insn 83: point = 352
   Insn 82: point = 353
   Insn 81: point = 355
   Insn 80: point = 357
   Insn 79: point = 359
   Insn 78: point = 360
   Insn 77: point = 362
   Insn 76: point = 364
   Insn 75: point = 366
   Insn 74: point = 367
   Insn 73: point = 369
   Insn 72: point = 371
   Insn 71: point = 372
   Insn 70: point = 373
   Insn 69: point = 374
   Insn 68: point = 374
   Insn 67: point = 375
   Insn 66: point = 377
   Insn 65: point = 379
   Insn 64: point = 381
   Insn 63: point = 383
   Insn 62: point = 385
   Insn 61: point = 386
   Insn 60: point = 388
   Insn 59: point = 390
   Insn 58: point = 392
   Insn 57: point = 393
   Insn 56: point = 395
   Insn 55: point = 397
   Insn 54: point = 399
   Insn 53: point = 400
   Insn 52: point = 402
   Insn 51: point = 404
   Insn 50: point = 406
   Insn 49: point = 407
   Insn 48: point = 409
   Insn 47: point = 411
   Insn 46: point = 413
   Insn 45: point = 415
   Insn 44: point = 416
   Insn 43: point = 418
   Insn 42: point = 420
   Insn 41: point = 421
   Insn 40: point = 423
   Insn 39: point = 425
   Insn 38: point = 427
   Insn 37: point = 428
   Insn 36: point = 430
   Insn 35: point = 432
 r83: [4..5]
 r84: [429..430]
 r85: [426..428]
 r86: [424..425]
 r87: [422..423]
 r88: [408..421]
 r89: [417..418]
 r90: [414..416]
 r91: [412..413]
 r92: [410..411]
 r93: [408..409]
 r94: [376..407]
 r95: [403..404]
 r96: [401..402]
 r97: [398..400]
 r98: [396..397]
 r99: [394..395]
 r100: [378..393]
 r101: [389..390]
 r102: [387..388]
 r103: [384..386]
 r104: [382..383]
 r105: [380..381]
 r106: [378..379]
 r107: [376..377]
 r108: [374..375]
 r109: [368..369]
 r110: [365..367]
 r111: [363..364]
 r112: [361..362]
 r113: [345..360]
 r114: [356..357]
 r115: [354..355]
 r116: [351..353]
 r117: [349..350]
 r118: [347..348]
 r119: [344..346]
 r120: [338..339]
 r121: [335..337]
 r122: [333..334]
 r123: [331..332]
 r124: [317..330]
 r125: [326..327]
 r126: [323..325]
 r127: [321..322]
 r128: [319..320]
 r129: [317..318]
 r130: [285..316]
 r131: [312..313]
 r132: [310..311]
 r133: [307..309]
 r134: [305..306]
 r135: [303..304]
 r136: [287..302]
 r137: [298..299]
 r138: [296..297]
 r139: [293..295]
 r140: [291..292]
 r141: [289..290]
 r142: [287..288]
 r143: [285..286]
 r144: [283..284]
 r145: [277..278]
 r146: [274..276]
 r147: [272..273]
 r148: [270..271]
 r149: [254..269]
 r150: [265..266]
 r151: [263..264]
 r152: [260..262]
 r153: [258..259]
 r154: [256..257]
 r155: [253..255]
 r156: [247..248]
 r157: [244..246]
 r158: [242..243]
 r159: [240..241]
 r160: [226..239]
 r161: [235..236]
 r162: [232..234]
 r163: [230..231]
 r164: [228..229]
 r165: [226..227]
 r166: [194..225]
 r167: [221..222]
 r168: [219..220]
 r169: [216..218]
 r170: [214..215]
 r171: [212..213]
 r172: [196..211]
 r173: [207..208]
 r174: [205..206]
 r175: [202..204]
 r176: [200..201]
 r177: [198..199]
 r178: [196..197]
 r179: [194..195]
 r180: [192..193]
 r181: [186..187]
 r182: [183..185]
 r183: [181..182]
 r184: [179..180]
 r185: [163..178]
 r186: [174..175]
 r187: [172..173]
 r188: [169..171]
 r189: [167..168]
 r190: [165..166]
 r191: [162..164]
 r192: [144..145]
 r193: [141..143]
 r194: [122..140]
 r196: [131..132]
 r197: [129..130]
 r198: [122..123]
 r199: [118..119]
 r200: [116..117]
 r201: [113..115]
 r202: [94..112]
 r204: [103..104]
 r205: [101..102]
 r206: [94..95]
 r207: [78..79]
 r208: [75..77]
 r209: [56..74]
 r211: [65..66]
 r212: [63..64]
 r213: [56..57]
 r214: [52..53]
 r215: [50..51]
 r216: [47..49]
 r217: [28..46]
 r219: [37..38]
 r220: [35..36]
 r221: [28..29]
 r222: [2..3]
 r223: [0..1]
 r224: [26..27]
 r225: [24..25]
 r226: [22..23]
 r227: [20..21]
 r228: [18..19]
 r229: [16..17]
 r230: [14..15]
 r231: [12..13]
 r232: [10..11]
 r233: [8..9]
 r234: [431..432]
 r235: [426..427]
 r236: [419..420]
 r237: [414..415]
 r238: [405..406]
 r239: [398..399]
 r240: [391..392]
 r241: [384..385]
 r242: [372..373]
 r243: [370..371]
 r244: [365..366]
 r245: [358..359]
 r246: [351..352]
 r247: [342..343]
 r248: [340..341]
 r249: [335..336]
 r250: [328..329]
 r251: [323..324]
 r252: [314..315]
 r253: [307..308]
 r254: [300..301]
 r255: [293..294]
 r256: [281..282]
 r257: [279..280]
 r258: [274..275]
 r259: [267..268]
 r260: [260..261]
 r261: [251..252]
 r262: [249..250]
 r263: [244..245]
 r264: [237..238]
 r265: [232..233]
 r266: [223..224]
 r267: [216..217]
 r268: [209..210]
 r269: [202..203]
 r270: [190..191]
 r271: [188..189]
 r272: [183..184]
 r273: [176..177]
 r274: [169..170]
 r275: [160..161]
 r276: [154..155]
 r277: [158..159]
 r278: [148..149]
 r279: [152..153]
 r280: [146..147]
 r281: [141..142]
 r282: [135..136]
 r283: [120..121]
 r284: [113..114]
 r285: [107..108]
 r286: [88..89]
 r287: [92..93]
 r288: [82..83]
 r289: [86..87]
 r290: [80..81]
 r291: [75..76]
 r292: [69..70]
 r293: [54..55]
 r294: [47..48]
 r295: [41..42]
 r296: [6..7]
 r298: [156..157]
 r299: [150..151]
 r300: [138..139]
 r301: [133..134]
 r302: [124..128]
 r304: [110..111]
 r305: [105..106]
 r306: [96..100]
 r308: [90..91]
 r309: [84..85]
 r310: [72..73]
 r311: [67..68]
 r312: [58..62]
 r314: [44..45]
 r315: [39..40]
 r316: [30..34]
 r322: [31..32]
 r323: [59..60]
 r324: [97..98]
 r325: [125..126]
 r326: [33..43]
 r327: [61..71]
 r328: [99..109]
 r329: [127..137]
Compressing live ranges: from 433 to 384 - 88%
Ranges after the compression:
 r83: [4..5]
 r84: [380..381]
 r85: [378..379]
 r86: [376..377]
 r87: [374..375]
 r88: [362..373]
 r89: [370..371]
 r90: [368..369]
 r91: [366..367]
 r92: [364..365]
 r93: [362..363]
 r94: [334..361]
 r95: [358..359]
 r96: [356..357]
 r97: [354..355]
 r98: [352..353]
 r99: [350..351]
 r100: [336..349]
 r101: [346..347]
 r102: [344..345]
 r103: [342..343]
 r104: [340..341]
 r105: [338..339]
 r106: [336..337]
 r107: [334..335]
 r108: [332..333]
 r109: [326..327]
 r110: [324..325]
 r111: [322..323]
 r112: [320..321]
 r113: [306..319]
 r114: [316..317]
 r115: [314..315]
 r116: [312..313]
 r117: [310..311]
 r118: [308..309]
 r119: [306..307]
 r120: [300..301]
 r121: [298..299]
 r122: [296..297]
 r123: [294..295]
 r124: [282..293]
 r125: [290..291]
 r126: [288..289]
 r127: [286..287]
 r128: [284..285]
 r129: [282..283]
 r130: [254..281]
 r131: [278..279]
 r132: [276..277]
 r133: [274..275]
 r134: [272..273]
 r135: [270..271]
 r136: [256..269]
 r137: [266..267]
 r138: [264..265]
 r139: [262..263]
 r140: [260..261]
 r141: [258..259]
 r142: [256..257]
 r143: [254..255]
 r144: [252..253]
 r145: [246..247]
 r146: [244..245]
 r147: [242..243]
 r148: [240..241]
 r149: [226..239]
 r150: [236..237]
 r151: [234..235]
 r152: [232..233]
 r153: [230..231]
 r154: [228..229]
 r155: [226..227]
 r156: [220..221]
 r157: [218..219]
 r158: [216..217]
 r159: [214..215]
 r160: [202..213]
 r161: [210..211]
 r162: [208..209]
 r163: [206..207]
 r164: [204..205]
 r165: [202..203]
 r166: [174..201]
 r167: [198..199]
 r168: [196..197]
 r169: [194..195]
 r170: [192..193]
 r171: [190..191]
 r172: [176..189]
 r173: [186..187]
 r174: [184..185]
 r175: [182..183]
 r176: [180..181]
 r177: [178..179]
 r178: [176..177]
 r179: [174..175]
 r180: [172..173]
 r181: [166..167]
 r182: [164..165]
 r183: [162..163]
 r184: [160..161]
 r185: [146..159]
 r186: [156..157]
 r187: [154..155]
 r188: [152..153]
 r189: [150..151]
 r190: [148..149]
 r191: [146..147]
 r192: [128..129]
 r193: [126..127]
 r194: [110..125]
 r196: [118..119]
 r197: [116..117]
 r198: [110..111]
 r199: [106..107]
 r200: [104..105]
 r201: [102..103]
 r202: [86..101]
 r204: [94..95]
 r205: [92..93]
 r206: [86..87]
 r207: [70..71]
 r208: [68..69]
 r209: [52..67]
 r211: [60..61]
 r212: [58..59]
 r213: [52..53]
 r214: [48..49]
 r215: [46..47]
 r216: [44..45]
 r217: [28..43]
 r219: [36..37]
 r220: [34..35]
 r221: [28..29]
 r222: [2..3]
 r223: [0..1]
 r224: [26..27]
 r225: [24..25]
 r226: [22..23]
 r227: [20..21]
 r228: [18..19]
 r229: [16..17]
 r230: [14..15]
 r231: [12..13]
 r232: [10..11]
 r233: [8..9]
 r234: [382..383]
 r235: [378..379]
 r236: [372..373]
 r237: [368..369]
 r238: [360..361]
 r239: [354..355]
 r240: [348..349]
 r241: [342..343]
 r242: [330..331]
 r243: [328..329]
 r244: [324..325]
 r245: [318..319]
 r246: [312..313]
 r247: [304..305]
 r248: [302..303]
 r249: [298..299]
 r250: [292..293]
 r251: [288..289]
 r252: [280..281]
 r253: [274..275]
 r254: [268..269]
 r255: [262..263]
 r256: [250..251]
 r257: [248..249]
 r258: [244..245]
 r259: [238..239]
 r260: [232..233]
 r261: [224..225]
 r262: [222..223]
 r263: [218..219]
 r264: [212..213]
 r265: [208..209]
 r266: [200..201]
 r267: [194..195]
 r268: [188..189]
 r269: [182..183]
 r270: [170..171]
 r271: [168..169]
 r272: [164..165]
 r273: [158..159]
 r274: [152..153]
 r275: [144..145]
 r276: [138..139]
 r277: [142..143]
 r278: [132..133]
 r279: [136..137]
 r280: [130..131]
 r281: [126..127]
 r282: [122..123]
 r283: [108..109]
 r284: [102..103]
 r285: [98..99]
 r286: [80..81]
 r287: [84..85]
 r288: [74..75]
 r289: [78..79]
 r290: [72..73]
 r291: [68..69]
 r292: [64..65]
 r293: [50..51]
 r294: [44..45]
 r295: [40..41]
 r296: [6..7]
 r298: [140..141]
 r299: [134..135]
 r300: [124..125]
 r301: [120..121]
 r302: [112..115]
 r304: [100..101]
 r305: [96..97]
 r306: [88..91]
 r308: [82..83]
 r309: [76..77]
 r310: [66..67]
 r311: [62..63]
 r312: [54..57]
 r314: [42..43]
 r315: [38..39]
 r316: [30..33]
 r322: [30..31]
 r323: [54..55]
 r324: [88..89]
 r325: [112..113]
 r326: [32..41]
 r327: [56..65]
 r328: [90..99]
 r329: [114..123]

********** Assignment #2: **********

	 Assigning to 322 (cl=SSE_REGS, orig=218, freq=2, tfirst=322, tfreq=2)...
	   Assign 28 to optional reload r322 (freq=2)
	Hard reg 28 is preferable by r326 with profit 1
	 Assigning to 326 (cl=SSE_REGS, orig=218, freq=2, tfirst=322, tfreq=2)...
	 Assigning to 323 (cl=SSE_REGS, orig=210, freq=2, tfirst=323, tfreq=2)...
	   Assign 24 to optional reload r323 (freq=2)
	Hard reg 24 is preferable by r327 with profit 1
	 Assigning to 327 (cl=SSE_REGS, orig=210, freq=2, tfirst=323, tfreq=2)...
	 Assigning to 324 (cl=SSE_REGS, orig=203, freq=2, tfirst=324, tfreq=2)...
	   Assign 25 to optional reload r324 (freq=2)
	Hard reg 25 is preferable by r328 with profit 1
	 Assigning to 328 (cl=SSE_REGS, orig=203, freq=2, tfirst=324, tfreq=2)...
	 Assigning to 325 (cl=SSE_REGS, orig=195, freq=2, tfirst=325, tfreq=2)...
	   Assign 26 to optional reload r325 (freq=2)
	Hard reg 26 is preferable by r329 with profit 1
	 Assigning to 329 (cl=SSE_REGS, orig=195, freq=2, tfirst=325, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 4 (0.00%)
   Insn after restoring regs:
  326: r322:SF=r218:SF
      REG_DEAD r218:SF
   Insn after restoring regs:
  317: r218:SF=r314:SF
      REG_DEAD r314:SF
   Insn after restoring regs:
  327: r323:SF=r210:SF
      REG_DEAD r210:SF
   Insn after restoring regs:
  312: r210:SF=r310:SF
      REG_DEAD r310:SF
   Insn after restoring regs:
  328: r324:SF=r203:SF
      REG_DEAD r203:SF
   Insn after restoring regs:
  303: r203:SF=r304:SF
      REG_DEAD r304:SF
   Insn after restoring regs:
  329: r325:SF=r195:SF
      REG_DEAD r195:SF
   Insn after restoring regs:
  298: r195:SF=r300:SF
      REG_DEAD r300:SF
Keep optional reload reg 303
Keep optional reload reg 307
Keep optional reload reg 313
Keep optional reload reg 317
Remove optional reload reg 322
  Restoring original insn:
  270: r316:SF=r316:SF*r218:SF
      REG_DEAD r218:SF
  Deleting move 326
  326: r322:SF=r218:SF
      REG_DEAD r218:SF
deleting insn with uid = 326.
Remove optional reload reg 323
  Restoring original insn:
  256: r312:SF=r312:SF*r210:SF
      REG_DEAD r210:SF
  Deleting move 327
  327: r323:SF=r210:SF
      REG_DEAD r210:SF
deleting insn with uid = 327.
Remove optional reload reg 324
  Restoring original insn:
  237: r306:SF=r306:SF*r203:SF
      REG_DEAD r203:SF
  Deleting move 328
  328: r324:SF=r203:SF
      REG_DEAD r203:SF
deleting insn with uid = 328.
Remove optional reload reg 325
  Restoring original insn:
  223: r302:SF=r302:SF*r195:SF
      REG_DEAD r195:SF
  Deleting move 329
  329: r325:SF=r195:SF
      REG_DEAD r195:SF
deleting insn with uid = 329.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 270:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 237:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
   Insn 289: point = 0
   Insn 288: point = 0
   Insn 284: point = 1
   Insn 281: point = 3
  BB 4
   Insn 279: point = 4
   Insn 278: point = 4
   Insn 276: point = 5
   Insn 275: point = 7
  BB 2
   Insn 291: point = 8
   Insn 31: point = 8
   Insn 30: point = 8
   Insn 29: point = 9
   Insn 28: point = 10
   Insn 27: point = 11
   Insn 26: point = 12
   Insn 25: point = 13
   Insn 24: point = 14
   Insn 23: point = 15
   Insn 22: point = 16
   Insn 21: point = 17
   Insn 20: point = 18
   Insn 19: point = 19
   Insn 18: point = 20
   Insn 17: point = 21
   Insn 16: point = 22
   Insn 15: point = 23
   Insn 14: point = 24
   Insn 13: point = 25
   Insn 12: point = 26
   Insn 11: point = 27
   Insn 10: point = 28
   Insn 6: point = 28
   Insn 5: point = 28
   Insn 4: point = 28
   Insn 3: point = 28
   Insn 2: point = 28
  BB 3
   Insn 272: point = 28
   Insn 271: point = 28
   Insn 320: point = 29
   Insn 270: point = 31
   Insn 319: point = 32
   Insn 269: point = 34
   Insn 268: point = 36
   Insn 267: point = 37
   Insn 318: point = 37
   Insn 266: point = 38
   Insn 265: point = 40
   Insn 317: point = 41
   Insn 264: point = 43
   Insn 263: point = 44
   Insn 262: point = 46
   Insn 261: point = 47
   Insn 260: point = 49
   Insn 259: point = 51
   Insn 258: point = 53
   Insn 257: point = 54
   Insn 315: point = 55
   Insn 256: point = 57
   Insn 314: point = 58
   Insn 255: point = 60
   Insn 254: point = 62
   Insn 253: point = 63
   Insn 313: point = 63
   Insn 252: point = 64
   Insn 251: point = 66
   Insn 312: point = 67
   Insn 250: point = 69
   Insn 249: point = 70
   Insn 248: point = 72
   Insn 247: point = 73
   Insn 246: point = 75
   Insn 245: point = 77
   Insn 244: point = 78
   Insn 311: point = 79
   Insn 243: point = 81
   Insn 310: point = 81
   Insn 242: point = 83
   Insn 241: point = 84
   Insn 309: point = 85
   Insn 240: point = 87
   Insn 308: point = 87
   Insn 239: point = 89
   Insn 238: point = 90
   Insn 306: point = 91
   Insn 237: point = 93
   Insn 305: point = 94
   Insn 236: point = 96
   Insn 235: point = 98
   Insn 234: point = 99
   Insn 304: point = 99
   Insn 233: point = 100
   Insn 232: point = 102
   Insn 303: point = 103
   Insn 231: point = 105
   Insn 230: point = 106
   Insn 229: point = 108
   Insn 228: point = 109
   Insn 227: point = 111
   Insn 226: point = 113
   Insn 225: point = 115
   Insn 224: point = 116
   Insn 301: point = 117
   Insn 223: point = 119
   Insn 300: point = 120
   Insn 222: point = 122
   Insn 221: point = 124
   Insn 220: point = 125
   Insn 299: point = 125
   Insn 219: point = 126
   Insn 218: point = 128
   Insn 298: point = 129
   Insn 217: point = 131
   Insn 216: point = 132
   Insn 215: point = 134
   Insn 214: point = 135
   Insn 213: point = 137
   Insn 212: point = 139
   Insn 211: point = 140
   Insn 297: point = 141
   Insn 210: point = 143
   Insn 296: point = 143
   Insn 209: point = 145
   Insn 208: point = 146
   Insn 295: point = 147
   Insn 207: point = 149
   Insn 294: point = 149
   Insn 206: point = 151
   Insn 205: point = 152
   Insn 204: point = 153
   Insn 203: point = 154
   Insn 202: point = 154
   Insn 201: point = 155
   Insn 200: point = 156
   Insn 199: point = 158
   Insn 198: point = 160
   Insn 197: point = 162
   Insn 196: point = 163
   Insn 195: point = 165
   Insn 194: point = 167
   Insn 193: point = 169
   Insn 192: point = 170
   Insn 191: point = 172
   Insn 190: point = 174
   Insn 189: point = 176
   Insn 188: point = 177
   Insn 187: point = 179
   Insn 186: point = 181
   Insn 185: point = 182
   Insn 184: point = 183
   Insn 183: point = 184
   Insn 182: point = 184
   Insn 181: point = 185
   Insn 180: point = 187
   Insn 179: point = 189
   Insn 178: point = 191
   Insn 177: point = 193
   Insn 176: point = 195
   Insn 175: point = 196
   Insn 174: point = 198
   Insn 173: point = 200
   Insn 172: point = 202
   Insn 171: point = 203
   Insn 170: point = 205
   Insn 169: point = 207
   Insn 168: point = 209
   Insn 167: point = 210
   Insn 166: point = 212
   Insn 165: point = 214
   Insn 164: point = 216
   Insn 163: point = 217
   Insn 162: point = 219
   Insn 161: point = 221
   Insn 160: point = 223
   Insn 159: point = 225
   Insn 158: point = 226
   Insn 157: point = 228
   Insn 156: point = 230
   Insn 155: point = 231
   Insn 154: point = 233
   Insn 153: point = 235
   Insn 152: point = 237
   Insn 151: point = 238
   Insn 150: point = 240
   Insn 149: point = 242
   Insn 148: point = 243
   Insn 147: point = 244
   Insn 146: point = 245
   Insn 145: point = 245
   Insn 144: point = 246
   Insn 143: point = 247
   Insn 142: point = 249
   Insn 141: point = 251
   Insn 140: point = 253
   Insn 139: point = 254
   Insn 138: point = 256
   Insn 137: point = 258
   Insn 136: point = 260
   Insn 135: point = 261
   Insn 134: point = 263
   Insn 133: point = 265
   Insn 132: point = 267
   Insn 131: point = 268
   Insn 130: point = 270
   Insn 129: point = 272
   Insn 128: point = 273
   Insn 127: point = 274
   Insn 126: point = 275
   Insn 125: point = 275
   Insn 124: point = 276
   Insn 123: point = 278
   Insn 122: point = 280
   Insn 121: point = 282
   Insn 120: point = 284
   Insn 119: point = 286
   Insn 118: point = 287
   Insn 117: point = 289
   Insn 116: point = 291
   Insn 115: point = 293
   Insn 114: point = 294
   Insn 113: point = 296
   Insn 112: point = 298
   Insn 111: point = 300
   Insn 110: point = 301
   Insn 109: point = 303
   Insn 108: point = 305
   Insn 107: point = 307
   Insn 106: point = 308
   Insn 105: point = 310
   Insn 104: point = 312
   Insn 103: point = 314
   Insn 102: point = 316
   Insn 101: point = 317
   Insn 100: point = 319
   Insn 99: point = 321
   Insn 98: point = 322
   Insn 97: point = 324
   Insn 96: point = 326
   Insn 95: point = 328
   Insn 94: point = 329
   Insn 93: point = 331
   Insn 92: point = 333
   Insn 91: point = 334
   Insn 90: point = 335
   Insn 89: point = 336
   Insn 88: point = 336
   Insn 87: point = 337
   Insn 86: point = 338
   Insn 85: point = 340
   Insn 84: point = 342
   Insn 83: point = 344
   Insn 82: point = 345
   Insn 81: point = 347
   Insn 80: point = 349
   Insn 79: point = 351
   Insn 78: point = 352
   Insn 77: point = 354
   Insn 76: point = 356
   Insn 75: point = 358
   Insn 74: point = 359
   Insn 73: point = 361
   Insn 72: point = 363
   Insn 71: point = 364
   Insn 70: point = 365
   Insn 69: point = 366
   Insn 68: point = 366
   Insn 67: point = 367
   Insn 66: point = 369
   Insn 65: point = 371
   Insn 64: point = 373
   Insn 63: point = 375
   Insn 62: point = 377
   Insn 61: point = 378
   Insn 60: point = 380
   Insn 59: point = 382
   Insn 58: point = 384
   Insn 57: point = 385
   Insn 56: point = 387
   Insn 55: point = 389
   Insn 54: point = 391
   Insn 53: point = 392
   Insn 52: point = 394
   Insn 51: point = 396
   Insn 50: point = 398
   Insn 49: point = 399
   Insn 48: point = 401
   Insn 47: point = 403
   Insn 46: point = 405
   Insn 45: point = 407
   Insn 44: point = 408
   Insn 43: point = 410
   Insn 42: point = 412
   Insn 41: point = 413
   Insn 40: point = 415
   Insn 39: point = 417
   Insn 38: point = 419
   Insn 37: point = 420
   Insn 36: point = 422
   Insn 35: point = 424
 r195: [119..129]
 r203: [93..103]
 r210: [57..67]
 r218: [31..41]
 r301: [125..126]
 r305: [99..100]
 r311: [63..64]
 r315: [37..38]
Compressing live ranges: from 425 to 8 - 1%
Ranges after the compression:
 r195: [6..7]
 r203: [4..5]
 r210: [2..3]
 r218: [0..1]
 r301: [6..7]
 r305: [4..5]
 r311: [2..3]
 r315: [0..1]
  Slot 0 regnos (width = 4):	 195	 218	 210	 203
  Slot 1 regnos (width = 8):	 301	 315	 311	 305
Changing spilled pseudos to memory in insn #298
Changing spilled pseudos to memory in insn #219
Changing spilled pseudos to memory in insn #299
Changing spilled pseudos to memory in insn #223
Changing spilled pseudos to memory in insn #303
Changing spilled pseudos to memory in insn #233
Changing spilled pseudos to memory in insn #304
Changing spilled pseudos to memory in insn #237
Changing spilled pseudos to memory in insn #312
Changing spilled pseudos to memory in insn #252
Changing spilled pseudos to memory in insn #313
Changing spilled pseudos to memory in insn #256
Changing spilled pseudos to memory in insn #317
Changing spilled pseudos to memory in insn #266
Changing spilled pseudos to memory in insn #318
Changing spilled pseudos to memory in insn #270
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #270
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #318
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 318:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 266:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #317
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 317:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #256
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #313
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 313:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 252:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #312
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 312:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #237
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #304
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 304:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 233:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #303
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 303:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #223
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #299
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 299:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 219:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #298
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 298:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 276
changing reg in insn 278
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 49
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 87
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 106
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 144
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 145
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 163
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 190
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 201
changing reg in insn 194
changing reg in insn 195
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 202
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 216
changing reg in insn 216
changing reg in insn 224
changing reg in insn 221
changing reg in insn 222
changing reg in insn 222
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 230
changing reg in insn 230
changing reg in insn 238
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 238
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 249
changing reg in insn 249
changing reg in insn 249
changing reg in insn 257
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 261
changing reg in insn 263
changing reg in insn 263
changing reg in insn 263
changing reg in insn 271
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 271
changing reg in insn 281
changing reg in insn 284
changing reg in insn 284
changing reg in insn 288
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 99
changing reg in insn 100
changing reg in insn 102
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 136
changing reg in insn 137
changing reg in insn 140
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 164
changing reg in insn 165
changing reg in insn 168
changing reg in insn 172
changing reg in insn 173
changing reg in insn 176
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 189
changing reg in insn 193
changing reg in insn 194
changing reg in insn 197
changing reg in insn 204
changing reg in insn 205
changing reg in insn 208
changing reg in insn 206
changing reg in insn 211
changing reg in insn 209
changing reg in insn 212
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 225
changing reg in insn 226
changing reg in insn 229
changing reg in insn 230
changing reg in insn 232
changing reg in insn 233
changing reg in insn 241
changing reg in insn 239
changing reg in insn 244
changing reg in insn 242
changing reg in insn 245
changing reg in insn 246
changing reg in insn 248
changing reg in insn 249
changing reg in insn 251
changing reg in insn 252
changing reg in insn 258
changing reg in insn 259
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 266
changing reg in insn 275
changing reg in insn 276
deleting insn with uid = 68.
deleting insn with uid = 87.
deleting insn with uid = 88.
deleting insn with uid = 125.
deleting insn with uid = 144.
deleting insn with uid = 145.
deleting insn with uid = 182.
deleting insn with uid = 201.
deleting insn with uid = 202.
deleting insn with uid = 294.
deleting insn with uid = 296.
deleting insn with uid = 221.
deleting insn with uid = 300.
deleting insn with uid = 235.
deleting insn with uid = 305.
deleting insn with uid = 308.
deleting insn with uid = 310.
deleting insn with uid = 254.
deleting insn with uid = 314.
deleting insn with uid = 268.
deleting insn with uid = 319.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 220.
verify found no changes in insn with uid = 234.
verify found no changes in insn with uid = 253.
verify found no changes in insn with uid = 267.


int quality(float*, float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8]
;;  ref usage 	r0={139d,129u} r1={33d,23u,22e} r2={11d,1u} r3={4d,4u} r4={11d,1u} r5={11d,1u} r6={1d,112u} r7={1d,15u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={67d,1u} r18={10d} r19={10d} r20={1d,1u,22e} r21={64d,63u} r22={20d,9u} r23={14d,3u} r24={12d,1u} r25={12d,1u} r26={12d,1u} r27={12d,1u} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d,1u} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} 
;;    total ref usage 1390{978d,368u,44e} in 277{267 regular + 10 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 224 225 226 227 228 229 230 231 232 233
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
        (reg:DI 1 dx [ scratch ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 procpar_info+0 S8 A64])
        (reg:DI 2 cx [ procpar_info ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 preprocess+0 S8 A64])
        (reg:DI 37 r8 [ preprocess ])) preproc.cpp:378 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:380 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 0 ax [224])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [224])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DF 0 ax [225])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [225])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DF 0 ax [226])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [226])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 0 ax [227])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [227])) preproc.cpp:381 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DF 0 ax [228])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [228])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DF 0 ax [229])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [229])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 0 ax [230])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 0 ax [230])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DF 0 ax [231])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 0 ax [231])) preproc.cpp:382 128 {*movdf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DF 0 ax [232])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:383 128 {*movdf_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [232])) preproc.cpp:383 128 {*movdf_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DF 0 ax [233])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:383 128 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [233])) preproc.cpp:383 128 {*movdf_internal}
     (nil))
(insn 31 30 291 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:385 90 {*movsi_internal}
     (nil))
(jump_insn 291 31 292 2 (set (pc)
        (label_ref 273)) preproc.cpp:385 636 {jump}
     (nil)
 -> 273)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 292 291 277)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295
(code_label 277 292 34 3 74 "" [1 uses])
(note 34 277 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg:SI 0 ax [234])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:387 90 {*movsi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:DI 0 ax [orig:84 D.6807 ] [84])
        (sign_extend:DI (reg:SI 0 ax [234]))) preproc.cpp:387 142 {*extendsidi2_rex64}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg:DI 1 dx [orig:85 D.6807 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 D.6807 ] [84])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:387 497 {*ashldi3_1}
     (nil))
(insn 38 37 39 3 (set (reg/f:DI 0 ax [235])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:387 89 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.6808 ] [86])
                (plus:DI (reg/f:DI 0 ax [235])
                    (reg:DI 1 dx [orig:85 D.6807 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:387 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.6807 ] [85]))
        (nil)))
(insn 40 39 41 3 (set (reg:SF 21 xmm0 [orig:87 D.6809 ] [87])
        (mem:SF (reg/f:DI 0 ax [orig:86 D.6808 ] [86]) [0 *_19+0 S4 A32])) preproc.cpp:387 129 {*movsf_internal}
     (nil))
(insn 41 40 42 3 (set (reg:DF 22 xmm1 [orig:88 D.6810 ] [88])
        (float_extend:DF (reg:SF 21 xmm0 [orig:87 D.6809 ] [87]))) preproc.cpp:387 152 {*extendsfdf2_sse}
     (nil))
(insn 42 41 43 3 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:387 90 {*movsi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:DI 0 ax [orig:89 D.6807 ] [89])
        (sign_extend:DI (reg:SI 0 ax [236]))) preproc.cpp:387 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg:DI 1 dx [orig:90 D.6807 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.6807 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:387 497 {*ashldi3_1}
     (nil))
(insn 45 44 46 3 (set (reg/f:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:387 89 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6808 ] [91])
                (plus:DI (reg/f:DI 0 ax [237])
                    (reg:DI 1 dx [orig:90 D.6807 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:387 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6807 ] [90]))
        (nil)))
(insn 47 46 48 3 (set (reg:SF 21 xmm0 [orig:92 D.6809 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.6808 ] [91]) [0 *_24+0 S4 A32])) preproc.cpp:387 129 {*movsf_internal}
     (nil))
(insn 48 47 49 3 (set (reg:DF 21 xmm0 [orig:93 D.6810 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.6809 ] [92]))) preproc.cpp:387 152 {*extendsfdf2_sse}
     (nil))
(insn 49 48 50 3 (set (reg:DF 22 xmm1 [orig:94 D.6810 ] [94])
        (mult:DF (reg:DF 22 xmm1 [orig:88 D.6810 ] [88])
            (reg:DF 21 xmm0 [orig:93 D.6810 ] [93]))) preproc.cpp:387 776 {*fop_df_comm_sse}
     (nil))
(insn 50 49 51 3 (set (reg:SI 0 ax [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:388 90 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:DI 0 ax [orig:95 D.6811 ] [95])
        (sign_extend:DI (reg:SI 0 ax [238]))) preproc.cpp:388 142 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 0 ax [orig:96 D.6811 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 D.6811 ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 221 {*adddi_1}
     (nil))
(insn 53 52 54 3 (parallel [
            (set (reg:DI 1 dx [orig:97 D.6811 ] [97])
                (ashift:DI (reg:DI 0 ax [orig:96 D.6811 ] [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 497 {*ashldi3_1}
     (nil))
(insn 54 53 55 3 (set (reg/f:DI 0 ax [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:388 89 {*movdi_internal}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.6808 ] [98])
                (plus:DI (reg/f:DI 0 ax [239])
                    (reg:DI 1 dx [orig:97 D.6811 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.6811 ] [97]))
        (nil)))
(insn 56 55 57 3 (set (reg:SF 21 xmm0 [orig:99 D.6809 ] [99])
        (mem:SF (reg/f:DI 0 ax [orig:98 D.6808 ] [98]) [0 *_31+0 S4 A32])) preproc.cpp:388 129 {*movsf_internal}
     (nil))
(insn 57 56 58 3 (set (reg:DF 23 xmm2 [orig:100 D.6810 ] [100])
        (float_extend:DF (reg:SF 21 xmm0 [orig:99 D.6809 ] [99]))) preproc.cpp:388 152 {*extendsfdf2_sse}
     (nil))
(insn 58 57 59 3 (set (reg:SI 0 ax [240])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:388 90 {*movsi_internal}
     (nil))
(insn 59 58 60 3 (set (reg:DI 0 ax [orig:101 D.6811 ] [101])
        (sign_extend:DI (reg:SI 0 ax [240]))) preproc.cpp:388 142 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 3 (parallel [
            (set (reg:DI 0 ax [orig:102 D.6811 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 D.6811 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 221 {*adddi_1}
     (nil))
(insn 61 60 62 3 (parallel [
            (set (reg:DI 1 dx [orig:103 D.6811 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6811 ] [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 497 {*ashldi3_1}
     (nil))
(insn 62 61 63 3 (set (reg/f:DI 0 ax [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:388 89 {*movdi_internal}
     (nil))
(insn 63 62 64 3 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6808 ] [104])
                (plus:DI (reg/f:DI 0 ax [241])
                    (reg:DI 1 dx [orig:103 D.6811 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:388 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.6811 ] [103]))
        (nil)))
(insn 64 63 65 3 (set (reg:SF 21 xmm0 [orig:105 D.6809 ] [105])
        (mem:SF (reg/f:DI 0 ax [orig:104 D.6808 ] [104]) [0 *_37+0 S4 A32])) preproc.cpp:388 129 {*movsf_internal}
     (nil))
(insn 65 64 66 3 (set (reg:DF 21 xmm0 [orig:106 D.6810 ] [106])
        (float_extend:DF (reg:SF 21 xmm0 [orig:105 D.6809 ] [105]))) preproc.cpp:388 152 {*extendsfdf2_sse}
     (nil))
(insn 66 65 67 3 (set (reg:DF 21 xmm0 [orig:107 D.6810 ] [107])
        (mult:DF (reg:DF 21 xmm0 [orig:106 D.6810 ] [106])
            (reg:DF 23 xmm2 [orig:100 D.6810 ] [100]))) preproc.cpp:388 776 {*fop_df_comm_sse}
     (nil))
(insn 67 66 69 3 (set (reg:DF 21 xmm0 [orig:108 D.6810 ] [108])
        (plus:DF (reg:DF 21 xmm0 [orig:107 D.6810 ] [107])
            (reg:DF 22 xmm1 [orig:94 D.6810 ] [94]))) preproc.cpp:388 776 {*fop_df_comm_sse}
     (nil))
(call_insn 69 67 70 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:388 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 70 69 71 3 (set (reg:DF 0 ax [242])
        (reg:DF 21 xmm0)) preproc.cpp:388 128 {*movdf_internal}
     (nil))
(insn 71 70 72 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [242])) preproc.cpp:388 128 {*movdf_internal}
     (nil))
(insn 72 71 73 3 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 73 72 74 3 (set (reg:DI 0 ax [orig:109 D.6807 ] [109])
        (sign_extend:DI (reg:SI 0 ax [243]))) preproc.cpp:390 142 {*extendsidi2_rex64}
     (nil))
(insn 74 73 75 3 (parallel [
            (set (reg:DI 1 dx [orig:110 D.6807 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 D.6807 ] [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 497 {*ashldi3_1}
     (nil))
(insn 75 74 76 3 (set (reg/f:DI 0 ax [244])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:390 89 {*movdi_internal}
     (nil))
(insn 76 75 77 3 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.6808 ] [111])
                (plus:DI (reg/f:DI 0 ax [244])
                    (reg:DI 1 dx [orig:110 D.6807 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.6807 ] [110]))
        (nil)))
(insn 77 76 78 3 (set (reg:SF 21 xmm0 [orig:112 D.6809 ] [112])
        (mem:SF (reg/f:DI 0 ax [orig:111 D.6808 ] [111]) [0 *_45+0 S4 A32])) preproc.cpp:390 129 {*movsf_internal}
     (nil))
(insn 78 77 79 3 (set (reg:DF 22 xmm1 [orig:113 D.6810 ] [113])
        (float_extend:DF (reg:SF 21 xmm0 [orig:112 D.6809 ] [112]))) preproc.cpp:390 152 {*extendsfdf2_sse}
     (nil))
(insn 79 78 80 3 (set (reg:SI 0 ax [245])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:390 90 {*movsi_internal}
     (nil))
(insn 80 79 81 3 (set (reg:DI 0 ax [orig:114 D.6811 ] [114])
        (sign_extend:DI (reg:SI 0 ax [245]))) preproc.cpp:390 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 3 (parallel [
            (set (reg:DI 0 ax [orig:115 D.6811 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 D.6811 ] [114])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 221 {*adddi_1}
     (nil))
(insn 82 81 83 3 (parallel [
            (set (reg:DI 1 dx [orig:116 D.6811 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.6811 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 497 {*ashldi3_1}
     (nil))
(insn 83 82 84 3 (set (reg/f:DI 0 ax [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:390 89 {*movdi_internal}
     (nil))
(insn 84 83 85 3 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6808 ] [117])
                (plus:DI (reg/f:DI 0 ax [246])
                    (reg:DI 1 dx [orig:116 D.6811 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:390 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.6811 ] [116]))
        (nil)))
(insn 85 84 86 3 (set (reg:SF 21 xmm0 [orig:118 D.6809 ] [118])
        (mem:SF (reg/f:DI 0 ax [orig:117 D.6808 ] [117]) [0 *_51+0 S4 A32])) preproc.cpp:390 129 {*movsf_internal}
     (nil))
(insn 86 85 89 3 (set (reg:DF 21 xmm0 [orig:119 D.6810 ] [119])
        (float_extend:DF (reg:SF 21 xmm0 [orig:118 D.6809 ] [118]))) preproc.cpp:390 152 {*extendsfdf2_sse}
     (nil))
(call_insn 89 86 90 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b5719291100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:390 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 90 89 91 3 (set (reg:DF 0 ax [247])
        (reg:DF 21 xmm0)) preproc.cpp:390 128 {*movdf_internal}
     (nil))
(insn 91 90 92 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [247])) preproc.cpp:390 128 {*movdf_internal}
     (nil))
(insn 92 91 93 3 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:392 90 {*movsi_internal}
     (nil))
(insn 93 92 94 3 (set (reg:DI 0 ax [orig:120 D.6807 ] [120])
        (sign_extend:DI (reg:SI 0 ax [248]))) preproc.cpp:392 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 3 (parallel [
            (set (reg:DI 1 dx [orig:121 D.6807 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.6807 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:392 497 {*ashldi3_1}
     (nil))
(insn 95 94 96 3 (set (reg/f:DI 0 ax [249])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:392 89 {*movdi_internal}
     (nil))
(insn 96 95 97 3 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.6808 ] [122])
                (plus:DI (reg/f:DI 0 ax [249])
                    (reg:DI 1 dx [orig:121 D.6807 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:392 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.6807 ] [121]))
        (nil)))
(insn 97 96 98 3 (set (reg:SF 21 xmm0 [orig:123 D.6809 ] [123])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.6808 ] [122]) [0 *_58+0 S4 A32])) preproc.cpp:392 129 {*movsf_internal}
     (nil))
(insn 98 97 99 3 (set (reg:DF 22 xmm1 [orig:124 D.6810 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.6809 ] [123]))) preproc.cpp:392 152 {*extendsfdf2_sse}
     (nil))
(insn 99 98 100 3 (set (reg:SI 0 ax [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:392 90 {*movsi_internal}
     (nil))
(insn 100 99 101 3 (set (reg:DI 0 ax [orig:125 D.6807 ] [125])
        (sign_extend:DI (reg:SI 0 ax [250]))) preproc.cpp:392 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 3 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6807 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.6807 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:392 497 {*ashldi3_1}
     (nil))
(insn 102 101 103 3 (set (reg/f:DI 0 ax [251])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:392 89 {*movdi_internal}
     (nil))
(insn 103 102 104 3 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.6808 ] [127])
                (plus:DI (reg/f:DI 0 ax [251])
                    (reg:DI 1 dx [orig:126 D.6807 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:392 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6807 ] [126]))
        (nil)))
(insn 104 103 105 3 (set (reg:SF 21 xmm0 [orig:128 D.6809 ] [128])
        (mem:SF (reg/f:DI 0 ax [orig:127 D.6808 ] [127]) [0 *_63+0 S4 A32])) preproc.cpp:392 129 {*movsf_internal}
     (nil))
(insn 105 104 106 3 (set (reg:DF 21 xmm0 [orig:129 D.6810 ] [129])
        (float_extend:DF (reg:SF 21 xmm0 [orig:128 D.6809 ] [128]))) preproc.cpp:392 152 {*extendsfdf2_sse}
     (nil))
(insn 106 105 107 3 (set (reg:DF 22 xmm1 [orig:130 D.6810 ] [130])
        (mult:DF (reg:DF 22 xmm1 [orig:124 D.6810 ] [124])
            (reg:DF 21 xmm0 [orig:129 D.6810 ] [129]))) preproc.cpp:392 776 {*fop_df_comm_sse}
     (nil))
(insn 107 106 108 3 (set (reg:SI 0 ax [252])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:393 90 {*movsi_internal}
     (nil))
(insn 108 107 109 3 (set (reg:DI 0 ax [orig:131 D.6811 ] [131])
        (sign_extend:DI (reg:SI 0 ax [252]))) preproc.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 3 (parallel [
            (set (reg:DI 0 ax [orig:132 D.6811 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 D.6811 ] [131])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 221 {*adddi_1}
     (nil))
(insn 110 109 111 3 (parallel [
            (set (reg:DI 1 dx [orig:133 D.6811 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6811 ] [132])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 497 {*ashldi3_1}
     (nil))
(insn 111 110 112 3 (set (reg/f:DI 0 ax [253])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:393 89 {*movdi_internal}
     (nil))
(insn 112 111 113 3 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6808 ] [134])
                (plus:DI (reg/f:DI 0 ax [253])
                    (reg:DI 1 dx [orig:133 D.6811 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6811 ] [133]))
        (nil)))
(insn 113 112 114 3 (set (reg:SF 21 xmm0 [orig:135 D.6809 ] [135])
        (mem:SF (reg/f:DI 0 ax [orig:134 D.6808 ] [134]) [0 *_70+0 S4 A32])) preproc.cpp:393 129 {*movsf_internal}
     (nil))
(insn 114 113 115 3 (set (reg:DF 23 xmm2 [orig:136 D.6810 ] [136])
        (float_extend:DF (reg:SF 21 xmm0 [orig:135 D.6809 ] [135]))) preproc.cpp:393 152 {*extendsfdf2_sse}
     (nil))
(insn 115 114 116 3 (set (reg:SI 0 ax [254])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:393 90 {*movsi_internal}
     (nil))
(insn 116 115 117 3 (set (reg:DI 0 ax [orig:137 D.6811 ] [137])
        (sign_extend:DI (reg:SI 0 ax [254]))) preproc.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 117 116 118 3 (parallel [
            (set (reg:DI 0 ax [orig:138 D.6811 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 D.6811 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 221 {*adddi_1}
     (nil))
(insn 118 117 119 3 (parallel [
            (set (reg:DI 1 dx [orig:139 D.6811 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.6811 ] [138])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 497 {*ashldi3_1}
     (nil))
(insn 119 118 120 3 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:393 89 {*movdi_internal}
     (nil))
(insn 120 119 121 3 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.6808 ] [140])
                (plus:DI (reg/f:DI 0 ax [255])
                    (reg:DI 1 dx [orig:139 D.6811 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:393 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.6811 ] [139]))
        (nil)))
(insn 121 120 122 3 (set (reg:SF 21 xmm0 [orig:141 D.6809 ] [141])
        (mem:SF (reg/f:DI 0 ax [orig:140 D.6808 ] [140]) [0 *_76+0 S4 A32])) preproc.cpp:393 129 {*movsf_internal}
     (nil))
(insn 122 121 123 3 (set (reg:DF 21 xmm0 [orig:142 D.6810 ] [142])
        (float_extend:DF (reg:SF 21 xmm0 [orig:141 D.6809 ] [141]))) preproc.cpp:393 152 {*extendsfdf2_sse}
     (nil))
(insn 123 122 124 3 (set (reg:DF 21 xmm0 [orig:143 D.6810 ] [143])
        (mult:DF (reg:DF 21 xmm0 [orig:142 D.6810 ] [142])
            (reg:DF 23 xmm2 [orig:136 D.6810 ] [136]))) preproc.cpp:393 776 {*fop_df_comm_sse}
     (nil))
(insn 124 123 126 3 (set (reg:DF 21 xmm0 [orig:144 D.6810 ] [144])
        (plus:DF (reg:DF 21 xmm0 [orig:143 D.6810 ] [143])
            (reg:DF 22 xmm1 [orig:130 D.6810 ] [130]))) preproc.cpp:393 776 {*fop_df_comm_sse}
     (nil))
(call_insn 126 124 127 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:393 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 127 126 128 3 (set (reg:DF 0 ax [256])
        (reg:DF 21 xmm0)) preproc.cpp:393 128 {*movdf_internal}
     (nil))
(insn 128 127 129 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [256])) preproc.cpp:393 128 {*movdf_internal}
     (nil))
(insn 129 128 130 3 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:395 90 {*movsi_internal}
     (nil))
(insn 130 129 131 3 (set (reg:DI 0 ax [orig:145 D.6807 ] [145])
        (sign_extend:DI (reg:SI 0 ax [257]))) preproc.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 131 130 132 3 (parallel [
            (set (reg:DI 1 dx [orig:146 D.6807 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.6807 ] [145])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 497 {*ashldi3_1}
     (nil))
(insn 132 131 133 3 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:395 89 {*movdi_internal}
     (nil))
(insn 133 132 134 3 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6808 ] [147])
                (plus:DI (reg/f:DI 0 ax [258])
                    (reg:DI 1 dx [orig:146 D.6807 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:146 D.6807 ] [146]))
        (nil)))
(insn 134 133 135 3 (set (reg:SF 21 xmm0 [orig:148 D.6809 ] [148])
        (mem:SF (reg/f:DI 0 ax [orig:147 D.6808 ] [147]) [0 *_84+0 S4 A32])) preproc.cpp:395 129 {*movsf_internal}
     (nil))
(insn 135 134 136 3 (set (reg:DF 22 xmm1 [orig:149 D.6810 ] [149])
        (float_extend:DF (reg:SF 21 xmm0 [orig:148 D.6809 ] [148]))) preproc.cpp:395 152 {*extendsfdf2_sse}
     (nil))
(insn 136 135 137 3 (set (reg:SI 0 ax [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:395 90 {*movsi_internal}
     (nil))
(insn 137 136 138 3 (set (reg:DI 0 ax [orig:150 D.6811 ] [150])
        (sign_extend:DI (reg:SI 0 ax [259]))) preproc.cpp:395 142 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 3 (parallel [
            (set (reg:DI 0 ax [orig:151 D.6811 ] [151])
                (plus:DI (reg:DI 0 ax [orig:150 D.6811 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 221 {*adddi_1}
     (nil))
(insn 139 138 140 3 (parallel [
            (set (reg:DI 1 dx [orig:152 D.6811 ] [152])
                (ashift:DI (reg:DI 0 ax [orig:151 D.6811 ] [151])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 497 {*ashldi3_1}
     (nil))
(insn 140 139 141 3 (set (reg/f:DI 0 ax [260])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:395 89 {*movdi_internal}
     (nil))
(insn 141 140 142 3 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.6808 ] [153])
                (plus:DI (reg/f:DI 0 ax [260])
                    (reg:DI 1 dx [orig:152 D.6811 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:395 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:152 D.6811 ] [152]))
        (nil)))
(insn 142 141 143 3 (set (reg:SF 21 xmm0 [orig:154 D.6809 ] [154])
        (mem:SF (reg/f:DI 0 ax [orig:153 D.6808 ] [153]) [0 *_90+0 S4 A32])) preproc.cpp:395 129 {*movsf_internal}
     (nil))
(insn 143 142 146 3 (set (reg:DF 21 xmm0 [orig:155 D.6810 ] [155])
        (float_extend:DF (reg:SF 21 xmm0 [orig:154 D.6809 ] [154]))) preproc.cpp:395 152 {*extendsfdf2_sse}
     (nil))
(call_insn 146 143 147 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b5719291100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:395 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 147 146 148 3 (set (reg:DF 0 ax [261])
        (reg:DF 21 xmm0)) preproc.cpp:395 128 {*movdf_internal}
     (nil))
(insn 148 147 149 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [261])) preproc.cpp:395 128 {*movdf_internal}
     (nil))
(insn 149 148 150 3 (set (reg:SI 0 ax [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:397 90 {*movsi_internal}
     (nil))
(insn 150 149 151 3 (set (reg:DI 0 ax [orig:156 D.6807 ] [156])
        (sign_extend:DI (reg:SI 0 ax [262]))) preproc.cpp:397 142 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 3 (parallel [
            (set (reg:DI 1 dx [orig:157 D.6807 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 D.6807 ] [156])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:397 497 {*ashldi3_1}
     (nil))
(insn 152 151 153 3 (set (reg/f:DI 0 ax [263])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:397 89 {*movdi_internal}
     (nil))
(insn 153 152 154 3 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.6808 ] [158])
                (plus:DI (reg/f:DI 0 ax [263])
                    (reg:DI 1 dx [orig:157 D.6807 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:397 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:157 D.6807 ] [157]))
        (nil)))
(insn 154 153 155 3 (set (reg:SF 21 xmm0 [orig:159 D.6809 ] [159])
        (mem:SF (reg/f:DI 0 ax [orig:158 D.6808 ] [158]) [0 *_97+0 S4 A32])) preproc.cpp:397 129 {*movsf_internal}
     (nil))
(insn 155 154 156 3 (set (reg:DF 22 xmm1 [orig:160 D.6810 ] [160])
        (float_extend:DF (reg:SF 21 xmm0 [orig:159 D.6809 ] [159]))) preproc.cpp:397 152 {*extendsfdf2_sse}
     (nil))
(insn 156 155 157 3 (set (reg:SI 0 ax [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:397 90 {*movsi_internal}
     (nil))
(insn 157 156 158 3 (set (reg:DI 0 ax [orig:161 D.6807 ] [161])
        (sign_extend:DI (reg:SI 0 ax [264]))) preproc.cpp:397 142 {*extendsidi2_rex64}
     (nil))
(insn 158 157 159 3 (parallel [
            (set (reg:DI 1 dx [orig:162 D.6807 ] [162])
                (ashift:DI (reg:DI 0 ax [orig:161 D.6807 ] [161])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:397 497 {*ashldi3_1}
     (nil))
(insn 159 158 160 3 (set (reg/f:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:397 89 {*movdi_internal}
     (nil))
(insn 160 159 161 3 (parallel [
            (set (reg/f:DI 0 ax [orig:163 D.6808 ] [163])
                (plus:DI (reg/f:DI 0 ax [265])
                    (reg:DI 1 dx [orig:162 D.6807 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:397 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:162 D.6807 ] [162]))
        (nil)))
(insn 161 160 162 3 (set (reg:SF 21 xmm0 [orig:164 D.6809 ] [164])
        (mem:SF (reg/f:DI 0 ax [orig:163 D.6808 ] [163]) [0 *_102+0 S4 A32])) preproc.cpp:397 129 {*movsf_internal}
     (nil))
(insn 162 161 163 3 (set (reg:DF 21 xmm0 [orig:165 D.6810 ] [165])
        (float_extend:DF (reg:SF 21 xmm0 [orig:164 D.6809 ] [164]))) preproc.cpp:397 152 {*extendsfdf2_sse}
     (nil))
(insn 163 162 164 3 (set (reg:DF 22 xmm1 [orig:166 D.6810 ] [166])
        (mult:DF (reg:DF 22 xmm1 [orig:160 D.6810 ] [160])
            (reg:DF 21 xmm0 [orig:165 D.6810 ] [165]))) preproc.cpp:397 776 {*fop_df_comm_sse}
     (nil))
(insn 164 163 165 3 (set (reg:SI 0 ax [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 165 164 166 3 (set (reg:DI 0 ax [orig:167 D.6811 ] [167])
        (sign_extend:DI (reg:SI 0 ax [266]))) preproc.cpp:398 142 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 3 (parallel [
            (set (reg:DI 0 ax [orig:168 D.6811 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 D.6811 ] [167])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 221 {*adddi_1}
     (nil))
(insn 167 166 168 3 (parallel [
            (set (reg:DI 1 dx [orig:169 D.6811 ] [169])
                (ashift:DI (reg:DI 0 ax [orig:168 D.6811 ] [168])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 497 {*ashldi3_1}
     (nil))
(insn 168 167 169 3 (set (reg/f:DI 0 ax [267])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:398 89 {*movdi_internal}
     (nil))
(insn 169 168 170 3 (parallel [
            (set (reg/f:DI 0 ax [orig:170 D.6808 ] [170])
                (plus:DI (reg/f:DI 0 ax [267])
                    (reg:DI 1 dx [orig:169 D.6811 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:169 D.6811 ] [169]))
        (nil)))
(insn 170 169 171 3 (set (reg:SF 21 xmm0 [orig:171 D.6809 ] [171])
        (mem:SF (reg/f:DI 0 ax [orig:170 D.6808 ] [170]) [0 *_109+0 S4 A32])) preproc.cpp:398 129 {*movsf_internal}
     (nil))
(insn 171 170 172 3 (set (reg:DF 23 xmm2 [orig:172 D.6810 ] [172])
        (float_extend:DF (reg:SF 21 xmm0 [orig:171 D.6809 ] [171]))) preproc.cpp:398 152 {*extendsfdf2_sse}
     (nil))
(insn 172 171 173 3 (set (reg:SI 0 ax [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:398 90 {*movsi_internal}
     (nil))
(insn 173 172 174 3 (set (reg:DI 0 ax [orig:173 D.6811 ] [173])
        (sign_extend:DI (reg:SI 0 ax [268]))) preproc.cpp:398 142 {*extendsidi2_rex64}
     (nil))
(insn 174 173 175 3 (parallel [
            (set (reg:DI 0 ax [orig:174 D.6811 ] [174])
                (plus:DI (reg:DI 0 ax [orig:173 D.6811 ] [173])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 221 {*adddi_1}
     (nil))
(insn 175 174 176 3 (parallel [
            (set (reg:DI 1 dx [orig:175 D.6811 ] [175])
                (ashift:DI (reg:DI 0 ax [orig:174 D.6811 ] [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 497 {*ashldi3_1}
     (nil))
(insn 176 175 177 3 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:398 89 {*movdi_internal}
     (nil))
(insn 177 176 178 3 (parallel [
            (set (reg/f:DI 0 ax [orig:176 D.6808 ] [176])
                (plus:DI (reg/f:DI 0 ax [269])
                    (reg:DI 1 dx [orig:175 D.6811 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:398 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.6811 ] [175]))
        (nil)))
(insn 178 177 179 3 (set (reg:SF 21 xmm0 [orig:177 D.6809 ] [177])
        (mem:SF (reg/f:DI 0 ax [orig:176 D.6808 ] [176]) [0 *_115+0 S4 A32])) preproc.cpp:398 129 {*movsf_internal}
     (nil))
(insn 179 178 180 3 (set (reg:DF 21 xmm0 [orig:178 D.6810 ] [178])
        (float_extend:DF (reg:SF 21 xmm0 [orig:177 D.6809 ] [177]))) preproc.cpp:398 152 {*extendsfdf2_sse}
     (nil))
(insn 180 179 181 3 (set (reg:DF 21 xmm0 [orig:179 D.6810 ] [179])
        (mult:DF (reg:DF 21 xmm0 [orig:178 D.6810 ] [178])
            (reg:DF 23 xmm2 [orig:172 D.6810 ] [172]))) preproc.cpp:398 776 {*fop_df_comm_sse}
     (nil))
(insn 181 180 183 3 (set (reg:DF 21 xmm0 [orig:180 D.6810 ] [180])
        (plus:DF (reg:DF 21 xmm0 [orig:179 D.6810 ] [179])
            (reg:DF 22 xmm1 [orig:166 D.6810 ] [166]))) preproc.cpp:398 776 {*fop_df_comm_sse}
     (nil))
(call_insn 183 181 184 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:398 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 184 183 185 3 (set (reg:DF 0 ax [270])
        (reg:DF 21 xmm0)) preproc.cpp:398 128 {*movdf_internal}
     (nil))
(insn 185 184 186 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [270])) preproc.cpp:398 128 {*movdf_internal}
     (nil))
(insn 186 185 187 3 (set (reg:SI 0 ax [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:400 90 {*movsi_internal}
     (nil))
(insn 187 186 188 3 (set (reg:DI 0 ax [orig:181 D.6807 ] [181])
        (sign_extend:DI (reg:SI 0 ax [271]))) preproc.cpp:400 142 {*extendsidi2_rex64}
     (nil))
(insn 188 187 189 3 (parallel [
            (set (reg:DI 1 dx [orig:182 D.6807 ] [182])
                (ashift:DI (reg:DI 0 ax [orig:181 D.6807 ] [181])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 497 {*ashldi3_1}
     (nil))
(insn 189 188 190 3 (set (reg/f:DI 0 ax [272])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:400 89 {*movdi_internal}
     (nil))
(insn 190 189 191 3 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.6808 ] [183])
                (plus:DI (reg/f:DI 0 ax [272])
                    (reg:DI 1 dx [orig:182 D.6807 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.6807 ] [182]))
        (nil)))
(insn 191 190 192 3 (set (reg:SF 21 xmm0 [orig:184 D.6809 ] [184])
        (mem:SF (reg/f:DI 0 ax [orig:183 D.6808 ] [183]) [0 *_123+0 S4 A32])) preproc.cpp:400 129 {*movsf_internal}
     (nil))
(insn 192 191 193 3 (set (reg:DF 22 xmm1 [orig:185 D.6810 ] [185])
        (float_extend:DF (reg:SF 21 xmm0 [orig:184 D.6809 ] [184]))) preproc.cpp:400 152 {*extendsfdf2_sse}
     (nil))
(insn 193 192 194 3 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:400 90 {*movsi_internal}
     (nil))
(insn 194 193 195 3 (set (reg:DI 0 ax [orig:186 D.6811 ] [186])
        (sign_extend:DI (reg:SI 0 ax [273]))) preproc.cpp:400 142 {*extendsidi2_rex64}
     (nil))
(insn 195 194 196 3 (parallel [
            (set (reg:DI 0 ax [orig:187 D.6811 ] [187])
                (plus:DI (reg:DI 0 ax [orig:186 D.6811 ] [186])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 221 {*adddi_1}
     (nil))
(insn 196 195 197 3 (parallel [
            (set (reg:DI 1 dx [orig:188 D.6811 ] [188])
                (ashift:DI (reg:DI 0 ax [orig:187 D.6811 ] [187])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 497 {*ashldi3_1}
     (nil))
(insn 197 196 198 3 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])) preproc.cpp:400 89 {*movdi_internal}
     (nil))
(insn 198 197 199 3 (parallel [
            (set (reg/f:DI 0 ax [orig:189 D.6808 ] [189])
                (plus:DI (reg/f:DI 0 ax [274])
                    (reg:DI 1 dx [orig:188 D.6811 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:400 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:188 D.6811 ] [188]))
        (nil)))
(insn 199 198 200 3 (set (reg:SF 21 xmm0 [orig:190 D.6809 ] [190])
        (mem:SF (reg/f:DI 0 ax [orig:189 D.6808 ] [189]) [0 *_129+0 S4 A32])) preproc.cpp:400 129 {*movsf_internal}
     (nil))
(insn 200 199 203 3 (set (reg:DF 21 xmm0 [orig:191 D.6810 ] [191])
        (float_extend:DF (reg:SF 21 xmm0 [orig:190 D.6809 ] [190]))) preproc.cpp:400 152 {*extendsfdf2_sse}
     (nil))
(call_insn 203 200 204 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b5719291100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:400 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 204 203 205 3 (set (reg:DF 0 ax [275])
        (reg:DF 21 xmm0)) preproc.cpp:400 128 {*movdf_internal}
     (nil))
(insn 205 204 206 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [275])) preproc.cpp:400 128 {*movdf_internal}
     (nil))
(insn 206 205 207 3 (set (reg:DF 21 xmm0 [277])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])) preproc.cpp:404 128 {*movdf_internal}
     (nil))
(insn 207 206 295 3 (set (reg:DF 21 xmm0 [276])
        (div:DF (reg:DF 21 xmm0 [276])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:404 783 {*fop_df_1_sse}
     (nil))
(insn 295 207 208 3 (set (reg:DF 0 ax [276])
        (reg:DF 21 xmm0 [276])) preproc.cpp:404 128 {*movdf_internal}
     (nil))
(insn 208 295 209 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [276])) preproc.cpp:404 128 {*movdf_internal}
     (nil))
(insn 209 208 210 3 (set (reg:DF 21 xmm0 [279])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 phase_sup+0 S8 A64])) preproc.cpp:405 128 {*movdf_internal}
     (nil))
(insn 210 209 297 3 (set (reg:DF 21 xmm0 [278])
        (minus:DF (reg:DF 21 xmm0 [278])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64]))) preproc.cpp:405 783 {*fop_df_1_sse}
     (nil))
(insn 297 210 211 3 (set (reg:DF 0 ax [278])
        (reg:DF 21 xmm0 [278])) preproc.cpp:405 128 {*movdf_internal}
     (nil))
(insn 211 297 212 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 0 ax [278])) preproc.cpp:405 128 {*movdf_internal}
     (nil))
(insn 212 211 213 3 (set (reg:SI 0 ax [280])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:407 90 {*movsi_internal}
     (nil))
(insn 213 212 214 3 (set (reg:DI 0 ax [orig:192 D.6807 ] [192])
        (sign_extend:DI (reg:SI 0 ax [280]))) preproc.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 3 (parallel [
            (set (reg:DI 1 dx [orig:193 D.6807 ] [193])
                (ashift:DI (reg:DI 0 ax [orig:192 D.6807 ] [192])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:407 497 {*ashldi3_1}
     (nil))
(insn 215 214 216 3 (set (reg/f:DI 0 ax [281])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:407 89 {*movdi_internal}
     (nil))
(insn 216 215 217 3 (parallel [
            (set (reg/f:DI 3 bx [orig:194 D.6808 ] [194])
                (plus:DI (reg:DI 1 dx [orig:193 D.6807 ] [193])
                    (reg/f:DI 0 ax [281])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:407 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:193 D.6807 ] [193]))
        (nil)))
(insn 217 216 298 3 (set (reg:SF 24 xmm3 [orig:195 D.6809 ] [195])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64]))) preproc.cpp:407 157 {*truncdfsf_fast_sse}
     (nil))
(insn 298 217 333 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 24 xmm3 [orig:195 D.6809 ] [195])) preproc.cpp:407 129 {*movsf_internal}
     (nil))
(note 333 298 325 3 NOTE_INSN_DELETED)
(note 325 333 218 3 NOTE_INSN_DELETED)
(insn 218 325 219 3 (set (reg:DF 0 ax [282])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])) preproc.cpp:407 128 {*movdf_internal}
     (nil))
(insn 219 218 299 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [282])) preproc.cpp:407 128 {*movdf_internal}
     (nil))
(insn 299 219 220 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) preproc.cpp:407 128 {*movdf_internal}
     (nil))
(call_insn/u 220 299 222 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b5719296400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:407 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 222 220 302 3 (set (reg:SF 21 xmm0 [orig:197 D.6809 ] [197])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:196 D.6810 ] [196]))) preproc.cpp:407 157 {*truncdfsf_fast_sse}
     (nil))
(note 302 222 329 3 NOTE_INSN_DELETED)
(note 329 302 223 3 NOTE_INSN_DELETED)
(insn 223 329 301 3 (set (reg:SF 21 xmm0 [orig:198 D.6809 ] [198])
        (mult:SF (reg:SF 21 xmm0 [orig:198 D.6809 ] [198])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) preproc.cpp:407 775 {*fop_sf_comm_sse}
     (nil))
(insn 301 223 224 3 (set (reg:SF 0 ax [orig:198 D.6809 ] [198])
        (reg:SF 21 xmm0 [orig:198 D.6809 ] [198])) preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 224 301 225 3 (set (mem:SF (reg/f:DI 3 bx [orig:194 D.6808 ] [194]) [0 *_137+0 S4 A32])
        (reg:SF 0 ax [orig:198 D.6809 ] [198])) preproc.cpp:407 129 {*movsf_internal}
     (nil))
(insn 225 224 226 3 (set (reg:SI 0 ax [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:408 90 {*movsi_internal}
     (nil))
(insn 226 225 227 3 (set (reg:DI 0 ax [orig:199 D.6811 ] [199])
        (sign_extend:DI (reg:SI 0 ax [283]))) preproc.cpp:408 142 {*extendsidi2_rex64}
     (nil))
(insn 227 226 228 3 (parallel [
            (set (reg:DI 0 ax [orig:200 D.6811 ] [200])
                (plus:DI (reg:DI 0 ax [orig:199 D.6811 ] [199])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:408 221 {*adddi_1}
     (nil))
(insn 228 227 229 3 (parallel [
            (set (reg:DI 1 dx [orig:201 D.6811 ] [201])
                (ashift:DI (reg:DI 0 ax [orig:200 D.6811 ] [200])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:408 497 {*ashldi3_1}
     (nil))
(insn 229 228 230 3 (set (reg/f:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])) preproc.cpp:408 89 {*movdi_internal}
     (nil))
(insn 230 229 231 3 (parallel [
            (set (reg/f:DI 3 bx [orig:202 D.6808 ] [202])
                (plus:DI (reg:DI 1 dx [orig:201 D.6811 ] [201])
                    (reg/f:DI 0 ax [284])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:408 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:201 D.6811 ] [201]))
        (nil)))
(insn 231 230 303 3 (set (reg:SF 25 xmm4 [orig:203 D.6809 ] [203])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 div_sup_mag+0 S8 A64]))) preproc.cpp:408 157 {*truncdfsf_fast_sse}
     (nil))
(insn 303 231 332 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 25 xmm4 [orig:203 D.6809 ] [203])) preproc.cpp:408 129 {*movsf_internal}
     (nil))
(note 332 303 324 3 NOTE_INSN_DELETED)
(note 324 332 232 3 NOTE_INSN_DELETED)
(insn 232 324 233 3 (set (reg:DF 0 ax [285])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 div_sup_phase+0 S8 A64])) preproc.cpp:408 128 {*movdf_internal}
     (nil))
(insn 233 232 304 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [285])) preproc.cpp:408 128 {*movdf_internal}
     (nil))
(insn 304 233 234 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) preproc.cpp:408 128 {*movdf_internal}
     (nil))
(call_insn/u 234 304 236 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b57192d4e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:408 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 236 234 307 3 (set (reg:SF 21 xmm0 [orig:205 D.6809 ] [205])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:204 D.6810 ] [204]))) preproc.cpp:408 157 {*truncdfsf_fast_sse}
     (nil))
(note 307 236 328 3 NOTE_INSN_DELETED)
(note 328 307 237 3 NOTE_INSN_DELETED)
(insn 237 328 306 3 (set (reg:SF 21 xmm0 [orig:206 D.6809 ] [206])
        (mult:SF (reg:SF 21 xmm0 [orig:206 D.6809 ] [206])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) preproc.cpp:408 775 {*fop_sf_comm_sse}
     (nil))
(insn 306 237 238 3 (set (reg:SF 0 ax [orig:206 D.6809 ] [206])
        (reg:SF 21 xmm0 [orig:206 D.6809 ] [206])) preproc.cpp:408 129 {*movsf_internal}
     (nil))
(insn 238 306 239 3 (set (mem:SF (reg/f:DI 3 bx [orig:202 D.6808 ] [202]) [0 *_145+0 S4 A32])
        (reg:SF 0 ax [orig:206 D.6809 ] [206])) preproc.cpp:408 129 {*movsf_internal}
     (nil))
(insn 239 238 240 3 (set (reg:DF 21 xmm0 [287])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])) preproc.cpp:412 128 {*movdf_internal}
     (nil))
(insn 240 239 309 3 (set (reg:DF 21 xmm0 [286])
        (div:DF (reg:DF 21 xmm0 [286])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:412 783 {*fop_df_1_sse}
     (nil))
(insn 309 240 241 3 (set (reg:DF 0 ax [286])
        (reg:DF 21 xmm0 [286])) preproc.cpp:412 128 {*movdf_internal}
     (nil))
(insn 241 309 242 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [286])) preproc.cpp:412 128 {*movdf_internal}
     (nil))
(insn 242 241 243 3 (set (reg:DF 21 xmm0 [289])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 phase_unsup+0 S8 A64])) preproc.cpp:413 128 {*movdf_internal}
     (nil))
(insn 243 242 311 3 (set (reg:DF 21 xmm0 [288])
        (minus:DF (reg:DF 21 xmm0 [288])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase_scratch+0 S8 A64]))) preproc.cpp:413 783 {*fop_df_1_sse}
     (nil))
(insn 311 243 244 3 (set (reg:DF 0 ax [288])
        (reg:DF 21 xmm0 [288])) preproc.cpp:413 128 {*movdf_internal}
     (nil))
(insn 244 311 245 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 0 ax [288])) preproc.cpp:413 128 {*movdf_internal}
     (nil))
(insn 245 244 246 3 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:415 90 {*movsi_internal}
     (nil))
(insn 246 245 247 3 (set (reg:DI 0 ax [orig:207 D.6807 ] [207])
        (sign_extend:DI (reg:SI 0 ax [290]))) preproc.cpp:415 142 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 3 (parallel [
            (set (reg:DI 1 dx [orig:208 D.6807 ] [208])
                (ashift:DI (reg:DI 0 ax [orig:207 D.6807 ] [207])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:415 497 {*ashldi3_1}
     (nil))
(insn 248 247 249 3 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:415 89 {*movdi_internal}
     (nil))
(insn 249 248 250 3 (parallel [
            (set (reg/f:DI 3 bx [orig:209 D.6808 ] [209])
                (plus:DI (reg:DI 1 dx [orig:208 D.6807 ] [208])
                    (reg/f:DI 0 ax [291])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:415 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:208 D.6807 ] [208]))
        (nil)))
(insn 250 249 312 3 (set (reg:SF 26 xmm5 [orig:210 D.6809 ] [210])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64]))) preproc.cpp:415 157 {*truncdfsf_fast_sse}
     (nil))
(insn 312 250 331 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 26 xmm5 [orig:210 D.6809 ] [210])) preproc.cpp:415 129 {*movsf_internal}
     (nil))
(note 331 312 323 3 NOTE_INSN_DELETED)
(note 323 331 251 3 NOTE_INSN_DELETED)
(insn 251 323 252 3 (set (reg:DF 0 ax [292])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])) preproc.cpp:415 128 {*movdf_internal}
     (nil))
(insn 252 251 313 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [292])) preproc.cpp:415 128 {*movdf_internal}
     (nil))
(insn 313 252 253 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) preproc.cpp:415 128 {*movdf_internal}
     (nil))
(call_insn/u 253 313 255 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b5719296400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:415 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 255 253 316 3 (set (reg:SF 21 xmm0 [orig:212 D.6809 ] [212])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:211 D.6810 ] [211]))) preproc.cpp:415 157 {*truncdfsf_fast_sse}
     (nil))
(note 316 255 327 3 NOTE_INSN_DELETED)
(note 327 316 256 3 NOTE_INSN_DELETED)
(insn 256 327 315 3 (set (reg:SF 21 xmm0 [orig:213 D.6809 ] [213])
        (mult:SF (reg:SF 21 xmm0 [orig:213 D.6809 ] [213])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) preproc.cpp:415 775 {*fop_sf_comm_sse}
     (nil))
(insn 315 256 257 3 (set (reg:SF 0 ax [orig:213 D.6809 ] [213])
        (reg:SF 21 xmm0 [orig:213 D.6809 ] [213])) preproc.cpp:415 129 {*movsf_internal}
     (nil))
(insn 257 315 258 3 (set (mem:SF (reg/f:DI 3 bx [orig:209 D.6808 ] [209]) [0 *_154+0 S4 A32])
        (reg:SF 0 ax [orig:213 D.6809 ] [213])) preproc.cpp:415 129 {*movsf_internal}
     (nil))
(insn 258 257 259 3 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])) preproc.cpp:416 90 {*movsi_internal}
     (nil))
(insn 259 258 260 3 (set (reg:DI 0 ax [orig:214 D.6811 ] [214])
        (sign_extend:DI (reg:SI 0 ax [293]))) preproc.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 260 259 261 3 (parallel [
            (set (reg:DI 0 ax [orig:215 D.6811 ] [215])
                (plus:DI (reg:DI 0 ax [orig:214 D.6811 ] [214])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:416 221 {*adddi_1}
     (nil))
(insn 261 260 262 3 (parallel [
            (set (reg:DI 1 dx [orig:216 D.6811 ] [216])
                (ashift:DI (reg:DI 0 ax [orig:215 D.6811 ] [215])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:416 497 {*ashldi3_1}
     (nil))
(insn 262 261 263 3 (set (reg/f:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])) preproc.cpp:416 89 {*movdi_internal}
     (nil))
(insn 263 262 264 3 (parallel [
            (set (reg/f:DI 3 bx [orig:217 D.6808 ] [217])
                (plus:DI (reg:DI 1 dx [orig:216 D.6811 ] [216])
                    (reg/f:DI 0 ax [294])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:416 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:216 D.6811 ] [216]))
        (nil)))
(insn 264 263 317 3 (set (reg:SF 27 xmm6 [orig:218 D.6809 ] [218])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 div_unsup_mag+0 S8 A64]))) preproc.cpp:416 157 {*truncdfsf_fast_sse}
     (nil))
(insn 317 264 330 3 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32])
        (reg:SF 27 xmm6 [orig:218 D.6809 ] [218])) preproc.cpp:416 129 {*movsf_internal}
     (nil))
(note 330 317 322 3 NOTE_INSN_DELETED)
(note 322 330 265 3 NOTE_INSN_DELETED)
(insn 265 322 266 3 (set (reg:DF 0 ax [295])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 div_unsup_phase+0 S8 A64])) preproc.cpp:416 128 {*movdf_internal}
     (nil))
(insn 266 265 318 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])
        (reg:DF 0 ax [295])) preproc.cpp:416 128 {*movdf_internal}
     (nil))
(insn 318 266 267 3 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-152 S8 A64])) preproc.cpp:416 128 {*movdf_internal}
     (nil))
(call_insn/u 267 318 269 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b57192d4e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:416 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 269 267 321 3 (set (reg:SF 21 xmm0 [orig:220 D.6809 ] [220])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:219 D.6810 ] [219]))) preproc.cpp:416 157 {*truncdfsf_fast_sse}
     (nil))
(note 321 269 326 3 NOTE_INSN_DELETED)
(note 326 321 270 3 NOTE_INSN_DELETED)
(insn 270 326 320 3 (set (reg:SF 21 xmm0 [orig:221 D.6809 ] [221])
        (mult:SF (reg:SF 21 xmm0 [orig:221 D.6809 ] [221])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -156 [0xffffffffffffff64])) [0 %sfp+-140 S4 A32]))) preproc.cpp:416 775 {*fop_sf_comm_sse}
     (nil))
(insn 320 270 271 3 (set (reg:SF 0 ax [orig:221 D.6809 ] [221])
        (reg:SF 21 xmm0 [orig:221 D.6809 ] [221])) preproc.cpp:416 129 {*movsf_internal}
     (nil))
(insn 271 320 272 3 (set (mem:SF (reg/f:DI 3 bx [orig:217 D.6808 ] [217]) [0 *_162+0 S4 A32])
        (reg:SF 0 ax [orig:221 D.6809 ] [221])) preproc.cpp:416 129 {*movsf_internal}
     (nil))
(insn 272 271 273 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:385 220 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 296
(code_label 273 272 274 4 73 "" [1 uses])
(note 274 273 275 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 275 274 276 4 (set (reg/f:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 procpar_info+0 S8 A64])) preproc.cpp:385 89 {*movdi_internal}
     (nil))
(insn 276 275 278 4 (set (reg:SI 0 ax [orig:83 D.6806 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [296])
                (const_int 300 [0x12c])) [0 procpar_info_14(D)->num_points+0 S4 A32])) preproc.cpp:385 90 {*movsi_internal}
     (nil))
(insn 278 276 279 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.6806 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -100 [0xffffffffffffff9c])) [0 i+0 S4 A32]))) preproc.cpp:385 7 {*cmpsi_1}
     (nil))
(jump_insn 279 278 280 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 277)
            (pc))) preproc.cpp:385 596 {*jcc_1}
     (nil)
 -> 277)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 222 223
(note 280 279 281 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 281 280 284 5 (set (reg:SI 0 ax [orig:222 D.6806 ] [222])
        (const_int 1 [0x1])) preproc.cpp:419 90 {*movsi_internal}
     (nil))
(insn 284 281 288 5 (set (reg:SI 0 ax [orig:223 <retval> ] [223])
        (reg:SI 0 ax [orig:222 D.6806 ] [222])) preproc.cpp:419 90 {*movsi_internal}
     (nil))
(insn 288 284 289 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:223 <retval> ] [223])) preproc.cpp:421 90 {*movsi_internal}
     (nil))
(insn 289 288 293 5 (use (reg/i:SI 0 ax)) preproc.cpp:421 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 293 289 0 NOTE_INSN_DELETED)

;; Function int filter(float*, float*, Procpar_info*, Preprocess*) (_Z6filterPfS_P12Procpar_infoP10Preprocess, funcdef_no=9, decl_uid=5386, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 15:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=487 from oldreg=343, assigning class GENERAL_REGS to r487
   18: {r487:SI=r487:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  562: r487:SI=r84:SI
    Inserting insn reload after:
  563: r343:SI=r487:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 19
	 Choosing alt 0 in insn 19:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) x  (1) r {*floatsisf2_sse}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 23:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=488 from oldreg=346, assigning class SSE_REGS to r488
   23: r488:SF=r488:SF/r86:SF
      REG_DEAD r86:SF
      REG_DEAD r83:SF
    Inserting insn reload before:
  564: r488:SF=r83:SF
    Inserting insn reload after:
  565: r346:SF=r488:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 565:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 26:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 27:  (0) v  (1) m {*movsf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 28:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=489 from oldreg=348, assigning class SSE_REGS to r489
   28: r489:SF=r489:SF/r349:SF
      REG_DEAD r349:SF
      REG_DEAD r87:SF
    Inserting insn reload before:
  566: r489:SF=r87:SF
    Inserting insn reload after:
  567: r348:SF=r489:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 567:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 44:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 54
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 57:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=490 from oldreg=361, assigning class GENERAL_REGS to r490
   70: {r490:SI=r490:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  568: r490:SI=r106:SI
    Inserting insn reload after:
  569: r361:SI=r490:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =x  (1) 0  (2) xm {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 80:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 83:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=491 from oldreg=115, assigning class SSE_REGS to r491
   83: r491:SF=float_trunc(r114:DF)
      REG_DEAD r114:DF
    Inserting insn reload after:
  570: r115:SF=r491:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 570:  (0) ?r  (1) Yj {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 107:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 113
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) ?r  (1) rmF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 115:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 118:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =x  (1) xm {*truncdfsf_fast_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*addsi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 131:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=492 from oldreg=379, assigning class GENERAL_REGS to r492
  131: {r492:SI=r492:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  571: r492:SI=r136:SI
    Inserting insn reload after:
  572: r379:SI=r492:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 132
	 Choosing alt 0 in insn 132:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
	 Choosing alt 0 in insn 137:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) v  (1) vm {*movv4sf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =x  (1) 0  (2) xm {*absnegsf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 141:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 144:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=493 from oldreg=145, assigning class SSE_REGS to r493
  144: r493:SF=float_trunc(r144:DF)
      REG_DEAD r144:DF
    Inserting insn reload after:
  573: r145:SF=r493:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 573:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 145:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 149:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 153:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) x  (1) xm {*cmpiusf_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
      Creating newreg=494 from oldreg=156, assigning class ALL_SSE_REGS to r494
  184: r494:SF=[r155:DI]
      REG_DEAD r155:DI
    Inserting insn reload after:
  574: r156:SF=r494:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 574:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 186:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=495 from oldreg=394, assigning class GENERAL_REGS to r495
  186: {r495:SI=r495:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  575: r495:SI=r393:SI
    Inserting insn reload after:
  576: r394:SI=r495:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 187
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 192:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 194
	 Choosing alt 0 in insn 194:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 195:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 197:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 198
	 Choosing alt 0 in insn 198:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 200:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 202
	 Choosing alt 0 in insn 202:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 207
	 Choosing alt 0 in insn 207:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=496 from oldreg=170, assigning class SSE_REGS to r496
      Creating newreg=497 from oldreg=156, assigning class SSE_REGS to r497
      Making reload reg 497 for reg 156 optional
  207: r496:SF=r496:SF*r497:SF
      REG_DEAD r169:SF
      REG_DEAD r156:SF
    Inserting insn reload before:
  577: r496:SF=r169:SF
  579: r497:SF=r156:SF
    Inserting insn reload after:
  578: r170:SF=r496:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 578:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 579:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 208:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 212:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 217:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 220
	 Choosing alt 0 in insn 220:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 221:  (0) v  (1) m {*movsf_internal}
      Creating newreg=498 from oldreg=179, assigning class ALL_SSE_REGS to r498
  221: r498:SF=[r178:DI]
      REG_DEAD r178:DI
    Inserting insn reload after:
  580: r179:SF=r498:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 580:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 223:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=499 from oldreg=405, assigning class GENERAL_REGS to r499
  223: {r499:SI=r499:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  581: r499:SI=r404:SI
    Inserting insn reload after:
  582: r405:SI=r499:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 224
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 227:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 229:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 231
	 Choosing alt 0 in insn 231:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 234:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 235
	 Choosing alt 0 in insn 235:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 237:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 239
	 Choosing alt 0 in insn 239:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 244
	 Choosing alt 0 in insn 244:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=500 from oldreg=193, assigning class SSE_REGS to r500
      Creating newreg=501 from oldreg=179, assigning class SSE_REGS to r501
      Making reload reg 501 for reg 179 optional
  244: r500:SF=r500:SF*r501:SF
      REG_DEAD r192:SF
      REG_DEAD r179:SF
    Inserting insn reload before:
  583: r500:SF=r192:SF
  585: r501:SF=r179:SF
    Inserting insn reload after:
  584: r193:SF=r500:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 584:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 585:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 245:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 250:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 251:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 257:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 262:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 263:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 264
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 265:  (0) v  (1) m {*movsf_internal}
      Creating newreg=502 from oldreg=201, assigning class ALL_SSE_REGS to r502
  265: r502:SF=[r200:DI]
      REG_DEAD r200:DI
    Inserting insn reload after:
  586: r201:SF=r502:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 586:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 267:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=503 from oldreg=417, assigning class GENERAL_REGS to r503
  267: {r503:SI=r503:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  587: r503:SI=r416:SI
    Inserting insn reload after:
  588: r417:SI=r503:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 268
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 271:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 273:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 275
	 Choosing alt 0 in insn 275:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 276:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 278:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 279
	 Choosing alt 0 in insn 279:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 281:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 283
	 Choosing alt 0 in insn 283:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 288
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=504 from oldreg=215, assigning class SSE_REGS to r504
      Creating newreg=505 from oldreg=201, assigning class SSE_REGS to r505
      Making reload reg 505 for reg 201 optional
  288: r504:SF=r504:SF*r505:SF
      REG_DEAD r214:SF
      REG_DEAD r201:SF
    Inserting insn reload before:
  589: r504:SF=r214:SF
  591: r505:SF=r201:SF
    Inserting insn reload after:
  590: r215:SF=r504:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 590:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 591:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 289:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 293:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 294:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 298:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 301
	 Choosing alt 0 in insn 301:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 302:  (0) v  (1) m {*movsf_internal}
      Creating newreg=506 from oldreg=224, assigning class ALL_SSE_REGS to r506
  302: r506:SF=[r223:DI]
      REG_DEAD r223:DI
    Inserting insn reload after:
  592: r224:SF=r506:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 592:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 304:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=507 from oldreg=428, assigning class GENERAL_REGS to r507
  304: {r507:SI=r507:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  593: r507:SI=r427:SI
    Inserting insn reload after:
  594: r428:SI=r507:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 305
	 Choosing alt 0 in insn 305:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 308:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 310:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 312
	 Choosing alt 0 in insn 312:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 315:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 316
	 Choosing alt 0 in insn 316:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 318:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 320
	 Choosing alt 0 in insn 320:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 325
	 Choosing alt 0 in insn 325:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=508 from oldreg=238, assigning class SSE_REGS to r508
      Creating newreg=509 from oldreg=224, assigning class SSE_REGS to r509
      Making reload reg 509 for reg 224 optional
  325: r508:SF=r508:SF*r509:SF
      REG_DEAD r237:SF
      REG_DEAD r224:SF
    Inserting insn reload before:
  595: r508:SF=r237:SF
  597: r509:SF=r224:SF
    Inserting insn reload after:
  596: r238:SF=r508:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 596:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 597:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 326:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 329:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 335:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 341:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 342:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) x  (1) xm {*cmpiusf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 345:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) x  (1) xm {*cmpiusf_sse}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 352:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 356:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 361:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 363:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 368:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 370:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 373:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 374:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 375
	 Choosing alt 0 in insn 375:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 376:  (0) v  (1) m {*movsf_internal}
      Creating newreg=510 from oldreg=250, assigning class ALL_SSE_REGS to r510
  376: r510:SF=[r249:DI]
      REG_DEAD r249:DI
    Inserting insn reload after:
  598: r250:SF=r510:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 598:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 378:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=511 from oldreg=445, assigning class GENERAL_REGS to r511
  378: {r511:SI=r511:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  599: r511:SI=r444:SI
    Inserting insn reload after:
  600: r445:SI=r511:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 379
	 Choosing alt 0 in insn 379:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 382:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 384:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 386
	 Choosing alt 0 in insn 386:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 387:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 389:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 390
	 Choosing alt 0 in insn 390:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 393:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 395
	 Choosing alt 0 in insn 395:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 400
	 Choosing alt 0 in insn 400:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=512 from oldreg=265, assigning class SSE_REGS to r512
      Creating newreg=513 from oldreg=250, assigning class SSE_REGS to r513
      Making reload reg 513 for reg 250 optional
  400: r512:SF=r512:SF*r513:SF
      REG_DEAD r264:SF
      REG_DEAD r250:SF
    Inserting insn reload before:
  601: r512:SF=r264:SF
  603: r513:SF=r250:SF
    Inserting insn reload after:
  602: r265:SF=r512:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 602:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 603:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 401:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 403:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 404:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 405:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 407:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 410:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 411:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 413
	 Choosing alt 0 in insn 413:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 414:  (0) v  (1) m {*movsf_internal}
      Creating newreg=514 from oldreg=274, assigning class ALL_SSE_REGS to r514
  414: r514:SF=[r273:DI]
      REG_DEAD r273:DI
    Inserting insn reload after:
  604: r274:SF=r514:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 604:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 416:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=515 from oldreg=456, assigning class GENERAL_REGS to r515
  416: {r515:SI=r515:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  605: r515:SI=r455:SI
    Inserting insn reload after:
  606: r456:SI=r515:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 417
	 Choosing alt 0 in insn 417:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 420:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 422:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 424
	 Choosing alt 0 in insn 424:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 425:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 427:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 428
	 Choosing alt 0 in insn 428:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 430:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 431:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 433
	 Choosing alt 0 in insn 433:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 438
	 Choosing alt 0 in insn 438:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=516 from oldreg=289, assigning class SSE_REGS to r516
      Creating newreg=517 from oldreg=274, assigning class SSE_REGS to r517
      Making reload reg 517 for reg 274 optional
  438: r516:SF=r516:SF*r517:SF
      REG_DEAD r288:SF
      REG_DEAD r274:SF
    Inserting insn reload before:
  607: r516:SF=r288:SF
  609: r517:SF=r274:SF
    Inserting insn reload after:
  608: r289:SF=r516:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 608:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 609:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 439:  (0) ?m  (1) rF {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 444:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 452:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 456:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 457:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 458
	 Choosing alt 0 in insn 458:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 459:  (0) v  (1) m {*movsf_internal}
      Creating newreg=518 from oldreg=297, assigning class ALL_SSE_REGS to r518
  459: r518:SF=[r296:DI]
      REG_DEAD r296:DI
    Inserting insn reload after:
  610: r297:SF=r518:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 610:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 461:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=519 from oldreg=468, assigning class GENERAL_REGS to r519
  461: {r519:SI=r519:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  611: r519:SI=r467:SI
    Inserting insn reload after:
  612: r468:SI=r519:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 462
	 Choosing alt 0 in insn 462:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 463:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 465:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 467:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 469
	 Choosing alt 0 in insn 469:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 470:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 472:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 473
	 Choosing alt 0 in insn 473:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 474:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 475:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 476:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 478
	 Choosing alt 0 in insn 478:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 483
	 Choosing alt 0 in insn 483:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=520 from oldreg=312, assigning class SSE_REGS to r520
      Creating newreg=521 from oldreg=297, assigning class SSE_REGS to r521
      Making reload reg 521 for reg 297 optional
  483: r520:SF=r520:SF*r521:SF
      REG_DEAD r311:SF
      REG_DEAD r297:SF
    Inserting insn reload before:
  613: r520:SF=r311:SF
  615: r521:SF=r297:SF
    Inserting insn reload after:
  614: r312:SF=r520:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 614:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 615:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 484:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 487:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 489:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 490:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 493:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 494:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 495:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 496
	 Choosing alt 0 in insn 496:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=616,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=7,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=8,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=9,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=12,overall=1208,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=13,overall=1211,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=14,overall=1207,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
	 Choosing alt 7 in insn 497:  (0) v  (1) m {*movsf_internal}
      Creating newreg=522 from oldreg=321, assigning class ALL_SSE_REGS to r522
  497: r522:SF=[r320:DI]
      REG_DEAD r320:DI
    Inserting insn reload after:
  616: r321:SF=r522:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 616:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 499:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=523 from oldreg=479, assigning class GENERAL_REGS to r523
  499: {r523:SI=r523:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  617: r523:SI=r478:SI
    Inserting insn reload after:
  618: r479:SI=r523:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 500
	 Choosing alt 0 in insn 500:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 503:  (0) x  (1) r {*floatsidf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 505:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 507
	 Choosing alt 0 in insn 507:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 508:  (0) v  (1) vm {*movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (0) =x  (1) 0  (2) xm {*absnegdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 510:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 511
	 Choosing alt 0 in insn 511:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 512:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 513:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 514:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 516
	 Choosing alt 0 in insn 516:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 521
	 Choosing alt 0 in insn 521:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=524 from oldreg=336, assigning class SSE_REGS to r524
      Creating newreg=525 from oldreg=321, assigning class SSE_REGS to r525
      Making reload reg 525 for reg 321 optional
  521: r524:SF=r524:SF*r525:SF
      REG_DEAD r335:SF
      REG_DEAD r321:SF
    Inserting insn reload before:
  619: r524:SF=r335:SF
  621: r525:SF=r321:SF
    Inserting insn reload after:
  620: r336:SF=r524:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 620:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 621:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 522:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 525:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 528:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 531:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=526 from oldreg=179, assigning class ALL_SSE_REGS to inheritance r526
    Original reg change 179->526 (bb13):
  580: r526:SF=r498:SF
    Add original<-inheritance after:
  622: r179:SF=r526:SF

    Inheritance reuse change 179->526 (bb13):
  585: r501:SF=r526:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=527 from oldreg=156, assigning class ALL_SSE_REGS to inheritance r527
    Original reg change 156->527 (bb13):
  574: r527:SF=r494:SF
    Add original<-inheritance after:
  623: r156:SF=r527:SF

    Inheritance reuse change 156->527 (bb13):
  579: r497:SF=r527:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   622: r179:SF=r526:SF
deleting insn with uid = 622.
	    Removing dead insn:
   623: r156:SF=r527:SF
deleting insn with uid = 623.
EBB 14
EBB 15
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=528 from oldreg=224, assigning class ALL_SSE_REGS to inheritance r528
    Original reg change 224->528 (bb15):
  592: r528:SF=r506:SF
    Add original<-inheritance after:
  624: r224:SF=r528:SF

    Inheritance reuse change 224->528 (bb15):
  597: r509:SF=r528:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=529 from oldreg=201, assigning class ALL_SSE_REGS to inheritance r529
    Original reg change 201->529 (bb15):
  586: r529:SF=r502:SF
    Add original<-inheritance after:
  625: r201:SF=r529:SF

    Inheritance reuse change 201->529 (bb15):
  591: r505:SF=r529:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   624: r224:SF=r528:SF
deleting insn with uid = 624.
	    Removing dead insn:
   625: r201:SF=r529:SF
deleting insn with uid = 625.
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=530 from oldreg=274, assigning class ALL_SSE_REGS to inheritance r530
    Original reg change 274->530 (bb23):
  604: r530:SF=r514:SF
    Add original<-inheritance after:
  626: r274:SF=r530:SF

    Inheritance reuse change 274->530 (bb23):
  609: r517:SF=r530:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=531 from oldreg=250, assigning class ALL_SSE_REGS to inheritance r531
    Original reg change 250->531 (bb23):
  598: r531:SF=r510:SF
    Add original<-inheritance after:
  627: r250:SF=r531:SF

    Inheritance reuse change 250->531 (bb23):
  603: r513:SF=r531:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   626: r274:SF=r530:SF
deleting insn with uid = 626.
	    Removing dead insn:
   627: r250:SF=r531:SF
deleting insn with uid = 627.
EBB 24
EBB 25
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=532 from oldreg=321, assigning class ALL_SSE_REGS to inheritance r532
    Original reg change 321->532 (bb25):
  616: r532:SF=r522:SF
    Add original<-inheritance after:
  628: r321:SF=r532:SF

    Inheritance reuse change 321->532 (bb25):
  621: r525:SF=r532:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=533 from oldreg=297, assigning class ALL_SSE_REGS to inheritance r533
    Original reg change 297->533 (bb25):
  610: r533:SF=r518:SF
    Add original<-inheritance after:
  629: r297:SF=r533:SF

    Inheritance reuse change 297->533 (bb25):
  615: r521:SF=r533:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   628: r321:SF=r532:SF
deleting insn with uid = 628.
	    Removing dead insn:
   629: r297:SF=r533:SF
deleting insn with uid = 629.
EBB 26
EBB 27
EBB 28

********** Pseudo live ranges #1: **********

  BB 28
   Insn 543: point = 0
   Insn 542: point = 0
   Insn 538: point = 1
   Insn 535: point = 3
  BB 27
   Insn 532: point = 4
   Insn 531: point = 4
   Insn 529: point = 5
   Insn 528: point = 7
  BB 20
   Insn 557: point = 8
   Insn 352: point = 8
  BB 19
   Insn 347: point = 8
   Insn 346: point = 8
   Insn 345: point = 9
  BB 18
   Insn 344: point = 11
   Insn 343: point = 11
   Insn 342: point = 12
   Insn 341: point = 13
   Insn 340: point = 15
   Insn 339: point = 17
  BB 17
   Insn 336: point = 18
   Insn 335: point = 18
   Insn 333: point = 19
   Insn 332: point = 21
  BB 10
   Insn 553: point = 22
   Insn 160: point = 22
  BB 9
   Insn 155: point = 22
   Insn 154: point = 22
   Insn 153: point = 23
  BB 8
   Insn 152: point = 25
   Insn 151: point = 25
   Insn 150: point = 26
   Insn 149: point = 27
   Insn 148: point = 29
  BB 7
   Insn 145: point = 30
   Insn 573: point = 31
	Hard reg 0 is preferable by r493 with profit 1
   Insn 144: point = 33
   Insn 143: point = 35
   Insn 142: point = 37
   Insn 141: point = 39
   Insn 140: point = 40
   Insn 139: point = 42
   Insn 138: point = 44
   Insn 137: point = 45
   Insn 136: point = 47
   Insn 135: point = 49
   Insn 134: point = 51
   Insn 133: point = 53
   Insn 132: point = 55
   Insn 572: point = 57
	Hard reg 1 is preferable by r492 with profit 1
   Insn 131: point = 59
   Insn 571: point = 59
   Insn 130: point = 60
   Insn 129: point = 62
   Insn 128: point = 64
   Insn 127: point = 65
   Insn 126: point = 67
   Insn 125: point = 68
   Insn 124: point = 70
   Insn 123: point = 72
   Insn 122: point = 73
   Insn 121: point = 73
   Insn 120: point = 74
   Insn 119: point = 76
   Insn 118: point = 78
   Insn 117: point = 79
   Insn 116: point = 81
   Insn 115: point = 82
   Insn 114: point = 83
   Insn 113: point = 85
   Insn 112: point = 87
   Insn 111: point = 88
   Insn 110: point = 90
   Insn 109: point = 92
   Insn 108: point = 94
   Insn 107: point = 95
   Insn 106: point = 96
   Insn 105: point = 98
   Insn 104: point = 100
   Insn 103: point = 101
   Insn 102: point = 103
   Insn 101: point = 105
   Insn 100: point = 107
   Insn 99: point = 109
  BB 6
   Insn 97: point = 110
   Insn 96: point = 110
   Insn 95: point = 111
   Insn 94: point = 113
   Insn 93: point = 115
  BB 5
   Insn 91: point = 116
   Insn 90: point = 116
   Insn 89: point = 117
   Insn 88: point = 119
  BB 4
   Insn 85: point = 120
   Insn 84: point = 121
   Insn 570: point = 122
	Hard reg 0 is preferable by r491 with profit 1
   Insn 83: point = 124
   Insn 82: point = 126
   Insn 81: point = 128
   Insn 80: point = 130
   Insn 79: point = 131
   Insn 78: point = 133
   Insn 77: point = 135
   Insn 76: point = 136
   Insn 75: point = 138
   Insn 74: point = 140
   Insn 73: point = 142
   Insn 72: point = 144
   Insn 71: point = 146
   Insn 569: point = 148
	Hard reg 1 is preferable by r490 with profit 1
   Insn 70: point = 150
   Insn 568: point = 150
   Insn 69: point = 151
   Insn 68: point = 153
   Insn 67: point = 155
   Insn 66: point = 156
   Insn 65: point = 158
   Insn 64: point = 159
   Insn 63: point = 161
   Insn 62: point = 163
   Insn 61: point = 164
   Insn 60: point = 164
   Insn 59: point = 165
   Insn 58: point = 167
   Insn 57: point = 169
   Insn 56: point = 170
   Insn 55: point = 171
   Insn 54: point = 173
   Insn 53: point = 175
   Insn 52: point = 176
   Insn 51: point = 178
   Insn 50: point = 180
   Insn 49: point = 182
   Insn 48: point = 183
   Insn 47: point = 184
   Insn 46: point = 186
   Insn 45: point = 188
   Insn 44: point = 189
   Insn 43: point = 191
   Insn 42: point = 193
   Insn 41: point = 195
   Insn 40: point = 197
  BB 3
   Insn 38: point = 198
   Insn 37: point = 198
   Insn 36: point = 199
   Insn 35: point = 201
  BB 2
   Insn 33: point = 202
   Insn 32: point = 202
   Insn 31: point = 203
   Insn 30: point = 205
   Insn 29: point = 206
   Insn 567: point = 207
	Hard reg 0 is preferable by r489 with profit 1
   Insn 28: point = 209
   Insn 566: point = 210
	Hard reg 0 is preferable by r489 with profit 1
	Hard reg 21 is preferable by r489 with profit 1
   Insn 27: point = 212
   Insn 26: point = 213
   Insn 25: point = 215
   Insn 24: point = 216
   Insn 565: point = 217
	Hard reg 0 is preferable by r488 with profit 1
   Insn 23: point = 219
   Insn 564: point = 220
	Hard reg 0 is preferable by r488 with profit 1
	Hard reg 22 is preferable by r488 with profit 1
   Insn 22: point = 222
   Insn 21: point = 224
   Insn 20: point = 226
   Insn 19: point = 228
   Insn 563: point = 230
	Hard reg 1 is preferable by r487 with profit 1
   Insn 18: point = 232
   Insn 562: point = 232
   Insn 17: point = 233
   Insn 16: point = 235
   Insn 15: point = 236
   Insn 14: point = 238
   Insn 13: point = 239
   Insn 12: point = 240
   Insn 11: point = 241
   Insn 10: point = 242
   Insn 9: point = 243
   Insn 5: point = 243
   Insn 4: point = 243
   Insn 3: point = 243
   Insn 2: point = 243
  BB 16
   Insn 329: point = 243
  BB 13
   Insn 555: point = 243
   Insn 245: point = 243
   Insn 584: point = 244
	Hard reg 0 is preferable by r500 with profit 1
   Insn 244: point = 246
   Insn 585: point = 247
	   Creating copy r501<-r526@1
   Insn 583: point = 249
	Hard reg 0 is preferable by r500 with profit 1
	Hard reg 21 is preferable by r500 with profit 1
   Insn 243: point = 251
   Insn 242: point = 253
   Insn 241: point = 254
   Insn 240: point = 254
   Insn 239: point = 255
   Insn 238: point = 257
   Insn 237: point = 259
   Insn 236: point = 261
   Insn 235: point = 262
   Insn 234: point = 264
   Insn 233: point = 265
   Insn 232: point = 267
   Insn 231: point = 268
   Insn 230: point = 270
   Insn 229: point = 271
   Insn 228: point = 273
   Insn 227: point = 274
   Insn 226: point = 276
   Insn 225: point = 278
   Insn 224: point = 280
   Insn 582: point = 282
	Hard reg 1 is preferable by r499 with profit 1
   Insn 223: point = 284
   Insn 581: point = 284
   Insn 222: point = 285
   Insn 580: point = 286
	   Creating copy r498->r526@1
   Insn 221: point = 288
   Insn 220: point = 290
   Insn 219: point = 292
   Insn 218: point = 293
   Insn 217: point = 295
   Insn 216: point = 297
   Insn 215: point = 299
   Insn 214: point = 300
   Insn 213: point = 302
   Insn 212: point = 303
   Insn 211: point = 305
   Insn 210: point = 307
   Insn 209: point = 309
   Insn 208: point = 310
   Insn 578: point = 311
	Hard reg 0 is preferable by r496 with profit 1
   Insn 207: point = 313
   Insn 579: point = 314
	   Creating copy r497<-r527@1
   Insn 577: point = 316
	Hard reg 0 is preferable by r496 with profit 1
	Hard reg 21 is preferable by r496 with profit 1
   Insn 206: point = 318
   Insn 205: point = 320
   Insn 204: point = 321
   Insn 203: point = 321
   Insn 202: point = 322
   Insn 201: point = 324
   Insn 200: point = 326
   Insn 199: point = 328
   Insn 198: point = 329
   Insn 197: point = 331
   Insn 196: point = 332
   Insn 195: point = 334
   Insn 194: point = 335
   Insn 193: point = 337
   Insn 192: point = 338
   Insn 191: point = 340
   Insn 190: point = 341
   Insn 189: point = 343
   Insn 188: point = 345
   Insn 187: point = 347
   Insn 576: point = 349
	Hard reg 1 is preferable by r495 with profit 1
   Insn 186: point = 351
   Insn 575: point = 351
   Insn 185: point = 352
   Insn 574: point = 353
	   Creating copy r494->r527@1
   Insn 184: point = 355
   Insn 183: point = 357
   Insn 182: point = 359
   Insn 181: point = 360
   Insn 180: point = 362
   Insn 179: point = 364
   Insn 178: point = 365
   Insn 177: point = 367
   Insn 176: point = 368
   Insn 175: point = 370
   Insn 174: point = 372
  BB 15
   Insn 326: point = 373
   Insn 596: point = 374
	Hard reg 0 is preferable by r508 with profit 1
   Insn 325: point = 376
   Insn 597: point = 377
	   Creating copy r509<-r528@1
   Insn 595: point = 379
	Hard reg 0 is preferable by r508 with profit 1
	Hard reg 21 is preferable by r508 with profit 1
   Insn 324: point = 381
   Insn 323: point = 383
   Insn 322: point = 384
   Insn 321: point = 384
   Insn 320: point = 385
   Insn 319: point = 387
   Insn 318: point = 389
   Insn 317: point = 391
   Insn 316: point = 392
   Insn 315: point = 394
   Insn 314: point = 395
   Insn 313: point = 397
   Insn 312: point = 398
   Insn 311: point = 400
   Insn 310: point = 401
   Insn 309: point = 403
   Insn 308: point = 404
   Insn 307: point = 406
   Insn 306: point = 408
   Insn 305: point = 410
   Insn 594: point = 412
	Hard reg 1 is preferable by r507 with profit 1
   Insn 304: point = 414
   Insn 593: point = 414
   Insn 303: point = 415
   Insn 592: point = 416
	   Creating copy r506->r528@1
   Insn 302: point = 418
   Insn 301: point = 420
   Insn 300: point = 422
   Insn 299: point = 423
   Insn 298: point = 425
   Insn 297: point = 427
   Insn 296: point = 429
   Insn 295: point = 430
   Insn 294: point = 432
   Insn 293: point = 433
   Insn 292: point = 435
   Insn 291: point = 437
   Insn 290: point = 439
   Insn 289: point = 440
   Insn 590: point = 441
	Hard reg 0 is preferable by r504 with profit 1
   Insn 288: point = 443
   Insn 591: point = 444
	   Creating copy r505<-r529@1
   Insn 589: point = 446
	Hard reg 0 is preferable by r504 with profit 1
	Hard reg 21 is preferable by r504 with profit 1
   Insn 287: point = 448
   Insn 286: point = 450
   Insn 285: point = 451
   Insn 284: point = 451
   Insn 283: point = 452
   Insn 282: point = 454
   Insn 281: point = 456
   Insn 280: point = 458
   Insn 279: point = 459
   Insn 278: point = 461
   Insn 277: point = 462
   Insn 276: point = 464
   Insn 275: point = 465
   Insn 274: point = 467
   Insn 273: point = 468
   Insn 272: point = 470
   Insn 271: point = 471
   Insn 270: point = 473
   Insn 269: point = 475
   Insn 268: point = 477
   Insn 588: point = 479
	Hard reg 1 is preferable by r503 with profit 1
   Insn 267: point = 481
   Insn 587: point = 481
   Insn 266: point = 482
   Insn 586: point = 483
	   Creating copy r502->r529@1
   Insn 265: point = 485
   Insn 264: point = 487
   Insn 263: point = 489
   Insn 262: point = 490
   Insn 261: point = 492
   Insn 260: point = 494
   Insn 259: point = 495
   Insn 258: point = 497
   Insn 257: point = 498
   Insn 256: point = 500
   Insn 255: point = 502
  BB 14
   Insn 253: point = 503
   Insn 252: point = 503
   Insn 251: point = 504
   Insn 250: point = 506
  BB 12
   Insn 172: point = 507
   Insn 171: point = 507
   Insn 170: point = 508
   Insn 169: point = 510
  BB 11
   Insn 167: point = 511
   Insn 166: point = 511
   Insn 165: point = 512
   Insn 164: point = 514
  BB 26
   Insn 525: point = 515
  BB 23
   Insn 559: point = 515
   Insn 439: point = 515
   Insn 608: point = 516
	Hard reg 0 is preferable by r516 with profit 1
   Insn 438: point = 518
   Insn 609: point = 519
	   Creating copy r517<-r530@1
   Insn 607: point = 521
	Hard reg 0 is preferable by r516 with profit 1
	Hard reg 21 is preferable by r516 with profit 1
   Insn 437: point = 523
   Insn 436: point = 525
   Insn 435: point = 526
   Insn 434: point = 526
   Insn 433: point = 527
   Insn 432: point = 529
   Insn 431: point = 531
   Insn 430: point = 533
   Insn 429: point = 535
   Insn 428: point = 536
   Insn 427: point = 538
   Insn 426: point = 539
   Insn 425: point = 541
   Insn 424: point = 542
   Insn 423: point = 544
   Insn 422: point = 545
   Insn 421: point = 547
   Insn 420: point = 548
   Insn 419: point = 550
   Insn 418: point = 552
   Insn 417: point = 554
   Insn 606: point = 556
	Hard reg 1 is preferable by r515 with profit 1
   Insn 416: point = 558
   Insn 605: point = 558
   Insn 415: point = 559
   Insn 604: point = 560
	   Creating copy r514->r530@1
   Insn 414: point = 562
   Insn 413: point = 564
   Insn 412: point = 566
   Insn 411: point = 567
   Insn 410: point = 569
   Insn 409: point = 571
   Insn 408: point = 573
   Insn 407: point = 574
   Insn 406: point = 576
   Insn 405: point = 577
   Insn 404: point = 579
   Insn 403: point = 581
   Insn 402: point = 583
   Insn 401: point = 584
   Insn 602: point = 585
	Hard reg 0 is preferable by r512 with profit 1
   Insn 400: point = 587
   Insn 603: point = 588
	   Creating copy r513<-r531@1
   Insn 601: point = 590
	Hard reg 0 is preferable by r512 with profit 1
	Hard reg 21 is preferable by r512 with profit 1
   Insn 399: point = 592
   Insn 398: point = 594
   Insn 397: point = 595
   Insn 396: point = 595
   Insn 395: point = 596
   Insn 394: point = 598
   Insn 393: point = 600
   Insn 392: point = 602
   Insn 391: point = 604
   Insn 390: point = 605
   Insn 389: point = 607
   Insn 388: point = 608
   Insn 387: point = 610
   Insn 386: point = 611
   Insn 385: point = 613
   Insn 384: point = 614
   Insn 383: point = 616
   Insn 382: point = 617
   Insn 381: point = 619
   Insn 380: point = 621
   Insn 379: point = 623
   Insn 600: point = 625
	Hard reg 1 is preferable by r511 with profit 1
   Insn 378: point = 627
   Insn 599: point = 627
   Insn 377: point = 628
   Insn 598: point = 629
	   Creating copy r510->r531@1
   Insn 376: point = 631
   Insn 375: point = 633
   Insn 374: point = 635
   Insn 373: point = 636
   Insn 372: point = 638
   Insn 371: point = 640
   Insn 370: point = 641
   Insn 369: point = 643
   Insn 368: point = 644
   Insn 367: point = 646
   Insn 366: point = 648
  BB 25
   Insn 522: point = 649
   Insn 620: point = 650
	Hard reg 0 is preferable by r524 with profit 1
   Insn 521: point = 652
   Insn 621: point = 653
	   Creating copy r525<-r532@1
   Insn 619: point = 655
	Hard reg 0 is preferable by r524 with profit 1
	Hard reg 21 is preferable by r524 with profit 1
   Insn 520: point = 657
   Insn 519: point = 659
   Insn 518: point = 660
   Insn 517: point = 660
   Insn 516: point = 661
   Insn 515: point = 663
   Insn 514: point = 665
   Insn 513: point = 667
   Insn 512: point = 669
   Insn 511: point = 670
   Insn 510: point = 672
   Insn 509: point = 673
   Insn 508: point = 675
   Insn 507: point = 676
   Insn 506: point = 678
   Insn 505: point = 679
   Insn 504: point = 681
   Insn 503: point = 682
   Insn 502: point = 684
   Insn 501: point = 686
   Insn 500: point = 688
   Insn 618: point = 690
	Hard reg 1 is preferable by r523 with profit 1
   Insn 499: point = 692
   Insn 617: point = 692
   Insn 498: point = 693
   Insn 616: point = 694
	   Creating copy r522->r532@1
   Insn 497: point = 696
   Insn 496: point = 698
   Insn 495: point = 700
   Insn 494: point = 701
   Insn 493: point = 703
   Insn 492: point = 705
   Insn 491: point = 707
   Insn 490: point = 708
   Insn 489: point = 710
   Insn 488: point = 711
   Insn 487: point = 713
   Insn 486: point = 715
   Insn 485: point = 717
   Insn 484: point = 718
   Insn 614: point = 719
	Hard reg 0 is preferable by r520 with profit 1
   Insn 483: point = 721
   Insn 615: point = 722
	   Creating copy r521<-r533@1
   Insn 613: point = 724
	Hard reg 0 is preferable by r520 with profit 1
	Hard reg 21 is preferable by r520 with profit 1
   Insn 482: point = 726
   Insn 481: point = 728
   Insn 480: point = 729
   Insn 479: point = 729
   Insn 478: point = 730
   Insn 477: point = 732
   Insn 476: point = 734
   Insn 475: point = 736
   Insn 474: point = 738
   Insn 473: point = 739
   Insn 472: point = 741
   Insn 471: point = 742
   Insn 470: point = 744
   Insn 469: point = 745
   Insn 468: point = 747
   Insn 467: point = 748
   Insn 466: point = 750
   Insn 465: point = 751
   Insn 464: point = 753
   Insn 463: point = 755
   Insn 462: point = 757
   Insn 612: point = 759
	Hard reg 1 is preferable by r519 with profit 1
   Insn 461: point = 761
   Insn 611: point = 761
   Insn 460: point = 762
   Insn 610: point = 763
	   Creating copy r518->r533@1
   Insn 459: point = 765
   Insn 458: point = 767
   Insn 457: point = 769
   Insn 456: point = 770
   Insn 455: point = 772
   Insn 454: point = 774
   Insn 453: point = 775
   Insn 452: point = 777
   Insn 451: point = 778
   Insn 450: point = 780
   Insn 449: point = 782
  BB 24
   Insn 447: point = 783
   Insn 446: point = 783
   Insn 445: point = 784
   Insn 444: point = 786
  BB 22
   Insn 364: point = 787
   Insn 363: point = 787
   Insn 362: point = 788
   Insn 361: point = 790
  BB 21
   Insn 359: point = 791
   Insn 358: point = 791
   Insn 357: point = 792
   Insn 356: point = 794
 r83: [221..236]
 r84: [229..233]
 r85: [223..224]
 r86: [219..222]
 r87: [211..213]
 r88: [202..203]
 r89: [198..199]
 r90: [194..195]
 r91: [192..193]
 r92: [190..191]
 r93: [187..189]
 r94: [185..186]
 r95: [179..180]
 r96: [177..178]
 r97: [174..176]
 r98: [172..173]
 r99: [166..167]
 r100: [164..165]
 r101: [162..163]
 r102: [160..161]
 r103: [157..159]
 r104: [127..156]
 r105: [152..153]
 r106: [147..151]
 r107: [141..142]
 r108: [139..140]
 r109: [137..138]
 r110: [134..136]
 r111: [132..133]
 r112: [129..131]
 r113: [127..128]
 r114: [125..126]
 r115: [120..122]
 r116: [116..117]
 r117: [112..113]
 r118: [110..111]
 r119: [106..107]
 r120: [104..105]
 r121: [102..103]
 r122: [99..101]
 r123: [97..98]
 r124: [91..92]
 r125: [89..90]
 r126: [86..88]
 r127: [84..85]
 r128: [30..79]
 r129: [75..76]
 r130: [73..74]
 r131: [71..72]
 r132: [69..70]
 r133: [66..68]
 r134: [36..65]
 r135: [61..62]
 r136: [56..60]
 r137: [50..51]
 r138: [48..49]
 r139: [46..47]
 r140: [43..45]
 r141: [41..42]
 r142: [38..40]
 r143: [36..37]
 r144: [34..35]
 r145: [30..31]
 r146: [22..27]
 r147: [18..19]
 r148: [511..512]
 r149: [507..508]
 r150: [369..370]
 r151: [366..368]
 r152: [310..365]
 r153: [361..362]
 r154: [358..360]
 r155: [356..357]
 r157: [342..343]
 r158: [339..341]
 r159: [339..340]
 r160: [336..338]
 r161: [336..337]
 r162: [333..335]
 r163: [330..332]
 r164: [323..329]
 r165: [325..326]
 r166: [323..324]
 r167: [321..322]
 r168: [319..320]
 r169: [317..318]
 r170: [310..311]
 r171: [306..307]
 r172: [304..305]
 r173: [301..303]
 r174: [243..300]
 r175: [296..297]
 r176: [294..295]
 r177: [291..293]
 r178: [289..290]
 r180: [275..276]
 r181: [272..274]
 r182: [272..273]
 r183: [269..271]
 r184: [269..270]
 r185: [266..268]
 r186: [263..265]
 r187: [256..262]
 r188: [258..259]
 r189: [256..257]
 r190: [254..255]
 r191: [252..253]
 r192: [250..251]
 r193: [243..244]
 r194: [503..504]
 r195: [499..500]
 r196: [496..498]
 r197: [440..495]
 r198: [491..492]
 r199: [488..490]
 r200: [486..487]
 r202: [472..473]
 r203: [469..471]
 r204: [469..470]
 r205: [466..468]
 r206: [466..467]
 r207: [463..465]
 r208: [460..462]
 r209: [453..459]
 r210: [455..456]
 r211: [453..454]
 r212: [451..452]
 r213: [449..450]
 r214: [447..448]
 r215: [440..441]
 r216: [436..437]
 r217: [434..435]
 r218: [431..433]
 r219: [373..430]
 r220: [426..427]
 r221: [424..425]
 r222: [421..423]
 r223: [419..420]
 r225: [405..406]
 r226: [402..404]
 r227: [402..403]
 r228: [399..401]
 r229: [399..400]
 r230: [396..398]
 r231: [393..395]
 r232: [386..392]
 r233: [388..389]
 r234: [386..387]
 r235: [384..385]
 r236: [382..383]
 r237: [380..381]
 r238: [373..374]
 r239: [14..15]
 r240: [8..13]
 r241: [4..5]
 r242: [791..792]
 r243: [787..788]
 r244: [645..646]
 r245: [642..644]
 r246: [584..641]
 r247: [637..638]
 r248: [634..636]
 r249: [632..633]
 r251: [618..619]
 r252: [615..617]
 r253: [615..616]
 r254: [612..614]
 r255: [612..613]
 r256: [609..611]
 r257: [606..608]
 r258: [597..605]
 r259: [601..602]
 r260: [599..600]
 r261: [597..598]
 r262: [595..596]
 r263: [593..594]
 r264: [591..592]
 r265: [584..585]
 r266: [580..581]
 r267: [578..579]
 r268: [575..577]
 r269: [515..574]
 r270: [570..571]
 r271: [568..569]
 r272: [565..567]
 r273: [563..564]
 r275: [549..550]
 r276: [546..548]
 r277: [546..547]
 r278: [543..545]
 r279: [543..544]
 r280: [540..542]
 r281: [537..539]
 r282: [528..536]
 r283: [532..533]
 r284: [530..531]
 r285: [528..529]
 r286: [526..527]
 r287: [524..525]
 r288: [522..523]
 r289: [515..516]
 r290: [783..784]
 r291: [779..780]
 r292: [776..778]
 r293: [718..775]
 r294: [771..772]
 r295: [768..770]
 r296: [766..767]
 r298: [752..753]
 r299: [749..751]
 r300: [749..750]
 r301: [746..748]
 r302: [746..747]
 r303: [743..745]
 r304: [740..742]
 r305: [731..739]
 r306: [735..736]
 r307: [733..734]
 r308: [731..732]
 r309: [729..730]
 r310: [727..728]
 r311: [725..726]
 r312: [718..719]
 r313: [714..715]
 r314: [712..713]
 r315: [709..711]
 r316: [649..708]
 r317: [704..705]
 r318: [702..703]
 r319: [699..701]
 r320: [697..698]
 r322: [683..684]
 r323: [680..682]
 r324: [680..681]
 r325: [677..679]
 r326: [677..678]
 r327: [674..676]
 r328: [671..673]
 r329: [662..670]
 r330: [666..667]
 r331: [664..665]
 r332: [662..663]
 r333: [660..661]
 r334: [658..659]
 r335: [656..657]
 r336: [649..650]
 r337: [2..3]
 r338: [0..1]
 r339: [241..242]
 r340: [239..240]
 r341: [237..238]
 r342: [234..235]
 r343: [229..230]
 r344: [227..228]
 r345: [225..226]
 r346: [216..217]
 r347: [214..215]
 r348: [206..207]
 r349: [209..212]
 r350: [204..205]
 r351: [200..201]
 r352: [196..197]
 r353: [187..188]
 r354: [183..184]
 r355: [181..182]
 r356: [174..175]
 r357: [170..171]
 r358: [168..169]
 r359: [157..158]
 r360: [154..155]
 r361: [147..148]
 r362: [145..146]
 r363: [143..144]
 r364: [134..135]
 r365: [129..130]
 r366: [120..121]
 r367: [118..119]
 r368: [114..115]
 r369: [108..109]
 r370: [99..100]
 r371: [95..96]
 r372: [93..94]
 r373: [86..87]
 r374: [82..83]
 r375: [80..81]
 r376: [77..78]
 r377: [66..67]
 r378: [63..64]
 r379: [56..57]
 r380: [54..55]
 r381: [52..53]
 r382: [43..44]
 r383: [38..39]
 r384: [28..29]
 r385: [25..26]
 r386: [22..23]
 r387: [513..514]
 r388: [509..510]
 r389: [371..372]
 r390: [366..367]
 r391: [363..364]
 r392: [358..359]
 r393: [348..352]
 r394: [348..349]
 r395: [346..347]
 r396: [344..345]
 r397: [333..334]
 r398: [330..331]
 r399: [327..328]
 r400: [308..309]
 r401: [301..302]
 r402: [298..299]
 r403: [291..292]
 r404: [281..285]
 r405: [281..282]
 r406: [279..280]
 r407: [277..278]
 r408: [266..267]
 r409: [263..264]
 r410: [260..261]
 r411: [505..506]
 r412: [501..502]
 r413: [496..497]
 r414: [493..494]
 r415: [488..489]
 r416: [478..482]
 r417: [478..479]
 r418: [476..477]
 r419: [474..475]
 r420: [463..464]
 r421: [460..461]
 r422: [457..458]
 r423: [438..439]
 r424: [431..432]
 r425: [428..429]
 r426: [421..422]
 r427: [411..415]
 r428: [411..412]
 r429: [409..410]
 r430: [407..408]
 r431: [396..397]
 r432: [393..394]
 r433: [390..391]
 r434: [20..21]
 r435: [16..17]
 r436: [11..12]
 r437: [8..9]
 r438: [793..794]
 r439: [789..790]
 r440: [647..648]
 r441: [642..643]
 r442: [639..640]
 r443: [634..635]
 r444: [624..628]
 r445: [624..625]
 r446: [622..623]
 r447: [620..621]
 r448: [609..610]
 r449: [606..607]
 r450: [603..604]
 r451: [582..583]
 r452: [575..576]
 r453: [572..573]
 r454: [565..566]
 r455: [555..559]
 r456: [555..556]
 r457: [553..554]
 r458: [551..552]
 r459: [540..541]
 r460: [537..538]
 r461: [534..535]
 r462: [785..786]
 r463: [781..782]
 r464: [776..777]
 r465: [773..774]
 r466: [768..769]
 r467: [758..762]
 r468: [758..759]
 r469: [756..757]
 r470: [754..755]
 r471: [743..744]
 r472: [740..741]
 r473: [737..738]
 r474: [716..717]
 r475: [709..710]
 r476: [706..707]
 r477: [699..700]
 r478: [689..693]
 r479: [689..690]
 r480: [687..688]
 r481: [685..686]
 r482: [674..675]
 r483: [671..672]
 r484: [668..669]
 r485: [6..7]
 r487: [231..232]
 r488: [218..220]
 r489: [208..210]
 r490: [149..150]
 r491: [123..124]
 r492: [58..59]
 r493: [32..33]
 r494: [354..355]
 r495: [350..351]
 r496: [312..316]
 r497: [313..314]
 r498: [287..288]
 r499: [283..284]
 r500: [245..249]
 r501: [246..247]
 r502: [484..485]
 r503: [480..481]
 r504: [442..446]
 r505: [443..444]
 r506: [417..418]
 r507: [413..414]
 r508: [375..379]
 r509: [376..377]
 r510: [630..631]
 r511: [626..627]
 r512: [586..590]
 r513: [587..588]
 r514: [561..562]
 r515: [557..558]
 r516: [517..521]
 r517: [518..519]
 r518: [764..765]
 r519: [760..761]
 r520: [720..724]
 r521: [721..722]
 r522: [695..696]
 r523: [691..692]
 r524: [651..655]
 r525: [652..653]
 r526: [248..286]
 r527: [315..353]
 r528: [378..416]
 r529: [445..483]
 r530: [520..560]
 r531: [589..629]
 r532: [654..694]
 r533: [723..763]
Compressing live ranges: from 795 to 682 - 85%
Ranges after the compression:
 r83: [198..211]
 r84: [206..209]
 r85: [200..201]
 r86: [196..199]
 r87: [190..191]
 r88: [182..183]
 r89: [178..179]
 r90: [174..175]
 r91: [172..173]
 r92: [170..171]
 r93: [168..169]
 r94: [166..167]
 r95: [160..161]
 r96: [158..159]
 r97: [156..157]
 r98: [154..155]
 r99: [148..149]
 r100: [146..147]
 r101: [144..145]
 r102: [142..143]
 r103: [140..141]
 r104: [114..139]
 r105: [136..137]
 r106: [132..135]
 r107: [126..127]
 r108: [124..125]
 r109: [122..123]
 r110: [120..121]
 r111: [118..119]
 r112: [116..117]
 r113: [114..115]
 r114: [112..113]
 r115: [108..109]
 r116: [104..105]
 r117: [100..101]
 r118: [98..99]
 r119: [94..95]
 r120: [92..93]
 r121: [90..91]
 r122: [88..89]
 r123: [86..87]
 r124: [80..81]
 r125: [78..79]
 r126: [76..77]
 r127: [74..75]
 r128: [26..69]
 r129: [66..67]
 r130: [64..65]
 r131: [62..63]
 r132: [60..61]
 r133: [58..59]
 r134: [32..57]
 r135: [54..55]
 r136: [50..53]
 r137: [44..45]
 r138: [42..43]
 r139: [40..41]
 r140: [38..39]
 r141: [36..37]
 r142: [34..35]
 r143: [32..33]
 r144: [30..31]
 r145: [26..27]
 r146: [20..23]
 r147: [16..17]
 r148: [442..443]
 r149: [438..439]
 r150: [322..323]
 r151: [320..321]
 r152: [274..319]
 r153: [316..317]
 r154: [314..315]
 r155: [312..313]
 r157: [300..301]
 r158: [298..299]
 r159: [298..299]
 r160: [296..297]
 r161: [296..297]
 r162: [294..295]
 r163: [292..293]
 r164: [286..291]
 r165: [288..289]
 r166: [286..287]
 r167: [284..285]
 r168: [282..283]
 r169: [280..281]
 r170: [274..275]
 r171: [270..271]
 r172: [268..269]
 r173: [266..267]
 r174: [218..265]
 r175: [262..263]
 r176: [260..261]
 r177: [258..259]
 r178: [256..257]
 r180: [244..245]
 r181: [242..243]
 r182: [242..243]
 r183: [240..241]
 r184: [240..241]
 r185: [238..239]
 r186: [236..237]
 r187: [230..235]
 r188: [232..233]
 r189: [230..231]
 r190: [228..229]
 r191: [226..227]
 r192: [224..225]
 r193: [218..219]
 r194: [434..435]
 r195: [430..431]
 r196: [428..429]
 r197: [382..427]
 r198: [424..425]
 r199: [422..423]
 r200: [420..421]
 r202: [408..409]
 r203: [406..407]
 r204: [406..407]
 r205: [404..405]
 r206: [404..405]
 r207: [402..403]
 r208: [400..401]
 r209: [394..399]
 r210: [396..397]
 r211: [394..395]
 r212: [392..393]
 r213: [390..391]
 r214: [388..389]
 r215: [382..383]
 r216: [378..379]
 r217: [376..377]
 r218: [374..375]
 r219: [326..373]
 r220: [370..371]
 r221: [368..369]
 r222: [366..367]
 r223: [364..365]
 r225: [352..353]
 r226: [350..351]
 r227: [350..351]
 r228: [348..349]
 r229: [348..349]
 r230: [346..347]
 r231: [344..345]
 r232: [338..343]
 r233: [340..341]
 r234: [338..339]
 r235: [336..337]
 r236: [334..335]
 r237: [332..333]
 r238: [326..327]
 r239: [12..13]
 r240: [8..11]
 r241: [4..5]
 r242: [678..679]
 r243: [674..675]
 r244: [554..555]
 r245: [552..553]
 r246: [504..551]
 r247: [548..549]
 r248: [546..547]
 r249: [544..545]
 r251: [532..533]
 r252: [530..531]
 r253: [530..531]
 r254: [528..529]
 r255: [528..529]
 r256: [526..527]
 r257: [524..525]
 r258: [516..523]
 r259: [520..521]
 r260: [518..519]
 r261: [516..517]
 r262: [514..515]
 r263: [512..513]
 r264: [510..511]
 r265: [504..505]
 r266: [500..501]
 r267: [498..499]
 r268: [496..497]
 r269: [446..495]
 r270: [492..493]
 r271: [490..491]
 r272: [488..489]
 r273: [486..487]
 r275: [474..475]
 r276: [472..473]
 r277: [472..473]
 r278: [470..471]
 r279: [470..471]
 r280: [468..469]
 r281: [466..467]
 r282: [458..465]
 r283: [462..463]
 r284: [460..461]
 r285: [458..459]
 r286: [456..457]
 r287: [454..455]
 r288: [452..453]
 r289: [446..447]
 r290: [670..671]
 r291: [666..667]
 r292: [664..665]
 r293: [616..663]
 r294: [660..661]
 r295: [658..659]
 r296: [656..657]
 r298: [644..645]
 r299: [642..643]
 r300: [642..643]
 r301: [640..641]
 r302: [640..641]
 r303: [638..639]
 r304: [636..637]
 r305: [628..635]
 r306: [632..633]
 r307: [630..631]
 r308: [628..629]
 r309: [626..627]
 r310: [624..625]
 r311: [622..623]
 r312: [616..617]
 r313: [612..613]
 r314: [610..611]
 r315: [608..609]
 r316: [558..607]
 r317: [604..605]
 r318: [602..603]
 r319: [600..601]
 r320: [598..599]
 r322: [586..587]
 r323: [584..585]
 r324: [584..585]
 r325: [582..583]
 r326: [582..583]
 r327: [580..581]
 r328: [578..579]
 r329: [570..577]
 r330: [574..575]
 r331: [572..573]
 r332: [570..571]
 r333: [568..569]
 r334: [566..567]
 r335: [564..565]
 r336: [558..559]
 r337: [2..3]
 r338: [0..1]
 r339: [216..217]
 r340: [214..215]
 r341: [212..213]
 r342: [210..211]
 r343: [206..207]
 r344: [204..205]
 r345: [202..203]
 r346: [194..195]
 r347: [192..193]
 r348: [186..187]
 r349: [188..191]
 r350: [184..185]
 r351: [180..181]
 r352: [176..177]
 r353: [168..169]
 r354: [164..165]
 r355: [162..163]
 r356: [156..157]
 r357: [152..153]
 r358: [150..151]
 r359: [140..141]
 r360: [138..139]
 r361: [132..133]
 r362: [130..131]
 r363: [128..129]
 r364: [120..121]
 r365: [116..117]
 r366: [108..109]
 r367: [106..107]
 r368: [102..103]
 r369: [96..97]
 r370: [88..89]
 r371: [84..85]
 r372: [82..83]
 r373: [76..77]
 r374: [72..73]
 r375: [70..71]
 r376: [68..69]
 r377: [58..59]
 r378: [56..57]
 r379: [50..51]
 r380: [48..49]
 r381: [46..47]
 r382: [38..39]
 r383: [34..35]
 r384: [24..25]
 r385: [22..23]
 r386: [20..21]
 r387: [444..445]
 r388: [440..441]
 r389: [324..325]
 r390: [320..321]
 r391: [318..319]
 r392: [314..315]
 r393: [306..309]
 r394: [306..307]
 r395: [304..305]
 r396: [302..303]
 r397: [294..295]
 r398: [292..293]
 r399: [290..291]
 r400: [272..273]
 r401: [266..267]
 r402: [264..265]
 r403: [258..259]
 r404: [250..253]
 r405: [250..251]
 r406: [248..249]
 r407: [246..247]
 r408: [238..239]
 r409: [236..237]
 r410: [234..235]
 r411: [436..437]
 r412: [432..433]
 r413: [428..429]
 r414: [426..427]
 r415: [422..423]
 r416: [414..417]
 r417: [414..415]
 r418: [412..413]
 r419: [410..411]
 r420: [402..403]
 r421: [400..401]
 r422: [398..399]
 r423: [380..381]
 r424: [374..375]
 r425: [372..373]
 r426: [366..367]
 r427: [358..361]
 r428: [358..359]
 r429: [356..357]
 r430: [354..355]
 r431: [346..347]
 r432: [344..345]
 r433: [342..343]
 r434: [18..19]
 r435: [14..15]
 r436: [10..11]
 r437: [8..9]
 r438: [680..681]
 r439: [676..677]
 r440: [556..557]
 r441: [552..553]
 r442: [550..551]
 r443: [546..547]
 r444: [538..541]
 r445: [538..539]
 r446: [536..537]
 r447: [534..535]
 r448: [526..527]
 r449: [524..525]
 r450: [522..523]
 r451: [502..503]
 r452: [496..497]
 r453: [494..495]
 r454: [488..489]
 r455: [480..483]
 r456: [480..481]
 r457: [478..479]
 r458: [476..477]
 r459: [468..469]
 r460: [466..467]
 r461: [464..465]
 r462: [672..673]
 r463: [668..669]
 r464: [664..665]
 r465: [662..663]
 r466: [658..659]
 r467: [650..653]
 r468: [650..651]
 r469: [648..649]
 r470: [646..647]
 r471: [638..639]
 r472: [636..637]
 r473: [634..635]
 r474: [614..615]
 r475: [608..609]
 r476: [606..607]
 r477: [600..601]
 r478: [592..595]
 r479: [592..593]
 r480: [590..591]
 r481: [588..589]
 r482: [580..581]
 r483: [578..579]
 r484: [576..577]
 r485: [6..7]
 r487: [208..209]
 r488: [196..197]
 r489: [188..189]
 r490: [134..135]
 r491: [110..111]
 r492: [52..53]
 r493: [28..29]
 r494: [310..311]
 r495: [308..309]
 r496: [276..279]
 r497: [276..277]
 r498: [254..255]
 r499: [252..253]
 r500: [220..223]
 r501: [220..221]
 r502: [418..419]
 r503: [416..417]
 r504: [384..387]
 r505: [384..385]
 r506: [362..363]
 r507: [360..361]
 r508: [328..331]
 r509: [328..329]
 r510: [542..543]
 r511: [540..541]
 r512: [506..509]
 r513: [506..507]
 r514: [484..485]
 r515: [482..483]
 r516: [448..451]
 r517: [448..449]
 r518: [654..655]
 r519: [652..653]
 r520: [618..621]
 r521: [618..619]
 r522: [596..597]
 r523: [594..595]
 r524: [560..563]
 r525: [560..561]
 r526: [222..253]
 r527: [278..309]
 r528: [330..361]
 r529: [386..417]
 r530: [450..483]
 r531: [508..541]
 r532: [562..595]
 r533: [620..653]

********** Assignment #1: **********

	 Assigning to 487 (cl=GENERAL_REGS, orig=343, freq=3, tfirst=487, tfreq=3)...
	   Assign 1 to reload r487 (freq=3)
	 Assigning to 490 (cl=GENERAL_REGS, orig=361, freq=3, tfirst=490, tfreq=3)...
	   Assign 1 to reload r490 (freq=3)
	 Assigning to 492 (cl=GENERAL_REGS, orig=379, freq=3, tfirst=492, tfreq=3)...
	   Assign 1 to reload r492 (freq=3)
	 Assigning to 495 (cl=GENERAL_REGS, orig=394, freq=3, tfirst=495, tfreq=3)...
	   Assign 1 to reload r495 (freq=3)
	 Assigning to 499 (cl=GENERAL_REGS, orig=405, freq=3, tfirst=499, tfreq=3)...
	   Assign 1 to reload r499 (freq=3)
	 Assigning to 503 (cl=GENERAL_REGS, orig=417, freq=3, tfirst=503, tfreq=3)...
	   Assign 1 to reload r503 (freq=3)
	 Assigning to 507 (cl=GENERAL_REGS, orig=428, freq=3, tfirst=507, tfreq=3)...
	   Assign 1 to reload r507 (freq=3)
	 Assigning to 511 (cl=GENERAL_REGS, orig=445, freq=3, tfirst=511, tfreq=3)...
	   Assign 1 to reload r511 (freq=3)
	 Assigning to 515 (cl=GENERAL_REGS, orig=456, freq=3, tfirst=515, tfreq=3)...
	   Assign 1 to reload r515 (freq=3)
	 Assigning to 519 (cl=GENERAL_REGS, orig=468, freq=3, tfirst=519, tfreq=3)...
	   Assign 1 to reload r519 (freq=3)
	 Assigning to 523 (cl=GENERAL_REGS, orig=479, freq=3, tfirst=523, tfreq=3)...
	   Assign 1 to reload r523 (freq=3)
	 Assigning to 488 (cl=SSE_REGS, orig=346, freq=3, tfirst=488, tfreq=3)...
	   Assign 22 to reload r488 (freq=3)
	 Assigning to 489 (cl=SSE_REGS, orig=348, freq=3, tfirst=489, tfreq=3)...
	   Assign 21 to reload r489 (freq=3)
	 Assigning to 496 (cl=SSE_REGS, orig=170, freq=3, tfirst=496, tfreq=3)...
	   Assign 21 to reload r496 (freq=3)
	 Assigning to 500 (cl=SSE_REGS, orig=193, freq=3, tfirst=500, tfreq=3)...
	   Assign 21 to reload r500 (freq=3)
	 Assigning to 504 (cl=SSE_REGS, orig=215, freq=3, tfirst=504, tfreq=3)...
	   Assign 21 to reload r504 (freq=3)
	 Assigning to 508 (cl=SSE_REGS, orig=238, freq=3, tfirst=508, tfreq=3)...
	   Assign 21 to reload r508 (freq=3)
	 Assigning to 512 (cl=SSE_REGS, orig=265, freq=3, tfirst=512, tfreq=3)...
	   Assign 21 to reload r512 (freq=3)
	 Assigning to 516 (cl=SSE_REGS, orig=289, freq=3, tfirst=516, tfreq=3)...
	   Assign 21 to reload r516 (freq=3)
	 Assigning to 520 (cl=SSE_REGS, orig=312, freq=3, tfirst=520, tfreq=3)...
	   Assign 21 to reload r520 (freq=3)
	 Assigning to 524 (cl=SSE_REGS, orig=336, freq=3, tfirst=524, tfreq=3)...
	   Assign 21 to reload r524 (freq=3)
	 Assigning to 491 (cl=SSE_REGS, orig=115, freq=2, tfirst=491, tfreq=2)...
	   Assign 24 to reload r491 (freq=2)
	 Assigning to 493 (cl=SSE_REGS, orig=145, freq=2, tfirst=493, tfreq=2)...
	   Assign 25 to reload r493 (freq=2)
	 Assigning to 494 (cl=ALL_SSE_REGS, orig=156, freq=2, tfirst=494, tfreq=2)...
	   Assign 26 to reload r494 (freq=2)
	Hard reg 26 is preferable by r527 with profit 1
	Hard reg 26 is preferable by r497 with profit 1
	 Assigning to 497 (cl=SSE_REGS, orig=156, freq=2, tfirst=494, tfreq=2)...
	   Assign 26 to optional reload r497 (freq=2)
	Hard reg 26 is preferable by r527 with profit 2
	 Assigning to 527 (cl=ALL_SSE_REGS, orig=156, freq=2, tfirst=494, tfreq=2)...
	 Assigning to 498 (cl=ALL_SSE_REGS, orig=179, freq=2, tfirst=498, tfreq=2)...
	   Assign 27 to reload r498 (freq=2)
	Hard reg 27 is preferable by r526 with profit 1
	Hard reg 27 is preferable by r501 with profit 1
	 Assigning to 501 (cl=SSE_REGS, orig=179, freq=2, tfirst=498, tfreq=2)...
	   Assign 27 to optional reload r501 (freq=2)
	Hard reg 27 is preferable by r526 with profit 2
	 Assigning to 526 (cl=ALL_SSE_REGS, orig=179, freq=2, tfirst=498, tfreq=2)...
	 Assigning to 502 (cl=ALL_SSE_REGS, orig=201, freq=2, tfirst=502, tfreq=2)...
	   Assign 28 to reload r502 (freq=2)
	Hard reg 28 is preferable by r529 with profit 1
	Hard reg 28 is preferable by r505 with profit 1
	 Assigning to 505 (cl=SSE_REGS, orig=201, freq=2, tfirst=502, tfreq=2)...
	   Assign 28 to optional reload r505 (freq=2)
	Hard reg 28 is preferable by r529 with profit 2
	 Assigning to 529 (cl=ALL_SSE_REGS, orig=201, freq=2, tfirst=502, tfreq=2)...
	 Assigning to 506 (cl=ALL_SSE_REGS, orig=224, freq=2, tfirst=506, tfreq=2)...
	   Assign 24 to reload r506 (freq=2)
	Hard reg 24 is preferable by r528 with profit 1
	Hard reg 24 is preferable by r509 with profit 1
	 Assigning to 509 (cl=SSE_REGS, orig=224, freq=2, tfirst=506, tfreq=2)...
	   Assign 24 to optional reload r509 (freq=2)
	Hard reg 24 is preferable by r528 with profit 2
	 Assigning to 528 (cl=ALL_SSE_REGS, orig=224, freq=2, tfirst=506, tfreq=2)...
	 Assigning to 510 (cl=ALL_SSE_REGS, orig=250, freq=2, tfirst=510, tfreq=2)...
	   Assign 25 to reload r510 (freq=2)
	Hard reg 25 is preferable by r531 with profit 1
	Hard reg 25 is preferable by r513 with profit 1
	 Assigning to 513 (cl=SSE_REGS, orig=250, freq=2, tfirst=510, tfreq=2)...
	   Assign 25 to optional reload r513 (freq=2)
	Hard reg 25 is preferable by r531 with profit 2
	 Assigning to 531 (cl=ALL_SSE_REGS, orig=250, freq=2, tfirst=510, tfreq=2)...
	 Assigning to 514 (cl=ALL_SSE_REGS, orig=274, freq=2, tfirst=514, tfreq=2)...
	   Assign 26 to reload r514 (freq=2)
	Hard reg 26 is preferable by r530 with profit 1
	Hard reg 26 is preferable by r517 with profit 1
	 Assigning to 517 (cl=SSE_REGS, orig=274, freq=2, tfirst=514, tfreq=2)...
	   Assign 26 to optional reload r517 (freq=2)
	Hard reg 26 is preferable by r530 with profit 2
	 Assigning to 530 (cl=ALL_SSE_REGS, orig=274, freq=2, tfirst=514, tfreq=2)...
	 Assigning to 518 (cl=ALL_SSE_REGS, orig=297, freq=2, tfirst=518, tfreq=2)...
	   Assign 27 to reload r518 (freq=2)
	Hard reg 27 is preferable by r533 with profit 1
	Hard reg 27 is preferable by r521 with profit 1
	 Assigning to 521 (cl=SSE_REGS, orig=297, freq=2, tfirst=518, tfreq=2)...
	   Assign 27 to optional reload r521 (freq=2)
	Hard reg 27 is preferable by r533 with profit 2
	 Assigning to 533 (cl=ALL_SSE_REGS, orig=297, freq=2, tfirst=518, tfreq=2)...
	 Assigning to 522 (cl=ALL_SSE_REGS, orig=321, freq=2, tfirst=522, tfreq=2)...
	   Assign 28 to reload r522 (freq=2)
	Hard reg 28 is preferable by r532 with profit 1
	Hard reg 28 is preferable by r525 with profit 1
	 Assigning to 525 (cl=SSE_REGS, orig=321, freq=2, tfirst=522, tfreq=2)...
	   Assign 28 to optional reload r525 (freq=2)
	Hard reg 28 is preferable by r532 with profit 2
	 Assigning to 532 (cl=ALL_SSE_REGS, orig=321, freq=2, tfirst=522, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  585: r501:SF=r179:SF
      REG_DEAD r179:SF
   Insn after restoring regs:
  580: r179:SF=r498:SF
      REG_DEAD r498:SF
   Insn after restoring regs:
  579: r497:SF=r156:SF
      REG_DEAD r156:SF
   Insn after restoring regs:
  574: r156:SF=r494:SF
      REG_DEAD r494:SF
   Insn after restoring regs:
  597: r509:SF=r224:SF
      REG_DEAD r224:SF
   Insn after restoring regs:
  592: r224:SF=r506:SF
      REG_DEAD r506:SF
   Insn after restoring regs:
  591: r505:SF=r201:SF
      REG_DEAD r201:SF
   Insn after restoring regs:
  586: r201:SF=r502:SF
      REG_DEAD r502:SF
   Insn after restoring regs:
  609: r517:SF=r274:SF
      REG_DEAD r274:SF
   Insn after restoring regs:
  604: r274:SF=r514:SF
      REG_DEAD r514:SF
   Insn after restoring regs:
  603: r513:SF=r250:SF
      REG_DEAD r250:SF
   Insn after restoring regs:
  598: r250:SF=r510:SF
      REG_DEAD r510:SF
   Insn after restoring regs:
  621: r525:SF=r321:SF
      REG_DEAD r321:SF
   Insn after restoring regs:
  616: r321:SF=r522:SF
      REG_DEAD r522:SF
   Insn after restoring regs:
  615: r521:SF=r297:SF
      REG_DEAD r297:SF
   Insn after restoring regs:
  610: r297:SF=r518:SF
      REG_DEAD r518:SF
Remove optional reload reg 497
  Restoring original insn:
  207: r496:SF=r496:SF*r156:SF
      REG_DEAD r156:SF
  Deleting move 579
  579: r497:SF=r156:SF
      REG_DEAD r156:SF
deleting insn with uid = 579.
Remove optional reload reg 501
  Restoring original insn:
  244: r500:SF=r500:SF*r179:SF
      REG_DEAD r179:SF
  Deleting move 585
  585: r501:SF=r179:SF
      REG_DEAD r179:SF
deleting insn with uid = 585.
Remove optional reload reg 505
  Restoring original insn:
  288: r504:SF=r504:SF*r201:SF
      REG_DEAD r201:SF
  Deleting move 591
  591: r505:SF=r201:SF
      REG_DEAD r201:SF
deleting insn with uid = 591.
Remove optional reload reg 509
  Restoring original insn:
  325: r508:SF=r508:SF*r224:SF
      REG_DEAD r224:SF
  Deleting move 597
  597: r509:SF=r224:SF
      REG_DEAD r224:SF
deleting insn with uid = 597.
Remove optional reload reg 513
  Restoring original insn:
  400: r512:SF=r512:SF*r250:SF
      REG_DEAD r250:SF
  Deleting move 603
  603: r513:SF=r250:SF
      REG_DEAD r250:SF
deleting insn with uid = 603.
Remove optional reload reg 517
  Restoring original insn:
  438: r516:SF=r516:SF*r274:SF
      REG_DEAD r274:SF
  Deleting move 609
  609: r517:SF=r274:SF
      REG_DEAD r274:SF
deleting insn with uid = 609.
Remove optional reload reg 521
  Restoring original insn:
  483: r520:SF=r520:SF*r297:SF
      REG_DEAD r297:SF
  Deleting move 615
  615: r521:SF=r297:SF
      REG_DEAD r297:SF
deleting insn with uid = 615.
Remove optional reload reg 525
  Restoring original insn:
  521: r524:SF=r524:SF*r321:SF
      REG_DEAD r321:SF
  Deleting move 621
  621: r525:SF=r321:SF
      REG_DEAD r321:SF
deleting insn with uid = 621.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 521:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=534 from oldreg=321, assigning class SSE_REGS to r534
      Making reload reg 534 for reg 321 optional
  521: r524:SF=r524:SF*r534:SF
      REG_DEAD r321:SF
    Inserting insn reload before:
  630: r534:SF=r321:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 630:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 483:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=535 from oldreg=297, assigning class SSE_REGS to r535
      Making reload reg 535 for reg 297 optional
  483: r520:SF=r520:SF*r535:SF
      REG_DEAD r297:SF
    Inserting insn reload before:
  631: r535:SF=r297:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 631:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 438:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=536 from oldreg=274, assigning class SSE_REGS to r536
      Making reload reg 536 for reg 274 optional
  438: r516:SF=r516:SF*r536:SF
      REG_DEAD r274:SF
    Inserting insn reload before:
  632: r536:SF=r274:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 632:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 400:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=537 from oldreg=250, assigning class SSE_REGS to r537
      Making reload reg 537 for reg 250 optional
  400: r512:SF=r512:SF*r537:SF
      REG_DEAD r250:SF
    Inserting insn reload before:
  633: r537:SF=r250:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 633:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 325:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=538 from oldreg=224, assigning class SSE_REGS to r538
      Making reload reg 538 for reg 224 optional
  325: r508:SF=r508:SF*r538:SF
      REG_DEAD r224:SF
    Inserting insn reload before:
  634: r538:SF=r224:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 634:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=539 from oldreg=201, assigning class SSE_REGS to r539
      Making reload reg 539 for reg 201 optional
  288: r504:SF=r504:SF*r539:SF
      REG_DEAD r201:SF
    Inserting insn reload before:
  635: r539:SF=r201:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 635:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 244:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=540 from oldreg=179, assigning class SSE_REGS to r540
      Making reload reg 540 for reg 179 optional
  244: r500:SF=r500:SF*r540:SF
      REG_DEAD r179:SF
    Inserting insn reload before:
  636: r540:SF=r179:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 636:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=541 from oldreg=156, assigning class SSE_REGS to r541
      Making reload reg 541 for reg 156 optional
  207: r496:SF=r496:SF*r541:SF
      REG_DEAD r156:SF
    Inserting insn reload before:
  637: r541:SF=r156:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 637:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=542 from oldreg=179, assigning class ALL_SSE_REGS to inheritance r542
    Original reg change 179->542 (bb13):
  580: r542:SF=r498:SF
      REG_DEAD r498:SF
    Add original<-inheritance after:
  638: r179:SF=r542:SF

    Inheritance reuse change 179->542 (bb13):
  636: r540:SF=r542:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=543 from oldreg=156, assigning class ALL_SSE_REGS to inheritance r543
    Original reg change 156->543 (bb13):
  574: r543:SF=r494:SF
      REG_DEAD r494:SF
    Add original<-inheritance after:
  639: r156:SF=r543:SF

    Inheritance reuse change 156->543 (bb13):
  637: r541:SF=r543:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   638: r179:SF=r542:SF
deleting insn with uid = 638.
	    Removing dead insn:
   639: r156:SF=r543:SF
deleting insn with uid = 639.
EBB 14
EBB 15
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=544 from oldreg=224, assigning class ALL_SSE_REGS to inheritance r544
    Original reg change 224->544 (bb15):
  592: r544:SF=r506:SF
      REG_DEAD r506:SF
    Add original<-inheritance after:
  640: r224:SF=r544:SF

    Inheritance reuse change 224->544 (bb15):
  634: r538:SF=r544:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=545 from oldreg=201, assigning class ALL_SSE_REGS to inheritance r545
    Original reg change 201->545 (bb15):
  586: r545:SF=r502:SF
      REG_DEAD r502:SF
    Add original<-inheritance after:
  641: r201:SF=r545:SF

    Inheritance reuse change 201->545 (bb15):
  635: r539:SF=r545:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   640: r224:SF=r544:SF
deleting insn with uid = 640.
	    Removing dead insn:
   641: r201:SF=r545:SF
deleting insn with uid = 641.
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=546 from oldreg=274, assigning class ALL_SSE_REGS to inheritance r546
    Original reg change 274->546 (bb23):
  604: r546:SF=r514:SF
      REG_DEAD r514:SF
    Add original<-inheritance after:
  642: r274:SF=r546:SF

    Inheritance reuse change 274->546 (bb23):
  632: r536:SF=r546:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=547 from oldreg=250, assigning class ALL_SSE_REGS to inheritance r547
    Original reg change 250->547 (bb23):
  598: r547:SF=r510:SF
      REG_DEAD r510:SF
    Add original<-inheritance after:
  643: r250:SF=r547:SF

    Inheritance reuse change 250->547 (bb23):
  633: r537:SF=r547:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   642: r274:SF=r546:SF
deleting insn with uid = 642.
	    Removing dead insn:
   643: r250:SF=r547:SF
deleting insn with uid = 643.
EBB 24
EBB 25
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=548 from oldreg=321, assigning class ALL_SSE_REGS to inheritance r548
    Original reg change 321->548 (bb25):
  616: r548:SF=r522:SF
      REG_DEAD r522:SF
    Add original<-inheritance after:
  644: r321:SF=r548:SF

    Inheritance reuse change 321->548 (bb25):
  630: r534:SF=r548:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Use smallest class of ALL_SSE_REGS and SSE_REGS
      Creating newreg=549 from oldreg=297, assigning class ALL_SSE_REGS to inheritance r549
    Original reg change 297->549 (bb25):
  610: r549:SF=r518:SF
      REG_DEAD r518:SF
    Add original<-inheritance after:
  645: r297:SF=r549:SF

    Inheritance reuse change 297->549 (bb25):
  631: r535:SF=r549:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   644: r321:SF=r548:SF
deleting insn with uid = 644.
	    Removing dead insn:
   645: r297:SF=r549:SF
deleting insn with uid = 645.
EBB 26
EBB 27
EBB 28

********** Pseudo live ranges #2: **********

  BB 28
   Insn 543: point = 0
   Insn 542: point = 0
   Insn 538: point = 1
   Insn 535: point = 3
  BB 27
   Insn 532: point = 4
   Insn 531: point = 4
   Insn 529: point = 5
   Insn 528: point = 7
  BB 20
   Insn 557: point = 8
   Insn 352: point = 8
  BB 19
   Insn 347: point = 8
   Insn 346: point = 8
   Insn 345: point = 9
  BB 18
   Insn 344: point = 11
   Insn 343: point = 11
   Insn 342: point = 12
   Insn 341: point = 13
   Insn 340: point = 15
   Insn 339: point = 17
  BB 17
   Insn 336: point = 18
   Insn 335: point = 18
   Insn 333: point = 19
   Insn 332: point = 21
  BB 10
   Insn 553: point = 22
   Insn 160: point = 22
  BB 9
   Insn 155: point = 22
   Insn 154: point = 22
   Insn 153: point = 23
  BB 8
   Insn 152: point = 25
   Insn 151: point = 25
   Insn 150: point = 26
   Insn 149: point = 27
   Insn 148: point = 29
  BB 7
   Insn 145: point = 30
   Insn 573: point = 31
	Hard reg 0 is preferable by r493 with profit 1
   Insn 144: point = 33
   Insn 143: point = 35
   Insn 142: point = 37
   Insn 141: point = 39
   Insn 140: point = 40
   Insn 139: point = 42
   Insn 138: point = 44
   Insn 137: point = 45
   Insn 136: point = 47
   Insn 135: point = 49
   Insn 134: point = 51
   Insn 133: point = 53
   Insn 132: point = 55
   Insn 572: point = 57
	Hard reg 1 is preferable by r492 with profit 1
   Insn 131: point = 59
   Insn 571: point = 59
   Insn 130: point = 60
   Insn 129: point = 62
   Insn 128: point = 64
   Insn 127: point = 65
   Insn 126: point = 67
   Insn 125: point = 68
   Insn 124: point = 70
   Insn 123: point = 72
   Insn 122: point = 73
   Insn 121: point = 73
   Insn 120: point = 74
   Insn 119: point = 76
   Insn 118: point = 78
   Insn 117: point = 79
   Insn 116: point = 81
   Insn 115: point = 82
   Insn 114: point = 83
   Insn 113: point = 85
   Insn 112: point = 87
   Insn 111: point = 88
   Insn 110: point = 90
   Insn 109: point = 92
   Insn 108: point = 94
   Insn 107: point = 95
   Insn 106: point = 96
   Insn 105: point = 98
   Insn 104: point = 100
   Insn 103: point = 101
   Insn 102: point = 103
   Insn 101: point = 105
   Insn 100: point = 107
   Insn 99: point = 109
  BB 6
   Insn 97: point = 110
   Insn 96: point = 110
   Insn 95: point = 111
   Insn 94: point = 113
   Insn 93: point = 115
  BB 5
   Insn 91: point = 116
   Insn 90: point = 116
   Insn 89: point = 117
   Insn 88: point = 119
  BB 4
   Insn 85: point = 120
   Insn 84: point = 121
   Insn 570: point = 122
	Hard reg 0 is preferable by r491 with profit 1
   Insn 83: point = 124
   Insn 82: point = 126
   Insn 81: point = 128
   Insn 80: point = 130
   Insn 79: point = 131
   Insn 78: point = 133
   Insn 77: point = 135
   Insn 76: point = 136
   Insn 75: point = 138
   Insn 74: point = 140
   Insn 73: point = 142
   Insn 72: point = 144
   Insn 71: point = 146
   Insn 569: point = 148
	Hard reg 1 is preferable by r490 with profit 1
   Insn 70: point = 150
   Insn 568: point = 150
   Insn 69: point = 151
   Insn 68: point = 153
   Insn 67: point = 155
   Insn 66: point = 156
   Insn 65: point = 158
   Insn 64: point = 159
   Insn 63: point = 161
   Insn 62: point = 163
   Insn 61: point = 164
   Insn 60: point = 164
   Insn 59: point = 165
   Insn 58: point = 167
   Insn 57: point = 169
   Insn 56: point = 170
   Insn 55: point = 171
   Insn 54: point = 173
   Insn 53: point = 175
   Insn 52: point = 176
   Insn 51: point = 178
   Insn 50: point = 180
   Insn 49: point = 182
   Insn 48: point = 183
   Insn 47: point = 184
   Insn 46: point = 186
   Insn 45: point = 188
   Insn 44: point = 189
   Insn 43: point = 191
   Insn 42: point = 193
   Insn 41: point = 195
   Insn 40: point = 197
  BB 3
   Insn 38: point = 198
   Insn 37: point = 198
   Insn 36: point = 199
   Insn 35: point = 201
  BB 2
   Insn 33: point = 202
   Insn 32: point = 202
   Insn 31: point = 203
   Insn 30: point = 205
   Insn 29: point = 206
   Insn 567: point = 207
	Hard reg 0 is preferable by r489 with profit 1
   Insn 28: point = 209
   Insn 566: point = 210
	Hard reg 0 is preferable by r489 with profit 1
	Hard reg 21 is preferable by r489 with profit 1
   Insn 27: point = 212
   Insn 26: point = 213
   Insn 25: point = 215
   Insn 24: point = 216
   Insn 565: point = 217
	Hard reg 0 is preferable by r488 with profit 1
   Insn 23: point = 219
   Insn 564: point = 220
	Hard reg 0 is preferable by r488 with profit 1
	Hard reg 22 is preferable by r488 with profit 1
   Insn 22: point = 222
   Insn 21: point = 224
   Insn 20: point = 226
   Insn 19: point = 228
   Insn 563: point = 230
	Hard reg 1 is preferable by r487 with profit 1
   Insn 18: point = 232
   Insn 562: point = 232
   Insn 17: point = 233
   Insn 16: point = 235
   Insn 15: point = 236
   Insn 14: point = 238
   Insn 13: point = 239
   Insn 12: point = 240
   Insn 11: point = 241
   Insn 10: point = 242
   Insn 9: point = 243
   Insn 5: point = 243
   Insn 4: point = 243
   Insn 3: point = 243
   Insn 2: point = 243
  BB 16
   Insn 329: point = 243
  BB 13
   Insn 555: point = 243
   Insn 245: point = 243
   Insn 584: point = 244
	Hard reg 0 is preferable by r500 with profit 1
   Insn 244: point = 246
   Insn 636: point = 247
	   Creating copy r540<-r542@1
   Insn 583: point = 249
	Hard reg 0 is preferable by r500 with profit 1
	Hard reg 21 is preferable by r500 with profit 1
   Insn 243: point = 251
   Insn 242: point = 253
   Insn 241: point = 254
   Insn 240: point = 254
   Insn 239: point = 255
   Insn 238: point = 257
   Insn 237: point = 259
   Insn 236: point = 261
   Insn 235: point = 262
   Insn 234: point = 264
   Insn 233: point = 265
   Insn 232: point = 267
   Insn 231: point = 268
   Insn 230: point = 270
   Insn 229: point = 271
   Insn 228: point = 273
   Insn 227: point = 274
   Insn 226: point = 276
   Insn 225: point = 278
   Insn 224: point = 280
   Insn 582: point = 282
	Hard reg 1 is preferable by r499 with profit 1
   Insn 223: point = 284
   Insn 581: point = 284
   Insn 222: point = 285
   Insn 580: point = 286
	   Creating copy r498->r542@1
   Insn 221: point = 288
   Insn 220: point = 290
   Insn 219: point = 292
   Insn 218: point = 293
   Insn 217: point = 295
   Insn 216: point = 297
   Insn 215: point = 299
   Insn 214: point = 300
   Insn 213: point = 302
   Insn 212: point = 303
   Insn 211: point = 305
   Insn 210: point = 307
   Insn 209: point = 309
   Insn 208: point = 310
   Insn 578: point = 311
	Hard reg 0 is preferable by r496 with profit 1
   Insn 207: point = 313
   Insn 637: point = 314
	   Creating copy r541<-r543@1
   Insn 577: point = 316
	Hard reg 0 is preferable by r496 with profit 1
	Hard reg 21 is preferable by r496 with profit 1
   Insn 206: point = 318
   Insn 205: point = 320
   Insn 204: point = 321
   Insn 203: point = 321
   Insn 202: point = 322
   Insn 201: point = 324
   Insn 200: point = 326
   Insn 199: point = 328
   Insn 198: point = 329
   Insn 197: point = 331
   Insn 196: point = 332
   Insn 195: point = 334
   Insn 194: point = 335
   Insn 193: point = 337
   Insn 192: point = 338
   Insn 191: point = 340
   Insn 190: point = 341
   Insn 189: point = 343
   Insn 188: point = 345
   Insn 187: point = 347
   Insn 576: point = 349
	Hard reg 1 is preferable by r495 with profit 1
   Insn 186: point = 351
   Insn 575: point = 351
   Insn 185: point = 352
   Insn 574: point = 353
	   Creating copy r494->r543@1
   Insn 184: point = 355
   Insn 183: point = 357
   Insn 182: point = 359
   Insn 181: point = 360
   Insn 180: point = 362
   Insn 179: point = 364
   Insn 178: point = 365
   Insn 177: point = 367
   Insn 176: point = 368
   Insn 175: point = 370
   Insn 174: point = 372
  BB 15
   Insn 326: point = 373
   Insn 596: point = 374
	Hard reg 0 is preferable by r508 with profit 1
   Insn 325: point = 376
   Insn 634: point = 377
	   Creating copy r538<-r544@1
   Insn 595: point = 379
	Hard reg 0 is preferable by r508 with profit 1
	Hard reg 21 is preferable by r508 with profit 1
   Insn 324: point = 381
   Insn 323: point = 383
   Insn 322: point = 384
   Insn 321: point = 384
   Insn 320: point = 385
   Insn 319: point = 387
   Insn 318: point = 389
   Insn 317: point = 391
   Insn 316: point = 392
   Insn 315: point = 394
   Insn 314: point = 395
   Insn 313: point = 397
   Insn 312: point = 398
   Insn 311: point = 400
   Insn 310: point = 401
   Insn 309: point = 403
   Insn 308: point = 404
   Insn 307: point = 406
   Insn 306: point = 408
   Insn 305: point = 410
   Insn 594: point = 412
	Hard reg 1 is preferable by r507 with profit 1
   Insn 304: point = 414
   Insn 593: point = 414
   Insn 303: point = 415
   Insn 592: point = 416
	   Creating copy r506->r544@1
   Insn 302: point = 418
   Insn 301: point = 420
   Insn 300: point = 422
   Insn 299: point = 423
   Insn 298: point = 425
   Insn 297: point = 427
   Insn 296: point = 429
   Insn 295: point = 430
   Insn 294: point = 432
   Insn 293: point = 433
   Insn 292: point = 435
   Insn 291: point = 437
   Insn 290: point = 439
   Insn 289: point = 440
   Insn 590: point = 441
	Hard reg 0 is preferable by r504 with profit 1
   Insn 288: point = 443
   Insn 635: point = 444
	   Creating copy r539<-r545@1
   Insn 589: point = 446
	Hard reg 0 is preferable by r504 with profit 1
	Hard reg 21 is preferable by r504 with profit 1
   Insn 287: point = 448
   Insn 286: point = 450
   Insn 285: point = 451
   Insn 284: point = 451
   Insn 283: point = 452
   Insn 282: point = 454
   Insn 281: point = 456
   Insn 280: point = 458
   Insn 279: point = 459
   Insn 278: point = 461
   Insn 277: point = 462
   Insn 276: point = 464
   Insn 275: point = 465
   Insn 274: point = 467
   Insn 273: point = 468
   Insn 272: point = 470
   Insn 271: point = 471
   Insn 270: point = 473
   Insn 269: point = 475
   Insn 268: point = 477
   Insn 588: point = 479
	Hard reg 1 is preferable by r503 with profit 1
   Insn 267: point = 481
   Insn 587: point = 481
   Insn 266: point = 482
   Insn 586: point = 483
	   Creating copy r502->r545@1
   Insn 265: point = 485
   Insn 264: point = 487
   Insn 263: point = 489
   Insn 262: point = 490
   Insn 261: point = 492
   Insn 260: point = 494
   Insn 259: point = 495
   Insn 258: point = 497
   Insn 257: point = 498
   Insn 256: point = 500
   Insn 255: point = 502
  BB 14
   Insn 253: point = 503
   Insn 252: point = 503
   Insn 251: point = 504
   Insn 250: point = 506
  BB 12
   Insn 172: point = 507
   Insn 171: point = 507
   Insn 170: point = 508
   Insn 169: point = 510
  BB 11
   Insn 167: point = 511
   Insn 166: point = 511
   Insn 165: point = 512
   Insn 164: point = 514
  BB 26
   Insn 525: point = 515
  BB 23
   Insn 559: point = 515
   Insn 439: point = 515
   Insn 608: point = 516
	Hard reg 0 is preferable by r516 with profit 1
   Insn 438: point = 518
   Insn 632: point = 519
	   Creating copy r536<-r546@1
   Insn 607: point = 521
	Hard reg 0 is preferable by r516 with profit 1
	Hard reg 21 is preferable by r516 with profit 1
   Insn 437: point = 523
   Insn 436: point = 525
   Insn 435: point = 526
   Insn 434: point = 526
   Insn 433: point = 527
   Insn 432: point = 529
   Insn 431: point = 531
   Insn 430: point = 533
   Insn 429: point = 535
   Insn 428: point = 536
   Insn 427: point = 538
   Insn 426: point = 539
   Insn 425: point = 541
   Insn 424: point = 542
   Insn 423: point = 544
   Insn 422: point = 545
   Insn 421: point = 547
   Insn 420: point = 548
   Insn 419: point = 550
   Insn 418: point = 552
   Insn 417: point = 554
   Insn 606: point = 556
	Hard reg 1 is preferable by r515 with profit 1
   Insn 416: point = 558
   Insn 605: point = 558
   Insn 415: point = 559
   Insn 604: point = 560
	   Creating copy r514->r546@1
   Insn 414: point = 562
   Insn 413: point = 564
   Insn 412: point = 566
   Insn 411: point = 567
   Insn 410: point = 569
   Insn 409: point = 571
   Insn 408: point = 573
   Insn 407: point = 574
   Insn 406: point = 576
   Insn 405: point = 577
   Insn 404: point = 579
   Insn 403: point = 581
   Insn 402: point = 583
   Insn 401: point = 584
   Insn 602: point = 585
	Hard reg 0 is preferable by r512 with profit 1
   Insn 400: point = 587
   Insn 633: point = 588
	   Creating copy r537<-r547@1
   Insn 601: point = 590
	Hard reg 0 is preferable by r512 with profit 1
	Hard reg 21 is preferable by r512 with profit 1
   Insn 399: point = 592
   Insn 398: point = 594
   Insn 397: point = 595
   Insn 396: point = 595
   Insn 395: point = 596
   Insn 394: point = 598
   Insn 393: point = 600
   Insn 392: point = 602
   Insn 391: point = 604
   Insn 390: point = 605
   Insn 389: point = 607
   Insn 388: point = 608
   Insn 387: point = 610
   Insn 386: point = 611
   Insn 385: point = 613
   Insn 384: point = 614
   Insn 383: point = 616
   Insn 382: point = 617
   Insn 381: point = 619
   Insn 380: point = 621
   Insn 379: point = 623
   Insn 600: point = 625
	Hard reg 1 is preferable by r511 with profit 1
   Insn 378: point = 627
   Insn 599: point = 627
   Insn 377: point = 628
   Insn 598: point = 629
	   Creating copy r510->r547@1
   Insn 376: point = 631
   Insn 375: point = 633
   Insn 374: point = 635
   Insn 373: point = 636
   Insn 372: point = 638
   Insn 371: point = 640
   Insn 370: point = 641
   Insn 369: point = 643
   Insn 368: point = 644
   Insn 367: point = 646
   Insn 366: point = 648
  BB 25
   Insn 522: point = 649
   Insn 620: point = 650
	Hard reg 0 is preferable by r524 with profit 1
   Insn 521: point = 652
   Insn 630: point = 653
	   Creating copy r534<-r548@1
   Insn 619: point = 655
	Hard reg 0 is preferable by r524 with profit 1
	Hard reg 21 is preferable by r524 with profit 1
   Insn 520: point = 657
   Insn 519: point = 659
   Insn 518: point = 660
   Insn 517: point = 660
   Insn 516: point = 661
   Insn 515: point = 663
   Insn 514: point = 665
   Insn 513: point = 667
   Insn 512: point = 669
   Insn 511: point = 670
   Insn 510: point = 672
   Insn 509: point = 673
   Insn 508: point = 675
   Insn 507: point = 676
   Insn 506: point = 678
   Insn 505: point = 679
   Insn 504: point = 681
   Insn 503: point = 682
   Insn 502: point = 684
   Insn 501: point = 686
   Insn 500: point = 688
   Insn 618: point = 690
	Hard reg 1 is preferable by r523 with profit 1
   Insn 499: point = 692
   Insn 617: point = 692
   Insn 498: point = 693
   Insn 616: point = 694
	   Creating copy r522->r548@1
   Insn 497: point = 696
   Insn 496: point = 698
   Insn 495: point = 700
   Insn 494: point = 701
   Insn 493: point = 703
   Insn 492: point = 705
   Insn 491: point = 707
   Insn 490: point = 708
   Insn 489: point = 710
   Insn 488: point = 711
   Insn 487: point = 713
   Insn 486: point = 715
   Insn 485: point = 717
   Insn 484: point = 718
   Insn 614: point = 719
	Hard reg 0 is preferable by r520 with profit 1
   Insn 483: point = 721
   Insn 631: point = 722
	   Creating copy r535<-r549@1
   Insn 613: point = 724
	Hard reg 0 is preferable by r520 with profit 1
	Hard reg 21 is preferable by r520 with profit 1
   Insn 482: point = 726
   Insn 481: point = 728
   Insn 480: point = 729
   Insn 479: point = 729
   Insn 478: point = 730
   Insn 477: point = 732
   Insn 476: point = 734
   Insn 475: point = 736
   Insn 474: point = 738
   Insn 473: point = 739
   Insn 472: point = 741
   Insn 471: point = 742
   Insn 470: point = 744
   Insn 469: point = 745
   Insn 468: point = 747
   Insn 467: point = 748
   Insn 466: point = 750
   Insn 465: point = 751
   Insn 464: point = 753
   Insn 463: point = 755
   Insn 462: point = 757
   Insn 612: point = 759
	Hard reg 1 is preferable by r519 with profit 1
   Insn 461: point = 761
   Insn 611: point = 761
   Insn 460: point = 762
   Insn 610: point = 763
	   Creating copy r518->r549@1
   Insn 459: point = 765
   Insn 458: point = 767
   Insn 457: point = 769
   Insn 456: point = 770
   Insn 455: point = 772
   Insn 454: point = 774
   Insn 453: point = 775
   Insn 452: point = 777
   Insn 451: point = 778
   Insn 450: point = 780
   Insn 449: point = 782
  BB 24
   Insn 447: point = 783
   Insn 446: point = 783
   Insn 445: point = 784
   Insn 444: point = 786
  BB 22
   Insn 364: point = 787
   Insn 363: point = 787
   Insn 362: point = 788
   Insn 361: point = 790
  BB 21
   Insn 359: point = 791
   Insn 358: point = 791
   Insn 357: point = 792
   Insn 356: point = 794
 r83: [221..236]
 r84: [229..233]
 r85: [223..224]
 r86: [219..222]
 r87: [211..213]
 r88: [202..203]
 r89: [198..199]
 r90: [194..195]
 r91: [192..193]
 r92: [190..191]
 r93: [187..189]
 r94: [185..186]
 r95: [179..180]
 r96: [177..178]
 r97: [174..176]
 r98: [172..173]
 r99: [166..167]
 r100: [164..165]
 r101: [162..163]
 r102: [160..161]
 r103: [157..159]
 r104: [127..156]
 r105: [152..153]
 r106: [147..151]
 r107: [141..142]
 r108: [139..140]
 r109: [137..138]
 r110: [134..136]
 r111: [132..133]
 r112: [129..131]
 r113: [127..128]
 r114: [125..126]
 r115: [120..122]
 r116: [116..117]
 r117: [112..113]
 r118: [110..111]
 r119: [106..107]
 r120: [104..105]
 r121: [102..103]
 r122: [99..101]
 r123: [97..98]
 r124: [91..92]
 r125: [89..90]
 r126: [86..88]
 r127: [84..85]
 r128: [30..79]
 r129: [75..76]
 r130: [73..74]
 r131: [71..72]
 r132: [69..70]
 r133: [66..68]
 r134: [36..65]
 r135: [61..62]
 r136: [56..60]
 r137: [50..51]
 r138: [48..49]
 r139: [46..47]
 r140: [43..45]
 r141: [41..42]
 r142: [38..40]
 r143: [36..37]
 r144: [34..35]
 r145: [30..31]
 r146: [22..27]
 r147: [18..19]
 r148: [511..512]
 r149: [507..508]
 r150: [369..370]
 r151: [366..368]
 r152: [310..365]
 r153: [361..362]
 r154: [358..360]
 r155: [356..357]
 r157: [342..343]
 r158: [339..341]
 r159: [339..340]
 r160: [336..338]
 r161: [336..337]
 r162: [333..335]
 r163: [330..332]
 r164: [323..329]
 r165: [325..326]
 r166: [323..324]
 r167: [321..322]
 r168: [319..320]
 r169: [317..318]
 r170: [310..311]
 r171: [306..307]
 r172: [304..305]
 r173: [301..303]
 r174: [243..300]
 r175: [296..297]
 r176: [294..295]
 r177: [291..293]
 r178: [289..290]
 r180: [275..276]
 r181: [272..274]
 r182: [272..273]
 r183: [269..271]
 r184: [269..270]
 r185: [266..268]
 r186: [263..265]
 r187: [256..262]
 r188: [258..259]
 r189: [256..257]
 r190: [254..255]
 r191: [252..253]
 r192: [250..251]
 r193: [243..244]
 r194: [503..504]
 r195: [499..500]
 r196: [496..498]
 r197: [440..495]
 r198: [491..492]
 r199: [488..490]
 r200: [486..487]
 r202: [472..473]
 r203: [469..471]
 r204: [469..470]
 r205: [466..468]
 r206: [466..467]
 r207: [463..465]
 r208: [460..462]
 r209: [453..459]
 r210: [455..456]
 r211: [453..454]
 r212: [451..452]
 r213: [449..450]
 r214: [447..448]
 r215: [440..441]
 r216: [436..437]
 r217: [434..435]
 r218: [431..433]
 r219: [373..430]
 r220: [426..427]
 r221: [424..425]
 r222: [421..423]
 r223: [419..420]
 r225: [405..406]
 r226: [402..404]
 r227: [402..403]
 r228: [399..401]
 r229: [399..400]
 r230: [396..398]
 r231: [393..395]
 r232: [386..392]
 r233: [388..389]
 r234: [386..387]
 r235: [384..385]
 r236: [382..383]
 r237: [380..381]
 r238: [373..374]
 r239: [14..15]
 r240: [8..13]
 r241: [4..5]
 r242: [791..792]
 r243: [787..788]
 r244: [645..646]
 r245: [642..644]
 r246: [584..641]
 r247: [637..638]
 r248: [634..636]
 r249: [632..633]
 r251: [618..619]
 r252: [615..617]
 r253: [615..616]
 r254: [612..614]
 r255: [612..613]
 r256: [609..611]
 r257: [606..608]
 r258: [597..605]
 r259: [601..602]
 r260: [599..600]
 r261: [597..598]
 r262: [595..596]
 r263: [593..594]
 r264: [591..592]
 r265: [584..585]
 r266: [580..581]
 r267: [578..579]
 r268: [575..577]
 r269: [515..574]
 r270: [570..571]
 r271: [568..569]
 r272: [565..567]
 r273: [563..564]
 r275: [549..550]
 r276: [546..548]
 r277: [546..547]
 r278: [543..545]
 r279: [543..544]
 r280: [540..542]
 r281: [537..539]
 r282: [528..536]
 r283: [532..533]
 r284: [530..531]
 r285: [528..529]
 r286: [526..527]
 r287: [524..525]
 r288: [522..523]
 r289: [515..516]
 r290: [783..784]
 r291: [779..780]
 r292: [776..778]
 r293: [718..775]
 r294: [771..772]
 r295: [768..770]
 r296: [766..767]
 r298: [752..753]
 r299: [749..751]
 r300: [749..750]
 r301: [746..748]
 r302: [746..747]
 r303: [743..745]
 r304: [740..742]
 r305: [731..739]
 r306: [735..736]
 r307: [733..734]
 r308: [731..732]
 r309: [729..730]
 r310: [727..728]
 r311: [725..726]
 r312: [718..719]
 r313: [714..715]
 r314: [712..713]
 r315: [709..711]
 r316: [649..708]
 r317: [704..705]
 r318: [702..703]
 r319: [699..701]
 r320: [697..698]
 r322: [683..684]
 r323: [680..682]
 r324: [680..681]
 r325: [677..679]
 r326: [677..678]
 r327: [674..676]
 r328: [671..673]
 r329: [662..670]
 r330: [666..667]
 r331: [664..665]
 r332: [662..663]
 r333: [660..661]
 r334: [658..659]
 r335: [656..657]
 r336: [649..650]
 r337: [2..3]
 r338: [0..1]
 r339: [241..242]
 r340: [239..240]
 r341: [237..238]
 r342: [234..235]
 r343: [229..230]
 r344: [227..228]
 r345: [225..226]
 r346: [216..217]
 r347: [214..215]
 r348: [206..207]
 r349: [209..212]
 r350: [204..205]
 r351: [200..201]
 r352: [196..197]
 r353: [187..188]
 r354: [183..184]
 r355: [181..182]
 r356: [174..175]
 r357: [170..171]
 r358: [168..169]
 r359: [157..158]
 r360: [154..155]
 r361: [147..148]
 r362: [145..146]
 r363: [143..144]
 r364: [134..135]
 r365: [129..130]
 r366: [120..121]
 r367: [118..119]
 r368: [114..115]
 r369: [108..109]
 r370: [99..100]
 r371: [95..96]
 r372: [93..94]
 r373: [86..87]
 r374: [82..83]
 r375: [80..81]
 r376: [77..78]
 r377: [66..67]
 r378: [63..64]
 r379: [56..57]
 r380: [54..55]
 r381: [52..53]
 r382: [43..44]
 r383: [38..39]
 r384: [28..29]
 r385: [25..26]
 r386: [22..23]
 r387: [513..514]
 r388: [509..510]
 r389: [371..372]
 r390: [366..367]
 r391: [363..364]
 r392: [358..359]
 r393: [348..352]
 r394: [348..349]
 r395: [346..347]
 r396: [344..345]
 r397: [333..334]
 r398: [330..331]
 r399: [327..328]
 r400: [308..309]
 r401: [301..302]
 r402: [298..299]
 r403: [291..292]
 r404: [281..285]
 r405: [281..282]
 r406: [279..280]
 r407: [277..278]
 r408: [266..267]
 r409: [263..264]
 r410: [260..261]
 r411: [505..506]
 r412: [501..502]
 r413: [496..497]
 r414: [493..494]
 r415: [488..489]
 r416: [478..482]
 r417: [478..479]
 r418: [476..477]
 r419: [474..475]
 r420: [463..464]
 r421: [460..461]
 r422: [457..458]
 r423: [438..439]
 r424: [431..432]
 r425: [428..429]
 r426: [421..422]
 r427: [411..415]
 r428: [411..412]
 r429: [409..410]
 r430: [407..408]
 r431: [396..397]
 r432: [393..394]
 r433: [390..391]
 r434: [20..21]
 r435: [16..17]
 r436: [11..12]
 r437: [8..9]
 r438: [793..794]
 r439: [789..790]
 r440: [647..648]
 r441: [642..643]
 r442: [639..640]
 r443: [634..635]
 r444: [624..628]
 r445: [624..625]
 r446: [622..623]
 r447: [620..621]
 r448: [609..610]
 r449: [606..607]
 r450: [603..604]
 r451: [582..583]
 r452: [575..576]
 r453: [572..573]
 r454: [565..566]
 r455: [555..559]
 r456: [555..556]
 r457: [553..554]
 r458: [551..552]
 r459: [540..541]
 r460: [537..538]
 r461: [534..535]
 r462: [785..786]
 r463: [781..782]
 r464: [776..777]
 r465: [773..774]
 r466: [768..769]
 r467: [758..762]
 r468: [758..759]
 r469: [756..757]
 r470: [754..755]
 r471: [743..744]
 r472: [740..741]
 r473: [737..738]
 r474: [716..717]
 r475: [709..710]
 r476: [706..707]
 r477: [699..700]
 r478: [689..693]
 r479: [689..690]
 r480: [687..688]
 r481: [685..686]
 r482: [674..675]
 r483: [671..672]
 r484: [668..669]
 r485: [6..7]
 r487: [231..232]
 r488: [218..220]
 r489: [208..210]
 r490: [149..150]
 r491: [123..124]
 r492: [58..59]
 r493: [32..33]
 r494: [354..355]
 r495: [350..351]
 r496: [312..316]
 r498: [287..288]
 r499: [283..284]
 r500: [245..249]
 r502: [484..485]
 r503: [480..481]
 r504: [442..446]
 r506: [417..418]
 r507: [413..414]
 r508: [375..379]
 r510: [630..631]
 r511: [626..627]
 r512: [586..590]
 r514: [561..562]
 r515: [557..558]
 r516: [517..521]
 r518: [764..765]
 r519: [760..761]
 r520: [720..724]
 r522: [695..696]
 r523: [691..692]
 r524: [651..655]
 r534: [652..653]
 r535: [721..722]
 r536: [518..519]
 r537: [587..588]
 r538: [376..377]
 r539: [443..444]
 r540: [246..247]
 r541: [313..314]
 r542: [248..286]
 r543: [315..353]
 r544: [378..416]
 r545: [445..483]
 r546: [520..560]
 r547: [589..629]
 r548: [654..694]
 r549: [723..763]
Compressing live ranges: from 795 to 682 - 85%
Ranges after the compression:
 r83: [198..211]
 r84: [206..209]
 r85: [200..201]
 r86: [196..199]
 r87: [190..191]
 r88: [182..183]
 r89: [178..179]
 r90: [174..175]
 r91: [172..173]
 r92: [170..171]
 r93: [168..169]
 r94: [166..167]
 r95: [160..161]
 r96: [158..159]
 r97: [156..157]
 r98: [154..155]
 r99: [148..149]
 r100: [146..147]
 r101: [144..145]
 r102: [142..143]
 r103: [140..141]
 r104: [114..139]
 r105: [136..137]
 r106: [132..135]
 r107: [126..127]
 r108: [124..125]
 r109: [122..123]
 r110: [120..121]
 r111: [118..119]
 r112: [116..117]
 r113: [114..115]
 r114: [112..113]
 r115: [108..109]
 r116: [104..105]
 r117: [100..101]
 r118: [98..99]
 r119: [94..95]
 r120: [92..93]
 r121: [90..91]
 r122: [88..89]
 r123: [86..87]
 r124: [80..81]
 r125: [78..79]
 r126: [76..77]
 r127: [74..75]
 r128: [26..69]
 r129: [66..67]
 r130: [64..65]
 r131: [62..63]
 r132: [60..61]
 r133: [58..59]
 r134: [32..57]
 r135: [54..55]
 r136: [50..53]
 r137: [44..45]
 r138: [42..43]
 r139: [40..41]
 r140: [38..39]
 r141: [36..37]
 r142: [34..35]
 r143: [32..33]
 r144: [30..31]
 r145: [26..27]
 r146: [20..23]
 r147: [16..17]
 r148: [442..443]
 r149: [438..439]
 r150: [322..323]
 r151: [320..321]
 r152: [274..319]
 r153: [316..317]
 r154: [314..315]
 r155: [312..313]
 r157: [300..301]
 r158: [298..299]
 r159: [298..299]
 r160: [296..297]
 r161: [296..297]
 r162: [294..295]
 r163: [292..293]
 r164: [286..291]
 r165: [288..289]
 r166: [286..287]
 r167: [284..285]
 r168: [282..283]
 r169: [280..281]
 r170: [274..275]
 r171: [270..271]
 r172: [268..269]
 r173: [266..267]
 r174: [218..265]
 r175: [262..263]
 r176: [260..261]
 r177: [258..259]
 r178: [256..257]
 r180: [244..245]
 r181: [242..243]
 r182: [242..243]
 r183: [240..241]
 r184: [240..241]
 r185: [238..239]
 r186: [236..237]
 r187: [230..235]
 r188: [232..233]
 r189: [230..231]
 r190: [228..229]
 r191: [226..227]
 r192: [224..225]
 r193: [218..219]
 r194: [434..435]
 r195: [430..431]
 r196: [428..429]
 r197: [382..427]
 r198: [424..425]
 r199: [422..423]
 r200: [420..421]
 r202: [408..409]
 r203: [406..407]
 r204: [406..407]
 r205: [404..405]
 r206: [404..405]
 r207: [402..403]
 r208: [400..401]
 r209: [394..399]
 r210: [396..397]
 r211: [394..395]
 r212: [392..393]
 r213: [390..391]
 r214: [388..389]
 r215: [382..383]
 r216: [378..379]
 r217: [376..377]
 r218: [374..375]
 r219: [326..373]
 r220: [370..371]
 r221: [368..369]
 r222: [366..367]
 r223: [364..365]
 r225: [352..353]
 r226: [350..351]
 r227: [350..351]
 r228: [348..349]
 r229: [348..349]
 r230: [346..347]
 r231: [344..345]
 r232: [338..343]
 r233: [340..341]
 r234: [338..339]
 r235: [336..337]
 r236: [334..335]
 r237: [332..333]
 r238: [326..327]
 r239: [12..13]
 r240: [8..11]
 r241: [4..5]
 r242: [678..679]
 r243: [674..675]
 r244: [554..555]
 r245: [552..553]
 r246: [504..551]
 r247: [548..549]
 r248: [546..547]
 r249: [544..545]
 r251: [532..533]
 r252: [530..531]
 r253: [530..531]
 r254: [528..529]
 r255: [528..529]
 r256: [526..527]
 r257: [524..525]
 r258: [516..523]
 r259: [520..521]
 r260: [518..519]
 r261: [516..517]
 r262: [514..515]
 r263: [512..513]
 r264: [510..511]
 r265: [504..505]
 r266: [500..501]
 r267: [498..499]
 r268: [496..497]
 r269: [446..495]
 r270: [492..493]
 r271: [490..491]
 r272: [488..489]
 r273: [486..487]
 r275: [474..475]
 r276: [472..473]
 r277: [472..473]
 r278: [470..471]
 r279: [470..471]
 r280: [468..469]
 r281: [466..467]
 r282: [458..465]
 r283: [462..463]
 r284: [460..461]
 r285: [458..459]
 r286: [456..457]
 r287: [454..455]
 r288: [452..453]
 r289: [446..447]
 r290: [670..671]
 r291: [666..667]
 r292: [664..665]
 r293: [616..663]
 r294: [660..661]
 r295: [658..659]
 r296: [656..657]
 r298: [644..645]
 r299: [642..643]
 r300: [642..643]
 r301: [640..641]
 r302: [640..641]
 r303: [638..639]
 r304: [636..637]
 r305: [628..635]
 r306: [632..633]
 r307: [630..631]
 r308: [628..629]
 r309: [626..627]
 r310: [624..625]
 r311: [622..623]
 r312: [616..617]
 r313: [612..613]
 r314: [610..611]
 r315: [608..609]
 r316: [558..607]
 r317: [604..605]
 r318: [602..603]
 r319: [600..601]
 r320: [598..599]
 r322: [586..587]
 r323: [584..585]
 r324: [584..585]
 r325: [582..583]
 r326: [582..583]
 r327: [580..581]
 r328: [578..579]
 r329: [570..577]
 r330: [574..575]
 r331: [572..573]
 r332: [570..571]
 r333: [568..569]
 r334: [566..567]
 r335: [564..565]
 r336: [558..559]
 r337: [2..3]
 r338: [0..1]
 r339: [216..217]
 r340: [214..215]
 r341: [212..213]
 r342: [210..211]
 r343: [206..207]
 r344: [204..205]
 r345: [202..203]
 r346: [194..195]
 r347: [192..193]
 r348: [186..187]
 r349: [188..191]
 r350: [184..185]
 r351: [180..181]
 r352: [176..177]
 r353: [168..169]
 r354: [164..165]
 r355: [162..163]
 r356: [156..157]
 r357: [152..153]
 r358: [150..151]
 r359: [140..141]
 r360: [138..139]
 r361: [132..133]
 r362: [130..131]
 r363: [128..129]
 r364: [120..121]
 r365: [116..117]
 r366: [108..109]
 r367: [106..107]
 r368: [102..103]
 r369: [96..97]
 r370: [88..89]
 r371: [84..85]
 r372: [82..83]
 r373: [76..77]
 r374: [72..73]
 r375: [70..71]
 r376: [68..69]
 r377: [58..59]
 r378: [56..57]
 r379: [50..51]
 r380: [48..49]
 r381: [46..47]
 r382: [38..39]
 r383: [34..35]
 r384: [24..25]
 r385: [22..23]
 r386: [20..21]
 r387: [444..445]
 r388: [440..441]
 r389: [324..325]
 r390: [320..321]
 r391: [318..319]
 r392: [314..315]
 r393: [306..309]
 r394: [306..307]
 r395: [304..305]
 r396: [302..303]
 r397: [294..295]
 r398: [292..293]
 r399: [290..291]
 r400: [272..273]
 r401: [266..267]
 r402: [264..265]
 r403: [258..259]
 r404: [250..253]
 r405: [250..251]
 r406: [248..249]
 r407: [246..247]
 r408: [238..239]
 r409: [236..237]
 r410: [234..235]
 r411: [436..437]
 r412: [432..433]
 r413: [428..429]
 r414: [426..427]
 r415: [422..423]
 r416: [414..417]
 r417: [414..415]
 r418: [412..413]
 r419: [410..411]
 r420: [402..403]
 r421: [400..401]
 r422: [398..399]
 r423: [380..381]
 r424: [374..375]
 r425: [372..373]
 r426: [366..367]
 r427: [358..361]
 r428: [358..359]
 r429: [356..357]
 r430: [354..355]
 r431: [346..347]
 r432: [344..345]
 r433: [342..343]
 r434: [18..19]
 r435: [14..15]
 r436: [10..11]
 r437: [8..9]
 r438: [680..681]
 r439: [676..677]
 r440: [556..557]
 r441: [552..553]
 r442: [550..551]
 r443: [546..547]
 r444: [538..541]
 r445: [538..539]
 r446: [536..537]
 r447: [534..535]
 r448: [526..527]
 r449: [524..525]
 r450: [522..523]
 r451: [502..503]
 r452: [496..497]
 r453: [494..495]
 r454: [488..489]
 r455: [480..483]
 r456: [480..481]
 r457: [478..479]
 r458: [476..477]
 r459: [468..469]
 r460: [466..467]
 r461: [464..465]
 r462: [672..673]
 r463: [668..669]
 r464: [664..665]
 r465: [662..663]
 r466: [658..659]
 r467: [650..653]
 r468: [650..651]
 r469: [648..649]
 r470: [646..647]
 r471: [638..639]
 r472: [636..637]
 r473: [634..635]
 r474: [614..615]
 r475: [608..609]
 r476: [606..607]
 r477: [600..601]
 r478: [592..595]
 r479: [592..593]
 r480: [590..591]
 r481: [588..589]
 r482: [580..581]
 r483: [578..579]
 r484: [576..577]
 r485: [6..7]
 r487: [208..209]
 r488: [196..197]
 r489: [188..189]
 r490: [134..135]
 r491: [110..111]
 r492: [52..53]
 r493: [28..29]
 r494: [310..311]
 r495: [308..309]
 r496: [276..279]
 r498: [254..255]
 r499: [252..253]
 r500: [220..223]
 r502: [418..419]
 r503: [416..417]
 r504: [384..387]
 r506: [362..363]
 r507: [360..361]
 r508: [328..331]
 r510: [542..543]
 r511: [540..541]
 r512: [506..509]
 r514: [484..485]
 r515: [482..483]
 r516: [448..451]
 r518: [654..655]
 r519: [652..653]
 r520: [618..621]
 r522: [596..597]
 r523: [594..595]
 r524: [560..563]
 r534: [560..561]
 r535: [618..619]
 r536: [448..449]
 r537: [506..507]
 r538: [328..329]
 r539: [384..385]
 r540: [220..221]
 r541: [276..277]
 r542: [222..253]
 r543: [278..309]
 r544: [330..361]
 r545: [386..417]
 r546: [450..483]
 r547: [508..541]
 r548: [562..595]
 r549: [620..653]

********** Assignment #2: **********

	 Assigning to 534 (cl=SSE_REGS, orig=321, freq=2, tfirst=534, tfreq=2)...
	   Assign 24 to optional reload r534 (freq=2)
	Hard reg 24 is preferable by r548 with profit 1
	 Assigning to 548 (cl=ALL_SSE_REGS, orig=321, freq=2, tfirst=534, tfreq=2)...
	 Assigning to 535 (cl=SSE_REGS, orig=297, freq=2, tfirst=535, tfreq=2)...
	   Assign 25 to optional reload r535 (freq=2)
	Hard reg 25 is preferable by r549 with profit 1
	 Assigning to 549 (cl=ALL_SSE_REGS, orig=297, freq=2, tfirst=535, tfreq=2)...
	 Assigning to 536 (cl=SSE_REGS, orig=274, freq=2, tfirst=536, tfreq=2)...
	   Assign 26 to optional reload r536 (freq=2)
	Hard reg 26 is preferable by r546 with profit 1
	 Assigning to 546 (cl=ALL_SSE_REGS, orig=274, freq=2, tfirst=536, tfreq=2)...
	 Assigning to 537 (cl=SSE_REGS, orig=250, freq=2, tfirst=537, tfreq=2)...
	   Assign 27 to optional reload r537 (freq=2)
	Hard reg 27 is preferable by r547 with profit 1
	 Assigning to 547 (cl=ALL_SSE_REGS, orig=250, freq=2, tfirst=537, tfreq=2)...
	 Assigning to 538 (cl=SSE_REGS, orig=224, freq=2, tfirst=538, tfreq=2)...
	   Assign 28 to optional reload r538 (freq=2)
	Hard reg 28 is preferable by r544 with profit 1
	 Assigning to 544 (cl=ALL_SSE_REGS, orig=224, freq=2, tfirst=538, tfreq=2)...
	 Assigning to 539 (cl=SSE_REGS, orig=201, freq=2, tfirst=539, tfreq=2)...
	   Assign 24 to optional reload r539 (freq=2)
	Hard reg 24 is preferable by r545 with profit 1
	 Assigning to 545 (cl=ALL_SSE_REGS, orig=201, freq=2, tfirst=539, tfreq=2)...
	 Assigning to 540 (cl=SSE_REGS, orig=179, freq=2, tfirst=540, tfreq=2)...
	   Assign 25 to optional reload r540 (freq=2)
	Hard reg 25 is preferable by r542 with profit 1
	 Assigning to 542 (cl=ALL_SSE_REGS, orig=179, freq=2, tfirst=540, tfreq=2)...
	 Assigning to 541 (cl=SSE_REGS, orig=156, freq=2, tfirst=541, tfreq=2)...
	   Assign 26 to optional reload r541 (freq=2)
	Hard reg 26 is preferable by r543 with profit 1
	 Assigning to 543 (cl=ALL_SSE_REGS, orig=156, freq=2, tfirst=541, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  636: r540:SF=r179:SF
      REG_DEAD r179:SF
   Insn after restoring regs:
  580: r179:SF=r498:SF
      REG_DEAD r498:SF
   Insn after restoring regs:
  637: r541:SF=r156:SF
      REG_DEAD r156:SF
   Insn after restoring regs:
  574: r156:SF=r494:SF
      REG_DEAD r494:SF
   Insn after restoring regs:
  634: r538:SF=r224:SF
      REG_DEAD r224:SF
   Insn after restoring regs:
  592: r224:SF=r506:SF
      REG_DEAD r506:SF
   Insn after restoring regs:
  635: r539:SF=r201:SF
      REG_DEAD r201:SF
   Insn after restoring regs:
  586: r201:SF=r502:SF
      REG_DEAD r502:SF
   Insn after restoring regs:
  632: r536:SF=r274:SF
      REG_DEAD r274:SF
   Insn after restoring regs:
  604: r274:SF=r514:SF
      REG_DEAD r514:SF
   Insn after restoring regs:
  633: r537:SF=r250:SF
      REG_DEAD r250:SF
   Insn after restoring regs:
  598: r250:SF=r510:SF
      REG_DEAD r510:SF
   Insn after restoring regs:
  630: r534:SF=r321:SF
      REG_DEAD r321:SF
   Insn after restoring regs:
  616: r321:SF=r522:SF
      REG_DEAD r522:SF
   Insn after restoring regs:
  631: r535:SF=r297:SF
      REG_DEAD r297:SF
   Insn after restoring regs:
  610: r297:SF=r518:SF
      REG_DEAD r518:SF
Keep optional reload reg 497
Keep optional reload reg 501
Keep optional reload reg 505
Keep optional reload reg 509
Keep optional reload reg 513
Keep optional reload reg 517
Keep optional reload reg 521
Keep optional reload reg 525
Remove optional reload reg 534
  Restoring original insn:
  521: r524:SF=r524:SF*r321:SF
      REG_DEAD r321:SF
  Deleting move 630
  630: r534:SF=r321:SF
      REG_DEAD r321:SF
deleting insn with uid = 630.
Remove optional reload reg 535
  Restoring original insn:
  483: r520:SF=r520:SF*r297:SF
      REG_DEAD r297:SF
  Deleting move 631
  631: r535:SF=r297:SF
      REG_DEAD r297:SF
deleting insn with uid = 631.
Remove optional reload reg 536
  Restoring original insn:
  438: r516:SF=r516:SF*r274:SF
      REG_DEAD r274:SF
  Deleting move 632
  632: r536:SF=r274:SF
      REG_DEAD r274:SF
deleting insn with uid = 632.
Remove optional reload reg 537
  Restoring original insn:
  400: r512:SF=r512:SF*r250:SF
      REG_DEAD r250:SF
  Deleting move 633
  633: r537:SF=r250:SF
      REG_DEAD r250:SF
deleting insn with uid = 633.
Remove optional reload reg 538
  Restoring original insn:
  325: r508:SF=r508:SF*r224:SF
      REG_DEAD r224:SF
  Deleting move 634
  634: r538:SF=r224:SF
      REG_DEAD r224:SF
deleting insn with uid = 634.
Remove optional reload reg 539
  Restoring original insn:
  288: r504:SF=r504:SF*r201:SF
      REG_DEAD r201:SF
  Deleting move 635
  635: r539:SF=r201:SF
      REG_DEAD r201:SF
deleting insn with uid = 635.
Remove optional reload reg 540
  Restoring original insn:
  244: r500:SF=r500:SF*r179:SF
      REG_DEAD r179:SF
  Deleting move 636
  636: r540:SF=r179:SF
      REG_DEAD r179:SF
deleting insn with uid = 636.
Remove optional reload reg 541
  Restoring original insn:
  207: r496:SF=r496:SF*r156:SF
      REG_DEAD r156:SF
  Deleting move 637
  637: r541:SF=r156:SF
      REG_DEAD r156:SF
deleting insn with uid = 637.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 521:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 483:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 438:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 400:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 325:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 244:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 207:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 28
   Insn 543: point = 0
   Insn 542: point = 0
   Insn 538: point = 1
   Insn 535: point = 3
  BB 27
   Insn 532: point = 4
   Insn 531: point = 4
   Insn 529: point = 5
   Insn 528: point = 7
  BB 20
   Insn 557: point = 8
   Insn 352: point = 8
  BB 19
   Insn 347: point = 8
   Insn 346: point = 8
   Insn 345: point = 9
  BB 18
   Insn 344: point = 11
   Insn 343: point = 11
   Insn 342: point = 12
   Insn 341: point = 13
   Insn 340: point = 15
   Insn 339: point = 17
  BB 17
   Insn 336: point = 18
   Insn 335: point = 18
   Insn 333: point = 19
   Insn 332: point = 21
  BB 10
   Insn 553: point = 22
   Insn 160: point = 22
  BB 9
   Insn 155: point = 22
   Insn 154: point = 22
   Insn 153: point = 23
  BB 8
   Insn 152: point = 25
   Insn 151: point = 25
   Insn 150: point = 26
   Insn 149: point = 27
   Insn 148: point = 29
  BB 7
   Insn 145: point = 30
   Insn 573: point = 31
   Insn 144: point = 33
   Insn 143: point = 35
   Insn 142: point = 37
   Insn 141: point = 39
   Insn 140: point = 40
   Insn 139: point = 42
   Insn 138: point = 44
   Insn 137: point = 45
   Insn 136: point = 47
   Insn 135: point = 49
   Insn 134: point = 51
   Insn 133: point = 53
   Insn 132: point = 55
   Insn 572: point = 57
   Insn 131: point = 59
   Insn 571: point = 59
   Insn 130: point = 60
   Insn 129: point = 62
   Insn 128: point = 64
   Insn 127: point = 65
   Insn 126: point = 67
   Insn 125: point = 68
   Insn 124: point = 70
   Insn 123: point = 72
   Insn 122: point = 73
   Insn 121: point = 73
   Insn 120: point = 74
   Insn 119: point = 76
   Insn 118: point = 78
   Insn 117: point = 79
   Insn 116: point = 81
   Insn 115: point = 82
   Insn 114: point = 83
   Insn 113: point = 85
   Insn 112: point = 87
   Insn 111: point = 88
   Insn 110: point = 90
   Insn 109: point = 92
   Insn 108: point = 94
   Insn 107: point = 95
   Insn 106: point = 96
   Insn 105: point = 98
   Insn 104: point = 100
   Insn 103: point = 101
   Insn 102: point = 103
   Insn 101: point = 105
   Insn 100: point = 107
   Insn 99: point = 109
  BB 6
   Insn 97: point = 110
   Insn 96: point = 110
   Insn 95: point = 111
   Insn 94: point = 113
   Insn 93: point = 115
  BB 5
   Insn 91: point = 116
   Insn 90: point = 116
   Insn 89: point = 117
   Insn 88: point = 119
  BB 4
   Insn 85: point = 120
   Insn 84: point = 121
   Insn 570: point = 122
   Insn 83: point = 124
   Insn 82: point = 126
   Insn 81: point = 128
   Insn 80: point = 130
   Insn 79: point = 131
   Insn 78: point = 133
   Insn 77: point = 135
   Insn 76: point = 136
   Insn 75: point = 138
   Insn 74: point = 140
   Insn 73: point = 142
   Insn 72: point = 144
   Insn 71: point = 146
   Insn 569: point = 148
   Insn 70: point = 150
   Insn 568: point = 150
   Insn 69: point = 151
   Insn 68: point = 153
   Insn 67: point = 155
   Insn 66: point = 156
   Insn 65: point = 158
   Insn 64: point = 159
   Insn 63: point = 161
   Insn 62: point = 163
   Insn 61: point = 164
   Insn 60: point = 164
   Insn 59: point = 165
   Insn 58: point = 167
   Insn 57: point = 169
   Insn 56: point = 170
   Insn 55: point = 171
   Insn 54: point = 173
   Insn 53: point = 175
   Insn 52: point = 176
   Insn 51: point = 178
   Insn 50: point = 180
   Insn 49: point = 182
   Insn 48: point = 183
   Insn 47: point = 184
   Insn 46: point = 186
   Insn 45: point = 188
   Insn 44: point = 189
   Insn 43: point = 191
   Insn 42: point = 193
   Insn 41: point = 195
   Insn 40: point = 197
  BB 3
   Insn 38: point = 198
   Insn 37: point = 198
   Insn 36: point = 199
   Insn 35: point = 201
  BB 2
   Insn 33: point = 202
   Insn 32: point = 202
   Insn 31: point = 203
   Insn 30: point = 205
   Insn 29: point = 206
   Insn 567: point = 207
   Insn 28: point = 209
   Insn 566: point = 210
   Insn 27: point = 212
   Insn 26: point = 213
   Insn 25: point = 215
   Insn 24: point = 216
   Insn 565: point = 217
   Insn 23: point = 219
   Insn 564: point = 220
   Insn 22: point = 222
   Insn 21: point = 224
   Insn 20: point = 226
   Insn 19: point = 228
   Insn 563: point = 230
   Insn 18: point = 232
   Insn 562: point = 232
   Insn 17: point = 233
   Insn 16: point = 235
   Insn 15: point = 236
   Insn 14: point = 238
   Insn 13: point = 239
   Insn 12: point = 240
   Insn 11: point = 241
   Insn 10: point = 242
   Insn 9: point = 243
   Insn 5: point = 243
   Insn 4: point = 243
   Insn 3: point = 243
   Insn 2: point = 243
  BB 16
   Insn 329: point = 243
  BB 13
   Insn 555: point = 243
   Insn 245: point = 243
   Insn 584: point = 244
   Insn 244: point = 246
   Insn 583: point = 247
   Insn 243: point = 249
   Insn 242: point = 251
   Insn 241: point = 252
   Insn 240: point = 252
   Insn 239: point = 253
   Insn 238: point = 255
   Insn 237: point = 257
   Insn 236: point = 259
   Insn 235: point = 260
   Insn 234: point = 262
   Insn 233: point = 263
   Insn 232: point = 265
   Insn 231: point = 266
   Insn 230: point = 268
   Insn 229: point = 269
   Insn 228: point = 271
   Insn 227: point = 272
   Insn 226: point = 274
   Insn 225: point = 276
   Insn 224: point = 278
   Insn 582: point = 280
   Insn 223: point = 282
   Insn 581: point = 282
   Insn 222: point = 283
   Insn 580: point = 284
   Insn 221: point = 286
   Insn 220: point = 288
   Insn 219: point = 290
   Insn 218: point = 291
   Insn 217: point = 293
   Insn 216: point = 295
   Insn 215: point = 297
   Insn 214: point = 298
   Insn 213: point = 300
   Insn 212: point = 301
   Insn 211: point = 303
   Insn 210: point = 305
   Insn 209: point = 307
   Insn 208: point = 308
   Insn 578: point = 309
   Insn 207: point = 311
   Insn 577: point = 312
   Insn 206: point = 314
   Insn 205: point = 316
   Insn 204: point = 317
   Insn 203: point = 317
   Insn 202: point = 318
   Insn 201: point = 320
   Insn 200: point = 322
   Insn 199: point = 324
   Insn 198: point = 325
   Insn 197: point = 327
   Insn 196: point = 328
   Insn 195: point = 330
   Insn 194: point = 331
   Insn 193: point = 333
   Insn 192: point = 334
   Insn 191: point = 336
   Insn 190: point = 337
   Insn 189: point = 339
   Insn 188: point = 341
   Insn 187: point = 343
   Insn 576: point = 345
   Insn 186: point = 347
   Insn 575: point = 347
   Insn 185: point = 348
   Insn 574: point = 349
   Insn 184: point = 351
   Insn 183: point = 353
   Insn 182: point = 355
   Insn 181: point = 356
   Insn 180: point = 358
   Insn 179: point = 360
   Insn 178: point = 361
   Insn 177: point = 363
   Insn 176: point = 364
   Insn 175: point = 366
   Insn 174: point = 368
  BB 15
   Insn 326: point = 369
   Insn 596: point = 370
   Insn 325: point = 372
   Insn 595: point = 373
   Insn 324: point = 375
   Insn 323: point = 377
   Insn 322: point = 378
   Insn 321: point = 378
   Insn 320: point = 379
   Insn 319: point = 381
   Insn 318: point = 383
   Insn 317: point = 385
   Insn 316: point = 386
   Insn 315: point = 388
   Insn 314: point = 389
   Insn 313: point = 391
   Insn 312: point = 392
   Insn 311: point = 394
   Insn 310: point = 395
   Insn 309: point = 397
   Insn 308: point = 398
   Insn 307: point = 400
   Insn 306: point = 402
   Insn 305: point = 404
   Insn 594: point = 406
   Insn 304: point = 408
   Insn 593: point = 408
   Insn 303: point = 409
   Insn 592: point = 410
   Insn 302: point = 412
   Insn 301: point = 414
   Insn 300: point = 416
   Insn 299: point = 417
   Insn 298: point = 419
   Insn 297: point = 421
   Insn 296: point = 423
   Insn 295: point = 424
   Insn 294: point = 426
   Insn 293: point = 427
   Insn 292: point = 429
   Insn 291: point = 431
   Insn 290: point = 433
   Insn 289: point = 434
   Insn 590: point = 435
   Insn 288: point = 437
   Insn 589: point = 438
   Insn 287: point = 440
   Insn 286: point = 442
   Insn 285: point = 443
   Insn 284: point = 443
   Insn 283: point = 444
   Insn 282: point = 446
   Insn 281: point = 448
   Insn 280: point = 450
   Insn 279: point = 451
   Insn 278: point = 453
   Insn 277: point = 454
   Insn 276: point = 456
   Insn 275: point = 457
   Insn 274: point = 459
   Insn 273: point = 460
   Insn 272: point = 462
   Insn 271: point = 463
   Insn 270: point = 465
   Insn 269: point = 467
   Insn 268: point = 469
   Insn 588: point = 471
   Insn 267: point = 473
   Insn 587: point = 473
   Insn 266: point = 474
   Insn 586: point = 475
   Insn 265: point = 477
   Insn 264: point = 479
   Insn 263: point = 481
   Insn 262: point = 482
   Insn 261: point = 484
   Insn 260: point = 486
   Insn 259: point = 487
   Insn 258: point = 489
   Insn 257: point = 490
   Insn 256: point = 492
   Insn 255: point = 494
  BB 14
   Insn 253: point = 495
   Insn 252: point = 495
   Insn 251: point = 496
   Insn 250: point = 498
  BB 12
   Insn 172: point = 499
   Insn 171: point = 499
   Insn 170: point = 500
   Insn 169: point = 502
  BB 11
   Insn 167: point = 503
   Insn 166: point = 503
   Insn 165: point = 504
   Insn 164: point = 506
  BB 26
   Insn 525: point = 507
  BB 23
   Insn 559: point = 507
   Insn 439: point = 507
   Insn 608: point = 508
   Insn 438: point = 510
   Insn 607: point = 511
   Insn 437: point = 513
   Insn 436: point = 515
   Insn 435: point = 516
   Insn 434: point = 516
   Insn 433: point = 517
   Insn 432: point = 519
   Insn 431: point = 521
   Insn 430: point = 523
   Insn 429: point = 525
   Insn 428: point = 526
   Insn 427: point = 528
   Insn 426: point = 529
   Insn 425: point = 531
   Insn 424: point = 532
   Insn 423: point = 534
   Insn 422: point = 535
   Insn 421: point = 537
   Insn 420: point = 538
   Insn 419: point = 540
   Insn 418: point = 542
   Insn 417: point = 544
   Insn 606: point = 546
   Insn 416: point = 548
   Insn 605: point = 548
   Insn 415: point = 549
   Insn 604: point = 550
   Insn 414: point = 552
   Insn 413: point = 554
   Insn 412: point = 556
   Insn 411: point = 557
   Insn 410: point = 559
   Insn 409: point = 561
   Insn 408: point = 563
   Insn 407: point = 564
   Insn 406: point = 566
   Insn 405: point = 567
   Insn 404: point = 569
   Insn 403: point = 571
   Insn 402: point = 573
   Insn 401: point = 574
   Insn 602: point = 575
   Insn 400: point = 577
   Insn 601: point = 578
   Insn 399: point = 580
   Insn 398: point = 582
   Insn 397: point = 583
   Insn 396: point = 583
   Insn 395: point = 584
   Insn 394: point = 586
   Insn 393: point = 588
   Insn 392: point = 590
   Insn 391: point = 592
   Insn 390: point = 593
   Insn 389: point = 595
   Insn 388: point = 596
   Insn 387: point = 598
   Insn 386: point = 599
   Insn 385: point = 601
   Insn 384: point = 602
   Insn 383: point = 604
   Insn 382: point = 605
   Insn 381: point = 607
   Insn 380: point = 609
   Insn 379: point = 611
   Insn 600: point = 613
   Insn 378: point = 615
   Insn 599: point = 615
   Insn 377: point = 616
   Insn 598: point = 617
   Insn 376: point = 619
   Insn 375: point = 621
   Insn 374: point = 623
   Insn 373: point = 624
   Insn 372: point = 626
   Insn 371: point = 628
   Insn 370: point = 629
   Insn 369: point = 631
   Insn 368: point = 632
   Insn 367: point = 634
   Insn 366: point = 636
  BB 25
   Insn 522: point = 637
   Insn 620: point = 638
   Insn 521: point = 640
   Insn 619: point = 641
   Insn 520: point = 643
   Insn 519: point = 645
   Insn 518: point = 646
   Insn 517: point = 646
   Insn 516: point = 647
   Insn 515: point = 649
   Insn 514: point = 651
   Insn 513: point = 653
   Insn 512: point = 655
   Insn 511: point = 656
   Insn 510: point = 658
   Insn 509: point = 659
   Insn 508: point = 661
   Insn 507: point = 662
   Insn 506: point = 664
   Insn 505: point = 665
   Insn 504: point = 667
   Insn 503: point = 668
   Insn 502: point = 670
   Insn 501: point = 672
   Insn 500: point = 674
   Insn 618: point = 676
   Insn 499: point = 678
   Insn 617: point = 678
   Insn 498: point = 679
   Insn 616: point = 680
   Insn 497: point = 682
   Insn 496: point = 684
   Insn 495: point = 686
   Insn 494: point = 687
   Insn 493: point = 689
   Insn 492: point = 691
   Insn 491: point = 693
   Insn 490: point = 694
   Insn 489: point = 696
   Insn 488: point = 697
   Insn 487: point = 699
   Insn 486: point = 701
   Insn 485: point = 703
   Insn 484: point = 704
   Insn 614: point = 705
   Insn 483: point = 707
   Insn 613: point = 708
   Insn 482: point = 710
   Insn 481: point = 712
   Insn 480: point = 713
   Insn 479: point = 713
   Insn 478: point = 714
   Insn 477: point = 716
   Insn 476: point = 718
   Insn 475: point = 720
   Insn 474: point = 722
   Insn 473: point = 723
   Insn 472: point = 725
   Insn 471: point = 726
   Insn 470: point = 728
   Insn 469: point = 729
   Insn 468: point = 731
   Insn 467: point = 732
   Insn 466: point = 734
   Insn 465: point = 735
   Insn 464: point = 737
   Insn 463: point = 739
   Insn 462: point = 741
   Insn 612: point = 743
   Insn 461: point = 745
   Insn 611: point = 745
   Insn 460: point = 746
   Insn 610: point = 747
   Insn 459: point = 749
   Insn 458: point = 751
   Insn 457: point = 753
   Insn 456: point = 754
   Insn 455: point = 756
   Insn 454: point = 758
   Insn 453: point = 759
   Insn 452: point = 761
   Insn 451: point = 762
   Insn 450: point = 764
   Insn 449: point = 766
  BB 24
   Insn 447: point = 767
   Insn 446: point = 767
   Insn 445: point = 768
   Insn 444: point = 770
  BB 22
   Insn 364: point = 771
   Insn 363: point = 771
   Insn 362: point = 772
   Insn 361: point = 774
  BB 21
   Insn 359: point = 775
   Insn 358: point = 775
   Insn 357: point = 776
   Insn 356: point = 778
 r156: [311..349]
 r179: [246..284]
 r201: [437..475]
 r224: [372..410]
 r250: [577..617]
 r274: [510..550]
 r297: [707..747]
 r321: [640..680]
Compressing live ranges: from 779 to 16 - 2%
Ranges after the compression:
 r156: [2..3]
 r179: [0..1]
 r201: [6..7]
 r224: [4..5]
 r250: [10..11]
 r274: [8..9]
 r297: [14..15]
 r321: [12..13]
  Slot 0 regnos (width = 4):	 156	 321	 297	 274	 250	 224	 201	 179
Changing spilled pseudos to memory in insn #574
Changing spilled pseudos to memory in insn #207
Changing spilled pseudos to memory in insn #580
Changing spilled pseudos to memory in insn #244
Changing spilled pseudos to memory in insn #586
Changing spilled pseudos to memory in insn #288
Changing spilled pseudos to memory in insn #592
Changing spilled pseudos to memory in insn #325
Changing spilled pseudos to memory in insn #598
Changing spilled pseudos to memory in insn #400
Changing spilled pseudos to memory in insn #604
Changing spilled pseudos to memory in insn #438
Changing spilled pseudos to memory in insn #610
Changing spilled pseudos to memory in insn #483
Changing spilled pseudos to memory in insn #616
Changing spilled pseudos to memory in insn #521
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #521
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #616
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 616:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #483
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #610
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 610:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #438
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #604
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 604:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #400
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #598
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 598:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #325
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #592
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 592:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #288
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #586
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 586:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #244
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #580
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 580:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #207
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 8 for insn #574
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 574:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=112, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 15
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 66
changing reg in insn 66
changing reg in insn 82
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 89
changing reg in insn 90
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 145
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 127
changing reg in insn 127
changing reg in insn 127
changing reg in insn 143
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 145
changing reg in insn 149
changing reg in insn 154
changing reg in insn 151
changing reg in insn 333
changing reg in insn 335
changing reg in insn 165
changing reg in insn 166
changing reg in insn 170
changing reg in insn 171
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 178
changing reg in insn 178
changing reg in insn 208
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 191
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 196
changing reg in insn 196
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 206
changing reg in insn 208
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 214
changing reg in insn 214
changing reg in insn 214
changing reg in insn 245
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 229
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 233
changing reg in insn 233
changing reg in insn 233
changing reg in insn 235
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 245
changing reg in insn 251
changing reg in insn 252
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 259
changing reg in insn 259
changing reg in insn 259
changing reg in insn 289
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 264
changing reg in insn 264
changing reg in insn 265
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 273
changing reg in insn 272
changing reg in insn 273
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 277
changing reg in insn 277
changing reg in insn 277
changing reg in insn 279
changing reg in insn 281
changing reg in insn 282
changing reg in insn 282
changing reg in insn 283
changing reg in insn 284
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 289
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 295
changing reg in insn 295
changing reg in insn 295
changing reg in insn 326
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 299
changing reg in insn 301
changing reg in insn 301
changing reg in insn 302
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 310
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 314
changing reg in insn 314
changing reg in insn 314
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 326
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 346
changing reg in insn 343
changing reg in insn 529
changing reg in insn 531
changing reg in insn 357
changing reg in insn 358
changing reg in insn 362
changing reg in insn 363
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 370
changing reg in insn 370
changing reg in insn 370
changing reg in insn 401
changing reg in insn 372
changing reg in insn 373
changing reg in insn 373
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 384
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 385
changing reg in insn 386
changing reg in insn 388
changing reg in insn 388
changing reg in insn 388
changing reg in insn 390
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 395
changing reg in insn 396
changing reg in insn 398
changing reg in insn 399
changing reg in insn 399
changing reg in insn 401
changing reg in insn 403
changing reg in insn 404
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 407
changing reg in insn 407
changing reg in insn 407
changing reg in insn 439
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 413
changing reg in insn 413
changing reg in insn 414
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 422
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 423
changing reg in insn 424
changing reg in insn 426
changing reg in insn 426
changing reg in insn 426
changing reg in insn 428
changing reg in insn 430
changing reg in insn 431
changing reg in insn 431
changing reg in insn 432
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 436
changing reg in insn 437
changing reg in insn 437
changing reg in insn 439
changing reg in insn 445
changing reg in insn 446
changing reg in insn 450
changing reg in insn 451
changing reg in insn 451
changing reg in insn 453
changing reg in insn 453
changing reg in insn 453
changing reg in insn 484
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 458
changing reg in insn 458
changing reg in insn 459
changing reg in insn 464
changing reg in insn 465
changing reg in insn 465
changing reg in insn 467
changing reg in insn 466
changing reg in insn 467
changing reg in insn 467
changing reg in insn 468
changing reg in insn 469
changing reg in insn 471
changing reg in insn 471
changing reg in insn 471
changing reg in insn 473
changing reg in insn 475
changing reg in insn 476
changing reg in insn 476
changing reg in insn 477
changing reg in insn 477
changing reg in insn 478
changing reg in insn 479
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 484
changing reg in insn 486
changing reg in insn 487
changing reg in insn 487
changing reg in insn 488
changing reg in insn 488
changing reg in insn 490
changing reg in insn 490
changing reg in insn 490
changing reg in insn 522
changing reg in insn 492
changing reg in insn 493
changing reg in insn 493
changing reg in insn 494
changing reg in insn 494
changing reg in insn 496
changing reg in insn 496
changing reg in insn 497
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 505
changing reg in insn 504
changing reg in insn 505
changing reg in insn 505
changing reg in insn 506
changing reg in insn 507
changing reg in insn 509
changing reg in insn 509
changing reg in insn 509
changing reg in insn 511
changing reg in insn 513
changing reg in insn 514
changing reg in insn 514
changing reg in insn 515
changing reg in insn 515
changing reg in insn 516
changing reg in insn 517
changing reg in insn 519
changing reg in insn 520
changing reg in insn 520
changing reg in insn 522
changing reg in insn 535
changing reg in insn 538
changing reg in insn 538
changing reg in insn 542
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 29
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 89
changing reg in insn 93
changing reg in insn 94
changing reg in insn 99
changing reg in insn 100
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 138
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 164
changing reg in insn 165
changing reg in insn 169
changing reg in insn 170
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 185
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 209
changing reg in insn 210
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 219
changing reg in insn 222
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 226
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 236
changing reg in insn 237
changing reg in insn 250
changing reg in insn 251
changing reg in insn 255
changing reg in insn 256
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 263
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 290
changing reg in insn 291
changing reg in insn 294
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 300
changing reg in insn 303
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 307
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 317
changing reg in insn 318
changing reg in insn 332
changing reg in insn 333
changing reg in insn 339
changing reg in insn 340
changing reg in insn 342
changing reg in insn 343
changing reg in insn 345
changing reg in insn 346
changing reg in insn 356
changing reg in insn 357
changing reg in insn 361
changing reg in insn 362
changing reg in insn 366
changing reg in insn 367
changing reg in insn 369
changing reg in insn 370
changing reg in insn 371
changing reg in insn 372
changing reg in insn 374
changing reg in insn 377
changing reg in insn 379
changing reg in insn 380
changing reg in insn 380
changing reg in insn 381
changing reg in insn 387
changing reg in insn 388
changing reg in insn 389
changing reg in insn 391
changing reg in insn 392
changing reg in insn 402
changing reg in insn 403
changing reg in insn 406
changing reg in insn 407
changing reg in insn 408
changing reg in insn 409
changing reg in insn 412
changing reg in insn 415
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 419
changing reg in insn 425
changing reg in insn 426
changing reg in insn 427
changing reg in insn 429
changing reg in insn 430
changing reg in insn 444
changing reg in insn 445
changing reg in insn 449
changing reg in insn 450
changing reg in insn 452
changing reg in insn 453
changing reg in insn 454
changing reg in insn 455
changing reg in insn 457
changing reg in insn 460
changing reg in insn 462
changing reg in insn 463
changing reg in insn 463
changing reg in insn 464
changing reg in insn 470
changing reg in insn 471
changing reg in insn 472
changing reg in insn 474
changing reg in insn 475
changing reg in insn 485
changing reg in insn 486
changing reg in insn 489
changing reg in insn 490
changing reg in insn 491
changing reg in insn 492
changing reg in insn 495
changing reg in insn 498
changing reg in insn 500
changing reg in insn 501
changing reg in insn 501
changing reg in insn 502
changing reg in insn 508
changing reg in insn 509
changing reg in insn 510
changing reg in insn 512
changing reg in insn 513
changing reg in insn 528
changing reg in insn 529
deleting insn with uid = 563.
deleting insn with uid = 564.
deleting insn with uid = 566.
deleting insn with uid = 60.
deleting insn with uid = 62.
deleting insn with uid = 569.
deleting insn with uid = 121.
deleting insn with uid = 123.
deleting insn with uid = 572.
deleting insn with uid = 576.
deleting insn with uid = 203.
deleting insn with uid = 205.
deleting insn with uid = 577.
deleting insn with uid = 582.
deleting insn with uid = 240.
deleting insn with uid = 242.
deleting insn with uid = 583.
deleting insn with uid = 588.
deleting insn with uid = 284.
deleting insn with uid = 286.
deleting insn with uid = 589.
deleting insn with uid = 594.
deleting insn with uid = 321.
deleting insn with uid = 323.
deleting insn with uid = 595.
deleting insn with uid = 600.
deleting insn with uid = 396.
deleting insn with uid = 398.
deleting insn with uid = 601.
deleting insn with uid = 606.
deleting insn with uid = 434.
deleting insn with uid = 436.
deleting insn with uid = 607.
deleting insn with uid = 612.
deleting insn with uid = 479.
deleting insn with uid = 481.
deleting insn with uid = 613.
deleting insn with uid = 618.
deleting insn with uid = 517.
deleting insn with uid = 519.
deleting insn with uid = 619.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 204.
verify found no changes in insn with uid = 241.
verify found no changes in insn with uid = 285.
verify found no changes in insn with uid = 322.
verify found no changes in insn with uid = 397.
verify found no changes in insn with uid = 435.
verify found no changes in insn with uid = 480.
verify found no changes in insn with uid = 518.


int filter(float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={210d,211u} r1={54d,44u,20e} r2={11d,1u} r3={9d,9u} r4={11d,1u} r5={11d,1u} r6={1d,168u} r7={1d,38u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={132d,16u} r18={10d} r19={10d} r20={1d,1u,27e} r21={102d,103u,10e} r22={72d,61u,2e} r23={15d,4u} r24={13d,2u} r25={13d,2u} r26={13d,2u} r27={13d,2u} r28={13d,2u} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={11d} r38={11d} r39={10d} r40={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} 
;;    total ref usage 1964{1237d,668u,59e} in 499{489 regular + 10 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 84 85 86 87 88 339 340 341 342 343 344 345 346 347 348 349 350
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) preproc.cpp:424 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) preproc.cpp:424 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:426 90 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SF 0 ax [339])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:428 129 {*movsf_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 0 ax [339])) preproc.cpp:428 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SF 0 ax [340])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:428 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 0 ax [340])) preproc.cpp:428 129 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [341])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) preproc.cpp:430 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SF 22 xmm1 [orig:83 D.6812 ] [83])
        (mem/j:SF (reg/f:DI 0 ax [341]) [0 procpar_info_6(D)->acquision_time+0 S4 A64])) preproc.cpp:430 129 {*movsf_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) preproc.cpp:430 89 {*movdi_internal}
     (nil))
(insn 17 16 562 2 (set (reg:SI 0 ax [orig:84 D.6813 ] [84])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [342])
                (const_int 300 [0x12c])) [0 procpar_info_6(D)->num_points+0 S4 A32])) preproc.cpp:430 90 {*movsi_internal}
     (nil))
(insn 562 17 18 2 (set (reg:SI 1 dx [343])
        (reg:SI 0 ax [orig:84 D.6813 ] [84])) preproc.cpp:430 90 {*movsi_internal}
     (nil))
(insn 18 562 19 2 (parallel [
            (set (reg:SI 1 dx [343])
                (lshiftrt:SI (reg:SI 1 dx [343])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:430 529 {*lshrsi3_1}
     (nil))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 0 ax [344])
                (plus:SI (reg:SI 0 ax [orig:84 D.6813 ] [84])
                    (reg:SI 1 dx [343])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:430 220 {*addsi_1}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg:SI 0 ax [345])
                (ashiftrt:SI (reg:SI 0 ax [344])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:430 530 {*ashrsi3_1}
     (nil))
(insn 21 20 22 2 (set (reg:SI 0 ax [orig:85 D.6813 ] [85])
        (reg:SI 0 ax [345])) preproc.cpp:430 90 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SF 21 xmm0 [orig:86 D.6812 ] [86])
        (float:SF (reg:SI 0 ax [orig:85 D.6813 ] [85]))) preproc.cpp:430 199 {*floatsisf2_sse}
     (nil))
(insn 23 22 565 2 (set (reg:SF 22 xmm1 [346])
        (div:SF (reg:SF 22 xmm1 [346])
            (reg:SF 21 xmm0 [orig:86 D.6812 ] [86]))) preproc.cpp:430 782 {*fop_sf_1_sse}
     (nil))
(insn 565 23 24 2 (set (reg:SF 0 ax [346])
        (reg:SF 22 xmm1 [346])) preproc.cpp:430 129 {*movsf_internal}
     (nil))
(insn 24 565 25 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32])
        (reg:SF 0 ax [346])) preproc.cpp:430 129 {*movsf_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:431 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:SF 21 xmm0 [orig:87 D.6812 ] [87])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [347])
                (const_int 48 [0x30])) [0 preprocess_12(D)->pre_delay_time+0 S4 A32])) preproc.cpp:431 129 {*movsf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:SF 22 xmm1 [349])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S4 A32])) preproc.cpp:431 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+6 [0x0.f424p+20])
        (nil)))
(insn 28 27 567 2 (set (reg:SF 21 xmm0 [348])
        (div:SF (reg:SF 21 xmm0 [348])
            (reg:SF 22 xmm1 [349]))) preproc.cpp:431 782 {*fop_sf_1_sse}
     (nil))
(insn 567 28 29 2 (set (reg:SF 0 ax [348])
        (reg:SF 21 xmm0 [348])) preproc.cpp:431 129 {*movsf_internal}
     (nil))
(insn 29 567 30 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32])
        (reg:SF 0 ax [348])) preproc.cpp:431 129 {*movsf_internal}
     (nil))
(insn 30 29 31 2 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:437 89 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 0 ax [orig:88 D.6813 ] [88])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [350])
                (const_int 40 [0x28])) [0 preprocess_12(D)->pre_quecc+0 S4 A32])) preproc.cpp:437 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:88 D.6813 ] [88])
            (const_int 0 [0]))) preproc.cpp:437 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 33 32 34 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) preproc.cpp:437 596 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 351
(note 34 33 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:437 89 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:SI 0 ax [orig:89 D.6813 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [351])
                (const_int 52 [0x34])) [0 preprocess_12(D)->pre_quecc_if+0 S4 A32])) preproc.cpp:437 90 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 D.6813 ] [89])
            (const_int 1 [0x1]))) preproc.cpp:437 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 39 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) preproc.cpp:437 596 {*jcc_1}
     (nil)
 -> 86)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg/f:DI 0 ax [352])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:438 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:SI 0 ax [orig:90 D.6813 ] [90])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [352])
                (const_int 44 [0x2c])) [0 preprocess_12(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:438 90 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 0 ax [orig:91 D.6814 ] [91])
        (sign_extend:DI (reg:SI 0 ax [orig:90 D.6813 ] [90]))) preproc.cpp:438 142 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 4 (parallel [
            (set (reg:DI 0 ax [orig:92 D.6814 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.6814 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:438 497 {*ashldi3_1}
     (nil))
(insn 44 43 45 4 (parallel [
            (set (reg:DI 1 dx [orig:93 D.6815 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 D.6814 ] [92])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:438 221 {*adddi_1}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:438 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.6816 ] [94])
                (plus:DI (reg/f:DI 0 ax [353])
                    (reg:DI 1 dx [orig:93 D.6815 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:438 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.6815 ] [93]))
        (nil)))
(insn 47 46 48 4 (set (reg:SF 0 ax [354])
        (mem:SF (reg/f:DI 0 ax [orig:94 D.6816 ] [94]) [0 *_22+0 S4 A32])) preproc.cpp:438 129 {*movsf_internal}
     (nil))
(insn 48 47 49 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 0 ax [354])) preproc.cpp:438 129 {*movsf_internal}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [355])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:439 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:SI 0 ax [orig:95 D.6813 ] [95])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [355])
                (const_int 44 [0x2c])) [0 preprocess_12(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:439 90 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 0 ax [orig:96 D.6814 ] [96])
        (sign_extend:DI (reg:SI 0 ax [orig:95 D.6813 ] [95]))) preproc.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 4 (parallel [
            (set (reg:DI 1 dx [orig:97 D.6814 ] [97])
                (ashift:DI (reg:DI 0 ax [orig:96 D.6814 ] [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:439 497 {*ashldi3_1}
     (nil))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [356])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:439 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.6816 ] [98])
                (plus:DI (reg/f:DI 0 ax [356])
                    (reg:DI 1 dx [orig:97 D.6814 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:439 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.6814 ] [97]))
        (nil)))
(insn 55 54 56 4 (set (reg:SF 0 ax [357])
        (mem:SF (reg/f:DI 0 ax [orig:98 D.6816 ] [98]) [0 *_27+0 S4 A32])) preproc.cpp:439 129 {*movsf_internal}
     (nil))
(insn 56 55 57 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 0 ax [357])) preproc.cpp:439 129 {*movsf_internal}
     (nil))
(insn 57 56 58 4 (set (reg:SF 21 xmm0 [358])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])) preproc.cpp:441 129 {*movsf_internal}
     (nil))
(insn 58 57 59 4 (set (reg:SF 21 xmm0 [orig:99 D.6812 ] [99])
        (div:SF (reg:SF 21 xmm0 [358])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32]))) preproc.cpp:441 782 {*fop_sf_1_sse}
     (nil))
(insn 59 58 61 4 (set (reg:DF 21 xmm0 [orig:100 D.6817 ] [100])
        (float_extend:DF (reg:SF 21 xmm0 [orig:99 D.6812 ] [99]))) preproc.cpp:441 152 {*extendsfdf2_sse}
     (nil))
(call_insn 61 59 63 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x2b57192b9d00 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) preproc.cpp:441 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 63 61 64 4 (set (reg:SF 21 xmm0 [orig:102 D.6812 ] [102])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:101 D.6817 ] [101]))) preproc.cpp:441 157 {*truncdfsf_fast_sse}
     (nil))
(insn 64 63 65 4 (set (reg:DF 21 xmm0 [orig:103 D.6817 ] [103])
        (float_extend:DF (reg:SF 21 xmm0 [orig:102 D.6812 ] [102]))) preproc.cpp:441 152 {*extendsfdf2_sse}
     (nil))
(insn 65 64 66 4 (set (reg:V2DF 22 xmm1 [359])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) preproc.cpp:441 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 66 65 67 4 (parallel [
            (set (reg:DF 21 xmm0 [orig:104 D.6817 ] [104])
                (neg:DF (reg:DF 21 xmm0 [orig:103 D.6817 ] [103])))
            (use (reg:V2DF 22 xmm1 [359]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:441 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 21 xmm0 [orig:103 D.6817 ] [103]))
        (nil)))
(insn 67 66 68 4 (set (reg/f:DI 0 ax [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:442 89 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:SI 0 ax [orig:105 D.6813 ] [105])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [360])
                (const_int 44 [0x2c])) [0 preprocess_12(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:442 90 {*movsi_internal}
     (nil))
(insn 69 68 568 4 (parallel [
            (set (reg:SI 0 ax [orig:106 D.6813 ] [106])
                (plus:SI (reg:SI 0 ax [orig:105 D.6813 ] [105])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 220 {*addsi_1}
     (nil))
(insn 568 69 70 4 (set (reg:SI 1 dx [361])
        (reg:SI 0 ax [orig:106 D.6813 ] [106])) preproc.cpp:442 90 {*movsi_internal}
     (nil))
(insn 70 568 71 4 (parallel [
            (set (reg:SI 1 dx [361])
                (lshiftrt:SI (reg:SI 1 dx [361])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 529 {*lshrsi3_1}
     (nil))
(insn 71 70 72 4 (parallel [
            (set (reg:SI 0 ax [362])
                (plus:SI (reg:SI 0 ax [orig:106 D.6813 ] [106])
                    (reg:SI 1 dx [361])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 220 {*addsi_1}
     (nil))
(insn 72 71 73 4 (parallel [
            (set (reg:SI 0 ax [363])
                (ashiftrt:SI (reg:SI 0 ax [362])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 530 {*ashrsi3_1}
     (nil))
(insn 73 72 74 4 (set (reg:SI 0 ax [orig:107 D.6813 ] [107])
        (reg:SI 0 ax [363])) preproc.cpp:442 90 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SF 22 xmm1 [orig:108 D.6812 ] [108])
        (float:SF (reg:SI 0 ax [orig:107 D.6813 ] [107]))) preproc.cpp:442 199 {*floatsisf2_sse}
     (nil))
(insn 75 74 76 4 (set (reg:SF 22 xmm1 [orig:109 D.6812 ] [109])
        (mult:SF (reg:SF 22 xmm1 [orig:108 D.6812 ] [108])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:442 775 {*fop_sf_comm_sse}
     (nil))
(insn 76 75 77 4 (set (reg:SF 22 xmm1 [orig:110 D.6812 ] [110])
        (plus:SF (reg:SF 22 xmm1 [orig:109 D.6812 ] [109])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:442 775 {*fop_sf_comm_sse}
     (nil))
(insn 77 76 78 4 (set (reg:V4SF 23 xmm2 [364])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:442 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 78 77 79 4 (parallel [
            (set (reg:SF 22 xmm1 [orig:111 D.6812 ] [111])
                (abs:SF (reg:SF 22 xmm1 [orig:110 D.6812 ] [110])))
            (use (reg:V4SF 23 xmm2 [364]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:442 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:110 D.6812 ] [110]))
        (nil)))
(insn 79 78 80 4 (set (reg:DF 22 xmm1 [orig:112 D.6817 ] [112])
        (float_extend:DF (reg:SF 22 xmm1 [orig:111 D.6812 ] [111]))) preproc.cpp:442 152 {*extendsfdf2_sse}
     (nil))
(insn 80 79 81 4 (set (reg:DF 23 xmm2 [365])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S8 A64])) preproc.cpp:442 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 81 80 82 4 (set (reg:DF 22 xmm1 [orig:113 D.6817 ] [113])
        (mult:DF (reg:DF 22 xmm1 [orig:112 D.6817 ] [112])
            (reg:DF 23 xmm2 [365]))) preproc.cpp:442 776 {*fop_df_comm_sse}
     (nil))
(insn 82 81 83 4 (set (reg:DF 21 xmm0 [orig:114 D.6817 ] [114])
        (div:DF (reg:DF 21 xmm0 [orig:104 D.6817 ] [104])
            (reg:DF 22 xmm1 [orig:113 D.6817 ] [113]))) preproc.cpp:441 783 {*fop_df_1_sse}
     (nil))
(insn 83 82 570 4 (set (reg:SF 24 xmm3 [orig:115 D.6812 ] [115])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:114 D.6817 ] [114]))) preproc.cpp:442 157 {*truncdfsf_fast_sse}
     (nil))
(insn 570 83 84 4 (set (reg:SF 0 ax [orig:115 D.6812 ] [115])
        (reg:SF 24 xmm3 [orig:115 D.6812 ] [115])) preproc.cpp:442 129 {*movsf_internal}
     (nil))
(insn 84 570 85 4 (set (reg/f:DI 1 dx [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:442 89 {*movdi_internal}
     (nil))
(insn 85 84 86 4 (set (mem/j:SF (plus:DI (reg/f:DI 1 dx [366])
                (const_int 28 [0x1c])) [0 preprocess_12(D)->comp_filter+0 S4 A32])
        (reg:SF 0 ax [orig:115 D.6812 ] [115])) preproc.cpp:442 129 {*movsf_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 367
(code_label 86 85 87 5 77 "" [2 uses])
(note 87 86 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 5 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:445 89 {*movdi_internal}
     (nil))
(insn 89 88 90 5 (set (reg:SI 0 ax [orig:116 D.6813 ] [116])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [367])
                (const_int 40 [0x28])) [0 preprocess_12(D)->pre_quecc+0 S4 A32])) preproc.cpp:445 90 {*movsi_internal}
     (nil))
(insn 90 89 91 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:116 D.6813 ] [116])
            (const_int 0 [0]))) preproc.cpp:445 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 91 90 92 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) preproc.cpp:445 596 {*jcc_1}
     (nil)
 -> 146)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 117 118 368
(note 92 91 93 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 6 (set (reg/f:DI 0 ax [368])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:445 89 {*movdi_internal}
     (nil))
(insn 94 93 95 6 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6818 ] [117])
                (plus:DI (reg/f:DI 0 ax [368])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:445 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 95 94 96 6 (set (reg:SI 0 ax [orig:118 D.6813 ] [118])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:117 D.6818 ] [117])
                (const_int 52 [0x34])) [0 _47->pre_quecc_if+0 S4 A32])) preproc.cpp:445 90 {*movsi_internal}
     (nil))
(insn 96 95 97 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:118 D.6813 ] [118])
            (const_int 1 [0x1]))) preproc.cpp:445 7 {*cmpsi_1}
     (nil))
(jump_insn 97 96 98 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) preproc.cpp:445 596 {*jcc_1}
     (nil)
 -> 146)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383
(note 98 97 99 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 7 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:446 89 {*movdi_internal}
     (nil))
(insn 100 99 101 7 (set (reg:SI 0 ax [orig:119 D.6813 ] [119])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [369])
                (const_int 44 [0x2c])) [0 preprocess_12(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:446 90 {*movsi_internal}
     (nil))
(insn 101 100 102 7 (set (reg:DI 0 ax [orig:120 D.6814 ] [120])
        (sign_extend:DI (reg:SI 0 ax [orig:119 D.6813 ] [119]))) preproc.cpp:446 142 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 7 (parallel [
            (set (reg:DI 0 ax [orig:121 D.6814 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.6814 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:446 497 {*ashldi3_1}
     (nil))
(insn 103 102 104 7 (parallel [
            (set (reg:DI 1 dx [orig:122 D.6815 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 D.6814 ] [121])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:446 221 {*adddi_1}
     (nil))
(insn 104 103 105 7 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:446 89 {*movdi_internal}
     (nil))
(insn 105 104 106 7 (parallel [
            (set (reg/f:DI 0 ax [orig:123 D.6816 ] [123])
                (plus:DI (reg/f:DI 0 ax [370])
                    (reg:DI 1 dx [orig:122 D.6815 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:446 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:122 D.6815 ] [122]))
        (nil)))
(insn 106 105 107 7 (set (reg:SF 0 ax [371])
        (mem:SF (reg/f:DI 0 ax [orig:123 D.6816 ] [123]) [0 *_53+0 S4 A32])) preproc.cpp:446 129 {*movsf_internal}
     (nil))
(insn 107 106 108 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32])
        (reg:SF 0 ax [371])) preproc.cpp:446 129 {*movsf_internal}
     (nil))
(insn 108 107 109 7 (set (reg/f:DI 0 ax [372])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:447 89 {*movdi_internal}
     (nil))
(insn 109 108 110 7 (set (reg:SI 0 ax [orig:124 D.6813 ] [124])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [372])
                (const_int 44 [0x2c])) [0 preprocess_12(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:447 90 {*movsi_internal}
     (nil))
(insn 110 109 111 7 (set (reg:DI 0 ax [orig:125 D.6814 ] [125])
        (sign_extend:DI (reg:SI 0 ax [orig:124 D.6813 ] [124]))) preproc.cpp:447 142 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 7 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6814 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.6814 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:447 497 {*ashldi3_1}
     (nil))
(insn 112 111 113 7 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:447 89 {*movdi_internal}
     (nil))
(insn 113 112 114 7 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.6816 ] [127])
                (plus:DI (reg/f:DI 0 ax [373])
                    (reg:DI 1 dx [orig:126 D.6814 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:447 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6814 ] [126]))
        (nil)))
(insn 114 113 115 7 (set (reg:SF 0 ax [374])
        (mem:SF (reg/f:DI 0 ax [orig:127 D.6816 ] [127]) [0 *_58+0 S4 A32])) preproc.cpp:447 129 {*movsf_internal}
     (nil))
(insn 115 114 116 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])
        (reg:SF 0 ax [374])) preproc.cpp:447 129 {*movsf_internal}
     (nil))
(insn 116 115 117 7 (set (reg/f:DI 0 ax [375])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:449 89 {*movdi_internal}
     (nil))
(insn 117 116 118 7 (parallel [
            (set (reg/f:DI 3 bx [orig:128 D.6818 ] [128])
                (plus:DI (reg/f:DI 0 ax [375])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:449 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 118 117 119 7 (set (reg:SF 21 xmm0 [376])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 first_point_ecc_unsup+0 S4 A32])) preproc.cpp:449 129 {*movsf_internal}
     (nil))
(insn 119 118 120 7 (set (reg:SF 21 xmm0 [orig:129 D.6812 ] [129])
        (div:SF (reg:SF 21 xmm0 [376])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 last_point_quality_unsup+0 S4 A32]))) preproc.cpp:449 782 {*fop_sf_1_sse}
     (nil))
(insn 120 119 122 7 (set (reg:DF 21 xmm0 [orig:130 D.6817 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.6812 ] [129]))) preproc.cpp:449 152 {*extendsfdf2_sse}
     (nil))
(call_insn 122 120 124 7 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x2b57192b9d00 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) preproc.cpp:449 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 124 122 125 7 (set (reg:SF 21 xmm0 [orig:132 D.6812 ] [132])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:131 D.6817 ] [131]))) preproc.cpp:449 157 {*truncdfsf_fast_sse}
     (nil))
(insn 125 124 126 7 (set (reg:DF 21 xmm0 [orig:133 D.6817 ] [133])
        (float_extend:DF (reg:SF 21 xmm0 [orig:132 D.6812 ] [132]))) preproc.cpp:449 152 {*extendsfdf2_sse}
     (nil))
(insn 126 125 127 7 (set (reg:V2DF 22 xmm1 [377])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC12") [flags 0x2]) [0  S16 A128])) preproc.cpp:449 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 127 126 128 7 (parallel [
            (set (reg:DF 21 xmm0 [orig:134 D.6817 ] [134])
                (neg:DF (reg:DF 21 xmm0 [orig:133 D.6817 ] [133])))
            (use (reg:V2DF 22 xmm1 [377]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:449 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 21 xmm0 [orig:133 D.6817 ] [133]))
        (nil)))
(insn 128 127 129 7 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:450 89 {*movdi_internal}
     (nil))
(insn 129 128 130 7 (set (reg:SI 0 ax [orig:135 D.6813 ] [135])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [378])
                (const_int 44 [0x2c])) [0 preprocess_12(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 130 129 571 7 (parallel [
            (set (reg:SI 0 ax [orig:136 D.6813 ] [136])
                (plus:SI (reg:SI 0 ax [orig:135 D.6813 ] [135])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 220 {*addsi_1}
     (nil))
(insn 571 130 131 7 (set (reg:SI 1 dx [379])
        (reg:SI 0 ax [orig:136 D.6813 ] [136])) preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 131 571 132 7 (parallel [
            (set (reg:SI 1 dx [379])
                (lshiftrt:SI (reg:SI 1 dx [379])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 529 {*lshrsi3_1}
     (nil))
(insn 132 131 133 7 (parallel [
            (set (reg:SI 0 ax [380])
                (plus:SI (reg:SI 0 ax [orig:136 D.6813 ] [136])
                    (reg:SI 1 dx [379])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 220 {*addsi_1}
     (nil))
(insn 133 132 134 7 (parallel [
            (set (reg:SI 0 ax [381])
                (ashiftrt:SI (reg:SI 0 ax [380])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 530 {*ashrsi3_1}
     (nil))
(insn 134 133 135 7 (set (reg:SI 0 ax [orig:137 D.6813 ] [137])
        (reg:SI 0 ax [381])) preproc.cpp:450 90 {*movsi_internal}
     (nil))
(insn 135 134 136 7 (set (reg:SF 22 xmm1 [orig:138 D.6812 ] [138])
        (float:SF (reg:SI 0 ax [orig:137 D.6813 ] [137]))) preproc.cpp:450 199 {*floatsisf2_sse}
     (nil))
(insn 136 135 137 7 (set (reg:SF 22 xmm1 [orig:139 D.6812 ] [139])
        (mult:SF (reg:SF 22 xmm1 [orig:138 D.6812 ] [138])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:450 775 {*fop_sf_comm_sse}
     (nil))
(insn 137 136 138 7 (set (reg:SF 22 xmm1 [orig:140 D.6812 ] [140])
        (plus:SF (reg:SF 22 xmm1 [orig:139 D.6812 ] [139])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:450 775 {*fop_sf_comm_sse}
     (nil))
(insn 138 137 139 7 (set (reg:V4SF 23 xmm2 [382])
        (mem/u/c:V4SF (symbol_ref/u:DI ("*.LC5") [flags 0x2]) [0  S16 A128])) preproc.cpp:450 1151 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 139 138 140 7 (parallel [
            (set (reg:SF 22 xmm1 [orig:141 D.6812 ] [141])
                (abs:SF (reg:SF 22 xmm1 [orig:140 D.6812 ] [140])))
            (use (reg:V4SF 23 xmm2 [382]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:450 454 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:140 D.6812 ] [140]))
        (nil)))
(insn 140 139 141 7 (set (reg:DF 22 xmm1 [orig:142 D.6817 ] [142])
        (float_extend:DF (reg:SF 22 xmm1 [orig:141 D.6812 ] [141]))) preproc.cpp:450 152 {*extendsfdf2_sse}
     (nil))
(insn 141 140 142 7 (set (reg:DF 23 xmm2 [383])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S8 A64])) preproc.cpp:450 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 142 141 143 7 (set (reg:DF 22 xmm1 [orig:143 D.6817 ] [143])
        (mult:DF (reg:DF 22 xmm1 [orig:142 D.6817 ] [142])
            (reg:DF 23 xmm2 [383]))) preproc.cpp:450 776 {*fop_df_comm_sse}
     (nil))
(insn 143 142 144 7 (set (reg:DF 21 xmm0 [orig:144 D.6817 ] [144])
        (div:DF (reg:DF 21 xmm0 [orig:134 D.6817 ] [134])
            (reg:DF 22 xmm1 [orig:143 D.6817 ] [143]))) preproc.cpp:449 783 {*fop_df_1_sse}
     (nil))
(insn 144 143 573 7 (set (reg:SF 25 xmm4 [orig:145 D.6812 ] [145])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:144 D.6817 ] [144]))) preproc.cpp:450 157 {*truncdfsf_fast_sse}
     (nil))
(insn 573 144 145 7 (set (reg:SF 0 ax [orig:145 D.6812 ] [145])
        (reg:SF 25 xmm4 [orig:145 D.6812 ] [145])) preproc.cpp:450 129 {*movsf_internal}
     (nil))
(insn 145 573 146 7 (set (mem/j:SF (plus:DI (reg/f:DI 3 bx [orig:128 D.6818 ] [128])
                (const_int 28 [0x1c])) [0 _60->comp_filter+0 S4 A32])
        (reg:SF 0 ax [orig:145 D.6812 ] [145])) preproc.cpp:450 129 {*movsf_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 384 385
(code_label 146 145 147 8 78 "" [2 uses])
(note 147 146 148 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 8 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:455 89 {*movdi_internal}
     (nil))
(insn 149 148 150 8 (set (reg:SF 21 xmm0 [orig:146 D.6812 ] [146])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [384])
                (const_int 28 [0x1c])) [0 preprocess_12(D)->comp_filter+0 S4 A32])) preproc.cpp:455 129 {*movsf_internal}
     (nil))
(insn 150 149 151 8 (set (reg:SF 22 xmm1 [385])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:455 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 151 150 152 8 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:146 D.6812 ] [146])
            (reg:SF 22 xmm1 [385]))) preproc.cpp:455 55 {*cmpiusf_sse}
     (nil))
(jump_insn 152 151 545 8 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 551)
            (pc))) preproc.cpp:455 596 {*jcc_1}
     (nil)
 -> 551)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 146

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 146
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 146
;; lr  def 	 17 [flags] 386
(note 545 152 153 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 153 545 154 9 (set (reg:SF 22 xmm1 [386])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:455 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 154 153 155 9 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:146 D.6812 ] [146])
            (reg:SF 22 xmm1 [386]))) preproc.cpp:455 55 {*cmpiusf_sse}
     (nil))
(jump_insn 155 154 551 9 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 337)
            (pc))) preproc.cpp:455 596 {*jcc_1}
     (nil)
 -> 337)
;;  succ:       10 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 551 155 159 10 92 "" [1 uses])
(note 159 551 160 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 553 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:457 90 {*movsi_internal}
     (nil))
(jump_insn 553 160 554 10 (set (pc)
        (label_ref 330)) preproc.cpp:457 636 {jump}
     (nil)
 -> 330)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 554 553 334)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 387
(code_label 334 554 163 11 84 "" [1 uses])
(note 163 334 164 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 164 163 165 11 (set (reg/f:DI 0 ax [387])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:458 89 {*movdi_internal}
     (nil))
(insn 165 164 166 11 (set (reg:SI 0 ax [orig:148 D.6813 ] [148])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [387])
                (const_int 40 [0x28])) [0 preprocess_12(D)->pre_quecc+0 S4 A32])) preproc.cpp:458 90 {*movsi_internal}
     (nil))
(insn 166 165 167 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:148 D.6813 ] [148])
            (const_int 0 [0]))) preproc.cpp:458 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 167 166 168 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) preproc.cpp:458 596 {*jcc_1}
     (nil)
 -> 248)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 388
(note 168 167 169 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 12 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:458 89 {*movdi_internal}
     (nil))
(insn 170 169 171 12 (set (reg:SI 0 ax [orig:149 D.6813 ] [149])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [388])
                (const_int 44 [0x2c])) [0 preprocess_12(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:458 90 {*movsi_internal}
     (nil))
(insn 171 170 172 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:149 D.6813 ] [149])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) preproc.cpp:458 7 {*cmpsi_1}
     (nil))
(jump_insn 172 171 173 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) preproc.cpp:458 596 {*jcc_1}
     (nil)
 -> 248)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410
(note 173 172 174 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 13 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 175 174 176 13 (set (reg:DI 0 ax [orig:150 D.6814 ] [150])
        (sign_extend:DI (reg:SI 0 ax [389]))) preproc.cpp:459 142 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 13 (parallel [
            (set (reg:DI 1 dx [orig:151 D.6814 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.6814 ] [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 497 {*ashldi3_1}
     (nil))
(insn 177 176 178 13 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 178 177 179 13 (parallel [
            (set (reg/f:DI 3 bx [orig:152 D.6816 ] [152])
                (plus:DI (reg:DI 1 dx [orig:151 D.6814 ] [151])
                    (reg/f:DI 0 ax [390])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.6814 ] [151]))
        (nil)))
(insn 179 178 180 13 (set (reg:SI 0 ax [391])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 180 179 181 13 (set (reg:DI 0 ax [orig:153 D.6814 ] [153])
        (sign_extend:DI (reg:SI 0 ax [391]))) preproc.cpp:459 142 {*extendsidi2_rex64}
     (nil))
(insn 181 180 182 13 (parallel [
            (set (reg:DI 1 dx [orig:154 D.6814 ] [154])
                (ashift:DI (reg:DI 0 ax [orig:153 D.6814 ] [153])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 497 {*ashldi3_1}
     (nil))
(insn 182 181 183 13 (set (reg/f:DI 0 ax [392])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 183 182 184 13 (parallel [
            (set (reg/f:DI 0 ax [orig:155 D.6816 ] [155])
                (plus:DI (reg/f:DI 0 ax [392])
                    (reg:DI 1 dx [orig:154 D.6814 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:154 D.6814 ] [154]))
        (nil)))
(insn 184 183 574 13 (set (reg:SF 26 xmm5 [orig:156 D.6812 ] [156])
        (mem:SF (reg/f:DI 0 ax [orig:155 D.6816 ] [155]) [0 *_89+0 S4 A32])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 574 184 639 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 26 xmm5 [orig:156 D.6812 ] [156])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(note 639 574 623 13 NOTE_INSN_DELETED)
(note 623 639 185 13 NOTE_INSN_DELETED)
(insn 185 623 575 13 (set (reg:SI 0 ax [393])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 575 185 186 13 (set (reg:SI 1 dx [394])
        (reg:SI 0 ax [393])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 186 575 187 13 (parallel [
            (set (reg:SI 1 dx [394])
                (lshiftrt:SI (reg:SI 1 dx [394])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 529 {*lshrsi3_1}
     (nil))
(insn 187 186 188 13 (parallel [
            (set (reg:SI 0 ax [395])
                (plus:SI (reg:SI 0 ax [393])
                    (reg:SI 1 dx [394])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 220 {*addsi_1}
     (nil))
(insn 188 187 189 13 (parallel [
            (set (reg:SI 0 ax [396])
                (ashiftrt:SI (reg:SI 0 ax [395])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 530 {*ashrsi3_1}
     (nil))
(insn 189 188 190 13 (set (reg:SI 0 ax [orig:157 D.6813 ] [157])
        (reg:SI 0 ax [396])) preproc.cpp:459 90 {*movsi_internal}
     (nil))
(insn 190 189 191 13 (set (reg:DF 22 xmm1 [orig:158 D.6817 ] [158])
        (float:DF (reg:SI 0 ax [orig:157 D.6813 ] [157]))) preproc.cpp:459 201 {*floatsidf2_sse}
     (nil))
(insn 191 190 192 13 (set (reg:DF 21 xmm0 [orig:159 D.6817 ] [159])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 192 191 193 13 (set (reg:DF 22 xmm1 [orig:160 D.6817 ] [160])
        (mult:DF (reg:DF 22 xmm1 [orig:158 D.6817 ] [158])
            (reg:DF 21 xmm0 [orig:159 D.6817 ] [159]))) preproc.cpp:459 776 {*fop_df_comm_sse}
     (nil))
(insn 193 192 194 13 (set (reg:DF 21 xmm0 [orig:161 D.6817 ] [161])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 194 193 195 13 (set (reg:DF 21 xmm0 [orig:162 D.6817 ] [162])
        (plus:DF (reg:DF 21 xmm0 [orig:161 D.6817 ] [161])
            (reg:DF 22 xmm1 [orig:160 D.6817 ] [160]))) preproc.cpp:459 776 {*fop_df_comm_sse}
     (nil))
(insn 195 194 196 13 (set (reg:V2DF 22 xmm1 [397])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:459 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 196 195 197 13 (parallel [
            (set (reg:DF 21 xmm0 [orig:163 D.6817 ] [163])
                (abs:DF (reg:DF 21 xmm0 [orig:162 D.6817 ] [162])))
            (use (reg:V2DF 22 xmm1 [397]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:459 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:162 D.6817 ] [162]))
        (nil)))
(insn 197 196 198 13 (set (reg:DF 22 xmm1 [398])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:459 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 198 197 199 13 (set (reg:DF 22 xmm1 [orig:164 D.6817 ] [164])
        (mult:DF (reg:DF 22 xmm1 [398])
            (reg:DF 21 xmm0 [orig:163 D.6817 ] [163]))) preproc.cpp:459 776 {*fop_df_comm_sse}
     (nil))
(insn 199 198 200 13 (set (reg/f:DI 0 ax [399])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:459 89 {*movdi_internal}
     (nil))
(insn 200 199 201 13 (set (reg:SF 21 xmm0 [orig:165 D.6812 ] [165])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [399])
                (const_int 28 [0x1c])) [0 preprocess_12(D)->comp_filter+0 S4 A32])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 201 200 202 13 (set (reg:DF 21 xmm0 [orig:166 D.6817 ] [166])
        (float_extend:DF (reg:SF 21 xmm0 [orig:165 D.6812 ] [165]))) preproc.cpp:459 152 {*extendsfdf2_sse}
     (nil))
(insn 202 201 204 13 (set (reg:DF 21 xmm0 [orig:167 D.6817 ] [167])
        (mult:DF (reg:DF 21 xmm0 [orig:166 D.6817 ] [166])
            (reg:DF 22 xmm1 [orig:164 D.6817 ] [164]))) preproc.cpp:459 776 {*fop_df_comm_sse}
     (nil))
(call_insn 204 202 206 13 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b571929d100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:459 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 206 204 579 13 (set (reg:SF 21 xmm0 [orig:169 D.6812 ] [169])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:168 D.6817 ] [168]))) preproc.cpp:459 157 {*truncdfsf_fast_sse}
     (nil))
(note 579 206 637 13 NOTE_INSN_DELETED)
(note 637 579 207 13 NOTE_INSN_DELETED)
(insn 207 637 578 13 (set (reg:SF 21 xmm0 [orig:170 D.6812 ] [170])
        (mult:SF (reg:SF 21 xmm0 [orig:170 D.6812 ] [170])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:459 775 {*fop_sf_comm_sse}
     (nil))
(insn 578 207 208 13 (set (reg:SF 0 ax [orig:170 D.6812 ] [170])
        (reg:SF 21 xmm0 [orig:170 D.6812 ] [170])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 208 578 209 13 (set (mem:SF (reg/f:DI 3 bx [orig:152 D.6816 ] [152]) [0 *_86+0 S4 A32])
        (reg:SF 0 ax [orig:170 D.6812 ] [170])) preproc.cpp:459 129 {*movsf_internal}
     (nil))
(insn 209 208 210 13 (set (reg:SI 0 ax [400])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 210 209 211 13 (set (reg:DI 0 ax [orig:171 D.6815 ] [171])
        (sign_extend:DI (reg:SI 0 ax [400]))) preproc.cpp:460 142 {*extendsidi2_rex64}
     (nil))
(insn 211 210 212 13 (parallel [
            (set (reg:DI 0 ax [orig:172 D.6815 ] [172])
                (plus:DI (reg:DI 0 ax [orig:171 D.6815 ] [171])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 221 {*adddi_1}
     (nil))
(insn 212 211 213 13 (parallel [
            (set (reg:DI 1 dx [orig:173 D.6815 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:172 D.6815 ] [172])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 497 {*ashldi3_1}
     (nil))
(insn 213 212 214 13 (set (reg/f:DI 0 ax [401])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 214 213 215 13 (parallel [
            (set (reg/f:DI 3 bx [orig:174 D.6816 ] [174])
                (plus:DI (reg:DI 1 dx [orig:173 D.6815 ] [173])
                    (reg/f:DI 0 ax [401])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:173 D.6815 ] [173]))
        (nil)))
(insn 215 214 216 13 (set (reg:SI 0 ax [402])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 216 215 217 13 (set (reg:DI 0 ax [orig:175 D.6815 ] [175])
        (sign_extend:DI (reg:SI 0 ax [402]))) preproc.cpp:460 142 {*extendsidi2_rex64}
     (nil))
(insn 217 216 218 13 (parallel [
            (set (reg:DI 0 ax [orig:176 D.6815 ] [176])
                (plus:DI (reg:DI 0 ax [orig:175 D.6815 ] [175])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 221 {*adddi_1}
     (nil))
(insn 218 217 219 13 (parallel [
            (set (reg:DI 1 dx [orig:177 D.6815 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:176 D.6815 ] [176])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 497 {*ashldi3_1}
     (nil))
(insn 219 218 220 13 (set (reg/f:DI 0 ax [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 220 219 221 13 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.6816 ] [178])
                (plus:DI (reg/f:DI 0 ax [403])
                    (reg:DI 1 dx [orig:177 D.6815 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.6815 ] [177]))
        (nil)))
(insn 221 220 580 13 (set (reg:SF 27 xmm6 [orig:179 D.6812 ] [179])
        (mem:SF (reg/f:DI 0 ax [orig:178 D.6816 ] [178]) [0 *_112+0 S4 A32])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 580 221 638 13 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 27 xmm6 [orig:179 D.6812 ] [179])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(note 638 580 622 13 NOTE_INSN_DELETED)
(note 622 638 222 13 NOTE_INSN_DELETED)
(insn 222 622 581 13 (set (reg:SI 0 ax [404])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 581 222 223 13 (set (reg:SI 1 dx [405])
        (reg:SI 0 ax [404])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 223 581 224 13 (parallel [
            (set (reg:SI 1 dx [405])
                (lshiftrt:SI (reg:SI 1 dx [405])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 529 {*lshrsi3_1}
     (nil))
(insn 224 223 225 13 (parallel [
            (set (reg:SI 0 ax [406])
                (plus:SI (reg:SI 0 ax [404])
                    (reg:SI 1 dx [405])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 220 {*addsi_1}
     (nil))
(insn 225 224 226 13 (parallel [
            (set (reg:SI 0 ax [407])
                (ashiftrt:SI (reg:SI 0 ax [406])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 530 {*ashrsi3_1}
     (nil))
(insn 226 225 227 13 (set (reg:SI 0 ax [orig:180 D.6813 ] [180])
        (reg:SI 0 ax [407])) preproc.cpp:460 90 {*movsi_internal}
     (nil))
(insn 227 226 228 13 (set (reg:DF 22 xmm1 [orig:181 D.6817 ] [181])
        (float:DF (reg:SI 0 ax [orig:180 D.6813 ] [180]))) preproc.cpp:460 201 {*floatsidf2_sse}
     (nil))
(insn 228 227 229 13 (set (reg:DF 21 xmm0 [orig:182 D.6817 ] [182])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 229 228 230 13 (set (reg:DF 22 xmm1 [orig:183 D.6817 ] [183])
        (mult:DF (reg:DF 22 xmm1 [orig:181 D.6817 ] [181])
            (reg:DF 21 xmm0 [orig:182 D.6817 ] [182]))) preproc.cpp:460 776 {*fop_df_comm_sse}
     (nil))
(insn 230 229 231 13 (set (reg:DF 21 xmm0 [orig:184 D.6817 ] [184])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 231 230 232 13 (set (reg:DF 21 xmm0 [orig:185 D.6817 ] [185])
        (plus:DF (reg:DF 21 xmm0 [orig:184 D.6817 ] [184])
            (reg:DF 22 xmm1 [orig:183 D.6817 ] [183]))) preproc.cpp:460 776 {*fop_df_comm_sse}
     (nil))
(insn 232 231 233 13 (set (reg:V2DF 22 xmm1 [408])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:460 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 233 232 234 13 (parallel [
            (set (reg:DF 21 xmm0 [orig:186 D.6817 ] [186])
                (abs:DF (reg:DF 21 xmm0 [orig:185 D.6817 ] [185])))
            (use (reg:V2DF 22 xmm1 [408]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:460 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:185 D.6817 ] [185]))
        (nil)))
(insn 234 233 235 13 (set (reg:DF 22 xmm1 [409])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:460 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 235 234 236 13 (set (reg:DF 22 xmm1 [orig:187 D.6817 ] [187])
        (mult:DF (reg:DF 22 xmm1 [409])
            (reg:DF 21 xmm0 [orig:186 D.6817 ] [186]))) preproc.cpp:460 776 {*fop_df_comm_sse}
     (nil))
(insn 236 235 237 13 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:460 89 {*movdi_internal}
     (nil))
(insn 237 236 238 13 (set (reg:SF 21 xmm0 [orig:188 D.6812 ] [188])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [410])
                (const_int 28 [0x1c])) [0 preprocess_12(D)->comp_filter+0 S4 A32])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 238 237 239 13 (set (reg:DF 21 xmm0 [orig:189 D.6817 ] [189])
        (float_extend:DF (reg:SF 21 xmm0 [orig:188 D.6812 ] [188]))) preproc.cpp:460 152 {*extendsfdf2_sse}
     (nil))
(insn 239 238 241 13 (set (reg:DF 21 xmm0 [orig:190 D.6817 ] [190])
        (mult:DF (reg:DF 21 xmm0 [orig:189 D.6817 ] [189])
            (reg:DF 22 xmm1 [orig:187 D.6817 ] [187]))) preproc.cpp:460 776 {*fop_df_comm_sse}
     (nil))
(call_insn 241 239 243 13 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b571929d100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:460 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 243 241 585 13 (set (reg:SF 21 xmm0 [orig:192 D.6812 ] [192])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:191 D.6817 ] [191]))) preproc.cpp:460 157 {*truncdfsf_fast_sse}
     (nil))
(note 585 243 636 13 NOTE_INSN_DELETED)
(note 636 585 244 13 NOTE_INSN_DELETED)
(insn 244 636 584 13 (set (reg:SF 21 xmm0 [orig:193 D.6812 ] [193])
        (mult:SF (reg:SF 21 xmm0 [orig:193 D.6812 ] [193])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:460 775 {*fop_sf_comm_sse}
     (nil))
(insn 584 244 245 13 (set (reg:SF 0 ax [orig:193 D.6812 ] [193])
        (reg:SF 21 xmm0 [orig:193 D.6812 ] [193])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(insn 245 584 555 13 (set (mem:SF (reg/f:DI 3 bx [orig:174 D.6816 ] [174]) [0 *_108+0 S4 A32])
        (reg:SF 0 ax [orig:193 D.6812 ] [193])) preproc.cpp:460 129 {*movsf_internal}
     (nil))
(jump_insn 555 245 556 13 (set (pc)
        (label_ref 327)) preproc.cpp:460 636 {jump}
     (nil)
 -> 327)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 556 555 248)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 194 411
(code_label 248 556 249 14 82 "" [2 uses])
(note 249 248 250 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 14 (set (reg/f:DI 0 ax [411])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:461 89 {*movdi_internal}
     (nil))
(insn 251 250 252 14 (set (reg:SI 0 ax [orig:194 D.6813 ] [194])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [411])
                (const_int 40 [0x28])) [0 preprocess_12(D)->pre_quecc+0 S4 A32])) preproc.cpp:461 90 {*movsi_internal}
     (nil))
(insn 252 251 253 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:194 D.6813 ] [194])
            (const_int 0 [0]))) preproc.cpp:461 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 253 252 254 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 327)
            (pc))) preproc.cpp:461 596 {*jcc_1}
     (nil)
 -> 327)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433
(note 254 253 255 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 15 (set (reg:SI 0 ax [412])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 256 255 257 15 (set (reg:DI 0 ax [orig:195 D.6814 ] [195])
        (sign_extend:DI (reg:SI 0 ax [412]))) preproc.cpp:462 142 {*extendsidi2_rex64}
     (nil))
(insn 257 256 258 15 (parallel [
            (set (reg:DI 1 dx [orig:196 D.6814 ] [196])
                (ashift:DI (reg:DI 0 ax [orig:195 D.6814 ] [195])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 497 {*ashldi3_1}
     (nil))
(insn 258 257 259 15 (set (reg/f:DI 0 ax [413])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 259 258 260 15 (parallel [
            (set (reg/f:DI 3 bx [orig:197 D.6816 ] [197])
                (plus:DI (reg:DI 1 dx [orig:196 D.6814 ] [196])
                    (reg/f:DI 0 ax [413])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:196 D.6814 ] [196]))
        (nil)))
(insn 260 259 261 15 (set (reg:SI 0 ax [414])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 261 260 262 15 (set (reg:DI 0 ax [orig:198 D.6814 ] [198])
        (sign_extend:DI (reg:SI 0 ax [414]))) preproc.cpp:462 142 {*extendsidi2_rex64}
     (nil))
(insn 262 261 263 15 (parallel [
            (set (reg:DI 1 dx [orig:199 D.6814 ] [199])
                (ashift:DI (reg:DI 0 ax [orig:198 D.6814 ] [198])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 497 {*ashldi3_1}
     (nil))
(insn 263 262 264 15 (set (reg/f:DI 0 ax [415])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 264 263 265 15 (parallel [
            (set (reg/f:DI 0 ax [orig:200 D.6816 ] [200])
                (plus:DI (reg/f:DI 0 ax [415])
                    (reg:DI 1 dx [orig:199 D.6814 ] [199])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:199 D.6814 ] [199]))
        (nil)))
(insn 265 264 586 15 (set (reg:SF 28 xmm7 [orig:201 D.6812 ] [201])
        (mem:SF (reg/f:DI 0 ax [orig:200 D.6816 ] [200]) [0 *_134+0 S4 A32])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 586 265 641 15 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 28 xmm7 [orig:201 D.6812 ] [201])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(note 641 586 625 15 NOTE_INSN_DELETED)
(note 625 641 266 15 NOTE_INSN_DELETED)
(insn 266 625 587 15 (set (reg:SI 0 ax [416])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 587 266 267 15 (set (reg:SI 1 dx [417])
        (reg:SI 0 ax [416])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 267 587 268 15 (parallel [
            (set (reg:SI 1 dx [417])
                (lshiftrt:SI (reg:SI 1 dx [417])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 529 {*lshrsi3_1}
     (nil))
(insn 268 267 269 15 (parallel [
            (set (reg:SI 0 ax [418])
                (plus:SI (reg:SI 0 ax [416])
                    (reg:SI 1 dx [417])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 220 {*addsi_1}
     (nil))
(insn 269 268 270 15 (parallel [
            (set (reg:SI 0 ax [419])
                (ashiftrt:SI (reg:SI 0 ax [418])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 530 {*ashrsi3_1}
     (nil))
(insn 270 269 271 15 (set (reg:SI 0 ax [orig:202 D.6813 ] [202])
        (reg:SI 0 ax [419])) preproc.cpp:462 90 {*movsi_internal}
     (nil))
(insn 271 270 272 15 (set (reg:DF 22 xmm1 [orig:203 D.6817 ] [203])
        (float:DF (reg:SI 0 ax [orig:202 D.6813 ] [202]))) preproc.cpp:462 201 {*floatsidf2_sse}
     (nil))
(insn 272 271 273 15 (set (reg:DF 21 xmm0 [orig:204 D.6817 ] [204])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(insn 273 272 274 15 (set (reg:DF 22 xmm1 [orig:205 D.6817 ] [205])
        (mult:DF (reg:DF 22 xmm1 [orig:203 D.6817 ] [203])
            (reg:DF 21 xmm0 [orig:204 D.6817 ] [204]))) preproc.cpp:462 776 {*fop_df_comm_sse}
     (nil))
(insn 274 273 275 15 (set (reg:DF 21 xmm0 [orig:206 D.6817 ] [206])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(insn 275 274 276 15 (set (reg:DF 21 xmm0 [orig:207 D.6817 ] [207])
        (plus:DF (reg:DF 21 xmm0 [orig:206 D.6817 ] [206])
            (reg:DF 22 xmm1 [orig:205 D.6817 ] [205]))) preproc.cpp:462 776 {*fop_df_comm_sse}
     (nil))
(insn 276 275 277 15 (set (reg:V2DF 22 xmm1 [420])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:462 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 277 276 278 15 (parallel [
            (set (reg:DF 21 xmm0 [orig:208 D.6817 ] [208])
                (abs:DF (reg:DF 21 xmm0 [orig:207 D.6817 ] [207])))
            (use (reg:V2DF 22 xmm1 [420]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:462 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:207 D.6817 ] [207]))
        (nil)))
(insn 278 277 279 15 (set (reg:DF 22 xmm1 [421])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:462 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 279 278 280 15 (set (reg:DF 22 xmm1 [orig:209 D.6817 ] [209])
        (mult:DF (reg:DF 22 xmm1 [421])
            (reg:DF 21 xmm0 [orig:208 D.6817 ] [208]))) preproc.cpp:462 776 {*fop_df_comm_sse}
     (nil))
(insn 280 279 281 15 (set (reg/f:DI 0 ax [422])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:462 89 {*movdi_internal}
     (nil))
(insn 281 280 282 15 (set (reg:SF 21 xmm0 [orig:210 D.6812 ] [210])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [422])
                (const_int 28 [0x1c])) [0 preprocess_12(D)->comp_filter+0 S4 A32])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 282 281 283 15 (set (reg:DF 21 xmm0 [orig:211 D.6817 ] [211])
        (float_extend:DF (reg:SF 21 xmm0 [orig:210 D.6812 ] [210]))) preproc.cpp:462 152 {*extendsfdf2_sse}
     (nil))
(insn 283 282 285 15 (set (reg:DF 21 xmm0 [orig:212 D.6817 ] [212])
        (mult:DF (reg:DF 21 xmm0 [orig:211 D.6817 ] [211])
            (reg:DF 22 xmm1 [orig:209 D.6817 ] [209]))) preproc.cpp:462 776 {*fop_df_comm_sse}
     (nil))
(call_insn 285 283 287 15 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b571929d100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:462 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 287 285 591 15 (set (reg:SF 21 xmm0 [orig:214 D.6812 ] [214])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:213 D.6817 ] [213]))) preproc.cpp:462 157 {*truncdfsf_fast_sse}
     (nil))
(note 591 287 635 15 NOTE_INSN_DELETED)
(note 635 591 288 15 NOTE_INSN_DELETED)
(insn 288 635 590 15 (set (reg:SF 21 xmm0 [orig:215 D.6812 ] [215])
        (mult:SF (reg:SF 21 xmm0 [orig:215 D.6812 ] [215])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:462 775 {*fop_sf_comm_sse}
     (nil))
(insn 590 288 289 15 (set (reg:SF 0 ax [orig:215 D.6812 ] [215])
        (reg:SF 21 xmm0 [orig:215 D.6812 ] [215])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 289 590 290 15 (set (mem:SF (reg/f:DI 3 bx [orig:197 D.6816 ] [197]) [0 *_131+0 S4 A32])
        (reg:SF 0 ax [orig:215 D.6812 ] [215])) preproc.cpp:462 129 {*movsf_internal}
     (nil))
(insn 290 289 291 15 (set (reg:SI 0 ax [423])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 291 290 292 15 (set (reg:DI 0 ax [orig:216 D.6815 ] [216])
        (sign_extend:DI (reg:SI 0 ax [423]))) preproc.cpp:463 142 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 15 (parallel [
            (set (reg:DI 0 ax [orig:217 D.6815 ] [217])
                (plus:DI (reg:DI 0 ax [orig:216 D.6815 ] [216])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 221 {*adddi_1}
     (nil))
(insn 293 292 294 15 (parallel [
            (set (reg:DI 1 dx [orig:218 D.6815 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.6815 ] [217])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 497 {*ashldi3_1}
     (nil))
(insn 294 293 295 15 (set (reg/f:DI 0 ax [424])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:463 89 {*movdi_internal}
     (nil))
(insn 295 294 296 15 (parallel [
            (set (reg/f:DI 3 bx [orig:219 D.6816 ] [219])
                (plus:DI (reg:DI 1 dx [orig:218 D.6815 ] [218])
                    (reg/f:DI 0 ax [424])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:218 D.6815 ] [218]))
        (nil)))
(insn 296 295 297 15 (set (reg:SI 0 ax [425])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 297 296 298 15 (set (reg:DI 0 ax [orig:220 D.6815 ] [220])
        (sign_extend:DI (reg:SI 0 ax [425]))) preproc.cpp:463 142 {*extendsidi2_rex64}
     (nil))
(insn 298 297 299 15 (parallel [
            (set (reg:DI 0 ax [orig:221 D.6815 ] [221])
                (plus:DI (reg:DI 0 ax [orig:220 D.6815 ] [220])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 221 {*adddi_1}
     (nil))
(insn 299 298 300 15 (parallel [
            (set (reg:DI 1 dx [orig:222 D.6815 ] [222])
                (ashift:DI (reg:DI 0 ax [orig:221 D.6815 ] [221])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 497 {*ashldi3_1}
     (nil))
(insn 300 299 301 15 (set (reg/f:DI 0 ax [426])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 sup_data+0 S8 A64])) preproc.cpp:463 89 {*movdi_internal}
     (nil))
(insn 301 300 302 15 (parallel [
            (set (reg/f:DI 0 ax [orig:223 D.6816 ] [223])
                (plus:DI (reg/f:DI 0 ax [426])
                    (reg:DI 1 dx [orig:222 D.6815 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.6815 ] [222]))
        (nil)))
(insn 302 301 592 15 (set (reg:SF 24 xmm3 [orig:224 D.6812 ] [224])
        (mem:SF (reg/f:DI 0 ax [orig:223 D.6816 ] [223]) [0 *_157+0 S4 A32])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
(insn 592 302 640 15 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 24 xmm3 [orig:224 D.6812 ] [224])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
(note 640 592 624 15 NOTE_INSN_DELETED)
(note 624 640 303 15 NOTE_INSN_DELETED)
(insn 303 624 593 15 (set (reg:SI 0 ax [427])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 593 303 304 15 (set (reg:SI 1 dx [428])
        (reg:SI 0 ax [427])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 304 593 305 15 (parallel [
            (set (reg:SI 1 dx [428])
                (lshiftrt:SI (reg:SI 1 dx [428])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 529 {*lshrsi3_1}
     (nil))
(insn 305 304 306 15 (parallel [
            (set (reg:SI 0 ax [429])
                (plus:SI (reg:SI 0 ax [427])
                    (reg:SI 1 dx [428])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 220 {*addsi_1}
     (nil))
(insn 306 305 307 15 (parallel [
            (set (reg:SI 0 ax [430])
                (ashiftrt:SI (reg:SI 0 ax [429])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 530 {*ashrsi3_1}
     (nil))
(insn 307 306 308 15 (set (reg:SI 0 ax [orig:225 D.6813 ] [225])
        (reg:SI 0 ax [430])) preproc.cpp:463 90 {*movsi_internal}
     (nil))
(insn 308 307 309 15 (set (reg:DF 22 xmm1 [orig:226 D.6817 ] [226])
        (float:DF (reg:SI 0 ax [orig:225 D.6813 ] [225]))) preproc.cpp:463 201 {*floatsidf2_sse}
     (nil))
(insn 309 308 310 15 (set (reg:DF 21 xmm0 [orig:227 D.6817 ] [227])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:463 152 {*extendsfdf2_sse}
     (nil))
(insn 310 309 311 15 (set (reg:DF 22 xmm1 [orig:228 D.6817 ] [228])
        (mult:DF (reg:DF 22 xmm1 [orig:226 D.6817 ] [226])
            (reg:DF 21 xmm0 [orig:227 D.6817 ] [227]))) preproc.cpp:463 776 {*fop_df_comm_sse}
     (nil))
(insn 311 310 312 15 (set (reg:DF 21 xmm0 [orig:229 D.6817 ] [229])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:463 152 {*extendsfdf2_sse}
     (nil))
(insn 312 311 313 15 (set (reg:DF 21 xmm0 [orig:230 D.6817 ] [230])
        (plus:DF (reg:DF 21 xmm0 [orig:229 D.6817 ] [229])
            (reg:DF 22 xmm1 [orig:228 D.6817 ] [228]))) preproc.cpp:463 776 {*fop_df_comm_sse}
     (nil))
(insn 313 312 314 15 (set (reg:V2DF 22 xmm1 [431])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:463 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 314 313 315 15 (parallel [
            (set (reg:DF 21 xmm0 [orig:231 D.6817 ] [231])
                (abs:DF (reg:DF 21 xmm0 [orig:230 D.6817 ] [230])))
            (use (reg:V2DF 22 xmm1 [431]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:463 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:230 D.6817 ] [230]))
        (nil)))
(insn 315 314 316 15 (set (reg:DF 22 xmm1 [432])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:463 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 316 315 317 15 (set (reg:DF 22 xmm1 [orig:232 D.6817 ] [232])
        (mult:DF (reg:DF 22 xmm1 [432])
            (reg:DF 21 xmm0 [orig:231 D.6817 ] [231]))) preproc.cpp:463 776 {*fop_df_comm_sse}
     (nil))
(insn 317 316 318 15 (set (reg/f:DI 0 ax [433])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:463 89 {*movdi_internal}
     (nil))
(insn 318 317 319 15 (set (reg:SF 21 xmm0 [orig:233 D.6812 ] [233])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [433])
                (const_int 28 [0x1c])) [0 preprocess_12(D)->comp_filter+0 S4 A32])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
(insn 319 318 320 15 (set (reg:DF 21 xmm0 [orig:234 D.6817 ] [234])
        (float_extend:DF (reg:SF 21 xmm0 [orig:233 D.6812 ] [233]))) preproc.cpp:463 152 {*extendsfdf2_sse}
     (nil))
(insn 320 319 322 15 (set (reg:DF 21 xmm0 [orig:235 D.6817 ] [235])
        (mult:DF (reg:DF 21 xmm0 [orig:234 D.6817 ] [234])
            (reg:DF 22 xmm1 [orig:232 D.6817 ] [232]))) preproc.cpp:463 776 {*fop_df_comm_sse}
     (nil))
(call_insn 322 320 324 15 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b571929d100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:463 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 324 322 597 15 (set (reg:SF 21 xmm0 [orig:237 D.6812 ] [237])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:236 D.6817 ] [236]))) preproc.cpp:463 157 {*truncdfsf_fast_sse}
     (nil))
(note 597 324 634 15 NOTE_INSN_DELETED)
(note 634 597 325 15 NOTE_INSN_DELETED)
(insn 325 634 596 15 (set (reg:SF 21 xmm0 [orig:238 D.6812 ] [238])
        (mult:SF (reg:SF 21 xmm0 [orig:238 D.6812 ] [238])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:463 775 {*fop_sf_comm_sse}
     (nil))
(insn 596 325 326 15 (set (reg:SF 0 ax [orig:238 D.6812 ] [238])
        (reg:SF 21 xmm0 [orig:238 D.6812 ] [238])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
(insn 326 596 327 15 (set (mem:SF (reg/f:DI 3 bx [orig:219 D.6816 ] [219]) [0 *_153+0 S4 A32])
        (reg:SF 0 ax [orig:238 D.6812 ] [238])) preproc.cpp:463 129 {*movsf_internal}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;;              14
;;              13 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 327 326 328 16 83 "" [2 uses])
(note 328 327 329 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 330 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:457 220 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              10 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 434
(code_label 330 329 331 17 81 "" [1 uses])
(note 331 330 332 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 332 331 333 17 (set (reg/f:DI 0 ax [434])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) preproc.cpp:457 89 {*movdi_internal}
     (nil))
(insn 333 332 335 17 (set (reg:SI 0 ax [orig:147 D.6813 ] [147])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [434])
                (const_int 300 [0x12c])) [0 procpar_info_6(D)->num_points+0 S4 A32])) preproc.cpp:457 90 {*movsi_internal}
     (nil))
(insn 335 333 336 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:147 D.6813 ] [147])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) preproc.cpp:457 7 {*cmpsi_1}
     (nil))
(jump_insn 336 335 337 17 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 334)
            (pc))) preproc.cpp:457 596 {*jcc_1}
     (nil)
 -> 334)
;;  succ:       11
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              9
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 240 435 436
(code_label 337 336 338 18 79 "" [1 uses])
(note 338 337 339 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 339 338 340 18 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:469 89 {*movdi_internal}
     (nil))
(insn 340 339 341 18 (parallel [
            (set (reg/f:DI 0 ax [orig:239 D.6818 ] [239])
                (plus:DI (reg/f:DI 0 ax [435])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:469 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 341 340 342 18 (set (reg:SF 21 xmm0 [orig:240 D.6812 ] [240])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:239 D.6818 ] [239])
                (const_int 28 [0x1c])) [0 _174->comp_filter+0 S4 A32])) preproc.cpp:469 129 {*movsf_internal}
     (nil))
(insn 342 341 343 18 (set (reg:SF 22 xmm1 [436])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:469 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 343 342 344 18 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:240 D.6812 ] [240])
            (reg:SF 22 xmm1 [436]))) preproc.cpp:469 55 {*cmpiusf_sse}
     (nil))
(jump_insn 344 343 548 18 (set (pc)
        (if_then_else (unordered (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 552)
            (pc))) preproc.cpp:469 596 {*jcc_1}
     (nil)
 -> 552)
;;  succ:       20
;;              19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 240

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 240
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 240
;; lr  def 	 17 [flags] 437
(note 548 344 345 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 345 548 346 19 (set (reg:SF 22 xmm1 [437])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0  S4 A32])) preproc.cpp:469 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))
(insn 346 345 347 19 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:240 D.6812 ] [240])
            (reg:SF 22 xmm1 [437]))) preproc.cpp:469 55 {*cmpiusf_sse}
     (nil))
(jump_insn 347 346 552 19 (set (pc)
        (if_then_else (uneq (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 533)
            (pc))) preproc.cpp:469 596 {*jcc_1}
     (nil)
 -> 533)
;;  succ:       20 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 552 347 351 20 93 "" [1 uses])
(note 351 552 352 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 352 351 557 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:471 90 {*movsi_internal}
     (nil))
(jump_insn 557 352 558 20 (set (pc)
        (label_ref 526)) preproc.cpp:471 636 {jump}
     (nil)
 -> 526)
;;  succ:       27 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 558 557 530)
;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 242 438
(code_label 530 558 355 21 90 "" [1 uses])
(note 355 530 356 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 356 355 357 21 (set (reg/f:DI 0 ax [438])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:472 89 {*movdi_internal}
     (nil))
(insn 357 356 358 21 (set (reg:SI 0 ax [orig:242 D.6813 ] [242])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [438])
                (const_int 40 [0x28])) [0 preprocess_12(D)->pre_quecc+0 S4 A32])) preproc.cpp:472 90 {*movsi_internal}
     (nil))
(insn 358 357 359 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:242 D.6813 ] [242])
            (const_int 0 [0]))) preproc.cpp:472 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 359 358 360 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 442)
            (pc))) preproc.cpp:472 596 {*jcc_1}
     (nil)
 -> 442)
;;  succ:       22 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243 439
(note 360 359 361 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 361 360 362 22 (set (reg/f:DI 0 ax [439])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:472 89 {*movdi_internal}
     (nil))
(insn 362 361 363 22 (set (reg:SI 0 ax [orig:243 D.6813 ] [243])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [439])
                (const_int 44 [0x2c])) [0 preprocess_12(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:472 90 {*movsi_internal}
     (nil))
(insn 363 362 364 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:243 D.6813 ] [243])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) preproc.cpp:472 7 {*cmpsi_1}
     (nil))
(jump_insn 364 363 365 22 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 442)
            (pc))) preproc.cpp:472 596 {*jcc_1}
     (nil)
 -> 442)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461
(note 365 364 366 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 366 365 367 23 (set (reg:SI 0 ax [440])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 367 366 368 23 (set (reg:DI 0 ax [orig:244 D.6814 ] [244])
        (sign_extend:DI (reg:SI 0 ax [440]))) preproc.cpp:473 142 {*extendsidi2_rex64}
     (nil))
(insn 368 367 369 23 (parallel [
            (set (reg:DI 1 dx [orig:245 D.6814 ] [245])
                (ashift:DI (reg:DI 0 ax [orig:244 D.6814 ] [244])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 497 {*ashldi3_1}
     (nil))
(insn 369 368 370 23 (set (reg/f:DI 0 ax [441])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:473 89 {*movdi_internal}
     (nil))
(insn 370 369 371 23 (parallel [
            (set (reg/f:DI 3 bx [orig:246 D.6816 ] [246])
                (plus:DI (reg:DI 1 dx [orig:245 D.6814 ] [245])
                    (reg/f:DI 0 ax [441])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:245 D.6814 ] [245]))
        (nil)))
(insn 371 370 372 23 (set (reg:SI 0 ax [442])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 372 371 373 23 (set (reg:DI 0 ax [orig:247 D.6814 ] [247])
        (sign_extend:DI (reg:SI 0 ax [442]))) preproc.cpp:473 142 {*extendsidi2_rex64}
     (nil))
(insn 373 372 374 23 (parallel [
            (set (reg:DI 1 dx [orig:248 D.6814 ] [248])
                (ashift:DI (reg:DI 0 ax [orig:247 D.6814 ] [247])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 497 {*ashldi3_1}
     (nil))
(insn 374 373 375 23 (set (reg/f:DI 0 ax [443])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:473 89 {*movdi_internal}
     (nil))
(insn 375 374 376 23 (parallel [
            (set (reg/f:DI 0 ax [orig:249 D.6816 ] [249])
                (plus:DI (reg/f:DI 0 ax [443])
                    (reg:DI 1 dx [orig:248 D.6814 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:248 D.6814 ] [248]))
        (nil)))
(insn 376 375 598 23 (set (reg:SF 25 xmm4 [orig:250 D.6812 ] [250])
        (mem:SF (reg/f:DI 0 ax [orig:249 D.6816 ] [249]) [0 *_185+0 S4 A32])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(insn 598 376 643 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 25 xmm4 [orig:250 D.6812 ] [250])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(note 643 598 627 23 NOTE_INSN_DELETED)
(note 627 643 377 23 NOTE_INSN_DELETED)
(insn 377 627 599 23 (set (reg:SI 0 ax [444])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 599 377 378 23 (set (reg:SI 1 dx [445])
        (reg:SI 0 ax [444])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 378 599 379 23 (parallel [
            (set (reg:SI 1 dx [445])
                (lshiftrt:SI (reg:SI 1 dx [445])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 529 {*lshrsi3_1}
     (nil))
(insn 379 378 380 23 (parallel [
            (set (reg:SI 0 ax [446])
                (plus:SI (reg:SI 0 ax [444])
                    (reg:SI 1 dx [445])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 220 {*addsi_1}
     (nil))
(insn 380 379 381 23 (parallel [
            (set (reg:SI 0 ax [447])
                (ashiftrt:SI (reg:SI 0 ax [446])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 530 {*ashrsi3_1}
     (nil))
(insn 381 380 382 23 (set (reg:SI 0 ax [orig:251 D.6813 ] [251])
        (reg:SI 0 ax [447])) preproc.cpp:473 90 {*movsi_internal}
     (nil))
(insn 382 381 383 23 (set (reg:DF 22 xmm1 [orig:252 D.6817 ] [252])
        (float:DF (reg:SI 0 ax [orig:251 D.6813 ] [251]))) preproc.cpp:473 201 {*floatsidf2_sse}
     (nil))
(insn 383 382 384 23 (set (reg:DF 21 xmm0 [orig:253 D.6817 ] [253])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:473 152 {*extendsfdf2_sse}
     (nil))
(insn 384 383 385 23 (set (reg:DF 22 xmm1 [orig:254 D.6817 ] [254])
        (mult:DF (reg:DF 22 xmm1 [orig:252 D.6817 ] [252])
            (reg:DF 21 xmm0 [orig:253 D.6817 ] [253]))) preproc.cpp:473 776 {*fop_df_comm_sse}
     (nil))
(insn 385 384 386 23 (set (reg:DF 21 xmm0 [orig:255 D.6817 ] [255])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:473 152 {*extendsfdf2_sse}
     (nil))
(insn 386 385 387 23 (set (reg:DF 21 xmm0 [orig:256 D.6817 ] [256])
        (plus:DF (reg:DF 21 xmm0 [orig:255 D.6817 ] [255])
            (reg:DF 22 xmm1 [orig:254 D.6817 ] [254]))) preproc.cpp:473 776 {*fop_df_comm_sse}
     (nil))
(insn 387 386 388 23 (set (reg:V2DF 22 xmm1 [448])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:473 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 388 387 389 23 (parallel [
            (set (reg:DF 21 xmm0 [orig:257 D.6817 ] [257])
                (abs:DF (reg:DF 21 xmm0 [orig:256 D.6817 ] [256])))
            (use (reg:V2DF 22 xmm1 [448]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:256 D.6817 ] [256]))
        (nil)))
(insn 389 388 390 23 (set (reg:DF 22 xmm1 [449])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:473 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 390 389 391 23 (set (reg:DF 22 xmm1 [orig:258 D.6817 ] [258])
        (mult:DF (reg:DF 22 xmm1 [449])
            (reg:DF 21 xmm0 [orig:257 D.6817 ] [257]))) preproc.cpp:473 776 {*fop_df_comm_sse}
     (nil))
(insn 391 390 392 23 (set (reg/f:DI 0 ax [450])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:473 89 {*movdi_internal}
     (nil))
(insn 392 391 393 23 (parallel [
            (set (reg/f:DI 0 ax [orig:259 D.6818 ] [259])
                (plus:DI (reg/f:DI 0 ax [450])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:473 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 393 392 394 23 (set (reg:SF 21 xmm0 [orig:260 D.6812 ] [260])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:259 D.6818 ] [259])
                (const_int 28 [0x1c])) [0 _195->comp_filter+0 S4 A32])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(insn 394 393 395 23 (set (reg:DF 21 xmm0 [orig:261 D.6817 ] [261])
        (float_extend:DF (reg:SF 21 xmm0 [orig:260 D.6812 ] [260]))) preproc.cpp:473 152 {*extendsfdf2_sse}
     (nil))
(insn 395 394 397 23 (set (reg:DF 21 xmm0 [orig:262 D.6817 ] [262])
        (mult:DF (reg:DF 21 xmm0 [orig:261 D.6817 ] [261])
            (reg:DF 22 xmm1 [orig:258 D.6817 ] [258]))) preproc.cpp:473 776 {*fop_df_comm_sse}
     (nil))
(call_insn 397 395 399 23 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b571929d100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:473 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 399 397 603 23 (set (reg:SF 21 xmm0 [orig:264 D.6812 ] [264])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:263 D.6817 ] [263]))) preproc.cpp:473 157 {*truncdfsf_fast_sse}
     (nil))
(note 603 399 633 23 NOTE_INSN_DELETED)
(note 633 603 400 23 NOTE_INSN_DELETED)
(insn 400 633 602 23 (set (reg:SF 21 xmm0 [orig:265 D.6812 ] [265])
        (mult:SF (reg:SF 21 xmm0 [orig:265 D.6812 ] [265])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:473 775 {*fop_sf_comm_sse}
     (nil))
(insn 602 400 401 23 (set (reg:SF 0 ax [orig:265 D.6812 ] [265])
        (reg:SF 21 xmm0 [orig:265 D.6812 ] [265])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(insn 401 602 402 23 (set (mem:SF (reg/f:DI 3 bx [orig:246 D.6816 ] [246]) [0 *_182+0 S4 A32])
        (reg:SF 0 ax [orig:265 D.6812 ] [265])) preproc.cpp:473 129 {*movsf_internal}
     (nil))
(insn 402 401 403 23 (set (reg:SI 0 ax [451])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 403 402 404 23 (set (reg:DI 0 ax [orig:266 D.6815 ] [266])
        (sign_extend:DI (reg:SI 0 ax [451]))) preproc.cpp:474 142 {*extendsidi2_rex64}
     (nil))
(insn 404 403 405 23 (parallel [
            (set (reg:DI 0 ax [orig:267 D.6815 ] [267])
                (plus:DI (reg:DI 0 ax [orig:266 D.6815 ] [266])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 221 {*adddi_1}
     (nil))
(insn 405 404 406 23 (parallel [
            (set (reg:DI 1 dx [orig:268 D.6815 ] [268])
                (ashift:DI (reg:DI 0 ax [orig:267 D.6815 ] [267])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 497 {*ashldi3_1}
     (nil))
(insn 406 405 407 23 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:474 89 {*movdi_internal}
     (nil))
(insn 407 406 408 23 (parallel [
            (set (reg/f:DI 3 bx [orig:269 D.6816 ] [269])
                (plus:DI (reg:DI 1 dx [orig:268 D.6815 ] [268])
                    (reg/f:DI 0 ax [452])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:268 D.6815 ] [268]))
        (nil)))
(insn 408 407 409 23 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 409 408 410 23 (set (reg:DI 0 ax [orig:270 D.6815 ] [270])
        (sign_extend:DI (reg:SI 0 ax [453]))) preproc.cpp:474 142 {*extendsidi2_rex64}
     (nil))
(insn 410 409 411 23 (parallel [
            (set (reg:DI 0 ax [orig:271 D.6815 ] [271])
                (plus:DI (reg:DI 0 ax [orig:270 D.6815 ] [270])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 221 {*adddi_1}
     (nil))
(insn 411 410 412 23 (parallel [
            (set (reg:DI 1 dx [orig:272 D.6815 ] [272])
                (ashift:DI (reg:DI 0 ax [orig:271 D.6815 ] [271])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 497 {*ashldi3_1}
     (nil))
(insn 412 411 413 23 (set (reg/f:DI 0 ax [454])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:474 89 {*movdi_internal}
     (nil))
(insn 413 412 414 23 (parallel [
            (set (reg/f:DI 0 ax [orig:273 D.6816 ] [273])
                (plus:DI (reg/f:DI 0 ax [454])
                    (reg:DI 1 dx [orig:272 D.6815 ] [272])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:272 D.6815 ] [272]))
        (nil)))
(insn 414 413 604 23 (set (reg:SF 26 xmm5 [orig:274 D.6812 ] [274])
        (mem:SF (reg/f:DI 0 ax [orig:273 D.6816 ] [273]) [0 *_209+0 S4 A32])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(insn 604 414 642 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 26 xmm5 [orig:274 D.6812 ] [274])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(note 642 604 626 23 NOTE_INSN_DELETED)
(note 626 642 415 23 NOTE_INSN_DELETED)
(insn 415 626 605 23 (set (reg:SI 0 ax [455])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 605 415 416 23 (set (reg:SI 1 dx [456])
        (reg:SI 0 ax [455])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 416 605 417 23 (parallel [
            (set (reg:SI 1 dx [456])
                (lshiftrt:SI (reg:SI 1 dx [456])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 529 {*lshrsi3_1}
     (nil))
(insn 417 416 418 23 (parallel [
            (set (reg:SI 0 ax [457])
                (plus:SI (reg:SI 0 ax [455])
                    (reg:SI 1 dx [456])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 220 {*addsi_1}
     (nil))
(insn 418 417 419 23 (parallel [
            (set (reg:SI 0 ax [458])
                (ashiftrt:SI (reg:SI 0 ax [457])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 530 {*ashrsi3_1}
     (nil))
(insn 419 418 420 23 (set (reg:SI 0 ax [orig:275 D.6813 ] [275])
        (reg:SI 0 ax [458])) preproc.cpp:474 90 {*movsi_internal}
     (nil))
(insn 420 419 421 23 (set (reg:DF 22 xmm1 [orig:276 D.6817 ] [276])
        (float:DF (reg:SI 0 ax [orig:275 D.6813 ] [275]))) preproc.cpp:474 201 {*floatsidf2_sse}
     (nil))
(insn 421 420 422 23 (set (reg:DF 21 xmm0 [orig:277 D.6817 ] [277])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:474 152 {*extendsfdf2_sse}
     (nil))
(insn 422 421 423 23 (set (reg:DF 22 xmm1 [orig:278 D.6817 ] [278])
        (mult:DF (reg:DF 22 xmm1 [orig:276 D.6817 ] [276])
            (reg:DF 21 xmm0 [orig:277 D.6817 ] [277]))) preproc.cpp:474 776 {*fop_df_comm_sse}
     (nil))
(insn 423 422 424 23 (set (reg:DF 21 xmm0 [orig:279 D.6817 ] [279])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:474 152 {*extendsfdf2_sse}
     (nil))
(insn 424 423 425 23 (set (reg:DF 21 xmm0 [orig:280 D.6817 ] [280])
        (plus:DF (reg:DF 21 xmm0 [orig:279 D.6817 ] [279])
            (reg:DF 22 xmm1 [orig:278 D.6817 ] [278]))) preproc.cpp:474 776 {*fop_df_comm_sse}
     (nil))
(insn 425 424 426 23 (set (reg:V2DF 22 xmm1 [459])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:474 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 426 425 427 23 (parallel [
            (set (reg:DF 21 xmm0 [orig:281 D.6817 ] [281])
                (abs:DF (reg:DF 21 xmm0 [orig:280 D.6817 ] [280])))
            (use (reg:V2DF 22 xmm1 [459]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:280 D.6817 ] [280]))
        (nil)))
(insn 427 426 428 23 (set (reg:DF 22 xmm1 [460])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:474 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 428 427 429 23 (set (reg:DF 22 xmm1 [orig:282 D.6817 ] [282])
        (mult:DF (reg:DF 22 xmm1 [460])
            (reg:DF 21 xmm0 [orig:281 D.6817 ] [281]))) preproc.cpp:474 776 {*fop_df_comm_sse}
     (nil))
(insn 429 428 430 23 (set (reg/f:DI 0 ax [461])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:474 89 {*movdi_internal}
     (nil))
(insn 430 429 431 23 (parallel [
            (set (reg/f:DI 0 ax [orig:283 D.6818 ] [283])
                (plus:DI (reg/f:DI 0 ax [461])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:474 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 431 430 432 23 (set (reg:SF 21 xmm0 [orig:284 D.6812 ] [284])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:283 D.6818 ] [283])
                (const_int 28 [0x1c])) [0 _219->comp_filter+0 S4 A32])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(insn 432 431 433 23 (set (reg:DF 21 xmm0 [orig:285 D.6817 ] [285])
        (float_extend:DF (reg:SF 21 xmm0 [orig:284 D.6812 ] [284]))) preproc.cpp:474 152 {*extendsfdf2_sse}
     (nil))
(insn 433 432 435 23 (set (reg:DF 21 xmm0 [orig:286 D.6817 ] [286])
        (mult:DF (reg:DF 21 xmm0 [orig:285 D.6817 ] [285])
            (reg:DF 22 xmm1 [orig:282 D.6817 ] [282]))) preproc.cpp:474 776 {*fop_df_comm_sse}
     (nil))
(call_insn 435 433 437 23 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b571929d100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:474 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 437 435 609 23 (set (reg:SF 21 xmm0 [orig:288 D.6812 ] [288])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:287 D.6817 ] [287]))) preproc.cpp:474 157 {*truncdfsf_fast_sse}
     (nil))
(note 609 437 632 23 NOTE_INSN_DELETED)
(note 632 609 438 23 NOTE_INSN_DELETED)
(insn 438 632 608 23 (set (reg:SF 21 xmm0 [orig:289 D.6812 ] [289])
        (mult:SF (reg:SF 21 xmm0 [orig:289 D.6812 ] [289])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:474 775 {*fop_sf_comm_sse}
     (nil))
(insn 608 438 439 23 (set (reg:SF 0 ax [orig:289 D.6812 ] [289])
        (reg:SF 21 xmm0 [orig:289 D.6812 ] [289])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(insn 439 608 559 23 (set (mem:SF (reg/f:DI 3 bx [orig:269 D.6816 ] [269]) [0 *_205+0 S4 A32])
        (reg:SF 0 ax [orig:289 D.6812 ] [289])) preproc.cpp:474 129 {*movsf_internal}
     (nil))
(jump_insn 559 439 560 23 (set (pc)
        (label_ref 523)) preproc.cpp:474 636 {jump}
     (nil)
 -> 523)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 560 559 442)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21
;;              22
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 290 462
(code_label 442 560 443 24 88 "" [2 uses])
(note 443 442 444 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 444 443 445 24 (set (reg/f:DI 0 ax [462])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:475 89 {*movdi_internal}
     (nil))
(insn 445 444 446 24 (set (reg:SI 0 ax [orig:290 D.6813 ] [290])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [462])
                (const_int 40 [0x28])) [0 preprocess_12(D)->pre_quecc+0 S4 A32])) preproc.cpp:475 90 {*movsi_internal}
     (nil))
(insn 446 445 447 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:290 D.6813 ] [290])
            (const_int 0 [0]))) preproc.cpp:475 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 447 446 448 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 523)
            (pc))) preproc.cpp:475 596 {*jcc_1}
     (nil)
 -> 523)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484
(note 448 447 449 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 449 448 450 25 (set (reg:SI 0 ax [463])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 450 449 451 25 (set (reg:DI 0 ax [orig:291 D.6814 ] [291])
        (sign_extend:DI (reg:SI 0 ax [463]))) preproc.cpp:476 142 {*extendsidi2_rex64}
     (nil))
(insn 451 450 452 25 (parallel [
            (set (reg:DI 1 dx [orig:292 D.6814 ] [292])
                (ashift:DI (reg:DI 0 ax [orig:291 D.6814 ] [291])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 497 {*ashldi3_1}
     (nil))
(insn 452 451 453 25 (set (reg/f:DI 0 ax [464])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:476 89 {*movdi_internal}
     (nil))
(insn 453 452 454 25 (parallel [
            (set (reg/f:DI 3 bx [orig:293 D.6816 ] [293])
                (plus:DI (reg:DI 1 dx [orig:292 D.6814 ] [292])
                    (reg/f:DI 0 ax [464])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:292 D.6814 ] [292]))
        (nil)))
(insn 454 453 455 25 (set (reg:SI 0 ax [465])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 455 454 456 25 (set (reg:DI 0 ax [orig:294 D.6814 ] [294])
        (sign_extend:DI (reg:SI 0 ax [465]))) preproc.cpp:476 142 {*extendsidi2_rex64}
     (nil))
(insn 456 455 457 25 (parallel [
            (set (reg:DI 1 dx [orig:295 D.6814 ] [295])
                (ashift:DI (reg:DI 0 ax [orig:294 D.6814 ] [294])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 497 {*ashldi3_1}
     (nil))
(insn 457 456 458 25 (set (reg/f:DI 0 ax [466])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:476 89 {*movdi_internal}
     (nil))
(insn 458 457 459 25 (parallel [
            (set (reg/f:DI 0 ax [orig:296 D.6816 ] [296])
                (plus:DI (reg/f:DI 0 ax [466])
                    (reg:DI 1 dx [orig:295 D.6814 ] [295])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:295 D.6814 ] [295]))
        (nil)))
(insn 459 458 610 25 (set (reg:SF 27 xmm6 [orig:297 D.6812 ] [297])
        (mem:SF (reg/f:DI 0 ax [orig:296 D.6816 ] [296]) [0 *_232+0 S4 A32])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 610 459 645 25 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 27 xmm6 [orig:297 D.6812 ] [297])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(note 645 610 629 25 NOTE_INSN_DELETED)
(note 629 645 460 25 NOTE_INSN_DELETED)
(insn 460 629 611 25 (set (reg:SI 0 ax [467])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 611 460 461 25 (set (reg:SI 1 dx [468])
        (reg:SI 0 ax [467])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 461 611 462 25 (parallel [
            (set (reg:SI 1 dx [468])
                (lshiftrt:SI (reg:SI 1 dx [468])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 529 {*lshrsi3_1}
     (nil))
(insn 462 461 463 25 (parallel [
            (set (reg:SI 0 ax [469])
                (plus:SI (reg:SI 0 ax [467])
                    (reg:SI 1 dx [468])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 220 {*addsi_1}
     (nil))
(insn 463 462 464 25 (parallel [
            (set (reg:SI 0 ax [470])
                (ashiftrt:SI (reg:SI 0 ax [469])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 530 {*ashrsi3_1}
     (nil))
(insn 464 463 465 25 (set (reg:SI 0 ax [orig:298 D.6813 ] [298])
        (reg:SI 0 ax [470])) preproc.cpp:476 90 {*movsi_internal}
     (nil))
(insn 465 464 466 25 (set (reg:DF 22 xmm1 [orig:299 D.6817 ] [299])
        (float:DF (reg:SI 0 ax [orig:298 D.6813 ] [298]))) preproc.cpp:476 201 {*floatsidf2_sse}
     (nil))
(insn 466 465 467 25 (set (reg:DF 21 xmm0 [orig:300 D.6817 ] [300])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:476 152 {*extendsfdf2_sse}
     (nil))
(insn 467 466 468 25 (set (reg:DF 22 xmm1 [orig:301 D.6817 ] [301])
        (mult:DF (reg:DF 22 xmm1 [orig:299 D.6817 ] [299])
            (reg:DF 21 xmm0 [orig:300 D.6817 ] [300]))) preproc.cpp:476 776 {*fop_df_comm_sse}
     (nil))
(insn 468 467 469 25 (set (reg:DF 21 xmm0 [orig:302 D.6817 ] [302])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:476 152 {*extendsfdf2_sse}
     (nil))
(insn 469 468 470 25 (set (reg:DF 21 xmm0 [orig:303 D.6817 ] [303])
        (plus:DF (reg:DF 21 xmm0 [orig:302 D.6817 ] [302])
            (reg:DF 22 xmm1 [orig:301 D.6817 ] [301]))) preproc.cpp:476 776 {*fop_df_comm_sse}
     (nil))
(insn 470 469 471 25 (set (reg:V2DF 22 xmm1 [471])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:476 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 471 470 472 25 (parallel [
            (set (reg:DF 21 xmm0 [orig:304 D.6817 ] [304])
                (abs:DF (reg:DF 21 xmm0 [orig:303 D.6817 ] [303])))
            (use (reg:V2DF 22 xmm1 [471]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:303 D.6817 ] [303]))
        (nil)))
(insn 472 471 473 25 (set (reg:DF 22 xmm1 [472])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:476 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 473 472 474 25 (set (reg:DF 22 xmm1 [orig:305 D.6817 ] [305])
        (mult:DF (reg:DF 22 xmm1 [472])
            (reg:DF 21 xmm0 [orig:304 D.6817 ] [304]))) preproc.cpp:476 776 {*fop_df_comm_sse}
     (nil))
(insn 474 473 475 25 (set (reg/f:DI 0 ax [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:476 89 {*movdi_internal}
     (nil))
(insn 475 474 476 25 (parallel [
            (set (reg/f:DI 0 ax [orig:306 D.6818 ] [306])
                (plus:DI (reg/f:DI 0 ax [473])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:476 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 476 475 477 25 (set (reg:SF 21 xmm0 [orig:307 D.6812 ] [307])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:306 D.6818 ] [306])
                (const_int 28 [0x1c])) [0 _242->comp_filter+0 S4 A32])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 477 476 478 25 (set (reg:DF 21 xmm0 [orig:308 D.6817 ] [308])
        (float_extend:DF (reg:SF 21 xmm0 [orig:307 D.6812 ] [307]))) preproc.cpp:476 152 {*extendsfdf2_sse}
     (nil))
(insn 478 477 480 25 (set (reg:DF 21 xmm0 [orig:309 D.6817 ] [309])
        (mult:DF (reg:DF 21 xmm0 [orig:308 D.6817 ] [308])
            (reg:DF 22 xmm1 [orig:305 D.6817 ] [305]))) preproc.cpp:476 776 {*fop_df_comm_sse}
     (nil))
(call_insn 480 478 482 25 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b571929d100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:476 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 482 480 615 25 (set (reg:SF 21 xmm0 [orig:311 D.6812 ] [311])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:310 D.6817 ] [310]))) preproc.cpp:476 157 {*truncdfsf_fast_sse}
     (nil))
(note 615 482 631 25 NOTE_INSN_DELETED)
(note 631 615 483 25 NOTE_INSN_DELETED)
(insn 483 631 614 25 (set (reg:SF 21 xmm0 [orig:312 D.6812 ] [312])
        (mult:SF (reg:SF 21 xmm0 [orig:312 D.6812 ] [312])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:476 775 {*fop_sf_comm_sse}
     (nil))
(insn 614 483 484 25 (set (reg:SF 0 ax [orig:312 D.6812 ] [312])
        (reg:SF 21 xmm0 [orig:312 D.6812 ] [312])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 484 614 485 25 (set (mem:SF (reg/f:DI 3 bx [orig:293 D.6816 ] [293]) [0 *_229+0 S4 A32])
        (reg:SF 0 ax [orig:312 D.6812 ] [312])) preproc.cpp:476 129 {*movsf_internal}
     (nil))
(insn 485 484 486 25 (set (reg:SI 0 ax [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 486 485 487 25 (set (reg:DI 0 ax [orig:313 D.6815 ] [313])
        (sign_extend:DI (reg:SI 0 ax [474]))) preproc.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 487 486 488 25 (parallel [
            (set (reg:DI 0 ax [orig:314 D.6815 ] [314])
                (plus:DI (reg:DI 0 ax [orig:313 D.6815 ] [313])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 221 {*adddi_1}
     (nil))
(insn 488 487 489 25 (parallel [
            (set (reg:DI 1 dx [orig:315 D.6815 ] [315])
                (ashift:DI (reg:DI 0 ax [orig:314 D.6815 ] [314])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 497 {*ashldi3_1}
     (nil))
(insn 489 488 490 25 (set (reg/f:DI 0 ax [475])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:477 89 {*movdi_internal}
     (nil))
(insn 490 489 491 25 (parallel [
            (set (reg/f:DI 3 bx [orig:316 D.6816 ] [316])
                (plus:DI (reg:DI 1 dx [orig:315 D.6815 ] [315])
                    (reg/f:DI 0 ax [475])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:315 D.6815 ] [315]))
        (nil)))
(insn 491 490 492 25 (set (reg:SI 0 ax [476])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 492 491 493 25 (set (reg:DI 0 ax [orig:317 D.6815 ] [317])
        (sign_extend:DI (reg:SI 0 ax [476]))) preproc.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 493 492 494 25 (parallel [
            (set (reg:DI 0 ax [orig:318 D.6815 ] [318])
                (plus:DI (reg:DI 0 ax [orig:317 D.6815 ] [317])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 221 {*adddi_1}
     (nil))
(insn 494 493 495 25 (parallel [
            (set (reg:DI 1 dx [orig:319 D.6815 ] [319])
                (ashift:DI (reg:DI 0 ax [orig:318 D.6815 ] [318])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 497 {*ashldi3_1}
     (nil))
(insn 495 494 496 25 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 unsup_data+0 S8 A64])) preproc.cpp:477 89 {*movdi_internal}
     (nil))
(insn 496 495 497 25 (parallel [
            (set (reg/f:DI 0 ax [orig:320 D.6816 ] [320])
                (plus:DI (reg/f:DI 0 ax [477])
                    (reg:DI 1 dx [orig:319 D.6815 ] [319])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:319 D.6815 ] [319]))
        (nil)))
(insn 497 496 616 25 (set (reg:SF 28 xmm7 [orig:321 D.6812 ] [321])
        (mem:SF (reg/f:DI 0 ax [orig:320 D.6816 ] [320]) [0 *_256+0 S4 A32])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
(insn 616 497 644 25 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32])
        (reg:SF 28 xmm7 [orig:321 D.6812 ] [321])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
(note 644 616 628 25 NOTE_INSN_DELETED)
(note 628 644 498 25 NOTE_INSN_DELETED)
(insn 498 628 617 25 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 617 498 499 25 (set (reg:SI 1 dx [479])
        (reg:SI 0 ax [478])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 499 617 500 25 (parallel [
            (set (reg:SI 1 dx [479])
                (lshiftrt:SI (reg:SI 1 dx [479])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 529 {*lshrsi3_1}
     (nil))
(insn 500 499 501 25 (parallel [
            (set (reg:SI 0 ax [480])
                (plus:SI (reg:SI 0 ax [478])
                    (reg:SI 1 dx [479])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 220 {*addsi_1}
     (nil))
(insn 501 500 502 25 (parallel [
            (set (reg:SI 0 ax [481])
                (ashiftrt:SI (reg:SI 0 ax [480])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 530 {*ashrsi3_1}
     (nil))
(insn 502 501 503 25 (set (reg:SI 0 ax [orig:322 D.6813 ] [322])
        (reg:SI 0 ax [481])) preproc.cpp:477 90 {*movsi_internal}
     (nil))
(insn 503 502 504 25 (set (reg:DF 22 xmm1 [orig:323 D.6817 ] [323])
        (float:DF (reg:SI 0 ax [orig:322 D.6813 ] [322]))) preproc.cpp:477 201 {*floatsidf2_sse}
     (nil))
(insn 504 503 505 25 (set (reg:DF 21 xmm0 [orig:324 D.6817 ] [324])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 dwell+0 S4 A32]))) preproc.cpp:477 152 {*extendsfdf2_sse}
     (nil))
(insn 505 504 506 25 (set (reg:DF 22 xmm1 [orig:325 D.6817 ] [325])
        (mult:DF (reg:DF 22 xmm1 [orig:323 D.6817 ] [323])
            (reg:DF 21 xmm0 [orig:324 D.6817 ] [324]))) preproc.cpp:477 776 {*fop_df_comm_sse}
     (nil))
(insn 506 505 507 25 (set (reg:DF 21 xmm0 [orig:326 D.6817 ] [326])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 delay+0 S4 A32]))) preproc.cpp:477 152 {*extendsfdf2_sse}
     (nil))
(insn 507 506 508 25 (set (reg:DF 21 xmm0 [orig:327 D.6817 ] [327])
        (plus:DF (reg:DF 21 xmm0 [orig:326 D.6817 ] [326])
            (reg:DF 22 xmm1 [orig:325 D.6817 ] [325]))) preproc.cpp:477 776 {*fop_df_comm_sse}
     (nil))
(insn 508 507 509 25 (set (reg:V2DF 22 xmm1 [482])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S16 A128])) preproc.cpp:477 1154 {*movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF +QNaN [+QNaN])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 509 508 510 25 (parallel [
            (set (reg:DF 21 xmm0 [orig:328 D.6817 ] [328])
                (abs:DF (reg:DF 21 xmm0 [orig:327 D.6817 ] [327])))
            (use (reg:V2DF 22 xmm1 [482]))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 455 {*absnegdf2_sse}
     (expr_list:REG_EQUAL (abs:DF (reg:DF 21 xmm0 [orig:327 D.6817 ] [327]))
        (nil)))
(insn 510 509 511 25 (set (reg:DF 22 xmm1 [483])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0  S8 A64])) preproc.cpp:477 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF -3.141592653589793115997963468544185161590576171875e+0 [-0x0.c90fdaa22168cp+2])
        (nil)))
(insn 511 510 512 25 (set (reg:DF 22 xmm1 [orig:329 D.6817 ] [329])
        (mult:DF (reg:DF 22 xmm1 [483])
            (reg:DF 21 xmm0 [orig:328 D.6817 ] [328]))) preproc.cpp:477 776 {*fop_df_comm_sse}
     (nil))
(insn 512 511 513 25 (set (reg/f:DI 0 ax [484])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 preprocess+0 S8 A64])) preproc.cpp:477 89 {*movdi_internal}
     (nil))
(insn 513 512 514 25 (parallel [
            (set (reg/f:DI 0 ax [orig:330 D.6818 ] [330])
                (plus:DI (reg/f:DI 0 ax [484])
                    (const_int 72 [0x48])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:477 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 preprocess+0 S8 A64])
            (const_int 72 [0x48]))
        (nil)))
(insn 514 513 515 25 (set (reg:SF 21 xmm0 [orig:331 D.6812 ] [331])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:330 D.6818 ] [330])
                (const_int 28 [0x1c])) [0 _266->comp_filter+0 S4 A32])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
(insn 515 514 516 25 (set (reg:DF 21 xmm0 [orig:332 D.6817 ] [332])
        (float_extend:DF (reg:SF 21 xmm0 [orig:331 D.6812 ] [331]))) preproc.cpp:477 152 {*extendsfdf2_sse}
     (nil))
(insn 516 515 518 25 (set (reg:DF 21 xmm0 [orig:333 D.6817 ] [333])
        (mult:DF (reg:DF 21 xmm0 [orig:332 D.6817 ] [332])
            (reg:DF 22 xmm1 [orig:329 D.6817 ] [329]))) preproc.cpp:477 776 {*fop_df_comm_sse}
     (nil))
(call_insn 518 516 520 25 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("exp") [flags 0x41]  <function_decl 0x2b571929d100 exp>) [0 __builtin_exp S1 A8])
            (const_int 0 [0]))) preproc.cpp:477 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 520 518 621 25 (set (reg:SF 21 xmm0 [orig:335 D.6812 ] [335])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:334 D.6817 ] [334]))) preproc.cpp:477 157 {*truncdfsf_fast_sse}
     (nil))
(note 621 520 630 25 NOTE_INSN_DELETED)
(note 630 621 521 25 NOTE_INSN_DELETED)
(insn 521 630 620 25 (set (reg:SF 21 xmm0 [orig:336 D.6812 ] [336])
        (mult:SF (reg:SF 21 xmm0 [orig:336 D.6812 ] [336])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 %sfp+-68 S4 A32]))) preproc.cpp:477 775 {*fop_sf_comm_sse}
     (nil))
(insn 620 521 522 25 (set (reg:SF 0 ax [orig:336 D.6812 ] [336])
        (reg:SF 21 xmm0 [orig:336 D.6812 ] [336])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
(insn 522 620 523 25 (set (mem:SF (reg/f:DI 3 bx [orig:316 D.6816 ] [316]) [0 *_252+0 S4 A32])
        (reg:SF 0 ax [orig:336 D.6812 ] [336])) preproc.cpp:477 129 {*movsf_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              24
;;              23 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 523 522 524 26 89 "" [2 uses])
(note 524 523 525 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 525 524 526 26 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:471 220 {*addsi_1}
     (nil))
;;  succ:       27 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU,DFS_BACK)
;;              20 [100.0%] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 241 485
(code_label 526 525 527 27 87 "" [1 uses])
(note 527 526 528 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 528 527 529 27 (set (reg/f:DI 0 ax [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 procpar_info+0 S8 A64])) preproc.cpp:471 89 {*movdi_internal}
     (nil))
(insn 529 528 531 27 (set (reg:SI 0 ax [orig:241 D.6813 ] [241])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [485])
                (const_int 300 [0x12c])) [0 procpar_info_6(D)->num_points+0 S4 A32])) preproc.cpp:471 90 {*movsi_internal}
     (nil))
(insn 531 529 532 27 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:241 D.6813 ] [241])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32]))) preproc.cpp:471 7 {*cmpsi_1}
     (nil))
(jump_insn 532 531 533 27 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 530)
            (pc))) preproc.cpp:471 596 {*jcc_1}
     (nil)
 -> 530)
;;  succ:       21
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;;              19
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 337 338
(code_label 533 532 534 28 85 "" [1 uses])
(note 534 533 535 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 535 534 538 28 (set (reg:SI 0 ax [orig:337 D.6813 ] [337])
        (const_int 1 [0x1])) preproc.cpp:483 90 {*movsi_internal}
     (nil))
(insn 538 535 542 28 (set (reg:SI 0 ax [orig:338 <retval> ] [338])
        (reg:SI 0 ax [orig:337 D.6813 ] [337])) preproc.cpp:483 90 {*movsi_internal}
     (nil))
(insn 542 538 543 28 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:338 <retval> ] [338])) preproc.cpp:485 90 {*movsi_internal}
     (nil))
(insn 543 542 561 28 (use (reg/i:SI 0 ax)) preproc.cpp:485 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 561 543 0 NOTE_INSN_DELETED)

;; Function int quecc(float*, float*, float*, Procpar_info*, Preprocess*) (_Z5queccPfS_S_P12Procpar_infoP10Preprocess, funcdef_no=10, decl_uid=5376, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=192, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=160, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 26:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 32:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 34:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 44:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 51:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 53:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 60:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 74:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 75:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 80
	 Choosing alt 0 in insn 80:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 81:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 94:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 95:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 101:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 108:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 117:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 125:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 131:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 132:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 138:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 146:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 151:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 152:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 155:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 162
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 163:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 167:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 169
	 Choosing alt 0 in insn 169:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 170:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 172:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 175:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 176:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 178
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 179:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 183:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 186
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 187:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 189
	 Choosing alt 0 in insn 189:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 190
	 Choosing alt 0 in insn 190:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 193:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 194:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 197:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 198:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 199
	 Choosing alt 0 in insn 199:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 200:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 205:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 207
	 Choosing alt 0 in insn 207:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 208:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (1) rzw {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=5,overall=1214,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=6,overall=1224,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=10,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=618,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=12,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
          alt=14,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=19,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=16,overall=11,losers=1 -- refuse
          alt=17,overall=0,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 213:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 214:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 215:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 222:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 223:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 228:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 229:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=352 from oldreg=312, assigning class SSE_REGS to r352
  229: r352:DF=r352:DF/[frame:DI-0x28]
      REG_DEAD r313:DF
    Inserting insn reload before:
  413: r352:DF=r313:DF
    Inserting insn reload after:
  414: r312:DF=r352:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 414:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 230:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 233:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 234:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=353 from oldreg=314, assigning class SSE_REGS to r353
  234: r353:DF=r353:DF-[frame:DI-0x30]
      REG_DEAD r315:DF
    Inserting insn reload before:
  415: r353:DF=r315:DF
    Inserting insn reload after:
  416: r314:DF=r353:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 416:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 235:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 238:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 241:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=354 from oldreg=196, assigning class SSE_REGS to r354
  241: r354:SF=float_trunc([frame:DI-0x70])
    Inserting insn reload after:
  417: r196:SF=r354:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 417:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 242:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=355, assigning class NO_REGS to secondary r355
  243: r355:DF=r318:DF
      REG_DEAD r318:DF
    Inserting the sec. move after:
  418: xmm0:DF=r355:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 418:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 247
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=356 from oldreg=199, assigning class SSE_REGS to r356
      Creating newreg=357 from oldreg=196, assigning class SSE_REGS to r357
      Making reload reg 357 for reg 196 optional
  247: r356:SF=r356:SF*r357:SF
      REG_DEAD r198:SF
      REG_DEAD r196:SF
    Inserting insn reload before:
  419: r356:SF=r198:SF
  421: r357:SF=r196:SF
    Inserting insn reload after:
  420: r199:SF=r356:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 420:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 421:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 248:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 251:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 252:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 255:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=358 from oldreg=204, assigning class SSE_REGS to r358
  255: r358:SF=float_trunc([frame:DI-0x70])
    Inserting insn reload after:
  422: r204:SF=r358:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 422:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 256:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=359, assigning class NO_REGS to secondary r359
  257: r359:DF=r321:DF
      REG_DEAD r321:DF
    Inserting the sec. move after:
  423: xmm0:DF=r359:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 423:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 261
	 Choosing alt 0 in insn 261:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=360 from oldreg=207, assigning class SSE_REGS to r360
      Creating newreg=361 from oldreg=204, assigning class SSE_REGS to r361
      Making reload reg 361 for reg 204 optional
  261: r360:SF=r360:SF*r361:SF
      REG_DEAD r206:SF
      REG_DEAD r204:SF
    Inserting insn reload before:
  424: r360:SF=r206:SF
  426: r361:SF=r204:SF
    Inserting insn reload after:
  425: r207:SF=r360:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 425:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 426:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 262:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 263:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) x  (1) xm {*cmpiudf_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 270:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 271:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 276:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 277:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=362 from oldreg=324, assigning class SSE_REGS to r362
  277: r362:DF=r362:DF/[frame:DI-0x28]
      REG_DEAD r325:DF
    Inserting insn reload before:
  427: r362:DF=r325:DF
    Inserting insn reload after:
  428: r324:DF=r362:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 428:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 278:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 281:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 282:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=363 from oldreg=326, assigning class SSE_REGS to r363
  282: r363:DF=r363:DF-[frame:DI-0x30]
      REG_DEAD r327:DF
    Inserting insn reload before:
  429: r363:DF=r327:DF
    Inserting insn reload after:
  430: r326:DF=r363:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 430:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 283:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 285:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 286:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 289:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=364 from oldreg=211, assigning class SSE_REGS to r364
  289: r364:SF=float_trunc([frame:DI-0x68])
    Inserting insn reload after:
  431: r211:SF=r364:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 431:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 290:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=365, assigning class NO_REGS to secondary r365
  291: r365:DF=r330:DF
      REG_DEAD r330:DF
    Inserting the sec. move after:
  432: xmm0:DF=r365:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 432:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 295
	 Choosing alt 0 in insn 295:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=366 from oldreg=214, assigning class SSE_REGS to r366
      Creating newreg=367 from oldreg=211, assigning class SSE_REGS to r367
      Making reload reg 367 for reg 211 optional
  295: r366:SF=r366:SF*r367:SF
      REG_DEAD r213:SF
      REG_DEAD r211:SF
    Inserting insn reload before:
  433: r366:SF=r213:SF
  435: r367:SF=r211:SF
    Inserting insn reload after:
  434: r214:SF=r366:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 434:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 435:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 296:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 299:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 303:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=368 from oldreg=219, assigning class SSE_REGS to r368
  303: r368:SF=float_trunc([frame:DI-0x68])
    Inserting insn reload after:
  436: r219:SF=r368:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 436:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 304:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=369, assigning class NO_REGS to secondary r369
  305: r369:DF=r333:DF
      REG_DEAD r333:DF
    Inserting the sec. move after:
  437: xmm0:DF=r369:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 437:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=370 from oldreg=222, assigning class SSE_REGS to r370
      Creating newreg=371 from oldreg=219, assigning class SSE_REGS to r371
      Making reload reg 371 for reg 219 optional
  309: r370:SF=r370:SF*r371:SF
      REG_DEAD r221:SF
      REG_DEAD r219:SF
    Inserting insn reload before:
  438: r370:SF=r221:SF
  440: r371:SF=r219:SF
    Inserting insn reload after:
  439: r222:SF=r370:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 439:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 440:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 310:  (0) ?m  (1) rF {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 315:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 316:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=372 from oldreg=334, assigning class SSE_REGS to r372
  316: r372:DF=r372:DF-[frame:DI-0x48]
      REG_DEAD r335:DF
    Inserting insn reload before:
  441: r372:DF=r335:DF
    Inserting insn reload after:
  442: r334:DF=r372:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 442:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 317:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=5,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=7,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            alt=9: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=10,overall=609,losers=1,rld_nregs=1
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 318:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=0,overall=8,losers=1,rld_nregs=2
	 Choosing alt 0 in insn 319:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
      Creating newreg=373 from oldreg=336, assigning class SSE_REGS to r373
  319: r373:DF=r373:DF-[frame:DI-0x48]
      REG_DEAD r337:DF
    Inserting insn reload before:
  443: r373:DF=r337:DF
    Inserting insn reload after:
  444: r336:DF=r373:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=5,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=6,overall=1222,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            alt=7: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=8: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=9: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=10,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=11,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=12,overall=11,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=13: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
          alt=14,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=15,overall=14,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=17,overall=1,losers=0,rld_nregs=0
	 Choosing alt 17 in insn 444:  (0) r  (1) Yj {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 320:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 323:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 326:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=374 from oldreg=226, assigning class SSE_REGS to r374
  326: r374:SF=float_trunc([frame:DI-0x60])
    Inserting insn reload after:
  445: r226:SF=r374:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 445:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 327:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=375, assigning class NO_REGS to secondary r375
  328: r375:DF=r340:DF
      REG_DEAD r340:DF
    Inserting the sec. move after:
  446: xmm0:DF=r375:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 446:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 332
	 Choosing alt 0 in insn 332:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=376 from oldreg=229, assigning class SSE_REGS to r376
      Creating newreg=377 from oldreg=226, assigning class SSE_REGS to r377
      Making reload reg 377 for reg 226 optional
  332: r376:SF=r376:SF*r377:SF
      REG_DEAD r228:SF
      REG_DEAD r226:SF
    Inserting insn reload before:
  447: r376:SF=r228:SF
  449: r377:SF=r226:SF
    Inserting insn reload after:
  448: r229:SF=r376:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 448:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 449:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 333:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 336:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 337:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 340:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=378 from oldreg=234, assigning class SSE_REGS to r378
  340: r378:SF=float_trunc([frame:DI-0x60])
    Inserting insn reload after:
  450: r234:SF=r378:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 450:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 341:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=379, assigning class NO_REGS to secondary r379
  342: r379:DF=r343:DF
      REG_DEAD r343:DF
    Inserting the sec. move after:
  451: xmm0:DF=r379:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 451:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 346
	 Choosing alt 0 in insn 346:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=380 from oldreg=237, assigning class SSE_REGS to r380
      Creating newreg=381 from oldreg=234, assigning class SSE_REGS to r381
      Making reload reg 381 for reg 234 optional
  346: r380:SF=r380:SF*r381:SF
      REG_DEAD r236:SF
      REG_DEAD r234:SF
    Inserting insn reload before:
  452: r380:SF=r236:SF
  454: r381:SF=r234:SF
    Inserting insn reload after:
  453: r237:SF=r380:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 453:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 454:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 347:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 353:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=382 from oldreg=241, assigning class SSE_REGS to r382
  353: r382:SF=float_trunc([frame:DI-0x58])
    Inserting insn reload after:
  455: r241:SF=r382:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 455:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 354:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=383, assigning class NO_REGS to secondary r383
  355: r383:DF=r346:DF
      REG_DEAD r346:DF
    Inserting the sec. move after:
  456: xmm0:DF=r383:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 456:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 359
	 Choosing alt 0 in insn 359:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=384 from oldreg=244, assigning class SSE_REGS to r384
      Creating newreg=385 from oldreg=241, assigning class SSE_REGS to r385
      Making reload reg 385 for reg 241 optional
  359: r384:SF=r384:SF*r385:SF
      REG_DEAD r243:SF
      REG_DEAD r241:SF
    Inserting insn reload before:
  457: r384:SF=r243:SF
  459: r385:SF=r241:SF
    Inserting insn reload after:
  458: r244:SF=r384:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 458:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 459:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 360:  (0) ?m  (1) rF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 363:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 364:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 367:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=386 from oldreg=249, assigning class SSE_REGS to r386
  367: r386:SF=float_trunc([frame:DI-0x58])
    Inserting insn reload after:
  460: r249:SF=r386:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=3,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=613,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=2,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 460:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=5,overall=6,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 368:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=6,overall=18,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=11,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=12,overall=12,losers=1 -- refuse
            0 Costly set: reject++
            alt=13: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            alt=14,overall=14,losers=2 -- refuse
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            alt=15,overall=10,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=16,overall=12,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=17,overall=615,losers=2 -- refuse
            alt=18: Bad operand -- refuse
      Creating newreg=387, assigning class NO_REGS to secondary r387
  369: r387:DF=r349:DF
      REG_DEAD r349:DF
    Inserting the sec. move after:
  461: xmm0:DF=r387:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=6,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=621,losers=2 -- refuse
            alt=9: Bad operand -- refuse
          alt=10,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=11,overall=1,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 461:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (1) rzw {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            2 Non pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=2
  Commutative operand exchange in insn 373
	 Choosing alt 0 in insn 373:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=388 from oldreg=252, assigning class SSE_REGS to r388
      Creating newreg=389 from oldreg=249, assigning class SSE_REGS to r389
      Making reload reg 389 for reg 249 optional
  373: r388:SF=r388:SF*r389:SF
      REG_DEAD r251:SF
      REG_DEAD r249:SF
    Inserting insn reload before:
  462: r388:SF=r251:SF
  464: r389:SF=r249:SF
    Inserting insn reload after:
  463: r252:SF=r388:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1227,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=3,overall=1212,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=4,overall=1222,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=7,overall=613,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=11,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=7,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 463:  (0) ?r  (1) Yj {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 464:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 374:  (0) ?m  (1) rF {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 377:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 383:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=390 from oldreg=204, assigning class SSE_REGS to inheritance r390
    Original reg change 204->390 (bb7):
  422: r390:SF=r358:SF
    Add original<-inheritance after:
  465: r204:SF=r390:SF

    Inheritance reuse change 204->390 (bb7):
  426: r361:SF=r390:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=391 from oldreg=196, assigning class SSE_REGS to inheritance r391
    Original reg change 196->391 (bb7):
  417: r391:SF=r354:SF
    Add original<-inheritance after:
  466: r196:SF=r391:SF

    Inheritance reuse change 196->391 (bb7):
  421: r357:SF=r391:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   465: r204:SF=r390:SF
deleting insn with uid = 465.
	    Removing dead insn:
   466: r196:SF=r391:SF
deleting insn with uid = 466.
EBB 8
EBB 9
EBB 10
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=392 from oldreg=219, assigning class SSE_REGS to inheritance r392
    Original reg change 219->392 (bb10):
  436: r392:SF=r368:SF
    Add original<-inheritance after:
  467: r219:SF=r392:SF

    Inheritance reuse change 219->392 (bb10):
  440: r371:SF=r392:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=393 from oldreg=211, assigning class SSE_REGS to inheritance r393
    Original reg change 211->393 (bb10):
  431: r393:SF=r364:SF
    Add original<-inheritance after:
  468: r211:SF=r393:SF

    Inheritance reuse change 211->393 (bb10):
  435: r367:SF=r393:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   467: r219:SF=r392:SF
deleting insn with uid = 467.
	    Removing dead insn:
   468: r211:SF=r393:SF
deleting insn with uid = 468.
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=394 from oldreg=249, assigning class SSE_REGS to inheritance r394
    Original reg change 249->394 (bb11):
  460: r394:SF=r386:SF
    Add original<-inheritance after:
  469: r249:SF=r394:SF

    Inheritance reuse change 249->394 (bb11):
  464: r389:SF=r394:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=395 from oldreg=241, assigning class SSE_REGS to inheritance r395
    Original reg change 241->395 (bb11):
  455: r395:SF=r382:SF
    Add original<-inheritance after:
  470: r241:SF=r395:SF

    Inheritance reuse change 241->395 (bb11):
  459: r385:SF=r395:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=396 from oldreg=234, assigning class SSE_REGS to inheritance r396
    Original reg change 234->396 (bb11):
  450: r396:SF=r378:SF
    Add original<-inheritance after:
  471: r234:SF=r396:SF

    Inheritance reuse change 234->396 (bb11):
  454: r381:SF=r396:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=397 from oldreg=226, assigning class SSE_REGS to inheritance r397
    Original reg change 226->397 (bb11):
  445: r397:SF=r374:SF
    Add original<-inheritance after:
  472: r226:SF=r397:SF

    Inheritance reuse change 226->397 (bb11):
  449: r377:SF=r397:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   469: r249:SF=r394:SF
deleting insn with uid = 469.
	    Removing dead insn:
   470: r241:SF=r395:SF
deleting insn with uid = 470.
	    Removing dead insn:
   471: r234:SF=r396:SF
deleting insn with uid = 471.
	    Removing dead insn:
   472: r226:SF=r397:SF
deleting insn with uid = 472.
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 394: point = 0
   Insn 393: point = 0
   Insn 389: point = 1
   Insn 386: point = 3
  BB 13
   Insn 384: point = 4
   Insn 383: point = 4
   Insn 381: point = 5
   Insn 380: point = 7
  BB 2
   Insn 402: point = 8
   Insn 35: point = 8
   Insn 34: point = 8
   Insn 33: point = 9
   Insn 32: point = 10
   Insn 31: point = 11
   Insn 30: point = 12
   Insn 29: point = 13
   Insn 28: point = 14
   Insn 27: point = 15
   Insn 26: point = 16
   Insn 25: point = 17
   Insn 24: point = 18
   Insn 23: point = 19
   Insn 22: point = 20
   Insn 21: point = 21
   Insn 20: point = 22
   Insn 19: point = 23
   Insn 18: point = 24
   Insn 17: point = 25
   Insn 16: point = 26
   Insn 15: point = 27
   Insn 14: point = 28
   Insn 13: point = 29
   Insn 12: point = 30
   Insn 11: point = 31
   Insn 10: point = 32
   Insn 6: point = 32
   Insn 5: point = 32
   Insn 4: point = 32
   Insn 3: point = 32
   Insn 2: point = 32
  BB 12
   Insn 377: point = 32
  BB 10
   Insn 410: point = 32
   Insn 310: point = 32
   Insn 439: point = 33
	Hard reg 0 is preferable by r370 with profit 1
   Insn 309: point = 35
   Insn 440: point = 36
	   Creating copy r371<-r392@1
   Insn 438: point = 38
	Hard reg 0 is preferable by r370 with profit 1
	Hard reg 21 is preferable by r370 with profit 1
   Insn 308: point = 40
   Insn 307: point = 42
   Insn 306: point = 43
   Insn 437: point = 43
	Hard reg 21 is preferable by r369 with profit 1
   Insn 305: point = 44
	Hard reg 21 is preferable by r369 with profit 1
	Hard reg 0 is preferable by r369 with profit 1
   Insn 304: point = 46
   Insn 436: point = 47
	   Creating copy r368->r392@1
   Insn 303: point = 49
   Insn 302: point = 50
   Insn 301: point = 52
   Insn 300: point = 53
   Insn 299: point = 55
   Insn 298: point = 57
   Insn 297: point = 59
   Insn 296: point = 60
   Insn 434: point = 61
	Hard reg 0 is preferable by r366 with profit 1
   Insn 295: point = 63
   Insn 435: point = 64
	   Creating copy r367<-r393@1
   Insn 433: point = 66
	Hard reg 0 is preferable by r366 with profit 1
	Hard reg 21 is preferable by r366 with profit 1
   Insn 294: point = 68
   Insn 293: point = 70
   Insn 292: point = 71
   Insn 432: point = 71
	Hard reg 21 is preferable by r365 with profit 1
   Insn 291: point = 72
	Hard reg 21 is preferable by r365 with profit 1
	Hard reg 0 is preferable by r365 with profit 1
   Insn 290: point = 74
   Insn 431: point = 75
	   Creating copy r364->r393@1
   Insn 289: point = 77
   Insn 288: point = 78
   Insn 287: point = 80
   Insn 286: point = 81
   Insn 285: point = 83
   Insn 284: point = 85
   Insn 283: point = 86
   Insn 430: point = 87
	Hard reg 0 is preferable by r363 with profit 1
   Insn 282: point = 89
   Insn 429: point = 89
	Hard reg 0 is preferable by r363 with profit 1
	Hard reg 21 is preferable by r363 with profit 1
   Insn 281: point = 91
  BB 8
   Insn 408: point = 92
   Insn 271: point = 92
   Insn 270: point = 93
  BB 9
   Insn 278: point = 94
   Insn 428: point = 95
	Hard reg 0 is preferable by r362 with profit 1
   Insn 277: point = 97
   Insn 427: point = 97
	Hard reg 0 is preferable by r362 with profit 1
	Hard reg 21 is preferable by r362 with profit 1
   Insn 276: point = 99
  BB 7
   Insn 265: point = 100
   Insn 264: point = 100
   Insn 263: point = 101
   Insn 262: point = 102
   Insn 425: point = 103
	Hard reg 0 is preferable by r360 with profit 1
   Insn 261: point = 105
   Insn 426: point = 106
	   Creating copy r361<-r390@1
   Insn 424: point = 108
	Hard reg 0 is preferable by r360 with profit 1
	Hard reg 21 is preferable by r360 with profit 1
   Insn 260: point = 110
   Insn 259: point = 112
   Insn 258: point = 113
   Insn 423: point = 113
	Hard reg 21 is preferable by r359 with profit 1
   Insn 257: point = 114
	Hard reg 21 is preferable by r359 with profit 1
	Hard reg 0 is preferable by r359 with profit 1
   Insn 256: point = 116
   Insn 422: point = 117
	   Creating copy r358->r390@1
   Insn 255: point = 119
   Insn 254: point = 120
   Insn 253: point = 122
   Insn 252: point = 123
   Insn 251: point = 125
   Insn 250: point = 127
   Insn 249: point = 129
   Insn 248: point = 130
   Insn 420: point = 131
	Hard reg 0 is preferable by r356 with profit 1
   Insn 247: point = 133
   Insn 421: point = 134
	   Creating copy r357<-r391@1
   Insn 419: point = 136
	Hard reg 0 is preferable by r356 with profit 1
	Hard reg 21 is preferable by r356 with profit 1
   Insn 246: point = 138
   Insn 245: point = 140
   Insn 244: point = 141
   Insn 418: point = 141
	Hard reg 21 is preferable by r355 with profit 1
   Insn 243: point = 142
	Hard reg 21 is preferable by r355 with profit 1
	Hard reg 0 is preferable by r355 with profit 1
   Insn 242: point = 144
   Insn 417: point = 145
	   Creating copy r354->r391@1
   Insn 241: point = 147
   Insn 240: point = 148
   Insn 239: point = 150
   Insn 238: point = 151
   Insn 237: point = 153
   Insn 236: point = 155
   Insn 235: point = 156
   Insn 416: point = 157
	Hard reg 0 is preferable by r353 with profit 1
   Insn 234: point = 159
   Insn 415: point = 159
	Hard reg 0 is preferable by r353 with profit 1
	Hard reg 21 is preferable by r353 with profit 1
   Insn 233: point = 161
  BB 5
   Insn 405: point = 162
   Insn 223: point = 162
   Insn 222: point = 163
  BB 6
   Insn 230: point = 164
   Insn 414: point = 165
	Hard reg 0 is preferable by r352 with profit 1
   Insn 229: point = 167
   Insn 413: point = 167
	Hard reg 0 is preferable by r352 with profit 1
	Hard reg 21 is preferable by r352 with profit 1
   Insn 228: point = 169
  BB 4
   Insn 217: point = 170
   Insn 216: point = 170
   Insn 215: point = 171
   Insn 214: point = 172
   Insn 213: point = 173
   Insn 212: point = 174
   Insn 211: point = 174
   Insn 210: point = 175
   Insn 209: point = 176
   Insn 208: point = 178
   Insn 207: point = 180
   Insn 206: point = 182
   Insn 205: point = 183
   Insn 204: point = 185
   Insn 203: point = 187
   Insn 202: point = 189
   Insn 201: point = 190
   Insn 200: point = 192
   Insn 199: point = 194
   Insn 198: point = 196
   Insn 197: point = 197
   Insn 196: point = 199
   Insn 195: point = 201
   Insn 194: point = 202
   Insn 193: point = 203
   Insn 192: point = 204
   Insn 191: point = 204
   Insn 190: point = 205
   Insn 189: point = 207
   Insn 188: point = 209
   Insn 187: point = 211
   Insn 186: point = 213
   Insn 185: point = 215
   Insn 184: point = 216
   Insn 183: point = 218
   Insn 182: point = 220
   Insn 181: point = 222
   Insn 180: point = 223
   Insn 179: point = 225
   Insn 178: point = 227
   Insn 177: point = 229
   Insn 176: point = 230
   Insn 175: point = 232
   Insn 174: point = 234
   Insn 173: point = 236
   Insn 172: point = 237
   Insn 171: point = 239
   Insn 170: point = 241
   Insn 169: point = 243
   Insn 168: point = 245
   Insn 167: point = 246
   Insn 166: point = 248
   Insn 165: point = 250
   Insn 164: point = 251
   Insn 163: point = 253
   Insn 162: point = 255
   Insn 161: point = 257
   Insn 160: point = 258
   Insn 159: point = 260
   Insn 158: point = 262
  BB 11
   Insn 374: point = 263
   Insn 463: point = 264
	Hard reg 0 is preferable by r388 with profit 1
   Insn 373: point = 266
   Insn 464: point = 267
	   Creating copy r389<-r394@1
   Insn 462: point = 269
	Hard reg 0 is preferable by r388 with profit 1
	Hard reg 21 is preferable by r388 with profit 1
   Insn 372: point = 271
   Insn 371: point = 273
   Insn 370: point = 274
   Insn 461: point = 274
	Hard reg 21 is preferable by r387 with profit 1
   Insn 369: point = 275
	Hard reg 21 is preferable by r387 with profit 1
	Hard reg 0 is preferable by r387 with profit 1
   Insn 368: point = 277
   Insn 460: point = 278
	   Creating copy r386->r394@1
   Insn 367: point = 280
   Insn 366: point = 281
   Insn 365: point = 283
   Insn 364: point = 284
   Insn 363: point = 286
   Insn 362: point = 288
   Insn 361: point = 290
   Insn 360: point = 291
   Insn 458: point = 292
	Hard reg 0 is preferable by r384 with profit 1
   Insn 359: point = 294
   Insn 459: point = 295
	   Creating copy r385<-r395@1
   Insn 457: point = 297
	Hard reg 0 is preferable by r384 with profit 1
	Hard reg 21 is preferable by r384 with profit 1
   Insn 358: point = 299
   Insn 357: point = 301
   Insn 356: point = 302
   Insn 456: point = 302
	Hard reg 21 is preferable by r383 with profit 1
   Insn 355: point = 303
	Hard reg 21 is preferable by r383 with profit 1
	Hard reg 0 is preferable by r383 with profit 1
   Insn 354: point = 305
   Insn 455: point = 306
	   Creating copy r382->r395@1
   Insn 353: point = 308
   Insn 352: point = 309
   Insn 351: point = 311
   Insn 350: point = 312
   Insn 349: point = 314
   Insn 348: point = 316
   Insn 347: point = 317
   Insn 453: point = 318
	Hard reg 0 is preferable by r380 with profit 1
   Insn 346: point = 320
   Insn 454: point = 321
	   Creating copy r381<-r396@1
   Insn 452: point = 323
	Hard reg 0 is preferable by r380 with profit 1
	Hard reg 21 is preferable by r380 with profit 1
   Insn 345: point = 325
   Insn 344: point = 327
   Insn 343: point = 328
   Insn 451: point = 328
	Hard reg 21 is preferable by r379 with profit 1
   Insn 342: point = 329
	Hard reg 21 is preferable by r379 with profit 1
	Hard reg 0 is preferable by r379 with profit 1
   Insn 341: point = 331
   Insn 450: point = 332
	   Creating copy r378->r396@1
   Insn 340: point = 334
   Insn 339: point = 335
   Insn 338: point = 337
   Insn 337: point = 338
   Insn 336: point = 340
   Insn 335: point = 342
   Insn 334: point = 344
   Insn 333: point = 345
   Insn 448: point = 346
	Hard reg 0 is preferable by r376 with profit 1
   Insn 332: point = 348
   Insn 449: point = 349
	   Creating copy r377<-r397@1
   Insn 447: point = 351
	Hard reg 0 is preferable by r376 with profit 1
	Hard reg 21 is preferable by r376 with profit 1
   Insn 331: point = 353
   Insn 330: point = 355
   Insn 329: point = 356
   Insn 446: point = 356
	Hard reg 21 is preferable by r375 with profit 1
   Insn 328: point = 357
	Hard reg 21 is preferable by r375 with profit 1
	Hard reg 0 is preferable by r375 with profit 1
   Insn 327: point = 359
   Insn 445: point = 360
	   Creating copy r374->r397@1
   Insn 326: point = 362
   Insn 325: point = 363
   Insn 324: point = 365
   Insn 323: point = 366
   Insn 322: point = 368
   Insn 321: point = 370
   Insn 320: point = 371
   Insn 444: point = 372
	Hard reg 0 is preferable by r373 with profit 1
   Insn 319: point = 374
   Insn 443: point = 374
	Hard reg 0 is preferable by r373 with profit 1
	Hard reg 21 is preferable by r373 with profit 1
   Insn 318: point = 376
   Insn 317: point = 377
   Insn 442: point = 378
	Hard reg 0 is preferable by r372 with profit 1
   Insn 316: point = 380
   Insn 441: point = 380
	Hard reg 0 is preferable by r372 with profit 1
	Hard reg 21 is preferable by r372 with profit 1
   Insn 315: point = 382
  BB 3
   Insn 156: point = 383
   Insn 155: point = 383
   Insn 154: point = 384
   Insn 153: point = 386
   Insn 152: point = 387
   Insn 151: point = 388
   Insn 150: point = 389
   Insn 149: point = 389
   Insn 148: point = 390
   Insn 147: point = 391
   Insn 146: point = 393
   Insn 145: point = 395
   Insn 144: point = 397
   Insn 143: point = 398
   Insn 142: point = 400
   Insn 141: point = 402
   Insn 140: point = 404
   Insn 139: point = 405
   Insn 138: point = 407
   Insn 137: point = 409
   Insn 136: point = 411
   Insn 135: point = 412
   Insn 134: point = 414
   Insn 133: point = 416
   Insn 132: point = 417
   Insn 131: point = 418
   Insn 130: point = 419
   Insn 129: point = 419
   Insn 128: point = 420
   Insn 127: point = 422
   Insn 126: point = 424
   Insn 125: point = 426
   Insn 124: point = 428
   Insn 123: point = 430
   Insn 122: point = 431
   Insn 121: point = 433
   Insn 120: point = 435
   Insn 119: point = 437
   Insn 118: point = 438
   Insn 117: point = 440
   Insn 116: point = 442
   Insn 115: point = 444
   Insn 114: point = 445
   Insn 113: point = 447
   Insn 112: point = 449
   Insn 111: point = 451
   Insn 110: point = 452
   Insn 109: point = 454
   Insn 108: point = 456
   Insn 107: point = 458
   Insn 106: point = 460
   Insn 105: point = 461
   Insn 104: point = 463
   Insn 103: point = 465
   Insn 102: point = 466
   Insn 101: point = 468
   Insn 100: point = 470
   Insn 99: point = 472
   Insn 98: point = 473
   Insn 97: point = 475
   Insn 96: point = 477
   Insn 95: point = 478
   Insn 94: point = 479
   Insn 93: point = 480
   Insn 92: point = 480
   Insn 91: point = 481
   Insn 90: point = 482
   Insn 89: point = 484
   Insn 88: point = 486
   Insn 87: point = 488
   Insn 86: point = 489
   Insn 85: point = 491
   Insn 84: point = 493
   Insn 83: point = 495
   Insn 82: point = 496
   Insn 81: point = 498
   Insn 80: point = 500
   Insn 79: point = 502
   Insn 78: point = 503
   Insn 77: point = 505
   Insn 76: point = 507
   Insn 75: point = 508
   Insn 74: point = 509
   Insn 73: point = 510
   Insn 72: point = 510
   Insn 71: point = 511
   Insn 70: point = 513
   Insn 69: point = 515
   Insn 68: point = 517
   Insn 67: point = 519
   Insn 66: point = 521
   Insn 65: point = 522
   Insn 64: point = 524
   Insn 63: point = 526
   Insn 62: point = 528
   Insn 61: point = 529
   Insn 60: point = 531
   Insn 59: point = 533
   Insn 58: point = 535
   Insn 57: point = 536
   Insn 56: point = 538
   Insn 55: point = 540
   Insn 54: point = 542
   Insn 53: point = 543
   Insn 52: point = 545
   Insn 51: point = 547
   Insn 50: point = 549
   Insn 49: point = 551
   Insn 48: point = 552
   Insn 47: point = 554
   Insn 46: point = 556
   Insn 45: point = 557
   Insn 44: point = 559
   Insn 43: point = 561
   Insn 42: point = 563
   Insn 41: point = 564
   Insn 40: point = 566
   Insn 39: point = 568
 r83: [4..5]
 r84: [565..566]
 r85: [562..564]
 r86: [560..561]
 r87: [558..559]
 r88: [544..557]
 r89: [553..554]
 r90: [550..552]
 r91: [548..549]
 r92: [546..547]
 r93: [544..545]
 r94: [512..543]
 r95: [539..540]
 r96: [537..538]
 r97: [534..536]
 r98: [532..533]
 r99: [530..531]
 r100: [514..529]
 r101: [525..526]
 r102: [523..524]
 r103: [520..522]
 r104: [518..519]
 r105: [516..517]
 r106: [514..515]
 r107: [512..513]
 r108: [510..511]
 r109: [504..505]
 r110: [501..503]
 r111: [499..500]
 r112: [497..498]
 r113: [481..496]
 r114: [492..493]
 r115: [490..491]
 r116: [487..489]
 r117: [485..486]
 r118: [483..484]
 r119: [480..482]
 r120: [474..475]
 r121: [471..473]
 r122: [469..470]
 r123: [467..468]
 r124: [453..466]
 r125: [462..463]
 r126: [459..461]
 r127: [457..458]
 r128: [455..456]
 r129: [453..454]
 r130: [421..452]
 r131: [448..449]
 r132: [446..447]
 r133: [443..445]
 r134: [441..442]
 r135: [439..440]
 r136: [423..438]
 r137: [434..435]
 r138: [432..433]
 r139: [429..431]
 r140: [427..428]
 r141: [425..426]
 r142: [423..424]
 r143: [421..422]
 r144: [419..420]
 r145: [413..414]
 r146: [410..412]
 r147: [408..409]
 r148: [406..407]
 r149: [390..405]
 r150: [401..402]
 r151: [399..400]
 r152: [396..398]
 r153: [394..395]
 r154: [392..393]
 r155: [389..391]
 r156: [383..384]
 r157: [259..260]
 r158: [256..258]
 r159: [254..255]
 r160: [252..253]
 r161: [238..251]
 r162: [247..248]
 r163: [244..246]
 r164: [242..243]
 r165: [240..241]
 r166: [238..239]
 r167: [206..237]
 r168: [233..234]
 r169: [231..232]
 r170: [228..230]
 r171: [226..227]
 r172: [224..225]
 r173: [208..223]
 r174: [219..220]
 r175: [217..218]
 r176: [214..216]
 r177: [212..213]
 r178: [210..211]
 r179: [208..209]
 r180: [206..207]
 r181: [204..205]
 r182: [198..199]
 r183: [195..197]
 r184: [193..194]
 r185: [191..192]
 r186: [175..190]
 r187: [186..187]
 r188: [184..185]
 r189: [181..183]
 r190: [179..180]
 r191: [177..178]
 r192: [174..176]
 r193: [152..153]
 r194: [149..151]
 r195: [130..148]
 r197: [139..140]
 r198: [137..138]
 r199: [130..131]
 r200: [126..127]
 r201: [124..125]
 r202: [121..123]
 r203: [102..120]
 r205: [111..112]
 r206: [109..110]
 r207: [102..103]
 r208: [82..83]
 r209: [79..81]
 r210: [60..78]
 r212: [69..70]
 r213: [67..68]
 r214: [60..61]
 r215: [56..57]
 r216: [54..55]
 r217: [51..53]
 r218: [32..50]
 r220: [41..42]
 r221: [39..40]
 r222: [32..33]
 r223: [367..368]
 r224: [364..366]
 r225: [345..363]
 r227: [354..355]
 r228: [352..353]
 r229: [345..346]
 r230: [341..342]
 r231: [339..340]
 r232: [336..338]
 r233: [317..335]
 r235: [326..327]
 r236: [324..325]
 r237: [317..318]
 r238: [313..314]
 r239: [310..312]
 r240: [291..309]
 r242: [300..301]
 r243: [298..299]
 r244: [291..292]
 r245: [287..288]
 r246: [285..286]
 r247: [282..284]
 r248: [263..281]
 r250: [272..273]
 r251: [270..271]
 r252: [263..264]
 r253: [2..3]
 r254: [0..1]
 r255: [30..31]
 r256: [28..29]
 r257: [26..27]
 r258: [24..25]
 r259: [22..23]
 r260: [20..21]
 r261: [18..19]
 r262: [16..17]
 r263: [14..15]
 r264: [12..13]
 r265: [10..11]
 r266: [8..9]
 r267: [567..568]
 r268: [562..563]
 r269: [555..556]
 r270: [550..551]
 r271: [541..542]
 r272: [534..535]
 r273: [527..528]
 r274: [520..521]
 r275: [508..509]
 r276: [506..507]
 r277: [501..502]
 r278: [494..495]
 r279: [487..488]
 r280: [478..479]
 r281: [476..477]
 r282: [471..472]
 r283: [464..465]
 r284: [459..460]
 r285: [450..451]
 r286: [443..444]
 r287: [436..437]
 r288: [429..430]
 r289: [417..418]
 r290: [415..416]
 r291: [410..411]
 r292: [403..404]
 r293: [396..397]
 r294: [387..388]
 r295: [385..386]
 r296: [261..262]
 r297: [256..257]
 r298: [249..250]
 r299: [244..245]
 r300: [235..236]
 r301: [228..229]
 r302: [221..222]
 r303: [214..215]
 r304: [202..203]
 r305: [200..201]
 r306: [195..196]
 r307: [188..189]
 r308: [181..182]
 r309: [172..173]
 r310: [170..171]
 r311: [162..163]
 r312: [164..165]
 r313: [168..169]
 r314: [156..157]
 r315: [160..161]
 r316: [154..155]
 r317: [149..150]
 r318: [143..144]
 r319: [128..129]
 r320: [121..122]
 r321: [115..116]
 r322: [100..101]
 r323: [92..93]
 r324: [94..95]
 r325: [98..99]
 r326: [86..87]
 r327: [90..91]
 r328: [84..85]
 r329: [79..80]
 r330: [73..74]
 r331: [58..59]
 r332: [51..52]
 r333: [45..46]
 r334: [377..378]
 r335: [381..382]
 r336: [371..372]
 r337: [375..376]
 r338: [369..370]
 r339: [364..365]
 r340: [358..359]
 r341: [343..344]
 r342: [336..337]
 r343: [330..331]
 r344: [315..316]
 r345: [310..311]
 r346: [304..305]
 r347: [289..290]
 r348: [282..283]
 r349: [276..277]
 r350: [6..7]
 r352: [166..167]
 r353: [158..159]
 r354: [146..147]
 r355: [141..142]
 r356: [132..136]
 r357: [133..134]
 r358: [118..119]
 r359: [113..114]
 r360: [104..108]
 r361: [105..106]
 r362: [96..97]
 r363: [88..89]
 r364: [76..77]
 r365: [71..72]
 r366: [62..66]
 r367: [63..64]
 r368: [48..49]
 r369: [43..44]
 r370: [34..38]
 r371: [35..36]
 r372: [379..380]
 r373: [373..374]
 r374: [361..362]
 r375: [356..357]
 r376: [347..351]
 r377: [348..349]
 r378: [333..334]
 r379: [328..329]
 r380: [319..323]
 r381: [320..321]
 r382: [307..308]
 r383: [302..303]
 r384: [293..297]
 r385: [294..295]
 r386: [279..280]
 r387: [274..275]
 r388: [265..269]
 r389: [266..267]
 r390: [107..117]
 r391: [135..145]
 r392: [37..47]
 r393: [65..75]
 r394: [268..278]
 r395: [296..306]
 r396: [322..332]
 r397: [350..360]
Compressing live ranges: from 569 to 504 - 88%
Ranges after the compression:
 r83: [4..5]
 r84: [500..501]
 r85: [498..499]
 r86: [496..497]
 r87: [494..495]
 r88: [482..493]
 r89: [490..491]
 r90: [488..489]
 r91: [486..487]
 r92: [484..485]
 r93: [482..483]
 r94: [454..481]
 r95: [478..479]
 r96: [476..477]
 r97: [474..475]
 r98: [472..473]
 r99: [470..471]
 r100: [456..469]
 r101: [466..467]
 r102: [464..465]
 r103: [462..463]
 r104: [460..461]
 r105: [458..459]
 r106: [456..457]
 r107: [454..455]
 r108: [452..453]
 r109: [446..447]
 r110: [444..445]
 r111: [442..443]
 r112: [440..441]
 r113: [426..439]
 r114: [436..437]
 r115: [434..435]
 r116: [432..433]
 r117: [430..431]
 r118: [428..429]
 r119: [426..427]
 r120: [420..421]
 r121: [418..419]
 r122: [416..417]
 r123: [414..415]
 r124: [402..413]
 r125: [410..411]
 r126: [408..409]
 r127: [406..407]
 r128: [404..405]
 r129: [402..403]
 r130: [374..401]
 r131: [398..399]
 r132: [396..397]
 r133: [394..395]
 r134: [392..393]
 r135: [390..391]
 r136: [376..389]
 r137: [386..387]
 r138: [384..385]
 r139: [382..383]
 r140: [380..381]
 r141: [378..379]
 r142: [376..377]
 r143: [374..375]
 r144: [372..373]
 r145: [366..367]
 r146: [364..365]
 r147: [362..363]
 r148: [360..361]
 r149: [346..359]
 r150: [356..357]
 r151: [354..355]
 r152: [352..353]
 r153: [350..351]
 r154: [348..349]
 r155: [346..347]
 r156: [340..341]
 r157: [232..233]
 r158: [230..231]
 r159: [228..229]
 r160: [226..227]
 r161: [214..225]
 r162: [222..223]
 r163: [220..221]
 r164: [218..219]
 r165: [216..217]
 r166: [214..215]
 r167: [186..213]
 r168: [210..211]
 r169: [208..209]
 r170: [206..207]
 r171: [204..205]
 r172: [202..203]
 r173: [188..201]
 r174: [198..199]
 r175: [196..197]
 r176: [194..195]
 r177: [192..193]
 r178: [190..191]
 r179: [188..189]
 r180: [186..187]
 r181: [184..185]
 r182: [178..179]
 r183: [176..177]
 r184: [174..175]
 r185: [172..173]
 r186: [158..171]
 r187: [168..169]
 r188: [166..167]
 r189: [164..165]
 r190: [162..163]
 r191: [160..161]
 r192: [158..159]
 r193: [136..137]
 r194: [134..135]
 r195: [118..133]
 r197: [126..127]
 r198: [124..125]
 r199: [118..119]
 r200: [114..115]
 r201: [112..113]
 r202: [110..111]
 r203: [94..109]
 r205: [102..103]
 r206: [100..101]
 r207: [94..95]
 r208: [74..75]
 r209: [72..73]
 r210: [56..71]
 r212: [64..65]
 r213: [62..63]
 r214: [56..57]
 r215: [52..53]
 r216: [50..51]
 r217: [48..49]
 r218: [32..47]
 r220: [40..41]
 r221: [38..39]
 r222: [32..33]
 r223: [324..325]
 r224: [322..323]
 r225: [306..321]
 r227: [314..315]
 r228: [312..313]
 r229: [306..307]
 r230: [302..303]
 r231: [300..301]
 r232: [298..299]
 r233: [282..297]
 r235: [290..291]
 r236: [288..289]
 r237: [282..283]
 r238: [278..279]
 r239: [276..277]
 r240: [260..275]
 r242: [268..269]
 r243: [266..267]
 r244: [260..261]
 r245: [256..257]
 r246: [254..255]
 r247: [252..253]
 r248: [236..251]
 r250: [244..245]
 r251: [242..243]
 r252: [236..237]
 r253: [2..3]
 r254: [0..1]
 r255: [30..31]
 r256: [28..29]
 r257: [26..27]
 r258: [24..25]
 r259: [22..23]
 r260: [20..21]
 r261: [18..19]
 r262: [16..17]
 r263: [14..15]
 r264: [12..13]
 r265: [10..11]
 r266: [8..9]
 r267: [502..503]
 r268: [498..499]
 r269: [492..493]
 r270: [488..489]
 r271: [480..481]
 r272: [474..475]
 r273: [468..469]
 r274: [462..463]
 r275: [450..451]
 r276: [448..449]
 r277: [444..445]
 r278: [438..439]
 r279: [432..433]
 r280: [424..425]
 r281: [422..423]
 r282: [418..419]
 r283: [412..413]
 r284: [408..409]
 r285: [400..401]
 r286: [394..395]
 r287: [388..389]
 r288: [382..383]
 r289: [370..371]
 r290: [368..369]
 r291: [364..365]
 r292: [358..359]
 r293: [352..353]
 r294: [344..345]
 r295: [342..343]
 r296: [234..235]
 r297: [230..231]
 r298: [224..225]
 r299: [220..221]
 r300: [212..213]
 r301: [206..207]
 r302: [200..201]
 r303: [194..195]
 r304: [182..183]
 r305: [180..181]
 r306: [176..177]
 r307: [170..171]
 r308: [164..165]
 r309: [156..157]
 r310: [154..155]
 r311: [146..147]
 r312: [148..149]
 r313: [152..153]
 r314: [140..141]
 r315: [144..145]
 r316: [138..139]
 r317: [134..135]
 r318: [130..131]
 r319: [116..117]
 r320: [110..111]
 r321: [106..107]
 r322: [92..93]
 r323: [84..85]
 r324: [86..87]
 r325: [90..91]
 r326: [78..79]
 r327: [82..83]
 r328: [76..77]
 r329: [72..73]
 r330: [68..69]
 r331: [54..55]
 r332: [48..49]
 r333: [44..45]
 r334: [334..335]
 r335: [338..339]
 r336: [328..329]
 r337: [332..333]
 r338: [326..327]
 r339: [322..323]
 r340: [318..319]
 r341: [304..305]
 r342: [298..299]
 r343: [294..295]
 r344: [280..281]
 r345: [276..277]
 r346: [272..273]
 r347: [258..259]
 r348: [252..253]
 r349: [248..249]
 r350: [6..7]
 r352: [150..151]
 r353: [142..143]
 r354: [132..133]
 r355: [128..129]
 r356: [120..123]
 r357: [120..121]
 r358: [108..109]
 r359: [104..105]
 r360: [96..99]
 r361: [96..97]
 r362: [88..89]
 r363: [80..81]
 r364: [70..71]
 r365: [66..67]
 r366: [58..61]
 r367: [58..59]
 r368: [46..47]
 r369: [42..43]
 r370: [34..37]
 r371: [34..35]
 r372: [336..337]
 r373: [330..331]
 r374: [320..321]
 r375: [316..317]
 r376: [308..311]
 r377: [308..309]
 r378: [296..297]
 r379: [292..293]
 r380: [284..287]
 r381: [284..285]
 r382: [274..275]
 r383: [270..271]
 r384: [262..265]
 r385: [262..263]
 r386: [250..251]
 r387: [246..247]
 r388: [238..241]
 r389: [238..239]
 r390: [98..107]
 r391: [122..131]
 r392: [36..45]
 r393: [60..69]
 r394: [240..249]
 r395: [264..273]
 r396: [286..295]
 r397: [310..319]

********** Assignment #1: **********

	 Assigning to 352 (cl=SSE_REGS, orig=312, freq=3, tfirst=352, tfreq=3)...
	   Assign 21 to reload r352 (freq=3)
	 Assigning to 353 (cl=SSE_REGS, orig=314, freq=3, tfirst=353, tfreq=3)...
	   Assign 21 to reload r353 (freq=3)
	 Assigning to 356 (cl=SSE_REGS, orig=199, freq=3, tfirst=356, tfreq=3)...
	   Assign 21 to reload r356 (freq=3)
	 Assigning to 360 (cl=SSE_REGS, orig=207, freq=3, tfirst=360, tfreq=3)...
	   Assign 21 to reload r360 (freq=3)
	 Assigning to 362 (cl=SSE_REGS, orig=324, freq=3, tfirst=362, tfreq=3)...
	   Assign 21 to reload r362 (freq=3)
	 Assigning to 363 (cl=SSE_REGS, orig=326, freq=3, tfirst=363, tfreq=3)...
	   Assign 21 to reload r363 (freq=3)
	 Assigning to 366 (cl=SSE_REGS, orig=214, freq=3, tfirst=366, tfreq=3)...
	   Assign 21 to reload r366 (freq=3)
	 Assigning to 370 (cl=SSE_REGS, orig=222, freq=3, tfirst=370, tfreq=3)...
	   Assign 21 to reload r370 (freq=3)
	 Assigning to 372 (cl=SSE_REGS, orig=334, freq=3, tfirst=372, tfreq=3)...
	   Assign 21 to reload r372 (freq=3)
	 Assigning to 373 (cl=SSE_REGS, orig=336, freq=3, tfirst=373, tfreq=3)...
	   Assign 21 to reload r373 (freq=3)
	 Assigning to 376 (cl=SSE_REGS, orig=229, freq=3, tfirst=376, tfreq=3)...
	   Assign 21 to reload r376 (freq=3)
	 Assigning to 380 (cl=SSE_REGS, orig=237, freq=3, tfirst=380, tfreq=3)...
	   Assign 21 to reload r380 (freq=3)
	 Assigning to 384 (cl=SSE_REGS, orig=244, freq=3, tfirst=384, tfreq=3)...
	   Assign 21 to reload r384 (freq=3)
	 Assigning to 388 (cl=SSE_REGS, orig=252, freq=3, tfirst=388, tfreq=3)...
	   Assign 21 to reload r388 (freq=3)
	 Assigning to 354 (cl=SSE_REGS, orig=196, freq=2, tfirst=354, tfreq=2)...
	   Assign 24 to reload r354 (freq=2)
	Hard reg 24 is preferable by r391 with profit 1
	Hard reg 24 is preferable by r357 with profit 1
	 Assigning to 357 (cl=SSE_REGS, orig=196, freq=2, tfirst=354, tfreq=2)...
	   Assign 24 to optional reload r357 (freq=2)
	Hard reg 24 is preferable by r391 with profit 2
	 Assigning to 391 (cl=SSE_REGS, orig=196, freq=2, tfirst=354, tfreq=2)...
	 Assigning to 358 (cl=SSE_REGS, orig=204, freq=2, tfirst=358, tfreq=2)...
	   Assign 25 to reload r358 (freq=2)
	Hard reg 25 is preferable by r390 with profit 1
	Hard reg 25 is preferable by r361 with profit 1
	 Assigning to 361 (cl=SSE_REGS, orig=204, freq=2, tfirst=358, tfreq=2)...
	   Assign 25 to optional reload r361 (freq=2)
	Hard reg 25 is preferable by r390 with profit 2
	 Assigning to 390 (cl=SSE_REGS, orig=204, freq=2, tfirst=358, tfreq=2)...
	 Assigning to 364 (cl=SSE_REGS, orig=211, freq=2, tfirst=364, tfreq=2)...
	   Assign 26 to reload r364 (freq=2)
	Hard reg 26 is preferable by r393 with profit 1
	Hard reg 26 is preferable by r367 with profit 1
	 Assigning to 367 (cl=SSE_REGS, orig=211, freq=2, tfirst=364, tfreq=2)...
	   Assign 26 to optional reload r367 (freq=2)
	Hard reg 26 is preferable by r393 with profit 2
	 Assigning to 393 (cl=SSE_REGS, orig=211, freq=2, tfirst=364, tfreq=2)...
	 Assigning to 368 (cl=SSE_REGS, orig=219, freq=2, tfirst=368, tfreq=2)...
	   Assign 27 to reload r368 (freq=2)
	Hard reg 27 is preferable by r392 with profit 1
	Hard reg 27 is preferable by r371 with profit 1
	 Assigning to 371 (cl=SSE_REGS, orig=219, freq=2, tfirst=368, tfreq=2)...
	   Assign 27 to optional reload r371 (freq=2)
	Hard reg 27 is preferable by r392 with profit 2
	 Assigning to 392 (cl=SSE_REGS, orig=219, freq=2, tfirst=368, tfreq=2)...
	 Assigning to 374 (cl=SSE_REGS, orig=226, freq=2, tfirst=374, tfreq=2)...
	   Assign 28 to reload r374 (freq=2)
	Hard reg 28 is preferable by r397 with profit 1
	Hard reg 28 is preferable by r377 with profit 1
	 Assigning to 377 (cl=SSE_REGS, orig=226, freq=2, tfirst=374, tfreq=2)...
	   Assign 28 to optional reload r377 (freq=2)
	Hard reg 28 is preferable by r397 with profit 2
	 Assigning to 397 (cl=SSE_REGS, orig=226, freq=2, tfirst=374, tfreq=2)...
	 Assigning to 378 (cl=SSE_REGS, orig=234, freq=2, tfirst=378, tfreq=2)...
	   Assign 24 to reload r378 (freq=2)
	Hard reg 24 is preferable by r396 with profit 1
	Hard reg 24 is preferable by r381 with profit 1
	 Assigning to 381 (cl=SSE_REGS, orig=234, freq=2, tfirst=378, tfreq=2)...
	   Assign 24 to optional reload r381 (freq=2)
	Hard reg 24 is preferable by r396 with profit 2
	 Assigning to 396 (cl=SSE_REGS, orig=234, freq=2, tfirst=378, tfreq=2)...
	 Assigning to 382 (cl=SSE_REGS, orig=241, freq=2, tfirst=382, tfreq=2)...
	   Assign 25 to reload r382 (freq=2)
	Hard reg 25 is preferable by r395 with profit 1
	Hard reg 25 is preferable by r385 with profit 1
	 Assigning to 385 (cl=SSE_REGS, orig=241, freq=2, tfirst=382, tfreq=2)...
	   Assign 25 to optional reload r385 (freq=2)
	Hard reg 25 is preferable by r395 with profit 2
	 Assigning to 395 (cl=SSE_REGS, orig=241, freq=2, tfirst=382, tfreq=2)...
	 Assigning to 386 (cl=SSE_REGS, orig=249, freq=2, tfirst=386, tfreq=2)...
	   Assign 26 to reload r386 (freq=2)
	Hard reg 26 is preferable by r394 with profit 1
	Hard reg 26 is preferable by r389 with profit 1
	 Assigning to 389 (cl=SSE_REGS, orig=249, freq=2, tfirst=386, tfreq=2)...
	   Assign 26 to optional reload r389 (freq=2)
	Hard reg 26 is preferable by r394 with profit 2
	 Assigning to 394 (cl=SSE_REGS, orig=249, freq=2, tfirst=386, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  426: r361:SF=r204:SF
      REG_DEAD r204:SF
   Insn after restoring regs:
  422: r204:SF=r358:SF
      REG_DEAD r358:SF
   Insn after restoring regs:
  421: r357:SF=r196:SF
      REG_DEAD r196:SF
   Insn after restoring regs:
  417: r196:SF=r354:SF
      REG_DEAD r354:SF
   Insn after restoring regs:
  440: r371:SF=r219:SF
      REG_DEAD r219:SF
   Insn after restoring regs:
  436: r219:SF=r368:SF
      REG_DEAD r368:SF
   Insn after restoring regs:
  435: r367:SF=r211:SF
      REG_DEAD r211:SF
   Insn after restoring regs:
  431: r211:SF=r364:SF
      REG_DEAD r364:SF
   Insn after restoring regs:
  464: r389:SF=r249:SF
      REG_DEAD r249:SF
   Insn after restoring regs:
  460: r249:SF=r386:SF
      REG_DEAD r386:SF
   Insn after restoring regs:
  459: r385:SF=r241:SF
      REG_DEAD r241:SF
   Insn after restoring regs:
  455: r241:SF=r382:SF
      REG_DEAD r382:SF
   Insn after restoring regs:
  454: r381:SF=r234:SF
      REG_DEAD r234:SF
   Insn after restoring regs:
  450: r234:SF=r378:SF
      REG_DEAD r378:SF
   Insn after restoring regs:
  449: r377:SF=r226:SF
      REG_DEAD r226:SF
   Insn after restoring regs:
  445: r226:SF=r374:SF
      REG_DEAD r374:SF
Remove optional reload reg 357
  Restoring original insn:
  247: r356:SF=r356:SF*r196:SF
      REG_DEAD r196:SF
  Deleting move 421
  421: r357:SF=r196:SF
      REG_DEAD r196:SF
deleting insn with uid = 421.
Remove optional reload reg 361
  Restoring original insn:
  261: r360:SF=r360:SF*r204:SF
      REG_DEAD r204:SF
  Deleting move 426
  426: r361:SF=r204:SF
      REG_DEAD r204:SF
deleting insn with uid = 426.
Remove optional reload reg 367
  Restoring original insn:
  295: r366:SF=r366:SF*r211:SF
      REG_DEAD r211:SF
  Deleting move 435
  435: r367:SF=r211:SF
      REG_DEAD r211:SF
deleting insn with uid = 435.
Remove optional reload reg 371
  Restoring original insn:
  309: r370:SF=r370:SF*r219:SF
      REG_DEAD r219:SF
  Deleting move 440
  440: r371:SF=r219:SF
      REG_DEAD r219:SF
deleting insn with uid = 440.
Remove optional reload reg 377
  Restoring original insn:
  332: r376:SF=r376:SF*r226:SF
      REG_DEAD r226:SF
  Deleting move 449
  449: r377:SF=r226:SF
      REG_DEAD r226:SF
deleting insn with uid = 449.
Remove optional reload reg 381
  Restoring original insn:
  346: r380:SF=r380:SF*r234:SF
      REG_DEAD r234:SF
  Deleting move 454
  454: r381:SF=r234:SF
      REG_DEAD r234:SF
deleting insn with uid = 454.
Remove optional reload reg 385
  Restoring original insn:
  359: r384:SF=r384:SF*r241:SF
      REG_DEAD r241:SF
  Deleting move 459
  459: r385:SF=r241:SF
      REG_DEAD r241:SF
deleting insn with uid = 459.
Remove optional reload reg 389
  Restoring original insn:
  373: r388:SF=r388:SF*r249:SF
      REG_DEAD r249:SF
  Deleting move 464
  464: r389:SF=r249:SF
      REG_DEAD r249:SF
deleting insn with uid = 464.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 373:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=398 from oldreg=249, assigning class SSE_REGS to r398
      Making reload reg 398 for reg 249 optional
  373: r388:SF=r388:SF*r398:SF
      REG_DEAD r249:SF
    Inserting insn reload before:
  473: r398:SF=r249:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 473:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 359:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=399 from oldreg=241, assigning class SSE_REGS to r399
      Making reload reg 399 for reg 241 optional
  359: r384:SF=r384:SF*r399:SF
      REG_DEAD r241:SF
    Inserting insn reload before:
  474: r399:SF=r241:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 474:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 346:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=400 from oldreg=234, assigning class SSE_REGS to r400
      Making reload reg 400 for reg 234 optional
  346: r380:SF=r380:SF*r400:SF
      REG_DEAD r234:SF
    Inserting insn reload before:
  475: r400:SF=r234:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 475:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 332:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=401 from oldreg=226, assigning class SSE_REGS to r401
      Making reload reg 401 for reg 226 optional
  332: r376:SF=r376:SF*r401:SF
      REG_DEAD r226:SF
    Inserting insn reload before:
  476: r401:SF=r226:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 476:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=402 from oldreg=219, assigning class SSE_REGS to r402
      Making reload reg 402 for reg 219 optional
  309: r370:SF=r370:SF*r402:SF
      REG_DEAD r219:SF
    Inserting insn reload before:
  477: r402:SF=r219:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 477:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 295:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=403 from oldreg=211, assigning class SSE_REGS to r403
      Making reload reg 403 for reg 211 optional
  295: r366:SF=r366:SF*r403:SF
      REG_DEAD r211:SF
    Inserting insn reload before:
  478: r403:SF=r211:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 478:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 261:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=404 from oldreg=204, assigning class SSE_REGS to r404
      Making reload reg 404 for reg 204 optional
  261: r360:SF=r360:SF*r404:SF
      REG_DEAD r204:SF
    Inserting insn reload before:
  479: r404:SF=r204:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 479:  (0) v  (1) m {*movsf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
      Creating newreg=405 from oldreg=196, assigning class SSE_REGS to r405
      Making reload reg 405 for reg 196 optional
  247: r356:SF=r356:SF*r405:SF
      REG_DEAD r196:SF
    Inserting insn reload before:
  480: r405:SF=r196:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=6,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=7,overall=2,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 480:  (0) v  (1) m {*movsf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=406 from oldreg=204, assigning class SSE_REGS to inheritance r406
    Original reg change 204->406 (bb7):
  422: r406:SF=r358:SF
      REG_DEAD r358:SF
    Add original<-inheritance after:
  481: r204:SF=r406:SF

    Inheritance reuse change 204->406 (bb7):
  479: r404:SF=r406:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=407 from oldreg=196, assigning class SSE_REGS to inheritance r407
    Original reg change 196->407 (bb7):
  417: r407:SF=r354:SF
      REG_DEAD r354:SF
    Add original<-inheritance after:
  482: r196:SF=r407:SF

    Inheritance reuse change 196->407 (bb7):
  480: r405:SF=r407:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   481: r204:SF=r406:SF
deleting insn with uid = 481.
	    Removing dead insn:
   482: r196:SF=r407:SF
deleting insn with uid = 482.
EBB 8
EBB 9
EBB 10
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=408 from oldreg=219, assigning class SSE_REGS to inheritance r408
    Original reg change 219->408 (bb10):
  436: r408:SF=r368:SF
      REG_DEAD r368:SF
    Add original<-inheritance after:
  483: r219:SF=r408:SF

    Inheritance reuse change 219->408 (bb10):
  477: r402:SF=r408:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=409 from oldreg=211, assigning class SSE_REGS to inheritance r409
    Original reg change 211->409 (bb10):
  431: r409:SF=r364:SF
      REG_DEAD r364:SF
    Add original<-inheritance after:
  484: r211:SF=r409:SF

    Inheritance reuse change 211->409 (bb10):
  478: r403:SF=r409:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   483: r219:SF=r408:SF
deleting insn with uid = 483.
	    Removing dead insn:
   484: r211:SF=r409:SF
deleting insn with uid = 484.
EBB 11
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=410 from oldreg=249, assigning class SSE_REGS to inheritance r410
    Original reg change 249->410 (bb11):
  460: r410:SF=r386:SF
      REG_DEAD r386:SF
    Add original<-inheritance after:
  485: r249:SF=r410:SF

    Inheritance reuse change 249->410 (bb11):
  473: r398:SF=r410:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=411 from oldreg=241, assigning class SSE_REGS to inheritance r411
    Original reg change 241->411 (bb11):
  455: r411:SF=r382:SF
      REG_DEAD r382:SF
    Add original<-inheritance after:
  486: r241:SF=r411:SF

    Inheritance reuse change 241->411 (bb11):
  474: r399:SF=r411:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=412 from oldreg=234, assigning class SSE_REGS to inheritance r412
    Original reg change 234->412 (bb11):
  450: r412:SF=r378:SF
      REG_DEAD r378:SF
    Add original<-inheritance after:
  487: r234:SF=r412:SF

    Inheritance reuse change 234->412 (bb11):
  475: r400:SF=r412:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=413 from oldreg=226, assigning class SSE_REGS to inheritance r413
    Original reg change 226->413 (bb11):
  445: r413:SF=r374:SF
      REG_DEAD r374:SF
    Add original<-inheritance after:
  488: r226:SF=r413:SF

    Inheritance reuse change 226->413 (bb11):
  476: r401:SF=r413:SF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   485: r249:SF=r410:SF
deleting insn with uid = 485.
	    Removing dead insn:
   486: r241:SF=r411:SF
deleting insn with uid = 486.
	    Removing dead insn:
   487: r234:SF=r412:SF
deleting insn with uid = 487.
	    Removing dead insn:
   488: r226:SF=r413:SF
deleting insn with uid = 488.
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #2: **********

  BB 14
   Insn 394: point = 0
   Insn 393: point = 0
   Insn 389: point = 1
   Insn 386: point = 3
  BB 13
   Insn 384: point = 4
   Insn 383: point = 4
   Insn 381: point = 5
   Insn 380: point = 7
  BB 2
   Insn 402: point = 8
   Insn 35: point = 8
   Insn 34: point = 8
   Insn 33: point = 9
   Insn 32: point = 10
   Insn 31: point = 11
   Insn 30: point = 12
   Insn 29: point = 13
   Insn 28: point = 14
   Insn 27: point = 15
   Insn 26: point = 16
   Insn 25: point = 17
   Insn 24: point = 18
   Insn 23: point = 19
   Insn 22: point = 20
   Insn 21: point = 21
   Insn 20: point = 22
   Insn 19: point = 23
   Insn 18: point = 24
   Insn 17: point = 25
   Insn 16: point = 26
   Insn 15: point = 27
   Insn 14: point = 28
   Insn 13: point = 29
   Insn 12: point = 30
   Insn 11: point = 31
   Insn 10: point = 32
   Insn 6: point = 32
   Insn 5: point = 32
   Insn 4: point = 32
   Insn 3: point = 32
   Insn 2: point = 32
  BB 12
   Insn 377: point = 32
  BB 10
   Insn 410: point = 32
   Insn 310: point = 32
   Insn 439: point = 33
	Hard reg 0 is preferable by r370 with profit 1
   Insn 309: point = 35
   Insn 477: point = 36
	   Creating copy r402<-r408@1
   Insn 438: point = 38
	Hard reg 0 is preferable by r370 with profit 1
	Hard reg 21 is preferable by r370 with profit 1
   Insn 308: point = 40
   Insn 307: point = 42
   Insn 306: point = 43
   Insn 437: point = 43
	Hard reg 21 is preferable by r369 with profit 1
   Insn 305: point = 44
	Hard reg 21 is preferable by r369 with profit 1
	Hard reg 0 is preferable by r369 with profit 1
   Insn 304: point = 46
   Insn 436: point = 47
	   Creating copy r368->r408@1
   Insn 303: point = 49
   Insn 302: point = 50
   Insn 301: point = 52
   Insn 300: point = 53
   Insn 299: point = 55
   Insn 298: point = 57
   Insn 297: point = 59
   Insn 296: point = 60
   Insn 434: point = 61
	Hard reg 0 is preferable by r366 with profit 1
   Insn 295: point = 63
   Insn 478: point = 64
	   Creating copy r403<-r409@1
   Insn 433: point = 66
	Hard reg 0 is preferable by r366 with profit 1
	Hard reg 21 is preferable by r366 with profit 1
   Insn 294: point = 68
   Insn 293: point = 70
   Insn 292: point = 71
   Insn 432: point = 71
	Hard reg 21 is preferable by r365 with profit 1
   Insn 291: point = 72
	Hard reg 21 is preferable by r365 with profit 1
	Hard reg 0 is preferable by r365 with profit 1
   Insn 290: point = 74
   Insn 431: point = 75
	   Creating copy r364->r409@1
   Insn 289: point = 77
   Insn 288: point = 78
   Insn 287: point = 80
   Insn 286: point = 81
   Insn 285: point = 83
   Insn 284: point = 85
   Insn 283: point = 86
   Insn 430: point = 87
	Hard reg 0 is preferable by r363 with profit 1
   Insn 282: point = 89
   Insn 429: point = 89
	Hard reg 0 is preferable by r363 with profit 1
	Hard reg 21 is preferable by r363 with profit 1
   Insn 281: point = 91
  BB 8
   Insn 408: point = 92
   Insn 271: point = 92
   Insn 270: point = 93
  BB 9
   Insn 278: point = 94
   Insn 428: point = 95
	Hard reg 0 is preferable by r362 with profit 1
   Insn 277: point = 97
   Insn 427: point = 97
	Hard reg 0 is preferable by r362 with profit 1
	Hard reg 21 is preferable by r362 with profit 1
   Insn 276: point = 99
  BB 7
   Insn 265: point = 100
   Insn 264: point = 100
   Insn 263: point = 101
   Insn 262: point = 102
   Insn 425: point = 103
	Hard reg 0 is preferable by r360 with profit 1
   Insn 261: point = 105
   Insn 479: point = 106
	   Creating copy r404<-r406@1
   Insn 424: point = 108
	Hard reg 0 is preferable by r360 with profit 1
	Hard reg 21 is preferable by r360 with profit 1
   Insn 260: point = 110
   Insn 259: point = 112
   Insn 258: point = 113
   Insn 423: point = 113
	Hard reg 21 is preferable by r359 with profit 1
   Insn 257: point = 114
	Hard reg 21 is preferable by r359 with profit 1
	Hard reg 0 is preferable by r359 with profit 1
   Insn 256: point = 116
   Insn 422: point = 117
	   Creating copy r358->r406@1
   Insn 255: point = 119
   Insn 254: point = 120
   Insn 253: point = 122
   Insn 252: point = 123
   Insn 251: point = 125
   Insn 250: point = 127
   Insn 249: point = 129
   Insn 248: point = 130
   Insn 420: point = 131
	Hard reg 0 is preferable by r356 with profit 1
   Insn 247: point = 133
   Insn 480: point = 134
	   Creating copy r405<-r407@1
   Insn 419: point = 136
	Hard reg 0 is preferable by r356 with profit 1
	Hard reg 21 is preferable by r356 with profit 1
   Insn 246: point = 138
   Insn 245: point = 140
   Insn 244: point = 141
   Insn 418: point = 141
	Hard reg 21 is preferable by r355 with profit 1
   Insn 243: point = 142
	Hard reg 21 is preferable by r355 with profit 1
	Hard reg 0 is preferable by r355 with profit 1
   Insn 242: point = 144
   Insn 417: point = 145
	   Creating copy r354->r407@1
   Insn 241: point = 147
   Insn 240: point = 148
   Insn 239: point = 150
   Insn 238: point = 151
   Insn 237: point = 153
   Insn 236: point = 155
   Insn 235: point = 156
   Insn 416: point = 157
	Hard reg 0 is preferable by r353 with profit 1
   Insn 234: point = 159
   Insn 415: point = 159
	Hard reg 0 is preferable by r353 with profit 1
	Hard reg 21 is preferable by r353 with profit 1
   Insn 233: point = 161
  BB 5
   Insn 405: point = 162
   Insn 223: point = 162
   Insn 222: point = 163
  BB 6
   Insn 230: point = 164
   Insn 414: point = 165
	Hard reg 0 is preferable by r352 with profit 1
   Insn 229: point = 167
   Insn 413: point = 167
	Hard reg 0 is preferable by r352 with profit 1
	Hard reg 21 is preferable by r352 with profit 1
   Insn 228: point = 169
  BB 4
   Insn 217: point = 170
   Insn 216: point = 170
   Insn 215: point = 171
   Insn 214: point = 172
   Insn 213: point = 173
   Insn 212: point = 174
   Insn 211: point = 174
   Insn 210: point = 175
   Insn 209: point = 176
   Insn 208: point = 178
   Insn 207: point = 180
   Insn 206: point = 182
   Insn 205: point = 183
   Insn 204: point = 185
   Insn 203: point = 187
   Insn 202: point = 189
   Insn 201: point = 190
   Insn 200: point = 192
   Insn 199: point = 194
   Insn 198: point = 196
   Insn 197: point = 197
   Insn 196: point = 199
   Insn 195: point = 201
   Insn 194: point = 202
   Insn 193: point = 203
   Insn 192: point = 204
   Insn 191: point = 204
   Insn 190: point = 205
   Insn 189: point = 207
   Insn 188: point = 209
   Insn 187: point = 211
   Insn 186: point = 213
   Insn 185: point = 215
   Insn 184: point = 216
   Insn 183: point = 218
   Insn 182: point = 220
   Insn 181: point = 222
   Insn 180: point = 223
   Insn 179: point = 225
   Insn 178: point = 227
   Insn 177: point = 229
   Insn 176: point = 230
   Insn 175: point = 232
   Insn 174: point = 234
   Insn 173: point = 236
   Insn 172: point = 237
   Insn 171: point = 239
   Insn 170: point = 241
   Insn 169: point = 243
   Insn 168: point = 245
   Insn 167: point = 246
   Insn 166: point = 248
   Insn 165: point = 250
   Insn 164: point = 251
   Insn 163: point = 253
   Insn 162: point = 255
   Insn 161: point = 257
   Insn 160: point = 258
   Insn 159: point = 260
   Insn 158: point = 262
  BB 11
   Insn 374: point = 263
   Insn 463: point = 264
	Hard reg 0 is preferable by r388 with profit 1
   Insn 373: point = 266
   Insn 473: point = 267
	   Creating copy r398<-r410@1
   Insn 462: point = 269
	Hard reg 0 is preferable by r388 with profit 1
	Hard reg 21 is preferable by r388 with profit 1
   Insn 372: point = 271
   Insn 371: point = 273
   Insn 370: point = 274
   Insn 461: point = 274
	Hard reg 21 is preferable by r387 with profit 1
   Insn 369: point = 275
	Hard reg 21 is preferable by r387 with profit 1
	Hard reg 0 is preferable by r387 with profit 1
   Insn 368: point = 277
   Insn 460: point = 278
	   Creating copy r386->r410@1
   Insn 367: point = 280
   Insn 366: point = 281
   Insn 365: point = 283
   Insn 364: point = 284
   Insn 363: point = 286
   Insn 362: point = 288
   Insn 361: point = 290
   Insn 360: point = 291
   Insn 458: point = 292
	Hard reg 0 is preferable by r384 with profit 1
   Insn 359: point = 294
   Insn 474: point = 295
	   Creating copy r399<-r411@1
   Insn 457: point = 297
	Hard reg 0 is preferable by r384 with profit 1
	Hard reg 21 is preferable by r384 with profit 1
   Insn 358: point = 299
   Insn 357: point = 301
   Insn 356: point = 302
   Insn 456: point = 302
	Hard reg 21 is preferable by r383 with profit 1
   Insn 355: point = 303
	Hard reg 21 is preferable by r383 with profit 1
	Hard reg 0 is preferable by r383 with profit 1
   Insn 354: point = 305
   Insn 455: point = 306
	   Creating copy r382->r411@1
   Insn 353: point = 308
   Insn 352: point = 309
   Insn 351: point = 311
   Insn 350: point = 312
   Insn 349: point = 314
   Insn 348: point = 316
   Insn 347: point = 317
   Insn 453: point = 318
	Hard reg 0 is preferable by r380 with profit 1
   Insn 346: point = 320
   Insn 475: point = 321
	   Creating copy r400<-r412@1
   Insn 452: point = 323
	Hard reg 0 is preferable by r380 with profit 1
	Hard reg 21 is preferable by r380 with profit 1
   Insn 345: point = 325
   Insn 344: point = 327
   Insn 343: point = 328
   Insn 451: point = 328
	Hard reg 21 is preferable by r379 with profit 1
   Insn 342: point = 329
	Hard reg 21 is preferable by r379 with profit 1
	Hard reg 0 is preferable by r379 with profit 1
   Insn 341: point = 331
   Insn 450: point = 332
	   Creating copy r378->r412@1
   Insn 340: point = 334
   Insn 339: point = 335
   Insn 338: point = 337
   Insn 337: point = 338
   Insn 336: point = 340
   Insn 335: point = 342
   Insn 334: point = 344
   Insn 333: point = 345
   Insn 448: point = 346
	Hard reg 0 is preferable by r376 with profit 1
   Insn 332: point = 348
   Insn 476: point = 349
	   Creating copy r401<-r413@1
   Insn 447: point = 351
	Hard reg 0 is preferable by r376 with profit 1
	Hard reg 21 is preferable by r376 with profit 1
   Insn 331: point = 353
   Insn 330: point = 355
   Insn 329: point = 356
   Insn 446: point = 356
	Hard reg 21 is preferable by r375 with profit 1
   Insn 328: point = 357
	Hard reg 21 is preferable by r375 with profit 1
	Hard reg 0 is preferable by r375 with profit 1
   Insn 327: point = 359
   Insn 445: point = 360
	   Creating copy r374->r413@1
   Insn 326: point = 362
   Insn 325: point = 363
   Insn 324: point = 365
   Insn 323: point = 366
   Insn 322: point = 368
   Insn 321: point = 370
   Insn 320: point = 371
   Insn 444: point = 372
	Hard reg 0 is preferable by r373 with profit 1
   Insn 319: point = 374
   Insn 443: point = 374
	Hard reg 0 is preferable by r373 with profit 1
	Hard reg 21 is preferable by r373 with profit 1
   Insn 318: point = 376
   Insn 317: point = 377
   Insn 442: point = 378
	Hard reg 0 is preferable by r372 with profit 1
   Insn 316: point = 380
   Insn 441: point = 380
	Hard reg 0 is preferable by r372 with profit 1
	Hard reg 21 is preferable by r372 with profit 1
   Insn 315: point = 382
  BB 3
   Insn 156: point = 383
   Insn 155: point = 383
   Insn 154: point = 384
   Insn 153: point = 386
   Insn 152: point = 387
   Insn 151: point = 388
   Insn 150: point = 389
   Insn 149: point = 389
   Insn 148: point = 390
   Insn 147: point = 391
   Insn 146: point = 393
   Insn 145: point = 395
   Insn 144: point = 397
   Insn 143: point = 398
   Insn 142: point = 400
   Insn 141: point = 402
   Insn 140: point = 404
   Insn 139: point = 405
   Insn 138: point = 407
   Insn 137: point = 409
   Insn 136: point = 411
   Insn 135: point = 412
   Insn 134: point = 414
   Insn 133: point = 416
   Insn 132: point = 417
   Insn 131: point = 418
   Insn 130: point = 419
   Insn 129: point = 419
   Insn 128: point = 420
   Insn 127: point = 422
   Insn 126: point = 424
   Insn 125: point = 426
   Insn 124: point = 428
   Insn 123: point = 430
   Insn 122: point = 431
   Insn 121: point = 433
   Insn 120: point = 435
   Insn 119: point = 437
   Insn 118: point = 438
   Insn 117: point = 440
   Insn 116: point = 442
   Insn 115: point = 444
   Insn 114: point = 445
   Insn 113: point = 447
   Insn 112: point = 449
   Insn 111: point = 451
   Insn 110: point = 452
   Insn 109: point = 454
   Insn 108: point = 456
   Insn 107: point = 458
   Insn 106: point = 460
   Insn 105: point = 461
   Insn 104: point = 463
   Insn 103: point = 465
   Insn 102: point = 466
   Insn 101: point = 468
   Insn 100: point = 470
   Insn 99: point = 472
   Insn 98: point = 473
   Insn 97: point = 475
   Insn 96: point = 477
   Insn 95: point = 478
   Insn 94: point = 479
   Insn 93: point = 480
   Insn 92: point = 480
   Insn 91: point = 481
   Insn 90: point = 482
   Insn 89: point = 484
   Insn 88: point = 486
   Insn 87: point = 488
   Insn 86: point = 489
   Insn 85: point = 491
   Insn 84: point = 493
   Insn 83: point = 495
   Insn 82: point = 496
   Insn 81: point = 498
   Insn 80: point = 500
   Insn 79: point = 502
   Insn 78: point = 503
   Insn 77: point = 505
   Insn 76: point = 507
   Insn 75: point = 508
   Insn 74: point = 509
   Insn 73: point = 510
   Insn 72: point = 510
   Insn 71: point = 511
   Insn 70: point = 513
   Insn 69: point = 515
   Insn 68: point = 517
   Insn 67: point = 519
   Insn 66: point = 521
   Insn 65: point = 522
   Insn 64: point = 524
   Insn 63: point = 526
   Insn 62: point = 528
   Insn 61: point = 529
   Insn 60: point = 531
   Insn 59: point = 533
   Insn 58: point = 535
   Insn 57: point = 536
   Insn 56: point = 538
   Insn 55: point = 540
   Insn 54: point = 542
   Insn 53: point = 543
   Insn 52: point = 545
   Insn 51: point = 547
   Insn 50: point = 549
   Insn 49: point = 551
   Insn 48: point = 552
   Insn 47: point = 554
   Insn 46: point = 556
   Insn 45: point = 557
   Insn 44: point = 559
   Insn 43: point = 561
   Insn 42: point = 563
   Insn 41: point = 564
   Insn 40: point = 566
   Insn 39: point = 568
 r83: [4..5]
 r84: [565..566]
 r85: [562..564]
 r86: [560..561]
 r87: [558..559]
 r88: [544..557]
 r89: [553..554]
 r90: [550..552]
 r91: [548..549]
 r92: [546..547]
 r93: [544..545]
 r94: [512..543]
 r95: [539..540]
 r96: [537..538]
 r97: [534..536]
 r98: [532..533]
 r99: [530..531]
 r100: [514..529]
 r101: [525..526]
 r102: [523..524]
 r103: [520..522]
 r104: [518..519]
 r105: [516..517]
 r106: [514..515]
 r107: [512..513]
 r108: [510..511]
 r109: [504..505]
 r110: [501..503]
 r111: [499..500]
 r112: [497..498]
 r113: [481..496]
 r114: [492..493]
 r115: [490..491]
 r116: [487..489]
 r117: [485..486]
 r118: [483..484]
 r119: [480..482]
 r120: [474..475]
 r121: [471..473]
 r122: [469..470]
 r123: [467..468]
 r124: [453..466]
 r125: [462..463]
 r126: [459..461]
 r127: [457..458]
 r128: [455..456]
 r129: [453..454]
 r130: [421..452]
 r131: [448..449]
 r132: [446..447]
 r133: [443..445]
 r134: [441..442]
 r135: [439..440]
 r136: [423..438]
 r137: [434..435]
 r138: [432..433]
 r139: [429..431]
 r140: [427..428]
 r141: [425..426]
 r142: [423..424]
 r143: [421..422]
 r144: [419..420]
 r145: [413..414]
 r146: [410..412]
 r147: [408..409]
 r148: [406..407]
 r149: [390..405]
 r150: [401..402]
 r151: [399..400]
 r152: [396..398]
 r153: [394..395]
 r154: [392..393]
 r155: [389..391]
 r156: [383..384]
 r157: [259..260]
 r158: [256..258]
 r159: [254..255]
 r160: [252..253]
 r161: [238..251]
 r162: [247..248]
 r163: [244..246]
 r164: [242..243]
 r165: [240..241]
 r166: [238..239]
 r167: [206..237]
 r168: [233..234]
 r169: [231..232]
 r170: [228..230]
 r171: [226..227]
 r172: [224..225]
 r173: [208..223]
 r174: [219..220]
 r175: [217..218]
 r176: [214..216]
 r177: [212..213]
 r178: [210..211]
 r179: [208..209]
 r180: [206..207]
 r181: [204..205]
 r182: [198..199]
 r183: [195..197]
 r184: [193..194]
 r185: [191..192]
 r186: [175..190]
 r187: [186..187]
 r188: [184..185]
 r189: [181..183]
 r190: [179..180]
 r191: [177..178]
 r192: [174..176]
 r193: [152..153]
 r194: [149..151]
 r195: [130..148]
 r197: [139..140]
 r198: [137..138]
 r199: [130..131]
 r200: [126..127]
 r201: [124..125]
 r202: [121..123]
 r203: [102..120]
 r205: [111..112]
 r206: [109..110]
 r207: [102..103]
 r208: [82..83]
 r209: [79..81]
 r210: [60..78]
 r212: [69..70]
 r213: [67..68]
 r214: [60..61]
 r215: [56..57]
 r216: [54..55]
 r217: [51..53]
 r218: [32..50]
 r220: [41..42]
 r221: [39..40]
 r222: [32..33]
 r223: [367..368]
 r224: [364..366]
 r225: [345..363]
 r227: [354..355]
 r228: [352..353]
 r229: [345..346]
 r230: [341..342]
 r231: [339..340]
 r232: [336..338]
 r233: [317..335]
 r235: [326..327]
 r236: [324..325]
 r237: [317..318]
 r238: [313..314]
 r239: [310..312]
 r240: [291..309]
 r242: [300..301]
 r243: [298..299]
 r244: [291..292]
 r245: [287..288]
 r246: [285..286]
 r247: [282..284]
 r248: [263..281]
 r250: [272..273]
 r251: [270..271]
 r252: [263..264]
 r253: [2..3]
 r254: [0..1]
 r255: [30..31]
 r256: [28..29]
 r257: [26..27]
 r258: [24..25]
 r259: [22..23]
 r260: [20..21]
 r261: [18..19]
 r262: [16..17]
 r263: [14..15]
 r264: [12..13]
 r265: [10..11]
 r266: [8..9]
 r267: [567..568]
 r268: [562..563]
 r269: [555..556]
 r270: [550..551]
 r271: [541..542]
 r272: [534..535]
 r273: [527..528]
 r274: [520..521]
 r275: [508..509]
 r276: [506..507]
 r277: [501..502]
 r278: [494..495]
 r279: [487..488]
 r280: [478..479]
 r281: [476..477]
 r282: [471..472]
 r283: [464..465]
 r284: [459..460]
 r285: [450..451]
 r286: [443..444]
 r287: [436..437]
 r288: [429..430]
 r289: [417..418]
 r290: [415..416]
 r291: [410..411]
 r292: [403..404]
 r293: [396..397]
 r294: [387..388]
 r295: [385..386]
 r296: [261..262]
 r297: [256..257]
 r298: [249..250]
 r299: [244..245]
 r300: [235..236]
 r301: [228..229]
 r302: [221..222]
 r303: [214..215]
 r304: [202..203]
 r305: [200..201]
 r306: [195..196]
 r307: [188..189]
 r308: [181..182]
 r309: [172..173]
 r310: [170..171]
 r311: [162..163]
 r312: [164..165]
 r313: [168..169]
 r314: [156..157]
 r315: [160..161]
 r316: [154..155]
 r317: [149..150]
 r318: [143..144]
 r319: [128..129]
 r320: [121..122]
 r321: [115..116]
 r322: [100..101]
 r323: [92..93]
 r324: [94..95]
 r325: [98..99]
 r326: [86..87]
 r327: [90..91]
 r328: [84..85]
 r329: [79..80]
 r330: [73..74]
 r331: [58..59]
 r332: [51..52]
 r333: [45..46]
 r334: [377..378]
 r335: [381..382]
 r336: [371..372]
 r337: [375..376]
 r338: [369..370]
 r339: [364..365]
 r340: [358..359]
 r341: [343..344]
 r342: [336..337]
 r343: [330..331]
 r344: [315..316]
 r345: [310..311]
 r346: [304..305]
 r347: [289..290]
 r348: [282..283]
 r349: [276..277]
 r350: [6..7]
 r352: [166..167]
 r353: [158..159]
 r354: [146..147]
 r355: [141..142]
 r356: [132..136]
 r358: [118..119]
 r359: [113..114]
 r360: [104..108]
 r362: [96..97]
 r363: [88..89]
 r364: [76..77]
 r365: [71..72]
 r366: [62..66]
 r368: [48..49]
 r369: [43..44]
 r370: [34..38]
 r372: [379..380]
 r373: [373..374]
 r374: [361..362]
 r375: [356..357]
 r376: [347..351]
 r378: [333..334]
 r379: [328..329]
 r380: [319..323]
 r382: [307..308]
 r383: [302..303]
 r384: [293..297]
 r386: [279..280]
 r387: [274..275]
 r388: [265..269]
 r398: [266..267]
 r399: [294..295]
 r400: [320..321]
 r401: [348..349]
 r402: [35..36]
 r403: [63..64]
 r404: [105..106]
 r405: [133..134]
 r406: [107..117]
 r407: [135..145]
 r408: [37..47]
 r409: [65..75]
 r410: [268..278]
 r411: [296..306]
 r412: [322..332]
 r413: [350..360]
Compressing live ranges: from 569 to 504 - 88%
Ranges after the compression:
 r83: [4..5]
 r84: [500..501]
 r85: [498..499]
 r86: [496..497]
 r87: [494..495]
 r88: [482..493]
 r89: [490..491]
 r90: [488..489]
 r91: [486..487]
 r92: [484..485]
 r93: [482..483]
 r94: [454..481]
 r95: [478..479]
 r96: [476..477]
 r97: [474..475]
 r98: [472..473]
 r99: [470..471]
 r100: [456..469]
 r101: [466..467]
 r102: [464..465]
 r103: [462..463]
 r104: [460..461]
 r105: [458..459]
 r106: [456..457]
 r107: [454..455]
 r108: [452..453]
 r109: [446..447]
 r110: [444..445]
 r111: [442..443]
 r112: [440..441]
 r113: [426..439]
 r114: [436..437]
 r115: [434..435]
 r116: [432..433]
 r117: [430..431]
 r118: [428..429]
 r119: [426..427]
 r120: [420..421]
 r121: [418..419]
 r122: [416..417]
 r123: [414..415]
 r124: [402..413]
 r125: [410..411]
 r126: [408..409]
 r127: [406..407]
 r128: [404..405]
 r129: [402..403]
 r130: [374..401]
 r131: [398..399]
 r132: [396..397]
 r133: [394..395]
 r134: [392..393]
 r135: [390..391]
 r136: [376..389]
 r137: [386..387]
 r138: [384..385]
 r139: [382..383]
 r140: [380..381]
 r141: [378..379]
 r142: [376..377]
 r143: [374..375]
 r144: [372..373]
 r145: [366..367]
 r146: [364..365]
 r147: [362..363]
 r148: [360..361]
 r149: [346..359]
 r150: [356..357]
 r151: [354..355]
 r152: [352..353]
 r153: [350..351]
 r154: [348..349]
 r155: [346..347]
 r156: [340..341]
 r157: [232..233]
 r158: [230..231]
 r159: [228..229]
 r160: [226..227]
 r161: [214..225]
 r162: [222..223]
 r163: [220..221]
 r164: [218..219]
 r165: [216..217]
 r166: [214..215]
 r167: [186..213]
 r168: [210..211]
 r169: [208..209]
 r170: [206..207]
 r171: [204..205]
 r172: [202..203]
 r173: [188..201]
 r174: [198..199]
 r175: [196..197]
 r176: [194..195]
 r177: [192..193]
 r178: [190..191]
 r179: [188..189]
 r180: [186..187]
 r181: [184..185]
 r182: [178..179]
 r183: [176..177]
 r184: [174..175]
 r185: [172..173]
 r186: [158..171]
 r187: [168..169]
 r188: [166..167]
 r189: [164..165]
 r190: [162..163]
 r191: [160..161]
 r192: [158..159]
 r193: [136..137]
 r194: [134..135]
 r195: [118..133]
 r197: [126..127]
 r198: [124..125]
 r199: [118..119]
 r200: [114..115]
 r201: [112..113]
 r202: [110..111]
 r203: [94..109]
 r205: [102..103]
 r206: [100..101]
 r207: [94..95]
 r208: [74..75]
 r209: [72..73]
 r210: [56..71]
 r212: [64..65]
 r213: [62..63]
 r214: [56..57]
 r215: [52..53]
 r216: [50..51]
 r217: [48..49]
 r218: [32..47]
 r220: [40..41]
 r221: [38..39]
 r222: [32..33]
 r223: [324..325]
 r224: [322..323]
 r225: [306..321]
 r227: [314..315]
 r228: [312..313]
 r229: [306..307]
 r230: [302..303]
 r231: [300..301]
 r232: [298..299]
 r233: [282..297]
 r235: [290..291]
 r236: [288..289]
 r237: [282..283]
 r238: [278..279]
 r239: [276..277]
 r240: [260..275]
 r242: [268..269]
 r243: [266..267]
 r244: [260..261]
 r245: [256..257]
 r246: [254..255]
 r247: [252..253]
 r248: [236..251]
 r250: [244..245]
 r251: [242..243]
 r252: [236..237]
 r253: [2..3]
 r254: [0..1]
 r255: [30..31]
 r256: [28..29]
 r257: [26..27]
 r258: [24..25]
 r259: [22..23]
 r260: [20..21]
 r261: [18..19]
 r262: [16..17]
 r263: [14..15]
 r264: [12..13]
 r265: [10..11]
 r266: [8..9]
 r267: [502..503]
 r268: [498..499]
 r269: [492..493]
 r270: [488..489]
 r271: [480..481]
 r272: [474..475]
 r273: [468..469]
 r274: [462..463]
 r275: [450..451]
 r276: [448..449]
 r277: [444..445]
 r278: [438..439]
 r279: [432..433]
 r280: [424..425]
 r281: [422..423]
 r282: [418..419]
 r283: [412..413]
 r284: [408..409]
 r285: [400..401]
 r286: [394..395]
 r287: [388..389]
 r288: [382..383]
 r289: [370..371]
 r290: [368..369]
 r291: [364..365]
 r292: [358..359]
 r293: [352..353]
 r294: [344..345]
 r295: [342..343]
 r296: [234..235]
 r297: [230..231]
 r298: [224..225]
 r299: [220..221]
 r300: [212..213]
 r301: [206..207]
 r302: [200..201]
 r303: [194..195]
 r304: [182..183]
 r305: [180..181]
 r306: [176..177]
 r307: [170..171]
 r308: [164..165]
 r309: [156..157]
 r310: [154..155]
 r311: [146..147]
 r312: [148..149]
 r313: [152..153]
 r314: [140..141]
 r315: [144..145]
 r316: [138..139]
 r317: [134..135]
 r318: [130..131]
 r319: [116..117]
 r320: [110..111]
 r321: [106..107]
 r322: [92..93]
 r323: [84..85]
 r324: [86..87]
 r325: [90..91]
 r326: [78..79]
 r327: [82..83]
 r328: [76..77]
 r329: [72..73]
 r330: [68..69]
 r331: [54..55]
 r332: [48..49]
 r333: [44..45]
 r334: [334..335]
 r335: [338..339]
 r336: [328..329]
 r337: [332..333]
 r338: [326..327]
 r339: [322..323]
 r340: [318..319]
 r341: [304..305]
 r342: [298..299]
 r343: [294..295]
 r344: [280..281]
 r345: [276..277]
 r346: [272..273]
 r347: [258..259]
 r348: [252..253]
 r349: [248..249]
 r350: [6..7]
 r352: [150..151]
 r353: [142..143]
 r354: [132..133]
 r355: [128..129]
 r356: [120..123]
 r358: [108..109]
 r359: [104..105]
 r360: [96..99]
 r362: [88..89]
 r363: [80..81]
 r364: [70..71]
 r365: [66..67]
 r366: [58..61]
 r368: [46..47]
 r369: [42..43]
 r370: [34..37]
 r372: [336..337]
 r373: [330..331]
 r374: [320..321]
 r375: [316..317]
 r376: [308..311]
 r378: [296..297]
 r379: [292..293]
 r380: [284..287]
 r382: [274..275]
 r383: [270..271]
 r384: [262..265]
 r386: [250..251]
 r387: [246..247]
 r388: [238..241]
 r398: [238..239]
 r399: [262..263]
 r400: [284..285]
 r401: [308..309]
 r402: [34..35]
 r403: [58..59]
 r404: [96..97]
 r405: [120..121]
 r406: [98..107]
 r407: [122..131]
 r408: [36..45]
 r409: [60..69]
 r410: [240..249]
 r411: [264..273]
 r412: [286..295]
 r413: [310..319]

********** Assignment #2: **********

	 Assigning to 398 (cl=SSE_REGS, orig=249, freq=2, tfirst=398, tfreq=2)...
	   Assign 27 to optional reload r398 (freq=2)
	Hard reg 27 is preferable by r410 with profit 1
	 Assigning to 410 (cl=SSE_REGS, orig=249, freq=2, tfirst=398, tfreq=2)...
	 Assigning to 399 (cl=SSE_REGS, orig=241, freq=2, tfirst=399, tfreq=2)...
	   Assign 28 to optional reload r399 (freq=2)
	Hard reg 28 is preferable by r411 with profit 1
	 Assigning to 411 (cl=SSE_REGS, orig=241, freq=2, tfirst=399, tfreq=2)...
	 Assigning to 400 (cl=SSE_REGS, orig=234, freq=2, tfirst=400, tfreq=2)...
	   Assign 24 to optional reload r400 (freq=2)
	Hard reg 24 is preferable by r412 with profit 1
	 Assigning to 412 (cl=SSE_REGS, orig=234, freq=2, tfirst=400, tfreq=2)...
	 Assigning to 401 (cl=SSE_REGS, orig=226, freq=2, tfirst=401, tfreq=2)...
	   Assign 25 to optional reload r401 (freq=2)
	Hard reg 25 is preferable by r413 with profit 1
	 Assigning to 413 (cl=SSE_REGS, orig=226, freq=2, tfirst=401, tfreq=2)...
	 Assigning to 402 (cl=SSE_REGS, orig=219, freq=2, tfirst=402, tfreq=2)...
	   Assign 26 to optional reload r402 (freq=2)
	Hard reg 26 is preferable by r408 with profit 1
	 Assigning to 408 (cl=SSE_REGS, orig=219, freq=2, tfirst=402, tfreq=2)...
	 Assigning to 403 (cl=SSE_REGS, orig=211, freq=2, tfirst=403, tfreq=2)...
	   Assign 27 to optional reload r403 (freq=2)
	Hard reg 27 is preferable by r409 with profit 1
	 Assigning to 409 (cl=SSE_REGS, orig=211, freq=2, tfirst=403, tfreq=2)...
	 Assigning to 404 (cl=SSE_REGS, orig=204, freq=2, tfirst=404, tfreq=2)...
	   Assign 28 to optional reload r404 (freq=2)
	Hard reg 28 is preferable by r406 with profit 1
	 Assigning to 406 (cl=SSE_REGS, orig=204, freq=2, tfirst=404, tfreq=2)...
	 Assigning to 405 (cl=SSE_REGS, orig=196, freq=2, tfirst=405, tfreq=2)...
	   Assign 23 to optional reload r405 (freq=2)
	Hard reg 23 is preferable by r407 with profit 1
	 Assigning to 407 (cl=SSE_REGS, orig=196, freq=2, tfirst=405, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 8 (0.00%)
   Insn after restoring regs:
  479: r404:SF=r204:SF
      REG_DEAD r204:SF
   Insn after restoring regs:
  422: r204:SF=r358:SF
      REG_DEAD r358:SF
   Insn after restoring regs:
  480: r405:SF=r196:SF
      REG_DEAD r196:SF
   Insn after restoring regs:
  417: r196:SF=r354:SF
      REG_DEAD r354:SF
   Insn after restoring regs:
  477: r402:SF=r219:SF
      REG_DEAD r219:SF
   Insn after restoring regs:
  436: r219:SF=r368:SF
      REG_DEAD r368:SF
   Insn after restoring regs:
  478: r403:SF=r211:SF
      REG_DEAD r211:SF
   Insn after restoring regs:
  431: r211:SF=r364:SF
      REG_DEAD r364:SF
   Insn after restoring regs:
  473: r398:SF=r249:SF
      REG_DEAD r249:SF
   Insn after restoring regs:
  460: r249:SF=r386:SF
      REG_DEAD r386:SF
   Insn after restoring regs:
  474: r399:SF=r241:SF
      REG_DEAD r241:SF
   Insn after restoring regs:
  455: r241:SF=r382:SF
      REG_DEAD r382:SF
   Insn after restoring regs:
  475: r400:SF=r234:SF
      REG_DEAD r234:SF
   Insn after restoring regs:
  450: r234:SF=r378:SF
      REG_DEAD r378:SF
   Insn after restoring regs:
  476: r401:SF=r226:SF
      REG_DEAD r226:SF
   Insn after restoring regs:
  445: r226:SF=r374:SF
      REG_DEAD r374:SF
Keep optional reload reg 357
Keep optional reload reg 361
Keep optional reload reg 367
Keep optional reload reg 371
Keep optional reload reg 377
Keep optional reload reg 381
Keep optional reload reg 385
Keep optional reload reg 389
Remove optional reload reg 398
  Restoring original insn:
  373: r388:SF=r388:SF*r249:SF
      REG_DEAD r249:SF
  Deleting move 473
  473: r398:SF=r249:SF
      REG_DEAD r249:SF
deleting insn with uid = 473.
Remove optional reload reg 399
  Restoring original insn:
  359: r384:SF=r384:SF*r241:SF
      REG_DEAD r241:SF
  Deleting move 474
  474: r399:SF=r241:SF
      REG_DEAD r241:SF
deleting insn with uid = 474.
Remove optional reload reg 400
  Restoring original insn:
  346: r380:SF=r380:SF*r234:SF
      REG_DEAD r234:SF
  Deleting move 475
  475: r400:SF=r234:SF
      REG_DEAD r234:SF
deleting insn with uid = 475.
Remove optional reload reg 401
  Restoring original insn:
  332: r376:SF=r376:SF*r226:SF
      REG_DEAD r226:SF
  Deleting move 476
  476: r401:SF=r226:SF
      REG_DEAD r226:SF
deleting insn with uid = 476.
Remove optional reload reg 402
  Restoring original insn:
  309: r370:SF=r370:SF*r219:SF
      REG_DEAD r219:SF
  Deleting move 477
  477: r402:SF=r219:SF
      REG_DEAD r219:SF
deleting insn with uid = 477.
Remove optional reload reg 403
  Restoring original insn:
  295: r366:SF=r366:SF*r211:SF
      REG_DEAD r211:SF
  Deleting move 478
  478: r403:SF=r211:SF
      REG_DEAD r211:SF
deleting insn with uid = 478.
Remove optional reload reg 404
  Restoring original insn:
  261: r360:SF=r360:SF*r204:SF
      REG_DEAD r204:SF
  Deleting move 479
  479: r404:SF=r204:SF
      REG_DEAD r204:SF
deleting insn with uid = 479.
Remove optional reload reg 405
  Restoring original insn:
  247: r356:SF=r356:SF*r196:SF
      REG_DEAD r196:SF
  Deleting move 480
  480: r405:SF=r196:SF
      REG_DEAD r196:SF
deleting insn with uid = 480.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 373:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 359:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 346:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 332:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 295:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 261:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}

********** Pseudo live ranges #3: **********

  BB 14
   Insn 394: point = 0
   Insn 393: point = 0
   Insn 389: point = 1
   Insn 386: point = 3
  BB 13
   Insn 384: point = 4
   Insn 383: point = 4
   Insn 381: point = 5
   Insn 380: point = 7
  BB 2
   Insn 402: point = 8
   Insn 35: point = 8
   Insn 34: point = 8
   Insn 33: point = 9
   Insn 32: point = 10
   Insn 31: point = 11
   Insn 30: point = 12
   Insn 29: point = 13
   Insn 28: point = 14
   Insn 27: point = 15
   Insn 26: point = 16
   Insn 25: point = 17
   Insn 24: point = 18
   Insn 23: point = 19
   Insn 22: point = 20
   Insn 21: point = 21
   Insn 20: point = 22
   Insn 19: point = 23
   Insn 18: point = 24
   Insn 17: point = 25
   Insn 16: point = 26
   Insn 15: point = 27
   Insn 14: point = 28
   Insn 13: point = 29
   Insn 12: point = 30
   Insn 11: point = 31
   Insn 10: point = 32
   Insn 6: point = 32
   Insn 5: point = 32
   Insn 4: point = 32
   Insn 3: point = 32
   Insn 2: point = 32
  BB 12
   Insn 377: point = 32
  BB 10
   Insn 410: point = 32
   Insn 310: point = 32
   Insn 439: point = 33
   Insn 309: point = 35
   Insn 438: point = 36
   Insn 308: point = 38
   Insn 307: point = 40
   Insn 306: point = 41
   Insn 437: point = 41
   Insn 305: point = 42
   Insn 304: point = 44
   Insn 436: point = 45
   Insn 303: point = 47
   Insn 302: point = 48
   Insn 301: point = 50
   Insn 300: point = 51
   Insn 299: point = 53
   Insn 298: point = 55
   Insn 297: point = 57
   Insn 296: point = 58
   Insn 434: point = 59
   Insn 295: point = 61
   Insn 433: point = 62
   Insn 294: point = 64
   Insn 293: point = 66
   Insn 292: point = 67
   Insn 432: point = 67
   Insn 291: point = 68
   Insn 290: point = 70
   Insn 431: point = 71
   Insn 289: point = 73
   Insn 288: point = 74
   Insn 287: point = 76
   Insn 286: point = 77
   Insn 285: point = 79
   Insn 284: point = 81
   Insn 283: point = 82
   Insn 430: point = 83
   Insn 282: point = 85
   Insn 429: point = 85
   Insn 281: point = 87
  BB 8
   Insn 408: point = 88
   Insn 271: point = 88
   Insn 270: point = 89
  BB 9
   Insn 278: point = 90
   Insn 428: point = 91
   Insn 277: point = 93
   Insn 427: point = 93
   Insn 276: point = 95
  BB 7
   Insn 265: point = 96
   Insn 264: point = 96
   Insn 263: point = 97
   Insn 262: point = 98
   Insn 425: point = 99
   Insn 261: point = 101
   Insn 424: point = 102
   Insn 260: point = 104
   Insn 259: point = 106
   Insn 258: point = 107
   Insn 423: point = 107
   Insn 257: point = 108
   Insn 256: point = 110
   Insn 422: point = 111
   Insn 255: point = 113
   Insn 254: point = 114
   Insn 253: point = 116
   Insn 252: point = 117
   Insn 251: point = 119
   Insn 250: point = 121
   Insn 249: point = 123
   Insn 248: point = 124
   Insn 420: point = 125
   Insn 247: point = 127
   Insn 419: point = 128
   Insn 246: point = 130
   Insn 245: point = 132
   Insn 244: point = 133
   Insn 418: point = 133
   Insn 243: point = 134
   Insn 242: point = 136
   Insn 417: point = 137
   Insn 241: point = 139
   Insn 240: point = 140
   Insn 239: point = 142
   Insn 238: point = 143
   Insn 237: point = 145
   Insn 236: point = 147
   Insn 235: point = 148
   Insn 416: point = 149
   Insn 234: point = 151
   Insn 415: point = 151
   Insn 233: point = 153
  BB 5
   Insn 405: point = 154
   Insn 223: point = 154
   Insn 222: point = 155
  BB 6
   Insn 230: point = 156
   Insn 414: point = 157
   Insn 229: point = 159
   Insn 413: point = 159
   Insn 228: point = 161
  BB 4
   Insn 217: point = 162
   Insn 216: point = 162
   Insn 215: point = 163
   Insn 214: point = 164
   Insn 213: point = 165
   Insn 212: point = 166
   Insn 211: point = 166
   Insn 210: point = 167
   Insn 209: point = 168
   Insn 208: point = 170
   Insn 207: point = 172
   Insn 206: point = 174
   Insn 205: point = 175
   Insn 204: point = 177
   Insn 203: point = 179
   Insn 202: point = 181
   Insn 201: point = 182
   Insn 200: point = 184
   Insn 199: point = 186
   Insn 198: point = 188
   Insn 197: point = 189
   Insn 196: point = 191
   Insn 195: point = 193
   Insn 194: point = 194
   Insn 193: point = 195
   Insn 192: point = 196
   Insn 191: point = 196
   Insn 190: point = 197
   Insn 189: point = 199
   Insn 188: point = 201
   Insn 187: point = 203
   Insn 186: point = 205
   Insn 185: point = 207
   Insn 184: point = 208
   Insn 183: point = 210
   Insn 182: point = 212
   Insn 181: point = 214
   Insn 180: point = 215
   Insn 179: point = 217
   Insn 178: point = 219
   Insn 177: point = 221
   Insn 176: point = 222
   Insn 175: point = 224
   Insn 174: point = 226
   Insn 173: point = 228
   Insn 172: point = 229
   Insn 171: point = 231
   Insn 170: point = 233
   Insn 169: point = 235
   Insn 168: point = 237
   Insn 167: point = 238
   Insn 166: point = 240
   Insn 165: point = 242
   Insn 164: point = 243
   Insn 163: point = 245
   Insn 162: point = 247
   Insn 161: point = 249
   Insn 160: point = 250
   Insn 159: point = 252
   Insn 158: point = 254
  BB 11
   Insn 374: point = 255
   Insn 463: point = 256
   Insn 373: point = 258
   Insn 462: point = 259
   Insn 372: point = 261
   Insn 371: point = 263
   Insn 370: point = 264
   Insn 461: point = 264
   Insn 369: point = 265
   Insn 368: point = 267
   Insn 460: point = 268
   Insn 367: point = 270
   Insn 366: point = 271
   Insn 365: point = 273
   Insn 364: point = 274
   Insn 363: point = 276
   Insn 362: point = 278
   Insn 361: point = 280
   Insn 360: point = 281
   Insn 458: point = 282
   Insn 359: point = 284
   Insn 457: point = 285
   Insn 358: point = 287
   Insn 357: point = 289
   Insn 356: point = 290
   Insn 456: point = 290
   Insn 355: point = 291
   Insn 354: point = 293
   Insn 455: point = 294
   Insn 353: point = 296
   Insn 352: point = 297
   Insn 351: point = 299
   Insn 350: point = 300
   Insn 349: point = 302
   Insn 348: point = 304
   Insn 347: point = 305
   Insn 453: point = 306
   Insn 346: point = 308
   Insn 452: point = 309
   Insn 345: point = 311
   Insn 344: point = 313
   Insn 343: point = 314
   Insn 451: point = 314
   Insn 342: point = 315
   Insn 341: point = 317
   Insn 450: point = 318
   Insn 340: point = 320
   Insn 339: point = 321
   Insn 338: point = 323
   Insn 337: point = 324
   Insn 336: point = 326
   Insn 335: point = 328
   Insn 334: point = 330
   Insn 333: point = 331
   Insn 448: point = 332
   Insn 332: point = 334
   Insn 447: point = 335
   Insn 331: point = 337
   Insn 330: point = 339
   Insn 329: point = 340
   Insn 446: point = 340
   Insn 328: point = 341
   Insn 327: point = 343
   Insn 445: point = 344
   Insn 326: point = 346
   Insn 325: point = 347
   Insn 324: point = 349
   Insn 323: point = 350
   Insn 322: point = 352
   Insn 321: point = 354
   Insn 320: point = 355
   Insn 444: point = 356
   Insn 319: point = 358
   Insn 443: point = 358
   Insn 318: point = 360
   Insn 317: point = 361
   Insn 442: point = 362
   Insn 316: point = 364
   Insn 441: point = 364
   Insn 315: point = 366
  BB 3
   Insn 156: point = 367
   Insn 155: point = 367
   Insn 154: point = 368
   Insn 153: point = 370
   Insn 152: point = 371
   Insn 151: point = 372
   Insn 150: point = 373
   Insn 149: point = 373
   Insn 148: point = 374
   Insn 147: point = 375
   Insn 146: point = 377
   Insn 145: point = 379
   Insn 144: point = 381
   Insn 143: point = 382
   Insn 142: point = 384
   Insn 141: point = 386
   Insn 140: point = 388
   Insn 139: point = 389
   Insn 138: point = 391
   Insn 137: point = 393
   Insn 136: point = 395
   Insn 135: point = 396
   Insn 134: point = 398
   Insn 133: point = 400
   Insn 132: point = 401
   Insn 131: point = 402
   Insn 130: point = 403
   Insn 129: point = 403
   Insn 128: point = 404
   Insn 127: point = 406
   Insn 126: point = 408
   Insn 125: point = 410
   Insn 124: point = 412
   Insn 123: point = 414
   Insn 122: point = 415
   Insn 121: point = 417
   Insn 120: point = 419
   Insn 119: point = 421
   Insn 118: point = 422
   Insn 117: point = 424
   Insn 116: point = 426
   Insn 115: point = 428
   Insn 114: point = 429
   Insn 113: point = 431
   Insn 112: point = 433
   Insn 111: point = 435
   Insn 110: point = 436
   Insn 109: point = 438
   Insn 108: point = 440
   Insn 107: point = 442
   Insn 106: point = 444
   Insn 105: point = 445
   Insn 104: point = 447
   Insn 103: point = 449
   Insn 102: point = 450
   Insn 101: point = 452
   Insn 100: point = 454
   Insn 99: point = 456
   Insn 98: point = 457
   Insn 97: point = 459
   Insn 96: point = 461
   Insn 95: point = 462
   Insn 94: point = 463
   Insn 93: point = 464
   Insn 92: point = 464
   Insn 91: point = 465
   Insn 90: point = 466
   Insn 89: point = 468
   Insn 88: point = 470
   Insn 87: point = 472
   Insn 86: point = 473
   Insn 85: point = 475
   Insn 84: point = 477
   Insn 83: point = 479
   Insn 82: point = 480
   Insn 81: point = 482
   Insn 80: point = 484
   Insn 79: point = 486
   Insn 78: point = 487
   Insn 77: point = 489
   Insn 76: point = 491
   Insn 75: point = 492
   Insn 74: point = 493
   Insn 73: point = 494
   Insn 72: point = 494
   Insn 71: point = 495
   Insn 70: point = 497
   Insn 69: point = 499
   Insn 68: point = 501
   Insn 67: point = 503
   Insn 66: point = 505
   Insn 65: point = 506
   Insn 64: point = 508
   Insn 63: point = 510
   Insn 62: point = 512
   Insn 61: point = 513
   Insn 60: point = 515
   Insn 59: point = 517
   Insn 58: point = 519
   Insn 57: point = 520
   Insn 56: point = 522
   Insn 55: point = 524
   Insn 54: point = 526
   Insn 53: point = 527
   Insn 52: point = 529
   Insn 51: point = 531
   Insn 50: point = 533
   Insn 49: point = 535
   Insn 48: point = 536
   Insn 47: point = 538
   Insn 46: point = 540
   Insn 45: point = 541
   Insn 44: point = 543
   Insn 43: point = 545
   Insn 42: point = 547
   Insn 41: point = 548
   Insn 40: point = 550
   Insn 39: point = 552
 r196: [127..137]
 r204: [101..111]
 r211: [61..71]
 r219: [35..45]
 r226: [334..344]
 r234: [308..318]
 r241: [284..294]
 r249: [258..268]
 r355: [133..134]
 r359: [107..108]
 r365: [67..68]
 r369: [41..42]
 r375: [340..341]
 r379: [314..315]
 r383: [290..291]
 r387: [264..265]
Compressing live ranges: from 553 to 16 - 2%
Ranges after the compression:
 r196: [6..7]
 r204: [4..5]
 r211: [2..3]
 r219: [0..1]
 r226: [14..15]
 r234: [12..13]
 r241: [10..11]
 r249: [8..9]
 r355: [6..7]
 r359: [4..5]
 r365: [2..3]
 r369: [0..1]
 r375: [14..15]
 r379: [12..13]
 r383: [10..11]
 r387: [8..9]
  Slot 0 regnos (width = 4):	 196	 249	 241	 234	 226	 219	 211	 204
  Slot 1 regnos (width = 8):	 355	 387	 383	 379	 375	 369	 365	 359
Changing spilled pseudos to memory in insn #417
Changing spilled pseudos to memory in insn #243
Changing spilled pseudos to memory in insn #418
Changing spilled pseudos to memory in insn #247
Changing spilled pseudos to memory in insn #422
Changing spilled pseudos to memory in insn #257
Changing spilled pseudos to memory in insn #423
Changing spilled pseudos to memory in insn #261
Changing spilled pseudos to memory in insn #431
Changing spilled pseudos to memory in insn #291
Changing spilled pseudos to memory in insn #432
Changing spilled pseudos to memory in insn #295
Changing spilled pseudos to memory in insn #436
Changing spilled pseudos to memory in insn #305
Changing spilled pseudos to memory in insn #437
Changing spilled pseudos to memory in insn #309
Changing spilled pseudos to memory in insn #445
Changing spilled pseudos to memory in insn #328
Changing spilled pseudos to memory in insn #446
Changing spilled pseudos to memory in insn #332
Changing spilled pseudos to memory in insn #450
Changing spilled pseudos to memory in insn #342
Changing spilled pseudos to memory in insn #451
Changing spilled pseudos to memory in insn #346
Changing spilled pseudos to memory in insn #455
Changing spilled pseudos to memory in insn #355
Changing spilled pseudos to memory in insn #456
Changing spilled pseudos to memory in insn #359
Changing spilled pseudos to memory in insn #460
Changing spilled pseudos to memory in insn #369
Changing spilled pseudos to memory in insn #461
Changing spilled pseudos to memory in insn #373
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #373
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #461
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 461:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 369:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #460
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 460:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #359
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #456
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 456:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 355:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #455
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 455:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #346
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #451
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 451:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 342:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #450
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 450:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #332
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #446
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 446:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 328:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #445
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 445:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #309
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #437
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 437:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 305:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #436
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 436:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #295
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #432
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 432:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 291:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #431
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 431:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #261
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #423
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 423:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 257:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #422
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 422:  (0) m  (1) v {*movsf_internal}
Reusing alternative 0 for insn #247
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
Reusing alternative 11 for insn #418
          alt=11,overall=0,losers=0,rld_nregs=0
	 Choosing alt 11 in insn 418:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=6,overall=6,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 243:  (0) ?m  (1) rC {*movdf_internal}
Reusing alternative 8 for insn #417
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 417:  (0) m  (1) v {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=208, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=176, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 381
changing reg in insn 383
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 53
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 91
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 92
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 110
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 148
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 145
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 154
changing reg in insn 155
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 172
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 180
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 210
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 211
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 240
changing reg in insn 240
changing reg in insn 240
changing reg in insn 248
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 252
changing reg in insn 252
changing reg in insn 254
changing reg in insn 254
changing reg in insn 254
changing reg in insn 262
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 262
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 288
changing reg in insn 288
changing reg in insn 288
changing reg in insn 296
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 298
changing reg in insn 299
changing reg in insn 299
changing reg in insn 300
changing reg in insn 300
changing reg in insn 302
changing reg in insn 302
changing reg in insn 302
changing reg in insn 310
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 310
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 325
changing reg in insn 325
changing reg in insn 325
changing reg in insn 333
changing reg in insn 330
changing reg in insn 331
changing reg in insn 331
changing reg in insn 333
changing reg in insn 335
changing reg in insn 336
changing reg in insn 336
changing reg in insn 337
changing reg in insn 337
changing reg in insn 339
changing reg in insn 339
changing reg in insn 339
changing reg in insn 347
changing reg in insn 344
changing reg in insn 345
changing reg in insn 345
changing reg in insn 347
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 352
changing reg in insn 352
changing reg in insn 352
changing reg in insn 360
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 360
changing reg in insn 362
changing reg in insn 363
changing reg in insn 363
changing reg in insn 364
changing reg in insn 364
changing reg in insn 366
changing reg in insn 366
changing reg in insn 366
changing reg in insn 374
changing reg in insn 371
changing reg in insn 372
changing reg in insn 372
changing reg in insn 374
changing reg in insn 386
changing reg in insn 389
changing reg in insn 389
changing reg in insn 393
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 140
changing reg in insn 141
changing reg in insn 144
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 158
changing reg in insn 159
changing reg in insn 161
changing reg in insn 165
changing reg in insn 166
changing reg in insn 168
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 181
changing reg in insn 182
changing reg in insn 185
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 202
changing reg in insn 203
changing reg in insn 206
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 222
changing reg in insn 223
changing reg in insn 230
changing reg in insn 228
changing reg in insn 235
changing reg in insn 233
changing reg in insn 236
changing reg in insn 237
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 249
changing reg in insn 250
changing reg in insn 253
changing reg in insn 254
changing reg in insn 256
changing reg in insn 257
changing reg in insn 263
changing reg in insn 264
changing reg in insn 270
changing reg in insn 271
changing reg in insn 278
changing reg in insn 276
changing reg in insn 283
changing reg in insn 281
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 288
changing reg in insn 290
changing reg in insn 291
changing reg in insn 297
changing reg in insn 298
changing reg in insn 301
changing reg in insn 302
changing reg in insn 304
changing reg in insn 305
changing reg in insn 317
changing reg in insn 315
changing reg in insn 320
changing reg in insn 318
changing reg in insn 321
changing reg in insn 322
changing reg in insn 324
changing reg in insn 325
changing reg in insn 327
changing reg in insn 328
changing reg in insn 334
changing reg in insn 335
changing reg in insn 338
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 348
changing reg in insn 349
changing reg in insn 351
changing reg in insn 352
changing reg in insn 354
changing reg in insn 355
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 366
changing reg in insn 368
changing reg in insn 369
changing reg in insn 380
changing reg in insn 381
deleting insn with uid = 72.
deleting insn with uid = 91.
deleting insn with uid = 92.
deleting insn with uid = 129.
deleting insn with uid = 148.
deleting insn with uid = 149.
deleting insn with uid = 191.
deleting insn with uid = 210.
deleting insn with uid = 211.
deleting insn with uid = 413.
deleting insn with uid = 415.
deleting insn with uid = 245.
deleting insn with uid = 419.
deleting insn with uid = 259.
deleting insn with uid = 424.
deleting insn with uid = 427.
deleting insn with uid = 429.
deleting insn with uid = 293.
deleting insn with uid = 433.
deleting insn with uid = 307.
deleting insn with uid = 438.
deleting insn with uid = 441.
deleting insn with uid = 443.
deleting insn with uid = 330.
deleting insn with uid = 447.
deleting insn with uid = 344.
deleting insn with uid = 452.
deleting insn with uid = 357.
deleting insn with uid = 457.
deleting insn with uid = 371.
deleting insn with uid = 462.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 192.
verify found no changes in insn with uid = 212.
verify found no changes in insn with uid = 244.
verify found no changes in insn with uid = 258.
verify found no changes in insn with uid = 292.
verify found no changes in insn with uid = 306.
verify found no changes in insn with uid = 329.
verify found no changes in insn with uid = 343.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 370.


int quecc(float*, float*, float*, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7] 37[r8]
;;  ref usage 	r0={173d,159u} r1={41d,27u,26e} r2={15d,1u} r3={8d,8u} r4={15d,1u} r5={15d,1u} r6={1d,167u} r7={1d,28u} r8={14d} r9={14d} r10={14d} r11={14d} r12={14d} r13={14d} r14={14d} r15={14d} r17={84d,4u} r18={14d} r19={14d} r20={1d,1u,26e} r21={86d,85u} r22={24d,9u} r23={18d,3u} r24={17d,2u} r25={17d,2u} r26={17d,2u} r27={16d,1u} r28={16d,1u} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={14d} r37={15d,1u} r38={15d} r39={14d} r40={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r76={14d} 
;;    total ref usage 1878{1323d,503u,52e} in 368{354 regular + 14 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 255 256 257 258 259 260 261 262 263 264 265 266
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])
        (reg:DI 5 di [ sup_data ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])
        (reg:DI 4 si [ unsup_data ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])
        (reg:DI 1 dx [ scratch ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 procpar_info+0 S8 A64])
        (reg:DI 2 cx [ procpar_info ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 preprocess+0 S8 A64])
        (reg:DI 37 r8 [ preprocess ])) preproc.cpp:488 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:490 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DF 0 ax [255])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [255])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DF 0 ax [256])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [256])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DF 0 ax [257])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [257])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DF 0 ax [258])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [258])) preproc.cpp:491 128 {*movdf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DF 0 ax [259])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [259])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DF 0 ax [260])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 22 21 23 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [260])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DF 0 ax [261])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 0 ax [261])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (reg:DF 0 ax [262])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 0 ax [262])) preproc.cpp:492 128 {*movdf_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DF 0 ax [263])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:493 128 {*movdf_internal}
     (nil))
(insn 28 27 29 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [263])) preproc.cpp:493 128 {*movdf_internal}
     (nil))
(insn 29 28 30 2 (set (reg:DF 0 ax [264])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:493 128 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [264])) preproc.cpp:493 128 {*movdf_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DF 0 ax [265])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 32 31 33 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 0 ax [265])) preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DF 0 ax [266])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 34 33 35 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 0 ax [266])) preproc.cpp:494 128 {*movdf_internal}
     (nil))
(insn 35 34 402 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
        (const_int 0 [0])) preproc.cpp:496 90 {*movsi_internal}
     (nil))
(jump_insn 402 35 403 2 (set (pc)
        (label_ref 378)) preproc.cpp:496 636 {jump}
     (nil)
 -> 378)
;;  succ:       13 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 403 402 382)
;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295
(code_label 382 403 38 3 104 "" [1 uses])
(note 38 382 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 3 (set (reg:SI 0 ax [267])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:498 90 {*movsi_internal}
     (nil))
(insn 40 39 41 3 (set (reg:DI 0 ax [orig:84 D.6820 ] [84])
        (sign_extend:DI (reg:SI 0 ax [267]))) preproc.cpp:498 142 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 3 (parallel [
            (set (reg:DI 1 dx [orig:85 D.6820 ] [85])
                (ashift:DI (reg:DI 0 ax [orig:84 D.6820 ] [84])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:498 497 {*ashldi3_1}
     (nil))
(insn 42 41 43 3 (set (reg/f:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:498 89 {*movdi_internal}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg/f:DI 0 ax [orig:86 D.6821 ] [86])
                (plus:DI (reg/f:DI 0 ax [268])
                    (reg:DI 1 dx [orig:85 D.6820 ] [85])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:498 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:85 D.6820 ] [85]))
        (nil)))
(insn 44 43 45 3 (set (reg:SF 21 xmm0 [orig:87 D.6822 ] [87])
        (mem:SF (reg/f:DI 0 ax [orig:86 D.6821 ] [86]) [0 *_23+0 S4 A32])) preproc.cpp:498 129 {*movsf_internal}
     (nil))
(insn 45 44 46 3 (set (reg:DF 22 xmm1 [orig:88 D.6823 ] [88])
        (float_extend:DF (reg:SF 21 xmm0 [orig:87 D.6822 ] [87]))) preproc.cpp:498 152 {*extendsfdf2_sse}
     (nil))
(insn 46 45 47 3 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:498 90 {*movsi_internal}
     (nil))
(insn 47 46 48 3 (set (reg:DI 0 ax [orig:89 D.6820 ] [89])
        (sign_extend:DI (reg:SI 0 ax [269]))) preproc.cpp:498 142 {*extendsidi2_rex64}
     (nil))
(insn 48 47 49 3 (parallel [
            (set (reg:DI 1 dx [orig:90 D.6820 ] [90])
                (ashift:DI (reg:DI 0 ax [orig:89 D.6820 ] [89])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:498 497 {*ashldi3_1}
     (nil))
(insn 49 48 50 3 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:498 89 {*movdi_internal}
     (nil))
(insn 50 49 51 3 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.6821 ] [91])
                (plus:DI (reg/f:DI 0 ax [270])
                    (reg:DI 1 dx [orig:90 D.6820 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:498 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.6820 ] [90]))
        (nil)))
(insn 51 50 52 3 (set (reg:SF 21 xmm0 [orig:92 D.6822 ] [92])
        (mem:SF (reg/f:DI 0 ax [orig:91 D.6821 ] [91]) [0 *_28+0 S4 A32])) preproc.cpp:498 129 {*movsf_internal}
     (nil))
(insn 52 51 53 3 (set (reg:DF 21 xmm0 [orig:93 D.6823 ] [93])
        (float_extend:DF (reg:SF 21 xmm0 [orig:92 D.6822 ] [92]))) preproc.cpp:498 152 {*extendsfdf2_sse}
     (nil))
(insn 53 52 54 3 (set (reg:DF 22 xmm1 [orig:94 D.6823 ] [94])
        (mult:DF (reg:DF 22 xmm1 [orig:88 D.6823 ] [88])
            (reg:DF 21 xmm0 [orig:93 D.6823 ] [93]))) preproc.cpp:498 776 {*fop_df_comm_sse}
     (nil))
(insn 54 53 55 3 (set (reg:SI 0 ax [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:499 90 {*movsi_internal}
     (nil))
(insn 55 54 56 3 (set (reg:DI 0 ax [orig:95 D.6824 ] [95])
        (sign_extend:DI (reg:SI 0 ax [271]))) preproc.cpp:499 142 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 3 (parallel [
            (set (reg:DI 0 ax [orig:96 D.6824 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 D.6824 ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 221 {*adddi_1}
     (nil))
(insn 57 56 58 3 (parallel [
            (set (reg:DI 1 dx [orig:97 D.6824 ] [97])
                (ashift:DI (reg:DI 0 ax [orig:96 D.6824 ] [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 497 {*ashldi3_1}
     (nil))
(insn 58 57 59 3 (set (reg/f:DI 0 ax [272])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:499 89 {*movdi_internal}
     (nil))
(insn 59 58 60 3 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.6821 ] [98])
                (plus:DI (reg/f:DI 0 ax [272])
                    (reg:DI 1 dx [orig:97 D.6824 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.6824 ] [97]))
        (nil)))
(insn 60 59 61 3 (set (reg:SF 21 xmm0 [orig:99 D.6822 ] [99])
        (mem:SF (reg/f:DI 0 ax [orig:98 D.6821 ] [98]) [0 *_35+0 S4 A32])) preproc.cpp:499 129 {*movsf_internal}
     (nil))
(insn 61 60 62 3 (set (reg:DF 23 xmm2 [orig:100 D.6823 ] [100])
        (float_extend:DF (reg:SF 21 xmm0 [orig:99 D.6822 ] [99]))) preproc.cpp:499 152 {*extendsfdf2_sse}
     (nil))
(insn 62 61 63 3 (set (reg:SI 0 ax [273])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:499 90 {*movsi_internal}
     (nil))
(insn 63 62 64 3 (set (reg:DI 0 ax [orig:101 D.6824 ] [101])
        (sign_extend:DI (reg:SI 0 ax [273]))) preproc.cpp:499 142 {*extendsidi2_rex64}
     (nil))
(insn 64 63 65 3 (parallel [
            (set (reg:DI 0 ax [orig:102 D.6824 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 D.6824 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 221 {*adddi_1}
     (nil))
(insn 65 64 66 3 (parallel [
            (set (reg:DI 1 dx [orig:103 D.6824 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.6824 ] [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 497 {*ashldi3_1}
     (nil))
(insn 66 65 67 3 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:499 89 {*movdi_internal}
     (nil))
(insn 67 66 68 3 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.6821 ] [104])
                (plus:DI (reg/f:DI 0 ax [274])
                    (reg:DI 1 dx [orig:103 D.6824 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:499 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.6824 ] [103]))
        (nil)))
(insn 68 67 69 3 (set (reg:SF 21 xmm0 [orig:105 D.6822 ] [105])
        (mem:SF (reg/f:DI 0 ax [orig:104 D.6821 ] [104]) [0 *_41+0 S4 A32])) preproc.cpp:499 129 {*movsf_internal}
     (nil))
(insn 69 68 70 3 (set (reg:DF 21 xmm0 [orig:106 D.6823 ] [106])
        (float_extend:DF (reg:SF 21 xmm0 [orig:105 D.6822 ] [105]))) preproc.cpp:499 152 {*extendsfdf2_sse}
     (nil))
(insn 70 69 71 3 (set (reg:DF 21 xmm0 [orig:107 D.6823 ] [107])
        (mult:DF (reg:DF 21 xmm0 [orig:106 D.6823 ] [106])
            (reg:DF 23 xmm2 [orig:100 D.6823 ] [100]))) preproc.cpp:499 776 {*fop_df_comm_sse}
     (nil))
(insn 71 70 73 3 (set (reg:DF 21 xmm0 [orig:108 D.6823 ] [108])
        (plus:DF (reg:DF 21 xmm0 [orig:107 D.6823 ] [107])
            (reg:DF 22 xmm1 [orig:94 D.6823 ] [94]))) preproc.cpp:499 776 {*fop_df_comm_sse}
     (nil))
(call_insn 73 71 74 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:499 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 74 73 75 3 (set (reg:DF 0 ax [275])
        (reg:DF 21 xmm0)) preproc.cpp:499 128 {*movdf_internal}
     (nil))
(insn 75 74 76 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])
        (reg:DF 0 ax [275])) preproc.cpp:499 128 {*movdf_internal}
     (nil))
(insn 76 75 77 3 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:501 90 {*movsi_internal}
     (nil))
(insn 77 76 78 3 (set (reg:DI 0 ax [orig:109 D.6820 ] [109])
        (sign_extend:DI (reg:SI 0 ax [276]))) preproc.cpp:501 142 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 3 (parallel [
            (set (reg:DI 1 dx [orig:110 D.6820 ] [110])
                (ashift:DI (reg:DI 0 ax [orig:109 D.6820 ] [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 497 {*ashldi3_1}
     (nil))
(insn 79 78 80 3 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:501 89 {*movdi_internal}
     (nil))
(insn 80 79 81 3 (parallel [
            (set (reg/f:DI 0 ax [orig:111 D.6821 ] [111])
                (plus:DI (reg/f:DI 0 ax [277])
                    (reg:DI 1 dx [orig:110 D.6820 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:110 D.6820 ] [110]))
        (nil)))
(insn 81 80 82 3 (set (reg:SF 21 xmm0 [orig:112 D.6822 ] [112])
        (mem:SF (reg/f:DI 0 ax [orig:111 D.6821 ] [111]) [0 *_49+0 S4 A32])) preproc.cpp:501 129 {*movsf_internal}
     (nil))
(insn 82 81 83 3 (set (reg:DF 22 xmm1 [orig:113 D.6823 ] [113])
        (float_extend:DF (reg:SF 21 xmm0 [orig:112 D.6822 ] [112]))) preproc.cpp:501 152 {*extendsfdf2_sse}
     (nil))
(insn 83 82 84 3 (set (reg:SI 0 ax [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:501 90 {*movsi_internal}
     (nil))
(insn 84 83 85 3 (set (reg:DI 0 ax [orig:114 D.6824 ] [114])
        (sign_extend:DI (reg:SI 0 ax [278]))) preproc.cpp:501 142 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 3 (parallel [
            (set (reg:DI 0 ax [orig:115 D.6824 ] [115])
                (plus:DI (reg:DI 0 ax [orig:114 D.6824 ] [114])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 221 {*adddi_1}
     (nil))
(insn 86 85 87 3 (parallel [
            (set (reg:DI 1 dx [orig:116 D.6824 ] [116])
                (ashift:DI (reg:DI 0 ax [orig:115 D.6824 ] [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 497 {*ashldi3_1}
     (nil))
(insn 87 86 88 3 (set (reg/f:DI 0 ax [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:501 89 {*movdi_internal}
     (nil))
(insn 88 87 89 3 (parallel [
            (set (reg/f:DI 0 ax [orig:117 D.6821 ] [117])
                (plus:DI (reg/f:DI 0 ax [279])
                    (reg:DI 1 dx [orig:116 D.6824 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:501 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:116 D.6824 ] [116]))
        (nil)))
(insn 89 88 90 3 (set (reg:SF 21 xmm0 [orig:118 D.6822 ] [118])
        (mem:SF (reg/f:DI 0 ax [orig:117 D.6821 ] [117]) [0 *_55+0 S4 A32])) preproc.cpp:501 129 {*movsf_internal}
     (nil))
(insn 90 89 93 3 (set (reg:DF 21 xmm0 [orig:119 D.6823 ] [119])
        (float_extend:DF (reg:SF 21 xmm0 [orig:118 D.6822 ] [118]))) preproc.cpp:501 152 {*extendsfdf2_sse}
     (nil))
(call_insn 93 90 94 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b5719291100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:501 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 94 93 95 3 (set (reg:DF 0 ax [280])
        (reg:DF 21 xmm0)) preproc.cpp:501 128 {*movdf_internal}
     (nil))
(insn 95 94 96 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])
        (reg:DF 0 ax [280])) preproc.cpp:501 128 {*movdf_internal}
     (nil))
(insn 96 95 97 3 (set (reg:SI 0 ax [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:503 90 {*movsi_internal}
     (nil))
(insn 97 96 98 3 (set (reg:DI 0 ax [orig:120 D.6820 ] [120])
        (sign_extend:DI (reg:SI 0 ax [281]))) preproc.cpp:503 142 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 3 (parallel [
            (set (reg:DI 1 dx [orig:121 D.6820 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.6820 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:503 497 {*ashldi3_1}
     (nil))
(insn 99 98 100 3 (set (reg/f:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:503 89 {*movdi_internal}
     (nil))
(insn 100 99 101 3 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.6821 ] [122])
                (plus:DI (reg/f:DI 0 ax [282])
                    (reg:DI 1 dx [orig:121 D.6820 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:503 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.6820 ] [121]))
        (nil)))
(insn 101 100 102 3 (set (reg:SF 21 xmm0 [orig:123 D.6822 ] [123])
        (mem:SF (reg/f:DI 0 ax [orig:122 D.6821 ] [122]) [0 *_62+0 S4 A32])) preproc.cpp:503 129 {*movsf_internal}
     (nil))
(insn 102 101 103 3 (set (reg:DF 22 xmm1 [orig:124 D.6823 ] [124])
        (float_extend:DF (reg:SF 21 xmm0 [orig:123 D.6822 ] [123]))) preproc.cpp:503 152 {*extendsfdf2_sse}
     (nil))
(insn 103 102 104 3 (set (reg:SI 0 ax [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:503 90 {*movsi_internal}
     (nil))
(insn 104 103 105 3 (set (reg:DI 0 ax [orig:125 D.6820 ] [125])
        (sign_extend:DI (reg:SI 0 ax [283]))) preproc.cpp:503 142 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 3 (parallel [
            (set (reg:DI 1 dx [orig:126 D.6820 ] [126])
                (ashift:DI (reg:DI 0 ax [orig:125 D.6820 ] [125])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:503 497 {*ashldi3_1}
     (nil))
(insn 106 105 107 3 (set (reg/f:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:503 89 {*movdi_internal}
     (nil))
(insn 107 106 108 3 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.6821 ] [127])
                (plus:DI (reg/f:DI 0 ax [284])
                    (reg:DI 1 dx [orig:126 D.6820 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:503 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:126 D.6820 ] [126]))
        (nil)))
(insn 108 107 109 3 (set (reg:SF 21 xmm0 [orig:128 D.6822 ] [128])
        (mem:SF (reg/f:DI 0 ax [orig:127 D.6821 ] [127]) [0 *_67+0 S4 A32])) preproc.cpp:503 129 {*movsf_internal}
     (nil))
(insn 109 108 110 3 (set (reg:DF 21 xmm0 [orig:129 D.6823 ] [129])
        (float_extend:DF (reg:SF 21 xmm0 [orig:128 D.6822 ] [128]))) preproc.cpp:503 152 {*extendsfdf2_sse}
     (nil))
(insn 110 109 111 3 (set (reg:DF 22 xmm1 [orig:130 D.6823 ] [130])
        (mult:DF (reg:DF 22 xmm1 [orig:124 D.6823 ] [124])
            (reg:DF 21 xmm0 [orig:129 D.6823 ] [129]))) preproc.cpp:503 776 {*fop_df_comm_sse}
     (nil))
(insn 111 110 112 3 (set (reg:SI 0 ax [285])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:504 90 {*movsi_internal}
     (nil))
(insn 112 111 113 3 (set (reg:DI 0 ax [orig:131 D.6824 ] [131])
        (sign_extend:DI (reg:SI 0 ax [285]))) preproc.cpp:504 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 3 (parallel [
            (set (reg:DI 0 ax [orig:132 D.6824 ] [132])
                (plus:DI (reg:DI 0 ax [orig:131 D.6824 ] [131])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 221 {*adddi_1}
     (nil))
(insn 114 113 115 3 (parallel [
            (set (reg:DI 1 dx [orig:133 D.6824 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.6824 ] [132])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 497 {*ashldi3_1}
     (nil))
(insn 115 114 116 3 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:504 89 {*movdi_internal}
     (nil))
(insn 116 115 117 3 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.6821 ] [134])
                (plus:DI (reg/f:DI 0 ax [286])
                    (reg:DI 1 dx [orig:133 D.6824 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.6824 ] [133]))
        (nil)))
(insn 117 116 118 3 (set (reg:SF 21 xmm0 [orig:135 D.6822 ] [135])
        (mem:SF (reg/f:DI 0 ax [orig:134 D.6821 ] [134]) [0 *_74+0 S4 A32])) preproc.cpp:504 129 {*movsf_internal}
     (nil))
(insn 118 117 119 3 (set (reg:DF 23 xmm2 [orig:136 D.6823 ] [136])
        (float_extend:DF (reg:SF 21 xmm0 [orig:135 D.6822 ] [135]))) preproc.cpp:504 152 {*extendsfdf2_sse}
     (nil))
(insn 119 118 120 3 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:504 90 {*movsi_internal}
     (nil))
(insn 120 119 121 3 (set (reg:DI 0 ax [orig:137 D.6824 ] [137])
        (sign_extend:DI (reg:SI 0 ax [287]))) preproc.cpp:504 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 3 (parallel [
            (set (reg:DI 0 ax [orig:138 D.6824 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 D.6824 ] [137])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 221 {*adddi_1}
     (nil))
(insn 122 121 123 3 (parallel [
            (set (reg:DI 1 dx [orig:139 D.6824 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:138 D.6824 ] [138])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 497 {*ashldi3_1}
     (nil))
(insn 123 122 124 3 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:504 89 {*movdi_internal}
     (nil))
(insn 124 123 125 3 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.6821 ] [140])
                (plus:DI (reg/f:DI 0 ax [288])
                    (reg:DI 1 dx [orig:139 D.6824 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:504 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.6824 ] [139]))
        (nil)))
(insn 125 124 126 3 (set (reg:SF 21 xmm0 [orig:141 D.6822 ] [141])
        (mem:SF (reg/f:DI 0 ax [orig:140 D.6821 ] [140]) [0 *_80+0 S4 A32])) preproc.cpp:504 129 {*movsf_internal}
     (nil))
(insn 126 125 127 3 (set (reg:DF 21 xmm0 [orig:142 D.6823 ] [142])
        (float_extend:DF (reg:SF 21 xmm0 [orig:141 D.6822 ] [141]))) preproc.cpp:504 152 {*extendsfdf2_sse}
     (nil))
(insn 127 126 128 3 (set (reg:DF 21 xmm0 [orig:143 D.6823 ] [143])
        (mult:DF (reg:DF 21 xmm0 [orig:142 D.6823 ] [142])
            (reg:DF 23 xmm2 [orig:136 D.6823 ] [136]))) preproc.cpp:504 776 {*fop_df_comm_sse}
     (nil))
(insn 128 127 130 3 (set (reg:DF 21 xmm0 [orig:144 D.6823 ] [144])
        (plus:DF (reg:DF 21 xmm0 [orig:143 D.6823 ] [143])
            (reg:DF 22 xmm1 [orig:130 D.6823 ] [130]))) preproc.cpp:504 776 {*fop_df_comm_sse}
     (nil))
(call_insn 130 128 131 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:504 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 131 130 132 3 (set (reg:DF 0 ax [289])
        (reg:DF 21 xmm0)) preproc.cpp:504 128 {*movdf_internal}
     (nil))
(insn 132 131 133 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])
        (reg:DF 0 ax [289])) preproc.cpp:504 128 {*movdf_internal}
     (nil))
(insn 133 132 134 3 (set (reg:SI 0 ax [290])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 134 133 135 3 (set (reg:DI 0 ax [orig:145 D.6820 ] [145])
        (sign_extend:DI (reg:SI 0 ax [290]))) preproc.cpp:506 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 136 3 (parallel [
            (set (reg:DI 1 dx [orig:146 D.6820 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 D.6820 ] [145])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 497 {*ashldi3_1}
     (nil))
(insn 136 135 137 3 (set (reg/f:DI 0 ax [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:506 89 {*movdi_internal}
     (nil))
(insn 137 136 138 3 (parallel [
            (set (reg/f:DI 0 ax [orig:147 D.6821 ] [147])
                (plus:DI (reg/f:DI 0 ax [291])
                    (reg:DI 1 dx [orig:146 D.6820 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:146 D.6820 ] [146]))
        (nil)))
(insn 138 137 139 3 (set (reg:SF 21 xmm0 [orig:148 D.6822 ] [148])
        (mem:SF (reg/f:DI 0 ax [orig:147 D.6821 ] [147]) [0 *_88+0 S4 A32])) preproc.cpp:506 129 {*movsf_internal}
     (nil))
(insn 139 138 140 3 (set (reg:DF 22 xmm1 [orig:149 D.6823 ] [149])
        (float_extend:DF (reg:SF 21 xmm0 [orig:148 D.6822 ] [148]))) preproc.cpp:506 152 {*extendsfdf2_sse}
     (nil))
(insn 140 139 141 3 (set (reg:SI 0 ax [292])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:506 90 {*movsi_internal}
     (nil))
(insn 141 140 142 3 (set (reg:DI 0 ax [orig:150 D.6824 ] [150])
        (sign_extend:DI (reg:SI 0 ax [292]))) preproc.cpp:506 142 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 3 (parallel [
            (set (reg:DI 0 ax [orig:151 D.6824 ] [151])
                (plus:DI (reg:DI 0 ax [orig:150 D.6824 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 221 {*adddi_1}
     (nil))
(insn 143 142 144 3 (parallel [
            (set (reg:DI 1 dx [orig:152 D.6824 ] [152])
                (ashift:DI (reg:DI 0 ax [orig:151 D.6824 ] [151])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 497 {*ashldi3_1}
     (nil))
(insn 144 143 145 3 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:506 89 {*movdi_internal}
     (nil))
(insn 145 144 146 3 (parallel [
            (set (reg/f:DI 0 ax [orig:153 D.6821 ] [153])
                (plus:DI (reg/f:DI 0 ax [293])
                    (reg:DI 1 dx [orig:152 D.6824 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:506 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:152 D.6824 ] [152]))
        (nil)))
(insn 146 145 147 3 (set (reg:SF 21 xmm0 [orig:154 D.6822 ] [154])
        (mem:SF (reg/f:DI 0 ax [orig:153 D.6821 ] [153]) [0 *_94+0 S4 A32])) preproc.cpp:506 129 {*movsf_internal}
     (nil))
(insn 147 146 150 3 (set (reg:DF 21 xmm0 [orig:155 D.6823 ] [155])
        (float_extend:DF (reg:SF 21 xmm0 [orig:154 D.6822 ] [154]))) preproc.cpp:506 152 {*extendsfdf2_sse}
     (nil))
(call_insn 150 147 151 3 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b5719291100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:506 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 151 150 152 3 (set (reg:DF 0 ax [294])
        (reg:DF 21 xmm0)) preproc.cpp:506 128 {*movdf_internal}
     (nil))
(insn 152 151 153 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])
        (reg:DF 0 ax [294])) preproc.cpp:506 128 {*movdf_internal}
     (nil))
(insn 153 152 154 3 (set (reg/f:DI 0 ax [295])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 preprocess+0 S8 A64])) preproc.cpp:508 89 {*movdi_internal}
     (nil))
(insn 154 153 155 3 (set (reg:SI 0 ax [orig:156 D.6819 ] [156])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [295])
                (const_int 44 [0x2c])) [0 preprocess_98(D)->pre_quecc_points+0 S4 A32])) preproc.cpp:508 90 {*movsi_internal}
     (nil))
(insn 155 154 156 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:156 D.6819 ] [156])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) preproc.cpp:508 7 {*cmpsi_1}
     (nil))
(jump_insn 156 155 157 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 313)
            (pc))) preproc.cpp:508 596 {*jcc_1}
     (nil)
 -> 313)
;;  succ:       4 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310
(note 157 156 158 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 158 157 159 4 (set (reg:SI 0 ax [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:510 90 {*movsi_internal}
     (nil))
(insn 159 158 160 4 (set (reg:DI 0 ax [orig:157 D.6820 ] [157])
        (sign_extend:DI (reg:SI 0 ax [296]))) preproc.cpp:510 142 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 4 (parallel [
            (set (reg:DI 1 dx [orig:158 D.6820 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:157 D.6820 ] [157])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:510 497 {*ashldi3_1}
     (nil))
(insn 161 160 162 4 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:510 89 {*movdi_internal}
     (nil))
(insn 162 161 163 4 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.6821 ] [159])
                (plus:DI (reg/f:DI 0 ax [297])
                    (reg:DI 1 dx [orig:158 D.6820 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:510 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.6820 ] [158]))
        (nil)))
(insn 163 162 164 4 (set (reg:SF 21 xmm0 [orig:160 D.6822 ] [160])
        (mem:SF (reg/f:DI 0 ax [orig:159 D.6821 ] [159]) [0 *_103+0 S4 A32])) preproc.cpp:510 129 {*movsf_internal}
     (nil))
(insn 164 163 165 4 (set (reg:DF 22 xmm1 [orig:161 D.6823 ] [161])
        (float_extend:DF (reg:SF 21 xmm0 [orig:160 D.6822 ] [160]))) preproc.cpp:510 152 {*extendsfdf2_sse}
     (nil))
(insn 165 164 166 4 (set (reg:SI 0 ax [298])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:510 90 {*movsi_internal}
     (nil))
(insn 166 165 167 4 (set (reg:DI 0 ax [orig:162 D.6820 ] [162])
        (sign_extend:DI (reg:SI 0 ax [298]))) preproc.cpp:510 142 {*extendsidi2_rex64}
     (nil))
(insn 167 166 168 4 (parallel [
            (set (reg:DI 1 dx [orig:163 D.6820 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:162 D.6820 ] [162])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:510 497 {*ashldi3_1}
     (nil))
(insn 168 167 169 4 (set (reg/f:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:510 89 {*movdi_internal}
     (nil))
(insn 169 168 170 4 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.6821 ] [164])
                (plus:DI (reg/f:DI 0 ax [299])
                    (reg:DI 1 dx [orig:163 D.6820 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:510 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:163 D.6820 ] [163]))
        (nil)))
(insn 170 169 171 4 (set (reg:SF 21 xmm0 [orig:165 D.6822 ] [165])
        (mem:SF (reg/f:DI 0 ax [orig:164 D.6821 ] [164]) [0 *_108+0 S4 A32])) preproc.cpp:510 129 {*movsf_internal}
     (nil))
(insn 171 170 172 4 (set (reg:DF 21 xmm0 [orig:166 D.6823 ] [166])
        (float_extend:DF (reg:SF 21 xmm0 [orig:165 D.6822 ] [165]))) preproc.cpp:510 152 {*extendsfdf2_sse}
     (nil))
(insn 172 171 173 4 (set (reg:DF 22 xmm1 [orig:167 D.6823 ] [167])
        (mult:DF (reg:DF 22 xmm1 [orig:161 D.6823 ] [161])
            (reg:DF 21 xmm0 [orig:166 D.6823 ] [166]))) preproc.cpp:510 776 {*fop_df_comm_sse}
     (nil))
(insn 173 172 174 4 (set (reg:SI 0 ax [300])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:511 90 {*movsi_internal}
     (nil))
(insn 174 173 175 4 (set (reg:DI 0 ax [orig:168 D.6824 ] [168])
        (sign_extend:DI (reg:SI 0 ax [300]))) preproc.cpp:511 142 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 4 (parallel [
            (set (reg:DI 0 ax [orig:169 D.6824 ] [169])
                (plus:DI (reg:DI 0 ax [orig:168 D.6824 ] [168])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 221 {*adddi_1}
     (nil))
(insn 176 175 177 4 (parallel [
            (set (reg:DI 1 dx [orig:170 D.6824 ] [170])
                (ashift:DI (reg:DI 0 ax [orig:169 D.6824 ] [169])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 497 {*ashldi3_1}
     (nil))
(insn 177 176 178 4 (set (reg/f:DI 0 ax [301])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:511 89 {*movdi_internal}
     (nil))
(insn 178 177 179 4 (parallel [
            (set (reg/f:DI 0 ax [orig:171 D.6821 ] [171])
                (plus:DI (reg/f:DI 0 ax [301])
                    (reg:DI 1 dx [orig:170 D.6824 ] [170])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:170 D.6824 ] [170]))
        (nil)))
(insn 179 178 180 4 (set (reg:SF 21 xmm0 [orig:172 D.6822 ] [172])
        (mem:SF (reg/f:DI 0 ax [orig:171 D.6821 ] [171]) [0 *_115+0 S4 A32])) preproc.cpp:511 129 {*movsf_internal}
     (nil))
(insn 180 179 181 4 (set (reg:DF 23 xmm2 [orig:173 D.6823 ] [173])
        (float_extend:DF (reg:SF 21 xmm0 [orig:172 D.6822 ] [172]))) preproc.cpp:511 152 {*extendsfdf2_sse}
     (nil))
(insn 181 180 182 4 (set (reg:SI 0 ax [302])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:511 90 {*movsi_internal}
     (nil))
(insn 182 181 183 4 (set (reg:DI 0 ax [orig:174 D.6824 ] [174])
        (sign_extend:DI (reg:SI 0 ax [302]))) preproc.cpp:511 142 {*extendsidi2_rex64}
     (nil))
(insn 183 182 184 4 (parallel [
            (set (reg:DI 0 ax [orig:175 D.6824 ] [175])
                (plus:DI (reg:DI 0 ax [orig:174 D.6824 ] [174])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 221 {*adddi_1}
     (nil))
(insn 184 183 185 4 (parallel [
            (set (reg:DI 1 dx [orig:176 D.6824 ] [176])
                (ashift:DI (reg:DI 0 ax [orig:175 D.6824 ] [175])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 497 {*ashldi3_1}
     (nil))
(insn 185 184 186 4 (set (reg/f:DI 0 ax [303])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:511 89 {*movdi_internal}
     (nil))
(insn 186 185 187 4 (parallel [
            (set (reg/f:DI 0 ax [orig:177 D.6821 ] [177])
                (plus:DI (reg/f:DI 0 ax [303])
                    (reg:DI 1 dx [orig:176 D.6824 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:511 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:176 D.6824 ] [176]))
        (nil)))
(insn 187 186 188 4 (set (reg:SF 21 xmm0 [orig:178 D.6822 ] [178])
        (mem:SF (reg/f:DI 0 ax [orig:177 D.6821 ] [177]) [0 *_121+0 S4 A32])) preproc.cpp:511 129 {*movsf_internal}
     (nil))
(insn 188 187 189 4 (set (reg:DF 21 xmm0 [orig:179 D.6823 ] [179])
        (float_extend:DF (reg:SF 21 xmm0 [orig:178 D.6822 ] [178]))) preproc.cpp:511 152 {*extendsfdf2_sse}
     (nil))
(insn 189 188 190 4 (set (reg:DF 21 xmm0 [orig:180 D.6823 ] [180])
        (mult:DF (reg:DF 21 xmm0 [orig:179 D.6823 ] [179])
            (reg:DF 23 xmm2 [orig:173 D.6823 ] [173]))) preproc.cpp:511 776 {*fop_df_comm_sse}
     (nil))
(insn 190 189 192 4 (set (reg:DF 21 xmm0 [orig:181 D.6823 ] [181])
        (plus:DF (reg:DF 21 xmm0 [orig:180 D.6823 ] [180])
            (reg:DF 22 xmm1 [orig:167 D.6823 ] [167]))) preproc.cpp:511 776 {*fop_df_comm_sse}
     (nil))
(call_insn 192 190 193 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x2b57192d7900 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) preproc.cpp:511 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 193 192 194 4 (set (reg:DF 0 ax [304])
        (reg:DF 21 xmm0)) preproc.cpp:511 128 {*movdf_internal}
     (nil))
(insn 194 193 195 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64])
        (reg:DF 0 ax [304])) preproc.cpp:511 128 {*movdf_internal}
     (nil))
(insn 195 194 196 4 (set (reg:SI 0 ax [305])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:513 90 {*movsi_internal}
     (nil))
(insn 196 195 197 4 (set (reg:DI 0 ax [orig:182 D.6820 ] [182])
        (sign_extend:DI (reg:SI 0 ax [305]))) preproc.cpp:513 142 {*extendsidi2_rex64}
     (nil))
(insn 197 196 198 4 (parallel [
            (set (reg:DI 1 dx [orig:183 D.6820 ] [183])
                (ashift:DI (reg:DI 0 ax [orig:182 D.6820 ] [182])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 497 {*ashldi3_1}
     (nil))
(insn 198 197 199 4 (set (reg/f:DI 0 ax [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:513 89 {*movdi_internal}
     (nil))
(insn 199 198 200 4 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.6821 ] [184])
                (plus:DI (reg/f:DI 0 ax [306])
                    (reg:DI 1 dx [orig:183 D.6820 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:183 D.6820 ] [183]))
        (nil)))
(insn 200 199 201 4 (set (reg:SF 21 xmm0 [orig:185 D.6822 ] [185])
        (mem:SF (reg/f:DI 0 ax [orig:184 D.6821 ] [184]) [0 *_129+0 S4 A32])) preproc.cpp:513 129 {*movsf_internal}
     (nil))
(insn 201 200 202 4 (set (reg:DF 22 xmm1 [orig:186 D.6823 ] [186])
        (float_extend:DF (reg:SF 21 xmm0 [orig:185 D.6822 ] [185]))) preproc.cpp:513 152 {*extendsfdf2_sse}
     (nil))
(insn 202 201 203 4 (set (reg:SI 0 ax [307])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:513 90 {*movsi_internal}
     (nil))
(insn 203 202 204 4 (set (reg:DI 0 ax [orig:187 D.6824 ] [187])
        (sign_extend:DI (reg:SI 0 ax [307]))) preproc.cpp:513 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 4 (parallel [
            (set (reg:DI 0 ax [orig:188 D.6824 ] [188])
                (plus:DI (reg:DI 0 ax [orig:187 D.6824 ] [187])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 221 {*adddi_1}
     (nil))
(insn 205 204 206 4 (parallel [
            (set (reg:DI 1 dx [orig:189 D.6824 ] [189])
                (ashift:DI (reg:DI 0 ax [orig:188 D.6824 ] [188])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 497 {*ashldi3_1}
     (nil))
(insn 206 205 207 4 (set (reg/f:DI 0 ax [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 scratch+0 S8 A64])) preproc.cpp:513 89 {*movdi_internal}
     (nil))
(insn 207 206 208 4 (parallel [
            (set (reg/f:DI 0 ax [orig:190 D.6821 ] [190])
                (plus:DI (reg/f:DI 0 ax [308])
                    (reg:DI 1 dx [orig:189 D.6824 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:513 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -136 [0xffffffffffffff78])) [0 scratch+0 S8 A64])
            (reg:DI 1 dx [orig:189 D.6824 ] [189]))
        (nil)))
(insn 208 207 209 4 (set (reg:SF 21 xmm0 [orig:191 D.6822 ] [191])
        (mem:SF (reg/f:DI 0 ax [orig:190 D.6821 ] [190]) [0 *_135+0 S4 A32])) preproc.cpp:513 129 {*movsf_internal}
     (nil))
(insn 209 208 212 4 (set (reg:DF 21 xmm0 [orig:192 D.6823 ] [192])
        (float_extend:DF (reg:SF 21 xmm0 [orig:191 D.6822 ] [191]))) preproc.cpp:513 152 {*extendsfdf2_sse}
     (nil))
(call_insn 212 209 213 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x2b5719291100 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) preproc.cpp:513 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 213 212 214 4 (set (reg:DF 0 ax [309])
        (reg:DF 21 xmm0)) preproc.cpp:513 128 {*movdf_internal}
     (nil))
(insn 214 213 215 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64])
        (reg:DF 0 ax [309])) preproc.cpp:513 128 {*movdf_internal}
     (nil))
(insn 215 214 216 4 (set (reg:DF 21 xmm0 [310])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S8 A64])) preproc.cpp:519 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 9.9999999999999995474811182588625868561393872369080782e-7 [0x0.8637bd05af6c68p-19])
        (nil)))
(insn 216 215 217 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [310])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:519 56 {*cmpiudf_sse}
     (nil))
(jump_insn 217 216 221 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 404)
            (pc))) preproc.cpp:519 596 {*jcc_1}
     (nil)
 -> 404)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 311
(note 221 217 222 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 222 221 223 5 (set (reg:DF 0 ax [311])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:520 128 {*movdf_internal}
     (nil))
(insn 223 222 405 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [311])) preproc.cpp:520 128 {*movdf_internal}
     (nil))
(jump_insn 405 223 406 5 (set (pc)
        (label_ref 231)) 636 {jump}
     (nil)
 -> 231)
;;  succ:       7 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 406 405 404)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 312 313
(code_label 404 406 227 6 108 "" [1 uses])
(note 227 404 228 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 6 (set (reg:DF 21 xmm0 [313])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64])) preproc.cpp:522 128 {*movdf_internal}
     (nil))
(insn 229 228 414 6 (set (reg:DF 21 xmm0 [312])
        (div:DF (reg:DF 21 xmm0 [312])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:522 783 {*fop_df_1_sse}
     (nil))
(insn 414 229 230 6 (set (reg:DF 0 ax [312])
        (reg:DF 21 xmm0 [312])) preproc.cpp:522 128 {*movdf_internal}
     (nil))
(insn 230 414 231 6 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64])
        (reg:DF 0 ax [312])) preproc.cpp:522 128 {*movdf_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              5 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 314 315 316 317 318 319 320 321 322
(code_label 231 230 232 7 99 "" [1 uses])
(note 232 231 233 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 7 (set (reg:DF 21 xmm0 [315])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])) preproc.cpp:525 128 {*movdf_internal}
     (nil))
(insn 234 233 416 7 (set (reg:DF 21 xmm0 [314])
        (minus:DF (reg:DF 21 xmm0 [314])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64]))) preproc.cpp:525 783 {*fop_df_1_sse}
     (nil))
(insn 416 234 235 7 (set (reg:DF 0 ax [314])
        (reg:DF 21 xmm0 [314])) preproc.cpp:525 128 {*movdf_internal}
     (nil))
(insn 235 416 236 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])
        (reg:DF 0 ax [314])) preproc.cpp:525 128 {*movdf_internal}
     (nil))
(insn 236 235 237 7 (set (reg:SI 0 ax [316])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:527 90 {*movsi_internal}
     (nil))
(insn 237 236 238 7 (set (reg:DI 0 ax [orig:193 D.6820 ] [193])
        (sign_extend:DI (reg:SI 0 ax [316]))) preproc.cpp:527 142 {*extendsidi2_rex64}
     (nil))
(insn 238 237 239 7 (parallel [
            (set (reg:DI 1 dx [orig:194 D.6820 ] [194])
                (ashift:DI (reg:DI 0 ax [orig:193 D.6820 ] [193])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:527 497 {*ashldi3_1}
     (nil))
(insn 239 238 240 7 (set (reg/f:DI 0 ax [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:527 89 {*movdi_internal}
     (nil))
(insn 240 239 241 7 (parallel [
            (set (reg/f:DI 3 bx [orig:195 D.6821 ] [195])
                (plus:DI (reg:DI 1 dx [orig:194 D.6820 ] [194])
                    (reg/f:DI 0 ax [317])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:527 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:194 D.6820 ] [194]))
        (nil)))
(insn 241 240 417 7 (set (reg:SF 24 xmm3 [orig:196 D.6822 ] [196])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64]))) preproc.cpp:527 157 {*truncdfsf_fast_sse}
     (nil))
(insn 417 241 482 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 24 xmm3 [orig:196 D.6822 ] [196])) preproc.cpp:527 129 {*movsf_internal}
     (nil))
(note 482 417 466 7 NOTE_INSN_DELETED)
(note 466 482 242 7 NOTE_INSN_DELETED)
(insn 242 466 243 7 (set (reg:DF 0 ax [318])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])) preproc.cpp:527 128 {*movdf_internal}
     (nil))
(insn 243 242 418 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [318])) preproc.cpp:527 128 {*movdf_internal}
     (nil))
(insn 418 243 244 7 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:527 128 {*movdf_internal}
     (nil))
(call_insn/u 244 418 246 7 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b5719296400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:527 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 246 244 421 7 (set (reg:SF 21 xmm0 [orig:198 D.6822 ] [198])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:197 D.6823 ] [197]))) preproc.cpp:527 157 {*truncdfsf_fast_sse}
     (nil))
(note 421 246 480 7 NOTE_INSN_DELETED)
(note 480 421 247 7 NOTE_INSN_DELETED)
(insn 247 480 420 7 (set (reg:SF 21 xmm0 [orig:199 D.6822 ] [199])
        (mult:SF (reg:SF 21 xmm0 [orig:199 D.6822 ] [199])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:527 775 {*fop_sf_comm_sse}
     (nil))
(insn 420 247 248 7 (set (reg:SF 0 ax [orig:199 D.6822 ] [199])
        (reg:SF 21 xmm0 [orig:199 D.6822 ] [199])) preproc.cpp:527 129 {*movsf_internal}
     (nil))
(insn 248 420 249 7 (set (mem:SF (reg/f:DI 3 bx [orig:195 D.6821 ] [195]) [0 *_144+0 S4 A32])
        (reg:SF 0 ax [orig:199 D.6822 ] [199])) preproc.cpp:527 129 {*movsf_internal}
     (nil))
(insn 249 248 250 7 (set (reg:SI 0 ax [319])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:528 90 {*movsi_internal}
     (nil))
(insn 250 249 251 7 (set (reg:DI 0 ax [orig:200 D.6824 ] [200])
        (sign_extend:DI (reg:SI 0 ax [319]))) preproc.cpp:528 142 {*extendsidi2_rex64}
     (nil))
(insn 251 250 252 7 (parallel [
            (set (reg:DI 0 ax [orig:201 D.6824 ] [201])
                (plus:DI (reg:DI 0 ax [orig:200 D.6824 ] [200])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:528 221 {*adddi_1}
     (nil))
(insn 252 251 253 7 (parallel [
            (set (reg:DI 1 dx [orig:202 D.6824 ] [202])
                (ashift:DI (reg:DI 0 ax [orig:201 D.6824 ] [201])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:528 497 {*ashldi3_1}
     (nil))
(insn 253 252 254 7 (set (reg/f:DI 0 ax [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:528 89 {*movdi_internal}
     (nil))
(insn 254 253 255 7 (parallel [
            (set (reg/f:DI 3 bx [orig:203 D.6821 ] [203])
                (plus:DI (reg:DI 1 dx [orig:202 D.6824 ] [202])
                    (reg/f:DI 0 ax [320])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:528 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:202 D.6824 ] [202]))
        (nil)))
(insn 255 254 422 7 (set (reg:SF 25 xmm4 [orig:204 D.6822 ] [204])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])) [0 div_sup_mag+0 S8 A64]))) preproc.cpp:528 157 {*truncdfsf_fast_sse}
     (nil))
(insn 422 255 481 7 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 25 xmm4 [orig:204 D.6822 ] [204])) preproc.cpp:528 129 {*movsf_internal}
     (nil))
(note 481 422 465 7 NOTE_INSN_DELETED)
(note 465 481 256 7 NOTE_INSN_DELETED)
(insn 256 465 257 7 (set (reg:DF 0 ax [321])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 div_sup_phase+0 S8 A64])) preproc.cpp:528 128 {*movdf_internal}
     (nil))
(insn 257 256 423 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [321])) preproc.cpp:528 128 {*movdf_internal}
     (nil))
(insn 423 257 258 7 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:528 128 {*movdf_internal}
     (nil))
(call_insn/u 258 423 260 7 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b57192d4e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:528 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 260 258 426 7 (set (reg:SF 21 xmm0 [orig:206 D.6822 ] [206])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:205 D.6823 ] [205]))) preproc.cpp:528 157 {*truncdfsf_fast_sse}
     (nil))
(note 426 260 479 7 NOTE_INSN_DELETED)
(note 479 426 261 7 NOTE_INSN_DELETED)
(insn 261 479 425 7 (set (reg:SF 21 xmm0 [orig:207 D.6822 ] [207])
        (mult:SF (reg:SF 21 xmm0 [orig:207 D.6822 ] [207])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:528 775 {*fop_sf_comm_sse}
     (nil))
(insn 425 261 262 7 (set (reg:SF 0 ax [orig:207 D.6822 ] [207])
        (reg:SF 21 xmm0 [orig:207 D.6822 ] [207])) preproc.cpp:528 129 {*movsf_internal}
     (nil))
(insn 262 425 263 7 (set (mem:SF (reg/f:DI 3 bx [orig:203 D.6821 ] [203]) [0 *_152+0 S4 A32])
        (reg:SF 0 ax [orig:207 D.6822 ] [207])) preproc.cpp:528 129 {*movsf_internal}
     (nil))
(insn 263 262 264 7 (set (reg:DF 21 xmm0 [322])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC16") [flags 0x2]) [0  S8 A64])) preproc.cpp:533 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 9.9999999999999995474811182588625868561393872369080782e-7 [0x0.8637bd05af6c68p-19])
        (nil)))
(insn 264 263 265 7 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 21 xmm0 [322])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:533 56 {*cmpiudf_sse}
     (nil))
(jump_insn 265 264 269 7 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 407)
            (pc))) preproc.cpp:533 596 {*jcc_1}
     (nil)
 -> 407)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 323
(note 269 265 270 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 270 269 271 8 (set (reg:DF 0 ax [323])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC9") [flags 0x2]) [0  S8 A64])) preproc.cpp:534 128 {*movdf_internal}
     (nil))
(insn 271 270 408 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [323])) preproc.cpp:534 128 {*movdf_internal}
     (nil))
(jump_insn 408 271 409 8 (set (pc)
        (label_ref 279)) 636 {jump}
     (nil)
 -> 279)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 409 408 407)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 324 325
(code_label 407 409 275 9 109 "" [1 uses])
(note 275 407 276 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 9 (set (reg:DF 21 xmm0 [325])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64])) preproc.cpp:536 128 {*movdf_internal}
     (nil))
(insn 277 276 428 9 (set (reg:DF 21 xmm0 [324])
        (div:DF (reg:DF 21 xmm0 [324])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 mag_scratch+0 S8 A64]))) preproc.cpp:536 783 {*fop_df_1_sse}
     (nil))
(insn 428 277 278 9 (set (reg:DF 0 ax [324])
        (reg:DF 21 xmm0 [324])) preproc.cpp:536 128 {*movdf_internal}
     (nil))
(insn 278 428 279 9 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64])
        (reg:DF 0 ax [324])) preproc.cpp:536 128 {*movdf_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 326 327 328 329 330 331 332 333
(code_label 279 278 280 10 102 "" [1 uses])
(note 280 279 281 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 281 280 282 10 (set (reg:DF 21 xmm0 [327])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])) preproc.cpp:539 128 {*movdf_internal}
     (nil))
(insn 282 281 430 10 (set (reg:DF 21 xmm0 [326])
        (minus:DF (reg:DF 21 xmm0 [326])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [0 phase_scratch+0 S8 A64]))) preproc.cpp:539 783 {*fop_df_1_sse}
     (nil))
(insn 430 282 283 10 (set (reg:DF 0 ax [326])
        (reg:DF 21 xmm0 [326])) preproc.cpp:539 128 {*movdf_internal}
     (nil))
(insn 283 430 284 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])
        (reg:DF 0 ax [326])) preproc.cpp:539 128 {*movdf_internal}
     (nil))
(insn 284 283 285 10 (set (reg:SI 0 ax [328])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:541 90 {*movsi_internal}
     (nil))
(insn 285 284 286 10 (set (reg:DI 0 ax [orig:208 D.6820 ] [208])
        (sign_extend:DI (reg:SI 0 ax [328]))) preproc.cpp:541 142 {*extendsidi2_rex64}
     (nil))
(insn 286 285 287 10 (parallel [
            (set (reg:DI 1 dx [orig:209 D.6820 ] [209])
                (ashift:DI (reg:DI 0 ax [orig:208 D.6820 ] [208])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:541 497 {*ashldi3_1}
     (nil))
(insn 287 286 288 10 (set (reg/f:DI 0 ax [329])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:541 89 {*movdi_internal}
     (nil))
(insn 288 287 289 10 (parallel [
            (set (reg/f:DI 3 bx [orig:210 D.6821 ] [210])
                (plus:DI (reg:DI 1 dx [orig:209 D.6820 ] [209])
                    (reg/f:DI 0 ax [329])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:541 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:209 D.6820 ] [209]))
        (nil)))
(insn 289 288 431 10 (set (reg:SF 26 xmm5 [orig:211 D.6822 ] [211])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64]))) preproc.cpp:541 157 {*truncdfsf_fast_sse}
     (nil))
(insn 431 289 484 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 26 xmm5 [orig:211 D.6822 ] [211])) preproc.cpp:541 129 {*movsf_internal}
     (nil))
(note 484 431 468 10 NOTE_INSN_DELETED)
(note 468 484 290 10 NOTE_INSN_DELETED)
(insn 290 468 291 10 (set (reg:DF 0 ax [330])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])) preproc.cpp:541 128 {*movdf_internal}
     (nil))
(insn 291 290 432 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [330])) preproc.cpp:541 128 {*movdf_internal}
     (nil))
(insn 432 291 292 10 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:541 128 {*movdf_internal}
     (nil))
(call_insn/u 292 432 294 10 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b5719296400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:541 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 294 292 435 10 (set (reg:SF 21 xmm0 [orig:213 D.6822 ] [213])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:212 D.6823 ] [212]))) preproc.cpp:541 157 {*truncdfsf_fast_sse}
     (nil))
(note 435 294 478 10 NOTE_INSN_DELETED)
(note 478 435 295 10 NOTE_INSN_DELETED)
(insn 295 478 434 10 (set (reg:SF 21 xmm0 [orig:214 D.6822 ] [214])
        (mult:SF (reg:SF 21 xmm0 [orig:214 D.6822 ] [214])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:541 775 {*fop_sf_comm_sse}
     (nil))
(insn 434 295 296 10 (set (reg:SF 0 ax [orig:214 D.6822 ] [214])
        (reg:SF 21 xmm0 [orig:214 D.6822 ] [214])) preproc.cpp:541 129 {*movsf_internal}
     (nil))
(insn 296 434 297 10 (set (mem:SF (reg/f:DI 3 bx [orig:210 D.6821 ] [210]) [0 *_162+0 S4 A32])
        (reg:SF 0 ax [orig:214 D.6822 ] [214])) preproc.cpp:541 129 {*movsf_internal}
     (nil))
(insn 297 296 298 10 (set (reg:SI 0 ax [331])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:542 90 {*movsi_internal}
     (nil))
(insn 298 297 299 10 (set (reg:DI 0 ax [orig:215 D.6824 ] [215])
        (sign_extend:DI (reg:SI 0 ax [331]))) preproc.cpp:542 142 {*extendsidi2_rex64}
     (nil))
(insn 299 298 300 10 (parallel [
            (set (reg:DI 0 ax [orig:216 D.6824 ] [216])
                (plus:DI (reg:DI 0 ax [orig:215 D.6824 ] [215])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:542 221 {*adddi_1}
     (nil))
(insn 300 299 301 10 (parallel [
            (set (reg:DI 1 dx [orig:217 D.6824 ] [217])
                (ashift:DI (reg:DI 0 ax [orig:216 D.6824 ] [216])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:542 497 {*ashldi3_1}
     (nil))
(insn 301 300 302 10 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:542 89 {*movdi_internal}
     (nil))
(insn 302 301 303 10 (parallel [
            (set (reg/f:DI 3 bx [orig:218 D.6821 ] [218])
                (plus:DI (reg:DI 1 dx [orig:217 D.6824 ] [217])
                    (reg/f:DI 0 ax [332])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:542 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:217 D.6824 ] [217]))
        (nil)))
(insn 303 302 436 10 (set (reg:SF 27 xmm6 [orig:219 D.6822 ] [219])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 div_unsup_mag+0 S8 A64]))) preproc.cpp:542 157 {*truncdfsf_fast_sse}
     (nil))
(insn 436 303 483 10 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 27 xmm6 [orig:219 D.6822 ] [219])) preproc.cpp:542 129 {*movsf_internal}
     (nil))
(note 483 436 467 10 NOTE_INSN_DELETED)
(note 467 483 304 10 NOTE_INSN_DELETED)
(insn 304 467 305 10 (set (reg:DF 0 ax [333])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 div_unsup_phase+0 S8 A64])) preproc.cpp:542 128 {*movdf_internal}
     (nil))
(insn 305 304 437 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [333])) preproc.cpp:542 128 {*movdf_internal}
     (nil))
(insn 437 305 306 10 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:542 128 {*movdf_internal}
     (nil))
(call_insn/u 306 437 308 10 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b57192d4e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:542 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 308 306 440 10 (set (reg:SF 21 xmm0 [orig:221 D.6822 ] [221])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:220 D.6823 ] [220]))) preproc.cpp:542 157 {*truncdfsf_fast_sse}
     (nil))
(note 440 308 477 10 NOTE_INSN_DELETED)
(note 477 440 309 10 NOTE_INSN_DELETED)
(insn 309 477 439 10 (set (reg:SF 21 xmm0 [orig:222 D.6822 ] [222])
        (mult:SF (reg:SF 21 xmm0 [orig:222 D.6822 ] [222])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:542 775 {*fop_sf_comm_sse}
     (nil))
(insn 439 309 310 10 (set (reg:SF 0 ax [orig:222 D.6822 ] [222])
        (reg:SF 21 xmm0 [orig:222 D.6822 ] [222])) preproc.cpp:542 129 {*movsf_internal}
     (nil))
(insn 310 439 410 10 (set (mem:SF (reg/f:DI 3 bx [orig:218 D.6821 ] [218]) [0 *_170+0 S4 A32])
        (reg:SF 0 ax [orig:222 D.6822 ] [222])) preproc.cpp:542 129 {*movsf_internal}
     (nil))
(jump_insn 410 310 411 10 (set (pc)
        (label_ref 375)) 636 {jump}
     (nil)
 -> 375)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 411 410 313)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349
(code_label 313 411 314 11 96 "" [1 uses])
(note 314 313 315 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 315 314 316 11 (set (reg:DF 21 xmm0 [335])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 phase_sup+0 S8 A64])) preproc.cpp:545 128 {*movdf_internal}
     (nil))
(insn 316 315 442 11 (set (reg:DF 21 xmm0 [334])
        (minus:DF (reg:DF 21 xmm0 [334])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64]))) preproc.cpp:545 783 {*fop_df_1_sse}
     (nil))
(insn 442 316 317 11 (set (reg:DF 0 ax [334])
        (reg:DF 21 xmm0 [334])) preproc.cpp:545 128 {*movdf_internal}
     (nil))
(insn 317 442 318 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])
        (reg:DF 0 ax [334])) preproc.cpp:545 128 {*movdf_internal}
     (nil))
(insn 318 317 319 11 (set (reg:DF 21 xmm0 [337])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64])) preproc.cpp:546 128 {*movdf_internal}
     (nil))
(insn 319 318 444 11 (set (reg:DF 21 xmm0 [336])
        (minus:DF (reg:DF 21 xmm0 [336])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -72 [0xffffffffffffffb8])) [0 phase_unsup+0 S8 A64]))) preproc.cpp:546 783 {*fop_df_1_sse}
     (nil))
(insn 444 319 320 11 (set (reg:DF 0 ax [336])
        (reg:DF 21 xmm0 [336])) preproc.cpp:546 128 {*movdf_internal}
     (nil))
(insn 320 444 321 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])
        (reg:DF 0 ax [336])) preproc.cpp:546 128 {*movdf_internal}
     (nil))
(insn 321 320 322 11 (set (reg:SI 0 ax [338])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:548 90 {*movsi_internal}
     (nil))
(insn 322 321 323 11 (set (reg:DI 0 ax [orig:223 D.6820 ] [223])
        (sign_extend:DI (reg:SI 0 ax [338]))) preproc.cpp:548 142 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 11 (parallel [
            (set (reg:DI 1 dx [orig:224 D.6820 ] [224])
                (ashift:DI (reg:DI 0 ax [orig:223 D.6820 ] [223])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:548 497 {*ashldi3_1}
     (nil))
(insn 324 323 325 11 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:548 89 {*movdi_internal}
     (nil))
(insn 325 324 326 11 (parallel [
            (set (reg/f:DI 3 bx [orig:225 D.6821 ] [225])
                (plus:DI (reg:DI 1 dx [orig:224 D.6820 ] [224])
                    (reg/f:DI 0 ax [339])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:548 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:224 D.6820 ] [224]))
        (nil)))
(insn 326 325 445 11 (set (reg:SF 28 xmm7 [orig:226 D.6822 ] [226])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64]))) preproc.cpp:548 157 {*truncdfsf_fast_sse}
     (nil))
(insn 445 326 488 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 28 xmm7 [orig:226 D.6822 ] [226])) preproc.cpp:548 129 {*movsf_internal}
     (nil))
(note 488 445 472 11 NOTE_INSN_DELETED)
(note 472 488 327 11 NOTE_INSN_DELETED)
(insn 327 472 328 11 (set (reg:DF 0 ax [340])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) preproc.cpp:548 128 {*movdf_internal}
     (nil))
(insn 328 327 446 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [340])) preproc.cpp:548 128 {*movdf_internal}
     (nil))
(insn 446 328 329 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:548 128 {*movdf_internal}
     (nil))
(call_insn/u 329 446 331 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b5719296400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:548 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 331 329 449 11 (set (reg:SF 21 xmm0 [orig:228 D.6822 ] [228])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:227 D.6823 ] [227]))) preproc.cpp:548 157 {*truncdfsf_fast_sse}
     (nil))
(note 449 331 476 11 NOTE_INSN_DELETED)
(note 476 449 332 11 NOTE_INSN_DELETED)
(insn 332 476 448 11 (set (reg:SF 21 xmm0 [orig:229 D.6822 ] [229])
        (mult:SF (reg:SF 21 xmm0 [orig:229 D.6822 ] [229])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:548 775 {*fop_sf_comm_sse}
     (nil))
(insn 448 332 333 11 (set (reg:SF 0 ax [orig:229 D.6822 ] [229])
        (reg:SF 21 xmm0 [orig:229 D.6822 ] [229])) preproc.cpp:548 129 {*movsf_internal}
     (nil))
(insn 333 448 334 11 (set (mem:SF (reg/f:DI 3 bx [orig:225 D.6821 ] [225]) [0 *_179+0 S4 A32])
        (reg:SF 0 ax [orig:229 D.6822 ] [229])) preproc.cpp:548 129 {*movsf_internal}
     (nil))
(insn 334 333 335 11 (set (reg:SI 0 ax [341])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:549 90 {*movsi_internal}
     (nil))
(insn 335 334 336 11 (set (reg:DI 0 ax [orig:230 D.6824 ] [230])
        (sign_extend:DI (reg:SI 0 ax [341]))) preproc.cpp:549 142 {*extendsidi2_rex64}
     (nil))
(insn 336 335 337 11 (parallel [
            (set (reg:DI 0 ax [orig:231 D.6824 ] [231])
                (plus:DI (reg:DI 0 ax [orig:230 D.6824 ] [230])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:549 221 {*adddi_1}
     (nil))
(insn 337 336 338 11 (parallel [
            (set (reg:DI 1 dx [orig:232 D.6824 ] [232])
                (ashift:DI (reg:DI 0 ax [orig:231 D.6824 ] [231])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:549 497 {*ashldi3_1}
     (nil))
(insn 338 337 339 11 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 sup_data+0 S8 A64])) preproc.cpp:549 89 {*movdi_internal}
     (nil))
(insn 339 338 340 11 (parallel [
            (set (reg/f:DI 3 bx [orig:233 D.6821 ] [233])
                (plus:DI (reg:DI 1 dx [orig:232 D.6824 ] [232])
                    (reg/f:DI 0 ax [342])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:549 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 sup_data+0 S8 A64])
            (reg:DI 1 dx [orig:232 D.6824 ] [232]))
        (nil)))
(insn 340 339 450 11 (set (reg:SF 24 xmm3 [orig:234 D.6822 ] [234])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -96 [0xffffffffffffffa0])) [0 mag_sup+0 S8 A64]))) preproc.cpp:549 157 {*truncdfsf_fast_sse}
     (nil))
(insn 450 340 487 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 24 xmm3 [orig:234 D.6822 ] [234])) preproc.cpp:549 129 {*movsf_internal}
     (nil))
(note 487 450 471 11 NOTE_INSN_DELETED)
(note 471 487 341 11 NOTE_INSN_DELETED)
(insn 341 471 342 11 (set (reg:DF 0 ax [343])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 result_phase_cor_sup+0 S8 A64])) preproc.cpp:549 128 {*movdf_internal}
     (nil))
(insn 342 341 451 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [343])) preproc.cpp:549 128 {*movdf_internal}
     (nil))
(insn 451 342 343 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:549 128 {*movdf_internal}
     (nil))
(call_insn/u 343 451 345 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b57192d4e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:549 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 345 343 454 11 (set (reg:SF 21 xmm0 [orig:236 D.6822 ] [236])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:235 D.6823 ] [235]))) preproc.cpp:549 157 {*truncdfsf_fast_sse}
     (nil))
(note 454 345 475 11 NOTE_INSN_DELETED)
(note 475 454 346 11 NOTE_INSN_DELETED)
(insn 346 475 453 11 (set (reg:SF 21 xmm0 [orig:237 D.6822 ] [237])
        (mult:SF (reg:SF 21 xmm0 [orig:237 D.6822 ] [237])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:549 775 {*fop_sf_comm_sse}
     (nil))
(insn 453 346 347 11 (set (reg:SF 0 ax [orig:237 D.6822 ] [237])
        (reg:SF 21 xmm0 [orig:237 D.6822 ] [237])) preproc.cpp:549 129 {*movsf_internal}
     (nil))
(insn 347 453 348 11 (set (mem:SF (reg/f:DI 3 bx [orig:233 D.6821 ] [233]) [0 *_187+0 S4 A32])
        (reg:SF 0 ax [orig:237 D.6822 ] [237])) preproc.cpp:549 129 {*movsf_internal}
     (nil))
(insn 348 347 349 11 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:551 90 {*movsi_internal}
     (nil))
(insn 349 348 350 11 (set (reg:DI 0 ax [orig:238 D.6820 ] [238])
        (sign_extend:DI (reg:SI 0 ax [344]))) preproc.cpp:551 142 {*extendsidi2_rex64}
     (nil))
(insn 350 349 351 11 (parallel [
            (set (reg:DI 1 dx [orig:239 D.6820 ] [239])
                (ashift:DI (reg:DI 0 ax [orig:238 D.6820 ] [238])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:551 497 {*ashldi3_1}
     (nil))
(insn 351 350 352 11 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:551 89 {*movdi_internal}
     (nil))
(insn 352 351 353 11 (parallel [
            (set (reg/f:DI 3 bx [orig:240 D.6821 ] [240])
                (plus:DI (reg:DI 1 dx [orig:239 D.6820 ] [239])
                    (reg/f:DI 0 ax [345])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:551 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:239 D.6820 ] [239]))
        (nil)))
(insn 353 352 455 11 (set (reg:SF 25 xmm4 [orig:241 D.6822 ] [241])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64]))) preproc.cpp:551 157 {*truncdfsf_fast_sse}
     (nil))
(insn 455 353 486 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 25 xmm4 [orig:241 D.6822 ] [241])) preproc.cpp:551 129 {*movsf_internal}
     (nil))
(note 486 455 470 11 NOTE_INSN_DELETED)
(note 470 486 354 11 NOTE_INSN_DELETED)
(insn 354 470 355 11 (set (reg:DF 0 ax [346])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) preproc.cpp:551 128 {*movdf_internal}
     (nil))
(insn 355 354 456 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [346])) preproc.cpp:551 128 {*movdf_internal}
     (nil))
(insn 456 355 356 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:551 128 {*movdf_internal}
     (nil))
(call_insn/u 356 456 358 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x2b5719296400 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) preproc.cpp:551 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 358 356 459 11 (set (reg:SF 21 xmm0 [orig:243 D.6822 ] [243])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:242 D.6823 ] [242]))) preproc.cpp:551 157 {*truncdfsf_fast_sse}
     (nil))
(note 459 358 474 11 NOTE_INSN_DELETED)
(note 474 459 359 11 NOTE_INSN_DELETED)
(insn 359 474 458 11 (set (reg:SF 21 xmm0 [orig:244 D.6822 ] [244])
        (mult:SF (reg:SF 21 xmm0 [orig:244 D.6822 ] [244])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:551 775 {*fop_sf_comm_sse}
     (nil))
(insn 458 359 360 11 (set (reg:SF 0 ax [orig:244 D.6822 ] [244])
        (reg:SF 21 xmm0 [orig:244 D.6822 ] [244])) preproc.cpp:551 129 {*movsf_internal}
     (nil))
(insn 360 458 361 11 (set (mem:SF (reg/f:DI 3 bx [orig:240 D.6821 ] [240]) [0 *_194+0 S4 A32])
        (reg:SF 0 ax [orig:244 D.6822 ] [244])) preproc.cpp:551 129 {*movsf_internal}
     (nil))
(insn 361 360 362 11 (set (reg:SI 0 ax [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])) preproc.cpp:552 90 {*movsi_internal}
     (nil))
(insn 362 361 363 11 (set (reg:DI 0 ax [orig:245 D.6824 ] [245])
        (sign_extend:DI (reg:SI 0 ax [347]))) preproc.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 363 362 364 11 (parallel [
            (set (reg:DI 0 ax [orig:246 D.6824 ] [246])
                (plus:DI (reg:DI 0 ax [orig:245 D.6824 ] [245])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:552 221 {*adddi_1}
     (nil))
(insn 364 363 365 11 (parallel [
            (set (reg:DI 1 dx [orig:247 D.6824 ] [247])
                (ashift:DI (reg:DI 0 ax [orig:246 D.6824 ] [246])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:552 497 {*ashldi3_1}
     (nil))
(insn 365 364 366 11 (set (reg/f:DI 0 ax [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 unsup_data+0 S8 A64])) preproc.cpp:552 89 {*movdi_internal}
     (nil))
(insn 366 365 367 11 (parallel [
            (set (reg/f:DI 3 bx [orig:248 D.6821 ] [248])
                (plus:DI (reg:DI 1 dx [orig:247 D.6824 ] [247])
                    (reg/f:DI 0 ax [348])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:552 221 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 unsup_data+0 S8 A64])
            (reg:DI 1 dx [orig:247 D.6824 ] [247]))
        (nil)))
(insn 367 366 460 11 (set (reg:SF 26 xmm5 [orig:249 D.6822 ] [249])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 mag_unsup+0 S8 A64]))) preproc.cpp:552 157 {*truncdfsf_fast_sse}
     (nil))
(insn 460 367 485 11 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32])
        (reg:SF 26 xmm5 [orig:249 D.6822 ] [249])) preproc.cpp:552 129 {*movsf_internal}
     (nil))
(note 485 460 469 11 NOTE_INSN_DELETED)
(note 469 485 368 11 NOTE_INSN_DELETED)
(insn 368 469 369 11 (set (reg:DF 0 ax [349])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 result_phase_cor_unsup+0 S8 A64])) preproc.cpp:552 128 {*movdf_internal}
     (nil))
(insn 369 368 461 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])
        (reg:DF 0 ax [349])) preproc.cpp:552 128 {*movdf_internal}
     (nil))
(insn 461 369 370 11 (set (reg:DF 21 xmm0)
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [0 %sfp+-168 S8 A64])) preproc.cpp:552 128 {*movdf_internal}
     (nil))
(call_insn/u 370 461 372 11 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x2b57192d4e00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) preproc.cpp:552 649 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 372 370 464 11 (set (reg:SF 21 xmm0 [orig:251 D.6822 ] [251])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:250 D.6823 ] [250]))) preproc.cpp:552 157 {*truncdfsf_fast_sse}
     (nil))
(note 464 372 473 11 NOTE_INSN_DELETED)
(note 473 464 373 11 NOTE_INSN_DELETED)
(insn 373 473 463 11 (set (reg:SF 21 xmm0 [orig:252 D.6822 ] [252])
        (mult:SF (reg:SF 21 xmm0 [orig:252 D.6822 ] [252])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -172 [0xffffffffffffff54])) [0 %sfp+-156 S4 A32]))) preproc.cpp:552 775 {*fop_sf_comm_sse}
     (nil))
(insn 463 373 374 11 (set (reg:SF 0 ax [orig:252 D.6822 ] [252])
        (reg:SF 21 xmm0 [orig:252 D.6822 ] [252])) preproc.cpp:552 129 {*movsf_internal}
     (nil))
(insn 374 463 375 11 (set (mem:SF (reg/f:DI 3 bx [orig:248 D.6821 ] [248]) [0 *_202+0 S4 A32])
        (reg:SF 0 ax [orig:252 D.6822 ] [252])) preproc.cpp:552 129 {*movsf_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              10 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 375 374 376 12 103 "" [1 uses])
(note 376 375 377 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 377 376 378 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) preproc.cpp:496 220 {*addsi_1}
     (nil))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              2 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83 350
(code_label 378 377 379 13 95 "" [1 uses])
(note 379 378 380 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 381 13 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 procpar_info+0 S8 A64])) preproc.cpp:496 89 {*movdi_internal}
     (nil))
(insn 381 380 383 13 (set (reg:SI 0 ax [orig:83 D.6819 ] [83])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [350])
                (const_int 300 [0x12c])) [0 procpar_info_18(D)->num_points+0 S4 A32])) preproc.cpp:496 90 {*movsi_internal}
     (nil))
(insn 383 381 384 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 D.6819 ] [83])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -116 [0xffffffffffffff8c])) [0 i+0 S4 A32]))) preproc.cpp:496 7 {*cmpsi_1}
     (nil))
(jump_insn 384 383 385 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 382)
            (pc))) preproc.cpp:496 596 {*jcc_1}
     (nil)
 -> 382)
;;  succ:       3
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 253 254
(note 385 384 386 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 389 14 (set (reg:SI 0 ax [orig:253 D.6819 ] [253])
        (const_int 1 [0x1])) preproc.cpp:556 90 {*movsi_internal}
     (nil))
(insn 389 386 393 14 (set (reg:SI 0 ax [orig:254 <retval> ] [254])
        (reg:SI 0 ax [orig:253 D.6819 ] [253])) preproc.cpp:556 90 {*movsi_internal}
     (nil))
(insn 393 389 394 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:254 <retval> ] [254])) preproc.cpp:557 90 {*movsi_internal}
     (nil))
(insn 394 393 412 14 (use (reg/i:SI 0 ax)) preproc.cpp:557 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 412 394 0 NOTE_INSN_DELETED)
